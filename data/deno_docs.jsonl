{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Docs\"?\n\nAssistant: Deno, the open-source runtime for TypeScript and JavaScript. Features built-in dev tools, powerful platform APIs, and native support for TypeScript and JSX.\n\nHere's a detailed explanation:\n\n\n## Deno Runtime\nDeno (/ˈdiːnoʊ/, pronounced dee-no) is an open source JavaScript, TypeScript, and WebAssembly runtime with secure defaults and a great developer experience. It's built on V8, Rust, and Tokio.\n\n## Deno basics\nNew to Deno? This is the place to start.\n\n## Configuration\nCustomizations for Deno’s built-in TypeScript compiler, formatter, and linter.\n\n## Testing in Deno\nAll about Deno’s built-in test runner for JavaScript or TypeScript code.\n\n## Examples\nA collection of annotated Deno examples, to be used as a reference for how to build with Deno, or as a guide to learn about many of Deno's features. Find more examples in the Examples section.\n\n## API reference\nDeno, Web, and Node API reference documentation, built for the Deno experience. Explore the APIs available in Deno in the API reference section.\n\n## Deno Deploy\nServerless platform for deploying JavaScript code to a fast, global edge network. Supports Deno APIs and Node.js / npm modules.\n\n## Subhosting\nDeno Subhosting is a robust platform designed to allow Software as a Service (SaaS) providers to securely run code written by their customers.\n\n## Help\nGet help from the Deno team or connect with our community.\n", "metadata": {"source_url": "https://docs.deno.com", "title": "Deno Docs", "description": "Deno, the open-source runtime for TypeScript and JavaScript. Features built-in dev tools, powerful platform APIs, and native support for TypeScript and JSX.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 22:49:05", "type": "overview", "page_metadata": {"title": "", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "scrapeId": "5a58e815-c37d-4981-98dd-6f0f87cf140c", "sourceURL": "https://docs.deno.com", "url": "https://docs.deno.com/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno Docs\"?\n\nAssistant: Here are some code examples:\n\n### Deno Examples\n```yaml\n[Importing modules from npm](https://docs.deno.com/examples/npm) [Hello World](https://docs.deno.com/examples/hello_world) [Using Node.js built-in modules](https://docs.deno.com/examples/node_built_in) [Manipulating & Parsing URLs](https://docs.deno.com/examples/url_parsing) [HTTP Server: Hello World](https://docs.deno.com/examples/http_server) [HTTP Server: WebSockets](https://docs.deno.com/examples/http_server_websocket) [HTTP Server: Streaming](https://docs.deno.com/examples/http_server_streaming) [TCP Connector: Ping](https://docs.deno.com/examples/tcp_connector) [Command Line Arguments](https://docs.deno.com/examples/command_line_arguments) [Environment Variables](https://docs.deno.com/examples/environment_variables) [Reading Files](https://docs.deno.com/examples/reading_files) [Walking directories](https://docs.deno.com/examples/walking_directories) [KV](https://docs.deno.com/examples/kv) [Queues](https://docs.deno.com/examples/queues) [Cron](https://docs.deno.com/examples/cron) [KV Watch](https://docs.deno.com/examples/kv_watch)\n```\n\n", "metadata": {"source_url": "https://docs.deno.com", "title": "Deno Docs", "description": "Deno, the open-source runtime for TypeScript and JavaScript. Features built-in dev tools, powerful platform APIs, and native support for TypeScript and JSX.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 22:49:05", "type": "code_examples", "page_metadata": {"title": "", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "scrapeId": "5a58e815-c37d-4981-98dd-6f0f87cf140c", "sourceURL": "https://docs.deno.com", "url": "https://docs.deno.com/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Docs\"?\n\nAssistant: Here are the recommended best practices:\n\n• Run Deno Deploy on your own infrastructure with our self-hosted solution running on AWS, GCP, or Azure.\n", "metadata": {"source_url": "https://docs.deno.com", "title": "Deno Docs", "description": "Deno, the open-source runtime for TypeScript and JavaScript. Features built-in dev tools, powerful platform APIs, and native support for TypeScript and JSX.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 22:49:05", "type": "best_practices", "page_metadata": {"title": "", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "scrapeId": "5a58e815-c37d-4981-98dd-6f0f87cf140c", "sourceURL": "https://docs.deno.com", "url": "https://docs.deno.com/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"List of lint rules\"?\n\nAssistant: These lint rules are provided by the `deno lint` command.\n\nHere's a detailed explanation:\n\n\n## Lint Rules Overview\nThese lint rules are provided by the `deno lint` command.\n\n## List of Rules\n- ![Recommended](https://docs.deno.com/img/checkmark.svg) Recommended\n- ![Fresh](https://docs.deno.com/img/fresh.svg) Fresh\n- ![JSX](https://docs.deno.com/img/jsx.svg) JSX\n- ![React](https://docs.deno.com/img/react.svg) React\n- ![JSR](https://docs.deno.com/img/jsr.svg) JSR\n", "metadata": {"source_url": "https://docs.deno.com/lint", "title": "List of lint rules", "description": "These lint rules are provided by the `deno lint` command.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:50:17", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:site": "@deno_land", "twitter:title": "List of rules", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:title": "List of rules", "language": "en", "ogTitle": "List of rules", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "List of rules", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "scrapeId": "6f53dec0-ceb6-427d-8bf6-3bbc82de96f0", "sourceURL": "https://docs.deno.com/lint", "url": "https://docs.deno.com/lint/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"List of lint rules\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure overload signatures are adjacent to each other.\n• Disallow the use of Typescript directives without a comment.\n• Ban the use of primitive wrapper objects in addition to the non-explicit Function type.\n• Warn against unknown rule codes in ignore directives.\n• Require `deno-lint-ignore` to be annotated with one or more rule names.\n", "metadata": {"source_url": "https://docs.deno.com/lint", "title": "List of lint rules", "description": "These lint rules are provided by the `deno lint` command.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:50:17", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:site": "@deno_land", "twitter:title": "List of rules", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:title": "List of rules", "language": "en", "ogTitle": "List of rules", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "List of rules", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "scrapeId": "6f53dec0-ceb6-427d-8bf6-3bbc82de96f0", "sourceURL": "https://docs.deno.com/lint", "url": "https://docs.deno.com/lint/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Getting Started\"?\n\nAssistant: An introduction to Deno, an open source JavaScript, TypeScript, and WebAssembly runtime with secure defaults and a great developer experience.\n\nHere's a detailed explanation:\n\n\n## Install Deno\nInstall the Deno runtime on your system using one of the terminal commands below.\n\n- macOS\n- Windows\n- Linux\n\n```highlight notranslate sh\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n```highlight notranslate powershell\nirm https://deno.land/install.ps1 | iex\n```\n\n```highlight notranslate sh\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n[Additional installation options can be found here](https://docs.deno.com/runtime/getting_started/installation/).\nAfter installation, you should have the `deno` executable available on your system path. You can verify the installation by running:\n\n```highlight notranslate sh\ndeno --version\n```\n\n## Hello World\nDeno can run JavaScript and [TypeScript](https://www.typescriptlang.org/) with no additional tools or configuration required. Let's create a simple \"hello world\" program and run it with Deno.\n\nCreate a TypeScript or JavaScript file called `main` and include the following code:\n\n- TypeScript\n- JavaScript\n\nmain.ts\n\n```highlight notranslate ts\nfunction greet(name: string): string {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet(\"world\"));\n```\n\nmain.js\n\n```highlight notranslate js\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet(\"world\"));\n```\n\nSave the file and run it with Deno:\n\n- main.ts\n- main.js\n\n```highlight notranslate sh\n$ deno main.ts\nHello, world!\n```\n\n```highlight notranslate sh\n$ deno main.js\nHello, world!\n```\n\n## Next Steps\nCongratulations! You've just run your first Deno program. Read on to learn more about the Deno runtime.\n\n- [Making a Deno project](https://docs.deno.com/runtime/getting_started/first_project/)\n- [Setting up your environment](https://docs.deno.com/runtime/getting_started/setup_your_environment/)\n- [Using the CLI](https://docs.deno.com/runtime/getting_started/command_line_interface/)\n", "metadata": {"source_url": "https://docs.deno.com/runtime", "title": "Getting Started", "description": "An introduction to Deno, an open source JavaScript, TypeScript, and WebAssembly runtime with secure defaults and a great developer experience.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:50:30", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:title": "Getting Started", "og:site_name": "Deno", "ogTitle": "Getting Started", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "language": "en", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "title": "Getting Started", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Getting Started", "scrapeId": "ca220c2b-2f2b-4865-98f5-930c1fb63f09", "sourceURL": "https://docs.deno.com/runtime", "url": "https://docs.deno.com/runtime/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Getting Started\"?\n\nAssistant: Here are some code examples:\n\n### Install Deno on macOS\n```yaml\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n### Install Deno on Windows\n```yaml\nirm https://deno.land/install.ps1 | iex\n```\n\n### Install Deno on Linux\n```yaml\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n### Verify Deno Installation\n```yaml\ndeno --version\n```\n\n### Hello World in TypeScript\n```yaml\nfunction greet(name: string): string {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet(\"world\"));\n```\n\n### Hello World in JavaScript\n```yaml\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet(\"world\"));\n```\n\n### Run Hello World in Deno (TypeScript)\n```yaml\n$ deno main.ts\nHello, world!\n```\n\n### Run Hello World in Deno (JavaScript)\n```yaml\n$ deno main.js\nHello, world!\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime", "title": "Getting Started", "description": "An introduction to Deno, an open source JavaScript, TypeScript, and WebAssembly runtime with secure defaults and a great developer experience.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:50:30", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:title": "Getting Started", "og:site_name": "Deno", "ogTitle": "Getting Started", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "language": "en", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "title": "Getting Started", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Getting Started", "scrapeId": "ca220c2b-2f2b-4865-98f5-930c1fb63f09", "sourceURL": "https://docs.deno.com/runtime", "url": "https://docs.deno.com/runtime/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Getting Started\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure the `deno` executable is available on your system path after installation.\n• Use TypeScript for type safety and better development experience.\n", "metadata": {"source_url": "https://docs.deno.com/runtime", "title": "Getting Started", "description": "An introduction to Deno, an open source JavaScript, TypeScript, and WebAssembly runtime with secure defaults and a great developer experience.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:50:30", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:title": "Getting Started", "og:site_name": "Deno", "ogTitle": "Getting Started", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "language": "en", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "title": "Getting Started", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Getting Started", "scrapeId": "ca220c2b-2f2b-4865-98f5-930c1fb63f09", "sourceURL": "https://docs.deno.com/runtime", "url": "https://docs.deno.com/runtime/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno KV watch\"?\n\nAssistant: Deno KV watch allows you to detect changes to your KV database, making it easier to build real-time applications, newsfeeds, chat, and more.\n\nHere's a detailed explanation:\n\n\n## Open the default database\n```javascript\nconst kv = await Deno.openKv();\n```\n\n## Set \"counter\" value to 0, then increment every second.\n```javascript\nawait kv.set([\"counter\"], new Deno.KvU64(0n));\nsetInterval(() => {\n  kv.atomic().sum([\"counter\"], 1n).commit();\n}, 1000);\n```\n\n## Listen for changes to \"counter\" and log value.\n```javascript\nfor await (const [entry] of kv.watch([[\"counter\"]])) {\n  console.log(`Counter: ${entry.value}`);\n}\n```\n\n## Create a stream reader from kv.watch\n```javascript\nconst stream = kv.watch([[\"counter\"]]).getReader();\nwhile (true) {\n  const counter = await stream.read();\n  if (counter.done) {\n    break;\n  }\n  console.log(`Counter: ${counter.value[0].value}`);\n}\n```\n\n## Use server-sent events\n```javascript\nDeno.serve((_req) => {\n  const stream = kv.watch([[\"counter\"]]).getReader();\n  const body = new ReadableStream({\n    async start(controller) {\n      while (true) {\n        if ((await stream.read()).done) {\n          return;\n        }\n        const data = await kv.get([\"counter\"]);\n        controller.enqueue(\n          new TextEncoder().encode(`Counter: ${data.value}\\n`),\n        );\n      }\n    },\n    cancel() {\n      stream.cancel();\n    },\n  });\n  return new Response(body, {\n    headers: {\n      \"Content-Type\": \"text/event-stream\",\n    },\n  });\n});\n```\n\n## Run this example locally\n```bash\ndeno run --unstable-kv https://docs.deno.com/examples/scripts/kv_watch.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/kv_watch", "title": "Deno KV watch", "description": "Deno KV watch allows you to detect changes to your KV database, making it easier to build real-time applications, newsfeeds, chat, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:50:51", "type": "overview", "page_metadata": {"twitter:title": "Deno KV watch", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Deno KV watch", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Deno KV watch", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "og:locale": "en_US", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:title": "Deno KV watch", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "scrapeId": "a5fbc30e-d63c-4878-9765-86c61fbf3298", "sourceURL": "https://docs.deno.com/examples/kv_watch", "url": "https://docs.deno.com/examples/kv_watch/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno KV watch\"?\n\nAssistant: Here are some code examples:\n\n### Open the default database\n```yaml\nconst kv = await Deno.openKv();\n```\n\n### Set \"counter\" value to 0, then increment every second.\n```yaml\nawait kv.set([\"counter\"], new Deno.KvU64(0n));\nsetInterval(() => {\n  kv.atomic().sum([\"counter\"], 1n).commit();\n}, 1000);\n```\n\n### Listen for changes to \"counter\" and log value.\n```yaml\nfor await (const [entry] of kv.watch([[\"counter\"]])) {\n  console.log(`Counter: ${entry.value}`);\n}\n```\n\n### Create a stream reader from kv.watch\n```yaml\nconst stream = kv.watch([[\"counter\"]]).getReader();\nwhile (true) {\n  const counter = await stream.read();\n  if (counter.done) {\n    break;\n  }\n  console.log(`Counter: ${counter.value[0].value}`);\n}\n```\n\n### Use server-sent events\n```yaml\nDeno.serve((_req) => {\n  const stream = kv.watch([[\"counter\"]]).getReader();\n  const body = new ReadableStream({\n    async start(controller) {\n      while (true) {\n        if ((await stream.read()).done) {\n          return;\n        }\n        const data = await kv.get([\"counter\"]);\n        controller.enqueue(\n          new TextEncoder().encode(`Counter: ${data.value}\\n`),\n        );\n      }\n    },\n    cancel() {\n      stream.cancel();\n    },\n  });\n  return new Response(body, {\n    headers: {\n      \"Content-Type\": \"text/event-stream\",\n    },\n  });\n});\n```\n\n### Run this example locally\n```yaml\ndeno run --unstable-kv https://docs.deno.com/examples/scripts/kv_watch.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/kv_watch", "title": "Deno KV watch", "description": "Deno KV watch allows you to detect changes to your KV database, making it easier to build real-time applications, newsfeeds, chat, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:50:51", "type": "code_examples", "page_metadata": {"twitter:title": "Deno KV watch", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Deno KV watch", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Deno KV watch", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "og:locale": "en_US", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:title": "Deno KV watch", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "scrapeId": "a5fbc30e-d63c-4878-9765-86c61fbf3298", "sourceURL": "https://docs.deno.com/examples/kv_watch", "url": "https://docs.deno.com/examples/kv_watch/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno KV watch\"?\n\nAssistant: Here are the recommended best practices:\n\n• This is an unstable API that is subject to change or removal at anytime.\n", "metadata": {"source_url": "https://docs.deno.com/examples/kv_watch", "title": "Deno KV watch", "description": "Deno KV watch allows you to detect changes to your KV database, making it easier to build real-time applications, newsfeeds, chat, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:50:51", "type": "best_practices", "page_metadata": {"twitter:title": "Deno KV watch", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Deno KV watch", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Deno KV watch", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "og:locale": "en_US", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:title": "Deno KV watch", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "scrapeId": "a5fbc30e-d63c-4878-9765-86c61fbf3298", "sourceURL": "https://docs.deno.com/examples/kv_watch", "url": "https://docs.deno.com/examples/kv_watch/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Temporary files & directories\"?\n\nAssistant: Temporary files and directories are used to store data that is not intended to be permanent. For example, as a local cache of downloaded data.\n\nHere's a detailed explanation:\n\n\n## Temporary File Creation\nThe `Deno.makeTempFile()` function creates a temporary file in the default temporary directory and returns the path to the file.\n\n```javascript\nconst tempFilePath = await Deno.makeTempFile();\nconsole.log(\"Temp file path:\", tempFilePath);\nawait Deno.writeTextFile(tempFilePath, \"Hello world!\");\nconst data = await Deno.readTextFile(tempFilePath);\nconsole.log(\"Temp file data:\", data);\n```\n\nA custom prefix and suffix for the temporary file can be specified.\n\n```javascript\nconst tempFilePath2 = await Deno.makeTempFile({\n  prefix: \"logs_\",\n  suffix: \".txt\",\n});\nconsole.log(\"Temp file path 2:\", tempFilePath2);\n```\n\nThe directory that temporary files are created in can be customized too. Here we use a relative ./tmp directory.\n\n```javascript\nawait Deno.mkdir(\"./tmp\", { recursive: true });\nconst tempFilePath3 = await Deno.makeTempFile({\n  dir: \"./tmp\",\n});\nconsole.log(\"Temp file path 3:\", tempFilePath3);\n```\n\n## Temporary Directory Creation\nA temporary directory can also be created.\n\n```javascript\nconst tempDirPath = await Deno.makeTempDir();\nconsole.log(\"Temp dir path:\", tempDirPath);\n```\n\nIt has the same prefix, suffix, and directory options as `makeTempFile()`.\n\n```javascript\nconst tempDirPath2 = await Deno.makeTempDir({\n  prefix: \"logs_\",\n  suffix: \"_folder\",\n  dir: \"./tmp\",\n});\nconsole.log(\"Temp dir path 2:\", tempDirPath2);\n```\n\n## Synchronous Functions\nSynchronous versions of the above functions are also available.\n\n```javascript\nconst tempFilePath4 = Deno.makeTempFileSync();\nconst tempDirPath3 = Deno.makeTempDirSync();\nconsole.log(\"Temp file path 4:\", tempFilePath4);\nconsole.log(\"Temp dir path 3:\", tempDirPath3);\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/temporary_files.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-read --allow-write https://docs.deno.com/examples/scripts/temporary_files.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/temporary_files", "title": "Temporary files & directories", "description": "Temporary files and directories are used to store data that is not intended to be permanent. For example, as a local cache of downloaded data.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:51:10", "type": "overview", "page_metadata": {"og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Temporary files & directories", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:title": "Temporary files & directories", "language": "en", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogTitle": "Temporary files & directories", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "twitter:title": "Temporary files & directories", "scrapeId": "ba88740e-9049-4af0-807f-186682018f46", "sourceURL": "https://docs.deno.com/examples/temporary_files", "url": "https://docs.deno.com/examples/temporary_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Temporary files & directories\"?\n\nAssistant: Here are some code examples:\n\n### Creating a Temporary File\n```yaml\nconst tempFilePath = await Deno.makeTempFile();\nconsole.log(\"Temp file path:\", tempFilePath);\nawait Deno.writeTextFile(tempFilePath, \"Hello world!\");\nconst data = await Deno.readTextFile(tempFilePath);\nconsole.log(\"Temp file data:\", data);\n```\n\n### Creating a Temporary File with Custom Prefix and Suffix\n```yaml\nconst tempFilePath2 = await Deno.makeTempFile({\n  prefix: \"logs_\",\n  suffix: \".txt\",\n});\nconsole.log(\"Temp file path 2:\", tempFilePath2);\n```\n\n### Creating a Temporary File in a Custom Directory\n```yaml\nawait Deno.mkdir(\"./tmp\", { recursive: true });\nconst tempFilePath3 = await Deno.makeTempFile({\n  dir: \"./tmp\",\n});\nconsole.log(\"Temp file path 3:\", tempFilePath3);\n```\n\n### Creating a Temporary Directory\n```yaml\nconst tempDirPath = await Deno.makeTempDir();\nconsole.log(\"Temp dir path:\", tempDirPath);\n```\n\n### Creating a Temporary Directory with Custom Options\n```yaml\nconst tempDirPath2 = await Deno.makeTempDir({\n  prefix: \"logs_\",\n  suffix: \"_folder\",\n  dir: \"./tmp\",\n});\nconsole.log(\"Temp dir path 2:\", tempDirPath2);\n```\n\n### Synchronous Temporary File and Directory Creation\n```yaml\nconst tempFilePath4 = Deno.makeTempFileSync();\nconst tempDirPath3 = Deno.makeTempDirSync();\nconsole.log(\"Temp file path 4:\", tempFilePath4);\nconsole.log(\"Temp dir path 3:\", tempDirPath3);\n```\n\n### Running the Example Locally\n```yaml\ndeno run --allow-read --allow-write https://docs.deno.com/examples/scripts/temporary_files.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/temporary_files", "title": "Temporary files & directories", "description": "Temporary files and directories are used to store data that is not intended to be permanent. For example, as a local cache of downloaded data.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:51:10", "type": "code_examples", "page_metadata": {"og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Temporary files & directories", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:title": "Temporary files & directories", "language": "en", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogTitle": "Temporary files & directories", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "twitter:title": "Temporary files & directories", "scrapeId": "ba88740e-9049-4af0-807f-186682018f46", "sourceURL": "https://docs.deno.com/examples/temporary_files", "url": "https://docs.deno.com/examples/temporary_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Temporary files & directories\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use temporary files and directories for data that does not need to be permanent.\n• Specify custom prefixes and suffixes for better organization of temporary files.\n• Ensure to create the directory if you are specifying a custom directory for temporary files.\n", "metadata": {"source_url": "https://docs.deno.com/examples/temporary_files", "title": "Temporary files & directories", "description": "Temporary files and directories are used to store data that is not intended to be permanent. For example, as a local cache of downloaded data.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:51:10", "type": "best_practices", "page_metadata": {"og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Temporary files & directories", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:title": "Temporary files & directories", "language": "en", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogTitle": "Temporary files & directories", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "twitter:title": "Temporary files & directories", "scrapeId": "ba88740e-9049-4af0-807f-186682018f46", "sourceURL": "https://docs.deno.com/examples/temporary_files", "url": "https://docs.deno.com/examples/temporary_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"File system events\"?\n\nAssistant: This page covers how to use Deno to watch for file system events.\n\nHere's a detailed explanation:\n\n\n## Concepts\n- Use [Deno.watchFs](https://docs.deno.com/api/deno/~/Deno.watchFs) to watch for file system events.\n- Results may vary between operating systems.\n\n## Example\nTo poll for file system events in the current directory:\n\nwatcher.ts\n\n```highlight notranslate ts\nconst watcher = Deno.watchFs(\".\");\nfor await (const event of watcher) {\n  console.log(\">>>> event\", event);\n  // Example event: { kind: \"create\", paths: [ \"/home/alice/deno/foo.txt\" ] }\n}\n```\n\nRun with:\n\n```highlight notranslate shell\ndeno run --allow-read watcher.ts\n```\n\nNow try adding, removing and modifying files in the same directory as `watcher.ts`.\n\nNote that the exact ordering of the events can vary between operating systems.\nThis feature uses different syscalls depending on the platform:\n\n- Linux: [inotify](https://man7.org/linux/man-pages/man7/inotify.7.html)\n- macOS: [FSEvents](https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html)\n- Windows: [ReadDirectoryChangesW](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-readdirectorychangesw)\n", "metadata": {"source_url": "https://docs.deno.com/examples/file_system_events_tutorial", "title": "File system events", "description": "This page covers how to use Deno to watch for file system events.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:51:23", "type": "overview", "page_metadata": {"og:title": "File system events", "ogTitle": "File system events", "title": "File system events", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:title": "File system events", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:locale": "en_US", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "scrapeId": "53116a2a-f7bb-4029-80f6-ef04c2a9b44b", "sourceURL": "https://docs.deno.com/examples/file_system_events_tutorial", "url": "https://docs.deno.com/examples/file_system_events_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"File system events\"?\n\nAssistant: Here are some code examples:\n\n### File System Watcher Example\n```yaml\nconst watcher = Deno.watchFs(\".\");\nfor await (const event of watcher) {\n  console.log(\">>>> event\", event);\n  // Example event: { kind: \"create\", paths: [ \"/home/alice/deno/foo.txt\" ] }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/file_system_events_tutorial", "title": "File system events", "description": "This page covers how to use Deno to watch for file system events.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:51:23", "type": "code_examples", "page_metadata": {"og:title": "File system events", "ogTitle": "File system events", "title": "File system events", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:title": "File system events", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:locale": "en_US", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "scrapeId": "53116a2a-f7bb-4029-80f6-ef04c2a9b44b", "sourceURL": "https://docs.deno.com/examples/file_system_events_tutorial", "url": "https://docs.deno.com/examples/file_system_events_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"File system events\"?\n\nAssistant: Here are the recommended best practices:\n\n• Results may vary between operating systems.\n• The exact ordering of the events can vary between operating systems.\n", "metadata": {"source_url": "https://docs.deno.com/examples/file_system_events_tutorial", "title": "File system events", "description": "This page covers how to use Deno to watch for file system events.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:51:23", "type": "best_practices", "page_metadata": {"og:title": "File system events", "ogTitle": "File system events", "title": "File system events", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:title": "File system events", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:locale": "en_US", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "scrapeId": "53116a2a-f7bb-4029-80f6-ef04c2a9b44b", "sourceURL": "https://docs.deno.com/examples/file_system_events_tutorial", "url": "https://docs.deno.com/examples/file_system_events_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Parsing and serializing TOML\"?\n\nAssistant: TOML is a widely used configuration language designed to be feature-rich and intuitive to write.\n\nHere's a detailed explanation:\n\n\n## Parsing TOML\nTo parse a TOML string, you can use the the standard library's TOML parse function. The value is returned as a JavaScript object.\n\n```javascript\nconst text = `\nint = 1_000_000\nbool = true\n\n[[bin]]\nname = \"deno\"\npath = \"cli/main.rs\"\n\n[[bin]]\nname = \"deno_core\"\npath = \"src/foo.rs\"\n`;\nconst data = parse(text);\nconsole.log(data.int);\nconsole.log(data.bin.length);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_toml", "title": "Parsing and serializing TOML", "description": "TOML is a widely used configuration language designed to be feature-rich and intuitive to write.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:51:32", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:site_name": "Deno", "language": "en", "ogImage": "/img/og.webp", "ogTitle": "Parsing and serializing TOML", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Parsing and serializing TOML", "og:title": "Parsing and serializing TOML", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "title": "Parsing and serializing TOML", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7ada09c1-b438-4055-a435-4ec4b210a431", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_toml", "url": "https://docs.deno.com/examples/parsing_serializing_toml/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Parsing and serializing TOML\"?\n\nAssistant: Here are some code examples:\n\n### Parsing TOML\n```yaml\nimport { parse, stringify } from \"jsr:@std/toml\";\n\nconst text = `\nint = 1_000_000\nbool = true\n\n[[bin]]\nname = \"deno\"\npath = \"cli/main.rs\"\n\n[[bin]]\nname = \"deno_core\"\npath = \"src/foo.rs\"\n`;\nconst data = parse(text);\nconsole.log(data.int);\nconsole.log(data.bin.length);\n\n```\n\n### Stringifying a JavaScript object to TOML\n```yaml\nconst obj = {\n  ping: \"pong\",\n  complex: [\n    { name: \"bob\", age: 10 },\n    { name: \"alice\", age: 12 },\n  ],\n};\nconst toml = stringify(obj);\nconsole.log(toml);\n// ping = \"pong\"\n//\n// [[complex]]\n// name = \"bob\"\n// age = 10\n//\n// [[complex]]\n// name = \"alice\"\n// age = 12\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_toml", "title": "Parsing and serializing TOML", "description": "TOML is a widely used configuration language designed to be feature-rich and intuitive to write.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:51:32", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:site_name": "Deno", "language": "en", "ogImage": "/img/og.webp", "ogTitle": "Parsing and serializing TOML", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Parsing and serializing TOML", "og:title": "Parsing and serializing TOML", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "title": "Parsing and serializing TOML", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7ada09c1-b438-4055-a435-4ec4b210a431", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_toml", "url": "https://docs.deno.com/examples/parsing_serializing_toml/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Parsing and serializing TOML\"?\n\nAssistant: Here are the recommended best practices:\n\n• Run the example locally using the Deno CLI: `deno run https://docs.deno.com/examples/scripts/parsing_serializing_toml.ts`\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_toml", "title": "Parsing and serializing TOML", "description": "TOML is a widely used configuration language designed to be feature-rich and intuitive to write.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:51:32", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:site_name": "Deno", "language": "en", "ogImage": "/img/og.webp", "ogTitle": "Parsing and serializing TOML", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Parsing and serializing TOML", "og:title": "Parsing and serializing TOML", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "title": "Parsing and serializing TOML", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7ada09c1-b438-4055-a435-4ec4b210a431", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_toml", "url": "https://docs.deno.com/examples/parsing_serializing_toml/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Run a script\"?\n\nAssistant: Deno is a secure runtime for JavaScript and TypeScript.\n\nHere's a detailed explanation:\n\n\n## Running a script\nIn this tutorial we'll create a simple \"Hello World\" example in both JavaScript and TypeScript using Deno.\n\nWe'll define a `capitalize` function that capitalizes the first letter of a word. Then, we define a `hello` function that returns a greeting message with the capitalized name. Finally, we call the `hello` function with different names and print the output to the console.\n\n## JavaScript\nFirst, create a `hello-world.js` file and add the following code:\n\nhello-world.js\n\n```highlight notranslate js\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nfunction hello(name) {\n  return \"Hello \" + capitalize(name);\n}\n\nconsole.log(hello(\"john\"));\nconsole.log(hello(\"Sarah\"));\nconsole.log(hello(\"kai\"));\n```\n\nRun the script using the `deno run` command:\n\n```highlight notranslate sh\n$ deno run hello-world.js\nHello John\nHello Sarah\nHello Kai\n```\n\n## TypeScript\nThis TypeScript example is exactly the same as the JavaScript example above, the code just has the additional type information which TypeScript supports.\n\nCreate a `hello-world.ts` file and add the following code:\n\nhello-world.ts\n\n```highlight notranslate ts\nfunction capitalize(word: string): string {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nfunction hello(name: string): string {\n  return \"Hello \" + capitalize(name);\n}\n\nconsole.log(hello(\"john\"));\nconsole.log(hello(\"Sarah\"));\nconsole.log(hello(\"kai\"));\n```\n\nRun the TypeScript script using the `deno run` command:\n\n```highlight notranslate sh\n$ deno run hello-world.ts\nHello John\nHello Sarah\nHello Kai\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/run_script_tutorial", "title": "Run a script", "description": "Deno is a secure runtime for JavaScript and TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:51:45", "type": "overview", "page_metadata": {"og:type": "article", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Run a script", "twitter:title": "Run a script", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogTitle": "Run a script", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:site_name": "Deno", "og:title": "Run a script", "ogSiteName": "Deno", "og:locale": "en_US", "scrapeId": "ed66d9d0-201e-4b47-9139-9747bbf92c01", "sourceURL": "https://docs.deno.com/examples/run_script_tutorial", "url": "https://docs.deno.com/examples/run_script_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Run a script\"?\n\nAssistant: Here are some code examples:\n\n### JavaScript Example\n```yaml\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nfunction hello(name) {\n  return \"Hello \" + capitalize(name);\n}\n\nconsole.log(hello(\"john\"));\nconsole.log(hello(\"Sarah\"));\nconsole.log(hello(\"kai\"));\n\n```\n\n### JavaScript Run Command\n```yaml\n$ deno run hello-world.js\nHello John\nHello Sarah\nHello Kai\n```\n\n### TypeScript Example\n```yaml\nfunction capitalize(word: string): string {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nfunction hello(name: string): string {\n  return \"Hello \" + capitalize(name);\n}\n\nconsole.log(hello(\"john\"));\nconsole.log(hello(\"Sarah\"));\nconsole.log(hello(\"kai\"));\n\n```\n\n### TypeScript Run Command\n```yaml\n$ deno run hello-world.ts\nHello John\nHello Sarah\nHello Kai\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/run_script_tutorial", "title": "Run a script", "description": "Deno is a secure runtime for JavaScript and TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:51:45", "type": "code_examples", "page_metadata": {"og:type": "article", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Run a script", "twitter:title": "Run a script", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogTitle": "Run a script", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:site_name": "Deno", "og:title": "Run a script", "ogSiteName": "Deno", "og:locale": "en_US", "scrapeId": "ed66d9d0-201e-4b47-9139-9747bbf92c01", "sourceURL": "https://docs.deno.com/examples/run_script_tutorial", "url": "https://docs.deno.com/examples/run_script_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Run a script\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno allows you to run JavaScript and TypeScript code directly on your machine, outside the browser context.\n• Use the `deno run` command to execute your scripts.\n• Explore more tutorials and examples to learn more about Deno.\n", "metadata": {"source_url": "https://docs.deno.com/examples/run_script_tutorial", "title": "Run a script", "description": "Deno is a secure runtime for JavaScript and TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:51:45", "type": "best_practices", "page_metadata": {"og:type": "article", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Run a script", "twitter:title": "Run a script", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogTitle": "Run a script", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:site_name": "Deno", "og:title": "Run a script", "ogSiteName": "Deno", "og:locale": "en_US", "scrapeId": "ed66d9d0-201e-4b47-9139-9747bbf92c01", "sourceURL": "https://docs.deno.com/examples/run_script_tutorial", "url": "https://docs.deno.com/examples/run_script_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Executable scripts\"?\n\nAssistant: Making Deno scripts executable can come in handy when creating small tools or utilities for tasks like file manipulation, data processing or repetitive tasks that you might want to run from the command line. Executable scripts allow you to create ad-hoc solutions without setting up an entire project.\n\nHere's a detailed explanation:\n\n\n## Creating an example script\nTo make a script executable, start the script with a hashbang, (sometimes called a shebang). This is a sequence of characters (#!) that tells your operating system how to execute a script. It is followed by the path to the interpreter that should be used to run the script.\n\nNote\n\nTo use a hashbang on Windows you will need to install the Windows Subsystem for Linux (WSL) or use a Unix-like shell like [Git Bash](https://git-scm.com/downloads).\n\nWe'll make a simple script that prints the Deno installation path using the [Deno.env](https://docs.deno.com/api/deno/~/Deno.env) API.\n\nCreate a file named `hashbang.ts` with the following content:\n\nhashbang.ts\n\n```highlight notranslate ts\n#!/usr/bin/env -S deno run --allow-env\nconst path = Deno.env.get(\"DENO_INSTALL\");\n\nconsole.log(\"Deno Install Path:\", path);\n```\n\nThis script tells the system to use the deno runtime to run the script. The -S flag splits the command into arguments and indicates that the following argument ( `deno run --allow-env`) should be passed to the env command.\n\nThe script then retrieves the value associated with the environment variable named `DENO_INSTALL` with `Deno.env.get()` and assigns it to a variable called `path`. Finally, it prints the path to the console using `console.log()`. \n\n\n\n## Execute the script\nIn order to execute the script, you may need to give the script execution permissions, you can do so using the `chmod` command with a `+x` flag (for execute):\n\n```highlight notranslate sh\nchmod +x hashbang.ts\n```\n\nYou can execute the script directly in the command line with:\n\n```highlight notranslate sh\n./hashbang.ts\n```\n\n## Using hashbang in files with no extension\nFor brevity, you may wish to omit the extension for your script's filename. In this case, supply one using the `--ext` flag in the script itself, then you can run the script with just the file name:\n\nmy_script\n\n```highlight notranslate shell\n$ cat my_script\n#!/usr/bin/env -S deno run --allow-env --ext=js\nconsole.log(\"Hello!\");\n$ ./my_script\nHello!\n``` \n\n🦕 Now you can directly execute Deno scripts from the command line! Remember to set the execute permission ( `chmod +x`) for your script file, and you’re all set to build anything from simple utilities to complex tools. Check out the [Deno examples](https://docs.deno.com/examples/) for inspiration on what you can script.\n", "metadata": {"source_url": "https://docs.deno.com/examples/hashbang_tutorial", "title": "Executable scripts", "description": "Making Deno scripts executable can come in handy when creating small tools or utilities for tasks like file manipulation, data processing or repetitive tasks that you might want to run from the command line. Executable scripts allow you to create ad-hoc solutions without setting up an entire project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:52:00", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Executable scripts", "twitter:title": "Executable scripts", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:type": "article", "og:title": "Executable scripts", "og:site_name": "Deno", "og:locale": "en_US", "ogLocale": "en_US", "ogTitle": "Executable scripts", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "scrapeId": "6ecf104b-0aae-4a40-9d18-1bd52a17daa0", "sourceURL": "https://docs.deno.com/examples/hashbang_tutorial", "url": "https://docs.deno.com/examples/hashbang_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Executable scripts\"?\n\nAssistant: Here are some code examples:\n\n### Example script (hashbang.ts)\n```yaml\n#!/usr/bin/env -S deno run --allow-env\nconst path = Deno.env.get(\"DENO_INSTALL\");\n\nconsole.log(\"Deno Install Path:\", path);\n```\n\n### Change permissions to execute script\n```yaml\nchmod +x hashbang.ts\n```\n\n### Execute the script\n```yaml\n./hashbang.ts\n```\n\n### Example script (my_script)\n```yaml\n#!/usr/bin/env -S deno run --allow-env --ext=js\nconsole.log(\"Hello!\");\n$ ./my_script\nHello!\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/hashbang_tutorial", "title": "Executable scripts", "description": "Making Deno scripts executable can come in handy when creating small tools or utilities for tasks like file manipulation, data processing or repetitive tasks that you might want to run from the command line. Executable scripts allow you to create ad-hoc solutions without setting up an entire project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:52:00", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Executable scripts", "twitter:title": "Executable scripts", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:type": "article", "og:title": "Executable scripts", "og:site_name": "Deno", "og:locale": "en_US", "ogLocale": "en_US", "ogTitle": "Executable scripts", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "scrapeId": "6ecf104b-0aae-4a40-9d18-1bd52a17daa0", "sourceURL": "https://docs.deno.com/examples/hashbang_tutorial", "url": "https://docs.deno.com/examples/hashbang_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Executable scripts\"?\n\nAssistant: Here are the recommended best practices:\n\n• To use a hashbang on Windows, install the Windows Subsystem for Linux (WSL) or use a Unix-like shell like Git Bash.\n• Remember to set the execute permission (chmod +x) for your script file.\n", "metadata": {"source_url": "https://docs.deno.com/examples/hashbang_tutorial", "title": "Executable scripts", "description": "Making Deno scripts executable can come in handy when creating small tools or utilities for tasks like file manipulation, data processing or repetitive tasks that you might want to run from the command line. Executable scripts allow you to create ad-hoc solutions without setting up an entire project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:52:00", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Executable scripts", "twitter:title": "Executable scripts", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:type": "article", "og:title": "Executable scripts", "og:site_name": "Deno", "og:locale": "en_US", "ogLocale": "en_US", "ogTitle": "Executable scripts", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "scrapeId": "6ecf104b-0aae-4a40-9d18-1bd52a17daa0", "sourceURL": "https://docs.deno.com/examples/hashbang_tutorial", "url": "https://docs.deno.com/examples/hashbang_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"How to create a RESTful API with Prisma and Oak\"?\n\nAssistant: This guide shows how to set up a simple RESTful API in Deno using Oak and Prisma.\n\nHere's a detailed explanation:\n\n\n## Setup the application\nLet's create the folder `rest-api-with-prisma-oak` and navigate there:\n\n```highlight notranslate shell\nmkdir rest-api-with-prisma-oak\ncd rest-api-with-prisma-oak\n```\n\nThen, let's run `prisma init` with Deno:\n\n```highlight notranslate shell\ndeno run --allow-read --allow-env --allow-write npm:prisma@latest init\n```\n\nThis will generate [`prisma/schema.prisma`](https://www.prisma.io/docs/concepts/components/prisma-schema). Let's update it with the following:\n\n```highlight notranslate ts\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"deno\"]\n  output = \"../generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Dinosaur {\n  id          Int     @id @default(autoincrement())\n  name        String  @unique\n  description String\n}\n```\n\nPrisma also generates a `.env` file with a `DATABASE_URL` environment variable. Let's assign `DATABASE_URL` to a PostgreSQL connection string. In this example, we'll use a free [PostgreSQL database from Supabase](https://supabase.com/database).\n\nNext, let's create the database schema:\n\n```highlight notranslate shell\ndeno run -A npm:prisma@latest db push\n```\n\nAfter that's complete, we'll need to generate a Prisma Client:\n\n```highlight notranslate shell\ndeno run -A --unstable-detect-cjs npm:prisma@latest generate --no-engine\n```\n\n## Setup Accelerate in the Prisma Data Platform\nTo get started with the Prisma Data Platform:\n\n1. Sign up for a free [Prisma Data Platform account](https://console.prisma.io/).\n2. Create a project.\n3. Navigate to the project you created.\n4. Enable Accelerate by providing your database's connection string.\n5. Generate an Accelerate connection string and copy it to your clipboard.\n\nAssign the Accelerate connection string, that begins with `prisma://`, to `DATABASE_URL` in your `.env` file replacing your existing connection string.\n\nNext, let's create a seed script to seed the database.\n\n## Seed your Database\nCreate `./prisma/seed.ts`:\n\n```highlight notranslate shell\ntouch prisma/seed.ts\n```\n\nAnd in `./prisma/seed.ts`:\n\n```highlight notranslate ts\nimport { Prisma, PrismaClient } from \"../generated/client/deno/edge.ts\";\n\nconst prisma = new PrismaClient({\n  datasourceUrl: envVars.DATABASE_URL,\n});\n\nconst dinosaurData: Prisma.DinosaurCreateInput[] = [\\\n  {\\\n    name: \"Aardonyx\",\\\n    description: \"An early stage in the evolution of sauropods.\",\\\n  },\\\n  {\\\n    name: \"Abelisaurus\",\\\n    description: \"Abel's lizard has been reconstructed from a single skull.\",\\\n  },\\\n  {\\\n    name: \"Acanthopholis\",\\\n    description: \"No, it's not a city in Greece.\",\\\n  },\\\n];\n\n/**\n * Seed the database.\n */\n\nfor (const u of dinosaurData) {\n  const dinosaur = await prisma.dinosaur.create({\n    data: u,\n  });\n  console.log(`Created dinosaur with id: ${dinosaur.id}`);\n}\nconsole.log(`Seeding finished.`);\n\nawait prisma.$disconnect();\n```\n\nWe can now run `seed.ts` with:\n\n```highlight notranslate shell\ndeno run -A --env prisma/seed.ts\n```\n\n> \\[!TIP\\]\n> The `--env` flag is used to tell Deno to load environment variables from the `.env` file.\n\nAfter doing so, you should be able to see your data on Prisma Studio by running the following command:\n\n```highlight notranslate bash\ndeno run -A npm:prisma studio\n```\n\nYou should see something similar to the following screenshot:\n![New dinosaurs are in Prisma dashboard](https://docs.deno.com/examples/tutorials/images/how-to/prisma/1-dinosaurs-in-prisma.png)\n", "metadata": {"source_url": "https://docs.deno.com/examples/prisma_tutorial", "title": "How to create a RESTful API with Prisma and Oak", "description": "This guide shows how to set up a simple RESTful API in Deno using Oak and Prisma.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:52:26", "type": "overview", "page_metadata": {"og:title": "How to create a RESTful API with Prisma and Oak", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "title": "How to create a RESTful API with Prisma and Oak", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "ogTitle": "How to create a RESTful API with Prisma and Oak", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "twitter:title": "How to create a RESTful API with Prisma and Oak", "viewport": "width=device-width, initial-scale=1", "scrapeId": "2a159618-e7ac-43ac-9538-ddb1dbe32e23", "sourceURL": "https://docs.deno.com/examples/prisma_tutorial", "url": "https://docs.deno.com/examples/prisma_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"How to create a RESTful API with Prisma and Oak\"?\n\nAssistant: Here are some code examples:\n\n### Setup the application - Create folder and navigate\n```yaml\nmkdir rest-api-with-prisma-oak\ncd rest-api-with-prisma-oak\n```\n\n### Setup the application - Run Prisma init\n```yaml\ndeno run --allow-read --allow-env --allow-write npm:prisma@latest init\n```\n\n### Setup the application - Update schema.prisma\n```yaml\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"deno\"]\n  output = \"../generated/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Dinosaur {\n  id          Int     @id @default(autoincrement())\n  name        String  @unique\n  description String\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/prisma_tutorial", "title": "How to create a RESTful API with Prisma and Oak", "description": "This guide shows how to set up a simple RESTful API in Deno using Oak and Prisma.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:52:26", "type": "code_examples", "page_metadata": {"og:title": "How to create a RESTful API with Prisma and Oak", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "title": "How to create a RESTful API with Prisma and Oak", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "ogTitle": "How to create a RESTful API with Prisma and Oak", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "twitter:title": "How to create a RESTful API with Prisma and Oak", "viewport": "width=device-width, initial-scale=1", "scrapeId": "2a159618-e7ac-43ac-9538-ddb1dbe32e23", "sourceURL": "https://docs.deno.com/examples/prisma_tutorial", "url": "https://docs.deno.com/examples/prisma_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"How to create a RESTful API with Prisma and Oak\"?\n\nAssistant: Here are the recommended best practices:\n\n• The `--env` flag is used to tell Deno to load environment variables from the `.env` file.\n", "metadata": {"source_url": "https://docs.deno.com/examples/prisma_tutorial", "title": "How to create a RESTful API with Prisma and Oak", "description": "This guide shows how to set up a simple RESTful API in Deno using Oak and Prisma.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:52:26", "type": "best_practices", "page_metadata": {"og:title": "How to create a RESTful API with Prisma and Oak", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "title": "How to create a RESTful API with Prisma and Oak", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "ogTitle": "How to create a RESTful API with Prisma and Oak", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "twitter:title": "How to create a RESTful API with Prisma and Oak", "viewport": "width=device-width, initial-scale=1", "scrapeId": "2a159618-e7ac-43ac-9538-ddb1dbe32e23", "sourceURL": "https://docs.deno.com/examples/prisma_tutorial", "url": "https://docs.deno.com/examples/prisma_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Initialize a project\"?\n\nAssistant: This page covers how to initialize a new Deno project, run it, run tests, and add to the project structure.\n\nHere's a detailed explanation:\n\n\n## Initialize a project\nWhile it is possible to run scripts directly with `deno run`, for larger projects it is recommended to create a sensible directory structure. This way you can organize your code, manage dependencies, script tasks and run tests more easily.\n\nInitialize a new project by running the following command:\n\n```highlight notranslate sh\ndeno init my_project\n```\n\nWhere `my_project` is the name of your project. You can [read more about the project structure](https://docs.deno.com/runtime/getting_started/first_project/).\n\n## Run your project\nNavigate to the project directory:\n\n```highlight notranslate sh\ncd my_project\n```\n\nThen you can run the project directly using the `deno task` command:\n\n```highlight notranslate sh\ndeno run dev\n```\n\nTake a look in the `deno.json` file in your new project. You should see a `dev` task in the \"tasks\" field.\n\n```highlight notranslate json\n\"tasks\": {\n  \"dev\": \"deno run --watch main.ts\"\n},\n```\n\nThe `dev` task is a common task that runs the project in development mode. As you can see, it runs the `main.ts` file with the `--watch` flag, which will automatically reload the script when changes are made. You can see this in action if you open the `main.ts` file and make a change.\n\n## Run the tests\nIn the project directory run:\n\n```highlight notranslate sh\ndeno test\n```\n\nThis will execute all the tests in the project. You can read more about [testing in Deno](https://docs.deno.com/runtime/fundamentals/testing/) and we'll cover tests in a little more depth in a later tutorial. At the moment you have one test file, `main_test.ts`, which tests the `add` function in `main.ts`.\n\n## Adding to your project\nThe `main.ts` file serves as the entry point for your application. It’s where you’ll write your main program logic. When developing your project you will start by removing the default addition program and replace it with your own code. For example, if you’re building a web server, this is where you’d set up your routes and handle requests.\n\nBeyond the initial files, you’ll likely create additional modules (files) to organize your code. Consider grouping related functionality into separate files. Remember that Deno [supports ES modules](https://docs.deno.com/runtime/fundamentals/modules/), so you can use import and export statements to structure your code.\n\nExample folder structure for a deno project:\n\n```highlight notranslate sh\nmy_project/\n├── deno.json\n├── main.ts\n├── main_test.ts\n├── routes/\n│   ├── home.ts\n│   ├── about.ts\n├── services/\n│   ├── user.ts\n│   ├── post.ts\n└──utils/\n    ├── logger.ts\n    ├── logger_test.ts\n    ├── validator_test.ts\n    └── validator.ts\n```\n\nThis kind of structure keeps your project clean and makes it easier to find and manage files.\n", "metadata": {"source_url": "https://docs.deno.com/examples/initialize_project_tutorial", "title": "Initialize a project", "description": "This page covers how to initialize a new Deno project, run it, run tests, and add to the project structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:52:45", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Initialize a project", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Initialize a project", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Initialize a project", "title": "Initialize a project", "scrapeId": "b984d1e2-d4b8-4275-9881-f8fa7595e1f9", "sourceURL": "https://docs.deno.com/examples/initialize_project_tutorial", "url": "https://docs.deno.com/examples/initialize_project_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Initialize a project\"?\n\nAssistant: Here are some code examples:\n\n### Initialize a new project\n```yaml\ndeno init my_project\n```\n\n### Navigate to the project directory\n```yaml\ncd my_project\n```\n\n### Run the project\n```yaml\ndeno run dev\n```\n\n### Deno JSON task configuration\n```yaml\n\"tasks\": {\n  \"dev\": \"deno run --watch main.ts\"\n}\n```\n\n### Run the tests\n```yaml\ndeno test\n```\n\n### Example folder structure for a deno project\n```yaml\nmy_project/\n├── deno.json\n├── main.ts\n├── main_test.ts\n├── routes/\n│   ├── home.ts\n│   ├── about.ts\n├── services/\n│   ├── user.ts\n│   ├── post.ts\n└──utils/\n    ├── logger.ts\n    ├── logger_test.ts\n    ├── validator_test.ts\n    └── validator.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/initialize_project_tutorial", "title": "Initialize a project", "description": "This page covers how to initialize a new Deno project, run it, run tests, and add to the project structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:52:45", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Initialize a project", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Initialize a project", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Initialize a project", "title": "Initialize a project", "scrapeId": "b984d1e2-d4b8-4275-9881-f8fa7595e1f9", "sourceURL": "https://docs.deno.com/examples/initialize_project_tutorial", "url": "https://docs.deno.com/examples/initialize_project_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Initialize a project\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno encourages simplicity and avoids complex build tools.\n• Keep your project modular, testable, and organized.\n• As your project grows, adapt the structure to fit your needs.\n", "metadata": {"source_url": "https://docs.deno.com/examples/initialize_project_tutorial", "title": "Initialize a project", "description": "This page covers how to initialize a new Deno project, run it, run tests, and add to the project structure.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:52:45", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Initialize a project", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Initialize a project", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Initialize a project", "title": "Initialize a project", "scrapeId": "b984d1e2-d4b8-4275-9881-f8fa7595e1f9", "sourceURL": "https://docs.deno.com/examples/initialize_project_tutorial", "url": "https://docs.deno.com/examples/initialize_project_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Watching the filesystem\"?\n\nAssistant: When creating frameworks or CLI tools, it is often necessary to watch the filesystem for changes.\n\nHere's a detailed explanation:\n\n\n## Watching the filesystem\nThe easiest way to watch a filesystem is to use the Deno builtin watchFs. Deno.watchFs returns an FsWatcher which is an async iterable.\n\n```\nlet watcher = Deno.watchFs(\"./\");\n```\n\nThe easiest way to interact with async iterables is the javascript for await of syntax.\n\n```\nfor await (const event of watcher) {\n  console.log(\">>>> event\", event);\n```\n\nTo stop the watcher we can simply call `watcher.close()`\n\n```\n  watcher.close();\n}\n```\n\nIn real applications, it is quite rare that an application needs to react to every change instantly. Events will be duplicated and multiple events will be dispatched for the same changes. To get around this, we can \"debounce\" our functions.\n\n```\nimport { debounce } from \"jsr:@std/async/debounce\";\n```\n\nIn this specific case, we use the standard library to do the work for us. This function will run at most once every two hundred milliseconds\n\n```\nconst log = debounce((event: Deno.FsEvent) => {\n  console.log(\"[%s] %s\", event.kind, event.paths[0]);\n}, 200);\n\nwatcher = Deno.watchFs(\"./\");\n\nfor await (const event of watcher) {\n  log(event);\n}\n```\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/watching_files.ts) locally using the Deno CLI:\n\n```\ndeno run --allow-read https://docs.deno.com/examples/scripts/watching_files.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/watching_files", "title": "Watching the filesystem", "description": "When creating frameworks or CLI tools, it is often necessary to watch the filesystem for changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:53:00", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Watching the filesystem", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Watching the filesystem", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Watching the filesystem", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Watching the filesystem", "viewport": "width=device-width, initial-scale=1", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "scrapeId": "87012a07-d3d2-4218-9d32-835e5862586a", "sourceURL": "https://docs.deno.com/examples/watching_files", "url": "https://docs.deno.com/examples/watching_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Watching the filesystem\"?\n\nAssistant: Here are some code examples:\n\n### Watching the filesystem\n```yaml\nlet watcher = Deno.watchFs(\"./\");\n```\n\n### Async iterable interaction\n```yaml\nfor await (const event of watcher) {\n  console.log(\">>>> event\", event);\n} \n\nwatcher.close();\n```\n\n### Debouncing function\n```yaml\nimport { debounce } from \"jsr:@std/async/debounce\";\n\nconst log = debounce((event: Deno.FsEvent) => {\n  console.log(\"[%s] %s\", event.kind, event.paths[0]);\n}, 200);\n\nwatcher = Deno.watchFs(\"./\");\n\nfor await (const event of watcher) {\n  log(event);\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/watching_files", "title": "Watching the filesystem", "description": "When creating frameworks or CLI tools, it is often necessary to watch the filesystem for changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:53:00", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Watching the filesystem", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Watching the filesystem", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Watching the filesystem", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Watching the filesystem", "viewport": "width=device-width, initial-scale=1", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "scrapeId": "87012a07-d3d2-4218-9d32-835e5862586a", "sourceURL": "https://docs.deno.com/examples/watching_files", "url": "https://docs.deno.com/examples/watching_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Watching the filesystem\"?\n\nAssistant: Here are the recommended best practices:\n\n• In real applications, it is quite rare that an application needs to react to every change instantly. Events will be duplicated and multiple events will be dispatched for the same changes. To get around this, we can \"debounce\" our functions.\n", "metadata": {"source_url": "https://docs.deno.com/examples/watching_files", "title": "Watching the filesystem", "description": "When creating frameworks or CLI tools, it is often necessary to watch the filesystem for changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:53:00", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Watching the filesystem", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Watching the filesystem", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Watching the filesystem", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Watching the filesystem", "viewport": "width=device-width, initial-scale=1", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "scrapeId": "87012a07-d3d2-4218-9d32-835e5862586a", "sourceURL": "https://docs.deno.com/examples/watching_files", "url": "https://docs.deno.com/examples/watching_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Parsing and serializing CSV\"?\n\nAssistant: CSV is a data serialization format that is designed to be portable for table-like applications.\n\nHere's a detailed explanation:\n\n\n## Parsing CSV\nTo parse a CSV string, you can use the the standard library's CSV parse function. The value is returned as a JavaScript object.\n\n```javascript\nlet text = `\nurl,views,likes\nhttps://deno.land,10,7\nhttps://deno.land/x,20,15\nhttps://deno.dev,30,23\n`;\nlet data = parse(text, {\n  skipFirstRow: true,\n  strip: true,\n});\nconsole.log(data[0].url); // https://deno.land\nconsole.log(data[0].views); // 10\nconsole.log(data[0].likes); // 7\n```\n\nIn the case where our CSV is formatted differently, we are also able to provide the columns through code.\n\n```javascript\ntext = `\nhttps://deno.land,10,7\nhttps://deno.land/x,20,15\nhttps://deno.dev,30,23\n`;\ndata = parse(text, {\n  columns: [\"url\", \"views\", \"likes\"],\n});\nconsole.log(data[0].url); // https://deno.land\nconsole.log(data[0].views); // 10\nconsole.log(data[0].likes); // 7\n```\n\n## Stringifying CSV\nTo turn a list of JavaScript object into a CSV string, you can use the standard library's CSV stringify function.\n\n```javascript\nconst obj = [\n  { mascot: \"dino\", fans: { old: 100, new: 200 } },\n  { mascot: \"bread\", fans: { old: 5, new: 2 } },\n];\nconst csv = stringify(obj, {\n  columns: [\n    \"mascot\",\n    [\"fans\", \"new\"],\n  ],\n});\nconsole.log(csv);\n// mascot,new\n// dino,200\n// bread,2\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_csv", "title": "Parsing and serializing CSV", "description": "CSV is a data serialization format that is designed to be portable for table-like applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:53:16", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:site_name": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:title": "Parsing and serializing CSV", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Parsing and serializing CSV", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:title": "Parsing and serializing CSV", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Parsing and serializing CSV", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "scrapeId": "b26dad93-ade6-45cc-b014-0f41341dec06", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_csv", "url": "https://docs.deno.com/examples/parsing_serializing_csv/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Parsing and serializing CSV\"?\n\nAssistant: Here are some code examples:\n\n### Parsing CSV Example\n```yaml\nlet text = `\nurl,views,likes\nhttps://deno.land,10,7\nhttps://deno.land/x,20,15\nhttps://deno.dev,30,23\n`;\nlet data = parse(text, {\n  skipFirstRow: true,\n  strip: true,\n});\nconsole.log(data[0].url); // https://deno.land\nconsole.log(data[0].views); // 10\nconsole.log(data[0].likes); // 7\n\n```\n\n### Providing Columns Example\n```yaml\ntext = `\nhttps://deno.land,10,7\nhttps://deno.land/x,20,15\nhttps://deno.dev,30,23\n`;\ndata = parse(text, {\n  columns: [\"url\", \"views\", \"likes\"],\n});\nconsole.log(data[0].url); // https://deno.land\nconsole.log(data[0].views); // 10\nconsole.log(data[0].likes); // 7\n\n```\n\n### Stringifying CSV Example\n```yaml\nconst obj = [\n  { mascot: \"dino\", fans: { old: 100, new: 200 } },\n  { mascot: \"bread\", fans: { old: 5, new: 2 } },\n];\nconst csv = stringify(obj, {\n  columns: [\n    \"mascot\",\n    [\"fans\", \"new\"],\n  ],\n});\nconsole.log(csv);\n// mascot,new\n// dino,200\n// bread,2\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_csv", "title": "Parsing and serializing CSV", "description": "CSV is a data serialization format that is designed to be portable for table-like applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:53:16", "type": "code_examples", "page_metadata": {"twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:site_name": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:title": "Parsing and serializing CSV", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Parsing and serializing CSV", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:title": "Parsing and serializing CSV", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Parsing and serializing CSV", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "scrapeId": "b26dad93-ade6-45cc-b014-0f41341dec06", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_csv", "url": "https://docs.deno.com/examples/parsing_serializing_csv/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Parsing and serializing CSV\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the standard library's CSV parse function to convert CSV strings into JavaScript objects.\n• When parsing CSV, you can skip the first row if it contains headers by using the skipFirstRow option.\n• You can specify custom column names when parsing CSV by using the columns option in the parse function.\n• To convert JavaScript objects into CSV strings, use the standard library's CSV stringify function.\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_csv", "title": "Parsing and serializing CSV", "description": "CSV is a data serialization format that is designed to be portable for table-like applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:53:16", "type": "best_practices", "page_metadata": {"twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:site_name": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:title": "Parsing and serializing CSV", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Parsing and serializing CSV", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:title": "Parsing and serializing CSV", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Parsing and serializing CSV", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "scrapeId": "b26dad93-ade6-45cc-b014-0f41341dec06", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_csv", "url": "https://docs.deno.com/examples/parsing_serializing_csv/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Writing files\"?\n\nAssistant: Many applications need to write files to disk. Deno provides a simple interface for writing files.\n\nHere's a detailed explanation:\n\n\n## Writing Files\nThe easiest way to write a file, is to dump an entire buffer into the file at once.\n\n```javascript\nconst bytes = new Uint8Array([72, 101, 108, 108, 111]);\nawait Deno.writeFile(\"hello.txt\", bytes, { mode: 0o644 });\n```\n\nYou can also write a string instead of a byte array.\n\n```javascript\nawait Deno.writeTextFile(\"hello.txt\", \"Hello World\");\n```\n\nTo append to a text file, set the `append` parameter to `true`.\n\n```javascript\nawait Deno.writeTextFile(\"server.log\", \"Request: ...\", { append: true });\n```\n\nSynchronous writing is also supported.\n\n```javascript\nDeno.writeFileSync(\"hello.txt\", bytes);\nDeno.writeTextFileSync(\"hello.txt\", \"Hello World\");\n```\n\nFor more granular writes, open a new file for writing.\n\n```javascript\nconst file = await Deno.create(\"hello.txt\");\n```\n\nYou can write chunks of data to the file.\n\n```javascript\nconst written = await file.write(bytes);\nconsole.log(`${written} bytes written.`);\n```\n\nA `file.write` returns the number of bytes written, as it might not write all bytes passed. We can get a Writer instead to make sure the entire buffer is written.\n\n```javascript\nconst writer = file.writable.getWriter();\nawait writer.write(new TextEncoder().encode(\"World!\"));\n```\n\nClosing the writer automatically closes the file. If you don't use a writer, make sure to close the file after you are done with it.\n\n```javascript\nawait writer.close();\n```\n\nThe `--allow-write` permission is required to write files.\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/writing_files.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-read --allow-write https://docs.deno.com/examples/scripts/writing_files.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/writing_files", "title": "Writing files", "description": "Many applications need to write files to disk. Deno provides a simple interface for writing files.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:53:29", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:type": "article", "ogImage": "/img/og.webp", "twitter:title": "Writing files", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Writing files", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "title": "Writing files", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Writing files", "scrapeId": "5ed42878-ae06-4aa6-b6d3-02f19bf51948", "sourceURL": "https://docs.deno.com/examples/writing_files", "url": "https://docs.deno.com/examples/writing_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Writing files\"?\n\nAssistant: Here are some code examples:\n\n### Write a byte array to a file\n```yaml\nconst bytes = new Uint8Array([72, 101, 108, 108, 111]);\nawait Deno.writeFile(\"hello.txt\", bytes, { mode: 0o644 });\n```\n\n### Write a string to a file\n```yaml\nawait Deno.writeTextFile(\"hello.txt\", \"Hello World\");\n```\n\n### Append to a text file\n```yaml\nawait Deno.writeTextFile(\"server.log\", \"Request: ...\", { append: true });\n```\n\n### Synchronous write of a byte array\n```yaml\nDeno.writeFileSync(\"hello.txt\", bytes);\n```\n\n### Synchronous write of a string\n```yaml\nDeno.writeTextFileSync(\"hello.txt\", \"Hello World\");\n```\n\n### Create a file for writing\n```yaml\nconst file = await Deno.create(\"hello.txt\");\n```\n\n### Write chunks of data to a file\n```yaml\nconst written = await file.write(bytes);\nconsole.log(`${written} bytes written.`);\n```\n\n### Using a writer to ensure all data is written\n```yaml\nconst writer = file.writable.getWriter();\nawait writer.write(new TextEncoder().encode(\"World!\"));\n```\n\n### Close the writer and file\n```yaml\nawait writer.close();\n```\n\n### Run the example using Deno CLI\n```yaml\ndeno run --allow-read --allow-write https://docs.deno.com/examples/scripts/writing_files.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/writing_files", "title": "Writing files", "description": "Many applications need to write files to disk. Deno provides a simple interface for writing files.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:53:29", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:type": "article", "ogImage": "/img/og.webp", "twitter:title": "Writing files", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Writing files", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "title": "Writing files", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Writing files", "scrapeId": "5ed42878-ae06-4aa6-b6d3-02f19bf51948", "sourceURL": "https://docs.deno.com/examples/writing_files", "url": "https://docs.deno.com/examples/writing_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Writing files\"?\n\nAssistant: Here are the recommended best practices:\n\n• The `--allow-write` permission is required to write files.\n• Make sure to close the file after writing if not using a writer.\n", "metadata": {"source_url": "https://docs.deno.com/examples/writing_files", "title": "Writing files", "description": "Many applications need to write files to disk. Deno provides a simple interface for writing files.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:53:29", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:type": "article", "ogImage": "/img/og.webp", "twitter:title": "Writing files", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Writing files", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "title": "Writing files", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Writing files", "scrapeId": "5ed42878-ae06-4aa6-b6d3-02f19bf51948", "sourceURL": "https://docs.deno.com/examples/writing_files", "url": "https://docs.deno.com/examples/writing_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"How to use Mongoose with Deno\"?\n\nAssistant: Mongoose is a popular, schema-based library that models data for MongoDB. It simplifies writing MongoDB validation, casting, and other relevant business logic. This tutorial will show you how to setup Mongoose and MongoDB with your Deno project.\n\nHere's a detailed explanation:\n\n\n## Creating a Mongoose Model\nLet's create a simple app that connects to MongoDB, creates a `Dinosaur` model, and adds and updates a dinosaur to the database.\n\nFirst, we'll create the necessary files and directories:\n\n```highlight notranslate console\ntouch main.ts && mkdir model && touch model/Dinosaur.ts\n```\n\nIn `/model/Dinosaur.ts`, we'll import `npm:mongoose`, define the [schema], and export it:\n\n```highlight notranslate ts\nimport { model, Schema } from \"npm:mongoose@^6.7\";\n\n// Define schema.\nconst dinosaurSchema = new Schema({\n  name: { type: String, unique: true },\n  description: String,\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\n// Validations\ndinosaurSchema.path(\"name\").required(true, \"Dinosaur name cannot be blank.\");\ndinosaurSchema.path(\"description\").required(\n  true,\n  \"Dinosaur description cannot be blank.\",\n);\n\n// Export model.\nexport default model(\"Dinosaur\", dinosaurSchema);\n```\n\n## Connecting to MongoDB\nNow, in our `main.ts` file, we'll import mongoose and the `Dinosaur` schema, and connect to MongoDB:\n\n```highlight notranslate ts\nimport mongoose from \"npm:mongoose@^6.7\";\nimport Dinosaur from \"./model/Dinosaur.ts\";\n\nawait mongoose.connect(\"mongodb://localhost:27017\");\n\n// Check to see connection status.\nconsole.log(mongoose.connection.readyState);\n```\n\nBecause Deno supports top-level `await`, we're able to simply `await mongoose.connect()`.\n\nRunning this, we should expect a log of `1`:\n\n```highlight notranslate shell\n$ deno run --allow-read --allow-sys --allow-env --allow-net main.ts\n1\n```\n\nIt worked!\n\n## Manipulating Data\nLet's add an instance [method](https://mongoosejs.com/docs/guide.html#methods) to our `Dinosaur` schema in `/model/Dinosaur.ts`:\n\n```highlight notranslate ts\n// ./model/Dinosaur.ts\n\n// Methods.\ndinosaurSchema.methods = {\n  // Update description.\n  updateDescription: async function (description: string) {\n    this.description = description;\n    return await this.save();\n  },\n};\n// ...\n```\n\nThis instance method, `updateDescription`, will allow you to update a record's description.\n\nBack in `main.ts`, let's start adding and manipulating data in MongoDB.\n\n```highlight notranslate ts\n// main.ts\n\n// Create a new Dinosaur.\nconst deno = new Dinosaur({\n  name: \"Deno\",\n  description: \"The fastest dinosaur ever lived.\",\n});\n\n// // Insert deno.\nawait deno.save();\n\n// Find Deno by name.\nconst denoFromMongoDb = await Dinosaur.findOne({ name: \"Deno\" });\nconsole.log(\n  `Finding Deno in MongoDB -- \\n  ${denoFromMongoDb.name}: ${denoFromMongoDb.description}`,\n);\n\n// Update description for Deno and save it.\nawait denoFromMongoDb.updateDescription(\n  \"The fastest and most secure dinosaur ever lived.\",\n);\n\n// Check MongoDB to see Deno's updated description.\nconst newDenoFromMongoDb = await Dinosaur.findOne({ name: \"Deno\" });\nconsole.log(\n  `Finding Deno (again) -- \\n  ${newDenoFromMongoDb.name}: ${newDenoFromMongoDb.description}`,\n);\n```\n\nRunning the code, we get:\n\n```highlight notranslate console\nFinding Deno in MongoDB --\n  Deno: The fastest dinosaur ever lived.\nFinding Deno (again) --\n  Deno: The fastest and most secure dinosaur ever lived.\n```\n\nBoom!\n", "metadata": {"source_url": "https://docs.deno.com/examples/mongoose_tutorial", "title": "How to use Mongoose with Deno", "description": "Mongoose is a popular, schema-based library that models data for MongoDB. It simplifies writing MongoDB validation, casting, and other relevant business logic. This tutorial will show you how to setup Mongoose and MongoDB with your Deno project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:53:53", "type": "overview", "page_metadata": {"language": "en", "ogTitle": "How to use Mongoose with Deno", "twitter:title": "How to use Mongoose with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "How to use Mongoose with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "How to use Mongoose with Deno", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "1962b4b2-2946-490e-a0ee-5e98c9579e9c", "sourceURL": "https://docs.deno.com/examples/mongoose_tutorial", "url": "https://docs.deno.com/examples/mongoose_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"How to use Mongoose with Deno\"?\n\nAssistant: Here are some code examples:\n\n### Creating a Mongoose Model\n```yaml\n```highlight notranslate console\ntouch main.ts && mkdir model && touch model/Dinosaur.ts\n```\n\n```highlight notranslate ts\nimport { model, Schema } from \"npm:mongoose@^6.7\";\n\n// Define schema.\nconst dinosaurSchema = new Schema({\n  name: { type: String, unique: true },\n  description: String,\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\n// Validations\ndinosaurSchema.path(\"name\").required(true, \"Dinosaur name cannot be blank.\");\ndinosaurSchema.path(\"description\").required(\n  true,\n  \"Dinosaur description cannot be blank.\",\n);\n\n// Export model.\nexport default model(\"Dinosaur\", dinosaurSchema);\n```\n```\n\n### Connecting to MongoDB\n```yaml\n```highlight notranslate ts\nimport mongoose from \"npm:mongoose@^6.7\";\nimport Dinosaur from \"./model/Dinosaur.ts\";\n\nawait mongoose.connect(\"mongodb://localhost:27017\");\n\n// Check to see connection status.\nconsole.log(mongoose.connection.readyState);\n```\n\n```highlight notranslate shell\n$ deno run --allow-read --allow-sys --allow-env --allow-net main.ts\n1\n```\n```\n\n### Manipulating Data\n```yaml\n```highlight notranslate ts\n// ./model/Dinosaur.ts\n\n// Methods.\ndinosaurSchema.methods = {\n  // Update description.\n  updateDescription: async function (description: string) {\n    this.description = description;\n    return await this.save();\n  },\n};\n// ...\n```\n\n```highlight notranslate ts\n// main.ts\n\n// Create a new Dinosaur.\nconst deno = new Dinosaur({\n  name: \"Deno\",\n  description: \"The fastest dinosaur ever lived.\",\n});\n\n// // Insert deno.\nawait deno.save();\n\n// Find Deno by name.\nconst denoFromMongoDb = await Dinosaur.findOne({ name: \"Deno\" });\nconsole.log(\n  `Finding Deno in MongoDB -- \\n  ${denoFromMongoDb.name}: ${denoFromMongoDb.description}`,\n);\n\n// Update description for Deno and save it.\nawait denoFromMongoDb.updateDescription(\n  \"The fastest and most secure dinosaur ever lived.\",\n);\n\n// Check MongoDB to see Deno's updated description.\nconst newDenoFromMongoDb = await Dinosaur.findOne({ name: \"Deno\" });\nconsole.log(\n  `Finding Deno (again) -- \\n  ${newDenoFromMongoDb.name}: ${newDenoFromMongoDb.description}`,\n);\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/mongoose_tutorial", "title": "How to use Mongoose with Deno", "description": "Mongoose is a popular, schema-based library that models data for MongoDB. It simplifies writing MongoDB validation, casting, and other relevant business logic. This tutorial will show you how to setup Mongoose and MongoDB with your Deno project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:53:53", "type": "code_examples", "page_metadata": {"language": "en", "ogTitle": "How to use Mongoose with Deno", "twitter:title": "How to use Mongoose with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "How to use Mongoose with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "How to use Mongoose with Deno", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "1962b4b2-2946-490e-a0ee-5e98c9579e9c", "sourceURL": "https://docs.deno.com/examples/mongoose_tutorial", "url": "https://docs.deno.com/examples/mongoose_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"How to use Mongoose with Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno supports top-level await, allowing for simpler asynchronous code execution.\n", "metadata": {"source_url": "https://docs.deno.com/examples/mongoose_tutorial", "title": "How to use Mongoose with Deno", "description": "Mongoose is a popular, schema-based library that models data for MongoDB. It simplifies writing MongoDB validation, casting, and other relevant business logic. This tutorial will show you how to setup Mongoose and MongoDB with your Deno project.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:53:53", "type": "best_practices", "page_metadata": {"language": "en", "ogTitle": "How to use Mongoose with Deno", "twitter:title": "How to use Mongoose with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "How to use Mongoose with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "How to use Mongoose with Deno", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "1962b4b2-2946-490e-a0ee-5e98c9579e9c", "sourceURL": "https://docs.deno.com/examples/mongoose_tutorial", "url": "https://docs.deno.com/examples/mongoose_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"ULID\"?\n\nAssistant: One common need for distributed systems are identifiers. ULIDs are a universally unique lexicographically sortable identifier with some nice properties. They are 128-bit values, encoded as 26 character strings which also encode the timestamp. They play very nicely with Deno KV.\n\nHere's a detailed explanation:\n\n\n## Introduction\nOne common need for distributed systems are identifiers. ULIDs are a universally unique lexicographically sortable identifier with some nice properties. They are 128-bit values, encoded as 26 character strings which also encode the timestamp. They play very nicely with Deno KV.\n\n## Generating ULIDs\nThe standard library contains a function for generating ULIDs. To generate a ULID, simply call the function.\n\n## Generating ULIDs from a Timestamp\nULIDs can also be generated from a timestamp. This is useful for migrating from another system.\n\n## Decoding a ULID\nGiven a ULID, you can get the timestamp back out.\n\n## Monotonic ULIDs\nOptionally, if you're not on a distributed system and want monotonic ULIDs, you can use the monotonic ULID generator instead.\n\n## Running the Example\nRun this example locally using the Deno CLI:\n\n## Additional Resources\n- [ULID: Specification](https://github.com/ulid/spec)\n", "metadata": {"source_url": "https://docs.deno.com/examples/ulid", "title": "ULID", "description": "One common need for distributed systems are identifiers. ULIDs are a universally unique lexicographically sortable identifier with some nice properties. They are 128-bit values, encoded as 26 character strings which also encode the timestamp. They play very nicely with Deno KV.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 22:54:04", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "ULID", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "ULID", "og:title": "ULID", "ogTitle": "ULID", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "scrapeId": "e076d70f-87f9-4620-bf0b-ab7840e90ae9", "sourceURL": "https://docs.deno.com/examples/ulid", "url": "https://docs.deno.com/examples/ulid/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"ULID\"?\n\nAssistant: Here are some code examples:\n\n### Importing ULID\n```yaml\nimport { ulid } from \"jsr:@std/ulid@1\";\n```\n\n### Generating ULIDs\n```yaml\nconsole.log(ulid());\nconsole.log(ulid());\nconsole.log(ulid());\n```\n\n### Generating ULIDs from a Timestamp\n```yaml\nconst timestamp = Date.now();\nconsole.log(ulid(timestamp));\nconsole.log(ulid(timestamp));\nconsole.log(ulid(timestamp));\n```\n\n### Decoding a ULID\n```yaml\nimport { decodeTime } from \"jsr:@std/ulid@1\";\nconst myULID = ulid();\nconsole.log(decodeTime(myULID));\n```\n\n### Using Monotonic ULID Generator\n```yaml\nimport { monotonicUlid } from \"jsr:@std/ulid@1\";\nconsole.log(monotonicUlid(150000)); // 000XAL6S41ACTAV9WEVGEMMVR8\nconsole.log(monotonicUlid(150000)); // 000XAL6S41ACTAV9WEVGEMMVR9\nconsole.log(monotonicUlid(150000)); // 000XAL6S41ACTAV9WEVGEMMVRA\n```\n\n### Running the Example Locally\n```yaml\ndeno run https://docs.deno.com/examples/scripts/ulid.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/ulid", "title": "ULID", "description": "One common need for distributed systems are identifiers. ULIDs are a universally unique lexicographically sortable identifier with some nice properties. They are 128-bit values, encoded as 26 character strings which also encode the timestamp. They play very nicely with Deno KV.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 22:54:04", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "ULID", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "ULID", "og:title": "ULID", "ogTitle": "ULID", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "scrapeId": "e076d70f-87f9-4620-bf0b-ab7840e90ae9", "sourceURL": "https://docs.deno.com/examples/ulid", "url": "https://docs.deno.com/examples/ulid/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"ULID\"?\n\nAssistant: Here are the recommended best practices:\n\n• ULIDs are useful for distributed systems as they are unique and sortable.\n• Consider using monotonic ULIDs if you are not in a distributed system.\n", "metadata": {"source_url": "https://docs.deno.com/examples/ulid", "title": "ULID", "description": "One common need for distributed systems are identifiers. ULIDs are a universally unique lexicographically sortable identifier with some nice properties. They are 128-bit values, encoded as 26 character strings which also encode the timestamp. They play very nicely with Deno KV.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 22:54:04", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "ULID", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "ULID", "og:title": "ULID", "ogTitle": "ULID", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "scrapeId": "e076d70f-87f9-4620-bf0b-ab7840e90ae9", "sourceURL": "https://docs.deno.com/examples/ulid", "url": "https://docs.deno.com/examples/ulid/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"How to deploy Deno on Kinsta\"?\n\nAssistant: Kinsta Application Hosting is a service that lets you build and deploy your web apps directly from your Git repository.\n\nHere's a detailed explanation:\n\n\n## Preparing your application\nAt **Kinsta**, we recommend using the [`deno-bin`](https://www.npmjs.com/package/deno-bin) package to run Deno applications.\n\nTo do so, your `package.json` should look like this:\n\n```highlight notranslate json\n{\n  \"name\": \"deno app\",\n  \"scripts\": {\n    \"start\": \"deno run --allow-net index.js --port=${PORT}\"\n  },\n  \"devDependencies\": {\n    \"deno-bin\": \"^1.28.2\"\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/kinsta_tutorial", "title": "How to deploy Deno on Kinsta", "description": "Kinsta Application Hosting is a service that lets you build and deploy your web apps directly from your Git repository.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:54:14", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "How to deploy Deno on Kinsta", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:title": "How to deploy Deno on Kinsta", "twitter:title": "How to deploy Deno on Kinsta", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "ogTitle": "How to deploy Deno on Kinsta", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7bf74d02-18f9-4fc6-9132-910fedf646da", "sourceURL": "https://docs.deno.com/examples/kinsta_tutorial", "url": "https://docs.deno.com/examples/kinsta_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"How to deploy Deno on Kinsta\"?\n\nAssistant: Here are some code examples:\n\n### package.json\n```yaml\n{\n  \"name\": \"deno app\",\n  \"scripts\": {\n    \"start\": \"deno run --allow-net index.js --port=${PORT}\"\n  },\n  \"devDependencies\": {\n    \"deno-bin\": \"^1.28.2\"\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/kinsta_tutorial", "title": "How to deploy Deno on Kinsta", "description": "Kinsta Application Hosting is a service that lets you build and deploy your web apps directly from your Git repository.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:54:14", "type": "code_examples", "page_metadata": {"twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "How to deploy Deno on Kinsta", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:title": "How to deploy Deno on Kinsta", "twitter:title": "How to deploy Deno on Kinsta", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "ogTitle": "How to deploy Deno on Kinsta", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7bf74d02-18f9-4fc6-9132-910fedf646da", "sourceURL": "https://docs.deno.com/examples/kinsta_tutorial", "url": "https://docs.deno.com/examples/kinsta_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"How to deploy Deno on Kinsta\"?\n\nAssistant: Here are the recommended best practices:\n\n• It's crucial not to hardcode the PORT but use the environmental variable Kinsta provides.\n", "metadata": {"source_url": "https://docs.deno.com/examples/kinsta_tutorial", "title": "How to deploy Deno on Kinsta", "description": "Kinsta Application Hosting is a service that lets you build and deploy your web apps directly from your Git repository.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:54:14", "type": "best_practices", "page_metadata": {"twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "How to deploy Deno on Kinsta", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:title": "How to deploy Deno on Kinsta", "twitter:title": "How to deploy Deno on Kinsta", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "ogTitle": "How to deploy Deno on Kinsta", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7bf74d02-18f9-4fc6-9132-910fedf646da", "sourceURL": "https://docs.deno.com/examples/kinsta_tutorial", "url": "https://docs.deno.com/examples/kinsta_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Timeouts & intervals\"?\n\nAssistant: Timers are used to schedule functions to happen at a later time.\n\nHere's a detailed explanation:\n\n\n## Timers\nHere we create a timer that will print \"Hello, World!\" to the console after 1 second (1000 milliseconds).\n\n## Cancelling Timers\nYou can also cancel a timer after it has been created.\n\n## Intervals\nIntervals can be created to repeat a function at a regular interval.\n\n## Cancelling Intervals\nIntervals can also be cancelled.\n\n## Running the Example\nRun this example locally using the Deno CLI:\n\n## Additional resources\n- [MDN: setTimeout](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n- [MDN: setInterval](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n", "metadata": {"source_url": "https://docs.deno.com/examples/timers", "title": "Timeouts & intervals", "description": "Timers are used to schedule functions to happen at a later time.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:54:22", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:type": "article", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "ogLocale": "en_US", "language": "en", "ogTitle": "Timeouts & intervals", "twitter:title": "Timeouts & intervals", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "title": "Timeouts & intervals", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:title": "Timeouts & intervals", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "7ac0eec2-436f-476a-9763-1df3a7c6ac4e", "sourceURL": "https://docs.deno.com/examples/timers", "url": "https://docs.deno.com/examples/timers/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Timeouts & intervals\"?\n\nAssistant: Here are some code examples:\n\n### Creating a Timer\n```yaml\nsetTimeout(() => console.log(\"Hello, World!\"), 1000);\n```\n\n### Cancelling a Timer\n```yaml\nconst timerId = setTimeout(() => console.log(\"No!\"), 1000);\nclearTimeout(timerId);\n```\n\n### Creating an Interval\n```yaml\nsetInterval(() => console.log(\"Hey!\"), 1000);\n```\n\n### Cancelling an Interval\n```yaml\nconst intervalId = setInterval(() => console.log(\"Nope\"), 1000);\nclearInterval(intervalId);\n```\n\n### Running the Example Locally\n```yaml\ndeno run https://docs.deno.com/examples/scripts/timers.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/timers", "title": "Timeouts & intervals", "description": "Timers are used to schedule functions to happen at a later time.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:54:22", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:type": "article", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "ogLocale": "en_US", "language": "en", "ogTitle": "Timeouts & intervals", "twitter:title": "Timeouts & intervals", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "title": "Timeouts & intervals", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:title": "Timeouts & intervals", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "7ac0eec2-436f-476a-9763-1df3a7c6ac4e", "sourceURL": "https://docs.deno.com/examples/timers", "url": "https://docs.deno.com/examples/timers/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Timeouts & intervals\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use clearTimeout to cancel timers when they are no longer needed.\n• Use clearInterval to stop intervals when they are no longer necessary.\n", "metadata": {"source_url": "https://docs.deno.com/examples/timers", "title": "Timeouts & intervals", "description": "Timers are used to schedule functions to happen at a later time.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:54:22", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:type": "article", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "ogLocale": "en_US", "language": "en", "ogTitle": "Timeouts & intervals", "twitter:title": "Timeouts & intervals", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "title": "Timeouts & intervals", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:title": "Timeouts & intervals", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "7ac0eec2-436f-476a-9763-1df3a7c6ac4e", "sourceURL": "https://docs.deno.com/examples/timers", "url": "https://docs.deno.com/examples/timers/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Spy functions\"?\n\nAssistant: A function spy allow us to assert that a function was called with the correct arguments and a specific number of times. This snippet demonstrates how to spy on a function using a mock function.\n\nHere's a detailed explanation:\n\n\n## Spy Function Example\nA function spy allow us to assert that a function was called with the correct arguments and a specific number of times. This snippet demonstrates how to spy on a function using a mock function.\n\n```typescript\nimport { assertSpyCall, assertSpyCalls, spy } from \"jsr:@std/testing/mock\";\n\nfunction log(message: string) {\n  console.log(message);\n}\n\nconst logger = { log };\n\nDeno.test(\"logger uses the log function\", () => {\n  // Create a spy on the `logger.log` method.\n  const logSpy = spy(logger, \"log\");\n\n  // Call the `logger.log` method.\n  logger.log(\"Hello, world!\");\n\n  try {\n    // Assert that the `log` function was called just once.\n    assertSpyCalls(logSpy, 1);\n\n    // Assert that the `log` function was called with the correct arguments.\n    assertSpyCall(logSpy, 0, { args: [\"Hello, world!\"] });\n  } finally {\n    // Restore the logger.log function to stop spying it.\n    logSpy.restore();\n  }\n});\n\nDeno.test(\"Creating a spy with the using keyword\", () => {\n  // method spys are disposable, so we can create them with the keyword `using`\n  using logSpy = spy(logger, \"log\");\n\n  logger.log(\"Disposable spy\");\n\n  // Spys created with the `using` keyword are automatically restored at the end of the test\n  assertSpyCalls(logSpy, 1);\n});\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/spy_functions", "title": "Spy functions", "description": "A function spy allow us to assert that a function was called with the correct arguments and a specific number of times. This snippet demonstrates how to spy on a function using a mock function.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:54:34", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:card": "summary_large_image", "twitter:title": "Spy functions", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Spy functions", "og:title": "Spy functions", "og:site_name": "Deno", "title": "Spy functions", "language": "en", "scrapeId": "f067aca8-3d7f-4cb8-ae1b-35a22983747f", "sourceURL": "https://docs.deno.com/examples/spy_functions", "url": "https://docs.deno.com/examples/spy_functions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Spy functions\"?\n\nAssistant: Here are some code examples:\n\n### Spy Function Example\n```yaml\nimport { assertSpyCall, assertSpyCalls, spy } from \"jsr:@std/testing/mock\";\n\nfunction log(message: string) {\n  console.log(message);\n}\n\nconst logger = { log };\n\nDeno.test(\"logger uses the log function\", () => {\n  // Create a spy on the `logger.log` method.\n  const logSpy = spy(logger, \"log\");\n\n  // Call the `logger.log` method.\n  logger.log(\"Hello, world!\");\n\n  try {\n    // Assert that the `log` function was called just once.\n    assertSpyCalls(logSpy, 1);\n\n    // Assert that the `log` function was called with the correct arguments.\n    assertSpyCall(logSpy, 0, { args: [\"Hello, world!\"] });\n  } finally {\n    // Restore the logger.log function to stop spying it.\n    logSpy.restore();\n  }\n});\n\nDeno.test(\"Creating a spy with the using keyword\", () => {\n  // method spys are disposable, so we can create them with the keyword `using`\n  using logSpy = spy(logger, \"log\");\n\n  logger.log(\"Disposable spy\");\n\n  // Spys created with the `using` keyword are automatically restored at the end of the test\n  assertSpyCalls(logSpy, 1);\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/spy_functions", "title": "Spy functions", "description": "A function spy allow us to assert that a function was called with the correct arguments and a specific number of times. This snippet demonstrates how to spy on a function using a mock function.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:54:34", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:card": "summary_large_image", "twitter:title": "Spy functions", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Spy functions", "og:title": "Spy functions", "og:site_name": "Deno", "title": "Spy functions", "language": "en", "scrapeId": "f067aca8-3d7f-4cb8-ae1b-35a22983747f", "sourceURL": "https://docs.deno.com/examples/spy_functions", "url": "https://docs.deno.com/examples/spy_functions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Spy functions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Spys created with the `using` keyword are automatically restored at the end of the test.\n", "metadata": {"source_url": "https://docs.deno.com/examples/spy_functions", "title": "Spy functions", "description": "A function spy allow us to assert that a function was called with the correct arguments and a specific number of times. This snippet demonstrates how to spy on a function using a mock function.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 22:54:34", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:card": "summary_large_image", "twitter:title": "Spy functions", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Spy functions", "og:title": "Spy functions", "og:site_name": "Deno", "title": "Spy functions", "language": "en", "scrapeId": "f067aca8-3d7f-4cb8-ae1b-35a22983747f", "sourceURL": "https://docs.deno.com/examples/spy_functions", "url": "https://docs.deno.com/examples/spy_functions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Running DNS queries\"?\n\nAssistant: This page covers how to run DNS queries using Deno, including querying different DNS record types and specifying custom nameservers.\n\nHere's a detailed explanation:\n\n\n## Basic DNS Query\nIn the most basic case, we can query a domain's A record. This will give us a list of ipv4 addresses.\n\n## Querying Other Record Types\nWe can also query other record types. In this case we are querying an MX record which is related to email protocols. Deno supports querying A, AAAA, ANAME, CAA, CNAME, MX, NAPTR, NS, PTR, SOA, SRV, and TXT records.\n\n## Specifying a Nameserver\nWe are also optionally able to specify a nameserver via an ip address and (optionally) a port number. To override the system configuration.\n\n## Running the Example Locally\nRun this example locally using the Deno CLI:\n\n## Additional Resources\n- [Doc: Deno.resolveDns](https://docs.deno.com/api/deno/~/Deno.resolveDns)\n- [MDN: DNS](https://developer.mozilla.org/en-US/docs/Glossary/DNS)\n", "metadata": {"source_url": "https://docs.deno.com/examples/dns_queries", "title": "Running DNS queries", "description": "This page covers how to run DNS queries using Deno, including querying different DNS record types and specifying custom nameservers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:54:42", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Running DNS queries", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:title": "Running DNS queries", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "title": "Running DNS queries", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:locale": "en_US", "twitter:title": "Running DNS queries", "scrapeId": "31dbb291-1543-4611-a8fc-b630cf43cd7b", "sourceURL": "https://docs.deno.com/examples/dns_queries", "url": "https://docs.deno.com/examples/dns_queries/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Running DNS queries\"?\n\nAssistant: Here are some code examples:\n\n### Querying A Record\n```yaml\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\nconsole.log(a);\n```\n\n### Querying MX Record\n```yaml\nconst mx = await Deno.resolveDns(\"example.com\", \"MX\");\nconsole.log(mx);\n```\n\n### Querying AAAA Record with Custom Nameserver\n```yaml\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\nconsole.log(aaaa);\n```\n\n### Running the Example with Deno CLI\n```yaml\ndeno run --allow-net https://docs.deno.com/examples/scripts/dns_queries.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/dns_queries", "title": "Running DNS queries", "description": "This page covers how to run DNS queries using Deno, including querying different DNS record types and specifying custom nameservers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:54:42", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Running DNS queries", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:title": "Running DNS queries", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "title": "Running DNS queries", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:locale": "en_US", "twitter:title": "Running DNS queries", "scrapeId": "31dbb291-1543-4611-a8fc-b630cf43cd7b", "sourceURL": "https://docs.deno.com/examples/dns_queries", "url": "https://docs.deno.com/examples/dns_queries/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Running DNS queries\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the appropriate DNS record type for your query to get the desired information.\n• Specify a custom nameserver if you need to override the default system configuration.\n", "metadata": {"source_url": "https://docs.deno.com/examples/dns_queries", "title": "Running DNS queries", "description": "This page covers how to run DNS queries using Deno, including querying different DNS record types and specifying custom nameservers.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:54:42", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Running DNS queries", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:title": "Running DNS queries", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "title": "Running DNS queries", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:locale": "en_US", "twitter:title": "Running DNS queries", "scrapeId": "31dbb291-1543-4611-a8fc-b630cf43cd7b", "sourceURL": "https://docs.deno.com/examples/dns_queries", "url": "https://docs.deno.com/examples/dns_queries/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"What is Deno?\"?\n\nAssistant: A short introduction to Deno and its history\n\nHere's a detailed explanation:\n\n\n## Description of video\nA short introduction to Deno and its history\n\n## Transcript and code\nDeno is an open source runtime for JavaScript, TypeScript, and WebAssembly projects that's built on V8 and Rust. It's modern, it's fast, it's flexible, and it's secure by default.\n\nDeno was created by Ryan Dahl, the creator of Node.js, and in 2018, he gave [a famous talk at JSConf EU](https://www.youtube.com/watch?v=M3BM9TB-8yA) about regrets that he had about Node. And Deno provides solutions to all of them. W\n\nWith the hindsight of someone who's been there, Deno gives us a runtime that's thought a lot about the details. Details like TypeScript support by default. You can run or import TypeScript without installing anything more than the Deno CLI. Deno has a built-in TypeScript compiler, so it'll just run your TypeScript code without any extra configuration.\n\nDetails like linting, formatting, and testing. Deno is an all-in-one toolchain that you can use to get started with your project without having to use all of your finite time on earth having to configure it. Details like web standards. Deno is built on web standards that you might recognize, like Fetch and WebSockets.\n\nYou don't have to learn anything new to use them. If you've used them in the browser, you're ready to use them in Deno. Deno is secure by default. You have to specifically enable permissions for sensitive APIs like the network, the file system, environment access. Deno has you opt into these permissions like you would to opt into geolocation in the browser.\n\n[In this course](https://www.youtube.com/watch?v=KPTOo4k8-GE&list=PLvvLnBDNuTEov9EBIp3MMfHlBxaKGRWTe), we're going to walk through the most important features of Deno with hands-on activities. Whether you've experimented with Deno in the past, or this is all new to you, I think you're going to like it here.\n\nFind more videos in the [Examples page](https://docs.deno.com/examples/) and on our [YouTube channel](https://www.youtube.com/@deno_land).\n", "metadata": {"source_url": "https://docs.deno.com/examples/what_is_deno", "title": "What is Deno?", "description": "A short introduction to Deno and its history", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 22:54:54", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "og:type": "article", "ogTitle": "What is Deno?", "language": "en", "twitter:title": "What is Deno?", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "What is Deno?", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:site": "@deno_land", "og:title": "What is Deno?", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "a29765df-68c8-40ba-88fc-551e6e3f244b", "sourceURL": "https://docs.deno.com/examples/what_is_deno", "url": "https://docs.deno.com/examples/what_is_deno/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Hello world\"?\n\nAssistant: The one and only line in this program will print \"Hello, World!\" to the console. Run this file with the Deno CLI and the run command.\n\nHere's a detailed explanation:\n\n\n## Code Example\nLog \"Hello, World!\" to the console.\n\n## Run the Example Locally\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/hello_world.ts) locally using the Deno CLI:\n\n## Additional Resources\n- [Deno: Installation](https://docs.deno.com/runtime/manual/getting_started/installation)\n- [Manual: Set up your environment](https://docs.deno.com/runtime/manual/getting_started/setup_your_environment)\n", "metadata": {"source_url": "https://docs.deno.com/examples/hello_world", "title": "Hello world", "description": "The one and only line in this program will print \"Hello, World!\" to the console. Run this file with the Deno CLI and the run command.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:54:59", "type": "overview", "page_metadata": {"twitter:title": "Hello world", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "title": "Hello world", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:locale": "en_US", "ogTitle": "Hello world", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogLocale": "en_US", "og:title": "Hello world", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "scrapeId": "54714fbb-116b-4917-89e1-6a8764b9fac2", "sourceURL": "https://docs.deno.com/examples/hello_world", "url": "https://docs.deno.com/examples/hello_world/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Hello world\"?\n\nAssistant: Here are some code examples:\n\n### Hello World Code\n```yaml\nconsole.log(\"Hello, World!\");\n```\n\n### Run Command\n```yaml\ndeno run https://docs.deno.com/examples/scripts/hello_world.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/hello_world", "title": "Hello world", "description": "The one and only line in this program will print \"Hello, World!\" to the console. Run this file with the Deno CLI and the run command.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:54:59", "type": "code_examples", "page_metadata": {"twitter:title": "Hello world", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "title": "Hello world", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:locale": "en_US", "ogTitle": "Hello world", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogLocale": "en_US", "og:title": "Hello world", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "scrapeId": "54714fbb-116b-4917-89e1-6a8764b9fac2", "sourceURL": "https://docs.deno.com/examples/hello_world", "url": "https://docs.deno.com/examples/hello_world/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Hello world\"?\n\nAssistant: Here are the recommended best practices:\n\n• Run the example using the Deno CLI to see the output.\n• Refer to the additional resources for installation and environment setup.\n", "metadata": {"source_url": "https://docs.deno.com/examples/hello_world", "title": "Hello world", "description": "The one and only line in this program will print \"Hello, World!\" to the console. Run this file with the Deno CLI and the run command.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:54:59", "type": "best_practices", "page_metadata": {"twitter:title": "Hello world", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "title": "Hello world", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:locale": "en_US", "ogTitle": "Hello world", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogLocale": "en_US", "og:title": "Hello world", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "scrapeId": "54714fbb-116b-4917-89e1-6a8764b9fac2", "sourceURL": "https://docs.deno.com/examples/hello_world", "url": "https://docs.deno.com/examples/hello_world/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Updating from CommonJS to ESM\"?\n\nAssistant: This guide will help you update your Node.js project from CommonJS modules to ECMAScript modules (ESM) to run it in Deno.\n\nHere's a detailed explanation:\n\n\n## Module imports and exports\nDeno supports [ECMAScript modules](https://docs.deno.com/runtime/fundamentals/modules/) exclusively. If your Node.js code uses [`require`](https://nodejs.org/api/modules.html#modules-commonjs-modules), you should update it to use `import` statements instead. If your internal code uses CommonJS-style exports, those will also need to be updated.\n\nA typical CommonJS-style project might look similar to this:\n\nadd_numbers.js\n\n```highlight notranslate js\nmodule.exports = function addNumbers(num1, num2) {\n  return num1 + num2;\n};\n```\n\nindex.js\n\n```highlight notranslate js\nconst addNumbers = require(\"./add_numbers\");\nconsole.log(addNumbers(2, 2));\n```\n\nTo convert these to [ECMAScript modules](https://docs.deno.com/runtime/fundamentals/modules/), we'll make a few minor changes:\n\nadd_numbers.js\n\n```highlight notranslate js\nexport function addNumbers(num1, num2) {\n  return num1 + num2;\n}\n```\n\nindex.js\n\n```highlight notranslate js\nimport { addNumbers } from \"./add_numbers.js\";\nconsole.log(addNumbers(2, 2));\n```\n\nExports:\n\n| CommonJS | ECMAScript modules |\n| --- | --- |\n| `module.exports = function add() {}` | `export default function add() {}` |\n| `exports.add = function add() {}` | `export function add() {}` |\n\nImports:\n\n| CommonJS | ECMAScript modules |\n| --- | --- |\n| `const add = require(\"./add_numbers\");` | `import add from \"./add_numbers.js\";` |\n| `const { add } = require(\"./add_numbers\")` | `import { add } from \"./add_numbers.js\"` |\n\n## Quick fix with VS Code\nIf you are using VS Code, you can use its built-in feature to convert CommonJS to ES6 modules. Right-click on the `require` statement, or the lightbulb icon and select `Quick Fix` and then `Convert to ES module`.\n\n![Quick Fix](https://docs.deno.com/examples/tutorials/images/quick-fix.png)\n\n## CommonJS vs ECMAScript resolution\nAn important distinction between the two module systems is that ECMAScript resolution requires the full specifier **including the file extension**. Omitting the file extension, and special handling of `index.js`, are features unique to CommonJS. The benefit of the ECMAScript resolution is that it works the same across the browser, Deno, and other runtimes.\n\n| CommonJS | ECMAScript modules |\n| --- | --- |\n| \"./add_numbers\" | \"./add_numbers.js\" |\n| \"./some/directory\" | \"./some/directory/index.js\" |\n", "metadata": {"source_url": "https://docs.deno.com/examples/cjs_to_esm_tutorial", "title": "Updating from CommonJS to ESM", "description": "This guide will help you update your Node.js project from CommonJS modules to ECMAScript modules (ESM) to run it in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:55:17", "type": "overview", "page_metadata": {"og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Updating from CommonJS to ESM", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:locale": "en_US", "title": "Updating from CommonJS to ESM", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Updating from CommonJS to ESM", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Updating from CommonJS to ESM", "scrapeId": "c2047a8d-b649-4450-bb8b-e63c2451f149", "sourceURL": "https://docs.deno.com/examples/cjs_to_esm_tutorial", "url": "https://docs.deno.com/examples/cjs_to_esm_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Updating from CommonJS to ESM\"?\n\nAssistant: Here are some code examples:\n\n### CommonJS Example\n```yaml\nmodule.exports = function addNumbers(num1, num2) {\n  return num1 + num2;\n};\n```\n\n### Index.js CommonJS Example\n```yaml\nconst addNumbers = require(\"./add_numbers\");\nconsole.log(addNumbers(2, 2));\n```\n\n### ECMAScript Module Example\n```yaml\nexport function addNumbers(num1, num2) {\n  return num1 + num2;\n}\n```\n\n### Index.js ECMAScript Example\n```yaml\nimport { addNumbers } from \"./add_numbers.js\";\nconsole.log(addNumbers(2, 2));\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/cjs_to_esm_tutorial", "title": "Updating from CommonJS to ESM", "description": "This guide will help you update your Node.js project from CommonJS modules to ECMAScript modules (ESM) to run it in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:55:17", "type": "code_examples", "page_metadata": {"og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Updating from CommonJS to ESM", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:locale": "en_US", "title": "Updating from CommonJS to ESM", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Updating from CommonJS to ESM", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Updating from CommonJS to ESM", "scrapeId": "c2047a8d-b649-4450-bb8b-e63c2451f149", "sourceURL": "https://docs.deno.com/examples/cjs_to_esm_tutorial", "url": "https://docs.deno.com/examples/cjs_to_esm_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Updating from CommonJS to ESM\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno can add all the missing file extensions for you by running `deno lint --fix`. Deno's linter comes with a `no-sloppy-imports` rule that will show a linting error when an import path doesn't contain the file extension.\n• Now that you know how to port from CJS to ESM you can take advantage of the modern features that ESM offers, such as async module loading, interop with browsers, better readability, standardization and future proofing.\n", "metadata": {"source_url": "https://docs.deno.com/examples/cjs_to_esm_tutorial", "title": "Updating from CommonJS to ESM", "description": "This guide will help you update your Node.js project from CommonJS modules to ECMAScript modules (ESM) to run it in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:55:17", "type": "best_practices", "page_metadata": {"og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Updating from CommonJS to ESM", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:locale": "en_US", "title": "Updating from CommonJS to ESM", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:title": "Updating from CommonJS to ESM", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Updating from CommonJS to ESM", "scrapeId": "c2047a8d-b649-4450-bb8b-e63c2451f149", "sourceURL": "https://docs.deno.com/examples/cjs_to_esm_tutorial", "url": "https://docs.deno.com/examples/cjs_to_esm_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"User Data Processing with Deno Collections\"?\n\nAssistant: Demonstrates using Deno's @std/collections library for processing user data. This example uses pick, omit, and partition to manipulate data structures.\n\nHere's a detailed explanation:\n\n\n## User Type Definition\nDefine the User type with fields for id, name, role, age, and country.\n\n## Sample User Data\nSample array of user data for demonstration purposes.\n\n## Data Manipulation Examples\n1. Pick specific fields from each user for selective data extraction using pick to include only id, name, and country for each user in the new array.\n\n2. Omit specific fields from each user to remove sensitive data using omit to exclude the \"id\" field from each user object in the new array.\n\n3. Partition users based on role to categorize them into admins and regular users using partition to split users array into two groups: admins and regular users.\n", "metadata": {"source_url": "https://docs.deno.com/examples/data_processing", "title": "User Data Processing with Deno Collections", "description": "Demonstrates using Deno's @std/collections library for processing user data. This example uses pick, omit, and partition to manipulate data structures.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:55:29", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "twitter:title": "User Data Processing with Deno Collections", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "User Data Processing with Deno Collections", "title": "User Data Processing with Deno Collections", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "User Data Processing with Deno Collections", "language": "en", "twitter:site": "@deno_land", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "b7de58a3-ee03-4a2c-aaed-9d6d6cd59144", "sourceURL": "https://docs.deno.com/examples/data_processing", "url": "https://docs.deno.com/examples/data_processing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"User Data Processing with Deno Collections\"?\n\nAssistant: Here are some code examples:\n\n### Importing Collections\n```yaml\nimport { omit, partition, pick } from \"jsr:@std/collections\";\n```\n\n### User Type Definition\n```yaml\ntype User = {\n  id: number;\n  name: string;\n  role: string;\n  age: number;\n  country: string;\n};\n```\n\n### Sample User Data\n```yaml\nconst users: User[] = [\n  { id: 1, name: \"Alice\", role: \"admin\", age: 30, country: \"USA\" },\n  { id: 2, name: \"Bob\", role: \"user\", age: 25, country: \"Canada\" },\n  { id: 3, name: \"Charlie\", role: \"user\", age: 28, country: \"USA\" },\n  { id: 4, name: \"Dave\", role: \"admin\", age: 35, country: \"Canada\" },\n  { id: 5, name: \"Eve\", role: \"user\", age: 22, country: \"UK\" },\n];\n```\n\n### Pick Example\n```yaml\nconst pickedUsers = users.map((user) => pick(user, [\"id\", \"name\", \"country\"]));\nconsole.log(\"Picked user data:\", pickedUsers);\n```\n\n### Omit Example\n```yaml\nconst omitUsers = users.map((user) => omit(user, [\"id\"]));\nconsole.log(\"Omitted user data:\", omitUsers);\n```\n\n### Partition Example\n```yaml\nconst [admins, regularUsers] = partition(\n  users,\n  (user) => user.role === \"admin\",\n);\nconsole.log(\"Admins:\", admins);\nconsole.log(\"Regular Users:\", regularUsers);\n```\n\n### Run Example Locally\n```yaml\ndeno run --allow-read data-processing.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/data_processing", "title": "User Data Processing with Deno Collections", "description": "Demonstrates using Deno's @std/collections library for processing user data. This example uses pick, omit, and partition to manipulate data structures.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:55:29", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "twitter:title": "User Data Processing with Deno Collections", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "User Data Processing with Deno Collections", "title": "User Data Processing with Deno Collections", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "User Data Processing with Deno Collections", "language": "en", "twitter:site": "@deno_land", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "b7de58a3-ee03-4a2c-aaed-9d6d6cd59144", "sourceURL": "https://docs.deno.com/examples/data_processing", "url": "https://docs.deno.com/examples/data_processing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"User Data Processing with Deno Collections\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use pick to extract only the necessary fields from data structures to minimize data exposure.\n• Use omit to remove sensitive information from user data before processing or displaying it.\n• Use partition to categorize data into meaningful groups for easier management and analysis.\n", "metadata": {"source_url": "https://docs.deno.com/examples/data_processing", "title": "User Data Processing with Deno Collections", "description": "Demonstrates using Deno's @std/collections library for processing user data. This example uses pick, omit, and partition to manipulate data structures.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:55:29", "type": "best_practices", "page_metadata": {"twitter:image": "/img/og.webp", "twitter:title": "User Data Processing with Deno Collections", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "User Data Processing with Deno Collections", "title": "User Data Processing with Deno Collections", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "User Data Processing with Deno Collections", "language": "en", "twitter:site": "@deno_land", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "b7de58a3-ee03-4a2c-aaed-9d6d6cd59144", "sourceURL": "https://docs.deno.com/examples/data_processing", "url": "https://docs.deno.com/examples/data_processing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Walking directories\"?\n\nAssistant: When doing something like filesystem routing, it is useful to be able to walk down a directory to visit files.\n\nHere's a detailed explanation:\n\n\n## Basic Directory Listing\nIf the directory has no depth (no folders), we can use the built-in Deno.readDir\n\n```\nfor await (const dirEntry of Deno.readDir(\".\")) {\n  console.log(\"Basic listing:\", dirEntry.name);\n}\n```\n\n## Recursive Directory Walking\nIf on the other hand you need to recursively walk a repository, the standard library has a method for this. In the most simple case it is a drop-in replacement\n\n```\nimport { walk } from \"jsr:@std/fs/walk\";\n\nfor await (const dirEntry of walk(\".\")) {\n  console.log(\"Recursive walking:\", dirEntry.name);\n}\n```\n\n## Customizing Results\nWe are also able to specify some settings to customize our results. In the case of building filesystem routing limiting results to only certain extensions may be useful\n\n```\nfor await (const dirEntry of walk(\".\", { exts: [\"ts\"] })) {\n  console.log(\"Recursive walking with extension:\", dirEntry.name);\n}\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/walking_directories.ts) locally using the Deno CLI:\n\n```\ndeno run --allow-read https://docs.deno.com/examples/scripts/walking_directories.ts\n```\n\n## Additional Resources\n- [Doc: Deno.readDir](https://docs.deno.com/api/deno/~/Deno.readDir)\n- [Doc: @std/fs/walk](https://jsr.io/@std/fs/doc/walk/~)\n", "metadata": {"source_url": "https://docs.deno.com/examples/walking_directories", "title": "Walking directories", "description": "When doing something like filesystem routing, it is useful to be able to walk down a directory to visit files.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:55:53", "type": "overview", "page_metadata": {"og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Walking directories", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Walking directories", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Walking directories", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:title": "Walking directories", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "2cd16122-5fd5-493e-812e-4527d228c660", "sourceURL": "https://docs.deno.com/examples/walking_directories", "url": "https://docs.deno.com/examples/walking_directories/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Walking directories\"?\n\nAssistant: Here are some code examples:\n\n### Basic Directory Listing\n```yaml\nfor await (const dirEntry of Deno.readDir(\".\")) {\n  console.log(\"Basic listing:\", dirEntry.name);\n}\n```\n\n### Recursive Directory Walking\n```yaml\nimport { walk } from \"jsr:@std/fs/walk\";\n\nfor await (const dirEntry of walk(\".\")) {\n  console.log(\"Recursive walking:\", dirEntry.name);\n}\n```\n\n### Customizing Results with Extensions\n```yaml\nfor await (const dirEntry of walk(\".\", { exts: [\"ts\"] })) {\n  console.log(\"Recursive walking with extension:\", dirEntry.name);\n}\n```\n\n### Running the Example\n```yaml\ndeno run --allow-read https://docs.deno.com/examples/scripts/walking_directories.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/walking_directories", "title": "Walking directories", "description": "When doing something like filesystem routing, it is useful to be able to walk down a directory to visit files.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:55:53", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Walking directories", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Walking directories", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Walking directories", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:title": "Walking directories", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "2cd16122-5fd5-493e-812e-4527d228c660", "sourceURL": "https://docs.deno.com/examples/walking_directories", "url": "https://docs.deno.com/examples/walking_directories/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Walking directories\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use Deno.readDir for basic directory listings without depth.\n• Utilize the walk function for recursive directory walking.\n• Customize results by specifying extensions when using the walk function.\n", "metadata": {"source_url": "https://docs.deno.com/examples/walking_directories", "title": "Walking directories", "description": "When doing something like filesystem routing, it is useful to be able to walk down a directory to visit files.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:55:53", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Walking directories", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:title": "Walking directories", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Walking directories", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:title": "Walking directories", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "2cd16122-5fd5-493e-812e-4527d228c660", "sourceURL": "https://docs.deno.com/examples/walking_directories", "url": "https://docs.deno.com/examples/walking_directories/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deploy Deno to Amazon Lightsail\"?\n\nAssistant: This How To guide will show you how to deploy a Deno app to Amazon Lightsail using Docker, Docker Hub, and GitHub Actions.\n\nHere's a detailed explanation:\n\n\n## Create Dockerfile and docker-compose.yml\nTo focus on the deployment, our app will simply be a `main.ts` file that returns a string as an HTTP response:\n\n```highlight notranslate ts\nimport { Application } from \"https://deno.land/x/oak/mod.ts\";\n\nconst app = new Application();\n\napp.use((ctx) => {\n  ctx.response.body = \"Hello from Deno and AWS Lightsail!\";\n});\n\nawait app.listen({ port: 8000 });\n```\n\nThen, we'll create two files -- `Dockerfile` and `docker-compose.yml` -- to build the Docker image.\n\nIn our `Dockerfile`, let's add:\n\n```highlight notranslate Dockerfile\nFROM denoland/deno\n\nEXPOSE 8000\n\nWORKDIR /app\n\nADD . /app\n\nRUN deno install --entrypoint main.ts\n\nCMD [\"run\", \"--allow-net\", \"main.ts\"]\n```\n\nThen, in our `docker-compose.yml`:\n\n```highlight notranslate yml\nversion: \"3\"\n\nservices:\n  web:\n    build: .\n    container_name: deno-container\n    image: deno-image\n    ports:\n      - \"8000:8000\"\n```\n\nLet's test this locally by running `docker compose -f docker-compose.yml build`, then `docker compose up`, and going to `localhost:8000`.\n\nIt works!\n\n## Build, Tag, and Push to Docker Hub\nFirst, let's sign into [Docker Hub](https://hub.docker.com/repositories) and create a repository. Let's name it `deno-on-aws-lightsail`.\n\nThen, let's tag and push our new image, replacing `username` with yours:\n\nThen, let's build the image locally. Note our `docker-compose.yml` file will name the build `deno-image`.\n\n```highlight notranslate shell\ndocker compose -f docker-compose.yml build\n```\n\nLet's [tag](https://docs.docker.com/engine/reference/commandline/tag/) the local image with `{{ username }}/deno-on-aws-lightsail`:\n\n```highlight notranslate shell\ndocker tag deno-image {{ username }}/deno-on-aws-lightsail\n```\n\nWe can now push the image to Docker Hub:\n\n```highlight notranslate shell\ndocker push {{ username }}/deno-on-aws-lightsail\n```\n\nAfter that succeeds, you should be able to see the new image on your Docker Hub repository!\n\n## Create and Deploy to a Lightsail Container\nLet's head over to [the Amazon Lightsail console](https://lightsail.aws.amazon.com/ls/webapp/home/container-services).\n\nThen click \"Containers\" and \"Create container service\". Half way down the page, click \"Setup your first Deployment\" and select \"Specify a custom deployment\".\n\nYou can write whatever container name you'd like.\n\nIn `Image`, be sure to use `{{ username }}/{{ image }}` that you have set in your Docker Hub. For this example, it is `lambtron/deno-on-aws-lightsail`.\n\nLet's click `Add open ports` and add `8000`.\n\nFinally, under `PUBLIC ENDPOINT`, select the container name that you just created.\n\nWhen you're ready, click \"Create container service\".\n\nAfter a few moments, your new container should be deployed. Click on the public address and you should see your Deno app!\n\n## Automate using GitHub Actions\nIn order to automate that process, we'll use the `aws` CLI with the [`lightsail` subcommand](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lightsail/push-container-image.html).\n\nThe steps in our GitHub Actions workflow will be:\n\n1. Checkout the repo\n2. Build our app as a Docker image locally\n3. Install and authenticate AWS CLI\n4. Push local Docker image to AWS Lightsail Container Service via CLI\n\nPre-requisites for this GitHub Action workflow to work:\n\n- an AWS Lightsail Container Instance is created (see section above)\n- IAM user and relevant permissions set.\n( [Learn more about managing access to Amazon Lightsail for an IAM user.](https://docs.aws.amazon.com/lightsail/latest/userguide/amazon-lightsail-managing-access-for-an-iam-user.html))\n- `AWS_ACCESS_KEY_ID` and `AWS_SUCCESS_ACCESS_KEY` for your user with permissions. (Follow [this AWS guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli) to get generate an `AWS_ACCESS_KEY_ID` and `AWS_SUCCESS_ACCESS_KEY`.)\n\nLet's create a new file `container.template.json`, which contains configuration for how to make the service container deployment. Note the similarities these option values have with the inputs we entered manually in the previous section.\n\n```highlight notranslate json\n{\n  \"containers\": {\n    \"app\": {\n      \"image\": \"\",\n      \"environment\": {\n        \"APP_ENV\": \"release\"\n      },\n      \"ports\": {\n        \"8000\": \"HTTP\"\n      }\n    }\n  },\n  \"publicEndpoint\": {\n    \"containerName\": \"app\",\n    \"containerPort\": 8000,\n    \"healthCheck\": {\n      \"healthyThreshold\": 2,\n      \"unhealthyThreshold\": 2,\n      \"timeoutSeconds\": 5,\n      \"intervalSeconds\": 10,\n      \"path\": \"/\",\n      \"successCodes\": \"200-499\"\n    }\n  }\n}\n```\n\nLet's add the below to your `.github/workflows/deploy.yml` file:\n\n```highlight notranslate yml\nname: Build and Deploy to AWS Lightsail\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  AWS_REGION: us-west-2\n  AWS_LIGHTSAIL_SERVICE_NAME: container-service-2\njobs:\n  build_and_deploy:\n    name: Build and Deploy\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout main\n        uses: actions/checkout@v2\n\n      - name: Install Utilities\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y jq unzip\n      - name: Install AWS Client\n        run: |\n          curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n          unzip awscliv2.zip\n          sudo ./aws/install || true\n          aws --version\n          curl \"https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl\" -o \"lightsailctl\"\n          sudo mv \"lightsailctl\" \"/usr/local/bin/lightsailctl\"\n          sudo chmod +x /usr/local/bin/lightsailctl\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-region: ${{ env.AWS_REGION }}\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      - name: Build Docker Image\n        run: docker build -t ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}:release .\n      - name: Push and Deploy\n        run: |\n          service_name=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}\n          aws lightsail push-container-image \\\n            --region ${{ env.AWS_REGION }} \\\n            --service-name ${service_name} \\\n            --label ${service_name} \\\n            --image ${service_name}:release\n          aws lightsail get-container-images --service-name ${service_name} | jq --raw-output \".containerImages[0].image\" > image.txt\n          jq --arg image $(cat image.txt) '.containers.app.image = $image' container.template.json > container.json\n          aws lightsail create-container-service-deployment --service-name ${service_name} --cli-input-json file://$(pwd)/container.json\n```\n\nWhoa there is a lot going on here! The last two steps are most important:\n`Build Docker Image` and `Push and Deploy`.\n", "metadata": {"source_url": "https://docs.deno.com/examples/aws_lightsail_tutorial", "title": "Deploy Deno to Amazon Lightsail", "description": "This How To guide will show you how to deploy a Deno app to Amazon Lightsail using Docker, Docker Hub, and GitHub Actions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:56:48", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:site": "@deno_land", "og:title": "Deploy Deno to Amazon Lightsail", "ogTitle": "Deploy Deno to Amazon Lightsail", "title": "Deploy Deno to Amazon Lightsail", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:card": "summary_large_image", "language": "en", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Deploy Deno to Amazon Lightsail", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "scrapeId": "43690078-feab-4833-bbad-392949a4ba80", "sourceURL": "https://docs.deno.com/examples/aws_lightsail_tutorial", "url": "https://docs.deno.com/examples/aws_lightsail_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deploy Deno to Amazon Lightsail\"?\n\nAssistant: Here are some code examples:\n\n### Deno Application\n```yaml\nimport { Application } from \"https://deno.land/x/oak/mod.ts\";\n\nconst app = new Application();\n\napp.use((ctx) => {\n  ctx.response.body = \"Hello from Deno and AWS Lightsail!\";\n});\n\nawait app.listen({ port: 8000 });\n```\n\n### Dockerfile\n```yaml\nFROM denoland/deno\n\nEXPOSE 8000\n\nWORKDIR /app\n\nADD . /app\n\nRUN deno install --entrypoint main.ts\n\nCMD [\"run\", \"--allow-net\", \"main.ts\"]\n```\n\n### docker-compose.yml\n```yaml\nversion: \"3\"\n\nservices:\n  web:\n    build: .\n    container_name: deno-container\n    image: deno-image\n    ports:\n      - \"8000:8000\"\n```\n\n### Build Docker Image\n```yaml\ndocker compose -f docker-compose.yml build\n```\n\n### Tag Docker Image\n```yaml\ndocker tag deno-image {{ username }}/deno-on-aws-lightsail\n```\n\n### Push Docker Image\n```yaml\ndocker push {{ username }}/deno-on-aws-lightsail\n```\n\n### GitHub Actions Workflow\n```yaml\nname: Build and Deploy to AWS Lightsail\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  AWS_REGION: us-west-2\n  AWS_LIGHTSAIL_SERVICE_NAME: container-service-2\njobs:\n  build_and_deploy:\n    name: Build and Deploy\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout main\n        uses: actions/checkout@v2\n\n      - name: Install Utilities\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y jq unzip\n      - name: Install AWS Client\n        run: |\n          curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n          unzip awscliv2.zip\n          sudo ./aws/install || true\n          aws --version\n          curl \"https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl\" -o \"lightsailctl\"\n          sudo mv \"lightsailctl\" \"/usr/local/bin/lightsailctl\"\n          sudo chmod +x /usr/local/bin/lightsailctl\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-region: ${{ env.AWS_REGION }}\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n      - name: Build Docker Image\n        run: docker build -t ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}:release .\n      - name: Push and Deploy\n        run: |\n          service_name=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}\n          aws lightsail push-container-image \\\n            --region ${{ env.AWS_REGION }} \\\n            --service-name ${service_name} \\\n            --label ${service_name} \\\n            --image ${service_name}:release\n          aws lightsail get-container-images --service-name ${service_name} | jq --raw-output \".containerImages[0].image\" > image.txt\n          jq --arg image $(cat image.txt) '.containers.app.image = $image' container.template.json > container.json\n          aws lightsail create-container-service-deployment --service-name ${service_name} --cli-input-json file://$(pwd)/container.json\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/aws_lightsail_tutorial", "title": "Deploy Deno to Amazon Lightsail", "description": "This How To guide will show you how to deploy a Deno app to Amazon Lightsail using Docker, Docker Hub, and GitHub Actions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:56:48", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:site": "@deno_land", "og:title": "Deploy Deno to Amazon Lightsail", "ogTitle": "Deploy Deno to Amazon Lightsail", "title": "Deploy Deno to Amazon Lightsail", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:card": "summary_large_image", "language": "en", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Deploy Deno to Amazon Lightsail", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "scrapeId": "43690078-feab-4833-bbad-392949a4ba80", "sourceURL": "https://docs.deno.com/examples/aws_lightsail_tutorial", "url": "https://docs.deno.com/examples/aws_lightsail_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deploy Deno to Amazon Lightsail\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure you have the `docker` CLI installed before starting.\n• Create a Docker Hub account to store your images.\n• Ensure you have an AWS account to deploy your application.\n• Use GitHub Actions to automate the deployment process.\n", "metadata": {"source_url": "https://docs.deno.com/examples/aws_lightsail_tutorial", "title": "Deploy Deno to Amazon Lightsail", "description": "This How To guide will show you how to deploy a Deno app to Amazon Lightsail using Docker, Docker Hub, and GitHub Actions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:56:48", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:site": "@deno_land", "og:title": "Deploy Deno to Amazon Lightsail", "ogTitle": "Deploy Deno to Amazon Lightsail", "title": "Deploy Deno to Amazon Lightsail", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:card": "summary_large_image", "language": "en", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Deploy Deno to Amazon Lightsail", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "scrapeId": "43690078-feab-4833-bbad-392949a4ba80", "sourceURL": "https://docs.deno.com/examples/aws_lightsail_tutorial", "url": "https://docs.deno.com/examples/aws_lightsail_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Command line arguments\"?\n\nAssistant: Command line arguments are often used to pass configuration options to a program.\n\nHere's a detailed explanation:\n\n\n## Command line arguments\nYou can get the list of command line arguments from `Deno.args`.\n\n## Parsing command line arguments\nOften you want to parse command line arguments like `--foo=bar` into structured data. This can be done using `std/cli`.\n\nThe `parseArgs` function takes the argument list, and a list of options. In these options you specify the types of the accepted arguments and possibly default values. An object is returned with the parsed arguments. NOTE: this function is based on [`minimist`](https://github.com/minimistjs/minimist), not compatible with the `parseArgs()` function in `node:util`.\n\n## Unrecognized arguments\nThe `_` field of the returned object contains all arguments that were not recognized as flags.\n\n## Running the example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/command_line_arguments.ts) locally using the Deno CLI:\n\n## Additional resources\n- [Doc: Deno.args](https://docs.deno.com/api/deno/~/Deno.args)\n- [Doc: @std/cli](https://jsr.io/@std/cli/doc/parse-args/~)\n", "metadata": {"source_url": "https://docs.deno.com/examples/command_line_arguments", "title": "Command line arguments", "description": "Command line arguments are often used to pass configuration options to a program.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:56:57", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Command line arguments", "og:image": "/img/og.webp", "og:type": "article", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:site_name": "Deno", "twitter:title": "Command line arguments", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Command line arguments", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Command line arguments", "ogLocale": "en_US", "og:locale": "en_US", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "scrapeId": "358b92c5-405f-434a-9f6d-0363935eec4a", "sourceURL": "https://docs.deno.com/examples/command_line_arguments", "url": "https://docs.deno.com/examples/command_line_arguments/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Command line arguments\"?\n\nAssistant: Here are some code examples:\n\n### Basic command line arguments\n```yaml\nconst name = Deno.args[0];\nconst food = Deno.args[1];\nconsole.log(`Hello ${name}, I like ${food}!`);\n```\n\n### Parsing arguments with parseArgs\n```yaml\nimport { parseArgs } from \"jsr:@std/cli/parse-args\";\n\nconst flags = parseArgs(Deno.args, {\n  boolean: [\"help\", \"color\"],\n  string: [\"version\"],\n  default: { color: true },\n  negatable: [\"color\"],\n});\nconsole.log(\"Wants help?\", flags.help);\nconsole.log(\"Version:\", flags.version);\nconsole.log(\"Wants color?:\", flags.color);\nconsole.log(\"Other:\", flags._);\n```\n\n### Running the example in Deno CLI\n```yaml\ndeno run https://docs.deno.com/examples/scripts/command_line_arguments.ts Deno Sushi --help --version=1.0.0 --no-color\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/command_line_arguments", "title": "Command line arguments", "description": "Command line arguments are often used to pass configuration options to a program.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:56:57", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Command line arguments", "og:image": "/img/og.webp", "og:type": "article", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:site_name": "Deno", "twitter:title": "Command line arguments", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Command line arguments", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Command line arguments", "ogLocale": "en_US", "og:locale": "en_US", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "scrapeId": "358b92c5-405f-434a-9f6d-0363935eec4a", "sourceURL": "https://docs.deno.com/examples/command_line_arguments", "url": "https://docs.deno.com/examples/command_line_arguments/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Command line arguments\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `Deno.args` to access command line arguments.\n• Utilize `std/cli` for parsing structured command line arguments.\n• Be aware of compatibility issues with `minimist` and `node:util`'s `parseArgs()` function.\n", "metadata": {"source_url": "https://docs.deno.com/examples/command_line_arguments", "title": "Command line arguments", "description": "Command line arguments are often used to pass configuration options to a program.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:56:57", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Command line arguments", "og:image": "/img/og.webp", "og:type": "article", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:site_name": "Deno", "twitter:title": "Command line arguments", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Command line arguments", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Command line arguments", "ogLocale": "en_US", "og:locale": "en_US", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "scrapeId": "358b92c5-405f-434a-9f6d-0363935eec4a", "sourceURL": "https://docs.deno.com/examples/command_line_arguments", "url": "https://docs.deno.com/examples/command_line_arguments/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deploying Deno to Cloudflare Workers\"?\n\nAssistant: This is a short How To guide on deploying a Deno function to Cloudflare Workers.\n\nHere's a detailed explanation:\n\n\n## Setup `denoflare`\nIn order to deploy Deno to Cloudflare, we'll use this community created CLI [`denoflare`](https://denoflare.dev/).\n\n[Install it](https://denoflare.dev/cli/#installation):\n\n```highlight notranslate shell\ndeno install --unstable --allow-read --allow-net --allow-env --allow-run --name denoflare --force \\\nhttps://raw.githubusercontent.com/skymethod/denoflare/v0.5.11/cli/cli.ts\n\n```\n\n## Create your function\nIn a new directory, let's create a `main.ts` file, which will contain our Module Worker function:\n\n```highlight notranslate ts\nexport default {\n  fetch(request: Request): Response {\n    return new Response(\"Hello, world!\");\n  },\n};\n\n```\n\nAt the very minimum, a Module Worker function must `export default` an object that exposes a `fetch` function, which returns a `Response` object.\n\nYou can test this locally by running:\n\n```highlight notranslate shell\ndenoflare serve main.ts\n\n```\n\nIf you go to `localhost:8080` in your browser, you'll see the response will say:\n\n```highlight notranslate console\nHello, world!\n\n```\n\n## Configure `.denoflare`\nThe next step is to create a `.denoflare` config file. In it, let's add:\n\n```highlight notranslate json\n{\n  \"$schema\": \"https://raw.githubusercontent.com/skymethod/denoflare/v0.5.11/common/config.schema.json\",\n  \"scripts\": {\n    \"main\": {\n      \"path\": \"/absolute/path/to/main.ts\",\n      \"localPort\": 8000\n    }\n  },\n  \"profiles\": {\n    \"myprofile\": {\n      \"accountId\": \"abcxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"apiToken\": \"abcxxxxxxxxx_-yyyyyyyyyyyy-11-dddddddd\"\n    }\n  }\n}\n\n```\n\nYou can find your `accountId` by going to your [Cloudflare dashboard](https://dash.cloudflare.com/), clicking \"Workers\", and finding \"Account ID\" on the right side.\n\nYou can generate an `apiToken` from your [Cloudflare API Tokens settings](https://dash.cloudflare.com/profile/api-tokens). When you create an API token, be sure to use the template \"Edit Cloudflare Workers\".\n\nAfter you add both to your `.denoflare` config, let's try pushing it to Cloudflare:\n\n```highlight notranslate console\ndenoflare push main\n\n```\n\nNext, you can view your new function in your Cloudflare account:\n\n![New function on Cloudflare Workers](https://docs.deno.com/examples/tutorials/images/how-to/cloudflare-workers/main-on-cloudflare.png)\n\nBoom!\n", "metadata": {"source_url": "https://docs.deno.com/examples/cloudflare_workers_tutorial", "title": "Deploying Deno to Cloudflare Workers", "description": "This is a short How To guide on deploying a Deno function to Cloudflare Workers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:57:16", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:title": "Deploying Deno to Cloudflare Workers", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:title": "Deploying Deno to Cloudflare Workers", "ogImage": "/img/og.webp", "title": "Deploying Deno to Cloudflare Workers", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "Deploying Deno to Cloudflare Workers", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "ac8a9343-8842-4000-8d1b-fb52a6827615", "sourceURL": "https://docs.deno.com/examples/cloudflare_workers_tutorial", "url": "https://docs.deno.com/examples/cloudflare_workers_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deploying Deno to Cloudflare Workers\"?\n\nAssistant: Here are some code examples:\n\n### Install denoflare\n```yaml\ndeno install --unstable --allow-read --allow-net --allow-env --allow-run --name denoflare --force \\\nhttps://raw.githubusercontent.com/skymethod/denoflare/v0.5.11/cli/cli.ts\n```\n\n### Create a Module Worker function\n```yaml\nexport default {\n  fetch(request: Request): Response {\n    return new Response(\"Hello, world!\");\n  },\n};\n```\n\n### Test the function locally\n```yaml\ndenoflare serve main.ts\n```\n\n### Configure .denoflare\n```yaml\n{\n  \"$schema\": \"https://raw.githubusercontent.com/skymethod/denoflare/v0.5.11/common/config.schema.json\",\n  \"scripts\": {\n    \"main\": {\n      \"path\": \"/absolute/path/to/main.ts\",\n      \"localPort\": 8000\n    }\n  },\n  \"profiles\": {\n    \"myprofile\": {\n      \"accountId\": \"abcxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"apiToken\": \"abcxxxxxxxxx_-yyyyyyyyyyyy-11-dddddddd\"\n    }\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/cloudflare_workers_tutorial", "title": "Deploying Deno to Cloudflare Workers", "description": "This is a short How To guide on deploying a Deno function to Cloudflare Workers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:57:16", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:title": "Deploying Deno to Cloudflare Workers", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:title": "Deploying Deno to Cloudflare Workers", "ogImage": "/img/og.webp", "title": "Deploying Deno to Cloudflare Workers", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "Deploying Deno to Cloudflare Workers", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "ac8a9343-8842-4000-8d1b-fb52a6827615", "sourceURL": "https://docs.deno.com/examples/cloudflare_workers_tutorial", "url": "https://docs.deno.com/examples/cloudflare_workers_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deploying Deno to Cloudflare Workers\"?\n\nAssistant: Here are the recommended best practices:\n\n• You would only be able to deploy Module Workers instead of web servers or apps.\n• When creating an API token, be sure to use the template \"Edit Cloudflare Workers\".\n", "metadata": {"source_url": "https://docs.deno.com/examples/cloudflare_workers_tutorial", "title": "Deploying Deno to Cloudflare Workers", "description": "This is a short How To guide on deploying a Deno function to Cloudflare Workers.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:57:16", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:title": "Deploying Deno to Cloudflare Workers", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:title": "Deploying Deno to Cloudflare Workers", "ogImage": "/img/og.webp", "title": "Deploying Deno to Cloudflare Workers", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "Deploying Deno to Cloudflare Workers", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "ac8a9343-8842-4000-8d1b-fb52a6827615", "sourceURL": "https://docs.deno.com/examples/cloudflare_workers_tutorial", "url": "https://docs.deno.com/examples/cloudflare_workers_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deleting files\"?\n\nAssistant: Removing files and directories is a common task. Deno has a number of functions for this task.\n\nHere's a detailed explanation:\n\n\n## Removing Files\nIn the case that we want to remove a simple file, we can simply call Deno.remove with the filename as a parameter.\n\n## Removing Directories\nIf we want to remove a directory, we could do exactly what we did above. If the directory has contents, the call would error out. If we want to recursively delete the contents of a directory, we should set recursive to true.\n\n## Handling NotFound Errors\nA common pattern is to remove a file or directory only if it already exists. The correct way of doing this is by just doing it and trying to catch any NotFound errors.\n\n## Additional Resources\n- [Doc: Deno.remove](https://docs.deno.com/api/deno/~/Deno.remove)\n", "metadata": {"source_url": "https://docs.deno.com/examples/deleting_files", "title": "Deleting files", "description": "Removing files and directories is a common task. Deno has a number of functions for this task.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:57:23", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "Deleting files", "title": "Deleting files", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:type": "article", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Deleting files", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Deleting files", "scrapeId": "c022e5fc-c457-49e1-8dd0-917aeab4171e", "sourceURL": "https://docs.deno.com/examples/deleting_files", "url": "https://docs.deno.com/examples/deleting_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deleting files\"?\n\nAssistant: Here are some code examples:\n\n### Remove a simple file\n```yaml\nawait Deno.remove(\"example.txt\");\n```\n\n### Remove a file synchronously\n```yaml\nDeno.removeSync(\"example.txt\");\n```\n\n### Remove a directory recursively\n```yaml\nawait Deno.remove(\"./dir\", { recursive: true });\n```\n\n### Handle NotFound error when removing a file\n```yaml\ntry {\n  await Deno.remove(\"example.txt\");\n} catch (err) {\n  if (!(err instanceof Deno.errors.NotFound)) {\n    throw err;\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/deleting_files", "title": "Deleting files", "description": "Removing files and directories is a common task. Deno has a number of functions for this task.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:57:23", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "Deleting files", "title": "Deleting files", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:type": "article", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Deleting files", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Deleting files", "scrapeId": "c022e5fc-c457-49e1-8dd0-917aeab4171e", "sourceURL": "https://docs.deno.com/examples/deleting_files", "url": "https://docs.deno.com/examples/deleting_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deleting files\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use Deno.remove to remove files and Deno.removeSync for synchronous removal.\n• Set recursive to true when removing directories with contents to avoid errors.\n• Always handle potential NotFound errors when attempting to remove files or directories.\n", "metadata": {"source_url": "https://docs.deno.com/examples/deleting_files", "title": "Deleting files", "description": "Removing files and directories is a common task. Deno has a number of functions for this task.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:57:23", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "Deleting files", "title": "Deleting files", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:type": "article", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Deleting files", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Deleting files", "scrapeId": "c022e5fc-c457-49e1-8dd0-917aeab4171e", "sourceURL": "https://docs.deno.com/examples/deleting_files", "url": "https://docs.deno.com/examples/deleting_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Environment variables\"?\n\nAssistant: Environment variables can be used to configure the behavior of a program, or pass data from one program to another.\n\nHere's a detailed explanation:\n\n\n## Reading Environment Variables\nHere an environment variable with the name \"PORT\" is read. If this variable is set the return value will be a string. If it is unset it will be `undefined`.\n\n```javascript\nconst PORT = Deno.env.get(\"PORT\");\nconsole.log(\"PORT:\", PORT);\n```\n\n## Getting All Environment Variables\nYou can also get an object containing all environment variables.\n\n```javascript\nconst env = Deno.env.toObject();\nconsole.log(\"env:\", env);\n```\n\n## Setting Environment Variables\nEnvironment variables can also be set. The set environment variable only affects the current process, and any new processes that are spawned from it. It does not affect parent processes or the user shell.\n\n```javascript\nDeno.env.set(\"MY_PASSWORD\", \"123456\");\n```\n\n## Unsetting Environment Variables\nYou can also unset an environment variable.\n\n```javascript\nDeno.env.delete(\"MY_PASSWORD\");\n```\n\n## Case Sensitivity\nNote that environment variables are case-sensitive on unix, but not on Windows. This means that these two invocations will have different results between platforms.\n\n```javascript\nDeno.env.set(\"MY_PASSWORD\", \"123\");\nDeno.env.set(\"my_password\", \"456\");\nconsole.log(\"UPPERCASE:\", Deno.env.get(\"MY_PASSWORD\"));\nconsole.log(\"lowercase:\", Deno.env.get(\"my_password\"));\n```\n\n## Permissions\nAccess to environment variables is only possible if the Deno process is running with env var permissions (`--allow-env`). You can limit the permission to only a specific number of environment variables (`--allow-env=PORT,MY_PASSWORD`).\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/environment_variables.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-env https://docs.deno.com/examples/scripts/environment_variables.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/environment_variables", "title": "Environment variables", "description": "Environment variables can be used to configure the behavior of a program, or pass data from one program to another.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:57:36", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Environment variables", "og:image": "/img/og.webp", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Environment variables", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:title": "Environment variables", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Environment variables", "twitter:card": "summary_large_image", "language": "en", "scrapeId": "af3b37cf-d37f-4244-b106-a9f6e8b862c4", "sourceURL": "https://docs.deno.com/examples/environment_variables", "url": "https://docs.deno.com/examples/environment_variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Environment variables\"?\n\nAssistant: Here are some code examples:\n\n### Reading Environment Variable\n```yaml\nconst PORT = Deno.env.get(\"PORT\");\nconsole.log(\"PORT:\", PORT);\n```\n\n### Getting All Environment Variables\n```yaml\nconst env = Deno.env.toObject();\nconsole.log(\"env:\", env);\n```\n\n### Setting Environment Variable\n```yaml\nDeno.env.set(\"MY_PASSWORD\", \"123456\");\n```\n\n### Unsetting Environment Variable\n```yaml\nDeno.env.delete(\"MY_PASSWORD\");\n```\n\n### Case Sensitivity Example\n```yaml\nDeno.env.set(\"MY_PASSWORD\", \"123\");\nDeno.env.set(\"my_password\", \"456\");\nconsole.log(\"UPPERCASE:\", Deno.env.get(\"MY_PASSWORD\"));\nconsole.log(\"lowercase:\", Deno.env.get(\"my_password\"));\n```\n\n### Running Example with Permissions\n```yaml\ndeno run --allow-env https://docs.deno.com/examples/scripts/environment_variables.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/environment_variables", "title": "Environment variables", "description": "Environment variables can be used to configure the behavior of a program, or pass data from one program to another.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:57:36", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Environment variables", "og:image": "/img/og.webp", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Environment variables", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:title": "Environment variables", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Environment variables", "twitter:card": "summary_large_image", "language": "en", "scrapeId": "af3b37cf-d37f-4244-b106-a9f6e8b862c4", "sourceURL": "https://docs.deno.com/examples/environment_variables", "url": "https://docs.deno.com/examples/environment_variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Environment variables\"?\n\nAssistant: Here are the recommended best practices:\n\n• Environment variables are case-sensitive on Unix but not on Windows.\n• Access to environment variables requires the Deno process to run with `--allow-env` permission.\n", "metadata": {"source_url": "https://docs.deno.com/examples/environment_variables", "title": "Environment variables", "description": "Environment variables can be used to configure the behavior of a program, or pass data from one program to another.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:57:36", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Environment variables", "og:image": "/img/og.webp", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Environment variables", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:title": "Environment variables", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Environment variables", "twitter:card": "summary_large_image", "language": "en", "scrapeId": "af3b37cf-d37f-4244-b106-a9f6e8b862c4", "sourceURL": "https://docs.deno.com/examples/environment_variables", "url": "https://docs.deno.com/examples/environment_variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Await: CommonJS\"?\n\nAssistant: Example of how top-level await can be used by default in Deno. This example would assist in migrating from NodeJS (CommonJS) to Deno.\n\nHere's a detailed explanation:\n\n\n## Code Example: NodeJS (CommonJS)\nThis example is what you may be used to with NodeJS when using CommonJS modules. Notice that for \"await\" to be used in this example, it must be wrapped in an \"async\" function.\n\n```javascript\nconst fs = require(\"node:fs\");\n\nasync function readFile() {\n  try {\n    const data = await fs.promises.readFile(\"example.txt\", \"utf8\");\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nreadFile();\n```\n\n## Code Example: Deno\nThis is the same example as above, but with Deno. Notice that as well as being able to use \"await\" outside of an \"async\" function, we can also make use of Deno's Filesystem API.\n\n```javascript\ntry {\n  const data = await Deno.readTextFile(\"example.txt\");\n  console.log(data);\n} catch (err) {\n  console.error(err);\n}\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/top_level_await.ts/main) locally using the Deno CLI:\n\n```bash\ndeno run https://docs.deno.com/examples/scripts/top_level_await.ts/main\n```\n\n## Additional Resources\n- [Doc: Deno.readTextFile](https://docs.deno.com/api/deno/~/Deno.readTextFile)\n", "metadata": {"source_url": "https://docs.deno.com/examples/top_level_await", "title": "Await: CommonJS", "description": "Example of how top-level await can be used by default in Deno. This example would assist in migrating from NodeJS (CommonJS) to Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:58:14", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "title": "Await: CommonJS", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Await: CommonJS", "og:title": "Await: CommonJS", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Await: CommonJS", "ogLocale": "en_US", "scrapeId": "839da2af-9ed6-4f54-a67e-fb0082325d94", "sourceURL": "https://docs.deno.com/examples/top_level_await", "url": "https://docs.deno.com/examples/top_level_await/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Await: CommonJS\"?\n\nAssistant: Here are some code examples:\n\n### NodeJS (CommonJS) Example\n```yaml\nconst fs = require(\"node:fs\");\n\nasync function readFile() {\n  try {\n    const data = await fs.promises.readFile(\"example.txt\", \"utf8\");\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nreadFile();\n```\n\n### Deno Example\n```yaml\ntry {\n  const data = await Deno.readTextFile(\"example.txt\");\n  console.log(data);\n} catch (err) {\n  console.error(err);\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/top_level_await", "title": "Await: CommonJS", "description": "Example of how top-level await can be used by default in Deno. This example would assist in migrating from NodeJS (CommonJS) to Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:58:14", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "title": "Await: CommonJS", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Await: CommonJS", "og:title": "Await: CommonJS", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Await: CommonJS", "ogLocale": "en_US", "scrapeId": "839da2af-9ed6-4f54-a67e-fb0082325d94", "sourceURL": "https://docs.deno.com/examples/top_level_await", "url": "https://docs.deno.com/examples/top_level_await/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Await: CommonJS\"?\n\nAssistant: Here are the recommended best practices:\n\n• For using await in NodeJS, it must be wrapped in an async function.\n• In Deno, await can be used at the top level without wrapping it in an async function.\n", "metadata": {"source_url": "https://docs.deno.com/examples/top_level_await", "title": "Await: CommonJS", "description": "Example of how top-level await can be used by default in Deno. This example would assist in migrating from NodeJS (CommonJS) to Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:58:14", "type": "best_practices", "page_metadata": {"twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "title": "Await: CommonJS", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Await: CommonJS", "og:title": "Await: CommonJS", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Await: CommonJS", "ogLocale": "en_US", "scrapeId": "839da2af-9ed6-4f54-a67e-fb0082325d94", "sourceURL": "https://docs.deno.com/examples/top_level_await", "url": "https://docs.deno.com/examples/top_level_await/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Import modules from npm\"?\n\nAssistant: Use JavaScript modules from npm in your Deno programs with the 'npm:' specifier in your imports.\n\nHere's a detailed explanation:\n\n\n## Importing npm Modules\nUse the npm: prefix to import modules from npm, appending a version number. Dependencies from npm can also be configured in an import map.\n\n## Creating an Express Server\nCreate an express server using the imported express module.\n\n## Configuring Routes\nConfigure a route that will process HTTP GET requests.\n\n## Starting the Server\nStart an HTTP server using the configured Express app.\n\n## Running the Example\nRun the example locally using the Deno CLI.\n\n## Additional Resources\nLinks to additional resources related to Node.js/npm support in Deno, npm specifiers, and the express module.\n", "metadata": {"source_url": "https://docs.deno.com/examples/npm", "title": "Import modules from npm", "description": "Use JavaScript modules from npm in your Deno programs with the 'npm:' specifier in your imports.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:58:21", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:title": "Import modules from npm", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:title": "Import modules from npm", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:locale": "en_US", "title": "Import modules from npm", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "language": "en", "ogTitle": "Import modules from npm", "scrapeId": "0acbecc5-9579-4a0a-8fcb-addd0660c61a", "sourceURL": "https://docs.deno.com/examples/npm", "url": "https://docs.deno.com/examples/npm/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Import modules from npm\"?\n\nAssistant: Here are some code examples:\n\n### Importing express module\n```yaml\nimport express from \"npm:express@4.18.2\";\n```\n\n### Creating an express server\n```yaml\nconst app = express();\n```\n\n### Configuring a route\n```yaml\napp.get(\"/\", (_req, res) => {\n  res.send(\"Welcome to the Dinosaur API!\");\n});\n```\n\n### Starting the server\n```yaml\napp.listen(3000);\n```\n\n### Running the example\n```yaml\ndeno run --allow-net --allow-read --allow-env https://docs.deno.com/examples/scripts/npm.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/npm", "title": "Import modules from npm", "description": "Use JavaScript modules from npm in your Deno programs with the 'npm:' specifier in your imports.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:58:21", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:title": "Import modules from npm", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:title": "Import modules from npm", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:locale": "en_US", "title": "Import modules from npm", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "language": "en", "ogTitle": "Import modules from npm", "scrapeId": "0acbecc5-9579-4a0a-8fcb-addd0660c61a", "sourceURL": "https://docs.deno.com/examples/npm", "url": "https://docs.deno.com/examples/npm/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Import modules from npm\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the npm: prefix for importing npm modules in Deno.\n• Always specify a version number when importing modules from npm to avoid breaking changes.\n• Consider using an import map for better dependency management.\n", "metadata": {"source_url": "https://docs.deno.com/examples/npm", "title": "Import modules from npm", "description": "Use JavaScript modules from npm in your Deno programs with the 'npm:' specifier in your imports.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 22:58:21", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:title": "Import modules from npm", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:title": "Import modules from npm", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:locale": "en_US", "title": "Import modules from npm", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "language": "en", "ogTitle": "Import modules from npm", "scrapeId": "0acbecc5-9579-4a0a-8fcb-addd0660c61a", "sourceURL": "https://docs.deno.com/examples/npm", "url": "https://docs.deno.com/examples/npm/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Creating a subprocess\"?\n\nAssistant: This page covers how to create and manage subprocesses in Deno, including examples and security considerations.\n\nHere's a detailed explanation:\n\n\n## Concepts\n- Deno is capable of spawning a subprocess via [Deno.Command](https://docs.deno.com/api/deno/~/Deno.Command).\n- `--allow-run` permission is required to spawn a subprocess.\n- Spawned subprocesses do not run in a security sandbox.\n- Communicate with the subprocess via the [stdin](https://docs.deno.com/api/deno/~/Deno.stdin), [stdout](https://docs.deno.com/api/deno/~/Deno.stdout) and [stderr](https://docs.deno.com/api/deno/~/Deno.stderr) streams.\n\n## Simple example\nThis example is the equivalent of running `echo \"Hello from Deno!\"` from the command line.\n\n## Security\nThe `--allow-run` permission is required for creation of a subprocess. Be aware that subprocesses are not run in a Deno sandbox and therefore have the same permissions as if you were to run the command from the command line yourself.\n\n## Communicating with subprocesses\nBy default when you use `Deno.Command()` the subprocess inherits `stdin`, `stdout` and `stderr` of the parent process. If you want to communicate with a started subprocess you must use the \"piped\" option.\n\n## Piping to files\nThis example is the equivalent of running `yes &> ./process_output` in bash.\n", "metadata": {"source_url": "https://docs.deno.com/examples/subprocess_tutorial", "title": "Creating a subprocess", "description": "This page covers how to create and manage subprocesses in Deno, including examples and security considerations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:58:38", "type": "overview", "page_metadata": {"og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Creating a subprocess", "ogSiteName": "Deno", "og:type": "article", "language": "en", "ogTitle": "Creating a subprocess", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:title": "Creating a subprocess", "ogImage": "/img/og.webp", "og:title": "Creating a subprocess", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "da299ae2-e2ab-4f5d-a223-bbaa876a73bb", "sourceURL": "https://docs.deno.com/examples/subprocess_tutorial", "url": "https://docs.deno.com/examples/subprocess_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Creating a subprocess\"?\n\nAssistant: Here are some code examples:\n\n### Simple Subprocess Example\n```yaml\n// define command used to create the subprocess\nconst command = new Deno.Command(\"echo\", {\n  args: [\"Hello from Deno!\"],\n});\n\n// create subprocess and collect output\nconst { code, stdout, stderr } = await command.output();\n\nconsole.assert(code === 0);\nconsole.log(new TextDecoder().decode(stdout));\nconsole.log(new TextDecoder().decode(stderr));\n\n```\n\n### Run Simple Example\n```yaml\n$ deno run --allow-run=echo ./subprocess_simple.ts\nHello from Deno!\n\n```\n\n### Piping to Files Example\n```yaml\nimport {\n  mergeReadableStreams,\n} from \"jsr:@std/streams@1.0.0-rc.4/merge-readable-streams\";\n\n// create the file to attach the process to\nconst file = await Deno.open(\"./process_output.txt\", {\n  read: true,\n  write: true,\n  create: true,\n});\n\n// start the process\nconst command = new Deno.Command(\"yes\", {\n  stdout: \"piped\",\n  stderr: \"piped\",\n});\n\nconst process = command.spawn();\n\n// example of combining stdout and stderr while sending to a file\nconst joined = mergeReadableStreams(\n  process.stdout,\n  process.stderr,\n);\n\n// returns a promise that resolves when the process is killed/closed\njoined.pipeTo(file.writable).then(() => console.log(\"pipe join done\"));\n\n// manually stop process \"yes\" will never end on its own\nsetTimeout(() => {\n  process.kill();\n}, 100);\n\n```\n\n### Run Piping to Files Example\n```yaml\n$ deno run --allow-run=yes --allow-read=. --allow-write=. ./subprocess_piping_to_file.ts\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/subprocess_tutorial", "title": "Creating a subprocess", "description": "This page covers how to create and manage subprocesses in Deno, including examples and security considerations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:58:38", "type": "code_examples", "page_metadata": {"og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Creating a subprocess", "ogSiteName": "Deno", "og:type": "article", "language": "en", "ogTitle": "Creating a subprocess", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:title": "Creating a subprocess", "ogImage": "/img/og.webp", "og:title": "Creating a subprocess", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "da299ae2-e2ab-4f5d-a223-bbaa876a73bb", "sourceURL": "https://docs.deno.com/examples/subprocess_tutorial", "url": "https://docs.deno.com/examples/subprocess_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Creating a subprocess\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always use the `--allow-run` permission when spawning subprocesses.\n• Be cautious with subprocess permissions as they inherit the same permissions as the parent process.\n• Use piped options for better control over subprocess communication.\n", "metadata": {"source_url": "https://docs.deno.com/examples/subprocess_tutorial", "title": "Creating a subprocess", "description": "This page covers how to create and manage subprocesses in Deno, including examples and security considerations.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:58:38", "type": "best_practices", "page_metadata": {"og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Creating a subprocess", "ogSiteName": "Deno", "og:type": "article", "language": "en", "ogTitle": "Creating a subprocess", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:title": "Creating a subprocess", "ogImage": "/img/og.webp", "og:title": "Creating a subprocess", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "da299ae2-e2ab-4f5d-a223-bbaa876a73bb", "sourceURL": "https://docs.deno.com/examples/subprocess_tutorial", "url": "https://docs.deno.com/examples/subprocess_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build a Database App with Drizzle ORM and Deno\"?\n\nAssistant: Drizzle ORM is a TypeScript ORM that provides a type-safe way to interact with your database. In this tutorial, we'll set up Drizzle ORM with Deno and PostgreSQL to create, read, update, and delete dinosaur data.\n\nHere's a detailed explanation:\n\n\n## Install Drizzle\nFirst, we'll install the required dependencies using Deno's npm compatibility. We'll be using Drizzle with Postgres, but you can also use MySQL or SQLite. (If you don't have Postgres, you can install it here.)\n\n```bash\ndeno install npm:drizzle-orm npm:drizzle-kit npm:pg npm:@types/pg\n```\n\nThis installs Drizzle ORM and its associated tools — drizzle-kit for schema migrations, pg for PostgreSQL connectivity, and the TypeScript types for PostgreSQL. These packages will allow us to interact with our database in a type-safe way while maintaining compatibility with Deno's runtime environment.\n\nIt will also create a `deno.json` file in your project root to manage the npm dependencies:\n\n```json\n{\n  \"imports\": {\n    \"@types/pg\": \"npm:@types/pg@^8.11.10\",\n    \"drizzle-kit\": \"npm:drizzle-kit@^0.27.2\",\n    \"drizzle-orm\": \"npm:drizzle-orm@^0.36.0\",\n    \"pg\": \"npm:pg@^8.13.1\"\n  }\n}\n```\n\n## Configure Drizzle\nNext, let's create a `drizzle.config.ts` file in your project root. This file will configure Drizzle to work with your PostgreSQL database:\n\n```tsx\nimport { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./drizzle\",\n  schema: \"./src/db/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: Deno.env.get(\"DATABASE_URL\")!,\n  },\n});\n```\n\nThese config settings determine:\n\n- where to output migration files ( `./drizzle`)\n- where to find your schema definition ( `./src/db/schema.ts`)\n- that PostgreSQL as your database dialect, and\n- how to connect to your database using the URL stored in your environment variables\n\nThe `drizzle-kit` will use this configuration to manage your database schema and generate SQL migrations automatically.\n\nWe’ll also need a `.env` file in the project root containing the `DATABASE_URL` connection string:\n\n```bash\nDATABASE_URL=postgresql://[user[:password]@][host][:port]/[dbname]\n```\n\nBe sure to replace the login credentials with yours.\n\n## Define schemas\nThere are two ways that you can define your table schema with Drizzle. If you already have Postgres tables defined, you can infer them with `pull`; otherwise, you can define them in code, then use Drizzle to create a new table. We'll explore both approaches below.\n\n## Infer schema with `pull`\nIf you already have Postgres tables before adding Drizzle, then you can introspect your database schema to automatically generate TypeScript types and table definitions with the command `npm:drizzle-kit pull`. This is particularly useful when working with an existing database or when you want to ensure your code stays in sync with your database structure.\n\nLet's say our current database already has the following table schemas:\n\n![Diagram of table schema in postgres](https://docs.deno.com/examples/tutorials/images/how-to/drizzle/table-diagram.png)\n\nWe'll run the following command to introspect the database and populate several files under a `./drizzle` directory:\n\n```bash\ndeno --env -A --node-modules-dir npm:drizzle-kit pull\n```\n\nThe above command will create a number of files within a `./drizzle` directory that define the schema, track changes, and provide the necessary information for database migrations:\n\n- `drizzle/schema.ts`: This file defines the database schema using Drizzle ORM's schema definition syntax.\n- `drizzle/relations.ts`: This file is intended to define relationships between tables using Drizzle ORM's relations API.\n- `drizzle/0000_long_veda.sql`: A SQL migration file that contains the SQL code to create the database table(s). The code is commented out — you can uncomment this code if you want to run this migration to create the table(s) in a new environment.\n- `drizzle/meta/0000_snapshot.json`: A snapshot file that represents the current state of your database schema.\n- `drizzle/meta/_journal.json`: This file keeps track of the migrations that have been applied to your database. It helps Drizzle ORM know which migrations have been run and which ones still need to be applied.\n\n## Define schema in Drizzle first\nIf you don't already have an existing table defined in Postgres (e.g. you're starting a completely new project), you can define the tables and types in code and have Drizzle create them.\n\nLet's create a new directory `./src/db/` and in it, a `schema.ts` file, which we'll populate with the below:\n\n```ts\n// schema.ts\nimport {\n  boolean,\n  foreignKey,\n  integer,\n  pgTable,\n  serial,\n  text,\n  timestamp,\n} from \"drizzle-orm/pg-core\";\n\nexport const dinosaurs = pgTable(\"dinosaurs\", {\n  id: serial().primaryKey().notNull(),\n  name: text(),\n  description: text(),\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: serial().primaryKey().notNull(),\n  dinosaurId: integer(\"dinosaur_id\"),\n  description: text(),\n  dateCreated: timestamp(\"date_created\", { mode: \"string\" }).defaultNow(),\n  isComplete: boolean(\"is_complete\"),\n}, (table) => {\n  return {\n    tasksDinosaurIdFkey: foreignKey({\n      columns: [table.dinosaurId],\n      foreignColumns: [dinosaurs.id],\n      name: \"tasks_dinosaur_id_fkey\",\n    }),\n  };\n});\n```\n\nThe above represents in code the two tables, `dinosaurs` and `tasks` and their relation. Once we have defined `./src/db/schema.ts`, we can create the tables and their specified relationship by creating a migration:\n\n```bash\ndeno -A --node-modules-dir npm:drizzle-kit generate\n```\n\n## Interact with the database\nNow that we have setup Drizzle ORM, we can use it to simplify managing data in our Postgres database. First, Drizzle suggests taking the `schema.ts` and `relations.ts` and copying them to the `./src/db` directory to use within an application.\n\nLet's create a `./src/db/db.ts` which exports a few helper functions that'll make it easier for us to interact with the database:\n\n```ts\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { dinosaurs as dinosaurSchema, tasks as taskSchema } from \"./schema.ts\";\nimport { dinosaursRelations, tasksRelations } from \"./relations.ts\";\nimport pg from \"pg\";\nimport { integer } from \"drizzle-orm/sqlite-core\";\nimport { eq } from \"drizzle-orm/expressions\";\n\n// Use pg driver.\nconst { Pool } = pg;\n\n// Instantiate Drizzle client with pg driver and schema.\nexport const db = drizzle({\n  client: new Pool({\n    connectionString: Deno.env.get(\"DATABASE_URL\"),\n  }),\n  schema: { dinosaurSchema, taskSchema, dinosaursRelations, tasksRelations },\n});\n\n// Insert dinosaur.\nexport async function insertDinosaur(dinosaurObj: typeof dinosaurSchema) {\n  return await db.insert(dinosaurSchema).values(dinosaurObj);\n}\n\n// Insert task.\nexport async function insertTask(taskObj: typeof taskSchema) {\n  return await db.insert(taskSchema).values(taskObj);\n}\n\n// Find dinosaur by id.\nexport async function findDinosaurById(dinosaurId: typeof integer) {\n  return await db.select().from(dinosaurSchema).where(\n    eq(dinosaurSchema.id, dinosaurId),\n  );\n}\n\n// Find dinosaur by name.\nexport async function findDinosaurByName(name: string) {\n  return await db.select().from(dinosaurSchema).where(\n    eq(dinosaurSchema.name, name),\n  );\n}\n\n// Find tasks based on dinosaur id.\nexport async function findDinosaurTasksByDinosaurId(\n  dinosaurId: typeof integer,\n) {\n  return await db.select().from(taskSchema).where(\n    eq(taskSchema.dinosaurId, dinosaurId),\n  );\n}\n\n// Update dinosaur.\nexport async function updateDinosaur(dinosaurObj: typeof dinosaurSchema) {\n  return await db.update(dinosaurSchema).set(dinosaurObj).where(\n    eq(dinosaurSchema.id, dinosaurObj.id),\n  );\n}\n\n// Update task.\nexport async function updateTask(taskObj: typeof taskSchema) {\n  return await db.update(taskSchema).set(taskObj).where(\n    eq(taskSchema.id, taskObj.id),\n  );\n}\n\n// Delete dinosaur by id.\nexport async function deleteDinosaurById(id: typeof integer) {\n  return await db.delete(dinosaurSchema).where(\n    eq(dinosaurSchema.id, id),\n  );\n}\n\n// Delete task by id.\nexport async function deleteTask(id: typeof integer) {\n  return await db.delete(taskSchema).where(eq(taskSchema.id, id));\n}\n\n```\n\nNow we can import some of these helper functions to a script where we can perform some simple CRUD operations on our database. Let's create a new file `./src/script.ts`:\n\n```ts\nimport {\n  deleteDinosaurById,\n  findDinosaurByName,\n  insertDinosaur,\n  insertTask,\n  updateDinosaur,\n} from \"./db/db.ts\";\n\n// Create a new dinosaur.\nawait insertDinosaur({\n  name: \"Denosaur\",\n  description: \"Dinosaurs should be simple.\",\n});\n\n// Find that dinosaur by name.\nconst res = await findDinosaurByName(\"Denosaur\");\n\n// Create a task with that dinosaur by its id.\nawait insertTask({\n  dinosaurId: res.id,\n  description: \"Remove unnecessary config.\",\n  isComplete: false,\n});\n\n// Update a dinosaur with a new description.\nconst newDeno = {\n  id: res.id,\n  name: \"Denosaur\",\n  description: \"The simplest dinosaur.\",\n};\nawait updateDinosaur(newDeno);\n\n// Delete the dinosaur (and any tasks it has).\nawait deleteDinosaurById(res.id);\n\n```\n\n## What's next?\nDrizzle ORM is a popular data mapping tool to simplify managing and maintaining data models and working with your database. Hopefully, this tutorial gives you a start on how to use Drizzle in your Deno projects.\n\nNow that you have a basic understanding of how to use Drizzle ORM with Deno, you could:\n\n1. Add more complex database relationships\n2. Implement a REST API using Hono to serve your dinosaur data\n3. Add validation and error handling to your database operations\n4. Write tests for your database interactions\n5. Deploy your application to the cloud\n", "metadata": {"source_url": "https://docs.deno.com/examples/drizzle_tutorial", "title": "Build a Database App with Drizzle ORM and Deno", "description": "Drizzle ORM is a TypeScript ORM that provides a type-safe way to interact with your database. In this tutorial, we'll set up Drizzle ORM with Deno and PostgreSQL to create, read, update, and delete dinosaur data.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-02-27 23:00:16", "type": "overview", "page_metadata": {"og:site_name": "Deno", "ogTitle": "Build a Database App with Drizzle ORM and Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:title": "Build a Database App with Drizzle ORM and Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:locale": "en_US", "twitter:card": "summary_large_image", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Build a Database App with Drizzle ORM and Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Build a Database App with Drizzle ORM and Deno", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "language": "en", "twitter:image": "/img/og.webp", "scrapeId": "4586a86d-80af-426e-b059-dd2c8d0f9583", "sourceURL": "https://docs.deno.com/examples/drizzle_tutorial", "url": "https://docs.deno.com/examples/drizzle_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Build a Database App with Drizzle ORM and Deno\"?\n\nAssistant: Here are some code examples:\n\n### Install Drizzle\n```yaml\ndeno install npm:drizzle-orm npm:drizzle-kit npm:pg npm:@types/pg\n```\n\n### Deno JSON Configuration\n```yaml\n{\n  \"imports\": {\n    \"@types/pg\": \"npm:@types/pg@^8.11.10\",\n    \"drizzle-kit\": \"npm:drizzle-kit@^0.27.2\",\n    \"drizzle-orm\": \"npm:drizzle-orm@^0.36.0\",\n    \"pg\": \"npm:pg@^8.13.1\"\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/drizzle_tutorial", "title": "Build a Database App with Drizzle ORM and Deno", "description": "Drizzle ORM is a TypeScript ORM that provides a type-safe way to interact with your database. In this tutorial, we'll set up Drizzle ORM with Deno and PostgreSQL to create, read, update, and delete dinosaur data.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-02-27 23:00:16", "type": "code_examples", "page_metadata": {"og:site_name": "Deno", "ogTitle": "Build a Database App with Drizzle ORM and Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:title": "Build a Database App with Drizzle ORM and Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:locale": "en_US", "twitter:card": "summary_large_image", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Build a Database App with Drizzle ORM and Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Build a Database App with Drizzle ORM and Deno", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "language": "en", "twitter:image": "/img/og.webp", "scrapeId": "4586a86d-80af-426e-b059-dd2c8d0f9583", "sourceURL": "https://docs.deno.com/examples/drizzle_tutorial", "url": "https://docs.deno.com/examples/drizzle_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connect to OpenAI: Chat Completion\"?\n\nAssistant: This example demonstrates how to interact with OpenAI's chat completions API using Deno, where we send a user prompt and receive a response from the GPT-4 model.\n\nHere's a detailed explanation:\n\n\n## Import the OpenAI module\nImport the OpenAI module from the Deno third-party library\n\n```typescript\nimport { OpenAI } from \"https://deno.land/x/openai@v4.68.1/mod.ts\";\n```\n\n## Create an OpenAI client\nCreate an OpenAI client by providing the API key stored in an environment variable. (Make sure your API key is set as an environment variable)\n\n```typescript\nconst openai = new OpenAI({\n  apiKey: Deno.env.get(\"OPENAI_API_KEY\")!,\n});\n```\n\n## Define the user prompt\nDefine the user prompt for generating a response\n\n```typescript\nconst userPrompt = \"What are some cool things to do in fall?\";\n```\n\n## Send the user prompt to OpenAI\nSend the user prompt and system message to OpenAI for chat completion.\n\n```typescript\nconst completion = await openai.chat.completions.create({\n  model: \"gpt-4\", // Specify the GPT-4 (or any other valid) model for the completion\n  messages: [\n    { role: \"system\", content: \"You are a helpful assistant.\" }, // System message setting the role\n    { role: \"user\", content: userPrompt }, // User's input prompt\n  ],\n});\n```\n\n## Log the assistant's response\nExtract and log the assistant's response (text) from the first choice in the completion result\n\n```typescript\nconsole.log(\"Response from OpenAI:\", completion.choices[0].message.content);\n```\n\n## Run the example locally\nRun this example locally using the Deno CLI:\n\n```bash\ndeno run --allow-net --allow-env https://docs.deno.com/examples/scripts/openai_chat_completion.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/openai_chat_completion", "title": "Connect to OpenAI: Chat Completion", "description": "This example demonstrates how to interact with OpenAI's chat completions API using Deno, where we send a user prompt and receive a response from the GPT-4 model.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:00:31", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Connect to OpenAI: Chat Completion", "og:title": "Connect to OpenAI: Chat Completion", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogTitle": "Connect to OpenAI: Chat Completion", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:title": "Connect to OpenAI: Chat Completion", "twitter:card": "summary_large_image", "scrapeId": "e8895b6d-5320-42da-b67d-28a5d131dd59", "sourceURL": "https://docs.deno.com/examples/openai_chat_completion", "url": "https://docs.deno.com/examples/openai_chat_completion/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connect to OpenAI: Chat Completion\"?\n\nAssistant: Here are some code examples:\n\n### Import OpenAI Module\n```yaml\nimport { OpenAI } from \"https://deno.land/x/openai@v4.68.1/mod.ts\";\n```\n\n### Create OpenAI Client\n```yaml\nconst openai = new OpenAI({\n  apiKey: Deno.env.get(\"OPENAI_API_KEY\")!,\n});\n```\n\n### Define User Prompt\n```yaml\nconst userPrompt = \"What are some cool things to do in fall?\";\n```\n\n### Send User Prompt to OpenAI\n```yaml\nconst completion = await openai.chat.completions.create({\n  model: \"gpt-4\",\n  messages: [\n    { role: \"system\", content: \"You are a helpful assistant.\" },\n    { role: \"user\", content: userPrompt },\n  ],\n});\n```\n\n### Log Assistant's Response\n```yaml\nconsole.log(\"Response from OpenAI:\", completion.choices[0].message.content);\n```\n\n### Run Example Locally\n```yaml\ndeno run --allow-net --allow-env https://docs.deno.com/examples/scripts/openai_chat_completion.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/openai_chat_completion", "title": "Connect to OpenAI: Chat Completion", "description": "This example demonstrates how to interact with OpenAI's chat completions API using Deno, where we send a user prompt and receive a response from the GPT-4 model.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:00:31", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Connect to OpenAI: Chat Completion", "og:title": "Connect to OpenAI: Chat Completion", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogTitle": "Connect to OpenAI: Chat Completion", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:title": "Connect to OpenAI: Chat Completion", "twitter:card": "summary_large_image", "scrapeId": "e8895b6d-5320-42da-b67d-28a5d131dd59", "sourceURL": "https://docs.deno.com/examples/openai_chat_completion", "url": "https://docs.deno.com/examples/openai_chat_completion/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connect to OpenAI: Chat Completion\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure your API key is set as an environment variable before running the code.\n", "metadata": {"source_url": "https://docs.deno.com/examples/openai_chat_completion", "title": "Connect to OpenAI: Chat Completion", "description": "This example demonstrates how to interact with OpenAI's chat completions API using Deno, where we send a user prompt and receive a response from the GPT-4 model.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:00:31", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Connect to OpenAI: Chat Completion", "og:title": "Connect to OpenAI: Chat Completion", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogTitle": "Connect to OpenAI: Chat Completion", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:title": "Connect to OpenAI: Chat Completion", "twitter:card": "summary_large_image", "scrapeId": "e8895b6d-5320-42da-b67d-28a5d131dd59", "sourceURL": "https://docs.deno.com/examples/openai_chat_completion", "url": "https://docs.deno.com/examples/openai_chat_completion/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Node.js API Modules\"?\n\nAssistant: This documentation page provides an overview of various Node.js API modules and their functionalities.\n\nHere's a detailed explanation:\n\n\n## assert\nThe `node:assert` module provides a set of assertion functions for verifying invariants.\n\n## async_hooks\nWe strongly discourage the use of the `async_hooks` API. Other APIs that can cover most of its use cases include:\n\n## buffer\n`Buffer` objects are used to represent a fixed-length sequence of bytes. Many Node.js APIs support `Buffer` s.\n\n## child_process\nThe `node:child_process` module provides the ability to spawn subprocesses in a manner that is similar, but not identical, to [`popen(3)`](http://man7.org/linux/man-pages/man3/popen.3.html). This capability is primarily provided by the spawn function.\n\n## cluster\n\n\n## console\nThe `node:console` module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.\n\n## constants\n\n\n## crypto\nThe `node:crypto` module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.\n\n## dgram\nThe `node:dgram` module provides an implementation of UDP datagram sockets.\n\n## diagnostics_channel\nThe `node:diagnostics_channel` module provides an API to create named channels to report arbitrary message data for diagnostics purposes.\n\n## dns\nThe `node:dns` module enables name resolution. For example, use it to look up IP addresses of host names.\n\n## dns/promises\nThe `dns.promises` API provides an alternative set of asynchronous DNS methods that return `Promise` objects rather than using callbacks. The API is accessible via `import { promises as dnsPromises } from 'node:dns'` or `import dnsPromises from 'node:dns/promises'`.\n\n## domain\n\n\n## events\nMuch of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called \"emitters\") emit named events that cause `Function` objects (\"listeners\") to be called.\n\n## fs\nThe `node:fs` module enables interacting with the file system in a way modeled on standard POSIX functions.\n\n## fs/promises\nThe `fs/promises` API provides asynchronous file system methods that return promises.\n\n## http\nTo use the HTTP server and client one must import the `node:http` module.\n\n## http2\nThe `node:http2` module provides an implementation of the [HTTP/2](https://tools.ietf.org/html/rfc7540) protocol. It can be accessed using:\n\n## https\nHTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a separate module.\n\n## inspector\n\n\n## inspector/promises\nThe `node:inspector/promises` module provides an API for interacting with the V8 inspector.\n\n## module\n\n\n## net\nStability: 2 - Stable\n\n## os\nThe `node:os` module provides operating system-related utility methods and properties. It can be accessed using:\n\n## path\nThe `node:path` module provides utilities for working with file and directory paths. It can be accessed using:\n\n## perf_hooks\nThis module provides an implementation of a subset of the W3C [Web Performance APIs](https://w3c.github.io/perf-timing-primer/) as well as additional APIs for Node.js-specific performance measurements.\n\n## process\n\n\n## punycode\n**The version of the punycode module bundled in Node.js is being deprecated.** In a future major version of Node.js this module will be removed. Users currently depending on the `punycode` module should switch to using the userland-provided [Punycode.js](https://github.com/bestiejs/punycode.js) module instead. For punycode-based URL encoding, see `url.domainToASCII` or, more generally, the `WHATWG URL API`.\n\n## querystring\nThe `node:querystring` module provides utilities for parsing and formatting URL query strings. It can be accessed using:\n\n## readline\nThe `node:readline` module provides an interface for reading data from a [Readable](https://nodejs.org/docs/latest-v22.x/api/stream.html#readable-streams) stream (such as [`process.stdin`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdin)) one line at a time.\n\n## readline/promises\n\n\n## repl\n\n\n## sea\n\n\n## sqlite\n\n\n## stream\nA stream is an abstract interface for working with streaming data in Node.js. The `node:stream` module provides an API for implementing the stream interface.\n\n## stream/consumers\n\n\n## stream/promises\n\n\n## stream/web\n\n\n## string_decoder\nThe `node:string_decoder` module provides an API for decoding `Buffer` objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters. It can be accessed using:\n\n## test/reporters\nThe `node:test/reporters` module exposes the builtin-reporters for `node:test`. To access it:\n\n## timers\nThe `timer` module exposes a global API for scheduling functions to be called at some future period of time. Because the timer functions are globals, there is no need to import `node:timers` to use the API.\n\n## timers/promises\nThe `timers/promises` API provides an alternative set of timer functions that return `Promise` objects. The API is accessible via `import timersPromises from 'node:timers/promises'`.\n\n## tls\nThe `node:tls` module provides an implementation of the Transport Layer Security (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL. The module can be accessed using:\n\n## trace_events\n\n\n## tty\nThe `node:tty` module provides the `tty.ReadStream` and `tty.WriteStream` classes. In most cases, it will not be necessary or possible to use this module directly. However, it can be accessed using:\n\n## url\nThe `node:url` module provides utilities for URL resolution and parsing. It can be accessed using:\n\n## util\nThe `node:util` module supports the needs of Node.js internal APIs. Many of the utilities are useful for application and module developers as well. To access it:\n\n## util/types\n\n\n## v8\n\n\n## vm\nThe `node:vm` module enables compiling and running code within V8 Virtual Machine contexts.\n\n## wasi\n\n\n## worker_threads\nThe `node:worker_threads` module enables the use of threads that execute JavaScript in parallel. To access it:\n\n## zlib\nThe `node:zlib` module provides compression functionality implemented using Gzip, Deflate/Inflate, and Brotli.\n", "metadata": {"source_url": "https://docs.deno.com/api/node", "title": "Node.js API Modules", "description": "This documentation page provides an overview of various Node.js API modules and their functionalities.", "has_code_examples": false, "has_best_practices": false, "section_count": 53, "timestamp": "2025-02-27 23:01:00", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "twitter:site": "@deno_land", "twitter:title": "Node documentation", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "title": "Node documentation", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:title": "Node documentation", "scrapeId": "35ca168b-93d8-491e-a8b7-b3765aab5e09", "sourceURL": "https://docs.deno.com/api/node", "url": "https://docs.deno.com/api/node/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Exponential backoff\"?\n\nAssistant: Exponential backoff is a technique used in computer systems to handle retries and avoid overwhelming services. We can easily implement this by using the `retry` utility provided by the standard library.\n\nHere's a detailed explanation:\n\n\n## Introduction\nExponential backoff is a technique used in computer systems to handle retries and avoid overwhelming services. We can easily implement this by using the `retry` utility provided by the standard library.\n\n## Importing the Retry Utility\nImport the 'retry' utility from '@std/async'.\n\n## Function Definition\nA function that logs 'hello world' to the console and returns a rejected Promise.\n\n## Retry Options Configuration\nConfiguration for retry options which will make sure that the function will be called at max 3 times before throwing an error. The first call to the function will be made immediately, the second call will happen after a delay of 10ms and the third/final call will be made after a delay of 20ms.\n\n## Using the Retry Utility\nWrap the function with the 'retry' utility along with the retry configuration.\n\n## Error Handling\nWhen max attempts are exhausted, a RetryError is thrown containing the original rejection reason 'rejected' as its cause property.\n\n## Running the Example\nRun this example locally using the Deno CLI:\n\n## Additional Resources\n- [Wikipedia: Exponential backoff](https://en.wikipedia.org/wiki/Exponential_backoff)\n- [Doc: @std/async > retry](https://jsr.io/@std/async/doc/~/retry)\n", "metadata": {"source_url": "https://docs.deno.com/examples/exponential_backoff", "title": "Exponential backoff", "description": "Exponential backoff is a technique used in computer systems to handle retries and avoid overwhelming services. We can easily implement this by using the `retry` utility provided by the standard library.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:01:10", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "title": "Exponential backoff", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:title": "Exponential backoff", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogTitle": "Exponential backoff", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Exponential backoff", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "c387802b-5041-46ec-95c4-57dd57188ae7", "sourceURL": "https://docs.deno.com/examples/exponential_backoff", "url": "https://docs.deno.com/examples/exponential_backoff/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Exponential backoff\"?\n\nAssistant: Here are some code examples:\n\n### Importing the Retry Utility\n```yaml\nimport { retry, RetryError, type RetryOptions } from \"jsr:@std/async\";\n```\n\n### Function Definition\n```yaml\nconst fn = () => {\n  console.log(\"hello world\");\n  return Promise.reject(\"rejected\");\n};\n```\n\n### Retry Options Configuration\n```yaml\nconst options: RetryOptions = {\n  maxAttempts: 3,\n  minTimeout: 10,\n  multiplier: 2,\n  jitter: 0,\n};\n```\n\n### Using the Retry Utility\n```yaml\ntry {\n  await retry(fn, options);\n} catch (err) {\n  if (err instanceof RetryError) {\n    console.log(\"Retry error :\", err.message);\n    console.log(\"Error cause :\", err.cause);\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/exponential_backoff", "title": "Exponential backoff", "description": "Exponential backoff is a technique used in computer systems to handle retries and avoid overwhelming services. We can easily implement this by using the `retry` utility provided by the standard library.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:01:10", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "title": "Exponential backoff", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:title": "Exponential backoff", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogTitle": "Exponential backoff", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Exponential backoff", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "c387802b-5041-46ec-95c4-57dd57188ae7", "sourceURL": "https://docs.deno.com/examples/exponential_backoff", "url": "https://docs.deno.com/examples/exponential_backoff/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Exponential backoff\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to configure the retry options according to the needs of your application to avoid unnecessary delays or overwhelming the service.\n• Use exponential backoff to manage retries effectively, especially in distributed systems.\n", "metadata": {"source_url": "https://docs.deno.com/examples/exponential_backoff", "title": "Exponential backoff", "description": "Exponential backoff is a technique used in computer systems to handle retries and avoid overwhelming services. We can easily implement this by using the `retry` utility provided by the standard library.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:01:10", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "title": "Exponential backoff", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:title": "Exponential backoff", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogTitle": "Exponential backoff", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Exponential backoff", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "c387802b-5041-46ec-95c4-57dd57188ae7", "sourceURL": "https://docs.deno.com/examples/exponential_backoff", "url": "https://docs.deno.com/examples/exponential_backoff/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Parsing and serializing YAML\"?\n\nAssistant: YAML is a widely used data serialization language designed to be easily human readable and writeable.\n\nHere's a detailed explanation:\n\n\n## Parsing YAML\nTo parse a YAML string, you can use the the standard library's YAML parse function. The value is returned as a JavaScript object.\n\n```javascript\nconst text = `\nfoo: bar\nbaz:\n  - qux\n  - quux\n`;\nconst data = parse(text);\nconsole.log(data.foo);\nconsole.log(data.baz.length);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_yaml", "title": "Parsing and serializing YAML", "description": "YAML is a widely used data serialization language designed to be easily human readable and writeable.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:01:16", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Parsing and serializing YAML", "twitter:site": "@deno_land", "language": "en", "og:title": "Parsing and serializing YAML", "ogSiteName": "Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "ogTitle": "Parsing and serializing YAML", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "Parsing and serializing YAML", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "6d23ba88-cb8b-4713-a516-3c5b4540c92c", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_yaml", "url": "https://docs.deno.com/examples/parsing_serializing_yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Parsing and serializing YAML\"?\n\nAssistant: Here are some code examples:\n\n### Importing YAML Functions\n```yaml\nimport { parse, stringify } from \"jsr:@std/yaml\";\n```\n\n### Parsing Example\n```yaml\nconst text = `\nfoo: bar\nbaz:\n  - qux\n  - quux\n`;\nconst data = parse(text);\nconsole.log(data.foo);\nconsole.log(data.baz.length);\n```\n\n### Stringifying Example\n```yaml\nconst obj = {\n  hello: \"world\",\n  numbers: [1, 2, 3],\n};\nconst yaml = stringify(obj);\nconsole.log(yaml);\n// hello: word\n// numbers:\n//   - 1\n//   - 2\n//   - 3\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_yaml", "title": "Parsing and serializing YAML", "description": "YAML is a widely used data serialization language designed to be easily human readable and writeable.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:01:16", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Parsing and serializing YAML", "twitter:site": "@deno_land", "language": "en", "og:title": "Parsing and serializing YAML", "ogSiteName": "Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "ogTitle": "Parsing and serializing YAML", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "Parsing and serializing YAML", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "6d23ba88-cb8b-4713-a516-3c5b4540c92c", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_yaml", "url": "https://docs.deno.com/examples/parsing_serializing_yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Parsing and serializing YAML\"?\n\nAssistant: Here are the recommended best practices:\n\n• Run the example locally using the Deno CLI: `deno run https://docs.deno.com/examples/scripts/parsing_serializing_yaml.ts`\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_yaml", "title": "Parsing and serializing YAML", "description": "YAML is a widely used data serialization language designed to be easily human readable and writeable.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:01:16", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Parsing and serializing YAML", "twitter:site": "@deno_land", "language": "en", "og:title": "Parsing and serializing YAML", "ogSiteName": "Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "ogTitle": "Parsing and serializing YAML", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "Parsing and serializing YAML", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "6d23ba88-cb8b-4713-a516-3c5b4540c92c", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_yaml", "url": "https://docs.deno.com/examples/parsing_serializing_yaml/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Contributing and support\"?\n\nAssistant: We welcome and appreciate all contributions to Deno. This page serves as a helper to get you started on contributing.\n\nHere's a detailed explanation:\n\n\n## Projects\nThere are numerous repositories in the [`denoland`](https://github.com/denoland) organization that are part of the Deno ecosystem.\n\nRepositories have different scopes, use different programming languages and have varying difficulty level when it comes to contributions.\n\nTo help you decide which repository might be the best to start contributing (and/or falls into your interest), here's a short comparison ( **codebases** **primarily comprise the languages in bold**):\n\n### [deno](https://github.com/denoland/deno)\nThis is the main repository that provides the `deno` CLI.\n\nIf you want to fix a bug or add a new feature to `deno` this is the repository to contribute to.\n\nSome systems, including a large part of the Node.js compatibility layer are implemented in JavaScript and TypeScript modules. These are a good place to start if you are looking to make your first contribution.\n\nWhile iterating on such modules it is recommended to include `--features hmr` in your `cargo` flags. This is a special development mode where the JS/TS sources are not included in the binary but read at runtime, meaning the binary will not have to be rebuilt if they are changed.\n\nTo use the commands below, you need to first install the necessary tools on your system as described [here](https://docs.deno.com/runtime/contributing/building_from_source).\n\n```highlight notranslate sh\n# cargo build\ncargo build --features hmr\n\n# cargo run -- run hello.ts\ncargo run --features hmr -- run hello.ts\n\n# cargo test integration::node_unit_tests::os_test\ncargo test --features hmr integration::node_unit_tests::os_test\n```\n\nAlso remember to reference this feature flag in your editor settings. For VSCode users, combine the following into your workspace file:\n\n```highlight notranslate jsonc\n{\n  \"settings\": {\n    \"rust-analyzer.cargo.features\": [\"hmr\"],\n    // Adds support for resolving internal `ext:*` modules\n    \"deno.importMap\": \"tools/core_import_map.json\"\n  }\n}\n```\n\nTo use a development version of the LSP in VSCode:\n\n1. Install and enable the [Deno VSCode extension](https://marketplace.visualstudio.com/items?itemName=denoland.vscode-deno)\n2. Update your VSCode settings and point `deno.path` to your development binary:\n\n```highlight notranslate jsonc\n// .vscode/settings.json\n{\n  \"deno.path\": \"/path/to/your/deno/target/debug/deno\"\n}\n```\n\nLanguages: **Rust**, **JavaScript**, **TypeScript**\n\n### [deno_std](https://github.com/denoland/deno_std)\nThe standard library for Deno.\n\nLanguages: **TypeScript**, WebAssembly\n\n### [fresh](https://github.com/denoland/fresh)\nThe next-gen web framework.\n\nLanguages: **TypeScript**, TSX\n\n### [deno_lint](https://github.com/denoland/deno_lint)\nLinter that powers `deno lint` subcommand.\n\nLanguages: **Rust**\n\n### [deno_doc](https://github.com/denoland/deno_doc)\nDocumentation generator that powers `deno doc` subcommand, and reference documentation on [https://docs.deno.com/api](https://docs.deno.com/api), and [https://jsr.io](https://jsr.io/).\n\nLanguages: **Rust**\n\n### [rusty_v8](https://github.com/denoland/rusty_v8)\nRust bindings for the V8 JavaScript engine. Very technical and low-level.\n\nLanguages: **Rust**\n\n### [serde_v8](https://github.com/denoland/deno_core/tree/main/serde_v8)\nLibrary that provides bijection layer between V8 and Rust objects. Based on [`serde`](https://crates.io/crates/serde) library. Very technical and low-level.\n\nLanguages: **Rust**\n\n### [deno_docker](https://github.com/denoland/deno_docker)\nOfficial Docker images for Deno.\n\n## General remarks\n- Read the [style guide](https://docs.deno.com/runtime/contributing/style_guide).\n\n- Please don't make [the benchmarks](https://deno.land/benchmarks) worse.\n\n- Ask for help in the [community chat room](https://discord.gg/deno).\n\n- If you are going to work on an issue, mention so in the issue's comments _before_ you start working on the issue.\n\n- If you are going to work on a new feature, create an issue and discuss with other contributors _before_ you start working on the feature; we appreciate all contributions but not all proposed features will be accepted. We don't want you to spend hours working on code that might not be accepted.\n\n- Please be professional in the forums. We follow [Rust's code of conduct](https://www.rust-lang.org/policies/code-of-conduct) (CoC). Have a problem? Email [ry@tinyclouds.org](mailto:ry@tinyclouds.org).\n\n## Submitting a pull request\nBefore submitting a PR to any of the repos, please make sure the following is done:\n\n1. Give the PR a descriptive title.\n\nExamples of good PR title:\n\n- fix(std/http): Fix race condition in server\n- docs(console): Update docstrings\n- feat(doc): Handle nested re-exports\n\nExamples of bad PR title:\n\n- fix #7123\n- update docs\n- fix bugs\n\n2. Ensure there is a related issue and that it is referenced in the PR text.\n3. Ensure there are tests that cover the changes.\n\n## Submitting a PR to deno\nIn addition to the above make sure that:\n\n> To use the commands below, you need to first install the necessary tools on your system as described [here](https://docs.deno.com/runtime/contributing/building_from_source).\n\n1. `cargo test` passes - this will run full test suite for `deno` including unit tests, integration tests and Web Platform Tests\n\n2. Run `./tools/format.js` - this will format all of the code to adhere to the consistent style in the repository\n\n3. Run `./tools/lint.js` - this will check Rust and JavaScript code for common mistakes and errors using `clippy` (for Rust) and `dlint` (for JavaScript)\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing", "title": "Contributing and support", "description": "We welcome and appreciate all contributions to Deno. This page serves as a helper to get you started on contributing.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:01:40", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "ogTitle": "Contributing and support", "og:title": "Contributing and support", "twitter:title": "Contributing and support", "title": "Contributing and support", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:type": "article", "language": "en", "scrapeId": "2dcfca6b-ad00-4428-a16c-a5dd73bc8cd4", "sourceURL": "https://docs.deno.com/runtime/contributing", "url": "https://docs.deno.com/runtime/contributing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Contributing and support\"?\n\nAssistant: Here are some code examples:\n\n### Cargo Build with HMR\n```yaml\n# cargo build\ncargo build --features hmr\n```\n\n### Cargo Run with HMR\n```yaml\n# cargo run -- run hello.ts\ncargo run --features hmr -- run hello.ts\n```\n\n### Cargo Test with HMR\n```yaml\n# cargo test integration::node_unit_tests::os_test\ncargo test --features hmr integration::node_unit_tests::os_test\n```\n\n### VSCode Settings for HMR\n```yaml\n{\n  \"settings\": {\n    \"rust-analyzer.cargo.features\": [\"hmr\"],\n    // Adds support for resolving internal `ext:*` modules\n    \"deno.importMap\": \"tools/core_import_map.json\"\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing", "title": "Contributing and support", "description": "We welcome and appreciate all contributions to Deno. This page serves as a helper to get you started on contributing.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:01:40", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "ogTitle": "Contributing and support", "og:title": "Contributing and support", "twitter:title": "Contributing and support", "title": "Contributing and support", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:type": "article", "language": "en", "scrapeId": "2dcfca6b-ad00-4428-a16c-a5dd73bc8cd4", "sourceURL": "https://docs.deno.com/runtime/contributing", "url": "https://docs.deno.com/runtime/contributing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Contributing and support\"?\n\nAssistant: Here are the recommended best practices:\n\n• Read the style guide.\n• Please don't make the benchmarks worse.\n• Ask for help in the community chat room.\n• If you are going to work on an issue, mention so in the issue's comments before you start working on the issue.\n• If you are going to work on a new feature, create an issue and discuss with other contributors before you start working on the feature; we appreciate all contributions but not all proposed features will be accepted.\n• Please be professional in the forums.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing", "title": "Contributing and support", "description": "We welcome and appreciate all contributions to Deno. This page serves as a helper to get you started on contributing.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:01:40", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "ogTitle": "Contributing and support", "og:title": "Contributing and support", "twitter:title": "Contributing and support", "title": "Contributing and support", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:type": "article", "language": "en", "scrapeId": "2dcfca6b-ad00-4428-a16c-a5dd73bc8cd4", "sourceURL": "https://docs.deno.com/runtime/contributing", "url": "https://docs.deno.com/runtime/contributing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Write a file server\"?\n\nAssistant: This tutorial demonstrates how to create a simple file server using Deno's built-in file system APIs.\n\nHere's a detailed explanation:\n\n\n## Write a simple File Server\nTo start, create a new file called `file-server.ts`.\n\nWe'll use Deno's built in [HTTP server](https://docs.deno.com/api/deno/~/Deno.serve) to listen for incoming requests. In your new `file-server.ts` file, add the following code:\n\nfile-server.ts\n\n```highlight notranslate ts\nDeno.serve(\n  { hostname: \"localhost\", port: 8080 },\n  (request) => {\n    const url = new URL(request.url);\n    const filepath = decodeURIComponent(url.pathname);\n  },\n);\n```\n\n> If you're not familiar with the `URL` object, you can learn more about it in the [URL API](https://developer.mozilla.org/en-US/docs/Web/API/URL) documentation. The [decodeURIComponent function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) is used to decode the URL-encoded path, in the case that characters have been percent-encoded.)\n\n## Open a file and stream its contents\nWhen a request is received, we'll attempt to open the file specified in the request URL with [`Deno.open`](https://docs.deno.com/api/deno/~/Deno.open).\n\nIf the requested file exists, we'll convert it into a readable stream of data with the [ReadableStream API](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream), and stream its contents to the response. We don't know how large the requested file might be, so streaming it will prevent memory issues when serving large files or multiple requests concurrently.\n\nIf the file does not exist, we'll return a \"404 Not Found\" response.\n\nIn the body of the request handler, below the two variables, add the following code:\n\n```highlight notranslate ts\ntry {\n  const file = await Deno.open(\".\" + filepath, { read: true });\n  return new Response(file.readable);\n} catch {\n  return new Response(\"404 Not Found\", { status: 404 });\n}\n```\n\n## Run the file server\nRun your new file server with the `deno run` command, allowing read access and network access:\n\n```highlight notranslate shell\ndeno run --allow-read=. --allow-net file-server.ts\n```\n\n## Using the file server provided by the Deno Standard Library\nWriting a file server from scratch is a good exercise to understand how Deno's HTTP server works. However, writing production ready file server from scratch can be complex and error-prone. It's better to use a tested and reliable solution.\n\nThe Deno Standard Library provides you with a [file server](https://jsr.io/@std/http/doc/file-server/~) so that you don't have to write your own.\n\nTo use it, first install the remote script to your local file system:\n\n```highlight notranslate shell\n# Deno 1.x\ndeno install --allow-net --allow-read jsr:@std/http/file-server\n# Deno 2.x\ndeno install --global --allow-net --allow-read jsr:@std/http/file-server\n```\n\n> This will install the script to the Deno installation root, e.g. `/home/user/.deno/bin/file-server`.\n\nYou can now run the script with the simplified script name:\n\n```highlight notranslate shell\n$ file-server .\nListening on:\n- Local: http://0.0.0.0:8000\n```\n\nTo see the complete list of options available with the file server, run `file-server --help`.\n\nIf you visit [http://0.0.0.0:8000/](http://0.0.0.0:8000/) in your web browser you will see the contents of your local directory.\n\n## Using the @std/http file server in a Deno project\nTo use the file-server in a [Deno project](https://docs.deno.com/runtime/getting_started/first_project), you can add it to your `deno.json` file with:\n\n```highlight notranslate sh\ndeno add jsr:@std/http\n```\n\nAnd then import it in your project:\n\nfile-server.ts\n\n```highlight notranslate ts\nimport { serveDir } from \"@std/http/file-server\";\n\nDeno.serve((req) => {\n  const pathname = new URL(req.url).pathname;\n  if (pathname.startsWith(\"/static\")) {\n    return serveDir(req, {\n      fsRoot: \"path/to/static/files/dir\",\n    });\n  }\n  return new Response();\n});\n```\n\nThis code will set up an HTTP server with `Deno.serve`. When a request comes in, it checks if the requested path starts with “/static”. If so, it serves files from the specified directory. Otherwise, it responds with an empty response.\n\n🦕 Now you know how to write your own simple file server, and how to use the file-server utility provided by the Deno Standard Library. You're equipped to tackle a whole variety of tasks - whether it’s serving static files, handling uploads, transforming data, or managing access control - you're ready to serve files with Deno.\n", "metadata": {"source_url": "https://docs.deno.com/examples/file_server_tutorial", "title": "Write a file server", "description": "This tutorial demonstrates how to create a simple file server using Deno's built-in file system APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:02:03", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Write a file server", "twitter:title": "Write a file server", "ogImage": "/img/og.webp", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:image": "/img/og.webp", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Write a file server", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:type": "article", "title": "Write a file server", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "42cda409-5124-4352-ae70-72df0aee7227", "sourceURL": "https://docs.deno.com/examples/file_server_tutorial", "url": "https://docs.deno.com/examples/file_server_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Write a file server\"?\n\nAssistant: Here are some code examples:\n\n### Write a simple File Server\n```yaml\nDeno.serve(\n  { hostname: \"localhost\", port: 8080 },\n  (request) => {\n    const url = new URL(request.url);\n    const filepath = decodeURIComponent(url.pathname);\n  },\n);\n```\n\n### Open a file and stream its contents\n```yaml\ntry {\n  const file = await Deno.open(\".\" + filepath, { read: true });\n  return new Response(file.readable);\n} catch {\n  return new Response(\"404 Not Found\", { status: 404 });\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/file_server_tutorial", "title": "Write a file server", "description": "This tutorial demonstrates how to create a simple file server using Deno's built-in file system APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:02:03", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Write a file server", "twitter:title": "Write a file server", "ogImage": "/img/og.webp", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:image": "/img/og.webp", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Write a file server", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:type": "article", "title": "Write a file server", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "42cda409-5124-4352-ae70-72df0aee7227", "sourceURL": "https://docs.deno.com/examples/file_server_tutorial", "url": "https://docs.deno.com/examples/file_server_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Write a file server\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you're not familiar with the `URL` object, you can learn more about it in the URL API documentation.\n• The decodeURIComponent function is used to decode the URL-encoded path, in the case that characters have been percent-encoded.\n• Writing a file server from scratch is a good exercise to understand how Deno's HTTP server works, but it's better to use a tested and reliable solution for production.\n• To see the complete list of options available with the file server, run `file-server --help`.\n", "metadata": {"source_url": "https://docs.deno.com/examples/file_server_tutorial", "title": "Write a file server", "description": "This tutorial demonstrates how to create a simple file server using Deno's built-in file system APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:02:03", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Write a file server", "twitter:title": "Write a file server", "ogImage": "/img/og.webp", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:image": "/img/og.webp", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Write a file server", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:type": "article", "title": "Write a file server", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "42cda409-5124-4352-ae70-72df0aee7227", "sourceURL": "https://docs.deno.com/examples/file_server_tutorial", "url": "https://docs.deno.com/examples/file_server_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Permission management\"?\n\nAssistant: This page covers the Deno permissions API, detailing how to request, query, and revoke permissions in Deno.\n\nHere's a detailed explanation:\n\n\n## Permission Requesting\nIn the most simple case, we can just request a permission by its name. In this case, we ask for --allow-env and prompt the user. The user will not be prompted if it was already allowed in the past and not revoked.\n\n## Synchronous Permission Requesting\nThere are also synchronous versions of all the permission APIs.\n\n## Querying Permissions\nWe can also query permissions without asking for them. In this case, we are querying whether or not we have the read permission. Not only can we query whether we have a permission or not, we can even specify what directories we have permissions in using the path option.\n\n## Revoking Permissions\nIn the case that we no longer need a permission, it is also possible to revoke a process's access to that permission. This is useful when a process starts running untrusted code.\n\n## Running the Example\nRun this example locally using the Deno CLI:\n\n## Additional Resources\n- [Doc: Deno.Permissions](https://docs.deno.com/api/deno/~/Deno.Permissions)\n", "metadata": {"source_url": "https://docs.deno.com/examples/permissions", "title": "Permission management", "description": "This page covers the Deno permissions API, detailing how to request, query, and revoke permissions in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:02:13", "type": "overview", "page_metadata": {"language": "en", "ogSiteName": "Deno", "title": "Permission management", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "og:locale": "en_US", "og:title": "Permission management", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:title": "Permission management", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogTitle": "Permission management", "scrapeId": "ac02ab4d-4950-4129-8fc5-9ae6f74dfe8a", "sourceURL": "https://docs.deno.com/examples/permissions", "url": "https://docs.deno.com/examples/permissions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Permission management\"?\n\nAssistant: Here are some code examples:\n\n### Requesting Permission\n```yaml\nlet status = await Deno.permissions.request({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```\n\n### Synchronous Permission Requesting\n```yaml\nstatus = Deno.permissions.requestSync({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```\n\n### Querying Read Permission\n```yaml\nconst readStatus = await Deno.permissions.query({\n  name: \"read\",\n  path: \"/etc\",\n});\nconsole.log(readStatus.state);\n```\n\n### Revoking Permission\n```yaml\nimport { assert } from \"jsr:@std/assert\";\n\nconst runStatus = await Deno.permissions.revoke({ name: \"run\" });\nassert(runStatus.state !== \"granted\");\n```\n\n### Running the Example\n```yaml\ndeno run https://docs.deno.com/examples/scripts/permissions.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/permissions", "title": "Permission management", "description": "This page covers the Deno permissions API, detailing how to request, query, and revoke permissions in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:02:13", "type": "code_examples", "page_metadata": {"language": "en", "ogSiteName": "Deno", "title": "Permission management", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "og:locale": "en_US", "og:title": "Permission management", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:title": "Permission management", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogTitle": "Permission management", "scrapeId": "ac02ab4d-4950-4129-8fc5-9ae6f74dfe8a", "sourceURL": "https://docs.deno.com/examples/permissions", "url": "https://docs.deno.com/examples/permissions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Permission management\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always check the state of permissions before performing actions that require them.\n• Use the revoke method to ensure that untrusted code does not have access to sensitive permissions.\n", "metadata": {"source_url": "https://docs.deno.com/examples/permissions", "title": "Permission management", "description": "This page covers the Deno permissions API, detailing how to request, query, and revoke permissions in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:02:13", "type": "best_practices", "page_metadata": {"language": "en", "ogSiteName": "Deno", "title": "Permission management", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "og:locale": "en_US", "og:title": "Permission management", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:title": "Permission management", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogTitle": "Permission management", "scrapeId": "ac02ab4d-4950-4129-8fc5-9ae6f74dfe8a", "sourceURL": "https://docs.deno.com/examples/permissions", "url": "https://docs.deno.com/examples/permissions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"TCP connector: Ping\"?\n\nAssistant: An example of connecting to a TCP server on localhost and writing a 'ping' message to the server.\n\nHere's a detailed explanation:\n\n\n## Code Example\nInstantiate an instance of text encoder to write to the TCP stream.\n\n```javascript\nconst encoder = new TextEncoder();\n```\n\nEstablish a connection to our TCP server that is currently being run on localhost port 8080.\n\n```javascript\nconst conn = await Deno.connect({\n  hostname: \"127.0.0.1\",\n  port: 8080,\n  transport: \"tcp\",\n});\n```\n\nEncode the 'ping' message and write to the TCP connection for the server to receive.\n\n```javascript\nawait conn.write(encoder.encode(\"ping\"));\n```\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/tcp_connector.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-net https://docs.deno.com/examples/scripts/tcp_connector.ts\n```\n\n## Additional Resources\n- [Doc: Deno.connect](https://docs.deno.com/api/deno/~/Deno.connect)\n- [Example: TCP Listener](https://docs.deno.com/examples/tcp_listener)\n", "metadata": {"source_url": "https://docs.deno.com/examples/tcp_connector", "title": "TCP connector: Ping", "description": "An example of connecting to a TCP server on localhost and writing a 'ping' message to the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:02:25", "type": "overview", "page_metadata": {"og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "TCP connector: Ping", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "TCP connector: Ping", "ogLocale": "en_US", "twitter:site": "@deno_land", "og:locale": "en_US", "language": "en", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "og:title": "TCP connector: Ping", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "TCP connector: Ping", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "eb32d7ab-3b2d-4e04-b77f-b04c4dc7dc84", "sourceURL": "https://docs.deno.com/examples/tcp_connector", "url": "https://docs.deno.com/examples/tcp_connector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"TCP connector: Ping\"?\n\nAssistant: Here are some code examples:\n\n### Text Encoder Initialization\n```yaml\nconst encoder = new TextEncoder();\n```\n\n### Establish TCP Connection\n```yaml\nconst conn = await Deno.connect({\n  hostname: \"127.0.0.1\",\n  port: 8080,\n  transport: \"tcp\",\n});\n```\n\n### Write Ping Message\n```yaml\nawait conn.write(encoder.encode(\"ping\"));\n```\n\n### Run Example Locally\n```yaml\ndeno run --allow-net https://docs.deno.com/examples/scripts/tcp_connector.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/tcp_connector", "title": "TCP connector: Ping", "description": "An example of connecting to a TCP server on localhost and writing a 'ping' message to the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:02:25", "type": "code_examples", "page_metadata": {"og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "TCP connector: Ping", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "TCP connector: Ping", "ogLocale": "en_US", "twitter:site": "@deno_land", "og:locale": "en_US", "language": "en", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "og:title": "TCP connector: Ping", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "TCP connector: Ping", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "eb32d7ab-3b2d-4e04-b77f-b04c4dc7dc84", "sourceURL": "https://docs.deno.com/examples/tcp_connector", "url": "https://docs.deno.com/examples/tcp_connector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"TCP connector: Ping\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure the TCP server is running on the specified port before executing the client code.\n", "metadata": {"source_url": "https://docs.deno.com/examples/tcp_connector", "title": "TCP connector: Ping", "description": "An example of connecting to a TCP server on localhost and writing a 'ping' message to the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:02:25", "type": "best_practices", "page_metadata": {"og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "TCP connector: Ping", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "TCP connector: Ping", "ogLocale": "en_US", "twitter:site": "@deno_land", "og:locale": "en_US", "language": "en", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "og:title": "TCP connector: Ping", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "TCP connector: Ping", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "eb32d7ab-3b2d-4e04-b77f-b04c4dc7dc84", "sourceURL": "https://docs.deno.com/examples/tcp_connector", "url": "https://docs.deno.com/examples/tcp_connector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Benchmarking with Deno bench\"?\n\nAssistant: This page covers how to benchmark code using Deno's built-in benchmarking tool, Deno bench.\n\nHere's a detailed explanation:\n\n\n## Play\nFind more videos in the [Examples page](https://docs.deno.com/examples/) and on our [YouTube channel](https://www.youtube.com/@deno_land).\n\n## Did you find what you needed?\nYesNo [Edit this page](https://github.com/denoland/docs/edit/main/examples/videos/deno_bench.md)\n", "metadata": {"source_url": "https://docs.deno.com/examples/deno_bench", "title": "Benchmarking with Deno bench", "description": "This page covers how to benchmark code using Deno's built-in benchmarking tool, Deno bench.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:02:47", "type": "overview", "page_metadata": {"og:type": "article", "twitter:image": "/img/og.webp", "og:title": "Benchmarking with Deno bench", "twitter:site": "@deno_land", "twitter:title": "Benchmarking with Deno bench", "language": "en", "title": "Benchmarking with Deno bench", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Benchmarking with Deno bench", "scrapeId": "ec7ada40-6f26-44d9-b936-29a3c463bd5f", "sourceURL": "https://docs.deno.com/examples/deno_bench", "url": "https://docs.deno.com/examples/deno_bench/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Benchmarking with Deno bench\"?\n\nAssistant: Here are the recommended best practices:\n\n• Provide feedback on the documentation to help improve it.\n", "metadata": {"source_url": "https://docs.deno.com/examples/deno_bench", "title": "Benchmarking with Deno bench", "description": "This page covers how to benchmark code using Deno's built-in benchmarking tool, Deno bench.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:02:47", "type": "best_practices", "page_metadata": {"og:type": "article", "twitter:image": "/img/og.webp", "og:title": "Benchmarking with Deno bench", "twitter:site": "@deno_land", "twitter:title": "Benchmarking with Deno bench", "language": "en", "title": "Benchmarking with Deno bench", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Benchmarking with Deno bench", "scrapeId": "ec7ada40-6f26-44d9-b936-29a3c463bd5f", "sourceURL": "https://docs.deno.com/examples/deno_bench", "url": "https://docs.deno.com/examples/deno_bench/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Creating & removing directories\"?\n\nAssistant: Creating and removing directories is a common task. Deno has a number of functions for this task.\n\nHere's a detailed explanation:\n\n\n## Creating Directories\nThe `Deno.mkdir()` function creates a directory at the specified path. If the directory already exists, it errors.\n\n```javascript\nawait Deno.mkdir(\"new_dir\");\n```\n\nA directory can also be created recursively. In the code below, three new directories are created: `./dir`, `./dir/dir2`, and `./dir/dir2/subdir`. If the recursive option is specified the function will not error if any of the directories already exist.\n\n```javascript\nawait Deno.mkdir(\"./dir/dir2/subdir\", { recursive: true });\n```\n\n## Removing Directories\nDirectories can also be removed. This function below removes the `./new_dir` directory. If the directory is not empty, the function will error.\n\n```javascript\nawait Deno.remove(\"./new_dir\");\n```\n\nTo remove a directory recursively, use the `recursive` option. This will remove the `./dir` directory and all of its contents.\n\n```javascript\nawait Deno.remove(\"./dir\", { recursive: true });\n```\n\n## Synchronous Functions\nSynchronous versions of the above functions are also available.\n\n```javascript\nDeno.mkdirSync(\"new_dir\");\nDeno.removeSync(\"new_dir\");\n```\n\n## Permissions\nCreating and removing directories requires the `write` permission.\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/create_remove_directories.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-write https://docs.deno.com/examples/scripts/create_remove_directories.ts\n```\n\n## Additional Resources\n- [Doc: Deno.mkdir](https://docs.deno.com/api/deno/~/Deno.mkdir)\n- [Doc: Deno.remove](https://docs.deno.com/api/deno/~/Deno.remove)\n", "metadata": {"source_url": "https://docs.deno.com/examples/create_remove_directories", "title": "Creating & removing directories", "description": "Creating and removing directories is a common task. Deno has a number of functions for this task.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:03:06", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "Creating & removing directories", "language": "en", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "Creating & removing directories", "twitter:title": "Creating & removing directories", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "title": "Creating & removing directories", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "e53d0d36-f007-4f7e-a573-1e30359edfb1", "sourceURL": "https://docs.deno.com/examples/create_remove_directories", "url": "https://docs.deno.com/examples/create_remove_directories/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Creating & removing directories\"?\n\nAssistant: Here are some code examples:\n\n### Creating a Directory\n```yaml\nawait Deno.mkdir(\"new_dir\");\n```\n\n### Creating Directories Recursively\n```yaml\nawait Deno.mkdir(\"./dir/dir2/subdir\", { recursive: true });\n```\n\n### Removing a Directory\n```yaml\nawait Deno.remove(\"./new_dir\");\n```\n\n### Removing a Directory Recursively\n```yaml\nawait Deno.remove(\"./dir\", { recursive: true });\n```\n\n### Synchronous Directory Creation\n```yaml\nDeno.mkdirSync(\"new_dir\");\n```\n\n### Synchronous Directory Removal\n```yaml\nDeno.removeSync(\"new_dir\");\n```\n\n### Running the Example\n```yaml\ndeno run --allow-write https://docs.deno.com/examples/scripts/create_remove_directories.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/create_remove_directories", "title": "Creating & removing directories", "description": "Creating and removing directories is a common task. Deno has a number of functions for this task.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:03:06", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "Creating & removing directories", "language": "en", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "Creating & removing directories", "twitter:title": "Creating & removing directories", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "title": "Creating & removing directories", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "e53d0d36-f007-4f7e-a573-1e30359edfb1", "sourceURL": "https://docs.deno.com/examples/create_remove_directories", "url": "https://docs.deno.com/examples/create_remove_directories/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Creating & removing directories\"?\n\nAssistant: Here are the recommended best practices:\n\n• Creating and removing directories requires the `write` permission.\n", "metadata": {"source_url": "https://docs.deno.com/examples/create_remove_directories", "title": "Creating & removing directories", "description": "Creating and removing directories is a common task. Deno has a number of functions for this task.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:03:06", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "Creating & removing directories", "language": "en", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:title": "Creating & removing directories", "twitter:title": "Creating & removing directories", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "title": "Creating & removing directories", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "e53d0d36-f007-4f7e-a573-1e30359edfb1", "sourceURL": "https://docs.deno.com/examples/create_remove_directories", "url": "https://docs.deno.com/examples/create_remove_directories/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"TCP/TLS connector: Ping\"?\n\nAssistant: An example of connecting to a TCP server using TLS on localhost and writing a 'ping' message to the server.\n\nHere's a detailed explanation:\n\n\n## Read a CA Certificate from the file system\n```javascript\nconst caCert = await Deno.readTextFile(\"./root.pem\");\n```\n\n## Establish a connection to our TCP server using TLS\n```javascript\nconst conn = await Deno.connectTls({\n  hostname: \"127.0.0.1\",\n  port: 443,\n  caCerts: [caCert],\n});\n```\n\n## Instantiate an instance of text encoder\n```javascript\nconst encoder = new TextEncoder();\n```\n\n## Encode the 'ping' message and write to the TCP connection\n```javascript\nawait conn.write(encoder.encode(\"ping\"));\n```\n\n## Run this example locally using the Deno CLI\n```bash\ndeno run --allow-net --allow-read https://docs.deno.com/examples/scripts/tls_connector.ts\n```\n\n## Additional resources\n- [Doc: Deno.connectTls](https://docs.deno.com/api/deno/~/Deno.connectTls)\n- [Example: TCP/TLS Listener](https://docs.deno.com/examples/tls_listener)\n", "metadata": {"source_url": "https://docs.deno.com/examples/tls_connector", "title": "TCP/TLS connector: Ping", "description": "An example of connecting to a TCP server using TLS on localhost and writing a 'ping' message to the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:03:25", "type": "overview", "page_metadata": {"ogLocale": "en_US", "language": "en", "twitter:card": "summary_large_image", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "TCP/TLS connector: Ping", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "TCP/TLS connector: Ping", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "TCP/TLS connector: Ping", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "og:locale": "en_US", "ogTitle": "TCP/TLS connector: Ping", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "e97d7113-08b6-48ef-b5b7-034e9152a16d", "sourceURL": "https://docs.deno.com/examples/tls_connector", "url": "https://docs.deno.com/examples/tls_connector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"TCP/TLS connector: Ping\"?\n\nAssistant: Here are some code examples:\n\n### Read a CA Certificate from the file system\n```yaml\nconst caCert = await Deno.readTextFile(\"./root.pem\");\n```\n\n### Establish a connection to our TCP server using TLS\n```yaml\nconst conn = await Deno.connectTls({\n  hostname: \"127.0.0.1\",\n  port: 443,\n  caCerts: [caCert],\n});\n```\n\n### Instantiate an instance of text encoder\n```yaml\nconst encoder = new TextEncoder();\n```\n\n### Encode the 'ping' message and write to the TCP connection\n```yaml\nawait conn.write(encoder.encode(\"ping\"));\n```\n\n### Run this example locally using the Deno CLI\n```yaml\ndeno run --allow-net --allow-read https://docs.deno.com/examples/scripts/tls_connector.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/tls_connector", "title": "TCP/TLS connector: Ping", "description": "An example of connecting to a TCP server using TLS on localhost and writing a 'ping' message to the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:03:25", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "language": "en", "twitter:card": "summary_large_image", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "TCP/TLS connector: Ping", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "TCP/TLS connector: Ping", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "TCP/TLS connector: Ping", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "og:locale": "en_US", "ogTitle": "TCP/TLS connector: Ping", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "e97d7113-08b6-48ef-b5b7-034e9152a16d", "sourceURL": "https://docs.deno.com/examples/tls_connector", "url": "https://docs.deno.com/examples/tls_connector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"TCP/TLS connector: Ping\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you remove the custom CA root certificate option, Deno defaults to using Mozilla's root certificates.\n", "metadata": {"source_url": "https://docs.deno.com/examples/tls_connector", "title": "TCP/TLS connector: Ping", "description": "An example of connecting to a TCP server using TLS on localhost and writing a 'ping' message to the server.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:03:25", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "language": "en", "twitter:card": "summary_large_image", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "TCP/TLS connector: Ping", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "TCP/TLS connector: Ping", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "TCP/TLS connector: Ping", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "og:locale": "en_US", "ogTitle": "TCP/TLS connector: Ping", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "e97d7113-08b6-48ef-b5b7-034e9152a16d", "sourceURL": "https://docs.deno.com/examples/tls_connector", "url": "https://docs.deno.com/examples/tls_connector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"How to Deploy Deno to AWS Lambda\"?\n\nAssistant: AWS Lambda is a serverless computing service provided by Amazon Web Services. It allows you to run code without provisioning or managing servers. Here's a step by step guide to deploying a Deno app to AWS Lambda using Docker.\n\nHere's a detailed explanation:\n\n\n## Step 1: Create a Deno App\nCreate a new Deno app using the following code:\n\nmain.ts\n\n```highlight notranslate ts\nDeno.serve((req) => new Response(\"Hello World!\"));\n```\n\nSave this code in a file named `main.ts`.\n\n## Step 2: Create a Dockerfile\nCreate a new file named `Dockerfile` with the following content:\n\n```highlight notranslate Dockerfile\n# Set up the base image\nFROM public.ecr.aws/awsguru/aws-lambda-adapter:0.8.4 AS aws-lambda-adapter\nFROM denoland/deno:bin-1.45.2 AS deno_bin\nFROM debian:bookworm-20230703-slim AS deno_runtime\nCOPY --from=aws-lambda-adapter /lambda-adapter /opt/extensions/lambda-adapter\nCOPY --from=deno_bin /deno /usr/local/bin/deno\nENV PORT=8000\nEXPOSE 8000\nRUN mkdir /var/deno_dir\nENV DENO_DIR=/var/deno_dir\n\n# Copy the function code\nWORKDIR \"/var/task\"\nCOPY . /var/task\n\n# Warmup caches\nRUN timeout 10s deno run -A main.ts || [ $? -eq 124 ] || exit 1\n\nCMD [\"deno\", \"run\", \"-A\", \"main.ts\"]\n```\n\nThis Dockerfile uses the [`aws-lambda-adapter`](https://github.com/awslabs/aws-lambda-web-adapter) project to adapt regular HTTP servers, like Deno's `Deno.serve`, to the AWS Lambda runtime API.\n\nWe also use the `denoland/deno:bin-1.45.2` image to get the Deno binary and `debian:bookworm-20230703-slim` as the base image. The `debian:bookworm-20230703-slim` image is used to keep the image size small.\n\nThe `PORT` environment variable is set to `8000` to tell the AWS Lambda adapter that we are listening on port `8000`.\n\nWe set the `DENO_DIR` environment variable to `/var/deno_dir` to store cached Deno source code and transpiled modules in the `/var/deno_dir` directory.\n\nThe warmup caches step is used to warm up the Deno cache before the function is invoked. This is done to reduce the cold start time of the function. These caches contain the compiled code and dependencies of your function code. This step starts your server for 10 seconds and then exits.\n\nWhen using a package.json, remember to run `deno install` to install `node_modules` from your `package.json` file before warming up the caches or running the function.\n\n## Step 3: Build the Docker Image\nBuild the Docker image using the following command:\n\n```highlight notranslate bash\ndocker build -t hello-world .\n```\n\n## Step 4: Create an ECR Docker repository and push the image\nWith the AWS CLI, create an ECR repository and push the Docker image to it:\n\n```highlight notranslate bash\naws ecr create-repository --repository-name hello-world --region us-east-1 | grep repositoryUri\n```\n\nThis should output a repository URI that looks like `<account_id>.dkr.ecr.us-east-1.amazonaws.com/hello-world`.\n\nAuthenticate Docker with ECR, using the repository URI from the previous step:\n\n```highlight notranslate bash\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <account_id>.dkr.ecr.us-east-1.amazonaws.com\n```\n\nTag the Docker image with the repository URI, again using the repository URI from the previous steps:\n\n```highlight notranslate bash\ndocker tag hello-world:latest <account_id>.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest\n```\n\nFinally, push the Docker image to the ECR repository, using the repository URI from the previous steps:\n\n```highlight notranslate bash\ndocker push <account_id>.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest\n```\n\n## Step 5: Create an AWS Lambda function\nNow you can create a new AWS Lambda function from the AWS Management Console.\n\n01. Go to the AWS Management Console and [navigate to the Lambda service](https://us-east-1.console.aws.amazon.com/lambda/home?region=us-east-1).\n02. Click on the \"Create function\" button.\n03. Choose \"Container image\".\n04. Enter a name for the function, like \"hello-world\".\n05. Click on the \"Browse images\" button and select the image you pushed to ECR.\n06. Click on the \"Create function\" button.\n07. Wait for the function to be created.\n08. In the \"Configuration\" tab, go to the \"Function URL\" section and click on \"Create function URL\".\n09. Choose \"NONE\" for the auth type (this will make the lambda function publicly accessible).\n10. Click on the \"Save\" button.\n\n## Step 6: Test the Lambda function\nYou can now visit your Lambda function's URL to see the response from your Deno app.\n\n🦕 You have successfully deployed a Deno app to AWS Lambda using Docker. You can now use this setup to deploy more complex Deno apps to AWS Lambda.\n", "metadata": {"source_url": "https://docs.deno.com/examples/aws_lambda_tutorial", "title": "How to Deploy Deno to AWS Lambda", "description": "AWS Lambda is a serverless computing service provided by Amazon Web Services. It allows you to run code without provisioning or managing servers. Here's a step by step guide to deploying a Deno app to AWS Lambda using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:03:51", "type": "overview", "page_metadata": {"og:title": "How to Deploy Deno to AWS Lambda", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "title": "How to Deploy Deno to AWS Lambda", "language": "en", "twitter:site": "@deno_land", "twitter:title": "How to Deploy Deno to AWS Lambda", "og:type": "article", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "How to Deploy Deno to AWS Lambda", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "22cc63ea-d90b-4272-9327-15f791d84490", "sourceURL": "https://docs.deno.com/examples/aws_lambda_tutorial", "url": "https://docs.deno.com/examples/aws_lambda_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"How to Deploy Deno to AWS Lambda\"?\n\nAssistant: Here are some code examples:\n\n### Create a Deno App\n```yaml\nDeno.serve((req) => new Response(\"Hello World!\"));\n```\n\n### Dockerfile\n```yaml\n# Set up the base image\nFROM public.ecr.aws/awsguru/aws-lambda-adapter:0.8.4 AS aws-lambda-adapter\nFROM denoland/deno:bin-1.45.2 AS deno_bin\nFROM debian:bookworm-20230703-slim AS deno_runtime\nCOPY --from=aws-lambda-adapter /lambda-adapter /opt/extensions/lambda-adapter\nCOPY --from=deno_bin /deno /usr/local/bin/deno\nENV PORT=8000\nEXPOSE 8000\nRUN mkdir /var/deno_dir\nENV DENO_DIR=/var/deno_dir\n\n# Copy the function code\nWORKDIR \"/var/task\"\nCOPY . /var/task\n\n# Warmup caches\nRUN timeout 10s deno run -A main.ts || [ $? -eq 124 ] || exit 1\n\nCMD [\"deno\", \"run\", \"-A\", \"main.ts\"]\n```\n\n### Build the Docker Image\n```yaml\ndocker build -t hello-world .\n```\n\n### Create ECR Repository\n```yaml\naws ecr create-repository --repository-name hello-world --region us-east-1 | grep repositoryUri\n```\n\n### Authenticate Docker with ECR\n```yaml\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <account_id>.dkr.ecr.us-east-1.amazonaws.com\n```\n\n### Tag Docker Image\n```yaml\ndocker tag hello-world:latest <account_id>.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest\n```\n\n### Push Docker Image to ECR\n```yaml\ndocker push <account_id>.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/aws_lambda_tutorial", "title": "How to Deploy Deno to AWS Lambda", "description": "AWS Lambda is a serverless computing service provided by Amazon Web Services. It allows you to run code without provisioning or managing servers. Here's a step by step guide to deploying a Deno app to AWS Lambda using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:03:51", "type": "code_examples", "page_metadata": {"og:title": "How to Deploy Deno to AWS Lambda", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "title": "How to Deploy Deno to AWS Lambda", "language": "en", "twitter:site": "@deno_land", "twitter:title": "How to Deploy Deno to AWS Lambda", "og:type": "article", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "How to Deploy Deno to AWS Lambda", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "22cc63ea-d90b-4272-9327-15f791d84490", "sourceURL": "https://docs.deno.com/examples/aws_lambda_tutorial", "url": "https://docs.deno.com/examples/aws_lambda_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"How to Deploy Deno to AWS Lambda\"?\n\nAssistant: Here are the recommended best practices:\n\n• When using a package.json, remember to run `deno install` to install `node_modules` from your `package.json` file before warming up the caches or running the function.\n", "metadata": {"source_url": "https://docs.deno.com/examples/aws_lambda_tutorial", "title": "How to Deploy Deno to AWS Lambda", "description": "AWS Lambda is a serverless computing service provided by Amazon Web Services. It allows you to run code without provisioning or managing servers. Here's a step by step guide to deploying a Deno app to AWS Lambda using Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:03:51", "type": "best_practices", "page_metadata": {"og:title": "How to Deploy Deno to AWS Lambda", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "title": "How to Deploy Deno to AWS Lambda", "language": "en", "twitter:site": "@deno_land", "twitter:title": "How to Deploy Deno to AWS Lambda", "og:type": "article", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "How to Deploy Deno to AWS Lambda", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "22cc63ea-d90b-4272-9327-15f791d84490", "sourceURL": "https://docs.deno.com/examples/aws_lambda_tutorial", "url": "https://docs.deno.com/examples/aws_lambda_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Manipulating & parsing URLs\"?\n\nAssistant: URL is the web standard interface to parse and manipulate URLs.\n\nHere's a detailed explanation:\n\n\n## Introduction\nURL is the web standard interface to parse and manipulate URLs.\n\n## Creating a URL object\nWe can create a new object in a variety of ways. In the most simple case we can simply just write the whole url.\n\n```javascript\nlet url = new URL(\"https://deno.land/manual/introduction\");\n```\n\nAlternatively we are able to pass a (relative) url which will be automatically resolved to an absolute url.\n\n```javascript\nurl = new URL(\"/manual/introduction\", \"https://deno.land\");\n```\n\n## Accessing URL properties\nTo get the full url out of an object, we can check the href property.\n\n```javascript\nconsole.log(url.href); // https://deno.land/manual/introduction\n```\n\nWe are also able to get various other properties from the url. Here are a few examples of properties we have access to.\n\n```javascript\nconsole.log(url.host); // deno.land\nconsole.log(url.origin); // https://deno.land\nconsole.log(url.pathname); // /manual/introduction\nconsole.log(url.protocol); // https:\n```\n\n## Reading search parameters\nWhen parsing a url we often need to read the search parameters.\n\n```javascript\nurl = new URL(\"https://docs.deno.com/api/deno?s=Deno.readFile\");\n\nconsole.log(url.searchParams.get(\"s\")); // Deno.readFile\n```\n\n## Manipulating URL parameters\nWe're able to manipulate any of these parameters on the fly.\n\n```javascript\nurl.host = \"deno.com\";\nurl.protocol = \"http:\";\n\nconsole.log(url.href); // http://deno.com/api?s=Deno.readFile\n```\n\n## Running the example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/url_parsing.ts) locally using the Deno CLI:\n\n```bash\ndeno run https://docs.deno.com/examples/scripts/url_parsing.ts\n```\n\n## Additional resources\n- [MDN: URL](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n", "metadata": {"source_url": "https://docs.deno.com/examples/url_parsing", "title": "Manipulating & parsing URLs", "description": "URL is the web standard interface to parse and manipulate URLs.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:04:04", "type": "overview", "page_metadata": {"og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Manipulating & parsing URLs", "ogLocale": "en_US", "ogTitle": "Manipulating & parsing URLs", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "title": "Manipulating & parsing URLs", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Manipulating & parsing URLs", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "scrapeId": "fd11c9df-cb24-4477-9273-e3f7b62ba2ad", "sourceURL": "https://docs.deno.com/examples/url_parsing", "url": "https://docs.deno.com/examples/url_parsing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Manipulating & parsing URLs\"?\n\nAssistant: Here are some code examples:\n\n### Creating a URL object\n```yaml\nlet url = new URL(\"https://deno.land/manual/introduction\");\n```\n\n### Creating a URL with a relative path\n```yaml\nurl = new URL(\"/manual/introduction\", \"https://deno.land\");\n```\n\n### Accessing URL properties\n```yaml\nconsole.log(url.href); // https://deno.land/manual/introduction\nconsole.log(url.host); // deno.land\nconsole.log(url.origin); // https://deno.land\nconsole.log(url.pathname); // /manual/introduction\nconsole.log(url.protocol); // https:\n```\n\n### Reading search parameters\n```yaml\nurl = new URL(\"https://docs.deno.com/api/deno?s=Deno.readFile\");\nconsole.log(url.searchParams.get(\"s\")); // Deno.readFile\n```\n\n### Manipulating URL parameters\n```yaml\nurl.host = \"deno.com\";\nurl.protocol = \"http:\";\nconsole.log(url.href); // http://deno.com/api?s=Deno.readFile\n```\n\n### Running the example\n```yaml\ndeno run https://docs.deno.com/examples/scripts/url_parsing.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/url_parsing", "title": "Manipulating & parsing URLs", "description": "URL is the web standard interface to parse and manipulate URLs.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:04:04", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Manipulating & parsing URLs", "ogLocale": "en_US", "ogTitle": "Manipulating & parsing URLs", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "title": "Manipulating & parsing URLs", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Manipulating & parsing URLs", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "scrapeId": "fd11c9df-cb24-4477-9273-e3f7b62ba2ad", "sourceURL": "https://docs.deno.com/examples/url_parsing", "url": "https://docs.deno.com/examples/url_parsing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Manipulating & parsing URLs\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the URL constructor to create URL objects for better manipulation and parsing.\n• Always check the properties of the URL object to access different parts of the URL easily.\n• When working with search parameters, utilize the searchParams property for easy access and manipulation.\n", "metadata": {"source_url": "https://docs.deno.com/examples/url_parsing", "title": "Manipulating & parsing URLs", "description": "URL is the web standard interface to parse and manipulate URLs.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:04:04", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Manipulating & parsing URLs", "ogLocale": "en_US", "ogTitle": "Manipulating & parsing URLs", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "title": "Manipulating & parsing URLs", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Manipulating & parsing URLs", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "scrapeId": "fd11c9df-cb24-4477-9273-e3f7b62ba2ad", "sourceURL": "https://docs.deno.com/examples/url_parsing", "url": "https://docs.deno.com/examples/url_parsing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build a Nuxt app with Deno\"?\n\nAssistant: This tutorial covers how to build a simple Nuxt application with Deno that displays a list of dinosaurs and allows users to learn more about each one.\n\nHere's a detailed explanation:\n\n\n## Scaffold a Nuxt app with Deno\nWe can create a new Nuxt project using deno like this:\n\n```highlight notranslate bash\ndeno -A npm:nuxi@latest init\n```\n\nWe'll use Deno to manage our package dependencies, and can grab the Nuxt package from npm. This will create a nuxt-app with this project structure:\n\n```\nNUXT-APP/\n├── .nuxt/                   # Nuxt build directory\n├── node_modules/           # Node.js dependencies\n├── public/                 # Static files\n│   ├── favicon.ico\n│   └── robots.txt\n├── server/                # Server-side code\n│   └── tsconfig.json\n├── .gitignore\n├── app.vue               # Root Vue component\n├── nuxt.config.ts        # Nuxt configuration\n├── package-lock.json     # NPM lock file\n├── package.json          # Project manifest\n├── README.md\n└── tsconfig.json        # TypeScript configuration\n```\n\n## Setup server API routes\nLet’s first start by creating the API routes that serve the dinosaur data.\n\nFirst, our [dinosaur data](https://github.com/denoland/examples/blob/main/with-nuxt/server/api/data.json) will live within the server directory as `server/api/data.json`:\n\n```highlight notranslate json\n// server/api/data.json\n\n[\\\n  {\\\n    \"name\": \"Aardonyx\",\\\n    \"description\": \"An early stage in the evolution of sauropods.\"\\\n  },\\\n  {\\\n    \"name\": \"Abelisaurus\",\\\n    \"description\": \"\\\"Abel's lizard\\\" has been reconstructed from a single skull.\"\\\n  },\\\n  {\\\n    \"name\": \"Abrictosaurus\",\\\n    \"description\": \"An early relative of Heterodontosaurus.\"\\\n  },\\\n  ...\\\n]\n```\n\nThis is where our data will be pulled from. In a full application, this data would come from a database.\n\n> ⚠️️ In this tutorial we hard code the data. But you can connect to [a variety of databases](https://docs.deno.com/runtime/tutorials/connecting_to_databases/) and [even use ORMs like Prisma](https://docs.deno.com/runtime/tutorials/how_to_with_npm/prisma/) with Deno.\n\nNext, let’s add type definitions for our dinosaur data. We’ll put it in a new folder, `types`:\n\n```highlight notranslate tsx\n// types/index.ts\n\nexport interface Dino {\n  name: string;\n  description: string;\n}\n```\n\nWe’ll create two API routes to serve the following:\n\n- the full list of dinosaurs for an index page\n- individual dinosaur information for an individual dinosaur page\n\nBoth will be `*.get.ts` files, which Nuxt automatically converts to API endpoints to respond to GET requests.\n[The filename convention determines both the HTTP method and the route path](https://nuxt.com/docs/guide/directory-structure/server#matching-http-method).\n\nThe initial `dinosaurs.get.ts` is fairly simple and uses [`defineCachedEventHandler`](https://nitro.build/guide/cache) to create a cached endpoint for better performance. This handler simply returns our full dinosaur data array without any filtering:\n\n```highlight notranslate tsx\n// server/api/dinosaurs.get.ts\n\nimport data from \"./data.json\" with { type: \"json\" };\n\nexport default defineCachedEventHandler(() => {\n  return data;\n});\n```\n\nThe `GET` route for the individual dinosaur has a little more logic. It extracts the name parameter from the event context, performs case-insensitive matching to find the requested dinosaur, and includes proper error handling for missing or invalid dinosaur names. To pass the name parameter, let’s name this route as `[name].get.ts`:\n\n```highlight notranslate tsx\n// server/api/dinosaurs/[name].get.ts\n\nimport data from \"../data.json\";\n\nexport default defineCachedEventHandler((event) => {\n  const name = getRouterParam(event, \"name\");\n\n  if (!name) {\n    throw createError({\n      statusCode: 400,\n      message: \"No dinosaur name provided\",\n    });\n  }\n\n  const dinosaur = data.find(\n    (dino) => dino.name.toLowerCase() === name.toLowerCase(),\n  );\n\n  if (!dinosaur) {\n    throw createError({\n      statusCode: 404,\n      message: \"Dinosaur not found\",\n    });\n  }\n\n  return dinosaur;\n});\n```\n\nAwesome. When we run the server with `deno task dev` and point our browser to `localhost:3000/api/dinosaurs`, we can see the raw JSON response showing all of the dinosaurs:\n\n![Setting up API](https://docs.deno.com/examples/tutorials/images/how-to/nuxt/nuxt-1.webp)\n\nYou can also retrieve data for a single dinosaur by going to `localhost:3000/api/dinosaurs/aardonyx`.\n\n![Setting up API](https://docs.deno.com/examples/tutorials/images/how-to/nuxt/nuxt-2.webp)\n\nNext, let’s setup the frontend with Vue to display the index page and each individual dinosaur page.\n\n## Setup Vue frontend\nWe want to set up two pages within our app:\n\n- An index page which will list all our dinosaurs\n- An individual dinosaur page showing more information about our selected dinosaur.\n\nLet’s first create the index page. Since Nuxt uses [file-system routing](https://nuxt.com/docs/getting-started/routing), let’s create a `pages` directory and within that, our index page at `pages/index.vue`. To get the data, we’ll use the `useFetch` composable to hit the API endpoint we created in the previous section:\n\n```highlight notranslate tsx\n// pages/index.vue\n\n<script setup lang=\"ts\">\nconst { data: dinosaurs } = await useFetch(\"/api/dinosaurs\");\n</script>\n\n<template>\n  <main>\n    <h1 class=\"text-2xl font-bold mb-4\">Welcome to the Dinosaur app</h1>\n    <p class=\"mb-4\">Click on a dinosaur below to learn more.</p>\n    <ul class=\"space-y-2\">\n      <li v-for=\"dinosaur in dinosaurs\" :key=\"dinosaur.name\">\n        <NuxtLink\n          :to=\"'/' + dinosaur.name.toLowerCase()\"\n          class=\"text-blue-600 hover:text-blue-800 hover:underline\"\n        >\n          {{ dinosaur.name }}\n        </NuxtLink>\n      </li>\n    </ul>\n  </main>\n</template>\n```\n\nFor our next page that shows information for each dinosaur, let’s create a dynamic page: `pages/[name].vue`. This page uses Nuxt's [dynamic route parameters](https://nuxt.com/docs/getting-started/routing#route-parameters), where the `[name]` in the filename can be accessed in JavaScript as `route.params.name`. We’ll use the `useRoute` composable to access the route parameters and `useFetch` to get the specific dinosaur's data based on the name parameter:\n\n```highlight notranslate tsx\n// pages/[name].vue\n\n<script setup lang=\"ts\">\nconst route = useRoute();\nconst { data: dinosaur } = await useFetch(\n  `/api/dinosaurs/${route.params.name}`\n);\n</script>\n\n<template>\n  <main v-if=\"dinosaur\">\n    <h1 class=\"text-2xl font-bold mb-4\">{{ dinosaur.name }}</h1>\n    <p class=\"mb-4\">{{ dinosaur.description }}</p>\n    <NuxtLink to=\"/\" class=\"text-blue-600 hover:text-blue-800 hover:underline\">\n      Back to all dinosaurs\n    </NuxtLink>\n  </main>\n</template>\n```\n\nNext, we’ll have to connect these Vue components together so that they render properly when we visit the root of the domain. Let’s update `app.vue` at the root of the directory to serve our application’s root component. We’ll use [`NuxtLayout`](https://nuxt.com/docs/api/components/nuxt-layout) for consistent page structure and [`NuxtPage`](https://nuxt.com/docs/api/components/nuxt-page) for dynamic page rendering:\n\n```highlight notranslate tsx\n// app.vue\n\n<template>\n  <NuxtLayout>\n    <div>\n      <nav class=\"p-4 bg-gray-100\">\n        <NuxtLink to=\"/\" class=\"text-blue-600 hover:text-blue-800\">\n          Dinosaur Encyclopedia\n        </NuxtLink>\n      </nav>\n\n      <div class=\"container mx-auto p-4\">\n        <NuxtPage />\n      </div>\n    </div>\n  </NuxtLayout>\n</template>;\n```\n\nLet’s run our server with `deno task dev` and see how it looks at `localhost:3000`:\n\nLooks great!\n\n## Add Tailwind\nLike we said, we're going to add a little bit of styling to this application. First, we'll set up a layout which will provide a consistent structure across all pages using Nuxt's layout system with [slot-based](https://vuejs.org/guide/components/slots) content injection:\n\n```highlight notranslate tsx\n// layouts/default.vue\n\n<template>\n  <div>\n    <slot />\n  </div>\n</template>;\n```\n\nIn this project, we’re also going to use [tailwind](https://tailwindcss.com/) for some basic design, so we need to install those dependencies:\n\n```highlight notranslate bash\ndeno install -D npm:tailwindcss npm:postcss npm:autoprefixer\n```\n\nThen initialize Tailwind:\n\n```highlight notranslate bash\ndeno -A npm:tailwindcss init\n```\n\nThis will create a `tailwind.config.js` file in the root of our directory. Let’s open that up and update the `content` section to include key files in our project:\n\n```highlight notranslate tsx\n// tailwind.config.js\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\\\n    \"./components/**/*.{js,vue,ts}\",\\\n    \"./layouts/**/*.vue\",\\\n    \"./pages/**/*.vue\",\\\n    \"./plugins/**/*.{js,ts}\",\\\n    \"./app.vue\",\\\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\nNext, let’s add the tailwind utilities to a new css file, `assets/css/main.css`:\n\n```highlight notranslate tsx\n// assets/css/main.css\n\nbase;\ncomponents;\nutilities;\n```\n\nThe only other thing we'll need to do is update our `nuxt.config.ts` file to configure our Nuxt application for Deno compatibility, enable development tools, and set up Tailwind CSS.\n\n```highlight notranslate tsx\n// nuxt.config.ts\n\nimport { defineNuxtConfig } from \"nuxt/config\";\n\nexport default defineNuxtConfig({\n  devtools: { enabled: true },\n\n  nitro: {\n    preset: \"deno\",\n  },\n\n  app: {\n    head: {\n      title: \"Dinosaur Encyclopedia\",\n    },\n  },\n\n  css: [\"~/assets/css/main.css\"],\n\n  postcss: {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {},\n    },\n  },\n\n  compatibilityDate: \"2024-11-06\",\n});\n```\n\n## Running Our Application\nWe can then run our application using:\n\n```highlight notranslate bash\ndeno task dev\n```\n\nThis will start the app at localhost:3000:\n\nAnd we’re done!\n\n## Next steps\nNext steps for a Nuxt app might be to add authentication using the [Nuxt Auth](https://auth.nuxtjs.org/) module, implement state management with [Pinia](https://pinia.vuejs.org/), add server-side data persistence with [Prisma](https://docs.deno.com/examples/prisma_tutorial/) or [MongoDB](https://docs.deno.com/examples/mongoose_tutorial/), and set up automated testing with Vitest. These features would make it production-ready for larger applications.\n", "metadata": {"source_url": "https://docs.deno.com/examples/nuxt_tutorial", "title": "Build a Nuxt app with Deno", "description": "This tutorial covers how to build a simple Nuxt application with Deno that displays a list of dinosaurs and allows users to learn more about each one.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:05:02", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "og:title": "Build a Nuxt app with Deno", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "Build a Nuxt app with Deno", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "ogTitle": "Build a Nuxt app with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Build a Nuxt app with Deno", "language": "en", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "a533cb07-1d75-4273-838a-125dc19f7258", "sourceURL": "https://docs.deno.com/examples/nuxt_tutorial", "url": "https://docs.deno.com/examples/nuxt_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Build a Nuxt app with Deno\"?\n\nAssistant: Here are some code examples:\n\n### Scaffold a Nuxt app with Deno\n```yaml\ndeno -A npm:nuxi@latest init\n```\n\n### Dinosaur Data JSON\n```yaml\n// server/api/data.json\n\n[\\\n  {\\\n    \"name\": \"Aardonyx\",\\\n    \"description\": \"An early stage in the evolution of sauropods.\"\\\n  },\\\n  {\\\n    \"name\": \"Abelisaurus\",\\\n    \"description\": \"\\\"Abel's lizard\\\" has been reconstructed from a single skull.\"\\\n  },\\\n  {\\\n    \"name\": \"Abrictosaurus\",\\\n    \"description\": \"An early relative of Heterodontosaurus.\"\\\n  },\\\n  ...\\\n]\n```\n\n### Type Definitions for Dinosaur Data\n```yaml\n// types/index.ts\n\nexport interface Dino {\n  name: string;\n  description: string;\n}\n```\n\n### API Route for All Dinosaurs\n```yaml\n// server/api/dinosaurs.get.ts\n\nimport data from \"./data.json\" with { type: \"json\" };\n\nexport default defineCachedEventHandler(() => {\n  return data;\n});\n```\n\n### API Route for Individual Dinosaur\n```yaml\n// server/api/dinosaurs/[name].get.ts\n\nimport data from \"../data.json\";\n\nexport default defineCachedEventHandler((event) => {\n  const name = getRouterParam(event, \"name\");\n\n  if (!name) {\n    throw createError({\n      statusCode: 400,\n      message: \"No dinosaur name provided\",\n    });\n  }\n\n  const dinosaur = data.find(\n    (dino) => dino.name.toLowerCase() === name.toLowerCase(),\n  );\n\n  if (!dinosaur) {\n    throw createError({\n      statusCode: 404,\n      message: \"Dinosaur not found\",\n    });\n  }\n\n  return dinosaur;\n});\n```\n\n### Index Page for Dinosaurs\n```yaml\n// pages/index.vue\n\n<script setup lang=\"ts\">\nconst { data: dinosaurs } = await useFetch(\"/api/dinosaurs\");\n</script>\n\n<template>\n  <main>\n    <h1 class=\"text-2xl font-bold mb-4\">Welcome to the Dinosaur app</h1>\n    <p class=\"mb-4\">Click on a dinosaur below to learn more.</p>\n    <ul class=\"space-y-2\">\n      <li v-for=\"dinosaur in dinosaurs\" :key=\"dinosaur.name\">\n        <NuxtLink\n          :to=\"'/' + dinosaur.name.toLowerCase()\"\n          class=\"text-blue-600 hover:text-blue-800 hover:underline\"\n        >\n          {{ dinosaur.name }}\n        </NuxtLink>\n      </li>\n    </ul>\n  </main>\n</template>\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/nuxt_tutorial", "title": "Build a Nuxt app with Deno", "description": "This tutorial covers how to build a simple Nuxt application with Deno that displays a list of dinosaurs and allows users to learn more about each one.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:05:02", "type": "code_examples", "page_metadata": {"ogImage": "/img/og.webp", "og:title": "Build a Nuxt app with Deno", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "Build a Nuxt app with Deno", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "ogTitle": "Build a Nuxt app with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Build a Nuxt app with Deno", "language": "en", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "a533cb07-1d75-4273-838a-125dc19f7258", "sourceURL": "https://docs.deno.com/examples/nuxt_tutorial", "url": "https://docs.deno.com/examples/nuxt_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Build a Nuxt app with Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• In this tutorial we hard code the data. But you can connect to a variety of databases and even use ORMs like Prisma with Deno.\n• The filename convention determines both the HTTP method and the route path in Nuxt.\n• Use Nuxt's layout system for consistent page structure across all pages.\n", "metadata": {"source_url": "https://docs.deno.com/examples/nuxt_tutorial", "title": "Build a Nuxt app with Deno", "description": "This tutorial covers how to build a simple Nuxt application with Deno that displays a list of dinosaurs and allows users to learn more about each one.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:05:02", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "og:title": "Build a Nuxt app with Deno", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "Build a Nuxt app with Deno", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "ogTitle": "Build a Nuxt app with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Build a Nuxt app with Deno", "language": "en", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "a533cb07-1d75-4273-838a-125dc19f7258", "sourceURL": "https://docs.deno.com/examples/nuxt_tutorial", "url": "https://docs.deno.com/examples/nuxt_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Hashing\"?\n\nAssistant: Hashing data is a common operation that is facilitated through Deno's support for the Web Crypto API. In addition, the Deno Standard Library's implementation extends the standard API, allowing for more advanced uses.\n\nHere's a detailed explanation:\n\n\n## Hashing a String\nIn our first example, we'll hash the contents of a string variable.\n\n```javascript\nconst message = \"The easiest, most secure JavaScript runtime.\";\n```\n\nBefore we can pass our message to the hashing function, we first need to encode it into a uint8 array.\n\n```javascript\nconst messageBuffer = new TextEncoder().encode(message);\n```\n\nHere, we use the built-in crypto.subtle.digest method to hash our original message. The hash is returned as an ArrayBuffer. To obtain a string we'll need to do a little more work.\n\n```javascript\nconst hashBuffer = await crypto.subtle.digest(\"SHA-256\", messageBuffer);\n```\n\nWe can decode this into a string using the standard library's encodeHex method.\n\n```javascript\nimport { encodeHex } from \"jsr:@std/encoding/hex\";\nconst hash = encodeHex(hashBuffer);\nconsole.log(hash);\n```\n\n## Hashing a File\nFor our second example, we'll hash the contents of a file. Hashing a file is a common operation and doing this without loading the whole file into memory is a typical requirement.\n\nThe standard library has extensions to the Web Crypto API that are useful when doing things like hashing a file. These can be accessed through the \"crypto\" module, a drop-in replacement for the Web Crypto API that delegates to the native implementation when possible.\n\n```javascript\nimport { crypto } from \"jsr:@std/crypto\";\nconst file = await Deno.open(\"example.txt\", { read: true });\n```\n\nWe obtain an async iterable using the readable property.\n\n```javascript\nconst readableStream = file.readable;\n```\n\nThis time, when we call crypto.subtle.digest, we're using the imported version that allows us to operate on the async iterable.\n\n```javascript\nconst fileHashBuffer = await crypto.subtle.digest(\"SHA-256\", readableStream);\n```\n\nFinally, we obtain the hex result using encodeHex like earlier.\n\n```javascript\nconst fileHash = encodeHex(fileHashBuffer);\nconsole.log(fileHash);\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/hashing.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-read https://docs.deno.com/examples/scripts/hashing.ts\n```\n\n## Additional Resources\n- [Doc: crypto.subtle](https://docs.deno.com/api/web/~/SubtleCrypto)\n- [MDN: Cryptographic Digests](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest)\n", "metadata": {"source_url": "https://docs.deno.com/examples/hashing", "title": "Hashing", "description": "Hashing data is a common operation that is facilitated through Deno's support for the Web Crypto API. In addition, the Deno Standard Library's implementation extends the standard API, allowing for more advanced uses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:05:26", "type": "overview", "page_metadata": {"og:locale": "en_US", "twitter:title": "Hashing", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogLocale": "en_US", "og:title": "Hashing", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Hashing", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Hashing", "og:type": "article", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "d8a7ef0a-9456-4ba2-a200-4f2cb8d7af5e", "sourceURL": "https://docs.deno.com/examples/hashing", "url": "https://docs.deno.com/examples/hashing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Hashing\"?\n\nAssistant: Here are some code examples:\n\n### Hashing a String Example\n```yaml\nconst message = \"The easiest, most secure JavaScript runtime.\";\nconst messageBuffer = new TextEncoder().encode(message);\nconst hashBuffer = await crypto.subtle.digest(\"SHA-256\", messageBuffer);\nimport { encodeHex } from \"jsr:@std/encoding/hex\";\nconst hash = encodeHex(hashBuffer);\nconsole.log(hash);\n```\n\n### Hashing a File Example\n```yaml\nimport { crypto } from \"jsr:@std/crypto\";\nconst file = await Deno.open(\"example.txt\", { read: true });\nconst readableStream = file.readable;\nconst fileHashBuffer = await crypto.subtle.digest(\"SHA-256\", readableStream);\nconst fileHash = encodeHex(fileHashBuffer);\nconsole.log(fileHash);\n```\n\n### Running the Example\n```yaml\ndeno run --allow-read https://docs.deno.com/examples/scripts/hashing.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/hashing", "title": "Hashing", "description": "Hashing data is a common operation that is facilitated through Deno's support for the Web Crypto API. In addition, the Deno Standard Library's implementation extends the standard API, allowing for more advanced uses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:05:26", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "twitter:title": "Hashing", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogLocale": "en_US", "og:title": "Hashing", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Hashing", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Hashing", "og:type": "article", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "d8a7ef0a-9456-4ba2-a200-4f2cb8d7af5e", "sourceURL": "https://docs.deno.com/examples/hashing", "url": "https://docs.deno.com/examples/hashing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Hashing\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the Web Crypto API for secure hashing operations.\n• When hashing files, consider using async iterables to avoid loading the entire file into memory.\n", "metadata": {"source_url": "https://docs.deno.com/examples/hashing", "title": "Hashing", "description": "Hashing data is a common operation that is facilitated through Deno's support for the Web Crypto API. In addition, the Deno Standard Library's implementation extends the standard API, allowing for more advanced uses.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:05:26", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "twitter:title": "Hashing", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogLocale": "en_US", "og:title": "Hashing", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Hashing", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Hashing", "og:type": "article", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "d8a7ef0a-9456-4ba2-a200-4f2cb8d7af5e", "sourceURL": "https://docs.deno.com/examples/hashing", "url": "https://docs.deno.com/examples/hashing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Use Node.js built-in modules\"?\n\nAssistant: Deno supports most built-in Node.js modules natively - you can include them in your code using \"node:\" specifiers in your imports.\n\nHere's a detailed explanation:\n\n\n## Importing the os module\nImport the os module from core Node to get operating system info\n\n```javascript\nimport os from \"node:os\";\n```\n\n## Using the os module\nUse the module as you would in Node.js\n\n```javascript\nconsole.log(\"Current architecture is:\", os.arch());\nconsole.log(\"Home directory is:\", os.homedir());\n```\n\n## Running the example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/node_built_in.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-env https://docs.deno.com/examples/scripts/node_built_in.ts\n```\n\n## Additional resources\n- [Node.js / npm support in Deno](https://docs.deno.com/runtime/fundamentals/node)\n- [node: specifiers](https://docs.deno.com/runtime/fundamentals/node/#node_specifiers)\n", "metadata": {"source_url": "https://docs.deno.com/examples/node_built_in", "title": "Use Node.js built-in modules", "description": "Deno supports most built-in Node.js modules natively - you can include them in your code using \"node:\" specifiers in your imports.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:05:36", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "ogLocale": "en_US", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogTitle": "Use Node.js built-in modules", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Use Node.js built-in modules", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Use Node.js built-in modules", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Use Node.js built-in modules", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "scrapeId": "51c4d00f-c788-4131-8091-c47061f39da8", "sourceURL": "https://docs.deno.com/examples/node_built_in", "url": "https://docs.deno.com/examples/node_built_in/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Use Node.js built-in modules\"?\n\nAssistant: Here are some code examples:\n\n### Importing the os module\n```yaml\nimport os from \"node:os\";\n```\n\n### Using the os module\n```yaml\nconsole.log(\"Current architecture is:\", os.arch());\nconsole.log(\"Home directory is:\", os.homedir());\n```\n\n### Running the example\n```yaml\ndeno run --allow-env https://docs.deno.com/examples/scripts/node_built_in.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/node_built_in", "title": "Use Node.js built-in modules", "description": "Deno supports most built-in Node.js modules natively - you can include them in your code using \"node:\" specifiers in your imports.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:05:36", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "ogLocale": "en_US", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogTitle": "Use Node.js built-in modules", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Use Node.js built-in modules", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Use Node.js built-in modules", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Use Node.js built-in modules", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "scrapeId": "51c4d00f-c788-4131-8091-c47061f39da8", "sourceURL": "https://docs.deno.com/examples/node_built_in", "url": "https://docs.deno.com/examples/node_built_in/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Use Node.js built-in modules\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use \"node:\" specifiers when importing Node.js modules in Deno.\n", "metadata": {"source_url": "https://docs.deno.com/examples/node_built_in", "title": "Use Node.js built-in modules", "description": "Deno supports most built-in Node.js modules natively - you can include them in your code using \"node:\" specifiers in your imports.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:05:36", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "ogLocale": "en_US", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogTitle": "Use Node.js built-in modules", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Use Node.js built-in modules", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Use Node.js built-in modules", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Use Node.js built-in modules", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "scrapeId": "51c4d00f-c788-4131-8091-c47061f39da8", "sourceURL": "https://docs.deno.com/examples/node_built_in", "url": "https://docs.deno.com/examples/node_built_in/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connect to Postgres\"?\n\nAssistant: Using the npm Postgres client, you can connect to a Postgres database running anywhere.\n\nHere's a detailed explanation:\n\n\n## Connecting to Postgres\nImport the Postgres package from\n\n```javascript\nimport postgres from \"npm:postgres\";\n```\n\nInitialize the client with connection information for your database, and create a connection.\n\n```javascript\nconst sql = postgres({\n  user: \"user\",\n  database: \"test\",\n  hostname: \"localhost\",\n  port: 5432,\n});\n```\n\nExecute a SQL query\n\n```javascript\nconst result = await sql`\n  SELECT ID, NAME FROM PEOPLE\n`;\nconsole.log(result);\n```\n\nClose the connection to the database\n\n```javascript\nawait sql.end();\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/postgres.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-net --allow-env https://docs.deno.com/examples/scripts/postgres.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/postgres", "title": "Connect to Postgres", "description": "Using the npm Postgres client, you can connect to a Postgres database running anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:05:44", "type": "overview", "page_metadata": {"title": "Connect to Postgres", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:title": "Connect to Postgres", "og:image": "/img/og.webp", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogLocale": "en_US", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogTitle": "Connect to Postgres", "twitter:title": "Connect to Postgres", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:site": "@deno_land", "scrapeId": "d2e71a1d-4168-4661-91d7-45941360ab34", "sourceURL": "https://docs.deno.com/examples/postgres", "url": "https://docs.deno.com/examples/postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connect to Postgres\"?\n\nAssistant: Here are some code examples:\n\n### Importing Postgres Package\n```yaml\nimport postgres from \"npm:postgres\";\n```\n\n### Initializing the Client\n```yaml\nconst sql = postgres({\n  user: \"user\",\n  database: \"test\",\n  hostname: \"localhost\",\n  port: 5432,\n});\n```\n\n### Executing a SQL Query\n```yaml\nconst result = await sql`\n  SELECT ID, NAME FROM PEOPLE\n`;\nconsole.log(result);\n```\n\n### Closing the Connection\n```yaml\nawait sql.end();\n```\n\n### Running the Example Locally\n```yaml\ndeno run --allow-net --allow-env https://docs.deno.com/examples/scripts/postgres.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/postgres", "title": "Connect to Postgres", "description": "Using the npm Postgres client, you can connect to a Postgres database running anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:05:44", "type": "code_examples", "page_metadata": {"title": "Connect to Postgres", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:title": "Connect to Postgres", "og:image": "/img/og.webp", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogLocale": "en_US", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogTitle": "Connect to Postgres", "twitter:title": "Connect to Postgres", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:site": "@deno_land", "scrapeId": "d2e71a1d-4168-4661-91d7-45941360ab34", "sourceURL": "https://docs.deno.com/examples/postgres", "url": "https://docs.deno.com/examples/postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connect to Postgres\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the database credentials are correct before running the example.\n• Use environment variables to manage sensitive information like database credentials.\n", "metadata": {"source_url": "https://docs.deno.com/examples/postgres", "title": "Connect to Postgres", "description": "Using the npm Postgres client, you can connect to a Postgres database running anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:05:44", "type": "best_practices", "page_metadata": {"title": "Connect to Postgres", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:title": "Connect to Postgres", "og:image": "/img/og.webp", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogLocale": "en_US", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogTitle": "Connect to Postgres", "twitter:title": "Connect to Postgres", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:site": "@deno_land", "scrapeId": "d2e71a1d-4168-4661-91d7-45941360ab34", "sourceURL": "https://docs.deno.com/examples/postgres", "url": "https://docs.deno.com/examples/postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"File-based routing\"?\n\nAssistant: This tutorial demonstrates how to create a simple HTTP server that uses file based routing.\n\nHere's a detailed explanation:\n\n\n## Route requests\nCreate a new file called `server.ts`. This file will be used to route requests.\nSet up an async function called `handler` that takes a request object as an argument:\n\nserver.ts\n\n```highlight notranslate ts\nasync function handler(req: Request): Promise<Response> {\n  const url = new URL(req.url);\n  const path = url.pathname;\n  const method = req.method;\n  let module;\n\n  try {\n    module = await import(`.${path}.ts`);\n  } catch (_error) {\n    return new Response(\"Not found\", { status: 404 });\n  }\n\n  if (module[method]) {\n    return module[method](req);\n  }\n\n  return new Response(\"Method not implemented\", { status: 501 });\n}\n\nDeno.serve(handler);\n```\n\nThe `handler` function sets up a path variable which contains the path,\nextracted from the request URL, and a method variable which contains the request\nmethod.\n\nIt then tries to import a module based on the path. If the module is not found,\nit returns a 404 response.\n\nIf the module is found, it checks if the module has a method handler for the\nrequest method. If the method handler is found, it calls the method handler with\nthe request object. If the method handler is not found, it returns a 501\nresponse.\n\nFinally, it serves the handler function using `Deno.serve`.\n\n> The path could be any valid URL path such as `/users`, `/posts`, etc. For\n> paths like `/users`, the file `./users.ts` will be imported. However, deeper\n> paths like `/org/users` will require a file `./org/users.ts`. You can create\n> nested routes by creating nested directories and files.\n\n## Handle requests\nCreate a new file called `users.ts` in the same directory as `server.ts`. This\nfile will be used to handle requests to the `/users` path. We'll use a `GET`\nrequest as an example. You could add more HTTP methods such as `POST`, `PUT`,\n`DELETE`, etc.\n\nIn `users.ts`, set up an async function called `GET` that takes a request object\nas an argument:\n\nusers.ts\n\n```highlight notranslate ts\nexport function GET(_req: Request): Response {\n  return new Response(\"Hello from user.ts\", { status: 200 });\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/file_based_routing_tutorial", "title": "File-based routing", "description": "This tutorial demonstrates how to create a simple HTTP server that uses file based routing.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:05:58", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "File-based routing", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "File-based routing", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "ogSiteName": "Deno", "twitter:title": "File-based routing", "og:title": "File-based routing", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "og:image": "/img/og.webp", "scrapeId": "9d252e04-18b5-43af-8628-7a78f3bb4a56", "sourceURL": "https://docs.deno.com/examples/file_based_routing_tutorial", "url": "https://docs.deno.com/examples/file_based_routing_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"File-based routing\"?\n\nAssistant: Here are some code examples:\n\n### Route requests - server.ts\n```yaml\nasync function handler(req: Request): Promise<Response> {\n  const url = new URL(req.url);\n  const path = url.pathname;\n  const method = req.method;\n  let module;\n\n  try {\n    module = await import(`.${path}.ts`);\n  } catch (_error) {\n    return new Response(\"Not found\", { status: 404 });\n  }\n\n  if (module[method]) {\n    return module[method](req);\n  }\n\n  return new Response(\"Method not implemented\", { status: 501 });\n}\n\nDeno.serve(handler);\n```\n\n### Handle requests - users.ts\n```yaml\nexport function GET(_req: Request): Response {\n  return new Response(\"Hello from user.ts\", { status: 200 });\n}\n```\n\n### Start the server command\n```yaml\ndeno run --allow-net --allow-read server.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/file_based_routing_tutorial", "title": "File-based routing", "description": "This tutorial demonstrates how to create a simple HTTP server that uses file based routing.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:05:58", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "File-based routing", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "File-based routing", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "ogSiteName": "Deno", "twitter:title": "File-based routing", "og:title": "File-based routing", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "og:image": "/img/og.webp", "scrapeId": "9d252e04-18b5-43af-8628-7a78f3bb4a56", "sourceURL": "https://docs.deno.com/examples/file_based_routing_tutorial", "url": "https://docs.deno.com/examples/file_based_routing_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"File-based routing\"?\n\nAssistant: Here are the recommended best practices:\n\n• The path could be any valid URL path such as `/users`, `/posts`, etc.\n• For paths like `/users`, the file `./users.ts` will be imported.\n• Deeper paths like `/org/users` will require a file `./org/users.ts`.\n• You can create nested routes by creating nested directories and files.\n• This command requires the `--allow-net` and `--allow-read` permissions flags to allow access to the network and to read the `users.ts` file.\n", "metadata": {"source_url": "https://docs.deno.com/examples/file_based_routing_tutorial", "title": "File-based routing", "description": "This tutorial demonstrates how to create a simple HTTP server that uses file based routing.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:05:58", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "File-based routing", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "File-based routing", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "ogSiteName": "Deno", "twitter:title": "File-based routing", "og:title": "File-based routing", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "og:image": "/img/og.webp", "scrapeId": "9d252e04-18b5-43af-8628-7a78f3bb4a56", "sourceURL": "https://docs.deno.com/examples/file_based_routing_tutorial", "url": "https://docs.deno.com/examples/file_based_routing_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"User Prompts in Deno\"?\n\nAssistant: Prompts are used to ask the user for input or feedback on actions.\n\nHere's a detailed explanation:\n\n\n## Basic User Interaction\nThe most basic way to interact with the user is by alerting them, and waiting for them to acknowledge by pressing [Enter].\n\n```javascript\nalert(\"Please acknowledge the message.\");\nconsole.log(\"The message has been acknowledged.\");\n```\n\n## Yes/No Confirmation\nInstead of just an acknowledgement, we can also ask the user for a yes/no response.\n\n```javascript\nconst shouldProceed = confirm(\"Do you want to proceed?\");\nconsole.log(\"Should proceed?\", shouldProceed);\n```\n\n## Text Input Prompt\nWe can also prompt the user for some text input. If the user cancels the prompt, the returned value will be `null`.\n\n```javascript\nconst name = prompt(\"Please enter your name:\");\nconsole.log(\"Name:\", name);\n```\n\n## Prompt with Default Value\nWhen prompting you can also specify a default value to use if the user cancels the prompt.\n\n```javascript\nconst age = prompt(\"Please enter your age:\", \"18\");\nconsole.log(\"Age:\", age);\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/prompts.ts) locally using the Deno CLI:\n\n```bash\ndeno run https://docs.deno.com/examples/scripts/prompts.ts\n```\n\n## Additional Resources\n- [MDN: prompt](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n- [MDN: alert](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n- [MDN: confirm](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n", "metadata": {"source_url": "https://docs.deno.com/examples/prompts", "title": "User Prompts in Deno", "description": "Prompts are used to ask the user for input or feedback on actions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:06:09", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "language": "en", "title": "Input prompts", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Input prompts", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:title": "Input prompts", "ogTitle": "Input prompts", "ogLocale": "en_US", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "02e1d217-e732-4838-b274-f970a97fdad2", "sourceURL": "https://docs.deno.com/examples/prompts", "url": "https://docs.deno.com/examples/prompts/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"User Prompts in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Basic Alert Example\n```yaml\nalert(\"Please acknowledge the message.\");\nconsole.log(\"The message has been acknowledged.\");\n```\n\n### Yes/No Confirmation Example\n```yaml\nconst shouldProceed = confirm(\"Do you want to proceed?\");\nconsole.log(\"Should proceed?\", shouldProceed);\n```\n\n### Text Input Prompt Example\n```yaml\nconst name = prompt(\"Please enter your name:\");\nconsole.log(\"Name:\", name);\n```\n\n### Prompt with Default Value Example\n```yaml\nconst age = prompt(\"Please enter your age:\", \"18\");\nconsole.log(\"Age:\", age);\n```\n\n### Deno CLI Run Command\n```yaml\ndeno run https://docs.deno.com/examples/scripts/prompts.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/prompts", "title": "User Prompts in Deno", "description": "Prompts are used to ask the user for input or feedback on actions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:06:09", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "language": "en", "title": "Input prompts", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Input prompts", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:title": "Input prompts", "ogTitle": "Input prompts", "ogLocale": "en_US", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "02e1d217-e732-4838-b274-f970a97fdad2", "sourceURL": "https://docs.deno.com/examples/prompts", "url": "https://docs.deno.com/examples/prompts/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"User Prompts in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always provide clear messages in prompts to guide the user effectively.\n• Consider using default values in prompts to enhance user experience.\n", "metadata": {"source_url": "https://docs.deno.com/examples/prompts", "title": "User Prompts in Deno", "description": "Prompts are used to ask the user for input or feedback on actions.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:06:09", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "language": "en", "title": "Input prompts", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Input prompts", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:title": "Input prompts", "ogTitle": "Input prompts", "ogLocale": "en_US", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "02e1d217-e732-4838-b274-f970a97fdad2", "sourceURL": "https://docs.deno.com/examples/prompts", "url": "https://docs.deno.com/examples/prompts/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Introduction to Deno APIs\"?\n\nAssistant: An overview of Deno APIs with links to examples and video resources.\n\nHere's a detailed explanation:\n\n\n## Play\nFind more videos in the [Examples page](https://docs.deno.com/examples/) and on our [YouTube channel](https://www.youtube.com/@deno_land).\n\n## Did you find what you needed?\nYesNo [Edit this page](https://github.com/denoland/docs/edit/main/examples/videos/intro_to_deno_apis.md)\n", "metadata": {"source_url": "https://docs.deno.com/examples/intro_to_deno_apis", "title": "Introduction to Deno APIs", "description": "An overview of Deno APIs with links to examples and video resources.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:06:13", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Introduction to Deno APIs", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogTitle": "Introduction to Deno APIs", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "og:title": "Introduction to Deno APIs", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "twitter:title": "Introduction to Deno APIs", "scrapeId": "bd45c5fb-964e-4cff-8174-eccdb61e8641", "sourceURL": "https://docs.deno.com/examples/intro_to_deno_apis", "url": "https://docs.deno.com/examples/intro_to_deno_apis/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Introduction to Deno APIs\"?\n\nAssistant: Here are the recommended best practices:\n\n• Provide feedback on the documentation if you have suggestions or comments.\n", "metadata": {"source_url": "https://docs.deno.com/examples/intro_to_deno_apis", "title": "Introduction to Deno APIs", "description": "An overview of Deno APIs with links to examples and video resources.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:06:13", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Introduction to Deno APIs", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogTitle": "Introduction to Deno APIs", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "og:title": "Introduction to Deno APIs", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "twitter:title": "Introduction to Deno APIs", "scrapeId": "bd45c5fb-964e-4cff-8174-eccdb61e8641", "sourceURL": "https://docs.deno.com/examples/intro_to_deno_apis", "url": "https://docs.deno.com/examples/intro_to_deno_apis/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connect to Supabase\"?\n\nAssistant: Connect to a Supabase database with the supabase-js library.\n\nHere's a detailed explanation:\n\n\n## Connecting to Supabase\nImport the createClient function from jsr supabase-js package.\n\n## Creating a Supabase Client\nCreate a single supabase client for interacting with your database.\n\n## Inserting Data into the Countries Table\nInsert data into the countries table.\n\n## Getting Data from the Countries Table\nGet data from the countries table.\n\n## Running the Example Locally\nRun this example locally using the Deno CLI.\n\n## Additional Resources\nLinks to additional resources related to supabase-js.\n", "metadata": {"source_url": "https://docs.deno.com/examples/supabase", "title": "Connect to Supabase", "description": "Connect to a Supabase database with the supabase-js library.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:06:26", "type": "overview", "page_metadata": {"twitter:title": "Connect to Supabase", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Connect to Supabase", "og:title": "Connect to Supabase", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "title": "Connect to Supabase", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "scrapeId": "8e9baccc-53eb-415c-8af0-defb81caf13a", "sourceURL": "https://docs.deno.com/examples/supabase", "url": "https://docs.deno.com/examples/supabase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connect to Supabase\"?\n\nAssistant: Here are some code examples:\n\n### Importing createClient\n```yaml\nimport { createClient } from \"jsr:@supabase/supabase-js@2\";\n```\n\n### Creating a Supabase Client\n```yaml\nconst supabase = createClient(\n  Deno.env.get(\"SUPABASE_URL\")!,\n  Deno.env.get(\"SUPABASE_KEY\")!,\n);\n```\n\n### Inserting Data Example\n```yaml\nlet resource = await supabase\n  .from(\"countries\")\n  .insert({ code: \"JP\", name: \"Japan\" })\n  .select();\n\nif (resource.error) {\n  console.error(resource.error);\n}\n\nconsole.log(resource.data); // [ { code: \"JP\", name: \"Japan\" } ]\n```\n\n### Getting Data Example\n```yaml\nresource = await supabase\n  .from(\"countries\")\n  .select();\n\nif (resource.error) {\n  console.error(resource.error);\n}\n\nconsole.log(resource.data); // [ { code: \"JP\", name: \"Japan\" }, ... ]\n```\n\n### Running the Example Command\n```yaml\ndeno run --allow-net --allow-env https://docs.deno.com/examples/scripts/supabase.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/supabase", "title": "Connect to Supabase", "description": "Connect to a Supabase database with the supabase-js library.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:06:26", "type": "code_examples", "page_metadata": {"twitter:title": "Connect to Supabase", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Connect to Supabase", "og:title": "Connect to Supabase", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "title": "Connect to Supabase", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "scrapeId": "8e9baccc-53eb-415c-8af0-defb81caf13a", "sourceURL": "https://docs.deno.com/examples/supabase", "url": "https://docs.deno.com/examples/supabase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connect to Supabase\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have the correct environment variables set for SUPABASE_URL and SUPABASE_KEY before running the example.\n• Check the supabase-js documentation for more detailed usage and features.\n", "metadata": {"source_url": "https://docs.deno.com/examples/supabase", "title": "Connect to Supabase", "description": "Connect to a Supabase database with the supabase-js library.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:06:26", "type": "best_practices", "page_metadata": {"twitter:title": "Connect to Supabase", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Connect to Supabase", "og:title": "Connect to Supabase", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "title": "Connect to Supabase", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "scrapeId": "8e9baccc-53eb-415c-8af0-defb81caf13a", "sourceURL": "https://docs.deno.com/examples/supabase", "url": "https://docs.deno.com/examples/supabase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"TypeScript and JSX\"?\n\nAssistant: Play\n\nHere's a detailed explanation:\n\n\n## Did you find what you needed?\nYesNo [Edit this page](https://github.com/denoland/docs/edit/main/examples/videos/ts_jsx.md)\n\nThank you! Feedback received. ✅\n\nAny additional comments? ( _optional_)\n\nEmail address ( _optional_)\n\nSend additional feedback\n\n[Privacy policy](https://docs.deno.com/deploy/manual/privacy-policy)\n", "metadata": {"source_url": "https://docs.deno.com/examples/ts_jsx", "title": "TypeScript and JSX", "description": "Play", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 23:06:30", "type": "overview", "page_metadata": {"og:type": "article", "language": "en", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "title": "TypeScript and JSX", "twitter:title": "TypeScript and JSX", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "TypeScript and JSX", "ogLocale": "en_US", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:title": "TypeScript and JSX", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "0c60996d-7d02-4874-827b-e7155af4a26c", "sourceURL": "https://docs.deno.com/examples/ts_jsx", "url": "https://docs.deno.com/examples/ts_jsx/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HTTP server: Performing CRUD operations using SQLite3\"?\n\nAssistant: An example of a HTTP server for CRUD routes with oak middleware framework and SQLite3 database. It demonstrates the CRUD(Create, Read, Update and Delete) operations on file-based SQLite Database using HTTP methods (Get, Post, Put, Delete, Options)\n\nHere's a detailed explanation:\n\n\n## Code Example\n```javascript\nimport { Application, Router } from \"jsr:@oak/oak\";\nimport { Database } from \"jsr:@db/sqlite\";\n```\n\nOpen a database from in-memory database or file. here an in-memory database is used for CRUD demonstration.\n\n```javascript\nconst peopleDb = new Database(\":memory:\");\npeopleDb.exec(\n  \"CREATE TABLE IF NOT EXISTS people (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT not null,age INTEGER not null)\",\n);\nconst app = new Application();\nconst router = new Router();\nrouter\n  .post(\"/people\", async (ctx) => {\n    const { name, age } = await ctx.request.body.json();\n    peopleDb.exec(\"INSERT INTO people (name, age) VALUES (?,?)\", name, age);\n    const lastInsertRowId = peopleDb.lastInsertRowId; // Get the last inserted row ID\n    ctx.response.status = 201;\n    ctx.response.body = { id: lastInsertRowId, name, age };\n  });\nrouter.get(\"/people\", (ctx) => {\n  const users = peopleDb.prepare(\"SELECT * FROM people\").all();\n  ctx.response.body = users;\n});\nrouter.put(\"/people/:id\", async (ctx) => {\n  const { name, age } = await ctx.request.body.json();\n  peopleDb.prepare(\"UPDATE people SET name =?, age=? WHERE id = ?\").run(\n    name,\n    age,\n    ctx.params.id,\n  );\n  ctx.response.body = { message: \"person updated successfully as requested\" };\n});\nrouter.delete(\"/people/:id\", (ctx) => {\n  peopleDb.prepare(\"DELETE FROM people WHERE id = ?\").run(ctx.params.id);\n  ctx.response.body = \"person removed successfully as requested\";\n});\napp.use(router.routes());\napp.use(router.allowedMethods());\nconst PORT = 8369; // Any available port number can be defined here\nconsole.log(`Server is running on http://localhost:${PORT}`);\nawait app.listen({ port: PORT });\n```\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/http_server_oak_crud_middleware_with_sqlite3_db.ts) locally using the Deno CLI:\n\n```bash\ndeno run -A https://docs.deno.com/examples/scripts/http_server_oak_crud_middleware_with_sqlite3_db.ts\n```\n\n## Additional resources\n- [Doc: @oak/oak/README.md](https://jsr.io/@oak/oak)\n- [@db/sqlite on JSR](https://jsr.io/@db/sqlite)\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_oak_crud_middleware_with_sqlite3_db", "title": "HTTP server: Performing CRUD operations using SQLite3", "description": "An example of a HTTP server for CRUD routes with oak middleware framework and SQLite3 database. It demonstrates the CRUD(Create, Read, Update and Delete) operations on file-based SQLite Database using HTTP methods (Get, Post, Put, Delete, Options)", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:06:49", "type": "overview", "page_metadata": {"ogTitle": "HTTP server: Performing CRUD operations using SQLite3", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "HTTP server: Performing CRUD operations using SQLite3", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "HTTP server: Performing CRUD operations using SQLite3", "ogLocale": "en_US", "title": "HTTP server: Performing CRUD operations using SQLite3", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "scrapeId": "79705cda-af24-4e0d-8e25-15eb07f185b6", "sourceURL": "https://docs.deno.com/examples/http_server_oak_crud_middleware_with_sqlite3_db", "url": "https://docs.deno.com/examples/http_server_oak_crud_middleware_with_sqlite3_db/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HTTP server: Performing CRUD operations using SQLite3\"?\n\nAssistant: Here are some code examples:\n\n### HTTP Server CRUD Operations\n```yaml\nimport { Application, Router } from \"jsr:@oak/oak\";\nimport { Database } from \"jsr:@db/sqlite\";\n\nconst peopleDb = new Database(\":memory:\");\npeopleDb.exec(\n  \"CREATE TABLE IF NOT EXISTS people (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT not null,age INTEGER not null)\",\n);\nconst app = new Application();\nconst router = new Router();\nrouter\n  .post(\"/people\", async (ctx) => {\n    const { name, age } = await ctx.request.body.json();\n    peopleDb.exec(\"INSERT INTO people (name, age) VALUES (?,?)\", name, age);\n    const lastInsertRowId = peopleDb.lastInsertRowId; // Get the last inserted row ID\n    ctx.response.status = 201;\n    ctx.response.body = { id: lastInsertRowId, name, age };\n  });\nrouter.get(\"/people\", (ctx) => {\n  const users = peopleDb.prepare(\"SELECT * FROM people\").all();\n  ctx.response.body = users;\n});\nrouter.put(\"/people/:id\", async (ctx) => {\n  const { name, age } = await ctx.request.body.json();\n  peopleDb.prepare(\"UPDATE people SET name =?, age=? WHERE id = ?\").run(\n    name,\n    age,\n    ctx.params.id,\n  );\n  ctx.response.body = { message: \"person updated successfully as requested\" };\n});\nrouter.delete(\"/people/:id\", (ctx) => {\n  peopleDb.prepare(\"DELETE FROM people WHERE id = ?\").run(ctx.params.id);\n  ctx.response.body = \"person removed successfully as requested\";\n});\napp.use(router.routes());\napp.use(router.allowedMethods());\nconst PORT = 8369; // Any available port number can be defined here\nconsole.log(`Server is running on http://localhost:${PORT}`);\nawait app.listen({ port: PORT });\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_oak_crud_middleware_with_sqlite3_db", "title": "HTTP server: Performing CRUD operations using SQLite3", "description": "An example of a HTTP server for CRUD routes with oak middleware framework and SQLite3 database. It demonstrates the CRUD(Create, Read, Update and Delete) operations on file-based SQLite Database using HTTP methods (Get, Post, Put, Delete, Options)", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:06:49", "type": "code_examples", "page_metadata": {"ogTitle": "HTTP server: Performing CRUD operations using SQLite3", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "HTTP server: Performing CRUD operations using SQLite3", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "HTTP server: Performing CRUD operations using SQLite3", "ogLocale": "en_US", "title": "HTTP server: Performing CRUD operations using SQLite3", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "scrapeId": "79705cda-af24-4e0d-8e25-15eb07f185b6", "sourceURL": "https://docs.deno.com/examples/http_server_oak_crud_middleware_with_sqlite3_db", "url": "https://docs.deno.com/examples/http_server_oak_crud_middleware_with_sqlite3_db/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"HTTP server: Performing CRUD operations using SQLite3\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use in-memory databases for testing and demonstration purposes.\n• Ensure to handle errors and exceptions in production code.\n• Always validate user input before processing it.\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_oak_crud_middleware_with_sqlite3_db", "title": "HTTP server: Performing CRUD operations using SQLite3", "description": "An example of a HTTP server for CRUD routes with oak middleware framework and SQLite3 database. It demonstrates the CRUD(Create, Read, Update and Delete) operations on file-based SQLite Database using HTTP methods (Get, Post, Put, Delete, Options)", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:06:49", "type": "best_practices", "page_metadata": {"ogTitle": "HTTP server: Performing CRUD operations using SQLite3", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "HTTP server: Performing CRUD operations using SQLite3", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "HTTP server: Performing CRUD operations using SQLite3", "ogLocale": "en_US", "title": "HTTP server: Performing CRUD operations using SQLite3", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "scrapeId": "79705cda-af24-4e0d-8e25-15eb07f185b6", "sourceURL": "https://docs.deno.com/examples/http_server_oak_crud_middleware_with_sqlite3_db", "url": "https://docs.deno.com/examples/http_server_oak_crud_middleware_with_sqlite3_db/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"How to use Planetscale with Deno\"?\n\nAssistant: Planetscale is a MySQL-compatible serverless database that is designed with a developer workflow where developers can create, branch, and deploy databases from the command line.\n\nHere's a detailed explanation:\n\n\n## Configuring our connection\nThe connection requires three credentials: host, username, and password. These are database-specific, so we first need to create a database in Planetscale. You can do that by following the initial instructions here. Don't worry about adding the schema—we can do that through `@planetscale/database`.\n\nOnce you have created the database, head to Overview, click \"Connect\", and choose \"Connect with `@planetscale/database`\" to get the host and username. Then click through to Passwords to create a new password for your database. Once you have all three you can plug them in directly, or better, store them as environment variables:\n\nThen call them using `Deno.env`: \n\nThis will also work on Deno Deploy if you set the environment variables in the dashboard. Run with:\n\nThe `conn` object is now an open connection to our Planetscale database.\n\n## Creating and populating our database table\nNow that you have the connection running, you can `conn.execute()` with SQL commands to create tables and insert the initial data.\n\n## Querying Planetscale\nWe can use same `conn.execute()` to also write our queries. Let's get a list of all our dinosaurs:\n\nWe can also get just a single row from the database by specifying a dinosaur name:\n\nYou can find out more about working with Planetscale in their docs.\n", "metadata": {"source_url": "https://docs.deno.com/examples/planetscale_tutorial", "title": "How to use Planetscale with Deno", "description": "Planetscale is a MySQL-compatible serverless database that is designed with a developer workflow where developers can create, branch, and deploy databases from the command line.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:07:54", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "How to use Planetscale with Deno", "twitter:site": "@deno_land", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogTitle": "How to use Planetscale with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "title": "How to use Planetscale with Deno", "ogImage": "/img/og.webp", "twitter:title": "How to use Planetscale with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "3f569a52-0797-4e81-9858-0950592a0738", "sourceURL": "https://docs.deno.com/examples/planetscale_tutorial", "url": "https://docs.deno.com/examples/planetscale_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"How to use Planetscale with Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the connect method\n```yaml\nimport { connect } from \"npm:@planetscale/database@^1.4\";\n```\n\n### Setting environment variables\n```yaml\nexport HOST=<host>\nexport USERNAME=<username>\nexport PASSWORD=<password>\n```\n\n### Connecting to the database\n```yaml\nconst config = {\n  host: Deno.env.get(\"HOST\"),\n  username: Deno.env.get(\"USERNAME\"),\n  password: Deno.env.get(\"PASSWORD\"),\n};\n\nconst conn = connect(config);\n```\n\n### Running the Deno command\n```yaml\ndeno run --allow-net --allow-env main.ts\n```\n\n### Creating a table and inserting data\n```yaml\nawait conn.execute(\n  \"CREATE TABLE dinosaurs (id int NOT NULL AUTO_INCREMENT PRIMARY KEY, name varchar(255) NOT NULL, description varchar(255) NOT NULL);\",\n);\nawait conn.execute(\n  \"INSERT INTO `dinosaurs` (id, name, description) VALUES (1, 'Aardonyx', 'An early stage in the evolution of sauropods.'), (2, 'Abelisaurus', 'Abels lizard has been reconstructed from a single skull.'), (3, 'Deno', 'The fastest dinosaur that ever lived.')\",\n);\n```\n\n### Querying all dinosaurs\n```yaml\nconst results = await conn.execute(\"SELECT * FROM `dinosaurs`\");\nconsole.log(results.rows);\n```\n\n### Querying a single dinosaur by name\n```yaml\nconst result = await conn.execute(\n  \"SELECT * FROM `dinosaurs` WHERE `name` = 'Deno'\",\n);\nconsole.log(result.rows);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/planetscale_tutorial", "title": "How to use Planetscale with Deno", "description": "Planetscale is a MySQL-compatible serverless database that is designed with a developer workflow where developers can create, branch, and deploy databases from the command line.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:07:54", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "How to use Planetscale with Deno", "twitter:site": "@deno_land", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogTitle": "How to use Planetscale with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "title": "How to use Planetscale with Deno", "ogImage": "/img/og.webp", "twitter:title": "How to use Planetscale with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "3f569a52-0797-4e81-9858-0950592a0738", "sourceURL": "https://docs.deno.com/examples/planetscale_tutorial", "url": "https://docs.deno.com/examples/planetscale_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"How to use Planetscale with Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Store database credentials as environment variables for security.\n• Use the Deno Deploy dashboard to set environment variables for deployment.\n", "metadata": {"source_url": "https://docs.deno.com/examples/planetscale_tutorial", "title": "How to use Planetscale with Deno", "description": "Planetscale is a MySQL-compatible serverless database that is designed with a developer workflow where developers can create, branch, and deploy databases from the command line.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:07:54", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "How to use Planetscale with Deno", "twitter:site": "@deno_land", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogTitle": "How to use Planetscale with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "title": "How to use Planetscale with Deno", "ogImage": "/img/og.webp", "twitter:title": "How to use Planetscale with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "3f569a52-0797-4e81-9858-0950592a0738", "sourceURL": "https://docs.deno.com/examples/planetscale_tutorial", "url": "https://docs.deno.com/examples/planetscale_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Better debugging with the console API\"?\n\nAssistant: This page covers various methods of the console API in Deno, including console.log(), console.table(), timer methods, console.count(), and console.trace(), to enhance debugging capabilities.\n\nHere's a detailed explanation:\n\n\n## console.log()\nHello, old friend! You’ll most likely be using this to output logging messages to the console to help you debug.\n\n```highlight notranslate js\nconsole.log(\"Hello, world!\"); // \"Hello, world!\"\n```\n\nYou can output multiple items by separated by commas like so:\n\n```highlight notranslate jsx\nconst person = {\"name\": \"Jane\", \"city\": \"New York\"}\nconsole.log(\"Hello, \", person.name, \"from \", person.city); // \"Hello, Jane from New York\"\n```\n\nOr you can use string literals:\n\n```highlight notranslate jsx\nconst person = { \"name\": \"Jane\", \"city\": \"New York\" };\nconsole.log(`Hello ${person.name} from ${person.city}`); // \"Hello, Jane from New York\"\n```\n\nYou can also [apply some styling using CSS](https://docs.deno.com/examples/color_logging/) using the `%c` directive:\n\n```highlight notranslate jsx\nconsole.log(\"Wild %cblue\", \"color: blue\", \"yonder\"); // Applies a blue text color to the word \"blue\"\n```\n\n…but there is much more you can do with the console API.\n\n## console.table()\nThe `table` method is helpful for outputting structured data like objects for easier inspection.\n\n```highlight notranslate jsx\nconst people = {\n  \"john\": {\n    \"age\": 30,\n    \"city\": \"New York\",\n  },\n  \"jane\": {\n    \"age\": 25,\n    \"city\": \"Los Angeles\",\n  },\n};\n\nconsole.table(people);\n\n/*\n┌───────┬─────┬───────────────┐\n│ (idx) │ age │ city          │\n├───────┼─────┼───────────────┤\n│ john  │ 30  │ \"New York\"    │\n│ jane  │ 25  │ \"Los Angeles\" │\n└───────┴─────┴───────────────┘\n*/\n```\n\nYou can also specify the properties of your object that you’d like to include in the table. Great for inspecting a summary of those detailed objects to see just the part you are concerned with.\n\n```highlight notranslate jsx\nconsole.table(people, [\"city\"]);\n\n/* outputs\n┌───────┬───────────────┐\n│ (idx) │ city          │\n├───────┼───────────────┤\n│ john  │ \"New York\"    │\n│ jane  │ \"Los Angeles\" │\n└───────┴───────────────┘\n*/\n```\n\n## Timer methods\nUnderstanding how long specific parts of your application take is key to removing performance bottlenecks and expensive operations. If you’ve ever reached for JavaScript’s date method to make yourself a timer, you’ll wish you’d know this one long ago. It’s more convenient and more accurate.\n\nTry using [`console.time()`](https://developer.mozilla.org/en-US/docs/Web/API/console/time_static), [`console.timeLog()`](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog_static), and [`console.timeEnd()`](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd_static) instead.\n\n```highlight notranslate jsx\nconsole.time(\"My timer\"); // starts a timer with label \"My timer\"\n// do some work...\nconsole.timeLog(\"My timer\"); // outputs the current timer value, e.g. \"My timer: 9000ms\"\n// do more work...\nconsole.timeEnd(\"My timer\"); // stops \"My timer\" and reports its value, e.g. \"My timer: 97338ms\"\n``` \n\nYou can create multiple timers each with their own label. Very handy!\n\n## Counting things with console.count()\nIt can be helpful to keep a count of how many times specific operations in your code have been executed. Rather than doing this manually you can use [`console.count()`](https://developer.mozilla.org/en-US/docs/Web/API/console/count_static) which can maintain multiple counters for you based on the label you provide.\n\n```highlight notranslate jsx\n// increment the default counter\nconsole.count();\nconsole.count();\nconsole.count();\n\n/*\n\"default: 1\"\n\"default: 2\"\n\"default: 3\"\n*/\n``` \n\nThis can be very handy inside a function and passing in a label, like so:\n\n```highlight notranslate jsx\nfunction pat(animal) {\n  console.count(animal);\n  return `Patting the ${animal}`;\n}\n\npat(\"cat\");\npat(\"cat\");\npat(\"dog\");\npat(\"cat\");\n\n/*\n\"cat: 1\"\n\"cat: 2\"\n\"dog: 1\"\n\"cat: 3\"\n*/\n```\n\n## Going deeper with console.trace()\nFor a detailed view of what is happening in your application, you can output a stack trace to the console with [`console.trace()`](https://developer.mozilla.org/en-US/docs/Web/API/console/trace_static):\n\n```highlight notranslate jsx\n// main.js\nfunction foo() {\n  function bar() {\n    console.trace();\n  }\n  bar();\n}\n\nfoo();\n\n/*\nTrace\n    at bar (file:///PATH_TO/main.js:3:13)\n    at foo (file:///PATH_TO/main.js:5:3)\n    at file:///PATH_TO/main.js:8:1\n*/\n``` \n\nThere’s more to explore, but these handy methods can give your JavaScript debugging a boost and they are ready and waiting for you to use right in your browser or in your Deno application.\n", "metadata": {"source_url": "https://docs.deno.com/examples/debugging_with_console_tutorial", "title": "Better debugging with the console API", "description": "This page covers various methods of the console API in Deno, including console.log(), console.table(), timer methods, console.count(), and console.trace(), to enhance debugging capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:08:25", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogTitle": "Better debugging with the console API", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Better debugging with the console API", "title": "Better debugging with the console API", "og:image": "/img/og.webp", "og:type": "article", "twitter:title": "Better debugging with the console API", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "5e6e334e-67f6-48d6-9c72-8eb0a288c704", "sourceURL": "https://docs.deno.com/examples/debugging_with_console_tutorial", "url": "https://docs.deno.com/examples/debugging_with_console_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Better debugging with the console API\"?\n\nAssistant: Here are some code examples:\n\n### console.log() Example\n```yaml\nconsole.log(\"Hello, world!\"); // \"Hello, world!\"\n```\n\n### Multiple Items with console.log()\n```yaml\nconst person = {\"name\": \"Jane\", \"city\": \"New York\"};\nconsole.log(\"Hello, \", person.name, \"from \", person.city); // \"Hello, Jane from New York\"\n```\n\n### String Literals with console.log()\n```yaml\nconst person = { \"name\": \"Jane\", \"city\": \"New York\" };\nconsole.log(`Hello ${person.name} from ${person.city}`); // \"Hello, Jane from New York\"\n```\n\n### Styled console.log() Example\n```yaml\nconsole.log(\"Wild %cblue\", \"color: blue\", \"yonder\"); // Applies a blue text color to the word \"blue\"\n```\n\n### console.table() Example\n```yaml\nconst people = {\n  \"john\": {\n    \"age\": 30,\n    \"city\": \"New York\",\n  },\n  \"jane\": {\n    \"age\": 25,\n    \"city\": \"Los Angeles\",\n  },\n};\nconsole.table(people);\n```\n\n### console.table() with Specific Properties\n```yaml\nconsole.table(people, [\"city\"]);\n```\n\n### Timer Methods Example\n```yaml\nconsole.time(\"My timer\"); // starts a timer with label \"My timer\"\n// do some work...\nconsole.timeLog(\"My timer\"); // outputs the current timer value, e.g. \"My timer: 9000ms\"\n// do more work...\nconsole.timeEnd(\"My timer\"); // stops \"My timer\" and reports its value, e.g. \"My timer: 97338ms\"\n```\n\n### console.count() Example\n```yaml\nconsole.count();\nconsole.count();\nconsole.count();\n```\n\n### Function with console.count() Example\n```yaml\nfunction pat(animal) {\n  console.count(animal);\n  return `Patting the ${animal}`;\n}\n\npat(\"cat\");\npat(\"cat\");\npat(\"dog\");\npat(\"cat\");\n```\n\n### console.trace() Example\n```yaml\nfunction foo() {\n  function bar() {\n    console.trace();\n  }\n  bar();\n}\n\nfoo();\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/debugging_with_console_tutorial", "title": "Better debugging with the console API", "description": "This page covers various methods of the console API in Deno, including console.log(), console.table(), timer methods, console.count(), and console.trace(), to enhance debugging capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:08:25", "type": "code_examples", "page_metadata": {"twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogTitle": "Better debugging with the console API", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Better debugging with the console API", "title": "Better debugging with the console API", "og:image": "/img/og.webp", "og:type": "article", "twitter:title": "Better debugging with the console API", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "5e6e334e-67f6-48d6-9c72-8eb0a288c704", "sourceURL": "https://docs.deno.com/examples/debugging_with_console_tutorial", "url": "https://docs.deno.com/examples/debugging_with_console_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Better debugging with the console API\"?\n\nAssistant: Here are the recommended best practices:\n\n• Utilize console.table() for structured data output to enhance readability.\n• Use console.time() and console.timeEnd() to measure performance accurately.\n• Employ console.count() to keep track of function calls or specific operations easily.\n", "metadata": {"source_url": "https://docs.deno.com/examples/debugging_with_console_tutorial", "title": "Better debugging with the console API", "description": "This page covers various methods of the console API in Deno, including console.log(), console.table(), timer methods, console.count(), and console.trace(), to enhance debugging capabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:08:25", "type": "best_practices", "page_metadata": {"twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogTitle": "Better debugging with the console API", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Better debugging with the console API", "title": "Better debugging with the console API", "og:image": "/img/og.webp", "og:type": "article", "twitter:title": "Better debugging with the console API", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "5e6e334e-67f6-48d6-9c72-8eb0a288c704", "sourceURL": "https://docs.deno.com/examples/debugging_with_console_tutorial", "url": "https://docs.deno.com/examples/debugging_with_console_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Getting the Deno version\"?\n\nAssistant: How to examine the version of Deno being used.\n\nHere's a detailed explanation:\n\n\n## Examining Deno Version\nTo print the current version of Deno, just reach into the Deno global object where all non-web-standard APIs reside.\n\n## Accessing Dependencies Versions\nDeno has two main dependencies: the V8 JavaScript engine (from the Chrome web browser) and the TypeScript compiler. The versions of these are also accessible in the `Deno.version` object.\n\n## Running the Example\nRun this example locally using the Deno CLI:\n\n## Additional Resources\n- [Doc: Deno.version](https://docs.deno.com/api/deno/~/Deno.version)\n", "metadata": {"source_url": "https://docs.deno.com/examples/deno_version", "title": "Getting the Deno version", "description": "How to examine the version of Deno being used.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 23:08:32", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Getting the Deno version", "twitter:card": "summary_large_image", "twitter:title": "Getting the Deno version", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "title": "Getting the Deno version", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Getting the Deno version", "language": "en", "ogImage": "/img/og.webp", "scrapeId": "77d1293c-66ae-4df0-abf8-1709a30ced0e", "sourceURL": "https://docs.deno.com/examples/deno_version", "url": "https://docs.deno.com/examples/deno_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Getting the Deno version\"?\n\nAssistant: Here are some code examples:\n\n### Print Current Deno Version\n```yaml\nconsole.log(\"Current Deno version\", Deno.version.deno);\n```\n\n### Print Current TypeScript Version\n```yaml\nconsole.log(\"Current TypeScript version\", Deno.version.typescript);\n```\n\n### Print Current V8 Version\n```yaml\nconsole.log(\"Current V8 version\", Deno.version.v8);\n```\n\n### Run Example Locally\n```yaml\ndeno run https://docs.deno.com/examples/scripts/deno_version.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/deno_version", "title": "Getting the Deno version", "description": "How to examine the version of Deno being used.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 23:08:32", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Getting the Deno version", "twitter:card": "summary_large_image", "twitter:title": "Getting the Deno version", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "title": "Getting the Deno version", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Getting the Deno version", "language": "en", "ogImage": "/img/og.webp", "scrapeId": "77d1293c-66ae-4df0-abf8-1709a30ced0e", "sourceURL": "https://docs.deno.com/examples/deno_version", "url": "https://docs.deno.com/examples/deno_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"AES Encryption and Decryption\"?\n\nAssistant: This example demonstrates AES encryption and decryption using Deno's built-in SubtleCrypto API.\n\nHere's a detailed explanation:\n\n\n## Define the text to be encrypted\n```javascript\nconst text = \"Hello, Deno 2!\";\n```\n\n## Convert the text to a Uint8Array using TextEncoder\n```javascript\nconst encoder = new TextEncoder();\nconst data = encoder.encode(text);\n```\n\n## Generate an AES-GCM key for encryption and decryption\nWe used AES-GCM in this example as it is a widely used encryption mode, but you can also use modes like AES-CBC or AES-CTR for different use cases.\n\n```javascript\nconst key = await crypto.subtle.generateKey(\n  {\n    name: \"AES-GCM\",\n    length: 256, // 256-bit encryption key for strong security\n  },\n  true, // The key is extractable for encryption and decryption\n  [\"encrypt\", \"decrypt\"], // Key usages: encryption and decryption\n);\n```\n\n## Generate a random initialization vector (IV) for AES-GCM\nThe IV must be unique for each encryption operation but doesn't need to be secret.\n\n```javascript\nconst iv = crypto.getRandomValues(new Uint8Array(12)); // 12-byte IV for AES-GCM\n```\n\n## Encrypt the text using AES-GCM\n```javascript\nconst encryptedData = await crypto.subtle.encrypt(\n  {\n    name: \"AES-GCM\",\n    iv: iv, // Initialization vector must be unique for each encryption\n  },\n  key, // The generated key\n  data, // The text data to encrypt\n);\n\nconsole.log(\"Encrypted Data:\", new Uint8Array(encryptedData)); // Log the encrypted result as a byte array\n```\n\n## Decrypt the encrypted data back to plaintext\nusing the same IV and key. The IV and Key used for decryption must the same as used for encryption\n\n```javascript\nconst decryptedData = await crypto.subtle.decrypt(\n  {\n    name: \"AES-GCM\",\n    iv: iv, // Same IV used for encryption\n  },\n  key, // The same key used for encryption\n  encryptedData, // The encrypted data to decrypt\n);\n```\n\n## Convert the decrypted data back to a string using TextDecoder\n```javascript\nconst decryptedText = new TextDecoder().decode(decryptedData);\nconsole.log(\"Decrypted Text:\", decryptedText);\n```\n\n## Run this example locally using the Deno CLI\n```bash\ndeno run https://docs.deno.com/examples/scripts/aes_encryption.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/aes_encryption", "title": "AES Encryption and Decryption", "description": "This example demonstrates AES encryption and decryption using Deno's built-in SubtleCrypto API.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:08:47", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "title": "AES Encryption and Decryption", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:type": "article", "og:site_name": "Deno", "language": "en", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "AES Encryption and Decryption", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "AES Encryption and Decryption", "twitter:title": "AES Encryption and Decryption", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "scrapeId": "6b942cfb-bf6e-48f0-aea7-4ccf3c2c3efe", "sourceURL": "https://docs.deno.com/examples/aes_encryption", "url": "https://docs.deno.com/examples/aes_encryption/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"AES Encryption and Decryption\"?\n\nAssistant: Here are some code examples:\n\n### Define the text to be encrypted\n```yaml\nconst text = \"Hello, Deno 2!\";\n```\n\n### Convert the text to a Uint8Array using TextEncoder\n```yaml\nconst encoder = new TextEncoder();\nconst data = encoder.encode(text);\n```\n\n### Generate an AES-GCM key for encryption and decryption\n```yaml\nconst key = await crypto.subtle.generateKey(\n  {\n    name: \"AES-GCM\",\n    length: 256, // 256-bit encryption key for strong security\n  },\n  true, // The key is extractable for encryption and decryption\n  [\"encrypt\", \"decrypt\"], // Key usages: encryption and decryption\n);\n```\n\n### Generate a random initialization vector (IV) for AES-GCM\n```yaml\nconst iv = crypto.getRandomValues(new Uint8Array(12)); // 12-byte IV for AES-GCM\n```\n\n### Encrypt the text using AES-GCM\n```yaml\nconst encryptedData = await crypto.subtle.encrypt(\n  {\n    name: \"AES-GCM\",\n    iv: iv, // Initialization vector must be unique for each encryption\n  },\n  key, // The generated key\n  data, // The text data to encrypt\n);\n\nconsole.log(\"Encrypted Data:\", new Uint8Array(encryptedData)); // Log the encrypted result as a byte array\n```\n\n### Decrypt the encrypted data back to plaintext\n```yaml\nconst decryptedData = await crypto.subtle.decrypt(\n  {\n    name: \"AES-GCM\",\n    iv: iv, // Same IV used for encryption\n  },\n  key, // The same key used for encryption\n  encryptedData, // The encrypted data to decrypt\n);\n```\n\n### Convert the decrypted data back to a string using TextDecoder\n```yaml\nconst decryptedText = new TextDecoder().decode(decryptedData);\nconsole.log(\"Decrypted Text:\", decryptedText);\n```\n\n### Run this example locally using the Deno CLI\n```yaml\ndeno run https://docs.deno.com/examples/scripts/aes_encryption.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/aes_encryption", "title": "AES Encryption and Decryption", "description": "This example demonstrates AES encryption and decryption using Deno's built-in SubtleCrypto API.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:08:47", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "title": "AES Encryption and Decryption", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:type": "article", "og:site_name": "Deno", "language": "en", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "AES Encryption and Decryption", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "AES Encryption and Decryption", "twitter:title": "AES Encryption and Decryption", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "scrapeId": "6b942cfb-bf6e-48f0-aea7-4ccf3c2c3efe", "sourceURL": "https://docs.deno.com/examples/aes_encryption", "url": "https://docs.deno.com/examples/aes_encryption/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"AES Encryption and Decryption\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use AES-GCM for strong security with a 256-bit key.\n• Ensure the initialization vector (IV) is unique for each encryption operation.\n", "metadata": {"source_url": "https://docs.deno.com/examples/aes_encryption", "title": "AES Encryption and Decryption", "description": "This example demonstrates AES encryption and decryption using Deno's built-in SubtleCrypto API.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:08:47", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "title": "AES Encryption and Decryption", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:type": "article", "og:site_name": "Deno", "language": "en", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "AES Encryption and Decryption", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "AES Encryption and Decryption", "twitter:title": "AES Encryption and Decryption", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "scrapeId": "6b942cfb-bf6e-48f0-aea7-4ccf3c2c3efe", "sourceURL": "https://docs.deno.com/examples/aes_encryption", "url": "https://docs.deno.com/examples/aes_encryption/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Writing tests\"?\n\nAssistant: One of the most common tasks in developing software is writing tests for existing code. Deno has a built-in test runner which makes this very easy.\n\nHere's a detailed explanation:\n\n\n## Introduction\nOne of the most common tasks in developing software is writing tests for existing code. Deno has a built-in test runner which makes this very easy.\n\n## Basic Test Example\nFirst, we import assert statements from the standard library. There are quite a few options but we will just import the most common ones here.\n\n```javascript\nimport { assert, assertEquals } from \"jsr:@std/assert\";\n```\n\nThe most simple way to use the test runner is to just pass it a description and a callback function\n\n```javascript\nDeno.test(\"assert works correctly\", () => {\n  assert(true);\n  assertEquals(1, 1);\n});\n```\n\n## Complex Test Example\nIn more complex scenarios, we often need to have some setup and teardown code with some steps in between. This is also made simple with the built-in test runner.\n\n```javascript\nDeno.test(\"testing steps\", async (t) => {\n  const file = await Deno.open(\"example.txt\", {\n    read: true,\n    write: true,\n    create: true,\n  });\n  const encoder = new TextEncoder();\n  const data = encoder.encode(\"Hello world!\");\n\n  await t.step(\"write some bytes\", async () => {\n    const bytesWritten = await file.write(data);\n    assertEquals(bytesWritten, data.length);\n    await file.seek(0, Deno.SeekMode.Start);\n  });\n\n  await t.step(\"read some bytes\", async () => {\n    const buffer = new Uint8Array(data.length);\n    await file.read(buffer);\n    assertEquals(buffer, data);\n  });\n\n  file.close();\n});\n```\n\n## Disabling Resource Sanitization\nThe test runner by default makes it very hard to shoot yourself in the foot. For each test, the test runner checks to make sure all resources created during the test are freed. There are situations where this is not useful behavior. We can use the more complex test definition to disable this behavior\n\n```javascript\nDeno.test({\n  name: \"leaky test\",\n  async fn() {\n    await Deno.open(\"example.txt\");\n  },\n  sanitizeResources: false,\n});\n```\n\n## Running Tests\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/writing_tests.ts) locally using the Deno CLI:\n\n```bash\ndeno test --allow-read --allow-write https://github.com/denoland/deno-docs/blob/main/examples/scripts/writing_tests.ts\n```\n\n## Additional Resources\n- [Doc: Deno.test](https://docs.deno.com/api/deno/~/Deno.test)\n- [Doc: @std/assert](https://jsr.io/@std/assert/doc)\n", "metadata": {"source_url": "https://docs.deno.com/examples/writing_tests", "title": "Writing tests", "description": "One of the most common tasks in developing software is writing tests for existing code. Deno has a built-in test runner which makes this very easy.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:09:02", "type": "overview", "page_metadata": {"title": "Writing tests", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:title": "Writing tests", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:title": "Writing tests", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Writing tests", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "scrapeId": "18025050-aec3-49e0-8330-8743d277ff4e", "sourceURL": "https://docs.deno.com/examples/writing_tests", "url": "https://docs.deno.com/examples/writing_tests/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Writing tests\"?\n\nAssistant: Here are some code examples:\n\n### Importing Assert Statements\n```yaml\nimport { assert, assertEquals } from \"jsr:@std/assert\";\n```\n\n### Basic Test Example\n```yaml\nDeno.test(\"assert works correctly\", () => {\n  assert(true);\n  assertEquals(1, 1);\n});\n```\n\n### Complex Test Example\n```yaml\nDeno.test(\"testing steps\", async (t) => {\n  const file = await Deno.open(\"example.txt\", {\n    read: true,\n    write: true,\n    create: true,\n  });\n  const encoder = new TextEncoder();\n  const data = encoder.encode(\"Hello world!\");\n\n  await t.step(\"write some bytes\", async () => {\n    const bytesWritten = await file.write(data);\n    assertEquals(bytesWritten, data.length);\n    await file.seek(0, Deno.SeekMode.Start);\n  });\n\n  await t.step(\"read some bytes\", async () => {\n    const buffer = new Uint8Array(data.length);\n    await file.read(buffer);\n    assertEquals(buffer, data);\n  });\n\n  file.close();\n});\n```\n\n### Disabling Resource Sanitization\n```yaml\nDeno.test({\n  name: \"leaky test\",\n  async fn() {\n    await Deno.open(\"example.txt\");\n  },\n  sanitizeResources: false,\n});\n```\n\n### Running Tests\n```yaml\ndeno test --allow-read --allow-write https://github.com/denoland/deno-docs/blob/main/examples/scripts/writing_tests.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/writing_tests", "title": "Writing tests", "description": "One of the most common tasks in developing software is writing tests for existing code. Deno has a built-in test runner which makes this very easy.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:09:02", "type": "code_examples", "page_metadata": {"title": "Writing tests", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:title": "Writing tests", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:title": "Writing tests", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Writing tests", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "scrapeId": "18025050-aec3-49e0-8330-8743d277ff4e", "sourceURL": "https://docs.deno.com/examples/writing_tests", "url": "https://docs.deno.com/examples/writing_tests/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Writing tests\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the built-in test runner for easy test creation.\n• Import only the necessary assert statements from the standard library.\n• Utilize setup and teardown code for complex test scenarios.\n• Disable resource sanitization only when necessary.\n", "metadata": {"source_url": "https://docs.deno.com/examples/writing_tests", "title": "Writing tests", "description": "One of the most common tasks in developing software is writing tests for existing code. Deno has a built-in test runner which makes this very easy.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:09:02", "type": "best_practices", "page_metadata": {"title": "Writing tests", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:title": "Writing tests", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:title": "Writing tests", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Writing tests", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "scrapeId": "18025050-aec3-49e0-8330-8743d277ff4e", "sourceURL": "https://docs.deno.com/examples/writing_tests", "url": "https://docs.deno.com/examples/writing_tests/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Manipulating byte arrays\"?\n\nAssistant: When working with lower-level data we often deal with byte arrays in the form of Uint8Arrays. There are some common manipulations and queries that can be done and are included with the standard library.\n\nHere's a detailed explanation:\n\n\n## Initializing byte arrays\nLet's initialize some byte arrays\n\n```javascript\nconst a = new Uint8Array([0, 1, 2, 3, 4]);\nconst b = new Uint8Array([5, 6, 7, 8, 9]);\nconst c = new Uint8Array([4, 5]);\n```\n\n## Concatenating byte arrays\nWe can concatenate two byte arrays using the concat method\n\n```javascript\nimport { concat } from \"jsr:@std/bytes/concat\";\nconst d = concat([a, b]);\nconsole.log(d); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n## Repeating bytes\nSometimes we need to repeat certain bytes\n\n```javascript\nimport { repeat } from \"jsr:@std/bytes/repeat\";\nconsole.log(repeat(c, 4)); // [4, 5, 4, 5, 4, 5, 4, 5]\n```\n\n## Copying byte arrays\nSometimes we need to mutate a Uint8Array and need a copy\n\n```javascript\nimport { copy } from \"jsr:@std/bytes/copy\";\nconst cpy = new Uint8Array(5);\nconsole.log(\"Bytes copied:\", copy(b, cpy)); // 5\nconsole.log(\"Bytes:\", cpy); // [5, 6, 7, 8, 9]\n```\n\n## Running the example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/byte_manipulation.ts) locally using the Deno CLI:\n\n```bash\ndeno run https://docs.deno.com/examples/scripts/byte_manipulation.ts\n```\n\n## Additional resources\n- [Doc: @std/bytes](https://jsr.io/@std/bytes/doc)\n", "metadata": {"source_url": "https://docs.deno.com/examples/byte_manipulation", "title": "Manipulating byte arrays", "description": "When working with lower-level data we often deal with byte arrays in the form of Uint8Arrays. There are some common manipulations and queries that can be done and are included with the standard library.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:09:17", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:image": "/img/og.webp", "twitter:title": "Manipulating byte arrays", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Manipulating byte arrays", "og:title": "Manipulating byte arrays", "language": "en", "title": "Manipulating byte arrays", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:image": "/img/og.webp", "scrapeId": "ee8972b3-5c27-4bc3-bd1f-749c2a228bcd", "sourceURL": "https://docs.deno.com/examples/byte_manipulation", "url": "https://docs.deno.com/examples/byte_manipulation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Manipulating byte arrays\"?\n\nAssistant: Here are some code examples:\n\n### Initializing byte arrays\n```yaml\nconst a = new Uint8Array([0, 1, 2, 3, 4]);\nconst b = new Uint8Array([5, 6, 7, 8, 9]);\nconst c = new Uint8Array([4, 5]);\n```\n\n### Concatenating byte arrays\n```yaml\nimport { concat } from \"jsr:@std/bytes/concat\";\nconst d = concat([a, b]);\nconsole.log(d); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Repeating bytes\n```yaml\nimport { repeat } from \"jsr:@std/bytes/repeat\";\nconsole.log(repeat(c, 4)); // [4, 5, 4, 5, 4, 5, 4, 5]\n```\n\n### Copying byte arrays\n```yaml\nimport { copy } from \"jsr:@std/bytes/copy\";\nconst cpy = new Uint8Array(5);\nconsole.log(\"Bytes copied:\", copy(b, cpy)); // 5\nconsole.log(\"Bytes:\", cpy); // [5, 6, 7, 8, 9]\n```\n\n### Running the example\n```yaml\ndeno run https://docs.deno.com/examples/scripts/byte_manipulation.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/byte_manipulation", "title": "Manipulating byte arrays", "description": "When working with lower-level data we often deal with byte arrays in the form of Uint8Arrays. There are some common manipulations and queries that can be done and are included with the standard library.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:09:17", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:image": "/img/og.webp", "twitter:title": "Manipulating byte arrays", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Manipulating byte arrays", "og:title": "Manipulating byte arrays", "language": "en", "title": "Manipulating byte arrays", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:image": "/img/og.webp", "scrapeId": "ee8972b3-5c27-4bc3-bd1f-749c2a228bcd", "sourceURL": "https://docs.deno.com/examples/byte_manipulation", "url": "https://docs.deno.com/examples/byte_manipulation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Manipulating byte arrays\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use Uint8Array for lower-level data manipulation.\n• Utilize the standard library for common byte array operations.\n", "metadata": {"source_url": "https://docs.deno.com/examples/byte_manipulation", "title": "Manipulating byte arrays", "description": "When working with lower-level data we often deal with byte arrays in the form of Uint8Arrays. There are some common manipulations and queries that can be done and are included with the standard library.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:09:17", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:image": "/img/og.webp", "twitter:title": "Manipulating byte arrays", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Manipulating byte arrays", "og:title": "Manipulating byte arrays", "language": "en", "title": "Manipulating byte arrays", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:image": "/img/og.webp", "scrapeId": "ee8972b3-5c27-4bc3-bd1f-749c2a228bcd", "sourceURL": "https://docs.deno.com/examples/byte_manipulation", "url": "https://docs.deno.com/examples/byte_manipulation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Your Deno Dev Environment\"?\n\nAssistant: How to set up your development environment for Deno\n\nHere's a detailed explanation:\n\n\n## Description of video\nHow to set up your development environment for Deno\n\n## Transcript and code\nTo install Deno, we'll run curl. So we're going to grab this curl command from the documentation.\n\n```highlight notranslate shell\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\nWe'll go to our terminal, we'll paste that in, hit enter, and this will install Deno in the background to the most recent version. When I do this, it'll ask me if I want to add Deno to the path. We'll go ahead and say yes, and you can add these setup completions here.\n\nAnd now we have installed this to our path. If you're on Windows, there are installation instructions for you here in the documentation.\n\nTo generate a Deno project from scratch, let's go ahead and type `deno init MyDenoProject`. This is going to create that folder for me. I can then cd into that folder. Now if we open this up in VSCode, this has created a `deno.json` file, a `main_test.ts` file, and a `main.ts` file. So this is a quick way of getting started.\n\nIf you're using VSCode, there are a few configuration options that you'll want to set up. So we'll go up here to code and settings. We'll select extensions. So over here in your extensions, you're going to search for Deno, and then we'll select the one that has been created by Denoland here.\n\n```highlight notranslate javascript\n{\n  \"deno.enable\": true,\n}\n```\n\nWe're going to run install, and this will install our Deno land extension. Next we'll type `command shift P`. This will open up our command palette here, and we can type `deno initialize workspace configuration`. We're going to go ahead and click that. That's going to generate this VSCode folder with settings. This is going to enable hints and autocomplete and all of that right here in the code editor. So if I start to type anything from `deno serve`, for example, that's going to give me a look at what the expected parameters of that function are. That's very helpful.\n\nThis is also going to give us hints when importing. So we'll say import star as path from JSR at standard slash path.\n\n```highlight notranslate javascript\nimport * as path from \"jsr:@std/path\";\n```\n\nSo all of them are listed there. Pretty cool. And then if we wanted to do something for a remote module, something like OpenAI from https://deno.land/x/openai@v4.67.1/mod.ts (or now, even better, from JSR)\n\n```highlight notranslate javascript\nimport OpenAI from \"jsr:@openai/openai\";\n```\n\nThis is then going to give us the standard library as well as X for all of those third party APIs. So you can actually drill down into OpenAI from here. You just need to select the version, so we'll say OpenAI at v461. And then you can even drill down into that individual file.\n\nIf you take a look at the documentation here, this will guide you through the process of setting up your own unique environment. There are shell completions that you can add, so depending on which CLI tool you're using, you can set this up over here, whether it's Bash or PowerShell or ZShell or whatever it might be.\n\nFind more videos in the Examples page and on our YouTube channel.\n", "metadata": {"source_url": "https://docs.deno.com/examples/deno_dev_environment", "title": "Your Deno Dev Environment", "description": "How to set up your development environment for Deno", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:09:34", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:image": "/img/og.webp", "ogLocale": "en_US", "ogTitle": "Your Deno Dev Environment", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:title": "Your Deno Dev Environment", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "Your Deno Dev Environment", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "title": "Your Deno Dev Environment", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "88a4e074-2d96-4295-97ce-be5c00cfcf29", "sourceURL": "https://docs.deno.com/examples/deno_dev_environment", "url": "https://docs.deno.com/examples/deno_dev_environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Your Deno Dev Environment\"?\n\nAssistant: Here are some code examples:\n\n### Install Deno\n```yaml\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n### VSCode Deno Configuration\n```yaml\n{\n  \"deno.enable\": true,\n}\n```\n\n### Importing Path Module\n```yaml\nimport * as path from \"jsr:@std/path\";\n```\n\n### Importing OpenAI Module\n```yaml\nimport OpenAI from \"jsr:@openai/openai\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/deno_dev_environment", "title": "Your Deno Dev Environment", "description": "How to set up your development environment for Deno", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:09:34", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:image": "/img/og.webp", "ogLocale": "en_US", "ogTitle": "Your Deno Dev Environment", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:title": "Your Deno Dev Environment", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "Your Deno Dev Environment", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "title": "Your Deno Dev Environment", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "88a4e074-2d96-4295-97ce-be5c00cfcf29", "sourceURL": "https://docs.deno.com/examples/deno_dev_environment", "url": "https://docs.deno.com/examples/deno_dev_environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Your Deno Dev Environment\"?\n\nAssistant: Here are the recommended best practices:\n\n• Add Deno to your path during installation for easier access.\n• Use `deno init MyDenoProject` to quickly set up a new Deno project.\n• Install the Deno extension in VSCode for enhanced development experience.\n• Use the command palette in VSCode to initialize workspace configuration for Deno.\n", "metadata": {"source_url": "https://docs.deno.com/examples/deno_dev_environment", "title": "Your Deno Dev Environment", "description": "How to set up your development environment for Deno", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:09:34", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:image": "/img/og.webp", "ogLocale": "en_US", "ogTitle": "Your Deno Dev Environment", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:title": "Your Deno Dev Environment", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "Your Deno Dev Environment", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "title": "Your Deno Dev Environment", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "88a4e074-2d96-4295-97ce-be5c00cfcf29", "sourceURL": "https://docs.deno.com/examples/deno_dev_environment", "url": "https://docs.deno.com/examples/deno_dev_environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Built-in TypeScript support\"?\n\nAssistant: Deno natively understands TypeScript code with no compiler to configure. Start writing code in .ts files, and the runtime will work with them just fine.\n\nHere's a detailed explanation:\n\n\n## Define an interface in TypeScript\n```typescript\ninterface Person {\n  name: string;\n  age: number;\n}\n```\n\n## Provide a typed input to a function\n```typescript\nfunction greet(person: Person) {\n  return \"Hello, \" + person.name + \"!\";\n}\n```\n\n## Everything works with zero config!\n```typescript\nconsole.log(greet({ name: \"Alice\", age: 36 }));\n```\n\n## Run this example locally using the Deno CLI\n```bash\ndeno run https://docs.deno.com/examples/scripts/typescript_support.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/typescript_support", "title": "Built-in TypeScript support", "description": "Deno natively understands TypeScript code with no compiler to configure. Start writing code in .ts files, and the runtime will work with them just fine.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:09:42", "type": "overview", "page_metadata": {"og:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "language": "en", "title": "Built-in TypeScript support", "ogTitle": "Built-in TypeScript support", "og:title": "Built-in TypeScript support", "og:type": "article", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Built-in TypeScript support", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "scrapeId": "23e94f00-14d3-49d6-b1a3-eb391a5e1967", "sourceURL": "https://docs.deno.com/examples/typescript_support", "url": "https://docs.deno.com/examples/typescript_support/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Built-in TypeScript support\"?\n\nAssistant: Here are some code examples:\n\n### Define an interface in TypeScript\n```yaml\n```typescript\ninterface Person {\n  name: string;\n  age: number;\n}\n```\n```\n\n### Provide a typed input to a function\n```yaml\n```typescript\nfunction greet(person: Person) {\n  return \"Hello, \" + person.name + \"!\";\n}\n```\n```\n\n### Everything works with zero config!\n```yaml\n```typescript\nconsole.log(greet({ name: \"Alice\", age: 36 }));\n```\n```\n\n### Run this example locally using the Deno CLI\n```yaml\n```bash\ndeno run https://docs.deno.com/examples/scripts/typescript_support.ts\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/typescript_support", "title": "Built-in TypeScript support", "description": "Deno natively understands TypeScript code with no compiler to configure. Start writing code in .ts files, and the runtime will work with them just fine.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:09:42", "type": "code_examples", "page_metadata": {"og:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "language": "en", "title": "Built-in TypeScript support", "ogTitle": "Built-in TypeScript support", "og:title": "Built-in TypeScript support", "og:type": "article", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Built-in TypeScript support", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "scrapeId": "23e94f00-14d3-49d6-b1a3-eb391a5e1967", "sourceURL": "https://docs.deno.com/examples/typescript_support", "url": "https://docs.deno.com/examples/typescript_support/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Built-in TypeScript support\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno natively understands TypeScript code with no compiler to configure.\n• Start writing code in .ts files, and the runtime will work with them just fine.\n", "metadata": {"source_url": "https://docs.deno.com/examples/typescript_support", "title": "Built-in TypeScript support", "description": "Deno natively understands TypeScript code with no compiler to configure. Start writing code in .ts files, and the runtime will work with them just fine.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:09:42", "type": "best_practices", "page_metadata": {"og:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "og:locale": "en_US", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "language": "en", "title": "Built-in TypeScript support", "ogTitle": "Built-in TypeScript support", "og:title": "Built-in TypeScript support", "og:type": "article", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Built-in TypeScript support", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "scrapeId": "23e94f00-14d3-49d6-b1a3-eb391a5e1967", "sourceURL": "https://docs.deno.com/examples/typescript_support", "url": "https://docs.deno.com/examples/typescript_support/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build a React app\"?\n\nAssistant: This page provides resources and links to build a React application using Deno.\n\nHere's a detailed explanation:\n\n\n## Video Resources\nFind more videos in the Examples page and on our YouTube channel.\n", "metadata": {"source_url": "https://docs.deno.com/examples/react_app_video", "title": "Build a React app", "description": "This page provides resources and links to build a React application using Deno.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:09:45", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Build a React app", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogTitle": "Build a React app", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:title": "Build a React app", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "1984f625-98be-4011-8ba7-e46796b1a9b3", "sourceURL": "https://docs.deno.com/examples/react_app_video", "url": "https://docs.deno.com/examples/react_app_video/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Build a React app\"?\n\nAssistant: Here are the recommended best practices:\n\n• Check the Examples page for more resources.\n• Visit our YouTube channel for video tutorials.\n", "metadata": {"source_url": "https://docs.deno.com/examples/react_app_video", "title": "Build a React app", "description": "This page provides resources and links to build a React application using Deno.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:09:45", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Build a React app", "ogLocale": "en_US", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogTitle": "Build a React app", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:title": "Build a React app", "viewport": "width=device-width, initial-scale=1", "og:title": "Build a React app", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "1984f625-98be-4011-8ba7-e46796b1a9b3", "sourceURL": "https://docs.deno.com/examples/react_app_video", "url": "https://docs.deno.com/examples/react_app_video/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Configuration with Deno JSON\"?\n\nAssistant: This page covers the configuration process using Deno with JSON.\n\nHere's a detailed explanation:\n\n\n## Play\nFind more videos in the [Examples page](https://docs.deno.com/examples/) and on our [YouTube channel](https://www.youtube.com/@deno_land).\n\n## Did you find what you needed?\nYesNo [Edit this page](https://github.com/denoland/docs/edit/main/examples/videos/configuration_with_deno_json.md)\n", "metadata": {"source_url": "https://docs.deno.com/examples/configuration_with_deno_json", "title": "Configuration with Deno JSON", "description": "This page covers the configuration process using Deno with JSON.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:10:11", "type": "overview", "page_metadata": {"language": "en", "title": "Configuration with Deno JSON", "ogTitle": "Configuration with Deno JSON", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:title": "Configuration with Deno JSON", "og:title": "Configuration with Deno JSON", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "scrapeId": "5212c9ba-127d-4869-bacd-388f3ee82b09", "sourceURL": "https://docs.deno.com/examples/configuration_with_deno_json", "url": "https://docs.deno.com/examples/configuration_with_deno_json/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Configuration with Deno JSON\"?\n\nAssistant: Here are the recommended best practices:\n\n• Feedback received. ✅\n• Any additional comments? ( _optional_ )\n• Email address ( _optional_ )\n• Send additional feedback\n• [Privacy policy](https://docs.deno.com/deploy/manual/privacy-policy)\n", "metadata": {"source_url": "https://docs.deno.com/examples/configuration_with_deno_json", "title": "Configuration with Deno JSON", "description": "This page covers the configuration process using Deno with JSON.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:10:11", "type": "best_practices", "page_metadata": {"language": "en", "title": "Configuration with Deno JSON", "ogTitle": "Configuration with Deno JSON", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:title": "Configuration with Deno JSON", "og:title": "Configuration with Deno JSON", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "scrapeId": "5212c9ba-127d-4869-bacd-388f3ee82b09", "sourceURL": "https://docs.deno.com/examples/configuration_with_deno_json", "url": "https://docs.deno.com/examples/configuration_with_deno_json/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"How to use Apollo with Deno\"?\n\nAssistant: Apollo Server is a GraphQL server that you can set up in minutes and use with your existing data source (or REST API). You can then connect any GraphQL client to it to receive the data and take advantage of GraphQL benefits, such as type-checking and efficient fetching.\n\nHere's a detailed explanation:\n\n\n## schema.ts\nOur `schema.ts` file describes our data. In this case, our data is a list of dinosaurs. We want our users to be able to get the name and a short description of each dino. In GraphQL language, this means that `Dinosaur` is our **type**, and `name` and `description` are our **fields**. We can also define the data type for each field. In this case, both are strings.\n\nThis is also where we describe the queries we allow for our data, using the special **Query** type in GraphQL. We have two queries:\n\n- `dinosaurs` which gets a list of all dinosaurs\n- `dinosaur` which takes in the `name` of a dinosaur as an argument and returns information about that one type of dinosaur.\n\nWe're going to export all this within our `typeDefs` type definitions, variable:\n\n```highlight notranslate tsx\nexport const typeDefs = `\n  type Dinosaur {\n    name: String\n    description: String\n  }\n\n  type Query {\n    dinosaurs: [Dinosaur]\n\t\tdinosaur(name: String): Dinosaur\n  }\n`;\n```\n\nIf we wanted to write data, this is also where we would describe the **Mutation** to do so. Mutations are how you write data with GraphQL. Because we are using a static dataset here, we won't be writing anything.\n\n## resolvers.ts\nA resolver is responsible for populating the data for each query. Here we have our list of dinosaurs and all the resolver is going to do is either a) pass that entire list to the client if the user requests the `dinosaurs` query, or pass just one if the user requests the `dinosaur` query.\n\n```highlight notranslate tsx\nconst dinosaurs = [\\\n  {\\\n    name: \"Aardonyx\",\\\n    description: \"An early stage in the evolution of sauropods.\",\\\n  },\\\n  {\\\n    name: \"Abelisaurus\",\\\n    description: '\"Abel\\'s lizard\" has been reconstructed from a single skull.',\\\n  },\\\n];\n\nexport const resolvers = {\n  Query: {\n    dinosaurs: () => dinosaurs,\n    dinosaur: (_: any, args: any) => {\n      return dinosaurs.find((dinosaur) => dinosaur.name === args.name);\n    },\n  },\n};\n```\n\nWith the latter, we pass the arguments from the client into a function to match the name to a name in our dataset.\n\n## main.ts\nIn our `main.ts` we're going to import the `ApolloServer` as well as `graphql` and our `typeDefs` from the schema and our resolvers:\n\n```highlight notranslate tsx\nimport { ApolloServer } from \"npm:@apollo/server@^4.1\";\nimport { startStandaloneServer } from \"npm:@apollo/server@4.1/standalone\";\nimport { graphql } from \"npm:graphql@16.6\";\nimport { typeDefs } from \"./schema.ts\";\nimport { resolvers } from \"./resolvers.ts\";\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  listen: { port: 8000 },\n});\n\nconsole.log(`Server running on: ${url}`);\n```\n\nWe pass our `typeDefs` and `resolvers` to `ApolloServer` to spool up a new server. Finally, `startStandaloneServer` is a helper function to get the server up and running quickly.\n\n## Running the server\nAll that is left to do now is run the server:\n\n```highlight notranslate shell\ndeno run --allow-net --allow-read --allow-env main.ts\n```\n\nYou should see `Server running on: 127.0.0.1:8000` in your terminal. If you go to that address you will see the Apollo sandbox where we can enter our `dinosaurs` query:\n\n```highlight notranslate graphql\nquery {\n  dinosaurs {\n    name\n    description\n  }\n}\n```\n\nThis will return our dataset:\n\n```highlight notranslate graphql\n{\n  \"data\": {\n    \"dinosaurs\": [\\\n      {\\\n        \"name\": \"Aardonyx\",\\\n        \"description\": \"An early stage in the evolution of sauropods.\"\\\n      },\\\n      {\\\n        \"name\": \"Abelisaurus\",\\\n        \"description\": '\"Abel\\'s lizard\" has been reconstructed from a single skull.'\\\n      }\\\n    ]\n  }\n}\n```\n\nOr if we want just one `dinosaur`:\n\n```highlight notranslate graphql\nquery {\n  dinosaur(name:\"Aardonyx\") {\n    name\n    description\n  }\n}\n```\n\nWhich returns:\n\n```highlight notranslate graphql\n{\n  \"data\": {\n    \"dinosaur\": {\n      \"name\": \"Aardonyx\",\n      \"description\": \"An early stage in the evolution of sauropods.\"\n    }\n  }\n}\n```\n\nAwesome!\n", "metadata": {"source_url": "https://docs.deno.com/examples/apollo_tutorial", "title": "How to use Apollo with Deno", "description": "Apollo Server is a GraphQL server that you can set up in minutes and use with your existing data source (or REST API). You can then connect any GraphQL client to it to receive the data and take advantage of GraphQL benefits, such as type-checking and efficient fetching.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:10:40", "type": "overview", "page_metadata": {"og:locale": "en_US", "title": "How to use Apollo with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "How to use Apollo with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:site_name": "Deno", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "How to use Apollo with Deno", "og:title": "How to use Apollo with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "scrapeId": "45d3ee05-fbee-4f3c-8a64-2895945ab495", "sourceURL": "https://docs.deno.com/examples/apollo_tutorial", "url": "https://docs.deno.com/examples/apollo_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"How to use Apollo with Deno\"?\n\nAssistant: Here are some code examples:\n\n### Creating files\n```yaml\ntouch schema.ts resolvers.ts main.ts\n```\n\n### schema.ts type definitions\n```yaml\nexport const typeDefs = `\n  type Dinosaur {\n    name: String\n    description: String\n  }\n\n  type Query {\n    dinosaurs: [Dinosaur]\n\t\tdinosaur(name: String): Dinosaur\n  }\n`;\n`\n```\n\n### resolvers.ts implementation\n```yaml\nconst dinosaurs = [\\\n  {\\\n    name: \"Aardonyx\",\\\n    description: \"An early stage in the evolution of sauropods.\",\\\n  },\\\n  {\\\n    name: \"Abelisaurus\",\\\n    description: '\"Abel\\'s lizard\" has been reconstructed from a single skull.',\\\n  },\\\n];\n\nexport const resolvers = {\n  Query: {\n    dinosaurs: () => dinosaurs,\n    dinosaur: (_: any, args: any) => {\n      return dinosaurs.find((dinosaur) => dinosaur.name === args.name);\n    },\n  },\n};\n```\n\n### main.ts server setup\n```yaml\nimport { ApolloServer } from \"npm:@apollo/server@^4.1\";\nimport { startStandaloneServer } from \"npm:@apollo/server@4.1/standalone\";\nimport { graphql } from \"npm:graphql@16.6\";\nimport { typeDefs } from \"./schema.ts\";\nimport { resolvers } from \"./resolvers.ts\";\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n});\n\nconst { url } = await startStandaloneServer(server, {\n  listen: { port: 8000 },\n});\n\nconsole.log(`Server running on: ${url}`);\n```\n\n### Running the server command\n```yaml\ndeno run --allow-net --allow-read --allow-env main.ts\n```\n\n### dinosaurs query example\n```yaml\nquery {\n  dinosaurs {\n    name\n    description\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/apollo_tutorial", "title": "How to use Apollo with Deno", "description": "Apollo Server is a GraphQL server that you can set up in minutes and use with your existing data source (or REST API). You can then connect any GraphQL client to it to receive the data and take advantage of GraphQL benefits, such as type-checking and efficient fetching.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:10:40", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "title": "How to use Apollo with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "How to use Apollo with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:site_name": "Deno", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "How to use Apollo with Deno", "og:title": "How to use Apollo with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "scrapeId": "45d3ee05-fbee-4f3c-8a64-2895945ab495", "sourceURL": "https://docs.deno.com/examples/apollo_tutorial", "url": "https://docs.deno.com/examples/apollo_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"How to use Apollo with Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use type definitions to clearly define your data model in GraphQL.\n• Ensure your resolvers are correctly set up to handle queries and return the expected data.\n• Run the server with the necessary permissions using Deno's flags.\n", "metadata": {"source_url": "https://docs.deno.com/examples/apollo_tutorial", "title": "How to use Apollo with Deno", "description": "Apollo Server is a GraphQL server that you can set up in minutes and use with your existing data source (or REST API). You can then connect any GraphQL client to it to receive the data and take advantage of GraphQL benefits, such as type-checking and efficient fetching.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:10:40", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "title": "How to use Apollo with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "How to use Apollo with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:site_name": "Deno", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "How to use Apollo with Deno", "og:title": "How to use Apollo with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "scrapeId": "45d3ee05-fbee-4f3c-8a64-2895945ab495", "sourceURL": "https://docs.deno.com/examples/apollo_tutorial", "url": "https://docs.deno.com/examples/apollo_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"TCP Echo Server\"?\n\nAssistant: An echo server is a simple network application that listens for incoming connections and requests, and then repeats back any data it receives from clients.\n\nHere's a detailed explanation:\n\n\n## Introduction\nAn echo server is a simple network application that listens for incoming connections and requests, and then repeats back any data it receives from clients.\n\n## Testing the Example\nTo test this example, try sending data to it with Netcat (Linux/MacOS only). For example, in your terminal run: `echo \"Hello, Deno!\" | nc localhost 8080`.\n\n## Creating a TCP Listener\nCreate a TCP listener that listens on port 8080. Log that it is listening.\n\n```javascript\nconst listener = Deno.listen({ port: 8080 });\nconsole.log(\"listening on 0.0.0.0:8080\");\n```\n\n## Handling Connections\nWait for incoming connections. When a client connects to the server, read data from the client and write it back to the client.\n\n```javascript\nfor await (const conn of listener) {\n  conn.readable.pipeTo(conn.writable);\n}\n```\n\n## Running the Example\nRun this example locally using the Deno CLI:\n\n```\ndeno run --allow-net echo_server.ts\n```\n\n## Additional Resources\n- [Deno listen API docs](https://docs.deno.com/api/deno/~/Deno.listen)\n- [Readable connection API docs](https://docs.deno.com/api/deno/~/Deno.Conn#property_readable)\n- [Writable connection docs](https://docs.deno.com/api/deno/~/Deno.Conn#property_writable)\n", "metadata": {"source_url": "https://docs.deno.com/examples/tcp_echo_server", "title": "TCP Echo Server", "description": "An echo server is a simple network application that listens for incoming connections and requests, and then repeats back any data it receives from clients.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:10:50", "type": "overview", "page_metadata": {"og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogTitle": "TCP Echo Server", "title": "TCP Echo Server", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:title": "TCP Echo Server", "ogImage": "/img/og.webp", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "TCP Echo Server", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "scrapeId": "40b15e17-1bdf-49db-8990-f6c226723633", "sourceURL": "https://docs.deno.com/examples/tcp_echo_server", "url": "https://docs.deno.com/examples/tcp_echo_server/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"TCP Echo Server\"?\n\nAssistant: Here are some code examples:\n\n### Creating a TCP Listener\n```yaml\nconst listener = Deno.listen({ port: 8080 });\nconsole.log(\"listening on 0.0.0.0:8080\");\n```\n\n### Handling Connections\n```yaml\nfor await (const conn of listener) {\n  conn.readable.pipeTo(conn.writable);\n}\n```\n\n### Running the Example\n```yaml\ndeno run --allow-net echo_server.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/tcp_echo_server", "title": "TCP Echo Server", "description": "An echo server is a simple network application that listens for incoming connections and requests, and then repeats back any data it receives from clients.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:10:50", "type": "code_examples", "page_metadata": {"og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogTitle": "TCP Echo Server", "title": "TCP Echo Server", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:title": "TCP Echo Server", "ogImage": "/img/og.webp", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "TCP Echo Server", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "scrapeId": "40b15e17-1bdf-49db-8990-f6c226723633", "sourceURL": "https://docs.deno.com/examples/tcp_echo_server", "url": "https://docs.deno.com/examples/tcp_echo_server/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"TCP Echo Server\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use Netcat to test the echo server by sending data to it.\n• Ensure to run the server on a compatible environment (Linux/MacOS) for testing with Netcat.\n", "metadata": {"source_url": "https://docs.deno.com/examples/tcp_echo_server", "title": "TCP Echo Server", "description": "An echo server is a simple network application that listens for incoming connections and requests, and then repeats back any data it receives from clients.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:10:50", "type": "best_practices", "page_metadata": {"og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogTitle": "TCP Echo Server", "title": "TCP Echo Server", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:title": "TCP Echo Server", "ogImage": "/img/og.webp", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "TCP Echo Server", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "scrapeId": "40b15e17-1bdf-49db-8990-f6c226723633", "sourceURL": "https://docs.deno.com/examples/tcp_echo_server", "url": "https://docs.deno.com/examples/tcp_echo_server/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HMAC Generation and Verification\"?\n\nAssistant: This example demonstrates how to generate and verify an HMAC (Hash-based Message Authentication Code) using Deno's built-in SubtleCrypto API with the SHA-256 hash function.\n\nHere's a detailed explanation:\n\n\n## HMAC Generation and Verification\nDefine the secret key for HMAC (in a real application, store this securely)\n\n```javascript\nconst secret = \"supersecretkey\";\n```\n\nConvert the secret key to a Uint8Array using TextEncoder\n\n```javascript\nconst encoder = new TextEncoder();\nconst keyData = encoder.encode(secret);\n```\n\nImport the secret key into the SubtleCrypto API for HMAC operations\n\n```javascript\nconst key = await crypto.subtle.importKey(\n  \"raw\", // The format of the key\n  keyData, // The key data\n  { // Algorithm details\n    name: \"HMAC\",\n    hash: { name: \"SHA-256\" },\n  },\n  false, // Whether the key is extractable\n  [\"sign\", \"verify\"], // Key usages: Sign and Verify\n);\n```\n\nThe message to be authenticated\n\n```javascript\nconst message = \"Authenticate this message\";\n```\n\nConvert the message to a Uint8Array\n\n```javascript\nconst messageData = encoder.encode(message);\n```\n\nGenerate the HMAC signature for the message\n\n```javascript\nconst signature = await crypto.subtle.sign(\"HMAC\", key, messageData);\n```\n\nFunction to convert ArrayBuffer to hex string for readability only. This isn't part of the generation or verification\n\n```javascript\nfunction bufferToHex(buffer: ArrayBuffer): string {\n  const byteArray = new Uint8Array(buffer);\n  return Array.from(byteArray)\n    .map((byte) => byte.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n}\n```\n\nOutput the generated HMAC signature in hexadecimal format\n\n```javascript\nconsole.log(\"Generated HMAC:\", bufferToHex(signature));\n```\n\nVerify the HMAC signature\n\n```javascript\nconst isValid = await crypto.subtle.verify(\"HMAC\", key, signature, messageData);\n```\n\nOutput the verification result\n\n```javascript\nconsole.log(\"Is the HMAC valid?\", isValid);\n```\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/hmac_generate_verify.ts) locally using the Deno CLI:\n\n```bash\ndeno run https://docs.deno.com/examples/scripts/hmac_generate_verify.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/hmac_generate_verify", "title": "HMAC Generation and Verification", "description": "This example demonstrates how to generate and verify an HMAC (Hash-based Message Authentication Code) using Deno's built-in SubtleCrypto API with the SHA-256 hash function.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:11:05", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "title": "HMAC Generation and Verification", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:title": "HMAC Generation and Verification", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "ogTitle": "HMAC Generation and Verification", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:title": "HMAC Generation and Verification", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "1250f5d3-fbe2-455a-b32b-325c3f9b4312", "sourceURL": "https://docs.deno.com/examples/hmac_generate_verify", "url": "https://docs.deno.com/examples/hmac_generate_verify/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HMAC Generation and Verification\"?\n\nAssistant: Here are some code examples:\n\n### HMAC Generation Code\n```yaml\nconst secret = \"supersecretkey\";\nconst encoder = new TextEncoder();\nconst keyData = encoder.encode(secret);\nconst key = await crypto.subtle.importKey(\n  \"raw\",\n  keyData,\n  {\n    name: \"HMAC\",\n    hash: { name: \"SHA-256\" },\n  },\n  false,\n  [\"sign\", \"verify\"],\n);\nconst message = \"Authenticate this message\";\nconst messageData = encoder.encode(message);\nconst signature = await crypto.subtle.sign(\"HMAC\", key, messageData);\nconsole.log(\"Generated HMAC:\", bufferToHex(signature));\nconst isValid = await crypto.subtle.verify(\"HMAC\", key, signature, messageData);\nconsole.log(\"Is the HMAC valid?\", isValid);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/hmac_generate_verify", "title": "HMAC Generation and Verification", "description": "This example demonstrates how to generate and verify an HMAC (Hash-based Message Authentication Code) using Deno's built-in SubtleCrypto API with the SHA-256 hash function.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:11:05", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "title": "HMAC Generation and Verification", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:title": "HMAC Generation and Verification", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "ogTitle": "HMAC Generation and Verification", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:title": "HMAC Generation and Verification", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "1250f5d3-fbe2-455a-b32b-325c3f9b4312", "sourceURL": "https://docs.deno.com/examples/hmac_generate_verify", "url": "https://docs.deno.com/examples/hmac_generate_verify/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"HMAC Generation and Verification\"?\n\nAssistant: Here are the recommended best practices:\n\n• Store the secret key securely in a real application.\n• Use the TextEncoder to convert strings to Uint8Array for HMAC operations.\n", "metadata": {"source_url": "https://docs.deno.com/examples/hmac_generate_verify", "title": "HMAC Generation and Verification", "description": "This example demonstrates how to generate and verify an HMAC (Hash-based Message Authentication Code) using Deno's built-in SubtleCrypto API with the SHA-256 hash function.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:11:05", "type": "best_practices", "page_metadata": {"twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "title": "HMAC Generation and Verification", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:title": "HMAC Generation and Verification", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "ogTitle": "HMAC Generation and Verification", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:title": "HMAC Generation and Verification", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "1250f5d3-fbe2-455a-b32b-325c3f9b4312", "sourceURL": "https://docs.deno.com/examples/hmac_generate_verify", "url": "https://docs.deno.com/examples/hmac_generate_verify/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build Qwik with Deno\"?\n\nAssistant: Qwik is a JavaScript framework that delivers instant-loading web applications by leveraging resumability instead of hydration. In this tutorial, we'll build a simple Qwik application and run it with Deno. The app will display a list of dinosaurs. When you click on one, it'll take you to a dinosaur page with more details.\n\nHere's a detailed explanation:\n\n\n## Scaffold a Qwik app\nWe can create a new Qwik project using deno like this:\n\n```highlight notranslate bash\ndeno init --npm qwik@latest\n```\n\nThis will run you through the setup process for Qwik and Qwik City. Here, we chose the simplest “Empty App” deployment with npm dependencies.\n\nWhen complete, you’ll have a project structure that looks like this:\n\n```\n.\n├── node_modules/\n├── public/\n└── src/\n    ├── components/\n    │   └── router-head/\n    │       └── router-head.tsx\n    └── routes/\n        ├── index.tsx\n        ├── layout.tsx\n        ├── service-worker.ts\n        ├── entry.dev.tsx\n        ├── entry.preview.tsx\n        ├── entry.ssr.tsx\n        ├── global.css\n        └── root.tsx\n├── .eslintignore\n├── .eslintrc.cjs\n├── .gitignore\n├── .prettierignore\n├── package-lock.json\n├── package.json\n├── qwik.env.d.ts\n├── README.md\n├── tsconfig.json\n└── vite.config.ts\n```\n\nMost of this is boilerplate configuration that we won’t touch. A few of the important files to know for how Qwik works are:\n\n- `src/components/router-head/router-head.tsx`: Manages the HTML head elements (like title, meta tags, etc.) across different routes in your Qwik application.\n- `src/routes/index.tsx`: The main entry point and home page of your application that users see when they visit the root URL.\n- `src/routes/layout.tsx`: Defines the common layout structure that wraps around pages, allowing you to maintain consistent UI elements like headers and footers.\n- `src/routes/service-worker.ts`: Handles Progressive Web App (PWA) functionality, offline caching, and background tasks for your application.\n- `src/routes/entry.ssr.tsx`: Controls how your application is server-side rendered, managing the initial HTML generation and hydration process.\n- `src/routes/root.tsx`: The root component that serves as the application's shell, containing global providers and the main routing structure.\n\nNow we can build out our own routes and files within the application.\n\n## Setup data and type definitions\nWe’ll start by adding our [dinosaur data](https://github.com/denoland/examples/blob/main/with-qwik/src/data/dinosaurs.json) to a new `./src/data` directory as `dinosaurs.json`:\n\n```highlight notranslate jsonc\n// ./src/data/dinosaurs.json\n\n{\n  \"dinosaurs\": [\\\n    {\\\n      \"name\": \"Tyrannosaurus Rex\",\\\n      \"description\": \"A massive carnivorous dinosaur with powerful jaws and tiny arms.\"\\\n    },\\\n    {\\\n      \"name\": \"Brachiosaurus\",\\\n      \"description\": \"A huge herbivorous dinosaur with a very long neck.\"\\\n    },\\\n    {\\\n      \"name\": \"Velociraptor\",\\\n      \"description\": \"A small but fierce predator that hunted in packs.\"\\\n    }\\\n    // ...\\\n  ]\n}\n```\n\nThis is where our data will be pulled from. In a full application, this data would come from a database.\n\n> ⚠️️ In this tutorial we hard code the data. But you can connect to [a variety of databases](https://docs.deno.com/runtime/tutorials/connecting_to_databases/) and [even use ORMs like Prisma](https://docs.deno.com/runtime/tutorials/how_to_with_npm/prisma/) with Deno.\n\nNext, let's add type definitions for our dinosaur data. We'll put it in `types.ts` in `./src/`:\n\n```highlight notranslate tsx\n// ./src/types.ts\n\nexport type Dino = {\n  name: string;\n  description: string;\n};\n```\n\nNext, let's add API routes to server this data.\n\n## Add API routes\nFirst, let's create the route to load all dinosaurs for the index page. This API endpoint uses Qwik City's [`RequestHandler`](https://qwik.dev/docs/advanced/request-handling/) to create a `GET` endpoint that loads and returns our dinosaur data using the json helper for proper response formatting. We'll add the below to a new file in `./src/routes/api/dinosaurs/index.ts`:\n\n```highlight notranslate tsx\n// ./src/routes/api/dinosaurs/index.ts\n\nimport { RequestHandler } from \"@builder.io/qwik-city\";\nimport data from \"~/data/dinosaurs.json\" with { type: \"json\" };\n\nexport const onGet: RequestHandler = async ({ json }) => {\n  const dinosaurs = data;\n  json(200, dinosaurs);\n};\n```\n\nNext, let's create the API route to get the information for a single dinosaur. This takes the parameter from the URL and uses it to search through our dinosaur data. We'll add the below code to `./src/routes/api/dinosaurs/[name]/index.ts`:\n\n```highlight notranslate tsx\n// ./src/routes/api/dinosaurs/[name]/index.ts\n\nimport { RequestHandler } from \"@builder.io/qwik-city\";\nimport data from \"~/data/dinosaurs.json\" with { type: \"json\" };\n\nexport const onGet: RequestHandler = async ({ params, json }) => {\n  const { name } = params;\n  const dinosaurs = data;\n\n  if (!name) {\n    json(400, { error: \"No dinosaur name provided.\" });\n    return;\n  }\n\n  const dinosaur = dinosaurs.find(\n    (dino) => dino.name.toLowerCase() === name.toLowerCase(),\n  );\n\n  if (!dinosaur) {\n    json(404, { error: \"No dinosaur found.\" });\n    return;\n  }\n\n  json(200, dinosaur);\n};\n```\n\nNow that the API routes are wired up and serving data, let's create the two frontend pages: the index page and the individual dinosaur detail pages.\n\n## Build the frontend\nWe'll create our homepage by updating our `./src/routes/index.tsx` file using Qwik's [`routeLoader$`](https://qwik.dev/docs/route-loader/) for server-side data fetching. This `component$` loads and renders the dinosaur data during SSR via `useDinosaurs()`:\n\n```highlight notranslate tsx\n// ./src/routes/index.tsx\n\nimport { component$ } from \"@builder.io/qwik\";\nimport { Link, routeLoader$ } from \"@builder.io/qwik-city\";\nimport type { Dino } from \"~/types\";\nimport data from \"~/data/dinosaurs.json\" with { type: \"json\" };\n\nexport const useDinosaurs = routeLoader$(() => {\n  return data;\n});\n\nexport default component$(() => {\n  const dinosaursSignal = useDinosaurs();\n\n  return (\n    <div class=\"container mx-auto p-4\">\n      <h1 class=\"text-3xl font-bold mb-4\">Welcome to the Dinosaur app</h1>\n      <p class=\"mb-4\">Click on a dinosaur below to learn more.</p>\n      <ul class=\"space-y-2\">\n        {dinosaursSignal.value.dinosaurs.map((dinosaur: Dino) => (\n          <li key={dinosaur.name}>\n            <Link\n              href={`/${dinosaur.name.toLowerCase()}`}\n              class=\"text-blue-600 hover:underline\"\n            >\n              {dinosaur.name}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n```\n\nNow that we have our main index page, let's add a page for the individual dinosaur information. We'll use Qwik's [dynamic routing](https://qwik.dev/docs/routing/), with `[name]` as the key for each dinosaur. This page leverages `routeLoader$` to fetch individual dinosaur details based on the URL parameter, with built-in error handling if the dinosaur isn't found.\n\nThe component uses the same SSR pattern as our index page, but with parameter-based data loading and a simpler display layout for individual dinosaur details:\n\n```highlight notranslate tsx\n// ./src/routes/[name]/index.tsx\n\nimport { component$ } from \"@builder.io/qwik\";\nimport { Link, routeLoader$ } from \"@builder.io/qwik-city\";\nimport type { Dino } from \"~/types\";\nimport data from \"~/data/dinosaurs.json\" with { type: \"json\" };\n\nexport const useDinosaurDetails = routeLoader$(({ params }): Dino => {\n  const { dinosaurs } = data;\n  const dinosaur = dinosaurs.find(\n    (dino: Dino) => dino.name.toLowerCase() === params.name.toLowerCase(),\n  );\n\n  if (!dinosaur) {\n    throw new Error(\"Dinosaur not found\");\n  }\n\n  return dinosaur;\n});\n\nexport default component$(() => {\n  const dinosaurSignal = useDinosaurDetails();\n\n  return (\n    <div class=\"container mx-auto p-4\">\n      <h1 class=\"text-3xl font-bold mb-4\">{dinosaurSignal.value.name}</h1>\n      <p class=\"mb-4\">{dinosaurSignal.value.description}</p>\n      <Link href=\"/\" class=\"text-blue-600 hover:underline\">\n        Back to all dinosaurs\n      </Link>\n    </div>\n  );\n});\n```\n\nNow that we have built our routes and the frontend components, we can run our application:\n\n```highlight notranslate bash\ndeno task dev\n```\n\nThis will start the app at `localhost:5173`:\n\nTada!\n\n## Next steps\n🦕 Now you can build and run a Qwik app with Deno! Here are some ways you could enhance your dinosaur application:\n\nNext steps for a Qwik app might be to use Qwik's lazy loading capabilities for dinosaur images and other components, or add client-side state management for complex features.\n\n- Add persistent data store [using a database like Postgres or MongoDB](https://docs.deno.com/runtime/tutorials/connecting_to_databases/) and an ORM like [Drizzle](https://docs.deno.com/examples/drizzle_tutorial/) or [Prisma](https://docs.deno.com/runtime/tutorials/how_to_with_npm/prisma/)\n- use Qwik's lazy loading capabilities for dinosaur images and components\n- add client-side state management\n- self-host your app to [AWS](https://docs.deno.com/runtime/tutorials/aws_lightsail/), [Digital Ocean](https://docs.deno.com/runtime/tutorials/digital_ocean/), and [Google Cloud Run](https://docs.deno.com/runtime/tutorials/google_cloud_run/)\n", "metadata": {"source_url": "https://docs.deno.com/examples/qwik_tutorial", "title": "Build Qwik with Deno", "description": "Qwik is a JavaScript framework that delivers instant-loading web applications by leveraging resumability instead of hydration. In this tutorial, we'll build a simple Qwik application and run it with Deno. The app will display a list of dinosaurs. When you click on one, it'll take you to a dinosaur page with more details.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:11:44", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Build Qwik with Deno", "og:title": "Build Qwik with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Build Qwik with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "language": "en", "ogTitle": "Build Qwik with Deno", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "77922252-d958-45d3-8ac7-5c6e2c1ae514", "sourceURL": "https://docs.deno.com/examples/qwik_tutorial", "url": "https://docs.deno.com/examples/qwik_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Build Qwik with Deno\"?\n\nAssistant: Here are some code examples:\n\n### Scaffold a Qwik app\n```yaml\ndeno init --npm qwik@latest\n```\n\n### Dinosaur data JSON\n```yaml\n// ./src/data/dinosaurs.json\n{\n  \"dinosaurs\": [\\\n    {\\\n      \"name\": \"Tyrannosaurus Rex\",\\\n      \"description\": \"A massive carnivorous dinosaur with powerful jaws and tiny arms.\"\\\n    },\\\n    {\\\n      \"name\": \"Brachiosaurus\",\\\n      \"description\": \"A huge herbivorous dinosaur with a very long neck.\"\\\n    },\\\n    {\\\n      \"name\": \"Velociraptor\",\\\n      \"description\": \"A small but fierce predator that hunted in packs.\"\\\n    }\\\n    // ...\\\n  ]\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/qwik_tutorial", "title": "Build Qwik with Deno", "description": "Qwik is a JavaScript framework that delivers instant-loading web applications by leveraging resumability instead of hydration. In this tutorial, we'll build a simple Qwik application and run it with Deno. The app will display a list of dinosaurs. When you click on one, it'll take you to a dinosaur page with more details.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:11:44", "type": "code_examples", "page_metadata": {"ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Build Qwik with Deno", "og:title": "Build Qwik with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Build Qwik with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "language": "en", "ogTitle": "Build Qwik with Deno", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "77922252-d958-45d3-8ac7-5c6e2c1ae514", "sourceURL": "https://docs.deno.com/examples/qwik_tutorial", "url": "https://docs.deno.com/examples/qwik_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Build Qwik with Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• In this tutorial we hard code the data. But you can connect to a variety of databases and even use ORMs like Prisma with Deno.\n• Consider using Qwik's lazy loading capabilities for dinosaur images and components.\n• Add client-side state management for complex features.\n", "metadata": {"source_url": "https://docs.deno.com/examples/qwik_tutorial", "title": "Build Qwik with Deno", "description": "Qwik is a JavaScript framework that delivers instant-loading web applications by leveraging resumability instead of hydration. In this tutorial, we'll build a simple Qwik application and run it with Deno. The app will display a list of dinosaurs. When you click on one, it'll take you to a dinosaur page with more details.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:11:44", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Build Qwik with Deno", "og:title": "Build Qwik with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Build Qwik with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "language": "en", "ogTitle": "Build Qwik with Deno", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "77922252-d958-45d3-8ac7-5c6e2c1ae514", "sourceURL": "https://docs.deno.com/examples/qwik_tutorial", "url": "https://docs.deno.com/examples/qwik_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Handling OS signals\"?\n\nAssistant: You can listen for OS signals using the Deno.addSignalListener function. This allows you to do things like gracefully shutdown a server when a SIGINT signal is received.\n\nHere's a detailed explanation:\n\n\n## Listening for OS Signals\nYou can listen for OS signals using the `Deno.addSignalListener` function. This allows you to do things like gracefully shutdown a server when a `SIGINT` signal is received.\n\n## Signal Handler Function\nWe isolate the signal handler function so that we can remove it later.\n\n## Listening for SIGINT Signal\nThen, we can listen for the `SIGINT` signal, which is sent when the user presses Ctrl+C.\n\n## Counting Seconds\nWhile we're waiting for the signal, we can do other things, like count seconds, or start a server.\n\n## Exiting After 10 Seconds\nAnd, after 10 seconds, we can exit and remove the signal listener.\n\n## Running the Example\nRun this example locally using the Deno CLI:\n\n## Additional Resources\n- [Doc: Deno.addSignalListener](https://docs.deno.com/api/deno/~/Deno.addSignalListener)\n", "metadata": {"source_url": "https://docs.deno.com/examples/os_signals", "title": "Handling OS signals", "description": "You can listen for OS signals using the Deno.addSignalListener function. This allows you to do things like gracefully shutdown a server when a SIGINT signal is received.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:11:56", "type": "overview", "page_metadata": {"ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Handling OS signals", "ogSiteName": "Deno", "twitter:title": "Handling OS signals", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "language": "en", "og:title": "Handling OS signals", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Handling OS signals", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "26900288-158a-4b66-ac92-fbd07bda5714", "sourceURL": "https://docs.deno.com/examples/os_signals", "url": "https://docs.deno.com/examples/os_signals/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Handling OS signals\"?\n\nAssistant: Here are some code examples:\n\n### Counting Seconds Example\n```yaml\nconsole.log(\"Counting seconds...\");\n\nlet i = 0;\n```\n\n### Signal Handler Function Example\n```yaml\nfunction sigIntHandler() {\n  console.log(\"interrupted! your number was\", i);\n  Deno.exit();\n}\n```\n\n### Listening for SIGINT Example\n```yaml\nDeno.addSignalListener(\"SIGINT\", sigIntHandler);\n```\n\n### Counting Seconds with setInterval Example\n```yaml\nconst interval = setInterval(() => {\n  i++;\n}, 1000);\n```\n\n### Exiting After 10 Seconds Example\n```yaml\nsetTimeout(() => {\n  clearInterval(interval);\n  Deno.removeSignalListener(\"SIGINT\", sigIntHandler);\n  console.log(\"done! it has been 10 seconds\");\n}, 10_000);\n```\n\n### Running the Example Command\n```yaml\ndeno run https://docs.deno.com/examples/scripts/os_signals.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/os_signals", "title": "Handling OS signals", "description": "You can listen for OS signals using the Deno.addSignalListener function. This allows you to do things like gracefully shutdown a server when a SIGINT signal is received.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:11:56", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Handling OS signals", "ogSiteName": "Deno", "twitter:title": "Handling OS signals", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "language": "en", "og:title": "Handling OS signals", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Handling OS signals", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "26900288-158a-4b66-ac92-fbd07bda5714", "sourceURL": "https://docs.deno.com/examples/os_signals", "url": "https://docs.deno.com/examples/os_signals/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Handling OS signals\"?\n\nAssistant: Here are the recommended best practices:\n\n• Isolate the signal handler function to remove it later.\n• Use setInterval to perform other tasks while waiting for signals.\n• Clean up by removing signal listeners after they are no longer needed.\n", "metadata": {"source_url": "https://docs.deno.com/examples/os_signals", "title": "Handling OS signals", "description": "You can listen for OS signals using the Deno.addSignalListener function. This allows you to do things like gracefully shutdown a server when a SIGINT signal is received.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:11:56", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Handling OS signals", "ogSiteName": "Deno", "twitter:title": "Handling OS signals", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "language": "en", "og:title": "Handling OS signals", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Handling OS signals", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "scrapeId": "26900288-158a-4b66-ac92-fbd07bda5714", "sourceURL": "https://docs.deno.com/examples/os_signals", "url": "https://docs.deno.com/examples/os_signals/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Checking for file existence\"?\n\nAssistant: When creating files it can be useful to first ensure that such a file doesn't already exist. There are a number of ways to do this.\n\nHere's a detailed explanation:\n\n\n## Checking for file existence using exists utility\nUse the `exists` utility from the std library to check for existence of a file or folder. Note: Can create a race condition if followed by file operation. Consider the alternative below.\n\n## Using exists function\nWe can also use this function to check if the item on a path is a file or a directory.\n\n## Alternative method to check file existence\nDo not use the above function if performing a check directly before another operation on that file. Doing so creates a race condition. The `exists` function is not recommended for that usecase. Consider this alternative which checks for existence of a file without doing any other filesystem operations.\n\n## Running the example\nRun this example locally using the Deno CLI:\n", "metadata": {"source_url": "https://docs.deno.com/examples/checking_file_existence", "title": "Checking for file existence", "description": "When creating files it can be useful to first ensure that such a file doesn't already exist. There are a number of ways to do this.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:12:05", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "Checking for file existence", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:title": "Checking for file existence", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Checking for file existence", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "language": "en", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Checking for file existence", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "ffec2b89-5c13-4a14-b348-297dd3577dd6", "sourceURL": "https://docs.deno.com/examples/checking_file_existence", "url": "https://docs.deno.com/examples/checking_file_existence/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Checking for file existence\"?\n\nAssistant: Here are some code examples:\n\n### Checking file existence with exists utility\n```yaml\nimport { exists } from \"jsr:@std/fs/exists\";\nawait exists(\"./this_file_or_folder_exists\"); // true\nawait exists(\"./this_file_or_folder_does_not_exist\"); // false\n```\n\n### Checking if path is a file or directory\n```yaml\nawait exists(\"./file\", { isFile: true }); // true\nawait exists(\"./directory\", { isFile: true }); // false\n```\n\n### Alternative method to check file existence\n```yaml\ntry {\n  const stats = await Deno.lstat(\"example.txt\");\n} catch (err) {\n  if (!(err instanceof Deno.errors.NotFound)) {\n    throw err;\n  }\n  console.log(\"File does not exist\");\n}\n```\n\n### Running the example with Deno CLI\n```yaml\ndeno run --allow-read --allow-write https://docs.deno.com/examples/scripts/checking_file_existence.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/checking_file_existence", "title": "Checking for file existence", "description": "When creating files it can be useful to first ensure that such a file doesn't already exist. There are a number of ways to do this.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:12:05", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "Checking for file existence", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:title": "Checking for file existence", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Checking for file existence", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "language": "en", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Checking for file existence", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "ffec2b89-5c13-4a14-b348-297dd3577dd6", "sourceURL": "https://docs.deno.com/examples/checking_file_existence", "url": "https://docs.deno.com/examples/checking_file_existence/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Checking for file existence\"?\n\nAssistant: Here are the recommended best practices:\n\n• Do not use the `exists` function if performing a check directly before another operation on that file to avoid race conditions.\n• Consider using `Deno.lstat` for checking file existence without creating race conditions.\n", "metadata": {"source_url": "https://docs.deno.com/examples/checking_file_existence", "title": "Checking for file existence", "description": "When creating files it can be useful to first ensure that such a file doesn't already exist. There are a number of ways to do this.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:12:05", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "title": "Checking for file existence", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:title": "Checking for file existence", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Checking for file existence", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "language": "en", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Checking for file existence", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "ffec2b89-5c13-4a14-b348-297dd3577dd6", "sourceURL": "https://docs.deno.com/examples/checking_file_existence", "url": "https://docs.deno.com/examples/checking_file_existence/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Importing & exporting\"?\n\nAssistant: To build composable programs, it is necessary to be able to import and export functions from other modules. This is accomplished by using ECMA script modules in Deno.\n\nHere's a detailed explanation:\n\n\n## Exporting Functions\nTo export a function, you use the export keyword.\n\n./util.ts\n\n```typescript\nexport function sayHello(thing: string) {\n  console.log(`Hello, ${thing}!`);\n}\n```\n\n## Exporting Types, Variables, and Classes\nYou can also export types, variables, and classes.\n\n./util.ts\n\n```typescript\nexport interface Foo {}\nexport class Bar {}\nexport const baz = \"baz\";\n```\n\n## Importing Functions\nTo import things from files other files can use the import keyword.\n\n./main.ts\n\n```typescript\nimport { sayHello } from \"./util.ts\";\nsayHello(\"World\");\n```\n\n## Importing All Exports\nYou can also import all exports from a file.\n\n./main.ts\n\n```typescript\nimport * as util from \"./util.ts\";\nutil.sayHello(\"World\");\n```\n\n## Absolute Imports\nImports don't have to be relative, they can also reference absolute file, https, npm, or JSR URLs.\n\n./main.ts\n\n```typescript\nimport { camelCase } from \"jsr:@luca/cases@1\";\nconsole.log(camelCase(\"hello world\")); // helloWorld\n\nimport OpenAI from \"jsr:@openai/openai\";\nconst client = new OpenAI();\n```\n\n## Additional Resources\n- [Example: Dependency Management](https://docs.deno.com/examples/dependency-management)\n- [Manual: Modules](https://docs.deno.com/runtime/manual/basics/modules)\n", "metadata": {"source_url": "https://docs.deno.com/examples/import_export", "title": "Importing & exporting", "description": "To build composable programs, it is necessary to be able to import and export functions from other modules. This is accomplished by using ECMA script modules in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:12:22", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Importing & exporting", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Importing & exporting", "og:title": "Importing & exporting", "twitter:site": "@deno_land", "twitter:title": "Importing & exporting", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "f7177e73-2237-4f86-9e4f-06c55b750d19", "sourceURL": "https://docs.deno.com/examples/import_export", "url": "https://docs.deno.com/examples/import_export/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Importing & exporting\"?\n\nAssistant: Here are some code examples:\n\n### Exporting a Function\n```yaml\nexport function sayHello(thing: string) {\n  console.log(`Hello, ${thing}!`);\n}\n```\n\n### Exporting Types, Variables, and Classes\n```yaml\nexport interface Foo {}\nexport class Bar {}\nexport const baz = \"baz\";\n```\n\n### Importing a Function\n```yaml\nimport { sayHello } from \"./util.ts\";\nsayHello(\"World\");\n```\n\n### Importing All Exports\n```yaml\nimport * as util from \"./util.ts\";\nutil.sayHello(\"World\");\n```\n\n### Absolute Import Example\n```yaml\nimport { camelCase } from \"jsr:@luca/cases@1\";\nconsole.log(camelCase(\"hello world\")); // helloWorld\n\nimport OpenAI from \"jsr:@openai/openai\";\nconst client = new OpenAI();\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/import_export", "title": "Importing & exporting", "description": "To build composable programs, it is necessary to be able to import and export functions from other modules. This is accomplished by using ECMA script modules in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:12:22", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Importing & exporting", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Importing & exporting", "og:title": "Importing & exporting", "twitter:site": "@deno_land", "twitter:title": "Importing & exporting", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "f7177e73-2237-4f86-9e4f-06c55b750d19", "sourceURL": "https://docs.deno.com/examples/import_export", "url": "https://docs.deno.com/examples/import_export/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Importing & exporting\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the export keyword to export functions, types, variables, and classes.\n• Use the import keyword to import functions and other exports from modules.\n• Absolute imports can simplify module management by allowing imports from URLs.\n", "metadata": {"source_url": "https://docs.deno.com/examples/import_export", "title": "Importing & exporting", "description": "To build composable programs, it is necessary to be able to import and export functions from other modules. This is accomplished by using ECMA script modules in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:12:22", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Importing & exporting", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Importing & exporting", "og:title": "Importing & exporting", "twitter:site": "@deno_land", "twitter:title": "Importing & exporting", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "f7177e73-2237-4f86-9e4f-06c55b750d19", "sourceURL": "https://docs.deno.com/examples/import_export", "url": "https://docs.deno.com/examples/import_export/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Moving/Renaming files\"?\n\nAssistant: An example of how to move and rename files and directories in Deno.\n\nHere's a detailed explanation:\n\n\n## Moving and Renaming Files\nTo rename or move a file, you can use the `Deno.rename` function. The first argument is the path to the file to rename. The second argument is the new path.\n\n## Error Handling\nIf the source file or the destination directory does not exist, the function will reject the returned promise with a `Deno.errors.NotFound` error. You can catch this error with a `try/catch` block.\n\n## Synchronous Version\nA synchronous version of this function is also available.\n\n## Overwriting Files\nIf the destination file already exists, it will be overwritten.\n\n## Permissions Required\nRead and write permissions are necessary to perform this operation. The source file needs to be readable and the destination path needs to be writable.\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/moving_renaming_files.ts) locally using the Deno CLI:\n\n## Additional Resources\n- [Doc: Deno.rename](https://docs.deno.com/api/deno/~/Deno.rename)\n", "metadata": {"source_url": "https://docs.deno.com/examples/moving_renaming_files", "title": "Moving/Renaming files", "description": "An example of how to move and rename files and directories in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:12:35", "type": "overview", "page_metadata": {"ogTitle": "Moving/Renaming files", "favicon": "https://docs.deno.com/favicon.ico", "title": "Moving/Renaming files", "og:type": "article", "twitter:site": "@deno_land", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:title": "Moving/Renaming files", "language": "en", "ogImage": "/img/og.webp", "og:title": "Moving/Renaming files", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "461d8826-b73d-4c96-bb20-616527c7a37d", "sourceURL": "https://docs.deno.com/examples/moving_renaming_files", "url": "https://docs.deno.com/examples/moving_renaming_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Moving/Renaming files\"?\n\nAssistant: Here are some code examples:\n\n### Rename a File\n```yaml\nawait Deno.writeTextFile(\"./hello.txt\", \"Hello World!\");\nawait Deno.rename(\"./hello.txt\", \"./hello-renamed.txt\");\nconsole.log(await Deno.readTextFile(\"./hello-renamed.txt\"));\n```\n\n### Error Handling Example\n```yaml\ntry {\n  await Deno.rename(\"./hello.txt\", \"./does/not/exist\");\n} catch (err) {\n  console.error(err);\n}\n```\n\n### Synchronous Rename\n```yaml\nDeno.renameSync(\"./hello-renamed.txt\", \"./hello-again.txt\");\n```\n\n### Overwrite Example\n```yaml\nawait Deno.writeTextFile(\"./hello.txt\", \"Invisible content.\");\nawait Deno.rename(\"./hello-again.txt\", \"./hello.txt\");\nconsole.log(await Deno.readTextFile(\"./hello.txt\"));\n```\n\n### Run Example Locally\n```yaml\ndeno run --allow-read=./ --allow-write=./ https://docs.deno.com/examples/scripts/moving_renaming_files.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/moving_renaming_files", "title": "Moving/Renaming files", "description": "An example of how to move and rename files and directories in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:12:35", "type": "code_examples", "page_metadata": {"ogTitle": "Moving/Renaming files", "favicon": "https://docs.deno.com/favicon.ico", "title": "Moving/Renaming files", "og:type": "article", "twitter:site": "@deno_land", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:title": "Moving/Renaming files", "language": "en", "ogImage": "/img/og.webp", "og:title": "Moving/Renaming files", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "461d8826-b73d-4c96-bb20-616527c7a37d", "sourceURL": "https://docs.deno.com/examples/moving_renaming_files", "url": "https://docs.deno.com/examples/moving_renaming_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Moving/Renaming files\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure the source file is readable and the destination path is writable before performing rename operations.\n", "metadata": {"source_url": "https://docs.deno.com/examples/moving_renaming_files", "title": "Moving/Renaming files", "description": "An example of how to move and rename files and directories in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:12:35", "type": "best_practices", "page_metadata": {"ogTitle": "Moving/Renaming files", "favicon": "https://docs.deno.com/favicon.ico", "title": "Moving/Renaming files", "og:type": "article", "twitter:site": "@deno_land", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:title": "Moving/Renaming files", "language": "en", "ogImage": "/img/og.webp", "og:title": "Moving/Renaming files", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "461d8826-b73d-4c96-bb20-616527c7a37d", "sourceURL": "https://docs.deno.com/examples/moving_renaming_files", "url": "https://docs.deno.com/examples/moving_renaming_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Process information\"?\n\nAssistant: This page provides information on how to access the current process ID and parent process ID in Deno.\n\nHere's a detailed explanation:\n\n\n## Process ID\nThe current process's process ID is available in the `Deno.pid` variable.\n\n## Parent Process ID\nThe parent process ID is available in the Deno namespace too.\n\n## Running the Example\nRun this example locally using the Deno CLI:\n", "metadata": {"source_url": "https://docs.deno.com/examples/pid", "title": "Process information", "description": "This page provides information on how to access the current process ID and parent process ID in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:12:45", "type": "overview", "page_metadata": {"ogLocale": "en_US", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "og:title": "Process information", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "twitter:title": "Process information", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:site_name": "Deno", "twitter:site": "@deno_land", "language": "en", "title": "Process information", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Process information", "scrapeId": "53193aa3-4f70-4d7f-aee7-75b8bf28a478", "sourceURL": "https://docs.deno.com/examples/pid", "url": "https://docs.deno.com/examples/pid/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Process information\"?\n\nAssistant: Here are some code examples:\n\n### Current Process ID\n```yaml\nconsole.log(Deno.pid);\n```\n\n### Parent Process ID\n```yaml\nconsole.log(Deno.ppid);\n```\n\n### Run Example Command\n```yaml\ndeno run https://docs.deno.com/examples/scripts/pid.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/pid", "title": "Process information", "description": "This page provides information on how to access the current process ID and parent process ID in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:12:45", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "og:title": "Process information", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "twitter:title": "Process information", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:site_name": "Deno", "twitter:site": "@deno_land", "language": "en", "title": "Process information", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Process information", "scrapeId": "53193aa3-4f70-4d7f-aee7-75b8bf28a478", "sourceURL": "https://docs.deno.com/examples/pid", "url": "https://docs.deno.com/examples/pid/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Process information\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `Deno.pid` to get the current process ID.\n• Use `Deno.ppid` to get the parent process ID.\n", "metadata": {"source_url": "https://docs.deno.com/examples/pid", "title": "Process information", "description": "This page provides information on how to access the current process ID and parent process ID in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:12:45", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "og:title": "Process information", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "twitter:title": "Process information", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:site_name": "Deno", "twitter:site": "@deno_land", "language": "en", "title": "Process information", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Process information", "scrapeId": "53193aa3-4f70-4d7f-aee7-75b8bf28a478", "sourceURL": "https://docs.deno.com/examples/pid", "url": "https://docs.deno.com/examples/pid/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Unix cat\"?\n\nAssistant: In Unix, the `cat` command is a utility that reads files and writes them to standard output. You can use Deno to mimic the behavior of the `cat` command.\n\nHere's a detailed explanation:\n\n\n## Overview\nIn this program each command-line argument is assumed to be a filename, the file is opened, and printed to stdout (e.g. the console). Create a script that reads the contents of one or more files and writes them to standard output.\n\n## Code Example\n```javascript\nfor (const filename of Deno.args) {\n  const file = await Deno.open(filename);\n  await file.readable.pipeTo(Deno.stdout.writable, { preventClose: true });\n}\n```\n\n## Running the Example\nRun this example locally using the Deno CLI:\n\n```\ndeno run --allow-read cat.ts file1 file2\n```\n\n## Additional Resources\n- [Deno args API docs](https://docs.deno.com/api/deno/~/Deno.args)\n- [Deno open API docs](https://docs.deno.com/api/deno/~/Deno.open)\n- [Deno stdout API docs](https://docs.deno.com/api/deno/~/Deno.stdout)\n- [Deno File System API docs](https://docs.deno.com/api/deno/~/Deno.FsFile#property_readable)\n", "metadata": {"source_url": "https://docs.deno.com/examples/unix_cat", "title": "Unix cat", "description": "In Unix, the `cat` command is a utility that reads files and writes them to standard output. You can use Deno to mimic the behavior of the `cat` command.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:13:05", "type": "overview", "page_metadata": {"og:title": "Unix cat", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Unix cat", "og:type": "article", "ogLocale": "en_US", "og:site_name": "Deno", "twitter:title": "Unix cat", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "title": "Unix cat", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "language": "en", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "f7d1ebf7-ea20-43bd-882d-a2b679ce9f44", "sourceURL": "https://docs.deno.com/examples/unix_cat", "url": "https://docs.deno.com/examples/unix_cat/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Unix cat\"?\n\nAssistant: Here are some code examples:\n\n### Deno Cat Command Implementation\n```yaml\nfor (const filename of Deno.args) {\n  const file = await Deno.open(filename);\n  await file.readable.pipeTo(Deno.stdout.writable, { preventClose: true });\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/unix_cat", "title": "Unix cat", "description": "In Unix, the `cat` command is a utility that reads files and writes them to standard output. You can use Deno to mimic the behavior of the `cat` command.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:13:05", "type": "code_examples", "page_metadata": {"og:title": "Unix cat", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Unix cat", "og:type": "article", "ogLocale": "en_US", "og:site_name": "Deno", "twitter:title": "Unix cat", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "title": "Unix cat", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "language": "en", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "f7d1ebf7-ea20-43bd-882d-a2b679ce9f44", "sourceURL": "https://docs.deno.com/examples/unix_cat", "url": "https://docs.deno.com/examples/unix_cat/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Unix cat\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have the necessary permissions to read the files when running the script with Deno.\n• Use the `--allow-read` flag to grant read access to the files.\n", "metadata": {"source_url": "https://docs.deno.com/examples/unix_cat", "title": "Unix cat", "description": "In Unix, the `cat` command is a utility that reads files and writes them to standard output. You can use Deno to mimic the behavior of the `cat` command.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:13:05", "type": "best_practices", "page_metadata": {"og:title": "Unix cat", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Unix cat", "og:type": "article", "ogLocale": "en_US", "og:site_name": "Deno", "twitter:title": "Unix cat", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "title": "Unix cat", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "language": "en", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "f7d1ebf7-ea20-43bd-882d-a2b679ce9f44", "sourceURL": "https://docs.deno.com/examples/unix_cat", "url": "https://docs.deno.com/examples/unix_cat/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Creating & resolving symlinks\"?\n\nAssistant: Creating and resolving symlink is a common task. Deno has a number of functions for this task.\n\nHere's a detailed explanation:\n\n\n## Creating a text file\nFirst we will create a text file to link to.\n\n## Creating a soft link\nNow we can create a soft link to the file.\n\n## Resolving a symlink\nTo resolve the path of a symlink, we can use Deno.realPath.\n\n## Reading symlinks\nSymlinks are automatically resolved, so we can just read them like text files.\n\n## Creating hard links\nIn certain cases, soft links don't work. In this case we can choose to make \"hard links\".\n\n## Running the example\nRun this example locally using the Deno CLI.\n\n## Additional resources\n- [Doc: Deno.writeTextFile](https://docs.deno.com/api/deno/~/Deno.writeTextFile)\n- [Doc: Deno.symlink](https://docs.deno.com/api/deno/~/Deno.symlink)\n", "metadata": {"source_url": "https://docs.deno.com/examples/symlinks", "title": "Creating & resolving symlinks", "description": "Creating and resolving symlink is a common task. Deno has a number of functions for this task.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:14:02", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "ogLocale": "en_US", "title": "Creating & resolving symlinks", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:title": "Creating & resolving symlinks", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Creating & resolving symlinks", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:title": "Creating & resolving symlinks", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "og:locale": "en_US", "scrapeId": "10430e4d-6ab9-49a0-908c-9f3965a851b4", "sourceURL": "https://docs.deno.com/examples/symlinks", "url": "https://docs.deno.com/examples/symlinks/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Creating & resolving symlinks\"?\n\nAssistant: Here are some code examples:\n\n### Creating a text file\n```yaml\nawait Deno.writeTextFile(\"example.txt\", \"hello from symlink!\");\n```\n\n### Creating a soft link\n```yaml\nawait Deno.symlink(\"example.txt\", \"link\");\n```\n\n### Resolving a symlink\n```yaml\nconsole.log(await Deno.realPath(\"link\"));\n```\n\n### Reading symlinks\n```yaml\nconsole.log(await Deno.readTextFile(\"link\"));\n```\n\n### Creating hard links\n```yaml\nawait Deno.link(\"example.txt\", \"hardlink\");\nconsole.log(await Deno.readTextFile(\"hardlink\"));\n```\n\n### Running the example\n```yaml\ndeno run --allow-write --allow-read https://docs.deno.com/examples/scripts/symlinks.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/symlinks", "title": "Creating & resolving symlinks", "description": "Creating and resolving symlink is a common task. Deno has a number of functions for this task.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:14:02", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "ogLocale": "en_US", "title": "Creating & resolving symlinks", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:title": "Creating & resolving symlinks", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Creating & resolving symlinks", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:title": "Creating & resolving symlinks", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "og:locale": "en_US", "scrapeId": "10430e4d-6ab9-49a0-908c-9f3965a851b4", "sourceURL": "https://docs.deno.com/examples/symlinks", "url": "https://docs.deno.com/examples/symlinks/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Creating & resolving symlinks\"?\n\nAssistant: Here are the recommended best practices:\n\n• Symlinks are automatically resolved, so they can be read like text files.\n• In cases where soft links don't work, consider using hard links.\n", "metadata": {"source_url": "https://docs.deno.com/examples/symlinks", "title": "Creating & resolving symlinks", "description": "Creating and resolving symlink is a common task. Deno has a number of functions for this task.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:14:02", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "ogLocale": "en_US", "title": "Creating & resolving symlinks", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:title": "Creating & resolving symlinks", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Creating & resolving symlinks", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:title": "Creating & resolving symlinks", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "og:locale": "en_US", "scrapeId": "10430e4d-6ab9-49a0-908c-9f3965a851b4", "sourceURL": "https://docs.deno.com/examples/symlinks", "url": "https://docs.deno.com/examples/symlinks/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Unzip gzipped file\"?\n\nAssistant: An example of how to decompress a gzipped file and save it to disk.\n\nHere's a detailed explanation:\n\n\n## Open the gzipped file for reading\n```javascript\nconst file = await Deno.open(\"large_file.json.gz\");\n```\n\n## Create a new file to write the decompressed data\n```javascript\nconst outputPath = await Deno.create(\"large_file.json\");\n```\n\n## Get the writable stream of the output file\n```javascript\nconst writableStream = outputPath.writable;\n```\n\n## Create a decompression stream for gzip format\n```javascript\nconst stream = new DecompressionStream(\"gzip\");\n```\n\n## Pipe the readable stream of the gzipped file through the decompression stream and then to the writable stream of the output file\n```javascript\nfile.readable.pipeThrough(stream).pipeTo(writableStream);\n```\n\n## Run this example locally using the Deno CLI\n```bash\ndeno run --allow-write --allow-read https://docs.deno.com/examples/scripts/unzip_gzipped_file.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/unzip_gzipped_file", "title": "Unzip gzipped file", "description": "An example of how to decompress a gzipped file and save it to disk.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-02-27 23:14:15", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Unzip gzipped file", "twitter:title": "Unzip gzipped file", "og:site_name": "Deno", "og:title": "Unzip gzipped file", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "language": "en", "ogLocale": "en_US", "twitter:site": "@deno_land", "og:type": "article", "ogTitle": "Unzip gzipped file", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "a57b4475-0d94-42ba-8886-4f33fa548429", "sourceURL": "https://docs.deno.com/examples/unzip_gzipped_file", "url": "https://docs.deno.com/examples/unzip_gzipped_file/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Unzip gzipped file\"?\n\nAssistant: Here are some code examples:\n\n### Open the gzipped file for reading\n```yaml\nconst file = await Deno.open(\"large_file.json.gz\");\n```\n\n### Create a new file to write the decompressed data\n```yaml\nconst outputPath = await Deno.create(\"large_file.json\");\n```\n\n### Get the writable stream of the output file\n```yaml\nconst writableStream = outputPath.writable;\n```\n\n### Create a decompression stream for gzip format\n```yaml\nconst stream = new DecompressionStream(\"gzip\");\n```\n\n### Pipe the readable stream of the gzipped file through the decompression stream and then to the writable stream of the output file\n```yaml\nfile.readable.pipeThrough(stream).pipeTo(writableStream);\n```\n\n### Run this example locally using the Deno CLI\n```yaml\ndeno run --allow-write --allow-read https://docs.deno.com/examples/scripts/unzip_gzipped_file.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/unzip_gzipped_file", "title": "Unzip gzipped file", "description": "An example of how to decompress a gzipped file and save it to disk.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-02-27 23:14:15", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Unzip gzipped file", "twitter:title": "Unzip gzipped file", "og:site_name": "Deno", "og:title": "Unzip gzipped file", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "language": "en", "ogLocale": "en_US", "twitter:site": "@deno_land", "og:type": "article", "ogTitle": "Unzip gzipped file", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "a57b4475-0d94-42ba-8886-4f33fa548429", "sourceURL": "https://docs.deno.com/examples/unzip_gzipped_file", "url": "https://docs.deno.com/examples/unzip_gzipped_file/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Compatibility with Node & npm\"?\n\nAssistant: This page discusses compatibility with Node and npm in the context of Deno.\n\nHere's a detailed explanation:\n\n\n## Play\nFind more videos in the [Examples page](https://docs.deno.com/examples/) and on our [YouTube channel](https://www.youtube.com/@deno_land).\n\n## Did you find what you needed?\nYesNo [Edit this page](https://github.com/denoland/docs/edit/main/examples/videos/backward_compat_with_node_npm.md)\n\nThank you! Feedback received. ✅\n\nAny additional comments? ( _optional_)\n\nEmail address ( _optional_)\n\nSend additional feedback\n\n[Privacy policy](https://docs.deno.com/deploy/manual/privacy-policy)\n", "metadata": {"source_url": "https://docs.deno.com/examples/backward_compat_with_node_npm", "title": "Compatibility with Node & npm", "description": "This page discusses compatibility with Node and npm in the context of Deno.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 23:14:20", "type": "overview", "page_metadata": {"og:type": "article", "twitter:card": "summary_large_image", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Compatibility with Node & npm", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:title": "Compatibility with Node & npm", "language": "en", "ogTitle": "Compatibility with Node & npm", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "title": "Compatibility with Node & npm", "scrapeId": "389d4160-d97b-44e7-a0b1-9bb624b683b9", "sourceURL": "https://docs.deno.com/examples/backward_compat_with_node_npm", "url": "https://docs.deno.com/examples/backward_compat_with_node_npm/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Path operations\"?\n\nAssistant: Many applications need to manipulate file paths in one way or another. The Deno Standard Library provides simple utilities for this.\n\nHere's a detailed explanation:\n\n\n## Importing the module\nFirst we will import the module from the Deno Standard Library\n\n```javascript\nimport * as path from \"jsr:@std/path\";\nimport * as posix from \"jsr:@std/path/posix\";\nimport * as windows from \"jsr:@std/path/windows\";\n```\n\n## Converting from a file URL to a directory\nConverting from a file url to a directory can be done simply by the `fromFileUrl` method from the appropriate implementation.\n\n```javascript\nconst p1 = posix.fromFileUrl(\"file:///home/foo\");\nconst p2 = windows.fromFileUrl(\"file:///home/foo\");\nconsole.log(`Path 1: ${p1} Path 2: ${p2}`);\n```\n\n## Using the current platform\nWe can also choose to not specify the platform and automatically use whatever Deno is running on\n\n```javascript\nconst p3 = path.fromFileUrl(\"file:///home/foo\");\nconsole.log(`Path on current OS: ${p3}`);\n```\n\n## Getting the basename of a file path\nWe can get the last part of a file path using the basename method\n\n```javascript\nconst p = path.basename(\"./deno/is/awesome/mod.ts\");\nconsole.log(p); // mod.ts\n```\n\n## Getting the dirname of a file path\nWe can get the directory of a file path using the dirname method\n\n```javascript\nconst base = path.dirname(\"./deno/is/awesome/mod.ts\");\nconsole.log(base); // ./deno/is/awesome\n```\n\n## Getting the extension of a file path\nWe can get the extension of a file path using the extname method\n\n```javascript\nconst ext = path.extname(\"./deno/is/awesome/mod.ts\");\nconsole.log(ext); // .ts\n```\n\n## Formatting a path\nWe can format a path using a FormatInputPathObject\n\n```javascript\nconst formatPath = path.format({\n  root: \"/\",\n  dir: \"/home/user/dir\",\n  ext: \".html\",\n  name: \"index\",\n});\nconsole.log(formatPath); // \"/home/user/dir/index.html\"\n```\n\n## Joining paths\nWhen we want to make our code cross-platform, we can use the join method. This joins any number of string by the OS-specific file separator. On Mac OS this would be foo/bar. On windows, this would be foo\\\\bar.\n\n```javascript\nconst joinPath = path.join(\"foo\", \"bar\");\nconsole.log(joinPath);\n```\n\n## Getting the current working directory\nWe can get the current working directory using the built-in cwd method\n\n```javascript\nconst current = Deno.cwd();\nconsole.log(current);\n```\n\n## Running the example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/path_operations.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-read https://docs.deno.com/examples/scripts/path_operations.ts\n```\n\n## Additional resources\n- [Doc: @std/path](https://jsr.io/@std/path/doc)\n- [Deno: Deno.cwd](https://docs.deno.com/api/deno/~/Deno.cwd)\n", "metadata": {"source_url": "https://docs.deno.com/examples/path_operations", "title": "Path operations", "description": "Many applications need to manipulate file paths in one way or another. The Deno Standard Library provides simple utilities for this.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:14:46", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "twitter:title": "Path operations", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Path operations", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:title": "Path operations", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Path operations", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "81ae53bc-4a9b-4714-961f-66b0a067b481", "sourceURL": "https://docs.deno.com/examples/path_operations", "url": "https://docs.deno.com/examples/path_operations/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Path operations\"?\n\nAssistant: Here are some code examples:\n\n### Importing the module\n```yaml\nimport * as path from \"jsr:@std/path\";\nimport * as posix from \"jsr:@std/path/posix\";\nimport * as windows from \"jsr:@std/path/windows\";\n```\n\n### Converting from a file URL to a directory\n```yaml\nconst p1 = posix.fromFileUrl(\"file:///home/foo\");\nconst p2 = windows.fromFileUrl(\"file:///home/foo\");\nconsole.log(`Path 1: ${p1} Path 2: ${p2}`);\n```\n\n### Using the current platform\n```yaml\nconst p3 = path.fromFileUrl(\"file:///home/foo\");\nconsole.log(`Path on current OS: ${p3}`);\n```\n\n### Getting the basename of a file path\n```yaml\nconst p = path.basename(\"./deno/is/awesome/mod.ts\");\nconsole.log(p); // mod.ts\n```\n\n### Getting the dirname of a file path\n```yaml\nconst base = path.dirname(\"./deno/is/awesome/mod.ts\");\nconsole.log(base); // ./deno/is/awesome\n```\n\n### Getting the extension of a file path\n```yaml\nconst ext = path.extname(\"./deno/is/awesome/mod.ts\");\nconsole.log(ext); // .ts\n```\n\n### Formatting a path\n```yaml\nconst formatPath = path.format({\n  root: \"/\",\n  dir: \"/home/user/dir\",\n  ext: \".html\",\n  name: \"index\",\n});\nconsole.log(formatPath); // \"/home/user/dir/index.html\"\n```\n\n### Joining paths\n```yaml\nconst joinPath = path.join(\"foo\", \"bar\");\nconsole.log(joinPath);\n```\n\n### Getting the current working directory\n```yaml\nconst current = Deno.cwd();\nconsole.log(current);\n```\n\n### Running the example\n```yaml\ndeno run --allow-read https://docs.deno.com/examples/scripts/path_operations.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/path_operations", "title": "Path operations", "description": "Many applications need to manipulate file paths in one way or another. The Deno Standard Library provides simple utilities for this.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:14:46", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "twitter:title": "Path operations", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Path operations", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:title": "Path operations", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Path operations", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "81ae53bc-4a9b-4714-961f-66b0a067b481", "sourceURL": "https://docs.deno.com/examples/path_operations", "url": "https://docs.deno.com/examples/path_operations/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Path operations\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the appropriate path implementation for your platform when converting file URLs.\n• Utilize the `path` module for cross-platform compatibility in path operations.\n", "metadata": {"source_url": "https://docs.deno.com/examples/path_operations", "title": "Path operations", "description": "Many applications need to manipulate file paths in one way or another. The Deno Standard Library provides simple utilities for this.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:14:46", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "twitter:title": "Path operations", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Path operations", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:title": "Path operations", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Path operations", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "81ae53bc-4a9b-4714-961f-66b0a067b481", "sourceURL": "https://docs.deno.com/examples/path_operations", "url": "https://docs.deno.com/examples/path_operations/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HTTP server: WebSockets\"?\n\nAssistant: An example of a HTTP server that handles websocket requests.\n\nHere's a detailed explanation:\n\n\n## Example Code\nTo start the server on the default port, call `Deno.serve` with the handler.\n\n```\nDeno.serve((req) => {\n```\n\nFirst, we verify if the client is negotiating to upgrade to websockets. If not, we can give a status of 501 to specify we don't support plain http requests.\n\n```\n  if (req.headers.get(\"upgrade\") != \"websocket\") {\n    return new Response(null, { status: 501 });\n  }\n```\n\nWe can then upgrade the request to a websocket\n\n```\n  const { socket, response } = Deno.upgradeWebSocket(req);\n```\n\nWe now have access to a standard websocket object. Let's handle the \"open\" event\n\n```\n  socket.addEventListener(\"open\", () => {\n    console.log(\"a client connected!\");\n  });\n```\n\nWe can also handle messages in a similar way. Here we set up a simple ping / pong example.\n\n```\n  socket.addEventListener(\"message\", (event) => {\n    if (event.data === \"ping\") {\n      socket.send(\"pong\");\n    }\n  });\n```\n\nLastly we return the response created from upgradeWebSocket.\n\n```\n  return response;\n});\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/http_server_websocket.ts) locally using the Deno CLI:\n\n```\ndeno run --allow-net https://docs.deno.com/examples/scripts/http_server_websocket.ts\n```\n\n## Additional Resources\n- [Example: HTTP Server: Hello World](https://docs.deno.com/examples/http_server)\n- [MDN: WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_websocket", "title": "HTTP server: WebSockets", "description": "An example of a HTTP server that handles websocket requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:15:39", "type": "overview", "page_metadata": {"og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "og:title": "HTTP server: WebSockets", "ogTitle": "HTTP server: WebSockets", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "title": "HTTP server: WebSockets", "og:site_name": "Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "HTTP server: WebSockets", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "scrapeId": "79437578-8e7d-42dd-8a54-8e2ed1ab20ef", "sourceURL": "https://docs.deno.com/examples/http_server_websocket", "url": "https://docs.deno.com/examples/http_server_websocket/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HTTP server: WebSockets\"?\n\nAssistant: Here are some code examples:\n\n### Starting the Server\n```yaml\nDeno.serve((req) => {\n  if (req.headers.get(\"upgrade\") != \"websocket\") {\n    return new Response(null, { status: 501 });\n  }\n  const { socket, response } = Deno.upgradeWebSocket(req);\n  socket.addEventListener(\"open\", () => {\n    console.log(\"a client connected!\");\n  });\n  socket.addEventListener(\"message\", (event) => {\n    if (event.data === \"ping\") {\n      socket.send(\"pong\");\n    }\n  });\n  return response;\n});\n```\n\n### Running the Example\n```yaml\ndeno run --allow-net https://docs.deno.com/examples/scripts/http_server_websocket.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_websocket", "title": "HTTP server: WebSockets", "description": "An example of a HTTP server that handles websocket requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:15:39", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "og:title": "HTTP server: WebSockets", "ogTitle": "HTTP server: WebSockets", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "title": "HTTP server: WebSockets", "og:site_name": "Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "HTTP server: WebSockets", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "scrapeId": "79437578-8e7d-42dd-8a54-8e2ed1ab20ef", "sourceURL": "https://docs.deno.com/examples/http_server_websocket", "url": "https://docs.deno.com/examples/http_server_websocket/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"HTTP server: WebSockets\"?\n\nAssistant: Here are the recommended best practices:\n\n• Verify if the client is negotiating to upgrade to websockets before processing the request.\n• Handle the 'open' event to confirm a client connection.\n• Implement message handling for websocket communication, such as a ping/pong mechanism.\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_websocket", "title": "HTTP server: WebSockets", "description": "An example of a HTTP server that handles websocket requests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:15:39", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "og:title": "HTTP server: WebSockets", "ogTitle": "HTTP server: WebSockets", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "title": "HTTP server: WebSockets", "og:site_name": "Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "HTTP server: WebSockets", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "scrapeId": "79437578-8e7d-42dd-8a54-8e2ed1ab20ef", "sourceURL": "https://docs.deno.com/examples/http_server_websocket", "url": "https://docs.deno.com/examples/http_server_websocket/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Browser APIs in Deno\"?\n\nAssistant: Deno wants to give developers the most browser-like programming environment possible. Deno uses web standard APIs, so if you're familiar with building for the web, then you're familiar with Deno.\n\nHere's a detailed explanation:\n\n\n## Description of video\nDeno wants to give developers the most browser-like programming environment possible. Deno uses web standard APIs, so if you're familiar with building for the web, then you're familiar with Deno. If not, when you learn how to use deno, you're also learning how to build for the web.\n\nIf you take a look at the docs, it gives you a good sense of what's available, so we got things like Canvas and internationalization and messaging and storage and streams, temporal, WebSockets, all of those things that we like to use on the web, we're going to find them built in to Deno.\n\n## Transcript and code\nLet's take a look at `fetch` first. This works like you might think.\n\nWe're going to take a response. from fetching the JSON placeholder API. Then we're going to take that response and convert it to JSON as a new variable and console.log it. Now, if we take a look at this in the terminal, we'll say deno allow network, so that we can opt into this running that fetch immediately.\n\nmain.ts\n\n```highlight notranslate javascript\nconst response = await fetch(\"https://snowtooth-hotel-api.fly.dev\");\nconst data = await response.json();\nconsole.log(data);\n\n```\n\nAnd we're done here. All the data comes back like we would expect.\n\n```highlight notranslate shell\ndeno add jsr:@std/streams\n\n```\n\nSo let me show you what I mean by this. We're going to keep that fetch. We're going to say if that response body value exists, we're going to create a new variable called transformed stream, and we'll set that equal to response dot body. Thank you. And here we're going to use the function called pipe through.\n\nAnd Pipe through is this method in JavaScript that's going to allow us to take the output of the readable stream and pass it through to modify the stream's data. The first thing we're going to do is decode the byte stream into a text stream. So we'll say new text, decoder stream. Then we'll chain on another one of these functions pipeThrough.\n\nSo this time we're going to split the text stream into lines. So we'll have different lines coming back from our data. Now the text line stream is actually coming from a library that we need to include.\n\n```highlight notranslate javascript\nimport { TextLineStream } from \"@std/streams\";\nimport { toTransformStream } from \"@std/streams/to-transform-stream\";\n\nconst response = await fetch(\"https://example.com/data.txt\");\n\n// Ensure the response body exists\nif (response.body) {\n  // Create a stream reader that processes the response body line by line\n  const transformedStream = response.body\n    // Decode the byte stream into a text stream\n    .pipeThrough(new TextDecoderStream())\n    // Split the text stream into lines\n    .pipeThrough(new TextLineStream())\n    // Get a reader to read the lines\n    //.getReader();\n    .pipeThrough(toTransformStream(async function* (src) {\n      for await (const chunk of src) {\n        if (chunk.trim().length === 0) {\n          continue;\n        }\n        console.log(chunk);\n        yield chunk;\n      }\n    }));\n  // Create a reader to consume the transformed stream\n  const reader = transformedStream.getReader();\n  // Read and log each line of text from the stream\n  while (true) {\n    const { value, done } = await reader.read();\n    if (done) break;\n    console.log(value); // Log each parsed JSON object\n  }\n}\n\n```\n\n## Setting Up Configuration\nSo we're going to say `deno add jsr@std/streams`. That will create our `deno.json` configuration file over here. There will be another video to dig into this in a little more depth, but just know for now that this is including any imports that are part of our project. So the transform stream is coming together, but there's a few more steps.\n\n## Using the Transform Stream\nThe next step is we use pipeThrough again. Now this time we're going to use another function to transform stream, and this is going to come from standard streams and specifically the function `toTransformStream`. Now this time we're going to pass in here an asynchronous generator. We know that it's a generator because we use that asterisk there and the body of this function is a loop, and here we're going to say const chunk, so the little blob of data that we're dealing with, chunk of source, which is the value that's passed in there.\n\nWe're going to say `console.log(chunk)`, and we're also going to yield the chunk here. Okay, so what is this `console.log` doing for us? Let's go ahead and run `deno --allow-net main.ts`. This is showing us that this is the top line of our HTML document.\n\nSo we actually need a way to iterate through this, and we're going to do this by creating a reader to consume this transformed stream. So let's get rid of our console log here. Here we're going to create a value called reader that's going to be set equal to `transformedStream.getReader()`. Now from here, what we can do is create a little while loop here. So while that value is true.\n\nWe want to destructure `{value, done}` from `await reader.read()`. So again, we can call the `.read()` method on that reader. Then we're going to say if `done` is true, then we want to break out of the loop. Otherwise, we want to `console.log(value)`.\n\nNice. So now we're going to see our HTML here printed line by line in our console.\n\nAll right, so that is a quick example of using our text line stream. We can use it in combination with fetch. And if you want to learn more about this API, you can check out the documentation here. Deno offers us a truly browser-like environment for using things like fetch, Web Workers, and much, much more.\n\nDeno has made it really smooth to use these web-standard APIs in a way that feels familiar and friendly.\n", "metadata": {"source_url": "https://docs.deno.com/examples/browser_apis_in_deno", "title": "Browser APIs in Deno", "description": "Deno wants to give developers the most browser-like programming environment possible. Deno uses web standard APIs, so if you're familiar with building for the web, then you're familiar with Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:26:13", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:title": "Browser APIs in Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Browser APIs in Deno", "twitter:title": "Browser APIs in Deno", "language": "en", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Browser APIs in Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "scrapeId": "49f6fed6-e3e5-4017-aba1-7b882b64773b", "sourceURL": "https://docs.deno.com/examples/browser_apis_in_deno", "url": "https://docs.deno.com/examples/browser_apis_in_deno/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Browser APIs in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Fetch Example\n```yaml\nconst response = await fetch(\"https://snowtooth-hotel-api.fly.dev\");\nconst data = await response.json();\nconsole.log(data);\n```\n\n### Deno Command to Add Streams\n```yaml\ndeno add jsr:@std/streams\n```\n\n### Stream Processing Example\n```yaml\nimport { TextLineStream } from \"@std/streams\";\nimport { toTransformStream } from \"@std/streams/to-transform-stream\";\n\nconst response = await fetch(\"https://example.com/data.txt\");\n\n// Ensure the response body exists\nif (response.body) {\n  const transformedStream = response.body\n    .pipeThrough(new TextDecoderStream())\n    .pipeThrough(new TextLineStream())\n    .pipeThrough(toTransformStream(async function* (src) {\n      for await (const chunk of src) {\n        if (chunk.trim().length === 0) {\n          continue;\n        }\n        console.log(chunk);\n        yield chunk;\n      }\n    }));\n  const reader = transformedStream.getReader();\n  while (true) {\n    const { value, done } = await reader.read();\n    if (done) break;\n    console.log(value);\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/browser_apis_in_deno", "title": "Browser APIs in Deno", "description": "Deno wants to give developers the most browser-like programming environment possible. Deno uses web standard APIs, so if you're familiar with building for the web, then you're familiar with Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:26:13", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:title": "Browser APIs in Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Browser APIs in Deno", "twitter:title": "Browser APIs in Deno", "language": "en", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Browser APIs in Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "scrapeId": "49f6fed6-e3e5-4017-aba1-7b882b64773b", "sourceURL": "https://docs.deno.com/examples/browser_apis_in_deno", "url": "https://docs.deno.com/examples/browser_apis_in_deno/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Browser APIs in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `deno allow network` to enable network access for fetching data.\n• Ensure the response body exists before processing it with streams.\n• Use `pipeThrough` to transform streams effectively.\n", "metadata": {"source_url": "https://docs.deno.com/examples/browser_apis_in_deno", "title": "Browser APIs in Deno", "description": "Deno wants to give developers the most browser-like programming environment possible. Deno uses web standard APIs, so if you're familiar with building for the web, then you're familiar with Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:26:13", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:title": "Browser APIs in Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Browser APIs in Deno", "twitter:title": "Browser APIs in Deno", "language": "en", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Browser APIs in Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "scrapeId": "49f6fed6-e3e5-4017-aba1-7b882b64773b", "sourceURL": "https://docs.deno.com/examples/browser_apis_in_deno", "url": "https://docs.deno.com/examples/browser_apis_in_deno/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Logging with colors\"?\n\nAssistant: This page explains how to display colors in program logs using console.log in Deno.\n\nHere's a detailed explanation:\n\n\n## Introduction\nMost modern terminals can display program logs in colors and with text decorations. This example shows how to display colors when using `console.log`. Deno has support for CSS using the %c syntax in console.log.\n\n## Basic Color Logging\nHere, the text \"Hello World\" is displayed in red. This also works in the browser.\n\n```javascript\nconsole.log(\"%cHello World\", \"color: red\");\n```\n\n## Background Colors\nNot just foreground, but also background colors can be set.\n\n```javascript\nconsole.log(\"%cHello World\", \"background-color: blue\");\n```\n\n## Text Decorations\nText decorations like underline and strikethrough can be set too.\n\n```javascript\nconsole.log(\"%cHello World\", \"text-decoration: underline\");\nconsole.log(\"%cHello World\", \"text-decoration: line-through\");\n```\n\n## Font Weight\nFont weight can also be set (either to normal, or to bold).\n\n```javascript\nconsole.log(\"%cHello World\", \"font-weight: bold\");\n```\n\n## Multiple CSS Rules\nMultiple CSS rules can also be applied at once. Here the text is red and bold.\n\n```javascript\nconsole.log(\"%cHello World\", \"color: red; font-weight: bold\");\n```\n\n## Multiple Styles in One Log\nA single console.log can also contain multiple %c values. Styling is reset at every %c.\n\n```javascript\nconsole.log(\"%cHello %cWorld\", \"color: red\", \"color: blue\");\n```\n\n## Hex and RGB Colors\nInstead of predefined colors, hex literals and `rgb()` are also supported. Note that some terminals do not support displaying these colors.\n\n```javascript\nconsole.log(\"%cHello World\", \"color: #FFC0CB\");\nconsole.log(\"%cHello World\", \"color: rgb(255, 192, 203)\");\n```\n\n## Limitations\nIt is not possible to configure font size, font family, leading, or any other CSS attributes.\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/color_logging.ts) locally using the Deno CLI:\n\n```bash\ndeno run https://docs.deno.com/examples/scripts/color_logging.ts\n```\n\n## Additional Resources\n- [MDN: Styling console output](https://developer.mozilla.org/en-US/docs/Web/API/console#styling_console_output)\n", "metadata": {"source_url": "https://docs.deno.com/examples/color_logging", "title": "Logging with colors", "description": "This page explains how to display colors in program logs using console.log in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:26:33", "type": "overview", "page_metadata": {"og:locale": "en_US", "ogTitle": "Logging with colors", "title": "Logging with colors", "twitter:site": "@deno_land", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "language": "en", "twitter:title": "Logging with colors", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Logging with colors", "ogLocale": "en_US", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "22a74294-e4f8-4221-8d4d-39406393647a", "sourceURL": "https://docs.deno.com/examples/color_logging", "url": "https://docs.deno.com/examples/color_logging/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Logging with colors\"?\n\nAssistant: Here are some code examples:\n\n### Basic Color Logging\n```yaml\nconsole.log(\"%cHello World\", \"color: red\");\n```\n\n### Background Colors\n```yaml\nconsole.log(\"%cHello World\", \"background-color: blue\");\n```\n\n### Text Decorations\n```yaml\nconsole.log(\"%cHello World\", \"text-decoration: underline\");\nconsole.log(\"%cHello World\", \"text-decoration: line-through\");\n```\n\n### Font Weight\n```yaml\nconsole.log(\"%cHello World\", \"font-weight: bold\");\n```\n\n### Multiple CSS Rules\n```yaml\nconsole.log(\"%cHello World\", \"color: red; font-weight: bold\");\n```\n\n### Multiple Styles in One Log\n```yaml\nconsole.log(\"%cHello %cWorld\", \"color: red\", \"color: blue\");\n```\n\n### Hex and RGB Colors\n```yaml\nconsole.log(\"%cHello World\", \"color: #FFC0CB\");\nconsole.log(\"%cHello World\", \"color: rgb(255, 192, 203)\");\n```\n\n### Running the Example\n```yaml\ndeno run https://docs.deno.com/examples/scripts/color_logging.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/color_logging", "title": "Logging with colors", "description": "This page explains how to display colors in program logs using console.log in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:26:33", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "ogTitle": "Logging with colors", "title": "Logging with colors", "twitter:site": "@deno_land", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "language": "en", "twitter:title": "Logging with colors", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Logging with colors", "ogLocale": "en_US", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "22a74294-e4f8-4221-8d4d-39406393647a", "sourceURL": "https://docs.deno.com/examples/color_logging", "url": "https://docs.deno.com/examples/color_logging/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Logging with colors\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the %c syntax for styling console output in Deno.\n• Combine multiple CSS rules for more complex styling.\n• Be aware that not all terminals support hex and rgb colors.\n", "metadata": {"source_url": "https://docs.deno.com/examples/color_logging", "title": "Logging with colors", "description": "This page explains how to display colors in program logs using console.log in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:26:33", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "ogTitle": "Logging with colors", "title": "Logging with colors", "twitter:site": "@deno_land", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "language": "en", "twitter:title": "Logging with colors", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Logging with colors", "ogLocale": "en_US", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "22a74294-e4f8-4221-8d4d-39406393647a", "sourceURL": "https://docs.deno.com/examples/color_logging", "url": "https://docs.deno.com/examples/color_logging/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Creating and verifying JWT\"?\n\nAssistant: This example demonstrates how to create and verify a JSON Web Token (JWT) using the `jose` library in Deno. JWTs are often used for secure communication between a client and server, enabling stateless authentication. This script includes functions to generate and verify tokens using the HS256 algorithm.\n\nHere's a detailed explanation:\n\n\n## Importing the jose library\nImport necessary functions and types from the `jose` library.\n\n## Defining a secret key\nDefine a secret key used for signing and verifying JWTs. Ensure that this secret is kept secure in a real-world application.\n\n## Creating a JWT\nCreates a JSON Web Token (JWT) with a specified payload and signed using the HS256 algorithm and has a 1-hour expiration time.\n\n## Verifying a JWT\nVerifies a given JSON Web Token (JWT) using the secret key. If valid, returns the payload data contained in the JWT else logs the error and returns null.\n\n## Creating a JWT with user-specific information\nCreating a JWT with user-specific information.\n\n## Verifying the generated JWT\nVerifying the generated JWT to ensure it has not been tampered with.\n\n## Running the example\nRun this example locally using the Deno CLI:\n\n## Additional resources\nLinks to additional resources related to npm specifiers and the jose library.\n", "metadata": {"source_url": "https://docs.deno.com/examples/creating_and_verifying_jwt", "title": "Creating and verifying JWT", "description": "This example demonstrates how to create and verify a JSON Web Token (JWT) using the `jose` library in Deno. JWTs are often used for secure communication between a client and server, enabling stateless authentication. This script includes functions to generate and verify tokens using the HS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:26:51", "type": "overview", "page_metadata": {"title": "Creating and verifying JWT", "og:title": "Creating and verifying JWT", "language": "en", "ogTitle": "Creating and verifying JWT", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogLocale": "en_US", "twitter:site": "@deno_land", "twitter:title": "Creating and verifying JWT", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "03062153-01a7-4d94-91e5-37943515d7a6", "sourceURL": "https://docs.deno.com/examples/creating_and_verifying_jwt", "url": "https://docs.deno.com/examples/creating_and_verifying_jwt/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Creating and verifying JWT\"?\n\nAssistant: Here are some code examples:\n\n### Importing the jose library\n```yaml\nimport { JWTPayload, jwtVerify, SignJWT } from \"npm:jose@5.9.6\";\n```\n\n### Defining a secret key\n```yaml\nconst secret = new TextEncoder().encode(\"secret-that-no-one-knows\");\n```\n\n### Creating a JWT function\n```yaml\nasync function createJWT(payload: JWTPayload): Promise<string> {\n  const jwt = await new SignJWT(payload)\n    .setProtectedHeader({ alg: \"HS256\" })\n    .setIssuedAt()\n    .setExpirationTime(\"1h\")\n    .sign(secret);\n\n  return jwt;\n}\n```\n\n### Verifying a JWT function\n```yaml\nasync function verifyJWT(token: string): Promise<JWTPayload | null> {\n  try {\n    const { payload } = await jwtVerify(token, secret);\n    console.log(\"JWT is valid:\", payload);\n    return payload;\n  } catch (error) {\n    console.error(\"Invalid JWT:\", error);\n    return null;\n  }\n}\n```\n\n### Creating a JWT with user-specific information\n```yaml\nconst token = await createJWT({ userId: 123, username: \"john_doe\" });\nconsole.log(\"Created JWT:\", token);\n```\n\n### Verifying the generated JWT\n```yaml\nconst verifiedPayload = await verifyJWT(token);\nconsole.log(\"Verified Payload:\", verifiedPayload);\n```\n\n### Running the example\n```yaml\ndeno run https://docs.deno.com/examples/scripts/creating_and_verifying_jwt.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/creating_and_verifying_jwt", "title": "Creating and verifying JWT", "description": "This example demonstrates how to create and verify a JSON Web Token (JWT) using the `jose` library in Deno. JWTs are often used for secure communication between a client and server, enabling stateless authentication. This script includes functions to generate and verify tokens using the HS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:26:51", "type": "code_examples", "page_metadata": {"title": "Creating and verifying JWT", "og:title": "Creating and verifying JWT", "language": "en", "ogTitle": "Creating and verifying JWT", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogLocale": "en_US", "twitter:site": "@deno_land", "twitter:title": "Creating and verifying JWT", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "03062153-01a7-4d94-91e5-37943515d7a6", "sourceURL": "https://docs.deno.com/examples/creating_and_verifying_jwt", "url": "https://docs.deno.com/examples/creating_and_verifying_jwt/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Creating and verifying JWT\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the secret key used for signing JWTs is kept secure in a real-world application.\n", "metadata": {"source_url": "https://docs.deno.com/examples/creating_and_verifying_jwt", "title": "Creating and verifying JWT", "description": "This example demonstrates how to create and verify a JSON Web Token (JWT) using the `jose` library in Deno. JWTs are often used for secure communication between a client and server, enabling stateless authentication. This script includes functions to generate and verify tokens using the HS256 algorithm.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:26:51", "type": "best_practices", "page_metadata": {"title": "Creating and verifying JWT", "og:title": "Creating and verifying JWT", "language": "en", "ogTitle": "Creating and verifying JWT", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogLocale": "en_US", "twitter:site": "@deno_land", "twitter:title": "Creating and verifying JWT", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "03062153-01a7-4d94-91e5-37943515d7a6", "sourceURL": "https://docs.deno.com/examples/creating_and_verifying_jwt", "url": "https://docs.deno.com/examples/creating_and_verifying_jwt/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build a Realtime WebSocket Application\"?\n\nAssistant: This page provides information on how to build a realtime WebSocket application using Deno.\n\nHere's a detailed explanation:\n\n\n## Play\nFind more videos in the [Examples page](https://docs.deno.com/examples/) and on our [YouTube channel](https://www.youtube.com/@deno_land).\n\n## Did you find what you needed?\nYesNo [Edit this page](https://github.com/denoland/docs/edit/main/examples/videos/realtime_websocket_app.md)\n\nThank you! Feedback received. ✅\n\nAny additional comments? ( _optional_)\n\nEmail address ( _optional_)\n\nSend additional feedback\n\n[Privacy policy](https://docs.deno.com/deploy/manual/privacy-policy)\n", "metadata": {"source_url": "https://docs.deno.com/examples/realtime_websocket_app", "title": "Build a Realtime WebSocket Application", "description": "This page provides information on how to build a realtime WebSocket application using Deno.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 23:27:07", "type": "overview", "page_metadata": {"og:type": "article", "ogTitle": "Build a Realtime WebSocket Application", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "title": "Build a Realtime WebSocket Application", "twitter:site": "@deno_land", "twitter:title": "Build a Realtime WebSocket Application", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "og:locale": "en_US", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Build a Realtime WebSocket Application", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "scrapeId": "c0acad81-d796-431d-bed6-e7876de25889", "sourceURL": "https://docs.deno.com/examples/realtime_websocket_app", "url": "https://docs.deno.com/examples/realtime_websocket_app/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Building a word finder app with Deno\"?\n\nAssistant: In this tutorial we'll create a simple Word Finder web application using Deno. No prior knowledge of Deno is required.\n\nHere's a detailed explanation:\n\n\n## Getting Started\nIn this tutorial we'll create a simple Word Finder web application using Deno. No prior knowledge of Deno is required.\n\n## Introduction\nOur Word Finder application will take a pattern string provided by the user and return all words in the English dictionary that match the pattern. The pattern can include alphabetical characters as well as `_` and `?`. The `?` can stand for any letter that isn't present in the pattern. `_` can stand for any letter.\n\nFor example, the pattern `c?t` matches \"cat\" and \"cut\". The pattern `go?d` matches the words \"goad\" and \"gold\" (but not \"good\").\n\n![Word finder UI](https://docs.deno.com/examples/tutorials/images/word_finder.png)\n\n## Building the View\nThe function below renders the HTML that creates the simple UI displayed above. You can specify a pattern and list of words to customize the HTML content. If a pattern is specified then it will show up in the search text box. If the word list is specified, then a bulleted list of words will be rendered.\n\n## Searching the Dictionary\nWe also need a simple search function which scans the dictionary and returns all words that match the specified pattern. The function below takes a pattern and dictionary and then returns all matched words.\n\n## Running a Deno Server\n[Oak](https://deno.land/x/oak@v11.1.0) is a framework that lets you easily setup a server in Deno (analogous to JavaScript's Express) and we'll be using it to host our application. Our server will use our search function to populate our HTML template with data and then return the customized HTML back to the viewer. We can conveniently rely on the `/usr/share/dict/words` file as our dictionary which is a standard file present on most Unix-like operating systems.\n\n## Example Code\nYou can find the entire example code [here](https://github.com/awelm/deno-word-finder).\n", "metadata": {"source_url": "https://docs.deno.com/examples/word_finder_tutorial", "title": "Building a word finder app with Deno", "description": "In this tutorial we'll create a simple Word Finder web application using Deno. No prior knowledge of Deno is required.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:27:34", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Building a word finder app with Deno", "ogSiteName": "Deno", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "title": "Building a word finder app with Deno", "og:title": "Building a word finder app with Deno", "ogImage": "/img/og.webp", "language": "en", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Building a word finder app with Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "d56d2904-10a6-4415-a452-3c75c2d39fb0", "sourceURL": "https://docs.deno.com/examples/word_finder_tutorial", "url": "https://docs.deno.com/examples/word_finder_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Building a word finder app with Deno\"?\n\nAssistant: Here are some code examples:\n\n### render.js\n```yaml\nexport function renderHtml(pattern, words) {\n  let searchResultsContent = \"\";\n  if (words.length > 0) {\n    let wordList = \"\";\n    for (const word of words) {\n      wordList += `<li>${word}</li>`;\n    }\n    searchResultsContent = `\n        <p id=\"search-result-count\" data-count=\"${words.length}\">Words found: ${words.length}</p>\n        <ul id=\"search-result\" name=\"search-results\">\n          ${wordList}\n        </ul>\n      `;\n  }\n\n  return `<html>\n    <head>\n        <title>Deno Word Finder</title>\n        <meta name=\"version\" content=\"1.0\" />\n    </head>\n    <body>\n        <h1>Deno Word Finder</h1>\n\n        <form id=\"perform-search\" name=\"perform-search\" method=\"get\" action=\"/api/search\">\n            <label for=\"search-text\">Search text:</label>\n            <input id=\"search-text\" name=\"search-text\" type=\"text\" value=\"${pattern}\" />\n            <input type=\"submit\" />\n        </form>\n\n        ${searchResultsContent}\n\n        <h2>Instructions</h2>\n\n        <p>\n            Enter a word using _ and ? as needed for unknown characters. Using ? means to include letters that aren't already used (you can think of it as a \"Wheel of Fortune\" placeholder). Using _ will find words that contain any character (whether it's currently \"revealed\" or not).\n            <br />\n            <br />\n            For example, d__d would return:\n            <ul>\n                <li>dand</li>\n                <li>daud</li>\n                <li>dead</li>\n                <li>deed</li>\n                <li>dird</li>\n                <li>dodd</li>\n                <li>dowd</li>\n                <li>duad</li>\n                <li>dyad</li>\n            </ul>\n            <br />\n            And go?d would return:\n            <ul>\n                <li>goad</li>\n                <li>gold</li>\n            </ul>\n        </p>\n    </body>\n  </html>\n  `;\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/word_finder_tutorial", "title": "Building a word finder app with Deno", "description": "In this tutorial we'll create a simple Word Finder web application using Deno. No prior knowledge of Deno is required.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:27:34", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Building a word finder app with Deno", "ogSiteName": "Deno", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "title": "Building a word finder app with Deno", "og:title": "Building a word finder app with Deno", "ogImage": "/img/og.webp", "language": "en", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Building a word finder app with Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "d56d2904-10a6-4415-a452-3c75c2d39fb0", "sourceURL": "https://docs.deno.com/examples/word_finder_tutorial", "url": "https://docs.deno.com/examples/word_finder_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Building a word finder app with Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno is secure by default, so you need to explicitly grant access to the file system and network when running the server.\n", "metadata": {"source_url": "https://docs.deno.com/examples/word_finder_tutorial", "title": "Building a word finder app with Deno", "description": "In this tutorial we'll create a simple Word Finder web application using Deno. No prior knowledge of Deno is required.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:27:34", "type": "best_practices", "page_metadata": {"twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Building a word finder app with Deno", "ogSiteName": "Deno", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "title": "Building a word finder app with Deno", "og:title": "Building a word finder app with Deno", "ogImage": "/img/og.webp", "language": "en", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Building a word finder app with Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "d56d2904-10a6-4415-a452-3c75c2d39fb0", "sourceURL": "https://docs.deno.com/examples/word_finder_tutorial", "url": "https://docs.deno.com/examples/word_finder_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"How to use MySQL2 with Deno\"?\n\nAssistant: This page covers how to manipulate and query a MySQL database with Deno using the mysql2 node package.\n\nHere's a detailed explanation:\n\n\n## Connecting to MySQL\nWe can connect to our MySQL server using the `createConnection()` method. You need the host ( `localhost` if you are testing, or more likely a cloud database endpoint in production) and the user and password:\n\n```highlight notranslate tsx\nconst connection = await mysql.createConnection({\n  host: \"localhost\",\n  user: \"root\",\n  password: \"password\",\n});\n```\n\nYou can also optionally specify a database during the connection creation. Here we are going to use `mysql2` to create the database on the fly.\n\n## Creating and populating the database\nNow that you have the connection running, you can use `connection.query()` with SQL commands to create databases and tables as well as insert the initial data.\n\nFirst we want to generate and select the database to use:\n\n```highlight notranslate tsx\nawait connection.query(\"CREATE DATABASE denos\");\nawait connection.query(\"use denos\");\n```\n\nThen we want to create the table:\n\n```highlight notranslate tsx\nawait connection.query(\n  \"CREATE TABLE `dinosaurs` (   `id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,   `name` varchar(255) NOT NULL,   `description` varchar(255) )\",\n);\n```\n\nAfter the table is created we can populate the data:\n\n```highlight notranslate tsx\nawait connection.query(\n  \"INSERT INTO `dinosaurs` (id, name, description) VALUES (1, 'Aardonyx', 'An early stage in the evolution of sauropods.'), (2, 'Abelisaurus', 'Abels lizard has been reconstructed from a single skull.'), (3, 'Deno', 'The fastest dinosaur that ever lived.')\",\n);\n```\n\nWe now have all the data ready to start querying.\n\n## Querying MySQL\nWe can use the same connection.query() method to write our queries. First we try and get all the data in our `dinosaurs` table:\n\n```highlight notranslate tsx\nconst results = await connection.query(\"SELECT * FROM `dinosaurs`\");\nconsole.log(results);\n```\n\nThe result from this query is all the data in our database:\n\n```highlight notranslate tsx\n[\\\n  [\\\n    {\\\n      id: 1,\\\n      name: \"Aardonyx\",\\\n      description: \"An early stage in the evolution of sauropods.\"\\\n    },\\\n    {\\\n      id: 2,\\\n      name: \"Abelisaurus\",\\\n      description: `Abel's lizard\" has been reconstructed from a single skull.`\\\n    },\\\n    { id: 3, name: \"Deno\", description: \"The fastest dinosaur that ever lived.\" }\\\n  ],\\\n```\\\n\\\nIf we want to just get a single element from the database, we can change our query:\\\n\\\n```highlight notranslate tsx\\\nconst [results, fields] = await connection.query(\\\n  \"SELECT * FROM `dinosaurs` WHERE `name` = 'Deno'\",\\\n);\\\nconsole.log(results);\\\n```\\\n\\\nWhich gives us a single row result:\\\n\\\n```highlight notranslate tsx\\\n[{ id: 3, name: \"Deno\", description: \"The fastest dinosaur that ever lived.\" }];\\\n```\\\n\\\nFinally, we can close the connection:\\\n\\\n```highlight notranslate tsx\\\nawait connection.end();\\\n```\\\n\\\nFor more on `mysql2`, check out their documentation\\\n[here](https://github.com/sidorares/node-mysql2).\n", "metadata": {"source_url": "https://docs.deno.com/examples/mysql2_tutorial", "title": "How to use MySQL2 with Deno", "description": "This page covers how to manipulate and query a MySQL database with Deno using the mysql2 node package.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:27:54", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "How to use MySQL2 with Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "How to use MySQL2 with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "language": "en", "ogTitle": "How to use MySQL2 with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "How to use MySQL2 with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "scrapeId": "42cc66c0-b8fb-43d1-b872-0ec4c17a1720", "sourceURL": "https://docs.deno.com/examples/mysql2_tutorial", "url": "https://docs.deno.com/examples/mysql2_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"How to use MySQL2 with Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing mysql2\n```yaml\nimport mysql from \"npm:mysql2@^2.3.3/promise\";\n```\n\n### Connecting to MySQL\n```yaml\nconst connection = await mysql.createConnection({\n  host: \"localhost\",\n  user: \"root\",\n  password: \"password\",\n});\n```\n\n### Creating Database and Using it\n```yaml\nawait connection.query(\"CREATE DATABASE denos\");\nawait connection.query(\"use denos\");\n```\n\n### Creating a Table\n```yaml\nawait connection.query(\n  \"CREATE TABLE `dinosaurs` (   `id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,   `name` varchar(255) NOT NULL,   `description` varchar(255) )\",\n);\n```\n\n### Inserting Data\n```yaml\nawait connection.query(\n  \"INSERT INTO `dinosaurs` (id, name, description) VALUES (1, 'Aardonyx', 'An early stage in the evolution of sauropods.'), (2, 'Abelisaurus', 'Abels lizard has been reconstructed from a single skull.'), (3, 'Deno', 'The fastest dinosaur that ever lived.')\",\n);\n```\n\n### Querying Data\n```yaml\nconst results = await connection.query(\"SELECT * FROM `dinosaurs`\");\nconsole.log(results);\n```\n\n### Querying a Single Element\n```yaml\nconst [results, fields] = await connection.query(\n  \"SELECT * FROM `dinosaurs` WHERE `name` = 'Deno'\",\n);\nconsole.log(results);\n```\n\n### Closing the Connection\n```yaml\nawait connection.end();\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/mysql2_tutorial", "title": "How to use MySQL2 with Deno", "description": "This page covers how to manipulate and query a MySQL database with Deno using the mysql2 node package.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:27:54", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "How to use MySQL2 with Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "How to use MySQL2 with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "language": "en", "ogTitle": "How to use MySQL2 with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "How to use MySQL2 with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "scrapeId": "42cc66c0-b8fb-43d1-b872-0ec4c17a1720", "sourceURL": "https://docs.deno.com/examples/mysql2_tutorial", "url": "https://docs.deno.com/examples/mysql2_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"How to use MySQL2 with Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `localhost` for testing and a cloud database endpoint in production.\n• Always close the connection after completing database operations.\n", "metadata": {"source_url": "https://docs.deno.com/examples/mysql2_tutorial", "title": "How to use MySQL2 with Deno", "description": "This page covers how to manipulate and query a MySQL database with Deno using the mysql2 node package.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:27:54", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "How to use MySQL2 with Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "How to use MySQL2 with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "language": "en", "ogTitle": "How to use MySQL2 with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "How to use MySQL2 with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "scrapeId": "42cc66c0-b8fb-43d1-b872-0ec4c17a1720", "sourceURL": "https://docs.deno.com/examples/mysql2_tutorial", "url": "https://docs.deno.com/examples/mysql2_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Chat application with WebSockets\"?\n\nAssistant: WebSockets are a powerful tool for building real-time applications. They allow for bidirectional communication between the client and server without the need for constant polling. A frequent use case for WebSockets are chat applications.\n\nHere's a detailed explanation:\n\n\n## Initialize a new project\nFirst, create a new directory for your project and navigate into it.\n\n```highlight notranslate sh\ndeno init chat-app\ncd deno-chat-app\n```\n\n## Build the backend\nWe'll start by building the backend server that will handle the WebSocket connections and broadcast messages to all connected clients. We'll use the [`oak`](https://jsr.io/@oak/oak) middleware framework to set up our server, clients can connect to the server, send messages and receive updates about other connected users. Additionally the server will serve the static HTML, CSS and JavaScript files that make up the chat client.\n\n## Import dependencies\nFirst, we'll need to import the necessary dependencies. Use the `deno add` command to add Oak to your project:\n\n```highlight notranslate sh\ndeno add jsr:@oak/oak\n```\n\n## Set up the server\nIn your `main.ts` file, add the following code:\n\nmain.ts\n\n```highlight notranslate ts\nimport { Application, Context, Router } from \"@oak/oak\";\nimport ChatServer from \"./ChatServer.ts\";\n\nconst app = new Application();\nconst port = 8080;\nconst router = new Router();\nconst server = new ChatServer();\n\nrouter.get(\"/start_web_socket\", (ctx: Context) => server.handleConnection(ctx));\n\napp.use(router.routes());\napp.use(router.allowedMethods());\napp.use(async (context) => {\n  await context.send({\n    root: Deno.cwd(),\n    index: \"public/index.html\",\n  });\n});\n\nconsole.log(\"Listening at http://localhost:\" + port);\nawait app.listen({ port });\n``` \n\nNext, create a new file called `ChatServer.ts` in the same directory as your `main.ts` file. In this file we'll put the logic for handling the WebSocket connections:\n\nChatServer.ts\n\n```highlight notranslate ts\nimport { Context } from \"@oak/oak\";\n\ntype WebSocketWithUsername = WebSocket & { username: string };\ntype AppEvent = { event: string; [key: string]: any };\n\nexport default class ChatServer {\n  private connectedClients = new Map<string, WebSocketWithUsername>();\n\n  public async handleConnection(ctx: Context) {\n    const socket = await ctx.upgrade() as WebSocketWithUsername;\n    const username = ctx.request.url.searchParams.get(\"username\");\n\n    if (this.connectedClients.has(username)) {\n      socket.close(1008, `Username ${username} is already taken`);\n      return;\n    }\n\n    socket.username = username;\n    socket.onopen = this.broadcastUsernames.bind(this);\n    socket.onclose = () => {\n      this.clientDisconnected(socket.username);\n    };\n    socket.onmessage = (m) => {\n      this.send(socket.username, m);\n    };\n    this.connectedClients.set(username, socket);\n\n    console.log(`New client connected: ${username}`);\n  }\n\n  private send(username: string, message: any) {\n    const data = JSON.parse(message.data);\n    if (data.event !== \"send-message\") {\n      return;\n    }\n\n    this.broadcast({\n      event: \"send-message\",\n      username: username,\n      message: data.message,\n    });\n  }\n\n  private clientDisconnected(username: string) {\n    this.connectedClients.delete(username);\n    this.broadcastUsernames();\n\n    console.log(`Client ${username} disconnected`);\n  }\n\n  private broadcastUsernames() {\n    const usernames = [...this.connectedClients.keys()];\n    this.broadcast({ event: \"update-users\", usernames });\n\n    console.log(\"Sent username list:\", JSON.stringify(usernames));\n  }\n\n  private broadcast(message: AppEvent) {\n    const messageString = JSON.stringify(message);\n    for (const client of this.connectedClients.values()) {\n      client.send(messageString);\n    }\n  }\n}\n``` \n\nThis code sets up a `handleConnection` method that is called when a new WebSocket connection is established. It receives a Context object from the Oak framework and upgrades it to a WebSocket connection. It extracts the username from the URL query parameters. If the username is already taken (i.e., exists in connectedClients), it closes the socket with an appropriate message. Otherwise, it sets the username property on the socket, assigns event handlers, and adds the socket to `connectedClients`.\n\nWhen the socket opens, it triggers the `broadcastUsernames` method, which sends the list of connected usernames to all clients. When the socket closes, it calls the `clientDisconnected` method to remove the client from the list of connected clients.\n\nWhen a message of type `send-message` is received, it broadcasts the message to all connected clients, including the sender’s username.\n\n## Build the frontend\nWe'll build a simple UI that shows a text input and a send button and displays the sent messages, alongside a list of users in the chat.\n\n## HTML\nIn your new project directory, create a `public` folder and add an `index.html` file and add the following code:\n\nindex.html\n\n```highlight notranslate html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Deno Chat App</title>\n    <link rel=\"stylesheet\" href=\"/public/style.css\" />\n    <script defer type=\"module\" src=\"/public/app.js\"></script>\n  </head>\n\n  <body>\n    <header>\n      <h1>🦕 Deno Chat App</h1>\n    </header>\n    <aside>\n      <h2>Users online</h2>\n      <ul id=\"users\"></ul>\n    </aside>\n    <main>\n      <div id=\"conversation\"></div>\n      <form id=\"form\">\n        <input\n          type=\"text\"\n          id=\"data\"\n          placeholder=\"send message\"\n          autocomplete=\"off\"\n        />\n        <button type=\"submit\" id=\"send\">Send ᯓ✉︎</button>\n      </form>\n    </main>\n    <template id=\"user\">\n      <li></li>\n    </template>\n    <template id=\"message\">\n      <div>\n        <span></span>\n        <p></p>\n      </div>\n    </template>\n  </body>\n</html>\n```\n\n## CSS\nIf you'd like to style your chat app, create a `style.css` file in the `public` folder and add this [pre-made CSS](https://raw.githubusercontent.com/denoland/tutorial-with-websockets/refs/heads/main/public/style.css).\n\n## JavaScript\nWe'll set up the client side JavaScript in an `app.js` file, you'll have seen it linked in the HTML we just wrote. In the `public` folder and add an `app.js` file with the following code:\n\napp.js\n\n```highlight notranslate js\nconst myUsername = prompt(\"Please enter your name\") || \"Anonymous\";\nconst url = new URL(`./start_web_socket?username=${myUsername}`, location.href);\nurl.protocol = url.protocol.replace(\"http\", \"ws\");\nconst socket = new WebSocket(url);\n\nsocket.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n\n  switch (data.event) {\n    case \"update-users\":\n      updateUserList(data.usernames);\n      break;\n\n    case \"send-message\":\n      addMessage(data.username, data.message);\n      break;\n  }\n};\n\nfunction updateUserList(usernames) {\n  const userList = document.getElementById(\"users\");\n  userList.replaceChildren();\n\n  for (const username of usernames) {\n    const listItem = document.createElement(\"li\");\n    listItem.textContent = username;\n    userList.appendChild(listItem);\n  }\n}\n\nfunction addMessage(username, message) {\n  const template = document.getElementById(\"message\");\n  const clone = template.content.cloneNode(true);\n\n  clone.querySelector(\"span\").textContent = username;\n  clone.querySelector(\"p\").textContent = message;\n  document.getElementById(\"conversation\").prepend(clone);\n}\n\nconst inputElement = document.getElementById(\"data\");\ninputElement.focus();\n\nconst form = document.getElementById(\"form\");\n\nform.onsubmit = (e) => {\n  e.preventDefault();\n  const message = inputElement.value;\n  inputElement.value = \"\";\n  socket.send(JSON.stringify({ event: \"send-message\", message }));\n};\n``` \n\nThis code prompts the user for a username, then creates a WebSocket connection to the server with the username as a query parameter. It listens for messages from the server and either updates the list of connected users or adds a new message to the chat window. It also sends messages to the server when the user submits the form either by pressing enter or clicking the send button. We use an [HTML template](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template) to scaffold out the new messages to show in the chat window.\n\n## Run the server\nTo run the server we'll need to grant the necessary permissions to Deno. In your `deno.json` file, update the `dev` task to allow read and network access:\n\ndeno.json\n\n```highlight notranslate diff\n-\"dev\": \"deno run --watch main.ts\"\n+\"dev\": \"deno run --allow-net --allow-read --watch main.ts\"\n```\n\nNow if you visit [http://localhost:8080](http://localhost:8080/) you will be able to start a chat session. You can open 2 simultaneous tabs and try chatting with yourself.\n", "metadata": {"source_url": "https://docs.deno.com/examples/chat_app_tutorial", "title": "Chat application with WebSockets", "description": "WebSockets are a powerful tool for building real-time applications. They allow for bidirectional communication between the client and server without the need for constant polling. A frequent use case for WebSockets are chat applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 23:28:53", "type": "overview", "page_metadata": {"og:site_name": "Deno", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "title": "Chat application with WebSockets", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogTitle": "Chat application with WebSockets", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:title": "Chat application with WebSockets", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Chat application with WebSockets", "scrapeId": "3b34a60f-644b-4683-a24b-0ed07b300e6c", "sourceURL": "https://docs.deno.com/examples/chat_app_tutorial", "url": "https://docs.deno.com/examples/chat_app_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Chat application with WebSockets\"?\n\nAssistant: Here are some code examples:\n\n### Initialize a new project\n```yaml\ndeno init chat-app\ncd deno-chat-app\n```\n\n### Import dependencies\n```yaml\ndeno add jsr:@oak/oak\n```\n\n### Set up the server\n```yaml\nimport { Application, Context, Router } from \"@oak/oak\";\nimport ChatServer from \"./ChatServer.ts\";\n\nconst app = new Application();\nconst port = 8080;\nconst router = new Router();\nconst server = new ChatServer();\n\nrouter.get(\"/start_web_socket\", (ctx: Context) => server.handleConnection(ctx));\n\napp.use(router.routes());\napp.use(router.allowedMethods());\napp.use(async (context) => {\n  await context.send({\n    root: Deno.cwd(),\n    index: \"public/index.html\",\n  });\n});\n\nconsole.log(\"Listening at http://localhost:\" + port);\nawait app.listen({ port });\n```\n\n### ChatServer.ts\n```yaml\nimport { Context } from \"@oak/oak\";\n\ntype WebSocketWithUsername = WebSocket & { username: string };\ntype AppEvent = { event: string; [key: string]: any };\n\nexport default class ChatServer {\n  private connectedClients = new Map<string, WebSocketWithUsername>();\n\n  public async handleConnection(ctx: Context) {\n    const socket = await ctx.upgrade() as WebSocketWithUsername;\n    const username = ctx.request.url.searchParams.get(\"username\");\n\n    if (this.connectedClients.has(username)) {\n      socket.close(1008, `Username ${username} is already taken`);\n      return;\n    }\n\n    socket.username = username;\n    socket.onopen = this.broadcastUsernames.bind(this);\n    socket.onclose = () => {\n      this.clientDisconnected(socket.username);\n    };\n    socket.onmessage = (m) => {\n      this.send(socket.username, m);\n    };\n    this.connectedClients.set(username, socket);\n\n    console.log(`New client connected: ${username}`);\n  }\n\n  private send(username: string, message: any) {\n    const data = JSON.parse(message.data);\n    if (data.event !== \"send-message\") {\n      return;\n    }\n\n    this.broadcast({\n      event: \"send-message\",\n      username: username,\n      message: data.message,\n    });\n  }\n\n  private clientDisconnected(username: string) {\n    this.connectedClients.delete(username);\n    this.broadcastUsernames();\n\n    console.log(`Client ${username} disconnected`);\n  }\n\n  private broadcastUsernames() {\n    const usernames = [...this.connectedClients.keys()];\n    this.broadcast({ event: \"update-users\", usernames });\n\n    console.log(\"Sent username list:\", JSON.stringify(usernames));\n  }\n\n  private broadcast(message: AppEvent) {\n    const messageString = JSON.stringify(message);\n    for (const client of this.connectedClients.values()) {\n      client.send(messageString);\n    }\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/chat_app_tutorial", "title": "Chat application with WebSockets", "description": "WebSockets are a powerful tool for building real-time applications. They allow for bidirectional communication between the client and server without the need for constant polling. A frequent use case for WebSockets are chat applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 23:28:53", "type": "code_examples", "page_metadata": {"og:site_name": "Deno", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "title": "Chat application with WebSockets", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogTitle": "Chat application with WebSockets", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:title": "Chat application with WebSockets", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Chat application with WebSockets", "scrapeId": "3b34a60f-644b-4683-a24b-0ed07b300e6c", "sourceURL": "https://docs.deno.com/examples/chat_app_tutorial", "url": "https://docs.deno.com/examples/chat_app_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Chat application with WebSockets\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can see the finished chat app on GitHub.\n• Now you can use WebSockets with Deno you're ready to build all kinds of realtime applications! WebSockets can be used to build realtime dashboards, games and collaborative editing tools and much more!\n• If you're looking for ways to expand upon your chat app, perhaps you could consider adding data to the messages to allow you to style messages differently if they're sent from you or someone else.\n", "metadata": {"source_url": "https://docs.deno.com/examples/chat_app_tutorial", "title": "Chat application with WebSockets", "description": "WebSockets are a powerful tool for building real-time applications. They allow for bidirectional communication between the client and server without the need for constant polling. A frequent use case for WebSockets are chat applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 23:28:53", "type": "best_practices", "page_metadata": {"og:site_name": "Deno", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "title": "Chat application with WebSockets", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogTitle": "Chat application with WebSockets", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:title": "Chat application with WebSockets", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Chat application with WebSockets", "scrapeId": "3b34a60f-644b-4683-a24b-0ed07b300e6c", "sourceURL": "https://docs.deno.com/examples/chat_app_tutorial", "url": "https://docs.deno.com/examples/chat_app_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"UDP listener: Ping\"?\n\nAssistant: An example of a UDP listener on localhost that will log the message if written to and close the connection if connected to.\n\nHere's a detailed explanation:\n\n\n## Introduction\nAn example of a UDP listener on localhost that will log the message if written to and close the connection if connected to.\n\n## Code Example\nInstantiate an instance of text decoder to read the UDP stream bytes back into plaintext.\n\n```javascript\nconst decoder = new TextDecoder();\n```\n\nInstantiate an instance of a UDP listener on localhost port 10000.\n\n```javascript\nconst listener = Deno.listenDatagram({\n  port: 10000,\n  transport: \"udp\",\n});\n```\n\nAwait asynchronous messages that are sent to our UDP listener.\n\n```javascript\nfor await (const [data, address] of listener) {\n```\n\nHere we log the address of the sender of the data\n\n```javascript\n  console.log(\"Server - received information from\", address);\n```\n\nHere we log the results of the bytes that were read into our buffer array.\n\n```javascript\n  console.log(\"Server - received:\", decoder.decode(data));\n```\n\nWe close the connection that was established.\n\n```javascript\n  listener.close();\n}\n```\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/udp_listener.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-net --unstable-net https://docs.deno.com/examples/scripts/udp_listener.ts\n```\n\n## Additional Resources\n- [Doc: Deno.listenDatagram](https://docs.deno.com/api/deno/~/Deno.listenDatagram)\n- [Example: UDP Connector](https://docs.deno.com/examples/udp_connector)\n", "metadata": {"source_url": "https://docs.deno.com/examples/udp_listener", "title": "UDP listener: Ping", "description": "An example of a UDP listener on localhost that will log the message if written to and close the connection if connected to.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:29:20", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "UDP listener: Ping", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "twitter:title": "UDP listener: Ping", "og:locale": "en_US", "title": "UDP listener: Ping", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "UDP listener: Ping", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "scrapeId": "5a60a6d7-5ea5-4c47-a88f-6921caab167b", "sourceURL": "https://docs.deno.com/examples/udp_listener", "url": "https://docs.deno.com/examples/udp_listener/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"UDP listener: Ping\"?\n\nAssistant: Here are some code examples:\n\n### UDP Listener Code\n```yaml\nconst decoder = new TextDecoder();\nconst listener = Deno.listenDatagram({\n  port: 10000,\n  transport: \"udp\",\n});\nfor await (const [data, address] of listener) {\n  console.log(\"Server - received information from\", address);\n  console.log(\"Server - received:\", decoder.decode(data));\n  listener.close();\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/udp_listener", "title": "UDP listener: Ping", "description": "An example of a UDP listener on localhost that will log the message if written to and close the connection if connected to.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:29:20", "type": "code_examples", "page_metadata": {"language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "UDP listener: Ping", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "twitter:title": "UDP listener: Ping", "og:locale": "en_US", "title": "UDP listener: Ping", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "UDP listener: Ping", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "scrapeId": "5a60a6d7-5ea5-4c47-a88f-6921caab167b", "sourceURL": "https://docs.deno.com/examples/udp_listener", "url": "https://docs.deno.com/examples/udp_listener/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"UDP listener: Ping\"?\n\nAssistant: Here are the recommended best practices:\n\n• This is an unstable API that is subject to change or removal at anytime.\n", "metadata": {"source_url": "https://docs.deno.com/examples/udp_listener", "title": "UDP listener: Ping", "description": "An example of a UDP listener on localhost that will log the message if written to and close the connection if connected to.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:29:20", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "UDP listener: Ping", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "twitter:title": "UDP listener: Ping", "og:locale": "en_US", "title": "UDP listener: Ping", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "UDP listener: Ping", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "scrapeId": "5a60a6d7-5ea5-4c47-a88f-6921caab167b", "sourceURL": "https://docs.deno.com/examples/udp_listener", "url": "https://docs.deno.com/examples/udp_listener/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Parsing and serializing JSON\"?\n\nAssistant: JSON is a widely used data interchange format. It is a human-readable, but also easily machine-readable.\n\nHere's a detailed explanation:\n\n\n## Parsing JSON\nTo parse a JSON string, you can use the builtin JSON.parse function. The value is returned as a JavaScript object.\n\n```javascript\nconst text = `{\n  \"hello\": \"world\",\n  \"numbers\": [1, 2, 3]\n}`;\nconst data = JSON.parse(text);\nconsole.log(data.hello);\nconsole.log(data.numbers.length);\n```\n\n## Serializing JSON\nTo turn a JavaScript object into a JSON string, you can use the builtin JSON.stringify function.\n\n```javascript\nconst obj = {\n  hello: \"world\",\n  numbers: [1, 2, 3],\n};\nconst json = JSON.stringify(obj);\nconsole.log(json);\n// {\"hello\":\"world\",\"numbers\":[1,2,3]}\n```\n\n## Customizing JSON.stringify\nBy default JSON.stringify will output a minified JSON string. You can customize this by specifying an indentation number in the third argument.\n\n```javascript\nconst json2 = JSON.stringify(obj, null, 2);\nconsole.log(json2);\n// {\n//   \"hello\": \"world\",\n//   \"numbers\": [\\\n//     1,\\\n//     2,\\\n//     3\\\n//   ]\n// }\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/parsing_serializing_json.ts) locally using the Deno CLI:\n\n```\ndeno run https://docs.deno.com/examples/scripts/parsing_serializing_json.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_json", "title": "Parsing and serializing JSON", "description": "JSON is a widely used data interchange format. It is a human-readable, but also easily machine-readable.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:30:41", "type": "overview", "page_metadata": {"ogTitle": "Parsing and serializing JSON", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "language": "en", "twitter:title": "Parsing and serializing JSON", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:title": "Parsing and serializing JSON", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Parsing and serializing JSON", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "scrapeId": "a3bfa0c9-b611-4d2d-bf52-21e3d10ee7ff", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_json", "url": "https://docs.deno.com/examples/parsing_serializing_json/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Parsing and serializing JSON\"?\n\nAssistant: Here are some code examples:\n\n### Parsing JSON Example\n```yaml\nconst text = `{\n  \"hello\": \"world\",\n  \"numbers\": [1, 2, 3]\n}`;\nconst data = JSON.parse(text);\nconsole.log(data.hello);\nconsole.log(data.numbers.length);\n```\n\n### Serializing JSON Example\n```yaml\nconst obj = {\n  hello: \"world\",\n  numbers: [1, 2, 3],\n};\nconst json = JSON.stringify(obj);\nconsole.log(json);\n// {\"hello\":\"world\",\"numbers\":[1,2,3]}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_json", "title": "Parsing and serializing JSON", "description": "JSON is a widely used data interchange format. It is a human-readable, but also easily machine-readable.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:30:41", "type": "code_examples", "page_metadata": {"ogTitle": "Parsing and serializing JSON", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "language": "en", "twitter:title": "Parsing and serializing JSON", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:title": "Parsing and serializing JSON", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Parsing and serializing JSON", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "scrapeId": "a3bfa0c9-b611-4d2d-bf52-21e3d10ee7ff", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_json", "url": "https://docs.deno.com/examples/parsing_serializing_json/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Parsing and serializing JSON\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use JSON.parse to convert a JSON string into a JavaScript object.\n• Use JSON.stringify to convert a JavaScript object into a JSON string.\n• Customize the output of JSON.stringify by specifying an indentation level.\n", "metadata": {"source_url": "https://docs.deno.com/examples/parsing_serializing_json", "title": "Parsing and serializing JSON", "description": "JSON is a widely used data interchange format. It is a human-readable, but also easily machine-readable.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:30:41", "type": "best_practices", "page_metadata": {"ogTitle": "Parsing and serializing JSON", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "language": "en", "twitter:title": "Parsing and serializing JSON", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:title": "Parsing and serializing JSON", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Parsing and serializing JSON", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "scrapeId": "a3bfa0c9-b611-4d2d-bf52-21e3d10ee7ff", "sourceURL": "https://docs.deno.com/examples/parsing_serializing_json", "url": "https://docs.deno.com/examples/parsing_serializing_json/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connect to Redis\"?\n\nAssistant: Using the r2d2 module, you can connect to a Redis database running anywhere.\n\nHere's a detailed explanation:\n\n\n## Connecting to Redis\nImport the `sendCommand()` function from r2d2\n\n```typescript\nimport { sendCommand } from \"https://deno.land/x/r2d2/mod.ts\";\n```\n\n## Creating a TCP Connection\nCreate a TCP connection with the Redis server\n\n```typescript\nconst redisConn = await Deno.connect({ port: 6379 });\n```\n\n## Authentication\nAuthenticate with the server by sending the command \"AUTH <username> <password>\"\n\n```typescript\nawait sendCommand(redisConn, [\\\n  \"AUTH\",\\\n  Deno.env.get(\"REDIS_USERNAME\")!,\\\n  Deno.env.get(\"REDIS_PASSWORD\")!,\\\n]);\n```\n\n## Setting a Key\nSet the \"hello\" key to have value \"world\" using the command \"SET hello world\"\n\n```typescript\nawait sendCommand(redisConn, [\"SET\", \"hello\", \"world\"]); // \"OK\"\n```\n\n## Getting a Key\nGet the \"hello\" key using the command \"GET hello\"\n\n```typescript\nawait sendCommand(redisConn, [\"GET\", \"hello\"]); // \"world\"\n```\n\n## Closing the Connection\nClose the connection to the database\n\n```typescript\nredisConn.close();\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/redis.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-net --allow-env https://docs.deno.com/examples/scripts/redis.ts\n```\n\n## Additional Resources\n- [r2d2 on deno.land/x](https://deno.land/x/r2d2)\n- [Getting started with Redis](https://redis.io/docs/getting-started/)\n", "metadata": {"source_url": "https://docs.deno.com/examples/redis", "title": "Connect to Redis", "description": "Using the r2d2 module, you can connect to a Redis database running anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:35:09", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Connect to Redis", "ogTitle": "Connect to Redis", "og:title": "Connect to Redis", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Connect to Redis", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "scrapeId": "2b83d025-ec8d-42d9-879c-ddf8c030bed4", "sourceURL": "https://docs.deno.com/examples/redis", "url": "https://docs.deno.com/examples/redis/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connect to Redis\"?\n\nAssistant: Here are some code examples:\n\n### Importing sendCommand\n```yaml\nimport { sendCommand } from \"https://deno.land/x/r2d2/mod.ts\";\n```\n\n### Creating a TCP Connection\n```yaml\nconst redisConn = await Deno.connect({ port: 6379 });\n```\n\n### Authentication Command\n```yaml\nawait sendCommand(redisConn, [\\\n  \"AUTH\",\\\n  Deno.env.get(\"REDIS_USERNAME\")!,\\\n  Deno.env.get(\"REDIS_PASSWORD\")!,\\\n]);\n```\n\n### Setting a Key Command\n```yaml\nawait sendCommand(redisConn, [\"SET\", \"hello\", \"world\"]); // \"OK\"\n```\n\n### Getting a Key Command\n```yaml\nawait sendCommand(redisConn, [\"GET\", \"hello\"]); // \"world\"\n```\n\n### Closing the Connection Command\n```yaml\nredisConn.close();\n```\n\n### Running the Example Command\n```yaml\ndeno run --allow-net --allow-env https://docs.deno.com/examples/scripts/redis.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/redis", "title": "Connect to Redis", "description": "Using the r2d2 module, you can connect to a Redis database running anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:35:09", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Connect to Redis", "ogTitle": "Connect to Redis", "og:title": "Connect to Redis", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Connect to Redis", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "scrapeId": "2b83d025-ec8d-42d9-879c-ddf8c030bed4", "sourceURL": "https://docs.deno.com/examples/redis", "url": "https://docs.deno.com/examples/redis/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connect to Redis\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have the correct Redis server credentials before attempting to authenticate.\n• Always close the connection to the Redis server after completing your operations.\n", "metadata": {"source_url": "https://docs.deno.com/examples/redis", "title": "Connect to Redis", "description": "Using the r2d2 module, you can connect to a Redis database running anywhere.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 23:35:09", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Connect to Redis", "ogTitle": "Connect to Redis", "og:title": "Connect to Redis", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Connect to Redis", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "scrapeId": "2b83d025-ec8d-42d9-879c-ddf8c030bed4", "sourceURL": "https://docs.deno.com/examples/redis", "url": "https://docs.deno.com/examples/redis/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HTTP server: Routing\"?\n\nAssistant: An example of a HTTP server that handles requests with different responses based on the incoming URL.\n\nHere's a detailed explanation:\n\n\n## Routing Example\nURL patterns can be used to match request URLs. They can contain named groups that can be used to extract parts of the URL, e.g. the book ID.\n\n```javascript\nconst BOOK_ROUTE = new URLPattern({ pathname: \"/books/:id\" });\n\nfunction handler(req: Request): Response {\n  const match = BOOK_ROUTE.exec(req.url);\n\n  if (match) {\n    const id = match.pathname.groups.id;\n    return new Response(`Book ${id}`);\n  }\n\n  return new Response(\"Not found (try /books/1)\", {\n    status: 404,\n  });\n}\n```\n\nTo start the server on the default port, call `Deno.serve` with the handler.\n\n```javascript\nDeno.serve(handler);\n```\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/http_server_routing.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-net https://docs.deno.com/examples/scripts/http_server_routing.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_routing", "title": "HTTP server: Routing", "description": "An example of a HTTP server that handles requests with different responses based on the incoming URL.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:35:25", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogLocale": "en_US", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "HTTP server: Routing", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogSiteName": "Deno", "og:title": "HTTP server: Routing", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "language": "en", "twitter:title": "HTTP server: Routing", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "HTTP server: Routing", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "scrapeId": "19d568dd-afcf-4604-8093-bb56caaef890", "sourceURL": "https://docs.deno.com/examples/http_server_routing", "url": "https://docs.deno.com/examples/http_server_routing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HTTP server: Routing\"?\n\nAssistant: Here are some code examples:\n\n### HTTP Server Routing Example\n```yaml\nconst BOOK_ROUTE = new URLPattern({ pathname: \"/books/:id\" });\n\nfunction handler(req: Request): Response {\n  const match = BOOK_ROUTE.exec(req.url);\n\n  if (match) {\n    const id = match.pathname.groups.id;\n    return new Response(`Book ${id}`);\n  }\n\n  return new Response(\"Not found (try /books/1)\", {\n    status: 404,\n  });\n}\n\nDeno.serve(handler);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_routing", "title": "HTTP server: Routing", "description": "An example of a HTTP server that handles requests with different responses based on the incoming URL.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:35:25", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogLocale": "en_US", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "HTTP server: Routing", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogSiteName": "Deno", "og:title": "HTTP server: Routing", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "language": "en", "twitter:title": "HTTP server: Routing", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "HTTP server: Routing", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "scrapeId": "19d568dd-afcf-4604-8093-bb56caaef890", "sourceURL": "https://docs.deno.com/examples/http_server_routing", "url": "https://docs.deno.com/examples/http_server_routing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"HTTP server: Routing\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use URL patterns to match request URLs and extract parameters easily.\n• Always handle cases where the URL does not match any defined patterns by returning a 404 response.\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_routing", "title": "HTTP server: Routing", "description": "An example of a HTTP server that handles requests with different responses based on the incoming URL.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:35:25", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogLocale": "en_US", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "HTTP server: Routing", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogSiteName": "Deno", "og:title": "HTTP server: Routing", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "language": "en", "twitter:title": "HTTP server: Routing", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "HTTP server: Routing", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "scrapeId": "19d568dd-afcf-4604-8093-bb56caaef890", "sourceURL": "https://docs.deno.com/examples/http_server_routing", "url": "https://docs.deno.com/examples/http_server_routing/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connect to DuckDB\"?\n\nAssistant: Using Deno with DuckDB, you can connect to memory or a persistent database with a filename.\n\nHere's a detailed explanation:\n\n\n## Code Example\n```typescript\nimport { open } from \"https://deno.land/x/duckdb/mod.ts\";\n```\n\nconst db = open(\"./example.db\");\n\n```\nconst db = open(\":memory:\");\n\nconst connection = db.connect();\n\nfor (const row of connection.stream(\"select 42 as number\")) {\n  console.debug(`Row Number: ${row.number}`); // -> { number: 42 }\n}\n\nconst prepared = connection.prepare(\n  \"SELECT ?::INTEGER AS number, ?::VARCHAR AS text;\"\n);\n\nconst result = prepared.query(1337, \"foo\"); // [{ number: 1337, text: 'foo' }]\n\nconsole.debug(`Number: ${result[0].number}`);\nconsole.debug(`Text: ${result[0].text}`);\n\nconnection.close();\ndb.close();\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/duckdb", "title": "Connect to DuckDB", "description": "Using Deno with DuckDB, you can connect to memory or a persistent database with a filename.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:35:48", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:locale": "en_US", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Connect to DuckDB", "title": "Connect to DuckDB", "language": "en", "og:title": "Connect to DuckDB", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Connect to DuckDB", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "scrapeId": "8f28a8d6-858c-46da-bf50-96336fbc697b", "sourceURL": "https://docs.deno.com/examples/duckdb", "url": "https://docs.deno.com/examples/duckdb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connect to DuckDB\"?\n\nAssistant: Here are some code examples:\n\n### Run DuckDB Example\n```yaml\ndeno run --allow-read --allow-write --allow-env --allow-net --allow-ffi https://docs.deno.com/examples/scripts/duckdb.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/duckdb", "title": "Connect to DuckDB", "description": "Using Deno with DuckDB, you can connect to memory or a persistent database with a filename.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:35:48", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:locale": "en_US", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Connect to DuckDB", "title": "Connect to DuckDB", "language": "en", "og:title": "Connect to DuckDB", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Connect to DuckDB", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "scrapeId": "8f28a8d6-858c-46da-bf50-96336fbc697b", "sourceURL": "https://docs.deno.com/examples/duckdb", "url": "https://docs.deno.com/examples/duckdb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connect to DuckDB\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have the necessary permissions when running the Deno CLI command.\n• Check the DuckDB documentation for more advanced usage and features.\n", "metadata": {"source_url": "https://docs.deno.com/examples/duckdb", "title": "Connect to DuckDB", "description": "Using Deno with DuckDB, you can connect to memory or a persistent database with a filename.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:35:48", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:locale": "en_US", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Connect to DuckDB", "title": "Connect to DuckDB", "language": "en", "og:title": "Connect to DuckDB", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Connect to DuckDB", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "scrapeId": "8f28a8d6-858c-46da-bf50-96336fbc697b", "sourceURL": "https://docs.deno.com/examples/duckdb", "url": "https://docs.deno.com/examples/duckdb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Hex and base64 encoding\"?\n\nAssistant: There are a few cases where it would be practical to encode and decode between different string and array buffer formats. The Deno Standard Library makes this easy.\n\nHere's a detailed explanation:\n\n\n## Introduction\nThe standard library provides hex and base64 encoding and decoding utilities.\n\n## Base64 Encoding and Decoding\nWe can easily encode a string or an array buffer into base64 using the encodeBase64 method. We can then decode base64 into a Uint8Array using the decode method.\n\n## Hex Encoding and Decoding\nTo encode hex, we can use the encodeHex method. We can convert back to a string by using the decodeHex method.\n\n## Running the Example\nRun the example locally using the Deno CLI.\n", "metadata": {"source_url": "https://docs.deno.com/examples/hex_base64_encoding", "title": "Hex and base64 encoding", "description": "There are a few cases where it would be practical to encode and decode between different string and array buffer formats. The Deno Standard Library makes this easy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:36:20", "type": "overview", "page_metadata": {"og:type": "article", "title": "Hex and base64 encoding", "og:title": "Hex and base64 encoding", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogTitle": "Hex and base64 encoding", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "twitter:title": "Hex and base64 encoding", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogLocale": "en_US", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "cdf55cc2-6662-4cea-a304-f9452578558f", "sourceURL": "https://docs.deno.com/examples/hex_base64_encoding", "url": "https://docs.deno.com/examples/hex_base64_encoding/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Hex and base64 encoding\"?\n\nAssistant: Here are some code examples:\n\n### Base64 Encoding Example\n```yaml\nimport { decodeBase64, encodeBase64 } from \"jsr:@std/encoding/base64\";\nimport { decodeHex, encodeHex } from \"jsr:@std/encoding/hex\";\n\nconst base64Encoded = encodeBase64(\"somestringtoencode\");\nconsole.log(encodeBase64(new Uint8Array([1, 32, 67, 120, 19])));\n```\n\n### Base64 Decoding Example\n```yaml\nconst base64Decoded = decodeBase64(base64Encoded);\nconst textDecoder = new TextDecoder();\nconsole.log(textDecoder.decode(base64Decoded));\n```\n\n### Hex Encoding Example\n```yaml\nconst hexEncoded = encodeHex(\"somestringtoencode\");\nconsole.log(hexEncoded);\n```\n\n### Hex Decoding Example\n```yaml\nconst hexDecoded = decodeHex(hexEncoded);\nconsole.log(textDecoder.decode(hexDecoded));\n```\n\n### Deno CLI Command\n```yaml\ndeno run https://docs.deno.com/examples/scripts/hex_base64_encoding.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/hex_base64_encoding", "title": "Hex and base64 encoding", "description": "There are a few cases where it would be practical to encode and decode between different string and array buffer formats. The Deno Standard Library makes this easy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:36:20", "type": "code_examples", "page_metadata": {"og:type": "article", "title": "Hex and base64 encoding", "og:title": "Hex and base64 encoding", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogTitle": "Hex and base64 encoding", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "twitter:title": "Hex and base64 encoding", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogLocale": "en_US", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "cdf55cc2-6662-4cea-a304-f9452578558f", "sourceURL": "https://docs.deno.com/examples/hex_base64_encoding", "url": "https://docs.deno.com/examples/hex_base64_encoding/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Hex and base64 encoding\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the Deno Standard Library for encoding and decoding utilities.\n• Utilize TextDecoder for converting Uint8Array back to string.\n", "metadata": {"source_url": "https://docs.deno.com/examples/hex_base64_encoding", "title": "Hex and base64 encoding", "description": "There are a few cases where it would be practical to encode and decode between different string and array buffer formats. The Deno Standard Library makes this easy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:36:20", "type": "best_practices", "page_metadata": {"og:type": "article", "title": "Hex and base64 encoding", "og:title": "Hex and base64 encoding", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogTitle": "Hex and base64 encoding", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "twitter:title": "Hex and base64 encoding", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogLocale": "en_US", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "cdf55cc2-6662-4cea-a304-f9452578558f", "sourceURL": "https://docs.deno.com/examples/hex_base64_encoding", "url": "https://docs.deno.com/examples/hex_base64_encoding/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Stub functions\"?\n\nAssistant: Test stubs are an extension of spys that also allows you to replace the method's internal behavior for testing purposes. In this example, we will demonstrate how we can use stubs to only test the desired behaviour.\n\nHere's a detailed explanation:\n\n\n## Example of Using Stubs\n```typescript\nimport { assertSpyCalls, returnsNext, stub } from \"jsr:@std/testing/mock\";\nimport { assertThrows } from \"jsr:@std/assert\";\n\ntype User = {\n  id: number;\n  name: string;\n};\n\nfunction getUserById(id: number): User | undefined {\n  // Actual database call would be here\n  return { id, name: \"Ada Lovelace\" };\n}\n\nconst database = { getUserById };\n\nclass UserRepository {\n  static findOrThrow(id: number): User {\n    const user = database.getUserById(id);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    return user;\n  }\n}\n\nDeno.test(\"findOrThrow method throws when the user was not found\", () => {\n  // Stub the `getUserById` function to return `undefined` when called.\n  using dbStub = stub(database, \"getUserById\", returnsNext([undefined]));\n\n  // We expect this function call to throw an error\n  assertThrows(() => UserRepository.findOrThrow(1), Error, \"User not found\");\n  assertSpyCalls(dbStub, 1);\n});\n```\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/stubs.ts) locally using the Deno CLI:\n\n```\ndeno run https://docs.deno.com/examples/scripts/stubs.ts\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/stubs", "title": "Stub functions", "description": "Test stubs are an extension of spys that also allows you to replace the method's internal behavior for testing purposes. In this example, we will demonstrate how we can use stubs to only test the desired behaviour.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:37:49", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "ogTitle": "Stub functions", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Stub functions", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "title": "Stub functions", "og:site_name": "Deno", "ogSiteName": "Deno", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Stub functions", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "619af15f-2b1b-44d8-b29a-75dcc301bd8d", "sourceURL": "https://docs.deno.com/examples/stubs", "url": "https://docs.deno.com/examples/stubs/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Stub functions\"?\n\nAssistant: Here are some code examples:\n\n### Using Stubs in Testing\n```yaml\n```typescript\nimport { assertSpyCalls, returnsNext, stub } from \"jsr:@std/testing/mock\";\nimport { assertThrows } from \"jsr:@std/assert\";\n\ntype User = {\n  id: number;\n  name: string;\n};\n\nfunction getUserById(id: number): User | undefined {\n  // Actual database call would be here\n  return { id, name: \"Ada Lovelace\" };\n}\n\nconst database = { getUserById };\n\nclass UserRepository {\n  static findOrThrow(id: number): User {\n    const user = database.getUserById(id);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    return user;\n  }\n}\n\nDeno.test(\"findOrThrow method throws when the user was not found\", () => {\n  // Stub the `getUserById` function to return `undefined` when called.\n  using dbStub = stub(database, \"getUserById\", returnsNext([undefined]));\n\n  // We expect this function call to throw an error\n  assertThrows(() => UserRepository.findOrThrow(1), Error, \"User not found\");\n  assertSpyCalls(dbStub, 1);\n});\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/stubs", "title": "Stub functions", "description": "Test stubs are an extension of spys that also allows you to replace the method's internal behavior for testing purposes. In this example, we will demonstrate how we can use stubs to only test the desired behaviour.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:37:49", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "ogTitle": "Stub functions", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Stub functions", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "title": "Stub functions", "og:site_name": "Deno", "ogSiteName": "Deno", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Stub functions", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "619af15f-2b1b-44d8-b29a-75dcc301bd8d", "sourceURL": "https://docs.deno.com/examples/stubs", "url": "https://docs.deno.com/examples/stubs/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Stub functions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use stubs to isolate the method being tested from its dependencies.\n• Ensure that the stubbed function behaves as expected during the test.\n", "metadata": {"source_url": "https://docs.deno.com/examples/stubs", "title": "Stub functions", "description": "Test stubs are an extension of spys that also allows you to replace the method's internal behavior for testing purposes. In this example, we will demonstrate how we can use stubs to only test the desired behaviour.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:37:49", "type": "best_practices", "page_metadata": {"twitter:image": "/img/og.webp", "ogTitle": "Stub functions", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Stub functions", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "title": "Stub functions", "og:site_name": "Deno", "ogSiteName": "Deno", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Stub functions", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "619af15f-2b1b-44d8-b29a-75dcc301bd8d", "sourceURL": "https://docs.deno.com/examples/stubs", "url": "https://docs.deno.com/examples/stubs/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"UDP connector: Ping\"?\n\nAssistant: An example of writing a 'ping' message to a UDP server on localhost.\n\nHere's a detailed explanation:\n\n\n## Code Example\nInstantiate an instance of text encoder to write to the UDP stream.\n\n```javascript\nconst encoder = new TextEncoder();\n```\n\nCreate a UDP listener to allow us to send a ping to the other UDP server.\n\n```javascript\nconst listener = Deno.listenDatagram({\n  port: 10001,\n  transport: \"udp\",\n});\n```\n\nSince UDP is a connectionless protocol, we need to define the address of the listener\n\n```javascript\nconst peerAddress: Deno.NetAddr = {\n  transport: \"udp\",\n  hostname: \"127.0.0.1\",\n  port: 10000,\n};\n```\n\nEncode the 'ping' message and write to the UDP connection for the server to receive.\n\n```javascript\nawait listener.send(encoder.encode(\"ping\"), peerAddress);\nlistener.close();\n```\n\nRun this example locally using the Deno CLI:\n\n```bash\ndeno run --allow-net --unstable-net https://docs.deno.com/examples/scripts/udp_connector.ts\n```\n\n## Additional Resources\n- [Doc: Deno.connect](https://docs.deno.com/api/deno/~/Deno.connect)\n- [Example: UDP Listener](https://docs.deno.com/examples/udp_listener)\n", "metadata": {"source_url": "https://docs.deno.com/examples/udp_connector", "title": "UDP connector: Ping", "description": "An example of writing a 'ping' message to a UDP server on localhost.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:37:58", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "UDP connector: Ping", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:site_name": "Deno", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:card": "summary_large_image", "og:title": "UDP connector: Ping", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "UDP connector: Ping", "viewport": "width=device-width, initial-scale=1", "twitter:title": "UDP connector: Ping", "og:locale": "en_US", "ogSiteName": "Deno", "scrapeId": "004234d2-2fcc-4fed-8ade-e8158f8acfe9", "sourceURL": "https://docs.deno.com/examples/udp_connector", "url": "https://docs.deno.com/examples/udp_connector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"UDP connector: Ping\"?\n\nAssistant: Here are some code examples:\n\n### Text Encoder Initialization\n```yaml\nconst encoder = new TextEncoder();\n```\n\n### UDP Listener Creation\n```yaml\nconst listener = Deno.listenDatagram({\n  port: 10001,\n  transport: \"udp\",\n});\n```\n\n### Peer Address Definition\n```yaml\nconst peerAddress: Deno.NetAddr = {\n  transport: \"udp\",\n  hostname: \"127.0.0.1\",\n  port: 10000,\n};\n```\n\n### Sending Ping Message\n```yaml\nawait listener.send(encoder.encode(\"ping\"), peerAddress);\nlistener.close();\n```\n\n### Deno CLI Command to Run Example\n```yaml\ndeno run --allow-net --unstable-net https://docs.deno.com/examples/scripts/udp_connector.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/udp_connector", "title": "UDP connector: Ping", "description": "An example of writing a 'ping' message to a UDP server on localhost.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:37:58", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "UDP connector: Ping", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:site_name": "Deno", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:card": "summary_large_image", "og:title": "UDP connector: Ping", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "UDP connector: Ping", "viewport": "width=device-width, initial-scale=1", "twitter:title": "UDP connector: Ping", "og:locale": "en_US", "ogSiteName": "Deno", "scrapeId": "004234d2-2fcc-4fed-8ade-e8158f8acfe9", "sourceURL": "https://docs.deno.com/examples/udp_connector", "url": "https://docs.deno.com/examples/udp_connector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"UDP connector: Ping\"?\n\nAssistant: Here are the recommended best practices:\n\n• This is an unstable API that is subject to change or removal at any time.\n", "metadata": {"source_url": "https://docs.deno.com/examples/udp_connector", "title": "UDP connector: Ping", "description": "An example of writing a 'ping' message to a UDP server on localhost.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 23:37:58", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "UDP connector: Ping", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:site_name": "Deno", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:card": "summary_large_image", "og:title": "UDP connector: Ping", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "UDP connector: Ping", "viewport": "width=device-width, initial-scale=1", "twitter:title": "UDP connector: Ping", "og:locale": "en_US", "ogSiteName": "Deno", "scrapeId": "004234d2-2fcc-4fed-8ade-e8158f8acfe9", "sourceURL": "https://docs.deno.com/examples/udp_connector", "url": "https://docs.deno.com/examples/udp_connector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Subprocess Spawning: running other files using subprocesses\"?\n\nAssistant: An example of a subprocess being spawned to run specified files using CLI flags.\n\nHere's a detailed explanation:\n\n\n## Example of Subprocess Spawning\nAn example of a subprocess being spawned to run specified files using CLI flags.\n\n## Code Example\n```typescript\nimport { parseArgs } from \"jsr:@std/cli\";\n```\n\nGrab the file name using the parseArgs function from the standard library. If no file is provided, exit with an error.\n\n```typescript\nimport { expandGlob } from \"jsr:@std/fs\";\n\nconst flags = parseArgs(Deno.args, {\n  string: [\"file\"],\n  default: {\n    file: \"\",\n  },\n});\n\nif (!flags.file) {\n  console.error(\"No file provided\");\n  Deno.exit(1);\n}\n```\n\nUse expandGlob to find all files matching the provided filename.\n\n```typescript\nconst FilesList = await Array.fromAsync(\n  expandGlob(`**/*${flags.file}*`, { root: \".\" }),\n);\n\nconst files = FilesList.filter((files) => files.name.includes(flags.file));\n```\n\nIf no files are found, exit with an error.\n\n```typescript\nif (files.length === 0) {\n  console.error(\"No files found\");\n  Deno.exit(1);\n}\n```\n\nIf multiple files are found, exit with an error.\n\n```typescript\nif (files.length > 1) {\n  console.error(\"Multiple files found\");\n  Deno.exit(1);\n}\n\nconst file = files[0];\n```\n\nUse the Deno.Command class to create a new command that will run the specified file.\n\n```typescript\nconst command = new Deno.Command(Deno.execPath(), {\n  args: [file?.path],\n});\n```\n\nTry to spawn the command and catch any errors that may occur. Wait for the subprocess to finish and log the exit code.\n\n```typescript\ntry {\n  const child = command.spawn();\n\n  child.ref();\n} catch (error) {\n  console.error(\"Error while running the file: \", error);\n  Deno.exit(4);\n}\n```\n\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/subprocess_running_files.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-net --allow-run --allow-read https://docs.deno.com/examples/scripts/subprocess_running_files.ts\n```\n\n## Additional Resources\n- [Doc: Deno.Command](https://docs.deno.com/api/deno/~/Deno.Command)\n- [Doc: Deno.FsFile](https://docs.deno.com/api/deno/~/Deno.FsFile)\n- [Doc: Deno.args](https://docs.deno.com/api/deno/~/Deno.args)\n", "metadata": {"source_url": "https://docs.deno.com/examples/subprocess_running_files", "title": "Subprocess Spawning: running other files using subprocesses", "description": "An example of a subprocess being spawned to run specified files using CLI flags.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:38:13", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:title": "Subprocess Spawning: running other files using subprocesses", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogTitle": "Subprocess Spawning: running other files using subprocesses", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "title": "Subprocess Spawning: running other files using subprocesses", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Subprocess Spawning: running other files using subprocesses", "og:locale": "en_US", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "ogSiteName": "Deno", "scrapeId": "64857e4a-e447-4c8c-9bf5-ed8855cd57a3", "sourceURL": "https://docs.deno.com/examples/subprocess_running_files", "url": "https://docs.deno.com/examples/subprocess_running_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Subprocess Spawning: running other files using subprocesses\"?\n\nAssistant: Here are some code examples:\n\n### Subprocess Example\n```yaml\nimport { parseArgs } from \"jsr:@std/cli\";\n\nconst flags = parseArgs(Deno.args, {\n  string: [\"file\"],\n  default: {\n    file: \"\",\n  },\n});\n\nif (!flags.file) {\n  console.error(\"No file provided\");\n  Deno.exit(1);\n}\n\nconst FilesList = await Array.fromAsync(\n  expandGlob(`**/*${flags.file}*`, { root: \".\" }),\n);\n\nconst files = FilesList.filter((files) => files.name.includes(flags.file));\n\nif (files.length === 0) {\n  console.error(\"No files found\");\n  Deno.exit(1);\n}\n\nif (files.length > 1) {\n  console.error(\"Multiple files found\");\n  Deno.exit(1);\n}\n\nconst file = files[0];\n\nconst command = new Deno.Command(Deno.execPath(), {\n  args: [file?.path],\n});\n\ntry {\n  const child = command.spawn();\n\n  child.ref();\n} catch (error) {\n  console.error(\"Error while running the file: \", error);\n  Deno.exit(4);\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/subprocess_running_files", "title": "Subprocess Spawning: running other files using subprocesses", "description": "An example of a subprocess being spawned to run specified files using CLI flags.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:38:13", "type": "code_examples", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:title": "Subprocess Spawning: running other files using subprocesses", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogTitle": "Subprocess Spawning: running other files using subprocesses", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "title": "Subprocess Spawning: running other files using subprocesses", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Subprocess Spawning: running other files using subprocesses", "og:locale": "en_US", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "ogSiteName": "Deno", "scrapeId": "64857e4a-e447-4c8c-9bf5-ed8855cd57a3", "sourceURL": "https://docs.deno.com/examples/subprocess_running_files", "url": "https://docs.deno.com/examples/subprocess_running_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Subprocess Spawning: running other files using subprocesses\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to provide a file name when running the script to avoid errors.\n• Use the Deno CLI with appropriate permissions for file access.\n", "metadata": {"source_url": "https://docs.deno.com/examples/subprocess_running_files", "title": "Subprocess Spawning: running other files using subprocesses", "description": "An example of a subprocess being spawned to run specified files using CLI flags.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:38:13", "type": "best_practices", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:title": "Subprocess Spawning: running other files using subprocesses", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogTitle": "Subprocess Spawning: running other files using subprocesses", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "title": "Subprocess Spawning: running other files using subprocesses", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Subprocess Spawning: running other files using subprocesses", "og:locale": "en_US", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "ogSiteName": "Deno", "scrapeId": "64857e4a-e447-4c8c-9bf5-ed8855cd57a3", "sourceURL": "https://docs.deno.com/examples/subprocess_running_files", "url": "https://docs.deno.com/examples/subprocess_running_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HTTP requests\"?\n\nAssistant: This example demonstrates how to make a HTTP request to a server.\n\nHere's a detailed explanation:\n\n\n## Making a Request\nTo make a request to a server, you use the `fetch` API.\n\n```\nlet resp = await fetch(\"https://example.com\");\n```\n\n## Response Object\nThe response is a `Response` object. This contains the status code, headers, and the body.\n\n```\nconsole.log(resp.status); // 200\nconsole.log(resp.headers.get(\"Content-Type\")); // \"text/html\"\nconsole.log(await resp.text()); // \"Hello, World!\"\n```\n\n## Reading Response Body\nThe response body can also be read as JSON, an ArrayBuffer, or a Blob. A body can be read only once.\n\n```\nresp = await fetch(\"https://example.com\");\nawait resp.arrayBuffer();\n/** or await resp.json(); */\n/** or await resp.blob(); */\n```\n\n## Streaming Response Body\nThe response body can also be streamed in chunks.\n\n```\nresp = await fetch(\"https://example.com\");\nfor await (const chunk of resp.body!) {\n  console.log(\"chunk\", chunk);\n}\n```\n\n## Request Options\nWhen making a request, you can also specify the method, headers, and a body.\n\n```\nresp = await fetch(\"https://example.com\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-API-Key\": \"foobar\",\n  },\n  body: JSON.stringify({\n    param: \"value\",\n  }),\n});\n```\n\n## Using Request Object\n`fetch` also accepts a `Request` object instead of URL + options.\n\n```\nconst req = new Request(\"https://example.com\", {\n  method: \"DELETE\",\n});\nresp = await fetch(req);\n```\n\n## Body Types\nInstead of a string, the body can also be any typed array, blob, or a URLSearchParams object.\n\n```\nconst url = \"https://example.com\";\nnew Request(url, {\n  method: \"POST\",\n  body: new Uint8Array([1, 2, 3]),\n});\nnew Request(url, {\n  method: \"POST\",\n  body: new Blob([\"Hello, World!\"]),\n});\nnew Request(url, {\n  method: \"POST\",\n  body: new URLSearchParams({ \"foo\": \"bar\" }),\n});\n```\n\n## Sending Forms\nForms can also be sent with `fetch` by using a `FormData` object as the body.\n\n```\nconst formData = new FormData();\nformData.append(\"name\", \"Deno\");\nformData.append(\"file\", new Blob([\"Hello, World!\"), \"hello.txt\");\nresp = await fetch(\"https://example.com\", {\n  method: \"POST\",\n  body: formData,\n});\n```\n\n## Streaming Request Body\nFetch also supports streaming the request body.\n\n```\nconst bodyStream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new TextEncoder().encode(\"Hello, World!\"));\n    controller.close();\n  },\n});\nresp = await fetch(\"https://example.com\", {\n  method: \"POST\",\n  body: bodyStream,\n});\n```\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/http_requests.ts) locally using the Deno CLI:\n\n```\ndeno run --allow-net https://docs.deno.com/examples/scripts/http_requests.ts\n```\n\n## Additional Resources\n- [MDN: Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n- [MDN: ReadableStream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_requests", "title": "HTTP requests", "description": "This example demonstrates how to make a HTTP request to a server.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:39:12", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "HTTP requests", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "HTTP requests", "language": "en", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogLocale": "en_US", "og:site_name": "Deno", "og:image": "/img/og.webp", "title": "HTTP requests", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "HTTP requests", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "228d4c29-1e16-47c6-a277-563596494eb4", "sourceURL": "https://docs.deno.com/examples/http_requests", "url": "https://docs.deno.com/examples/http_requests/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HTTP requests\"?\n\nAssistant: Here are some code examples:\n\n### Basic Fetch Request\n```yaml\nlet resp = await fetch(\"https://example.com\");\n```\n\n### Response Status and Headers\n```yaml\nconsole.log(resp.status); // 200\nconsole.log(resp.headers.get(\"Content-Type\")); // \"text/html\"\n```\n\n### Reading Response Body as Text\n```yaml\nconsole.log(await resp.text()); // \"Hello, World!\"\n```\n\n### Reading Response Body as ArrayBuffer\n```yaml\nawait resp.arrayBuffer();\n```\n\n### Reading Response Body as JSON\n```yaml\nawait resp.json();\n```\n\n### Reading Response Body as Blob\n```yaml\nawait resp.blob();\n```\n\n### Streaming Response Body\n```yaml\nfor await (const chunk of resp.body!) {\n  console.log(\"chunk\", chunk);\n}\n```\n\n### Fetch with Options\n```yaml\nresp = await fetch(\"https://example.com\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-API-Key\": \"foobar\",\n  },\n  body: JSON.stringify({\n    param: \"value\",\n  }),\n});\n```\n\n### Using Request Object\n```yaml\nconst req = new Request(\"https://example.com\", {\n  method: \"DELETE\",\n});\nresp = await fetch(req);\n```\n\n### Sending Typed Array\n```yaml\nnew Request(url, {\n  method: \"POST\",\n  body: new Uint8Array([1, 2, 3]),\n});\n```\n\n### Sending Blob\n```yaml\nnew Request(url, {\n  method: \"POST\",\n  body: new Blob([\"Hello, World!\"])\n});\n```\n\n### Sending URLSearchParams\n```yaml\nnew Request(url, {\n  method: \"POST\",\n  body: new URLSearchParams({ \"foo\": \"bar\" }),\n});\n```\n\n### Sending FormData\n```yaml\nconst formData = new FormData();\nformData.append(\"name\", \"Deno\");\nformData.append(\"file\", new Blob([\"Hello, World!\"), \"hello.txt\");\nresp = await fetch(\"https://example.com\", {\n  method: \"POST\",\n  body: formData,\n});\n```\n\n### Streaming Request Body\n```yaml\nconst bodyStream = new ReadableStream({\n  start(controller) {\n    controller.enqueue(new TextEncoder().encode(\"Hello, World!\"));\n    controller.close();\n  },\n});\nresp = await fetch(\"https://example.com\", {\n  method: \"POST\",\n  body: bodyStream,\n});\n```\n\n### Run Example Locally\n```yaml\ndeno run --allow-net https://docs.deno.com/examples/scripts/http_requests.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_requests", "title": "HTTP requests", "description": "This example demonstrates how to make a HTTP request to a server.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:39:12", "type": "code_examples", "page_metadata": {"ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "HTTP requests", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "HTTP requests", "language": "en", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogLocale": "en_US", "og:site_name": "Deno", "og:image": "/img/og.webp", "title": "HTTP requests", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "HTTP requests", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "228d4c29-1e16-47c6-a277-563596494eb4", "sourceURL": "https://docs.deno.com/examples/http_requests", "url": "https://docs.deno.com/examples/http_requests/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"HTTP requests\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the fetch API for making HTTP requests.\n• Always check the response status before processing the response body.\n• Be aware that the response body can only be read once.\n• Consider using FormData for sending forms.\n• Utilize streaming for large request bodies.\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_requests", "title": "HTTP requests", "description": "This example demonstrates how to make a HTTP request to a server.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 23:39:12", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "HTTP requests", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "HTTP requests", "language": "en", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogLocale": "en_US", "og:site_name": "Deno", "og:image": "/img/og.webp", "title": "HTTP requests", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "HTTP requests", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "228d4c29-1e16-47c6-a277-563596494eb4", "sourceURL": "https://docs.deno.com/examples/http_requests", "url": "https://docs.deno.com/examples/http_requests/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build Astro with Deno\"?\n\nAssistant: Astro is a modern web framework focused on content-centric websites, which leverages islands architecture and sends zero JavaScript to the client by default. This page covers how to build a simple Astro project using Deno.\n\nHere's a detailed explanation:\n\n\n## Scaffold an Astro project\nAstro provides a CLI tool to quickly scaffold a new Astro project. In your terminal, run the command `deno init --npm astro@latest` to create a new Astro project with Deno. For this tutorial, we’ll select the “Empty” template so we can start from scratch, and skip installing dependencies so we can install them with Deno later:\n\n```highlight notranslate jsx\ndeno -A npm:create-astro@latest\n\n astro   Launch sequence initiated.\n\n   dir   Where should we create your new project?\n         ./dino-app\n\n  tmpl   How would you like to start your new project?\n         Empty\n\n    ts   Do you plan to write TypeScript?\n         Yes\n\n   use   How strict should TypeScript be?\n         Strict\n\n  deps   Install dependencies?\n         No\n      ◼  No problem!\n         Remember to install dependencies after setup.\n\n   git   Initialize a new git repository?\n         Yes\n\n      ✔  Project initialized!\n         ■ Template copied\n         ■ TypeScript customized\n         ■ Git initialized\n\n  next   Liftoff confirmed. Explore your project!\n\n Enter your project directory using cd ./dino-app\n Run npm run dev to start the dev server. CTRL+C to stop.\n Add frameworks like react or tailwind using astro add.\n\n Stuck? Join us at https://astro.build/chat\n\n╭─────╮  Houston:\n│ ◠ ◡ ◠  Good luck out there, astronaut! 🚀\n╰──🍫─╯\n```\n\nAs of Deno 2, [Deno can also install packages with the new `deno install` command](https://deno.com/blog/v2.0#deno-is-now-a-package-manager-with-deno-install). So let’s run [`deno install`](https://docs.deno.com/runtime/reference/cli/install/) with the flag `--allow-scripts` to execute any npm lifecycle scripts:\n\n```highlight notranslate bash\ndeno install --allow-scripts\n```\n\nTo see what commands we have, let’s run `deno task`:\n\n```highlight notranslate bash\ndeno task\nAvailable tasks:\n- dev (package.json)\n    astro dev\n- start (package.json)\n    astro dev\n- build (package.json)\n    astro check && astro build\n- preview (package.json)\n    astro preview\n- astro (package.json)\n    astro\n```\n\nWe can start the Astro server with `deno task dev`:\n![Getting the Astro app to work](https://docs.deno.com/examples/tutorials/images/how-to/astro/hello-astro.png)\n\n## Update index page to list all dinosaurs\nOur app will display facts about a variety of dinosaurs. The first page to create will be the index page that lists links to all dinosaurs in our “database”.\n\nFirst, let’s create the data that will be used in the app. In this example, we’ll hardcode the data in a json file, but you can use any data storage in practice. We’ll create a `data` folder in the root of the project, then a `dinosaurs.json` file with [this text](https://github.com/denoland/tutorial-with-react/blob/main/api/data.json) in it.\n\n> ⚠️️ In this tutorial we hard code the data. But you can connect to [a variety of databases](https://docs.deno.com/runtime/tutorials/connecting_to_databases/) and [even use ORMs like Prisma](https://docs.deno.com/runtime/tutorials/how_to_with_npm/prisma/) with Deno.\n\nOnce we have the data, let’s create an index page that lists all of the dinosaurs. In the `./src/pages/index.astro` page, let’s write the following:\n\n```highlight notranslate jsx\n---\nimport data from \"../../data/dinosaurs.json\";\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t\t<meta name=\"generator\" content={Astro.generator} />\n\t\t<title>Dinosaurs</title>\n\t</head>\n\t<body>\n\t\t<h1>Dinosaurs</h1>\n\t\t<ul>\n\t\t\t{data.map((dinosaur) => (\n\t\t\t\t<li>\n\t\t\t\t\t<a href={`/${dinosaur.name.toLowerCase()}`}>{ dinosaur.name }</a>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t</body>\n</html>\n```\n\nLet’s start the server with `deno task dev` and point our browser to `localhost:4321`:\n![Index page that lists all dinosaurs](https://docs.deno.com/examples/tutorials/images/how-to/astro/index-page.webp)\n\nAwesome! But when you click on a dinosaur, it 404’s. Let’s fix that.\n\n## Add a dynamic SSR page\nOur app will display facts about a variety of dinosaurs. In order to do that, we’ll create a dynamic server-side rendered (”SSR”), which [offers better performance for end users while improving your pages SEO](https://deno.com/blog/the-future-and-past-is-server-side-rendering).\n\nNext, let’s create a new file under `/src/pages/` called `[dinosaur].astro`. At the top of the file, we'll add some logic to pull data from our hardcoded data source and filter that against the `dinosaur` parameter set from the URL path. At the bottom, we’ll render the data. Your file should look like this:\n\n```highlight notranslate jsx\n---\nimport data from \"../../data/dinosaurs.json\";\nconst { dinosaur } = Astro.params;\nconst dinosaurObj = data.find((item) => item.name.toLowerCase() === dinosaur);\nif (!dinosaurObj) return Astro.redirect(\"/404\");\nconst { name, description } = dinosaurObj;\n---\n\n<h1>{ name }</h1>\n\n<p>\n    { description }\n</p>\n```\n\n> ⚠️️ The [Deno language server](https://docs.deno.com/runtime/reference/lsp_integration/) does not currently support `.astro` files, so you may experience false red squigglies. We're working on improving this experience.\n\nLet’s run it with `deno task dev`, and point our browser to `localhost:4321/abrictosaurus`:\n![Rendering a dynamic page for abrictosaurus](https://docs.deno.com/examples/tutorials/images/how-to/astro/dynamic-page.webp)\n\nIt works!\n\n## What’s next\nWe hope this tutorial gives you a good idea of how to get started building with Astro and Deno. You can learn more about Astro and [their progressive approach to building websites](https://docs.astro.build/en/getting-started/). If you’re interested in swapping out our hardcoded data store, here are some resources on [connecting to databases with Deno](https://docs.deno.com/runtime/tutorials/connecting_to_databases/), including [Planetscale](https://docs.deno.com/runtime/tutorials/how_to_with_npm/planetscale/), [Redis](https://docs.deno.com/runtime/tutorials/how_to_with_npm/redis/), and more. Or you can learn how to [deploy your Astro project to Deno Deploy](https://deno.com/blog/astro-on-deno), or follow these guides on how to self-host Deno to [AWS](https://docs.deno.com/runtime/tutorials/aws_lightsail/), [Digital Ocean](https://docs.deno.com/runtime/tutorials/digital_ocean/), and [Google Cloud Run](https://docs.deno.com/runtime/tutorials/google_cloud_run/).\n", "metadata": {"source_url": "https://docs.deno.com/examples/astro_tutorial", "title": "Build Astro with Deno", "description": "Astro is a modern web framework focused on content-centric websites, which leverages islands architecture and sends zero JavaScript to the client by default. This page covers how to build a simple Astro project using Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:42:37", "type": "overview", "page_metadata": {"title": "Build Astro with Deno", "language": "en", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:site_name": "Deno", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "ogTitle": "Build Astro with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Build Astro with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Build Astro with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "29269167-c596-48ec-9401-6eff55d0f333", "sourceURL": "https://docs.deno.com/examples/astro_tutorial", "url": "https://docs.deno.com/examples/astro_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Build Astro with Deno\"?\n\nAssistant: Here are some code examples:\n\n### Scaffold an Astro project command\n```yaml\ndeno -A npm:create-astro@latest\n```\n\n### Deno install command\n```yaml\ndeno install --allow-scripts\n```\n\n### Deno task command\n```yaml\ndeno task\n```\n\n### Index page code\n```yaml\n---\nimport data from \"../../data/dinosaurs.json\";\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t\t<meta name=\"generator\" content={Astro.generator} />\n\t\t<title>Dinosaurs</title>\n\t</head>\n\t<body>\n\t\t<h1>Dinosaurs</h1>\n\t\t<ul>\n\t\t\t{data.map((dinosaur) => (\n\t\t\t\t<li>\n\t\t\t\t\t<a href={`/${dinosaur.name.toLowerCase()}`}>{ dinosaur.name }</a>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ul>\n\t</body>\n</html>\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/astro_tutorial", "title": "Build Astro with Deno", "description": "Astro is a modern web framework focused on content-centric websites, which leverages islands architecture and sends zero JavaScript to the client by default. This page covers how to build a simple Astro project using Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:42:37", "type": "code_examples", "page_metadata": {"title": "Build Astro with Deno", "language": "en", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:site_name": "Deno", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "ogTitle": "Build Astro with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Build Astro with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Build Astro with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "29269167-c596-48ec-9401-6eff55d0f333", "sourceURL": "https://docs.deno.com/examples/astro_tutorial", "url": "https://docs.deno.com/examples/astro_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Build Astro with Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• In this tutorial we hard code the data. But you can connect to a variety of databases and even use ORMs like Prisma with Deno.\n• The Deno language server does not currently support .astro files, so you may experience false red squigglies. We're working on improving this experience.\n", "metadata": {"source_url": "https://docs.deno.com/examples/astro_tutorial", "title": "Build Astro with Deno", "description": "Astro is a modern web framework focused on content-centric websites, which leverages islands architecture and sends zero JavaScript to the client by default. This page covers how to build a simple Astro project using Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 23:42:37", "type": "best_practices", "page_metadata": {"title": "Build Astro with Deno", "language": "en", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:site_name": "Deno", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "ogTitle": "Build Astro with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Build Astro with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Build Astro with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "29269167-c596-48ec-9401-6eff55d0f333", "sourceURL": "https://docs.deno.com/examples/astro_tutorial", "url": "https://docs.deno.com/examples/astro_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Web API\"?\n\nAssistant: Tools and functionalities provided by Deno for web development.\n\nHere's a detailed explanation:\n\n\n## Cache\nTools for caching and managing data. Store and retrieve data from the cache, manage cache storage limits, and handle cache-related events.\n\nEg [`caches`](https://docs.deno.com/api/web/~/caches)\n\n## Canvas\nCreate, transform, and display images and graphics within the HTML element.\n\nEg [`createImageBitmap`](https://docs.deno.com/api/web/~/createImageBitmap)\n\n## Crypto\nCryptographic functionality for secure communication, data protection, and key management. Generate secure random numbers, encrypt and decrypt data, and manage cryptographic keys.\n\nEg [`crypto`](https://docs.deno.com/api/web/~/crypto)\n\n## Encoding\nHandle character encoding, decoding, and binary data conversion.\n\nEg [`TextDecoder`](https://docs.deno.com/api/web/~/TextDecoder), [`TextEncoder`](https://docs.deno.com/api/web/~/TextEncoder)\n\n## Events\nHandle events and interactions. Listen for and respond to various events, including custom events, errors, progress, and promise rejections.\n\nEg [`addEventListener`](https://docs.deno.com/api/web/~/addEventListener)\n\n## Fetch\nHTTP client for fetching data across a network. Retrieve resources from servers, handle responses, and manage network requests.\n\nEg [`fetch`](https://docs.deno.com/api/web/~/fetch), [`Response`](https://docs.deno.com/api/web/~/Response), [`Request`](https://docs.deno.com/api/web/~/Request), [`Headers`](https://docs.deno.com/api/web/~/Headers)\n\n## File\nFile and data manipulation tools. Handle files, read data and work with binary content.\n\nEg [`File`](https://docs.deno.com/api/web/~/File), [`Blob`](https://docs.deno.com/api/web/~/Blob)\n\n## GPU\nGPU programming and rendering. Efficiently use a device’s graphics processing unit (GPU) for high-performance computations and complex image rendering.\n\nEg [`GPUDevice`](https://docs.deno.com/api/web/~/GPUDevice)\n\n## I/O\nInterfaces for reading, writing, seeking, and managing resources. For handling of data streams, file I/O, and console interactions.\n\nEg `stdin`, `inspect`\n\n## Intl\nTools for internationalization and localization. Create language-aware applications, handle date and time formatting, and adapt content for different locales.\n\nEg [`Intl`](https://docs.deno.com/api/web/~/Intl)\n\n## Messaging\nFacilitate communication between different parts of an application, allowing data exchange and coordination.\n\nEg [`BroadcastChannel`](https://docs.deno.com/api/web/~/BroadcastChannel), [`MessageChannel`](https://docs.deno.com/api/web/~/MessageChannel)\n\n## Performance\nMeasure, analyze, and optimize application performance.\n\nEg [`performance`](https://docs.deno.com/api/web/~/performance)\n\n## Platform\nA set of essential interfaces and functions to interact with the browser environment. Eg handling user interactions, getting browser and device information, scheduling and canceling periodic or one-time tasks.\n\n[`prompt`](https://docs.deno.com/api/web/~/prompt), [`console`](https://docs.deno.com/api/web/~/console)\n\n## Storage\nStore data locally within the browser. Manage session storage and local storage.\n\n[`sessionStorage`](https://docs.deno.com/api/web/~/sessionStorage), [`localStorage`](https://docs.deno.com/api/web/~/localStorage)\n\n## Streams\nManage data streams, queuing strategies, and transformations. Handle data in chunks, process large datasets, and optimize memory usage.\n\nEg [`ReadableStream`](https://docs.deno.com/api/web/~/ReadableStream), [`WritableStream`](https://docs.deno.com/api/web/~/WritableStream), [`TransformStream`](https://docs.deno.com/api/web/~/TransformStream)\n\n## Temporal\nDate and time handling. Includes long-lived Workflows, calendar systems, time zones, and precise duration calculations.\n\nEg [`Temporal.Now`](https://docs.deno.com/api/web/~/Temporal.Now), [`Temporal.PlainDate`](https://docs.deno.com/api/web/~/Temporal.PlainDate)\n\n## URL\nManipulate URLs, extract data from URLs and manage query parameters.\n\nEg [`URL`](https://docs.deno.com/api/web/~/URL)\n\n## Wasm\nEfficiently execute computationally intensive tasks. Wasm module compilation, instantiation, memory management, and interaction with imports and exports.\n\nEg [`WebAssembly.instantiate`](https://docs.deno.com/api/web/~/WebAssembly.instantiate), [`WebAssembly.Module`](https://docs.deno.com/api/web/~/WebAssembly.Module), [`WebAssembly.Instance`](https://docs.deno.com/api/web/~/WebAssembly.Instance)\n\n## WebSockets\nEnable real-time communication between clients and servers using WebSockets. Tools to create interactive and dynamic applications.\n\nEg [`WebSocket`](https://docs.deno.com/api/web/~/WebSocket)\n\n## Workers\nRun script operations in background threads. Manage worker threads, communicate with workers, and handle data transfer between workers and the main thread.\n\nEg [`Worker`](https://docs.deno.com/api/web/~/Worker)\n\n## Uncategorized\n\n", "metadata": {"source_url": "https://docs.deno.com/api/web", "title": "Deno Web API", "description": "Tools and functionalities provided by Deno for web development.", "has_code_examples": false, "has_best_practices": false, "section_count": 21, "timestamp": "2025-02-27 23:43:07", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:type": "article", "og:site_name": "Deno", "title": "Web documentation", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:site": "@deno_land", "twitter:title": "Web documentation", "twitter:image": "/img/og.webp", "ogTitle": "Web documentation", "og:title": "Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "scrapeId": "0b3d3b68-30e8-4048-9f1f-b1ae060351a8", "sourceURL": "https://docs.deno.com/api/web", "url": "https://docs.deno.com/api/web/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Subprocesses: Collecting output\"?\n\nAssistant: This page covers how to interact with the outside system by spawning a subprocess using Deno.Command.\n\nHere's a detailed explanation:\n\n\n## Introduction\nWe don't often write programs in isolation. In a lot of cases we want to interact with the outside system and spawning a subprocess is a common way to do this.\n\n## Using Deno.Command\nThe Deno namespace has a unified api for interacting with the outside system called Deno.Command. With it, we can initialize some information about the command but it will not be executed immediately.\n\n## Running the Process\nIn the most simple case we just want to run the process to completion. This can be achieved using command.output() or command.outputSync().\n\n## Interacting with stdout and stderr\nWe can now interact with stdout and stderr using a TextDecoder.\n\n## Running the Example Locally\nRun this example locally using the Deno CLI.\n\n## Additional Resources\nLinks to additional documentation and resources.\n", "metadata": {"source_url": "https://docs.deno.com/examples/subprocesses_output", "title": "Subprocesses: Collecting output", "description": "This page covers how to interact with the outside system by spawning a subprocess using Deno.Command.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:43:20", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "language": "en", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Subprocesses: Collecting output", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Subprocesses: Collecting output", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:locale": "en_US", "title": "Subprocesses: Collecting output", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Subprocesses: Collecting output", "twitter:site": "@deno_land", "scrapeId": "102033db-7244-48ac-a273-311eb761632a", "sourceURL": "https://docs.deno.com/examples/subprocesses_output", "url": "https://docs.deno.com/examples/subprocesses_output/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Subprocesses: Collecting output\"?\n\nAssistant: Here are some code examples:\n\n### Creating a Command\n```yaml\nconst command = new Deno.Command(\"deno\", {\n  args: [\\\n    \"eval\",\\\n    \"\\\\\n    console.log('hello from deno'); \\\n    console.error('hello from stderr'); \\\n    \",\\\n  ],\n});\n```\n\n### Running the Command Asynchronously\n```yaml\nlet result = await command.output();\n```\n\n### Running the Command Synchronously\n```yaml\nresult = command.outputSync();\n```\n\n### Reading stdout and stderr\n```yaml\nconst textDecoder = new TextDecoder();\nconsole.log(\"stdout:\", textDecoder.decode(result.stdout));\nconsole.log(\"stderr:\", textDecoder.decode(result.stderr));\n```\n\n### Running the Example\n```yaml\ndeno run --allow-run https://docs.deno.com/examples/scripts/subprocesses_output.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/subprocesses_output", "title": "Subprocesses: Collecting output", "description": "This page covers how to interact with the outside system by spawning a subprocess using Deno.Command.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:43:20", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "language": "en", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Subprocesses: Collecting output", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Subprocesses: Collecting output", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:locale": "en_US", "title": "Subprocesses: Collecting output", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Subprocesses: Collecting output", "twitter:site": "@deno_land", "scrapeId": "102033db-7244-48ac-a273-311eb761632a", "sourceURL": "https://docs.deno.com/examples/subprocesses_output", "url": "https://docs.deno.com/examples/subprocesses_output/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Subprocesses: Collecting output\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use Deno.Command for a unified API to interact with subprocesses.\n• Consider using command.output() for asynchronous execution and command.outputSync() for synchronous execution.\n", "metadata": {"source_url": "https://docs.deno.com/examples/subprocesses_output", "title": "Subprocesses: Collecting output", "description": "This page covers how to interact with the outside system by spawning a subprocess using Deno.Command.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:43:20", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "language": "en", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Subprocesses: Collecting output", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Subprocesses: Collecting output", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:locale": "en_US", "title": "Subprocesses: Collecting output", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Subprocesses: Collecting output", "twitter:site": "@deno_land", "scrapeId": "102033db-7244-48ac-a273-311eb761632a", "sourceURL": "https://docs.deno.com/examples/subprocesses_output", "url": "https://docs.deno.com/examples/subprocesses_output/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deploy Deno to AWS Lambda\"?\n\nAssistant: Show how to deploy Deno applications to AWS Lambda (using a community runtime for Lambda).\n\nHere's a detailed explanation:\n\n\n## Description of video\nShow how to deploy Deno applications to AWS Lambda (using a community runtime for Lambda).\n\n## Transcript and code\n### Run Deno on AWS Lambda\nRunning Deno on AWS Lambda? Sure, you can do that. With AWS lambda the serverless pricing can be cheaper than a VPS and can be easier to maintain because it can auto scale behind the scenes.\n\nTo make that work, we’re going to use the aws-lambda-adapter project to make sure that our `Deno.serve` function runs as we expect it to. This is a popular approach to deploying to AWS lambda due to control, flexibility, and consistency.\n\nThere’s a nice article on this on the blog if you want to learn more about these considerations.\n\nLet’s take a look at the Dockerfile that we can use to make this work:\n\n```highlight notranslate dockerfile\n# Set up the base image\nFROM public.ecr.aws/awsguru/aws-lambda-adapter:0.8.4 AS aws-lambda-adapter\nFROM denoland/deno:bin-2.0.2 AS deno_bin\nFROM debian:bookworm-20230703-slim AS deno_runtime\nCOPY --from=aws-lambda-adapter /lambda-adapter /opt/extensions/lambda-adapter\nCOPY --from=deno_bin /deno /usr/local/bin/deno\nENV PORT=8000\nEXPOSE 8000\nRUN mkdir /var/deno_dir\nENV DENO_DIR=/var/deno_dir\n\n# Copy the function code\nWORKDIR \"/var/task\"\nCOPY . /var/task\n\n# Warmup caches\nRUN timeout 10s deno -A main.ts || [ $? -eq 124 ] || exit 1\n\nCMD [\"deno\", \"-A\", \"main.ts\"]\n```\n\nThen we’ll build the Docker image.\n\n```highlight notranslate shell\ndocker build -t my-deno-project .\n```\n\nNow we need to start interfacing with AWS. If this is your first time working with AWS, you can create an account:\n[https://aws.amazon.com](https://aws.amazon.com/)\n\nAnd if you haven’t installed the AWS CLI, you can do that too. You know if it’s installed by typing `aws` into your Terminal or Command Prompt. If that returns an error you can install with homebrew or follow the instructions through the website:\n[https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)\n\n```\nbrew install awscli\n```\n\nThen you’ll want to make sure that you’re set up with `aws configure`. Everything that it is looking for is in the [Security Credentials section of the\\ AWS Console](https://us-east-1.console.aws.amazon.com/ecr/private-registry/repositories).\n\n## Use the CLI to create an ECR\nThe ECR is a registry service where we can push our docker container\n\n```\naws ecr create-repository --repository-name my-deno-project --region us-east-1 | grep repositoryUri\n```\n\nThis outputs a URI for the repo: `\"repositoryUri\": \"<<myuserid>> [.dkr.ecr.us-west-1.amazonaws.com/my-deno-project](http://.dkr.ecr.us-west-1.amazonaws.com/my-deno-project)\",`\n\nThen log in using the URI that comes back\n\n```highlight notranslate shell\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <username>.dkr.ecr.us-east-1.amazonaws.com/my-deno-project\n```\n\nTag the image\n\n```highlight notranslate shell\ndocker tag my-deno-project:latest <myProject>.dkr.ecr.us-east-1.amazonaws.com/my-deno-project:latest\n```\n\nThen Push the image to ECR\n\n```highlight notranslate shell\ndocker push <myproject>.dkr.ecr.us-west-1.amazonaws.com/my-deno-project:latest\n```\n\nNow we need to create a function that will host our app:\n\n- [https://us-east-1.console.aws.amazon.com/lambda/home?region=us-east-1#/begin](https://us-east-1.console.aws.amazon.com/lambda/home?region=us-east-1#/begin)\n- Think of a function as being a place where the app is going to run\n- Select Create a Function\n- Select Container Image Radio Button\n- Call the function `tree-app`\n- Select the app from the Browse Containers button\n- Halfway down the page select “Configuration”\n- Select `Function URL`\n- Create a URL\n- Select None so the endpoint is public\n- Select Save\n- Check the app in the browser\n\nOne thing to keep in mind with Lambda functions is cold start performance. Cold starts happen when AWS needs to initialize your function, and it can cause slight delays. There’s a pretty cool [blog here that goes through Deno vs. other\\ tools](https://deno.com/blog/aws-lambda-coldstart-benchmarks).\n\nUsing Deno with AWS Lambda functions is a great way to stand up your app quickly in a familiar environment.\n\nFind more videos in the [Examples page](https://docs.deno.com/examples/) and on our [YouTube channel](https://www.youtube.com/@deno_land).\n", "metadata": {"source_url": "https://docs.deno.com/examples/deploy_deno_to_aws_lambda", "title": "Deploy Deno to AWS Lambda", "description": "Show how to deploy Deno applications to AWS Lambda (using a community runtime for Lambda).", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:44:09", "type": "overview", "page_metadata": {"title": "Deploy Deno to AWS Lambda", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Deploy Deno to AWS Lambda", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:title": "Deploy Deno to AWS Lambda", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Deploy Deno to AWS Lambda", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "language": "en", "og:locale": "en_US", "scrapeId": "9696d52e-f277-4e43-b65c-11a1052986c4", "sourceURL": "https://docs.deno.com/examples/deploy_deno_to_aws_lambda", "url": "https://docs.deno.com/examples/deploy_deno_to_aws_lambda/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deploy Deno to AWS Lambda\"?\n\nAssistant: Here are some code examples:\n\n### Dockerfile for Deno on AWS Lambda\n```yaml\n# Set up the base image\nFROM public.ecr.aws/awsguru/aws-lambda-adapter:0.8.4 AS aws-lambda-adapter\nFROM denoland/deno:bin-2.0.2 AS deno_bin\nFROM debian:bookworm-20230703-slim AS deno_runtime\nCOPY --from=aws-lambda-adapter /lambda-adapter /opt/extensions/lambda-adapter\nCOPY --from=deno_bin /deno /usr/local/bin/deno\nENV PORT=8000\nEXPOSE 8000\nRUN mkdir /var/deno_dir\nENV DENO_DIR=/var/deno_dir\n\n# Copy the function code\nWORKDIR \"/var/task\"\nCOPY . /var/task\n\n# Warmup caches\nRUN timeout 10s deno -A main.ts || [ $? -eq 124 ] || exit 1\n\nCMD [\"deno\", \"-A\", \"main.ts\"]\n```\n\n### Build Docker Image\n```yaml\ndocker build -t my-deno-project .\n```\n\n### Create ECR Repository\n```yaml\naws ecr create-repository --repository-name my-deno-project --region us-east-1 | grep repositoryUri\n```\n\n### Login to ECR\n```yaml\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <username>.dkr.ecr.us-east-1.amazonaws.com/my-deno-project\n```\n\n### Tag Docker Image\n```yaml\ndocker tag my-deno-project:latest <myProject>.dkr.ecr.us-east-1.amazonaws.com/my-deno-project:latest\n```\n\n### Push Docker Image to ECR\n```yaml\ndocker push <myproject>.dkr.ecr.us-west-1.amazonaws.com/my-deno-project:latest\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/deploy_deno_to_aws_lambda", "title": "Deploy Deno to AWS Lambda", "description": "Show how to deploy Deno applications to AWS Lambda (using a community runtime for Lambda).", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:44:09", "type": "code_examples", "page_metadata": {"title": "Deploy Deno to AWS Lambda", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Deploy Deno to AWS Lambda", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:title": "Deploy Deno to AWS Lambda", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Deploy Deno to AWS Lambda", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "language": "en", "og:locale": "en_US", "scrapeId": "9696d52e-f277-4e43-b65c-11a1052986c4", "sourceURL": "https://docs.deno.com/examples/deploy_deno_to_aws_lambda", "url": "https://docs.deno.com/examples/deploy_deno_to_aws_lambda/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deploy Deno to AWS Lambda\"?\n\nAssistant: Here are the recommended best practices:\n\n• Using the aws-lambda-adapter project for deploying Deno applications to AWS Lambda provides control, flexibility, and consistency.\n• Be aware of cold start performance when using AWS Lambda functions, as it can cause slight delays.\n", "metadata": {"source_url": "https://docs.deno.com/examples/deploy_deno_to_aws_lambda", "title": "Deploy Deno to AWS Lambda", "description": "Show how to deploy Deno applications to AWS Lambda (using a community runtime for Lambda).", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:44:09", "type": "best_practices", "page_metadata": {"title": "Deploy Deno to AWS Lambda", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Deploy Deno to AWS Lambda", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:title": "Deploy Deno to AWS Lambda", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Deploy Deno to AWS Lambda", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "language": "en", "og:locale": "en_US", "scrapeId": "9696d52e-f277-4e43-b65c-11a1052986c4", "sourceURL": "https://docs.deno.com/examples/deploy_deno_to_aws_lambda", "url": "https://docs.deno.com/examples/deploy_deno_to_aws_lambda/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Subhosting Resources\"?\n\nAssistant: To build Subhosting with Deno Deploy, it helps to understand some key resources within the system. These resources are also represented in the REST API.\n\nHere's a detailed explanation:\n\n\n## Organizations\nOrganizations are a container for all data related to a subhosting implementation. Your organization will have a name and an ID. Each organization has an analytics endpoint which can be used to get metrics (such as request count and bandwidth used) from across the organization.\n\nOther Deploy users can be invited to collaborate on an organization, and access tokens can give developers with organization access the ability to modify resources within the org via API. New organizations can be created in the Deploy dashboard.\n\n## Projects\nProjects act as organizational containers for deployments. A project contains its deployments and the analytics and usage information for those deployments.\n\nProjects are free and can be set up as required.\n\nTo track usage by individual users for billing there is an API endpoint that reports analytics (bandwidth usage, request count, etc), per project, with 15 minute granularity.\n\n> All deployments (whether within a same project or between different projects) share nothing by default. Projects are a way to organize your deployments and do not cost anything. However analytics are reported on a per-project basis, if you have multiple tenants we recommend setting up a project for each. Particularly if you expect to bill your users for their usage.\n\n## Deployments\nDeployments: a deployment is a set of configuration, runnable code, and supporting static files that can run on an isolate in Deno Deploy. Deployments have an entry file that can launch a server, can have a Deno KV database associated with them, and can be set up to run on custom domains.\n\nA deployment is an immutable object that consists of:\n\n- Source code to run\n- Static assets\n- Environment variables\n- Database bindings\n- Other settings\n\nWe provide endpoints for querying or streaming build logs and querying or streaming execution logs.\n\nIf you need to block or unblock a deployment you can do so by deleting the deployment that you need to block or by unassigning its domains. This will make the deployment unreachable.\n\nThe Subhosting system is built so that the behavior or load on one deployment does not affect other deployments. This also applies to different deployments within one organization. Capacity is auto-scaled on demand. If you want to limit resources to a particular deployment or application you can use the analytics API to provide you with detailed metrics (request count, bandwidth, etc) at project level granularity. You can use this to decide whether to shut off deployments and make them unreachable.\n\n> NB. Deployments are immutable, however, you can create a new deployment and then remap its domain to the new deployment. The redeploy endpoint can create a new deployment from an existing one with different settings.\n\n## Custom domains\nCustom domains can be dynamically mapped to deployments, giving them a unique URL (eg mycompany.com).\n\nBefore a domain can be used you need to verify ownership and provision or upload TLS certificates.\n\nIf you are on the Builder tier you can use wildcard domains. Once you have a wildcard domain registered, you can use it in two ways:\n\n- Send all requests for `*.mycompany.com` to a specific deployment\n- (Coming soon) Assign different subdomains (e.g. `foo.mycompany.com` and `bar.mycompany.com`) to separate deployments.\n\n## Staging vs Production Environments\nThe Deno Deploy end-user platform automatically creates preview deployments when a developer opens a github pull request, and commits to the “main” branch are automatically turned into production deployments. Although subhosting does not provide github integration out of the box, it has all the primitives you need to define your own semantics for creating preview and production deployments.\n\n## Connecting a KV Database\nA (KV) database stores key-value pairs You can make a database accessible to a deployment when you make the deployment. KV databases can be used by multiple deployments at the same time.\n\nTo use KV with Subhosting:\n\n- Create a database using the API\n- When you create a deployment using the Subhosting API, specify the database you created.\n\n> NB. Deno Cron and Queues do not currently work for Subhosting.\n\n## OpenAPI specification and tooling\nThe OpenAPI specification for the Deploy API can be found here:\n\n```highlight notranslate console\nhttps://api.deno.com/v1/openapi.json\n```\n\nThis spec document can be used with a large number of OpenAPI-compatible tools. In addition to the documentation for the REST API maintained here, you can find auto-generated API documentation (including a browser-based testing tool) here.\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/api", "title": "Subhosting Resources", "description": "To build Subhosting with Deno Deploy, it helps to understand some key resources within the system. These resources are also represented in the REST API.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:45:35", "type": "overview", "page_metadata": {"og:type": "article", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Subhosting Resources", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:title": "Subhosting Resources", "language": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Subhosting Resources", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Subhosting Resources", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "d90a5c33-b726-46bb-9400-01ce7796c256", "sourceURL": "https://docs.deno.com/subhosting/api", "url": "https://docs.deno.com/subhosting/api/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Subhosting Resources\"?\n\nAssistant: Here are some code examples:\n\n### OpenAPI Specification URL\n```yaml\nhttps://api.deno.com/v1/openapi.json\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/api", "title": "Subhosting Resources", "description": "To build Subhosting with Deno Deploy, it helps to understand some key resources within the system. These resources are also represented in the REST API.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:45:35", "type": "code_examples", "page_metadata": {"og:type": "article", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Subhosting Resources", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:title": "Subhosting Resources", "language": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Subhosting Resources", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Subhosting Resources", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "d90a5c33-b726-46bb-9400-01ce7796c256", "sourceURL": "https://docs.deno.com/subhosting/api", "url": "https://docs.deno.com/subhosting/api/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Subhosting Resources\"?\n\nAssistant: Here are the recommended best practices:\n\n• All deployments (whether within a same project or between different projects) share nothing by default. Projects are a way to organize your deployments and do not cost anything. However analytics are reported on a per-project basis, if you have multiple tenants we recommend setting up a project for each. Particularly if you expect to bill your users for their usage.\n• Deployments are immutable, however, you can create a new deployment and then remap its domain to the new deployment. The redeploy endpoint can create a new deployment from an existing one with different settings.\n• Deno Cron and Queues do not currently work for Subhosting.\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/api", "title": "Subhosting Resources", "description": "To build Subhosting with Deno Deploy, it helps to understand some key resources within the system. These resources are also represented in the REST API.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:45:35", "type": "best_practices", "page_metadata": {"og:type": "article", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Subhosting Resources", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:title": "Subhosting Resources", "language": "en", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Subhosting Resources", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Subhosting Resources", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "d90a5c33-b726-46bb-9400-01ce7796c256", "sourceURL": "https://docs.deno.com/subhosting/api", "url": "https://docs.deno.com/subhosting/api/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build a SolidJS app with Deno\"?\n\nAssistant: SolidJS is a declarative JavaScript library for creating user interfaces that emphasizes fine-grained reactivity and minimal overhead. When combined with Deno's modern runtime environment, you get a powerful, performant stack for building web applications. In this tutorial, we'll build a simple dinosaur catalog app that demonstrates the key features of both technologies.\n\nHere's a detailed explanation:\n\n\n## Scaffold a SolidJS app with Vite\nLet's set up our SolidJS application using Vite, a modern build tool that provides an excellent development experience with features like hot module replacement and optimized builds.\n\n```highlight notranslate bash\ndeno init --npm vite@latest solid-deno --template solid-ts\n```\n\nOur backend will be powered by Hono, which we can install via JSR. Let's also add solidjs/router for client-side routing and navigation between our dinosaur catalog pages.\n\n```highlight notranslate bash\ndeno add jsr:@hono/hono npm:@solidjs/router\n```\n\n[Learn more about `deno add` and using Deno as a package manager.](https://docs.deno.com/runtime/reference/cli/add/)\n\nWe'll also have to update our `deno.json` to include a few tasks and `compilerOptions` to run our app:\n\n```highlight notranslate json\n{\n  \"tasks\": {\n    \"dev\": \"deno task dev:api & deno task dev:vite\",\n    \"dev:api\": \"deno run --allow-env --allow-net --allow-read api/main.ts\",\n    \"dev:vite\": \"deno run -A npm:vite\",\n    \"build\": \"deno run -A npm:vite build\",\n    \"serve\": {\n      \"command\": \"deno task dev:api\",\n      \"description\": \"Run the build, and then start the API server\",\n      \"dependencies\": [\"deno task build\"]\n    }\n  },\n  \"imports\": {\n    \"@hono/hono\": \"jsr:@hono/hono@^4.6.12\",\n    \"@solidjs/router\": \"npm:@solidjs/router@^0.14.10\"\n  },\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"solid-js\",\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ESNext\"]\n  }\n}\n```\n\n[You can write your `tasks` as objects](https://docs.deno.com/runtime/reference/cli/task/). Here our `serve` command includes a `description` and `dependencies`.\n\n## Set up our Hono backend\nWithin our main directory, we will set up an `api/` directory and create two files. First, our dinosaur data file, [`api/data.json`](https://github.com/denoland/examples/blob/main/with-solidjs/api/data.json):\n\n```highlight notranslate jsonc\n// api/data.json\n\n[\\\n  {\\\n    \"name\": \"Aardonyx\",\\\n    \"description\": \"An early stage in the evolution of sauropods.\"\\\n  },\\\n  {\\\n    \"name\": \"Abelisaurus\",\\\n    \"description\": \"\\\"Abel's lizard\\\" has been reconstructed from a single skull.\"\\\n  },\\\n  {\\\n    \"name\": \"Abrictosaurus\",\\\n    \"description\": \"An early relative of Heterodontosaurus.\"\\\n  },\\\n  ...\\\n]\n```\n\nThis is where our data will be pulled from. In a full application, this data would come from a database.\n\n> ⚠️️ In this tutorial we hard code the data. But you can connect to [a variety of databases](https://docs.deno.com/runtime/tutorials/connecting_to_databases/) and [even use ORMs like Prisma](https://docs.deno.com/runtime/tutorials/how_to_with_npm/prisma/) with Deno.\n\nSecondly, we need our Hono server, `api/main.ts`:\n\n```highlight notranslate tsx\n// api/main.ts\n\nimport { Hono } from \"@hono/hono\";\nimport data from \"./data.json\" with { type: \"json\" };\n\nconst app = new Hono();\n\napp.get(\"/\", (c) => {\n  return c.text(\"Welcome to the dinosaur API!\");\n});\n\napp.get(\"/api/dinosaurs\", (c) => {\n  return c.json(data);\n});\n\napp.get(\"/api/dinosaurs/:dinosaur\", (c) => {\n  if (!c.req.param(\"dinosaur\")) {\n    return c.text(\"No dinosaur name provided.\");\n  }\n\n  const dinosaur = data.find((item) =>\n    item.name.toLowerCase() === c.req.param(\"dinosaur\").toLowerCase()\n  );\n\n  console.log(dinosaur);\n\n  if (dinosaur) {\n    return c.json(dinosaur);\n  } else {\n    return c.notFound();\n  }\n});\n\nDeno.serve(app.fetch);\n```\n\nThis Hono server provides two API endpoints:\n\n- `GET /api/dinosaurs` to fetch all dinosaurs, and\n- `GET /api/dinosaurs/:dinosaur` to fetch a specific dinosaur by name\n\nThis server will be started on `localhost:8000` when we run `deno task dev`.\n\nFinally, before we start building out the frontend, let's update our `vite.config.ts` file with the below, especially the `server.proxy`, which informs our SolidJS frontend where to locate the API endpoint.\n\n```highlight notranslate tsx\n// vite.config.ts\nimport { defineConfig } from \"vite\";\nimport solid from \"vite-plugin-solid\";\n\nexport default defineConfig({\n  plugins: [solid()],\n  server: {\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:8000\",\n        changeOrigin: true,\n      },\n    },\n  },\n});\n```\n\n## Create our SolidJS frontend\nBefore we begin building out the frontend components, let's quickly define the `Dino` type in `src/types.ts`:\n\n```highlight notranslate tsx\n// src/types.ts\nexport type Dino = {\n  name: string;\n  description: string;\n};\n```\n\nThe `Dino` type interface ensures type safety throughout our application, defining the shape of our dinosaur data and enabling TypeScript's static type checking.\n\nNext, let's set up our frontend to receive that data. We're going to have two pages:\n\n- `Index.tsx`\n- `Dinosaur.tsx`\n\nHere's the code for the `src/pages/Index.tsx` page:\n\n```highlight notranslate tsx\n// src/pages/Index.tsx\n\nimport { createSignal, For, onMount } from \"solid-js\";\nimport { A } from \"@solidjs/router\";\nimport type { Dino } from \"../types.ts\";\n\nexport default function Index() {\n  const [dinosaurs, setDinosaurs] = createSignal<Dino[]>([]);\n\n  onMount(async () => {\n    try {\n      const response = await fetch(\"/api/dinosaurs\");\n      const allDinosaurs = (await response.json()) as Dino[];\n      setDinosaurs(allDinosaurs);\n      console.log(\"Fetched dinosaurs:\", allDinosaurs);\n    } catch (error) {\n      console.error(\"Failed to fetch dinosaurs:\", error);\n    }\n  });\n\n  return (\n    <main>\n      <h1>Welcome to the Dinosaur app</h1>\n      <p>Click on a dinosaur below to learn more.</p>\n      <For each={dinosaurs()}>\n        {(dinosaur) => (\n          <A href={`/${dinosaur.name.toLowerCase()}`} class=\"dinosaur\">\n            {dinosaur.name}\n          </A>\n        )}\n      </For>\n    </main>\n  );\n}\n```\n\nWhen using SolidJS, there are a few key differences to React to be aware of:\n\n1. We use SolidJS-specific primitives:\n   - `createSignal` instead of `useState`\n   - `createEffect` instead of `useEffect`\n   - `For` component instead of `map`\n   - `A` component instead of `Link`\n2. SolidJS components use fine-grained reactivity, so we call signals as functions, e.g. `dinosaur()` instead of just `dinosaur`\n3. The routing is handled by `@solidjs/router` instead of `react-router-dom`\n4. Component imports use Solid's [`lazy`](https://docs.solidjs.com/reference/component-apis/lazy) for code splitting\n\nThe `Index` page uses SolidJS's `createSignal` to manage the list of dinosaurs and `onMount` to fetch the data when the component loads. We use the `For` component, which is SolidJS's efficient way of rendering lists, rather than using JavaScript's map function. The `A` component from `@solidjs/router` creates client-side navigation links to individual dinosaur pages, preventing full page reloads.\n\nNow the individual dinosaur data page at `src/pages/Dinosaur.tsx`:\n\n```highlight notranslate tsx\n// src/pages/Dinosaur.tsx\n\nimport { createSignal, onMount } from \"solid-js\";\nimport { A, useParams } from \"@solidjs/router\";\nimport type { Dino } from \"../types.ts\";\n\nexport default function Dinosaur() {\n  const params = useParams();\n  const [dinosaur, setDinosaur] = createSignal<Dino>({\n    name: \"\",\n    description: \"\",\n  });\n\n  onMount(async () => {\n    const resp = await fetch(`/api/dinosaurs/${params.selectedDinosaur}`);\n    const dino = (await resp.json()) as Dino;\n    setDinosaur(dino);\n    console.log(\"Dinosaur\", dino);\n  });\n\n  return (\n    <div>\n      <h1>{dinosaur().name}</h1>\n      <p>{dinosaur().description}</p>\n      <A href=\"/\">Back to all dinosaurs</A>\n    </div>\n  );\n}\n```\n\nThe `Dinosaur` page demonstrates SolidJS's approach to dynamic routing by using `useParams` to access the URL parameters. It follows a similar pattern to the `Index` page, using `createSignal` for state management and `onMount` for data fetching, but focuses on a single dinosaur's details. This `Dinosaur` component also shows how to access signal values in the template by calling them as functions (e.g., `dinosaur().name`), which is a key difference from React's state management.\n\nFinally, to tie it all together, we'll update the `App.tsx` file, which will serve both the `Index` and `Dinosaur` pages as components. The `App` component sets up our routing configuration using `@solidjs/router`, defining two main routes: the index route for our dinosaur list and a dynamic route for individual dinosaur pages. The `:selectedDinosaur` parameter in the route path creates a dynamic segment that matches any dinosaur name in the URL.\n\n```highlight notranslate tsx\n// src/App.tsx\n\nimport { Route, Router } from \"@solidjs/router\";\nimport Index from \"./pages/Index.tsx\";\nimport Dinosaur from \"./pages/Dinosaur.tsx\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Route path=\"/\" component={Index} />\n      <Route path=\"/:selectedDinosaur\" component={Dinosaur} />\n    </Router>\n  );\n};\n\nexport default App;\n```\n\nFinally, this `App` component will be called from our main index:\n\n```highlight notranslate tsx\n// src/index.tsx\n\nimport { render } from \"solid-js/web\";\nimport App from \"./App.tsx\";\nimport \"./index.css\";\n\nconst wrapper = document.getElementById(\"root\");\n\nif (!wrapper) {\n  throw new Error(\"Wrapper div not found\");\n}\n\nrender(() => <App />, wrapper);\n```\n\nThe entry point of our application mounts the App component to the DOM using SolidJS's `render` function. It includes a safety check to ensure the root element exists before attempting to render, providing better error handling during initialization.\n\nNow, let's run `deno task dev` to start both the frontend and backend together.\n\n## Next steps\n🦕 Now you can build and run a SolidJS app with Deno! Here are some ways you could enhance your dinosaur application:\n\n- Add persistent data store [using a database like Postgres or MongoDB](https://docs.deno.com/runtime/tutorials/connecting_to_databases/) and an ORM like [Drizzle](https://deno.com/blog/build-database-app-drizzle) or [Prisma](https://docs.deno.com/runtime/tutorials/how_to_with_npm/prisma/)\n- Implement global state using SolidJS's [`createContext`](https://docs.solidjs.com/reference/component-apis/create-context) for sharing data between components\n- Add loading states using [`createResource`](https://docs.solidjs.com/reference/basic-reactivity/create-resource)'s loading property\n- Implement route-based code splitting with [`lazy`](https://docs.solidjs.com/reference/component-apis/lazy) imports\n- Use `Index` component for more efficient list rendering\n- Deploy your app to [AWS](https://docs.deno.com/runtime/tutorials/aws_lightsail/), [Digital Ocean](https://docs.deno.com/runtime/tutorials/digital_ocean/), or [Google Cloud Run](https://docs.deno.com/runtime/tutorials/google_cloud_run/)\n\nThe combination of SolidJS's unique reactive primitives, true DOM reconciliation, and Deno's modern runtime provides an incredibly efficient foundation for web development. With no Virtual DOM overhead and granular updates only where needed, your application can achieve optimal performance while maintaining clean, readable code.\n", "metadata": {"source_url": "https://docs.deno.com/examples/solidjs_tutorial", "title": "Build a SolidJS app with Deno", "description": "SolidJS is a declarative JavaScript library for creating user interfaces that emphasizes fine-grained reactivity and minimal overhead. When combined with Deno's modern runtime environment, you get a powerful, performant stack for building web applications. In this tutorial, we'll build a simple dinosaur catalog app that demonstrates the key features of both technologies.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 23:46:24", "type": "overview", "page_metadata": {"og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Build a SolidJS app with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Build a SolidJS app with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "og:title": "Build a SolidJS app with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:title": "Build a SolidJS app with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "07fd2d58-9c0d-4530-8e80-bf091d6c28dd", "sourceURL": "https://docs.deno.com/examples/solidjs_tutorial", "url": "https://docs.deno.com/examples/solidjs_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Build a SolidJS app with Deno\"?\n\nAssistant: Here are some code examples:\n\n### Scaffold a SolidJS app with Vite\n```yaml\ndeno init --npm vite@latest solid-deno --template solid-ts\n```\n\n### Add Hono and SolidJS Router\n```yaml\ndeno add jsr:@hono/hono npm:@solidjs/router\n```\n\n### Update deno.json\n```yaml\n{\n  \"tasks\": {\n    \"dev\": \"deno task dev:api & deno task dev:vite\",\n    \"dev:api\": \"deno run --allow-env --allow-net --allow-read api/main.ts\",\n    \"dev:vite\": \"deno run -A npm:vite\",\n    \"build\": \"deno run -A npm:vite build\",\n    \"serve\": {\n      \"command\": \"deno task dev:api\",\n      \"description\": \"Run the build, and then start the API server\",\n      \"dependencies\": [\"deno task build\"]\n    }\n  },\n  \"imports\": {\n    \"@hono/hono\": \"jsr:@hono/hono@^4.6.12\",\n    \"@solidjs/router\": \"npm:@solidjs/router@^0.14.10\"\n  },\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"solid-js\",\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ESNext\"]\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/solidjs_tutorial", "title": "Build a SolidJS app with Deno", "description": "SolidJS is a declarative JavaScript library for creating user interfaces that emphasizes fine-grained reactivity and minimal overhead. When combined with Deno's modern runtime environment, you get a powerful, performant stack for building web applications. In this tutorial, we'll build a simple dinosaur catalog app that demonstrates the key features of both technologies.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 23:46:24", "type": "code_examples", "page_metadata": {"og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Build a SolidJS app with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Build a SolidJS app with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "og:title": "Build a SolidJS app with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:title": "Build a SolidJS app with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "07fd2d58-9c0d-4530-8e80-bf091d6c28dd", "sourceURL": "https://docs.deno.com/examples/solidjs_tutorial", "url": "https://docs.deno.com/examples/solidjs_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"TCP listener: Ping\"?\n\nAssistant: An example of a TCP listener on localhost that will log the message if written to and close the connection if connected to.\n\nHere's a detailed explanation:\n\n\n## Code Example\nInstantiate an instance of text decoder to read the TCP stream bytes back into plaintext.\n\n```javascript\nconst decoder = new TextDecoder();\n```\n\nInstantiate an instance of a TCP listener on localhost port 8080.\n\n```javascript\nconst listener = Deno.listen({\n  hostname: \"127.0.0.1\",\n  port: 8080,\n  transport: \"tcp\",\n});\n```\n\nAwait asynchronous connections that are established to our TCP listener.\n\n```javascript\nfor await (const conn of listener) {\n```\n\nInstantiate an buffer array to store the contents of our read TCP stream.\n\n```javascript\n  const buf = new Uint8Array(1024);\n```\n\nRead the contents of the TCP stream into our buffer array.\n\n```javascript\n  await conn.read(buf);\n```\n\nHere we log the results of the bytes that were read into our buffer array.\n\n```javascript\n  console.log(\"Server - received: \", decoder.decode(buf));\n```\n\nWe close the connection that was established.\n\n```javascript\n  conn.close();\n}\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/tcp_listener", "title": "TCP listener: Ping", "description": "An example of a TCP listener on localhost that will log the message if written to and close the connection if connected to.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:47:58", "type": "overview", "page_metadata": {"og:title": "TCP listener: Ping", "og:type": "article", "title": "TCP listener: Ping", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "TCP listener: Ping", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "language": "en", "og:image": "/img/og.webp", "twitter:title": "TCP listener: Ping", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "31d88b1c-38cb-40ad-a674-27348b229bf8", "sourceURL": "https://docs.deno.com/examples/tcp_listener", "url": "https://docs.deno.com/examples/tcp_listener/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"TCP listener: Ping\"?\n\nAssistant: Here are some code examples:\n\n### Run the TCP listener example\n```yaml\ndeno run --allow-net https://docs.deno.com/examples/scripts/tcp_listener.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/tcp_listener", "title": "TCP listener: Ping", "description": "An example of a TCP listener on localhost that will log the message if written to and close the connection if connected to.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:47:58", "type": "code_examples", "page_metadata": {"og:title": "TCP listener: Ping", "og:type": "article", "title": "TCP listener: Ping", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "TCP listener: Ping", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "language": "en", "og:image": "/img/og.webp", "twitter:title": "TCP listener: Ping", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "31d88b1c-38cb-40ad-a674-27348b229bf8", "sourceURL": "https://docs.deno.com/examples/tcp_listener", "url": "https://docs.deno.com/examples/tcp_listener/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"TCP listener: Ping\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to run the listener on a port that is not blocked by your firewall.\n• Use the `--allow-net` flag to grant network access when running the Deno script.\n", "metadata": {"source_url": "https://docs.deno.com/examples/tcp_listener", "title": "TCP listener: Ping", "description": "An example of a TCP listener on localhost that will log the message if written to and close the connection if connected to.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 23:47:58", "type": "best_practices", "page_metadata": {"og:title": "TCP listener: Ping", "og:type": "article", "title": "TCP listener: Ping", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "TCP listener: Ping", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "language": "en", "og:image": "/img/og.webp", "twitter:title": "TCP listener: Ping", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "31d88b1c-38cb-40ad-a674-27348b229bf8", "sourceURL": "https://docs.deno.com/examples/tcp_listener", "url": "https://docs.deno.com/examples/tcp_listener/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Reading files\"?\n\nAssistant: Many applications need to read files from disk. Deno provides a simple interface for reading files.\n\nHere's a detailed explanation:\n\n\n## Reading Files\nMany applications need to read files from disk. Deno provides a simple interface for reading files.\n\n## Reading File as Bytes\nThe easiest way to read a file is to just read the entire contents into memory as bytes.\n\n```javascript\nconst bytes = await Deno.readFile(\"hello.txt\");\n```\n\n## Reading File as String\nInstead of reading the file as bytes, there is a convenience function to read the file as a string.\n\n```javascript\nconst text = await Deno.readTextFile(\"hello.txt\");\n```\n\n## Opening a File\nOften you need more control over when what parts of the file are read. For this you start by opening a file to get a `Deno.FsFile` object.\n\n```javascript\nconst file = await Deno.open(\"hello.txt\");\n```\n\n## Reading Bytes from File\nRead some bytes from the beginning of the file. Allow up to 5 to be read but also note how many actually were read.\n\n```javascript\nconst buffer = new Uint8Array(5);\nconst bytesRead = await file.read(buffer);\nconsole.log(`Read ${bytesRead} bytes`);\n```\n\n## Seeking in a File\nYou can also seek to a known location in the file and read from there.\n\n```javascript\nconst pos = await file.seek(6, Deno.SeekMode.Start);\nconsole.log(`Sought to position ${pos}`);\nconst buffer2 = new Uint8Array(2);\nconst bytesRead2 = await file.read(buffer2);\nconsole.log(`Read ${bytesRead2} bytes`);\n```\n\n## Rewinding a File\nYou can use rewind back to the start using seek as well.\n\n```javascript\nawait file.seek(0, Deno.SeekMode.Start);\n```\n\n## Closing a File\nMake sure to close the file when you are done.\n\n```javascript\nfile.close();\n```\n\n## Synchronous Reading\nSynchronous reading is also supported.\n\n```javascript\nDeno.readFileSync(\"hello.txt\");\nDeno.readTextFileSync(\"hello.txt\");\nconst f = Deno.openSync(\"hello.txt\");\nf.seekSync(6, Deno.SeekMode.Start);\nconst buf = new Uint8Array(5);\nf.readSync(buf);\nf.close();\n```\n\n## Permissions\nThe `--allow-read` permission is required to read files.\n\n## Running the Example\nRun [this example](https://github.com/denoland/deno-docs/blob/main/examples/scripts/reading_files.ts) locally using the Deno CLI:\n\n```bash\ndeno run --allow-read https://docs.deno.com/examples/scripts/reading_files.ts\n```\n\n## Additional Resources\n- [Doc: Deno.readFile](https://docs.deno.com/api/deno/~/Deno.readFile)\n- [Doc: Deno.open](https://docs.deno.com/api/deno/~/Deno.open)\n- [Doc: Deno.FsFile](https://docs.deno.com/api/deno/~/Deno.FsFile)\n", "metadata": {"source_url": "https://docs.deno.com/examples/reading_files", "title": "Reading files", "description": "Many applications need to read files from disk. Deno provides a simple interface for reading files.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 23:48:39", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "og:type": "article", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "title": "Reading files", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Reading files", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:title": "Reading files", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Reading files", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "a83910b5-2e18-4d87-9bb4-15a081bf639c", "sourceURL": "https://docs.deno.com/examples/reading_files", "url": "https://docs.deno.com/examples/reading_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Reading files\"?\n\nAssistant: Here are some code examples:\n\n### Reading File as Bytes\n```yaml\nconst bytes = await Deno.readFile(\"hello.txt\");\n```\n\n### Reading File as String\n```yaml\nconst text = await Deno.readTextFile(\"hello.txt\");\n```\n\n### Opening a File\n```yaml\nconst file = await Deno.open(\"hello.txt\");\n```\n\n### Reading Bytes from File\n```yaml\nconst buffer = new Uint8Array(5);\nconst bytesRead = await file.read(buffer);\nconsole.log(`Read ${bytesRead} bytes`);\n```\n\n### Seeking in a File\n```yaml\nconst pos = await file.seek(6, Deno.SeekMode.Start);\nconsole.log(`Sought to position ${pos}`);\nconst buffer2 = new Uint8Array(2);\nconst bytesRead2 = await file.read(buffer2);\nconsole.log(`Read ${bytesRead2} bytes`);\n```\n\n### Rewinding a File\n```yaml\nawait file.seek(0, Deno.SeekMode.Start);\n```\n\n### Closing a File\n```yaml\nfile.close();\n```\n\n### Synchronous Reading\n```yaml\nDeno.readFileSync(\"hello.txt\");\nDeno.readTextFileSync(\"hello.txt\");\nconst f = Deno.openSync(\"hello.txt\");\nf.seekSync(6, Deno.SeekMode.Start);\nconst buf = new Uint8Array(5);\nf.readSync(buf);\nf.close();\n```\n\n### Running the Example\n```yaml\ndeno run --allow-read https://docs.deno.com/examples/scripts/reading_files.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/reading_files", "title": "Reading files", "description": "Many applications need to read files from disk. Deno provides a simple interface for reading files.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 23:48:39", "type": "code_examples", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "og:type": "article", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "title": "Reading files", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Reading files", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:title": "Reading files", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Reading files", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "a83910b5-2e18-4d87-9bb4-15a081bf639c", "sourceURL": "https://docs.deno.com/examples/reading_files", "url": "https://docs.deno.com/examples/reading_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Reading files\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to close the file when you are done.\n• The `--allow-read` permission is required to read files.\n", "metadata": {"source_url": "https://docs.deno.com/examples/reading_files", "title": "Reading files", "description": "Many applications need to read files from disk. Deno provides a simple interface for reading files.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 23:48:39", "type": "best_practices", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "og:type": "article", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "title": "Reading files", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Reading files", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:title": "Reading files", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Reading files", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "a83910b5-2e18-4d87-9bb4-15a081bf639c", "sourceURL": "https://docs.deno.com/examples/reading_files", "url": "https://docs.deno.com/examples/reading_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HTTP server: Serving files\"?\n\nAssistant: An example of a HTTP server that serves files.\n\nHere's a detailed explanation:\n\n\n## Importing utility methods\nImport utility methods for serving files with mime types.\n\n```typescript\nimport { serveDir, serveFile } from \"jsr:@std/http/file-server\";\n```\n\n## Starting a simple server\nHere we start a simple server\n\n```typescript\nDeno.serve((req: Request) => {\n```\n\n## Getting the path from the URL\nGet the path from the url (ie. example.com/whatever -> /whatever)\n\n```typescript\n  const pathname = new URL(req.url).pathname;\n\n  if (pathname === \"/simple_file\") {\n```\n\n## Serving a file\nIn the most basic case we can just call this function with the request object and path to the file\n\n```typescript\n    return serveFile(req, \"./path/to/file.txt\");\n  }\n\n  if (pathname.startsWith(\"/static\")) {\n```\n\n## Serving a directory\nWe can also serve a whole directory using the serveDir utility method. By default it serves the current directory but this can be changed using the \"fsRoot\" option. We can use the \"urlRoot\" option to strip off the start of the url in the case we don't serve the directory at the top level.\n\n```typescript\n    return serveDir(req, {\n      fsRoot: \"public\",\n      urlRoot: \"static\",\n    });\n  }\n\n  return new Response(\"404: Not Found\", {\n    status: 404,\n  });\n});\n```\n\n## Running the example\nRun this example locally using the Deno CLI:\n\n```bash\ndeno run --allow-net --allow-read https://docs.deno.com/examples/scripts/http_server_files.ts\n```\n\n## Additional resources\n- [Doc: Deno.serve](https://docs.deno.com/api/deno/~/Deno.serve)\n- [Doc: @std/http/file-server](https://jsr.io/@std/http#file-server)\n- [Example: HTTP Server: Hello World](https://docs.deno.com/examples/http_server)\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_files", "title": "HTTP server: Serving files", "description": "An example of a HTTP server that serves files.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:49:02", "type": "overview", "page_metadata": {"twitter:title": "HTTP server: Serving files", "ogImage": "/img/og.webp", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "HTTP server: Serving files", "og:image": "/img/og.webp", "ogTitle": "HTTP server: Serving files", "og:title": "HTTP server: Serving files", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "scrapeId": "90d9bf94-0b96-4d60-9c40-9cc63201b5d7", "sourceURL": "https://docs.deno.com/examples/http_server_files", "url": "https://docs.deno.com/examples/http_server_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HTTP server: Serving files\"?\n\nAssistant: Here are some code examples:\n\n### Importing utility methods\n```yaml\nimport { serveDir, serveFile } from \"jsr:@std/http/file-server\";\n```\n\n### Starting a simple server\n```yaml\nDeno.serve((req: Request) => {\n```\n\n### Getting the path from the URL\n```yaml\nconst pathname = new URL(req.url).pathname;\n\nif (pathname === \"/simple_file\") {\n```\n\n### Serving a file\n```yaml\nreturn serveFile(req, \"./path/to/file.txt\");\n}\n\nif (pathname.startsWith(\"/static\")) {\n```\n\n### Serving a directory\n```yaml\nreturn serveDir(req, {\n  fsRoot: \"public\",\n  urlRoot: \"static\",\n});\n\nreturn new Response(\"404: Not Found\", {\n  status: 404,\n});\n});\n```\n\n### Running the example\n```yaml\ndeno run --allow-net --allow-read https://docs.deno.com/examples/scripts/http_server_files.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_files", "title": "HTTP server: Serving files", "description": "An example of a HTTP server that serves files.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:49:02", "type": "code_examples", "page_metadata": {"twitter:title": "HTTP server: Serving files", "ogImage": "/img/og.webp", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "HTTP server: Serving files", "og:image": "/img/og.webp", "ogTitle": "HTTP server: Serving files", "og:title": "HTTP server: Serving files", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "scrapeId": "90d9bf94-0b96-4d60-9c40-9cc63201b5d7", "sourceURL": "https://docs.deno.com/examples/http_server_files", "url": "https://docs.deno.com/examples/http_server_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"HTTP server: Serving files\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the \"fsRoot\" option to change the directory served by the server.\n• Utilize the \"urlRoot\" option to modify the URL path when serving directories.\n", "metadata": {"source_url": "https://docs.deno.com/examples/http_server_files", "title": "HTTP server: Serving files", "description": "An example of a HTTP server that serves files.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 23:49:02", "type": "best_practices", "page_metadata": {"twitter:title": "HTTP server: Serving files", "ogImage": "/img/og.webp", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "HTTP server: Serving files", "og:image": "/img/og.webp", "ogTitle": "HTTP server: Serving files", "og:title": "HTTP server: Serving files", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "scrapeId": "90d9bf94-0b96-4d60-9c40-9cc63201b5d7", "sourceURL": "https://docs.deno.com/examples/http_server_files", "url": "https://docs.deno.com/examples/http_server_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deploying Deno with Docker\"?\n\nAssistant: Play\n\nHere's a detailed explanation:\n\n\n## Description of video\nSee how to deploy Deno applications with Docker to a compatible cloud environment.\n\n## Resources\n- [https://github.com/denoland/deno_docker](https://github.com/denoland/deno_docker)\n- [https://fly.io/](https://fly.io/)\n\n## Transcript and code\nDeno has made a lot of things seem easy: linting, formatting, interoperability with the Node ecosystem, testing, TypeScript, but how about deployment? How easy is it to get Deno running in production? Pretty easy!\n\nLet’s start with a look at our app. It’s an app that provides us with some information about trees. On the homepage we get some text At the trees route, we get some JSON At the dynamic route based on the tree’s id, we get information about that single tree.\n\n```highlight notranslate ts\nimport { Hono } from \"jsr:@hono/hono\";\n\nconst app = new Hono();\n\ninterface Tree {\n  id: string;\n  species: string;\n  age: number;\n  location: string;\n}\n\nconst oak: Tree = {\n  id: \"1\",\n  species: \"oak\",\n  age: 3,\n  location: \"Jim's Park\",\n};\n\nconst maple: Tree = {\n  id: \"2\",\n  species: \"maple\",\n  age: 5,\n  location: \"Betty's Garden\",\n};\n\nconst trees: Tree[] = [oak, maple];\n\napp.get(\"/\", (c) => {\n  return c.text(\"🌲 🌳 The Trees Welcome You! 🌲 🌳\");\n});\n\napp.get(\"/trees\", (c) => {\n  return c.json(trees);\n});\n\napp.get(\"/trees/:id\", (c) => {\n  const id = c.req.param(\"id\");\n  const tree = trees.find((tree) => tree.id === id);\n  if (!tree) return c.json({ message: \"That tree isn't here!\" }, 404);\n  return c.json(tree);\n});\n\nDeno.serve(app.fetch);\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/deploying_deno_with_docker", "title": "Deploying Deno with Docker", "description": "Play", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:49:22", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogTitle": "Deploying Deno with Docker", "og:title": "Deploying Deno with Docker", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Deploying Deno with Docker", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Deploying Deno with Docker", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "scrapeId": "7278792f-8a1a-4beb-b7a9-127c3fcf33a8", "sourceURL": "https://docs.deno.com/examples/deploying_deno_with_docker", "url": "https://docs.deno.com/examples/deploying_deno_with_docker/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deploying Deno with Docker\"?\n\nAssistant: Here are some code examples:\n\n### Test run docker:\n```yaml\ndocker\n```\n\n### Run Deno app with Docker\n```yaml\ndocker run -it -p 8000:8000 -v $PWD:/my-deno-project denoland/deno:2.0.2 run --allow-net /my-deno-project/main.ts\n```\n\n### Dockerfile for Deno app\n```yaml\nFROM\ndenoland/deno:2.0.2\n\n# The port that your application listens to.\n\nEXPOSE 8000\n\nWORKDIR /app\n\n# Prefer not to run as root.\nUSER deno\n\n# These steps will be re-run upon each file change in your working directory:\nCOPY . .\n\n# Compile the main app so that it doesn't need to be compiled each startup/entry.\nRUN deno cache main.ts\n\n# Warmup caches\nRUN timeout 10s deno -A main.ts || [ $? -eq 124 ] || exit 1\n\nCMD [\"run\", \"--allow-net\", \"main.ts\"]\n```\n\n### Build Docker image\n```yaml\ndocker build -t my-deno-project .\n```\n\n### Install Fly\n```yaml\ncurl -L https://fly.io/install.sh | sh\n```\n\n### Log in with Fly via CLI\n```yaml\nfly auth login\n```\n\n### Launch app with Fly\n```yaml\nflyctl launch\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/deploying_deno_with_docker", "title": "Deploying Deno with Docker", "description": "Play", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:49:22", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogTitle": "Deploying Deno with Docker", "og:title": "Deploying Deno with Docker", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Deploying Deno with Docker", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Deploying Deno with Docker", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "scrapeId": "7278792f-8a1a-4beb-b7a9-127c3fcf33a8", "sourceURL": "https://docs.deno.com/examples/deploying_deno_with_docker", "url": "https://docs.deno.com/examples/deploying_deno_with_docker/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deploying Deno with Docker\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure that Docker is installed on your machine.\n• Visit the app running at `localhost:8000` after running the Docker command.\n• You can run the app with a Docker config file for easier management.\n", "metadata": {"source_url": "https://docs.deno.com/examples/deploying_deno_with_docker", "title": "Deploying Deno with Docker", "description": "Play", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:49:22", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogTitle": "Deploying Deno with Docker", "og:title": "Deploying Deno with Docker", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Deploying Deno with Docker", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Deploying Deno with Docker", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "scrapeId": "7278792f-8a1a-4beb-b7a9-127c3fcf33a8", "sourceURL": "https://docs.deno.com/examples/deploying_deno_with_docker", "url": "https://docs.deno.com/examples/deploying_deno_with_docker/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deploy Quick Start\"?\n\nAssistant: Deno Deploy is a globally distributed platform for serverless JavaScript applications. Your JavaScript, TypeScript, and WebAssembly code runs on managed servers geographically close to your users, enabling low latency and faster response times.\n\nHere's a detailed explanation:\n\n\n## Install Deno and `deployctl`\nIf you haven't already, you can [install the Deno runtime](https://docs.deno.com/runtime/getting_started/installation) using one of the commands below:\n\n- macOS\n- Windows\n- Linux\n\n```highlight notranslate sh\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n```highlight notranslate powershell\nirm https://deno.land/install.ps1 | iex\n```\n\n```highlight notranslate sh\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\nAfter Deno is installed, install the [`deployctl`](https://docs.deno.com/deploy/manual/deployctl/) utility:\n\n```\ndeno install -A jsr:@deno/deployctl --global\n```\n\nYou can confirm `deployctl` has been installed correctly by running:\n\n```highlight notranslate console\ndeployctl --help\n``` \n\nNow, you're ready to deploy a Deno script from the command line!\n\n## Write and test a Deno program\nFirst, create a directory for the project and create a file called `main.ts` in it, with the following \"Hello World\" web server:\n\nmain.ts\n\n```highlight notranslate ts\nDeno.serve(() => new Response(\"Hello, world!\"));\n```\n\nYou can test that it works by running it with the command below:\n\n```\ndeno run --allow-net main.ts\n```\n\nYour server should be viewable at [localhost:8000](http://localhost:8000/). Now let's run this code on the edge with Deno Deploy!\n\n## Deploy your project\nFrom the directory of the `main.ts` file you just created, run this command:\n\n```highlight notranslate sh\ndeployctl deploy\n```\n\nYou will be asked to authorize Deno Deploy in GitHub to sign up to Deno Deploy and/or to provision an access token for `deployctl`. A few moments after that, your Hello World server will be deployed in Deno Deploy infrastructure all around the world, ready to handle all the traffic you expect.\n\n## Next Steps\nNow that you've created your first deployment, you can [learn what kinds of apps](https://docs.deno.com/deploy/manual/use-cases/) you can run on Deno Deploy, check out [what else you can do with deployctl](https://docs.deno.com/deploy/manual/deployctl/), or keep reading to find out what other options you have to deploy your code to Deno Deploy. We're so excited to see what you'll ship with Deno Deploy!\n\n## Deploy your existing project\nImport a project and run it on the edge it with Deno Deploy.\n\n1. [From the Deno Deploy dashboard](https://dash.deno.com/) click the \"New Project\" button.\n\n2. Connect to your GitHub account and select the repository you would like to deploy.\n\n3. Follow the on-screen instructions to deploy your existing application.\n\nIf your project requires a build step, use the Project Configuration form to create a GitHub action to deploy your project. Give your project a name and select from the optional framework presets. If you are not using a framework, you can set up your build settings using the form.\n\n4. Confirm that your build options are correct and click the \"Deploy Project\" button to kick off your new Github action and deploy your project.\n\nIn a few moments, your project will be deployed across ~12 data centers around the world, ready to handle large volumes of traffic.\n\nOnce your deployment is successful you can visit your newly deployed project at the url provided on the success page or manage it in your dashboard.\n\n## Start with a playground\nA [playground](https://docs.deno.com/deploy/manual/playgrounds/) is a browser-based editor that enables you to write and run JavaScript or TypeScript code right away This is a great choice for just kicking the tires on Deno and Deno Deploy!\n\nFrom the [Deno Deploy dashboard](https://dash.deno.com/), click the \"New Playground\" button to create a playground. We also have a variety of ready built tutorials for you to try out Deno Deploy try them out by clicking on \"Learning Playground\" or visiting:\n\n[Simple HTTP server playground](https://dash.deno.com/tutorial/tutorial-http)\n\n[Using the Deno KV database playground](https://dash.deno.com/tutorial/tutorial-http-kv)\n\n[RESTful API server playground](https://dash.deno.com/tutorial/tutorial-restful)\n\n[Realtime app with WebSockets playground](https://dash.deno.com/tutorial/tutorial-websocket)\n\n[Recurring tasks with Deno.cron playground](https://dash.deno.com/tutorial/tutorial-cron)\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual", "title": "Deploy Quick Start", "description": "Deno Deploy is a globally distributed platform for serverless JavaScript applications. Your JavaScript, TypeScript, and WebAssembly code runs on managed servers geographically close to your users, enabling low latency and faster response times.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:50:11", "type": "overview", "page_metadata": {"og:title": "Deploy Quick Start", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:title": "Deploy Quick Start", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogTitle": "Deploy Quick Start", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "title": "Deploy Quick Start", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "e5928a7f-688f-4f61-843d-0947ad70c290", "sourceURL": "https://docs.deno.com/deploy/manual", "url": "https://docs.deno.com/deploy/manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deploy Quick Start\"?\n\nAssistant: Here are some code examples:\n\n### Install Deno\n```yaml\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n### Install Deno on Windows\n```yaml\nirm https://deno.land/install.ps1 | iex\n```\n\n### Install deployctl\n```yaml\ndeno install -A jsr:@deno/deployctl --global\n```\n\n### Check deployctl installation\n```yaml\ndeployctl --help\n```\n\n### Hello World server\n```yaml\nDeno.serve(() => new Response(\"Hello, world!\"));\n```\n\n### Run Deno program\n```yaml\ndeno run --allow-net main.ts\n```\n\n### Deploy project\n```yaml\ndeployctl deploy\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual", "title": "Deploy Quick Start", "description": "Deno Deploy is a globally distributed platform for serverless JavaScript applications. Your JavaScript, TypeScript, and WebAssembly code runs on managed servers geographically close to your users, enabling low latency and faster response times.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:50:11", "type": "code_examples", "page_metadata": {"og:title": "Deploy Quick Start", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:title": "Deploy Quick Start", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogTitle": "Deploy Quick Start", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "title": "Deploy Quick Start", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "e5928a7f-688f-4f61-843d-0947ad70c290", "sourceURL": "https://docs.deno.com/deploy/manual", "url": "https://docs.deno.com/deploy/manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deploy Quick Start\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have the latest version of Deno installed before starting.\n• Use the `--allow-net` flag when running your Deno program to allow network access.\n• Check the Deno Deploy documentation for more advanced deployment options.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual", "title": "Deploy Quick Start", "description": "Deno Deploy is a globally distributed platform for serverless JavaScript applications. Your JavaScript, TypeScript, and WebAssembly code runs on managed servers geographically close to your users, enabling low latency and faster response times.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 23:50:11", "type": "best_practices", "page_metadata": {"og:title": "Deploy Quick Start", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:title": "Deploy Quick Start", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogTitle": "Deploy Quick Start", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "title": "Deploy Quick Start", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "e5928a7f-688f-4f61-843d-0947ad70c290", "sourceURL": "https://docs.deno.com/deploy/manual", "url": "https://docs.deno.com/deploy/manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build a Next.js App\"?\n\nAssistant: In this tutorial, we'll build a simple Next.js application and run it with Deno. The app will display a list of dinosaurs. When you click on one, it'll take you to a dinosaur page with more details.\n\nHere's a detailed explanation:\n\n\n## Create a Next.js app with Deno\nNext provides a CLI tool to quickly scaffold a new Next.js app. In your terminal run the following command to create a new Next.js app with Deno:\n\n```highlight notranslate sh\ndeno run -A npm:create-next-app@latest\n```\n\nWhen prompted, select the default options to create a new Next.js app with TypeScript.\n\nThen, `cd` into the newly created project folder and run the following command to install the dependencies\n\n```highlight notranslate sh\ndeno install\n```\n\nNext.js has some dependencies that still rely on `Object.prototype.__proto__`, so you need to allow it. In a new `deno.json` file, add the following lines:\n\n```highlight notranslate json\n{\n  \"unstable\": [\"unsafe-proto\"]\n}\n```\n\nNow you can serve your new Next.js app:\n\n```highlight notranslate sh\ndeno task dev\n```\n\nThis will start the Next.js server, click the output link to localhost to see your app in the browser.\n\n## Add a backend\nThe next step is to add a backend API. We'll create a very simple API that returns information about dinosaurs.\n\nWe'll use Next.js's [built in API route handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers) to set up our dinosaur API. Next.js uses a file-system-based router, where the folder structure directly defines the routes.\n\nWe'll define three routes, The first route at `/api` will return the string `Welcome to the dinosaur API`, then we'll set up `/api/dinosaurs` to return all the dinosaurs, and finally `/api/dinosaur/[dinosaur]` to return a specific dinosaur based on the name in the URL.\n\n## /api/\nIn the `app` folder of your new project, create an `api` folder. In that folder, create a `route.ts` file, which will handle requests to `/api/`.\n\nCopy and paste the following code into the `api/route.ts` file:\n\n```highlight notranslate ts\nexport async function GET() {\n  return Response.json(\"welcome to the dinosaur API\");\n}\n```\n\n## /api/dinosaurs\nIn the `api` folder, create a folder called `dinosaurs`. In that folder, make a `data.json` file, which will contain the hard coded dinosaur data. Copy and paste [this json file](https://raw.githubusercontent.com/denoland/deno-vue-example/main/api/data.json) into the `data.json` file.\n\nCreate a `route.ts` file in the `dinosaurs` directory, which will handle requests to `/api/dinosaurs`. In this route we'll read the `data.json` file and return the dinosaurs as JSON:\n\n```highlight notranslate ts\nimport data from \"./data.json\" with { type: \"json\" };\n\nexport async function GET() {\n  return Response.json(data);\n}\n```\n\n## /api/dinosaurs/[dinosaur]\nAnd for the final route, `/api/dinosaurs/[dinosaur]`, we'll create a folder called `[dinosaur]` in the `dinosaurs` directory. In there, create a `route.ts` file. In this file we'll read the `data.json` file, find the dinosaur with the name in the URL, and return it as JSON:\n\n```highlight notranslate ts\nimport { NextRequest } from \"next/server\";\nimport data from \"../data.json\" with { type: \"json\" };\n\ntype RouteParams = { params: Promise<{ dinosaur: string }> };\n\nexport const GET = async (request: NextRequest, { params }: RouteParams) => {\n  const { dinosaur } = await params;\n\n  if (!dinosaur) {\n    return Response.json(\"No dinosaur name provided.\");\n  }\n\n  const dinosaurData = data.find((item) =>\n    item.name.toLowerCase() === dinosaur.toLowerCase()\n  );\n\n  return Response.json(dinosaurData ? dinosaurData : \"No dinosaur found.\");\n};\n```\n\n## Build the frontend\nNow that we have our backend API set up, let's build the frontend to display the dinosaur data.\n\n## Define the dinosaur type\nFirstly we'll set up a new type, to define the shape of the dinosaur data. In the `app` directory, create a `types.ts` file and add the following code:\n\n```highlight notranslate ts\nexport type Dino = { name: string; description: string };\n```\n\n## Update the homepage\nWe'll update the `page.tsx` file in the `app` directory to fetch the dinosaur data from our API and display it as a list of links.\n\nTo execute client-side code in Next.js we need to use the `use Client` directive at the top of the file. Then we'll import the modules that we'll need in this page and export the default function that will render the page:\n\n```highlight notranslate ts\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Dino } from \"./types\";\nimport Link from \"next/link\";\n\nexport default function Home() {\n}\n```\n\nInside the body of the `Home` function, we'll define a state variable to store the dinosaur data, and a `useEffect` hook to fetch the data from the API when the component mounts:\n\n```highlight notranslate ts\nconst [dinosaurs, setDinosaurs] = useState<Dino[]>([]);\n\nuseEffect(() => {\n  (async () => {\n    const response = await fetch(`/api/dinosaurs`);\n    const allDinosaurs = await response.json() as Dino[];\n    setDinosaurs(allDinosaurs);\n  })();\n}, []);\n```\n\nBeneath this, still inside the body of the `Home` function, we'll return a list of links, each linking to the dinosaur's page:\n\n```highlight notranslate ts\nreturn (\n  <main>\n    <h1>Welcome to the Dinosaur app</h1>\n    <p>Click on a dinosaur below to learn more.</p>\n    <ul>\n      {dinosaurs.map((dinosaur: Dino) => {\n        return (\n          <li key={dinosaur.name}>\n            <Link href={`/${dinosaur.name.toLowerCase()}`}>  \n              {dinosaur.name}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  </main>\n);\n```\n\n## Create the dinosaur page\nInside the `app` directory, create a new folder called `[dinosaur]`. Inside this folder create a `page.tsx` file. This file will fetch the details of a specific dinosaur from the API and render them on the page.\n\nMuch like the homepage, we'll need client side code, and we'll import the modules we need and export a default function. We'll pass the incoming to the function and set up a type for this parameter:\n\n```highlight notranslate ts\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Dino } from \"../types\";\nimport Link from \"next/link\";\n\ntype RouteParams = { params: Promise<{ dinosaur: string }> };\n\nexport default function Dinosaur({ params }: RouteParams) {\n}\n```\n\nInside the body of the `Dinosaur` function we'll get the selected dinosaur from the request, set up a state variable to store the dinosaur data, and write a `useEffect` hook to fetch the data from the API when the component mounts:\n\n```highlight notranslate ts\nconst selectedDinosaur = params.then((params) => params.dinosaur);\nconst [dinosaur, setDino] = useState<Dino>({ name: \"\", description: \"\" });\n\nuseEffect(() => {\n  (async () => {\n    const resp = await fetch(`/api/dinosaurs/${await selectedDinosaur}`);\n    const dino = await resp.json() as Dino;\n    setDino(dino);\n  })();\n}, []);\n```\n\nFinally, still inside the `Dinosaur` function body, we'll return a paragraph element containing the dinosaur's name and description:\n\n```highlight notranslate ts\nreturn (\n  <main>\n    <h1>{dinosaur.name}</h1>\n    <p>{dinosaur.description}</p>\n    <Link href=\"/\">🠠 Back to all dinosaurs</Link>\n  </main>\n);\n```\n\n## Run the app\nNow you can run the app with `deno task dev` and visit `http://localhost:3000` in your browser to see the list of dinosaurs. Click on a dinosaur to see more details!\n", "metadata": {"source_url": "https://docs.deno.com/examples/next_tutorial", "title": "Build a Next.js App", "description": "In this tutorial, we'll build a simple Next.js application and run it with Deno. The app will display a list of dinosaurs. When you click on one, it'll take you to a dinosaur page with more details.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 23:54:09", "type": "overview", "page_metadata": {"ogTitle": "Build a Next.js App", "title": "Build a Next.js App", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Build a Next.js App", "ogSiteName": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Build a Next.js App", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "5d026435-9ee1-415a-980a-135c5272f6c6", "sourceURL": "https://docs.deno.com/examples/next_tutorial", "url": "https://docs.deno.com/examples/next_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Build a Next.js App\"?\n\nAssistant: Here are some code examples:\n\n### Check Deno version\n```yaml\ndeno --version\n```\n\n### Create a Next.js app with Deno\n```yaml\ndeno run -A npm:create-next-app@latest\n```\n\n### Install dependencies\n```yaml\ndeno install\n```\n\n### Deno configuration\n```yaml\n{\n  \"unstable\": [\"unsafe-proto\"]\n}\n```\n\n### Serve the app\n```yaml\ndeno task dev\n```\n\n### API route for /api/\n```yaml\nexport async function GET() {\n  return Response.json(\"welcome to the dinosaur API\");\n}\n```\n\n### API route for /api/dinosaurs\n```yaml\nimport data from \"./data.json\" with { type: \"json\" };\n\nexport async function GET() {\n  return Response.json(data);\n}\n```\n\n### API route for /api/dinosaurs/[dinosaur]\n```yaml\nimport { NextRequest } from \"next/server\";\nimport data from \"../data.json\" with { type: \"json\" };\n\ntype RouteParams = { params: Promise<{ dinosaur: string }> };\n\nexport const GET = async (request: NextRequest, { params }: RouteParams) => {\n  const { dinosaur } = await params;\n\n  if (!dinosaur) {\n    return Response.json(\"No dinosaur name provided.\");\n  }\n\n  const dinosaurData = data.find((item) =>\n    item.name.toLowerCase() === dinosaur.toLowerCase()\n  );\n\n  return Response.json(dinosaurData ? dinosaurData : \"No dinosaur found.\");\n};\n```\n\n### Define dinosaur type\n```yaml\nexport type Dino = { name: string; description: string };\n```\n\n### Update homepage\n```yaml\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Dino } from \"./types\";\nimport Link from \"next/link\";\n\nexport default function Home() {\n  const [dinosaurs, setDinosaurs] = useState<Dino[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(`/api/dinosaurs`);\n      const allDinosaurs = await response.json() as Dino[];\n      setDinosaurs(allDinosaurs);\n    })();\n  }, []);\n\n  return (\n    <main>\n      <h1>Welcome to the Dinosaur app</h1>\n      <p>Click on a dinosaur below to learn more.</p>\n      <ul>\n        {dinosaurs.map((dinosaur: Dino) => {\n          return (\n            <li key={dinosaur.name}>\n              <Link href={`/${dinosaur.name.toLowerCase()}`}>  \n                {dinosaur.name}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </main>\n  );\n}\n```\n\n### Create dinosaur page\n```yaml\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Dino } from \"../types\";\nimport Link from \"next/link\";\n\ntype RouteParams = { params: Promise<{ dinosaur: string }> };\n\nexport default function Dinosaur({ params }: RouteParams) {\n  const selectedDinosaur = params.then((params) => params.dinosaur);\n  const [dinosaur, setDino] = useState<Dino>({ name: \"\", description: \"\" });\n\n  useEffect(() => {\n    (async () => {\n      const resp = await fetch(`/api/dinosaurs/${await selectedDinosaur}`);\n      const dino = await resp.json() as Dino;\n      setDino(dino);\n    })();\n  }, []);\n\n  return (\n    <main>\n      <h1>{dinosaur.name}</h1>\n      <p>{dinosaur.description}</p>\n      <Link href=\"/\">🠠 Back to all dinosaurs</Link>\n    </main>\n  );\n}\n```\n\n### Run the app\n```yaml\ndeno task dev\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/next_tutorial", "title": "Build a Next.js App", "description": "In this tutorial, we'll build a simple Next.js application and run it with Deno. The app will display a list of dinosaurs. When you click on one, it'll take you to a dinosaur page with more details.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 23:54:09", "type": "code_examples", "page_metadata": {"ogTitle": "Build a Next.js App", "title": "Build a Next.js App", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Build a Next.js App", "ogSiteName": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Build a Next.js App", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "5d026435-9ee1-415a-980a-135c5272f6c6", "sourceURL": "https://docs.deno.com/examples/next_tutorial", "url": "https://docs.deno.com/examples/next_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Build a Next.js App\"?\n\nAssistant: Here are the recommended best practices:\n\n• Verify that you have the latest version of Deno installed, you will need at least Deno 1.46.0.\n• Consider adding a database to replace your `data.json` file.\n• Consider writing some tests to make your app reliable and production ready.\n", "metadata": {"source_url": "https://docs.deno.com/examples/next_tutorial", "title": "Build a Next.js App", "description": "In this tutorial, we'll build a simple Next.js application and run it with Deno. The app will display a list of dinosaurs. When you click on one, it'll take you to a dinosaur page with more details.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 23:54:09", "type": "best_practices", "page_metadata": {"ogTitle": "Build a Next.js App", "title": "Build a Next.js App", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Build a Next.js App", "ogSiteName": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Build a Next.js App", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "5d026435-9ee1-415a-980a-135c5272f6c6", "sourceURL": "https://docs.deno.com/examples/next_tutorial", "url": "https://docs.deno.com/examples/next_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Tutorials\"?\n\nAssistant: Here, you'll find a collection of tutorials and example applications for Deno Deploy. Check our ever expanding list of tutorials in the nav, and explore examples.deno.land for even more.\n\nHere's a detailed explanation:\n\n\n## Code examples\n- Build a simple API server: [Link](https://docs.deno.com/deploy/tutorials/simple-api/)\n- Serve static assets: [Link](https://docs.deno.com/deploy/tutorials/static-site/)\n\n## App building tutorials\n- Build a Fresh app: [Link](https://docs.deno.com/deploy/tutorials/fresh/)\n- Build a Discord slash command: [Link](https://docs.deno.com/deploy/tutorials/discord-slash/)\n- Build a site with Vite: [Link](https://docs.deno.com/deploy/tutorials/vite/)\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials", "title": "Tutorials", "description": "Here, you'll find a collection of tutorials and example applications for Deno Deploy. Check our ever expanding list of tutorials in the nav, and explore examples.deno.land for even more.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 23:54:29", "type": "overview", "page_metadata": {"ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogSiteName": "Deno", "og:type": "article", "twitter:title": "Tutorials", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogTitle": "Tutorials", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Tutorials", "og:title": "Tutorials", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "scrapeId": "088dcd8b-19eb-4713-ad0c-3b2d644d659a", "sourceURL": "https://docs.deno.com/deploy/tutorials", "url": "https://docs.deno.com/deploy/tutorials/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Subhosting Documentation\"?\n\nAssistant: Deno Subhosting is a robust platform designed to allow Software as a Service (SaaS) providers to securely run code written by their customers. The Subhosting API allows you to deploy untrusted code programmatically and at scale.\n\nHere's a detailed explanation:\n\n\n## Key Features\n- **Ease of Use:** Developers can write code in generic JavaScript or TypeScript without needing specific knowledge of Deno.\n- **Standards Compliance:** Deno supports standard JavaScript and TypeScript and integrates widely-used web APIs like `fetch` and `web cache`.\n- **Deno-Specific Advanced Features:** Offers advanced features like `KV` (Key-Value stores) which extend beyond typical browser capabilities.\n- **Rapid Deployment:** Deno’s cloud products are designed to support extremely short deployment times that range from less than a second for simple applications, to around ten seconds for complex websites with numerous dependencies.\n- **Improved developer experience:** Subhosting will manage the extensive effort of setting up secure infrastructure to run untrusted code in a public cloud for you.\n\n## Overview of Deno Cloud Offerings - Deno Deploy and Deno Subhosting\nDeno provides two distinct cloud offerings, Deno Deploy and Deno Subhosting, each designed to support specific use cases while leveraging the same underlying infrastructure.\n\n## Deno Deploy\nDeno Deploy is optimized for individual developers and small teams focused on developing and iterating on a limited set of first-party projects. This solution is ideal for hosting websites or applications, with deployment processes typically managed through GitHub integrations.\n\n- Target Audience: Individual developers and small development teams.\n- Deployment Integration: Primarily through GitHub for continuous integration and delivery.\n- Use Cases: Hosting websites and applications.\n\n## Deno Subhosting\nIn contrast, Deno Subhosting is engineered to securely manage a larger volume of projects and deployments. It supports the deployment of untrusted code or functions through an API, making it suitable for scenarios involving multiple end-users contributing code.\n\n- Target Audience: SaaS platforms requiring the capability to host customer-generated, untrusted code securely.\n- Deployment Mechanism: Through a robust API designed for scalability and security.\n- Use Cases: Large scale project hosting where end-users contribute the code.\n\nThe steps to implement subhosting are roughly as follows:\n\n1. [Create an organization](https://docs.deno.com/subhosting/manual/quick_start/) and get an access token for the REST API\n2. [Create a project](https://docs.deno.com/subhosting/manual/planning_your_implementation/), and then create your first deployment for that project\n\nUsing these techniques, you can package up user code as \"deployments\", and execute that code on a Deno-provisioned URL or a [custom URL](https://docs.deno.com/subhosting/api/#custom-domains) you can configure yourself.\n\n## REST API reference and OpenAPI spec\nFor a complete reference for the REST API used to implement subhosting, you can [check out the docs here](https://apidocs.deno.com/). The Deno Deploy REST API also provides an [OpenAPI specification](https://api.deno.com/v1/openapi.json) which can be used with [a number of OpenAPI-compatible tools](https://openapi.tools/).\n\nWe also offer SDKs in [JavaScript](https://www.npmjs.com/package/subhosting), [Python](https://pypi.org/project/subhosting/0.0.1a0/), and [Go](https://github.com/denoland/subhosting-go).\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/manual", "title": "Deno Subhosting Documentation", "description": "Deno Subhosting is a robust platform designed to allow Software as a Service (SaaS) providers to securely run code written by their customers. The Subhosting API allows you to deploy untrusted code programmatically and at scale.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:55:21", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "ogImage": "/img/og.webp", "ogTitle": "About Subhosting", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "og:title": "About Subhosting", "title": "About Subhosting", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "About Subhosting", "scrapeId": "81866cb5-567a-495d-9875-7230cfd17d7a", "sourceURL": "https://docs.deno.com/subhosting/manual", "url": "https://docs.deno.com/subhosting/manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Subhosting Documentation\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use Deno Subhosting for securely managing customer-generated, untrusted code.\n• Leverage the rapid deployment capabilities of Deno for efficient project management.\n• Utilize the provided SDKs for easier integration with your applications.\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/manual", "title": "Deno Subhosting Documentation", "description": "Deno Subhosting is a robust platform designed to allow Software as a Service (SaaS) providers to securely run code written by their customers. The Subhosting API allows you to deploy untrusted code programmatically and at scale.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 23:55:21", "type": "best_practices", "page_metadata": {"twitter:site": "@deno_land", "ogImage": "/img/og.webp", "ogTitle": "About Subhosting", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "og:title": "About Subhosting", "title": "About Subhosting", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "About Subhosting", "scrapeId": "81866cb5-567a-495d-9875-7230cfd17d7a", "sourceURL": "https://docs.deno.com/subhosting/manual", "url": "https://docs.deno.com/subhosting/manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Fundamentals\"?\n\nAssistant: Deno is designed with the developer in mind, aiming to provide a smooth and enjoyable development process. Its simplicity and efficiency make it quick and easy to pick up, even for those new to the backend development.\n\nHere's a detailed explanation:\n\n\n## Built in tooling\nDeno’s inbuilt tooling significantly eases the onboarding process. With a single executable, you can get started without worrying about complex setups or dependencies. This allows you to focus on writing code rather than configuring your environment.\n\n- [Configuring your project](https://docs.deno.com/runtime/fundamentals/configuration/)\n- [TypeScript support](https://docs.deno.com/runtime/fundamentals/typescript/)\n- [Linting and formatting](https://docs.deno.com/runtime/fundamentals/linting_and_formatting/)\n- [Testing](https://docs.deno.com/runtime/fundamentals/testing/)\n- [Debugging](https://docs.deno.com/runtime/fundamentals/debugging/)\n- [HTTP server](https://docs.deno.com/runtime/fundamentals/http_server/)\n\n## Node and npm Support\nDeno supports Node.js and npm packages, enabling you to leverage the vast ecosystem of existing libraries and tools. This compatibility ensures that you can integrate Deno into your projects seamlessly.\n\n- [Node.js compatibility](https://docs.deno.com/runtime/fundamentals/node/)\n- [npm compatibility](https://docs.deno.com/runtime/fundamentals/node/#using-npm-packages)\n\n## Standard Library\nDeno comes with a comprehensive standard library written in TypeScript. This library includes modules for common tasks such as HTTP servers, file system operations, and more, allowing you to avoid “reinventing the wheel” and focus on your application’s features.\n\n- [Standard Library](https://docs.deno.com/runtime/fundamentals/standard_library/)\n\n## Secure by Default\nSecurity is a top priority for Deno. By default, it requires explicit permission for file, network, and environment access, reducing the risk of security vulnerabilities. This secure-by-default approach helps protect your applications from potential threats.\n\n- [Security and permissions](https://docs.deno.com/runtime/fundamentals/security/)\n\n## Modern Language Features\nDeno embraces modern JavaScript features, including ESModules. This means you can use the latest syntax and capabilities of the language, ensuring your code is up-to-date and leveraging the best practices in the industry.\n\n- [Using ESModules](https://docs.deno.com/runtime/fundamentals/modules/)\n- [Migrating from CJS to ESM](https://docs.deno.com/runtime/tutorials/cjs_to_esm/)\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals", "title": "Fundamentals", "description": "Deno is designed with the developer in mind, aiming to provide a smooth and enjoyable development process. Its simplicity and efficiency make it quick and easy to pick up, even for those new to the backend development.", "has_code_examples": false, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-27 23:55:40", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:type": "article", "language": "en", "og:locale": "en_US", "ogLocale": "en_US", "title": "Fundamentals", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Fundamentals", "twitter:title": "Fundamentals", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "Fundamentals", "scrapeId": "70474329-1688-4638-ae93-48977a897202", "sourceURL": "https://docs.deno.com/runtime/fundamentals", "url": "https://docs.deno.com/runtime/fundamentals/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Where to get help\"?\n\nAssistant: Stuck? Lost? Get Help from the Community.\n\nHere's a detailed explanation:\n\n\n## Community Discord\nAsk questions and chat with community members in real-time.\n\n## Stack Overflow\nStack Overflow is a popular forum to ask code-level questions or if you're stuck with a specific error.\n[Ask your own!](https://stackoverflow.com/questions/ask?tags=deno)\n\n## DEV's Deno Community\nA great place to find interesting articles about best practices, application architecture and new learnings. Post your articles with the tag `deno`.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/help", "title": "Where to get help", "description": "Stuck? Lost? Get Help from the Community.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:57:12", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogTitle": "Where to get help", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:title": "Where to get help", "twitter:card": "summary_large_image", "title": "Where to get help", "og:type": "article", "twitter:title": "Where to get help", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:locale": "en_US", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "scrapeId": "319f7053-b4db-4c21-8513-6d3fec42fea3", "sourceURL": "https://docs.deno.com/runtime/help", "url": "https://docs.deno.com/runtime/help/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Where to get help\"?\n\nAssistant: Here are the recommended best practices:\n\n• Post your articles with the tag `deno` on DEV's Deno Community.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/help", "title": "Where to get help", "description": "Stuck? Lost? Get Help from the Community.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 23:57:12", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogTitle": "Where to get help", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:title": "Where to get help", "twitter:card": "summary_large_image", "title": "Where to get help", "og:type": "article", "twitter:title": "Where to get help", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:locale": "en_US", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "scrapeId": "319f7053-b4db-4c21-8513-6d3fec42fea3", "sourceURL": "https://docs.deno.com/runtime/help", "url": "https://docs.deno.com/runtime/help/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno and Docker\"?\n\nAssistant: This page covers how to use Deno with Docker, including best practices, common issues, and workspace management.\n\nHere's a detailed explanation:\n\n\n## Using Deno with Docker\nDeno provides [official Docker files](https://github.com/denoland/deno_docker) and [images](https://hub.docker.com/r/denoland/deno).\n\nTo use the official image, create a `Dockerfile` in your project directory:\n\n```highlight notranslate dockerfile\nFROM denoland/deno:latest\n\n# Create working directory\nWORKDIR /app\n\n# Copy source\nCOPY . .\n\n# Compile the main app\nRUN deno cache main.ts\n\n# Run the app\nCMD [\"deno\", \"run\", \"--allow-net\", \"main.ts\"]\n```\n\n\n## Best Practices\n### Use Multi-stage Builds\nFor smaller production images:\n\n```highlight notranslate dockerfile\n# Build stage\nFROM denoland/deno:latest as builder\nWORKDIR /app\nCOPY . .\nRUN deno cache main.ts\n\n# Production stage\nFROM denoland/deno:latest\nWORKDIR /app\nCOPY --from=builder /app .\nCMD [\"deno\", \"run\", \"--allow-net\", \"main.ts\"]\n```\n\n### Permission Flags\nSpecify required permissions explicitly:\n\n```highlight notranslate dockerfile\nCMD [\"deno\", \"run\", \"--allow-net=api.example.com\", \"--allow-read=/data\", \"main.ts\"]\n```\n\n### Development Container\nFor development with hot-reload:\n\n```highlight notranslate dockerfile\nFROM denoland/deno:latest\n\nWORKDIR /app\nCOPY . .\n\nCMD [\"deno\", \"run\", \"--watch\", \"--allow-net\", \"main.ts\"]\n```\n\n## Common Issues and Solutions\n1. **Permission Denied Errors**\n   - Use `--allow-*` flags appropriately\n   - Consider using `deno.json` permissions\n2. **Large Image Sizes**\n   - Use multi-stage builds\n   - Include only necessary files\n   - Add proper `.dockerignore`\n3. **Cache Invalidation**\n   - Separate dependency caching\n   - Use proper layer ordering\n\n\n## Example .dockerignore\n```highlight notranslate text\n.git\n.gitignore\nDockerfile\nREADME.md\n*.log\n_build/\nnode_modules/\n```\n\n## Available Docker Tags\nDeno provides several official tags:\n\n- `denoland/deno:latest` - Latest stable release\n- `denoland/deno:alpine` - Alpine-based smaller image\n- `denoland/deno:distroless` - Google's distroless-based image\n- `denoland/deno:ubuntu` - Ubuntu-based image\n- `denoland/deno:1.x` - Specific version tags\n\n\n## Environment Variables\nCommon environment variables for Deno in Docker:\n\n```highlight notranslate dockerfile\nENV DENO_DIR=/deno-dir/\nENV DENO_INSTALL_ROOT=/usr/local\nENV PATH=${DENO_INSTALL_ROOT}/bin:${PATH}\n\n# Optional environment variables\nENV DENO_NO_UPDATE_CHECK=1\nENV DENO_NO_PROMPT=1\n```\n\n## Running Tests in Docker\n```highlight notranslate dockerfile\nFROM denoland/deno:latest\n\nWORKDIR /app\nCOPY . .\n\n# Run tests\nCMD [\"deno\", \"test\", \"--allow-none\"]\n```\n\n## Using Docker Compose\n```highlight notranslate yaml\n// filepath: docker-compose.yml\nversion: \"3.8\"\nservices:\n  deno-app:\n    build: .\n    volumes:\n      - .:/app\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DENO_ENV=development\n    command: [\"deno\", \"run\", \"--watch\", \"--allow-net\", \"main.ts\"]\n```\n\n## Health Checks\n```highlight notranslate dockerfile\nHEALTHCHECK --interval=30s --timeout=3s \\\n  CMD deno eval \"try { await fetch('http://localhost:8000/health'); } catch { exit(1); }\"\n```\n\n## Common Development Workflow\nFor local development:\n\n1. Build the image: `docker build -t my-deno-app .`\n2. Run with volume mount:\n\n```highlight notranslate bash\ndocker run -it --rm \\\n  -v ${PWD}:/app \\\n  -p 8000:8000 \\\n  my-deno-app\n```\n\n## Security Considerations\n- Run as non-root user:\n\n```highlight notranslate dockerfile\n# Create deno user\nRUN addgroup --system deno && \\\n    adduser --system --ingroup deno deno\n\n# Switch to deno user\nUSER deno\n\n# Continue with rest of Dockerfile\n```\n\n- Use minimal permissions:\n\n```highlight notranslate dockerfile\nCMD [\"deno\", \"run\", \"--allow-net=api.example.com\", \"--allow-read=/app\", \"main.ts\"]\n```\n\n- Consider using `--deny-*` flags for additional security\n\n\n## Working with Workspaces in Docker\nWhen working with Deno workspaces (monorepos) in Docker, there are two main approaches:\n\n### 1. Full Workspace Containerization\nInclude the entire workspace when you need all dependencies:\n\n```highlight notranslate dockerfile\nFROM denoland/deno:latest\n\nWORKDIR /app\n\n# Copy entire workspace\nCOPY deno.json .\nCOPY project-a/ ./project-a/\nCOPY project-b/ ./project-b/\n\nWORKDIR /app/project-a\nCMD [\"deno\", \"run\", \"-A\", \"mod.ts\"]\n```\n\n### 2. Minimal Workspace Containerization\nFor smaller images, include only required workspace members:\n\n1. Create a build context structure:\n\n```highlight notranslate sh\nproject-root/\n├── docker/\n│   └── project-a/\n│       ├── Dockerfile\n│       ├── .dockerignore\n│       └── build-context.sh\n├── deno.json\n├── project-a/\n└── project-b/\n```\n\n2. Create a `.dockerignore`:\n\n```highlight notranslate text\n// filepath: docker/project-a/.dockerignore\n*\n!deno.json\n!project-a/**\n!project-b/**  # Only if needed\n```\n\n3. Create a build context script:\n\n```highlight notranslate bash\n// filepath: docker/project-a/build-context.sh\n#!/bin/bash\n\n# Create temporary build context\nBUILD_DIR=\"./tmp-build-context\"\nmkdir -p $BUILD_DIR\n\n# Copy workspace configuration\ncp ../../deno.json $BUILD_DIR/\n\n# Copy main project\ncp -r ../../project-a $BUILD_DIR/\n\n# Copy only required dependencies\nif grep -q \"\\\"@scope/project-b\\\"\" \"../../project-a/mod.ts\"; then\n    cp -r ../../project-b $BUILD_DIR/\nfi\n```\n\n4. Create a minimal Dockerfile:\n\n```highlight notranslate dockerfile\n// filepath: docker/project-a/Dockerfile\nFROM denoland/deno:latest\n\nWORKDIR /app\n\n# Copy only necessary files\nCOPY deno.json .\nCOPY project-a/ ./project-a/\n# Copy dependencies only if required\nCOPY project-b/ ./project-b/\n\nWORKDIR /app/project-a\n\nCMD [\"deno\", \"run\", \"-A\", \"mod.ts\"]\n```\n\n5. Build the container:\n\n```highlight notranslate bash\ncd docker/project-a\n./build-context.sh\ndocker build -t project-a -f Dockerfile tmp-build-context\nrm -rf tmp-build-context\n```\n\n## Best Practices\n- Always include the root `deno.json` file\n- Maintain the same directory structure as development\n- Document workspace dependencies clearly\n- Use build scripts to manage context\n- Include only required workspace members\n- Update `.dockerignore` when dependencies change\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/docker", "title": "Deno and Docker", "description": "This page covers how to use Deno with Docker, including best practices, common issues, and workspace management.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-27 23:57:59", "type": "overview", "page_metadata": {"og:site_name": "Deno", "twitter:title": "Deno and Docker", "og:locale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno and Docker", "og:type": "article", "og:title": "Deno and Docker", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Deno and Docker", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "bafd747e-4b0e-4f27-87a8-fc6573a9f9ef", "sourceURL": "https://docs.deno.com/runtime/reference/docker", "url": "https://docs.deno.com/runtime/reference/docker/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno and Docker\"?\n\nAssistant: Here are some code examples:\n\n### Dockerfile for Deno\n```yaml\nFROM denoland/deno:latest\n\n# Create working directory\nWORKDIR /app\n\n# Copy source\nCOPY . .\n\n# Compile the main app\nRUN deno cache main.ts\n\n# Run the app\nCMD [\"deno\", \"run\", \"--allow-net\", \"main.ts\"]\n\n```\n\n### Multi-stage Builds\n```yaml\n# Build stage\nFROM denoland/deno:latest as builder\nWORKDIR /app\nCOPY . .\nRUN deno cache main.ts\n\n# Production stage\nFROM denoland/deno:latest\nWORKDIR /app\nCOPY --from=builder /app .\nCMD [\"deno\", \"run\", \"--allow-net\", \"main.ts\"]\n\n```\n\n### Permission Flags\n```yaml\nCMD [\"deno\", \"run\", \"--allow-net=api.example.com\", \"--allow-read=/data\", \"main.ts\"]\n\n```\n\n### Development Container\n```yaml\nFROM denoland/deno:latest\n\nWORKDIR /app\nCOPY . .\n\nCMD [\"deno\", \"run\", \"--watch\", \"--allow-net\", \"main.ts\"]\n\n```\n\n### Example .dockerignore\n```yaml\n.git\n.gitignore\nDockerfile\nREADME.md\n*.log\n_build/\nnode_modules/\n\n```\n\n### Environment Variables\n```yaml\nENV DENO_DIR=/deno-dir/\nENV DENO_INSTALL_ROOT=/usr/local\nENV PATH=${DENO_INSTALL_ROOT}/bin:${PATH}\n\n# Optional environment variables\nENV DENO_NO_UPDATE_CHECK=1\nENV DENO_NO_PROMPT=1\n\n```\n\n### Running Tests in Docker\n```yaml\nFROM denoland/deno:latest\n\nWORKDIR /app\nCOPY . .\n\n# Run tests\nCMD [\"deno\", \"test\", \"--allow-none\"]\n\n```\n\n### Using Docker Compose\n```yaml\nversion: \"3.8\"\nservices:\n  deno-app:\n    build: .\n    volumes:\n      - .:/app\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DENO_ENV=development\n    command: [\"deno\", \"run\", \"--watch\", \"--allow-net\", \"main.ts\"]\n\n```\n\n### Health Checks\n```yaml\nHEALTHCHECK --interval=30s --timeout=3s \\\n  CMD deno eval \"try { await fetch('http://localhost:8000/health'); } catch { exit(1); }\"\n\n```\n\n### Common Development Workflow\n```yaml\ndocker run -it --rm \\\n  -v ${PWD}:/app \\\n  -p 8000:8000 \\\n  my-deno-app\n\n```\n\n### Security Considerations\n```yaml\n# Create deno user\nRUN addgroup --system deno && \\\n    adduser --system --ingroup deno deno\n\n# Switch to deno user\nUSER deno\n\n# Continue with rest of Dockerfile\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/docker", "title": "Deno and Docker", "description": "This page covers how to use Deno with Docker, including best practices, common issues, and workspace management.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-27 23:57:59", "type": "code_examples", "page_metadata": {"og:site_name": "Deno", "twitter:title": "Deno and Docker", "og:locale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno and Docker", "og:type": "article", "og:title": "Deno and Docker", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Deno and Docker", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "bafd747e-4b0e-4f27-87a8-fc6573a9f9ef", "sourceURL": "https://docs.deno.com/runtime/reference/docker", "url": "https://docs.deno.com/runtime/reference/docker/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno and Docker\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always include the root `deno.json` file\n• Maintain the same directory structure as development\n• Document workspace dependencies clearly\n• Use build scripts to manage context\n• Include only required workspace members\n• Update `.dockerignore` when dependencies change\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/docker", "title": "Deno and Docker", "description": "This page covers how to use Deno with Docker, including best practices, common issues, and workspace management.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-27 23:57:59", "type": "best_practices", "page_metadata": {"og:site_name": "Deno", "twitter:title": "Deno and Docker", "og:locale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno and Docker", "og:type": "article", "og:title": "Deno and Docker", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Deno and Docker", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "bafd747e-4b0e-4f27-87a8-fc6573a9f9ef", "sourceURL": "https://docs.deno.com/runtime/reference/docker", "url": "https://docs.deno.com/runtime/reference/docker/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Classes and Interfaces in Deno GPU API\"?\n\nAssistant: This page provides an overview of the classes and interfaces available in the Deno GPU API, including their properties and methods.\n\nHere's a detailed explanation:\n\n\n## Classes\nThis section lists the classes available in the Deno GPU API, along with their properties and methods.\n\n## Interfaces\nThis section lists the interfaces available in the Deno GPU API, along with their properties.\n\n## Type Aliases\nThis section lists the type aliases available in the Deno GPU API.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/gpu", "title": "Classes and Interfaces in Deno GPU API", "description": "This page provides an overview of the classes and interfaces available in the Deno GPU API, including their properties and methods.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-27 23:58:48", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "GPU - Web documentation", "title": "GPU - Web documentation", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "GPU - Web documentation", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "GPU - Web documentation", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "4957ea38-1297-49d5-9f2b-210565073c97", "sourceURL": "https://docs.deno.com/api/web/gpu", "url": "https://docs.deno.com/api/web/gpu", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Architecture\"?\n\nAssistant: This page covers the internal details of Deno, including its analogy with Linux, resources, metrics, and conference talks related to Deno.\n\nHere's a detailed explanation:\n\n\n## Deno and Linux analogy\n| **Linux** | **Deno** |\n| --- | --- |\n| Processes | Web Workers |\n| Syscalls | Ops |\n| File descriptors (fd) | [Resource ids (rid)](https://docs.deno.com/runtime/contributing/architecture/#resources) |\n| Scheduler | Tokio |\n| Userland: libc++ / glib / boost | [https://jsr.io/@std](https://jsr.io/@std) |\n| /proc/$$/stat | [Deno.metrics()](https://docs.deno.com/runtime/contributing/architecture/#metrics) |\n| man pages | deno types / [https://docs.deno.com](https://docs.deno.com/) |\n\n## Resources\nResources (AKA `rid`) are Deno's version of file descriptors. They are integer values used to refer to open files, sockets, and other concepts. For testing it would be good to be able to query the system for how many open resources there are.\n\n## Metrics\nMetrics is Deno's internal counter for various statistics.\n\n## Conference\n- Ryan Dahl. (May 27, 2020).\n[An interesting case with Deno](https://www.youtube.com/watch?v=1b7FoBwxc7E).\nDeno Israel.\n- Bartek Iwańczuk. (Oct 6, 2020).\n[Deno internals - how modern JS/TS runtime is\\nbuilt](https://www.youtube.com/watch?v=AOvg_GbnsbA&t=35m13s). Paris Deno.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/architecture", "title": "Deno Architecture", "description": "This page covers the internal details of Deno, including its analogy with Linux, resources, metrics, and conference talks related to Deno.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 00:08:38", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Internal Details", "ogTitle": "Internal Details", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Internal Details", "ogLocale": "en_US", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Internal Details", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "32bb140c-c748-47c4-a182-4a61ed450b42", "sourceURL": "https://docs.deno.com/runtime/contributing/architecture", "url": "https://docs.deno.com/runtime/contributing/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno Architecture\"?\n\nAssistant: Here are some code examples:\n\n### Deno Resources Example\n```yaml\nconsole.log(Deno.resources());\n// { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\nDeno.close(0);\nconsole.log(Deno.resources());\n// { 1: \"stdout\", 2: \"stderr\" }\n```\n\n### Deno Metrics Example\n```yaml\n> console.table(Deno.metrics())\n┌─────────────────────────┬───────────┐\n│          (idx)          │  Values   │\n├─────────────────────────┼───────────┤\n│      opsDispatched      │    9      │\n│    opsDispatchedSync    │    0      │\n│   opsDispatchedAsync    │    0      │\n│ opsDispatchedAsyncUnref │    0      │\n│      opsCompleted       │    9      │\n│    opsCompletedSync     │    0      │\n│    opsCompletedAsync    │    0      │\n│ opsCompletedAsyncUnref  │    0      │\n│    bytesSentControl     │   504     │\n│      bytesSentData      │    0      │\n│      bytesReceived      │   856     │\n└─────────────────────────┴───────────┘\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/architecture", "title": "Deno Architecture", "description": "This page covers the internal details of Deno, including its analogy with Linux, resources, metrics, and conference talks related to Deno.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 00:08:38", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Internal Details", "ogTitle": "Internal Details", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Internal Details", "ogLocale": "en_US", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Internal Details", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "32bb140c-c748-47c4-a182-4a61ed450b42", "sourceURL": "https://docs.deno.com/runtime/contributing/architecture", "url": "https://docs.deno.com/runtime/contributing/architecture/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno & Visual Studio Code\"?\n\nAssistant: This page covers developing Deno applications using Visual Studio Code and the official vscode_deno extension.\n\nHere's a detailed explanation:\n\n\n## Installation\nThe Deno VS Code extension integrates directly with the Deno CLI using the language server protocol. This helps ensure that the information you get about your code aligns to how that code will work when you run it with the Deno CLI.\n\nThe Deno extension is installed like other extensions in VS Code. Search for `Deno` in the extensions tab of VS Code and click the **install** button, or [this link](vscode:extension/denoland.vscode-deno) will open the extension page where you can choose to install.\n\nOnce you install the extension for the first time, you should receive a splash page that welcomes you to the extension. (If you missed it, or want to see it again, `⌘`  `⇧`  `P` to open the command palette, and run the **Deno: Welcome** command.)\n\n## Enabling Deno in a VS Code workspace\nWe realize that not every project you might work on in VS Code is a Deno project. By default, VS Code comes with a built-in TypeScript/JavaScript language service which is used when editing TypeScript or JavaScript files.\n\nIn order to have support for Deno APIs, as well as the ability to resolve modules as the Deno CLI does, you need to enable Deno for the workspace. The most direct way to do this is to use the **Deno: Initialize Workspace** **Configuration** from the VS Code command palette.\n\nThis command will add `\"deno.enable\": true` to the workspace configuration (your workspace root `.vscode/settings.json`). Once the command is finished, you will get a notification that Deno workspace is initialized.\n\nThese settings (and other settings) are available via the VS Code settings panel. In the panel the setting is **Deno: Enable**.\n\nNote\n\nVS Code has user and workspace settings. You probably don't want to enable Deno in the **user** settings, instead set it in **workspace** settings, or by default every workspace will be Deno enabled.\n\n## Workspace folder settings\nThese are the settings that can be set on a workspace folder. The rest of the settings currently only apply to the workspace:\n\n- `deno.enable` - Controls if the Deno Language Server is enabled. When enabled, the extension will disable the built-in VS Code JavaScript and TypeScript language services, and will use the Deno language server instead. _boolean,_ _default `false`_\n- `deno.enablePaths` - Controls if the Deno Language Server is enabled for only specific paths of the workspace folder. Defaults to an empty list.\n- `deno.codeLens.test` - Controls if the test code lens is enabled. _boolean,_ _default `true`_\n- `deno.codeLens.testArgs` - The list of arguments that are passed to `deno test` when activating a test code lens. _string array, default_ _`[\"--allow-all\"]`_\n\nWhen a project is enabled, the extension will get information directly from the installed Deno CLI. The extension will also mute the built-in TypeScript/JavaScript extension.\n\n## Partially enabling Deno in a VS Code workspace\nIn a workspace (or workspace folder), sub-paths can be enabled for Deno, while code outside those paths will be not be enabled and the VS Code built-in JavaScript/TypeScript language server will be used. Use the **Deno: Enable** **Paths** setting (or `deno.enablePaths` if manually editing)\n\nFor example if you have a project like this:\n\n```\nproject\n├── worker\n└── front_end\n```\n\nWhere you only want to enable the `worker` path (and its subpaths) to be Deno enabled, you will want to add `./worker` to the list of **Deno: Enable Paths** in the configuration.\n\n## Mixed-Deno projects\nWith this feature, you can have a mixed Deno project, where some of the workspace folders are Deno enabled and some are not. This is useful when creating a project that might have a front-end component, where you want a different configuration for that front end code.\n\nIn order to support this, you would create a new workspace (or add a folder to an existing workspace) and in the settings configure one of the folders to have `deno.enable` set to `true` and one set to `false`. Once you save the workspace configuration, you notice that the Deno language server only applies diagnostics to the enabled folders, while the other folder will use the built-in TypeScript compiler of VS Code to supply diagnostics for TypeScript and JavaScript files.\n\n## Linting\nThe same engine that provides the diagnostics when using `deno lint` can also be used via the extension. By enabling the **Deno: Lint** setting in the settings panel (or `deno.lint` if editing settings in JSON) the editor will start to display lint \"warnings\" in your code. See the Linter section for more information on how to use the Deno linter.\n\n## Using a configuration file\nA configuration file is not required for a Deno project, but there are a few scenarios though where it might be useful. If you want to have the same settings applied as when specifying the `--config` option on the command line, the **Deno: Config** option can be used (or `deno.config` if manually editing).\n\nThe Deno extension will also auto-identify and apply a `deno.jsonc` or `deno.json` by looking in the workspace root for the configuration file and applying it. Manually specifying a **Deno: Config** option will override this automatic behavior.\n\n## Formatting\nThe Deno CLI comes with a built-in formatter which can be accessed using `deno fmt` but can also be configured to be used by VS Code. `Deno` should be on the drop down list for the **Editor: Default formatter** setting (or if you are editing settings manually, it would be `\"editor.defaultFormatter\": \"denoland.vscode-deno\" ).\n\n## Setting a path to the Deno CLI\nThe extension looks for the Deno CLI executable in the host's `PATH`, but sometimes that isn't desirable and the **Deno: Path** can be set (or `deno.path` if manually editing) to point to the Deno executable. If the path provided is relative, it will be resolved relative to the root of the workspace.\n\n## Import suggestions\nWhen attempting to import a module, the extension will offer suggestions to complete the import. Local relative files will be included in the suggestions, plus any cached remote files.\n\nThe extension supports registry auto-completions, where a remote registry/website of modules can optionally provide metadata that allows a client to discover modules. By default, the extension will check hosts/origins to see if they support suggestions, and if it does, the extension will prompt you to see if you want to enable it. This behavior can be changed by unchecking the box under **Deno > Suggest > Imports: Auto Discover** in Settings. (or `deno.suggest.imports.autoDiscover` if manually editing).\n\nIndividual hosts/origins can be enabled or disabled by editing the **Deno > Suggest > Imports: Hosts** setting - `deno.suggest.imports.hosts` in the appropriate `settings.json`.\n\n## Caching remote modules\nDeno supports remote modules and will fetch remote modules and store them locally in a cache. When you do something like `deno run`, `deno test`, `deno info` or `deno install` on the command line, the Deno CLI will go and try to fetch any remote modules and their dependencies and populate the cache.\n\nWhile developing code in the editor, if the module is not in the cache, you will get a diagnostic such as `Uncached or missing remote URL: \"https://deno.land/example/mod.ts\"` for any missing remote modules. Deno will not automatically try to cache the module, unless it is a completion from a registry import suggestion (see above).\n\nIn addition to running a command on a command line, the extension provides ways to cache dependencies within the editor. A missing dependency will have a quick fix which is to have Deno try to cache the dependency. Fixes can be accessed by pressing `CTRL` `.` or `⌘` `.` when the editor is positioned in the import specifier, or hovering over the specifier and selecting **Quick Fix...**.\n\nThere is also the **Deno: Cache Dependencies** command in the command palette which will attempt to cache any dependencies of the module currently active in the editor.\n\n## Code lenses\nThe language server currently supports several code lenses (actionable contextual information interspersed in the code) that allow you to get greater insight into the code. Most are disabled by default, but can easily be enabled.\n\n## Deno > Code Lens: Implementations\n`deno.codeLens.implementations` - Provides a lens that will list out any implementations of an item elsewhere in the code.\n\n## Deno > Code Lens: References\n`deno.codeLens.references` - Provides a lens that will list out any references to an item elsewhere in the code.\n\n## Deno > Code Lens: References All Functions\n`deno.codeLens.referencesAllFunctions` - Provides a lens that will list out all references to all functions in the code. All functions are excluded from the References setting mentioned above.\n\n## Testing code lens\nThe Deno CLI includes a built-in testing API available under `Deno.test`. The extension and language server have a code lens enabled by default which provides the ability to run a test from within the editor.\n\nWhen you have a block of code that provides a test:\n\n```typescript\nimport { assert } from \"jsr:@std/assert@1\";\n\nDeno.test({\n  name: \"a test case\",\n  fn() {\n    let someCondition = true;\n    assert(someCondition);\n  },\n});\n```\n\nYou will see a code lens just above the test:\n\n```console\n▶ Run Test\n```\n\nIf you click on the code lens, the extension will start up the Deno CLI to run the test for you and display the output. Based on your other settings, the extension will try to run your test with the same settings. If you need to adjust the arguments provided when doing `deno test`, you can do so by setting the `deno.codeLens.testArgs` setting.\n\nThe extension will also try to track if in the same module you destructure the `Deno.test` function or assign it to a variable. So you can do something like this and still have the code lens work:\n\n```typescript\nconst { test: denoTest } = Deno;\n\ndenoTest({\n  name: \"example test\",\n  fn() {},\n});\n```\n\nIf you want to disable this feature, you can do so by un-setting the **Deno > CodeLens: Test** setting - `deno.codeLens.test`.\n\nYou can run tests from the Test Explorer view, from the code lens decorations, or via the command palette. You can also use the filter function in the Text Explorer view to exclude certain tests from a test run.\n\nWhen a test fails, the failure message, including the stack trace, will be available when inspecting the test results in VS Code.\n\n## Test Configuration\nBy default, tests are executed in a similar fashion to if you were to use `deno test --allow-all` on the command line. These default arguments can be changed by setting the **Deno > Testing: Args** option in your user or workspace settings (or `deno.testing.args` if you are configuring manually). Add individual arguments here which you would have used with the `deno test` subcommand.\n\n## Using the debugger\nThe extension provides integration with the built-in VS Code debugger. You can generate a configuration by: going to `Run and Debug` panel, clicking `create a launch.json file` and selecting `Deno` option from the available debugger options.\n\n## Tasks\nWhile the extension communicates directly with the language server, there are times when you might prefer to run Deno commands via the CLI. You can define tasks in a `deno.json` file in the root of your workspace in a `tasks` field.\n\n## Using a development container\nUsing a development container with VS Code is a great way to have an isolated development environment without having to worry about having to install the Deno CLI on your local system. Deno supports development containers and the Deno extension will work with them.\n\nIf you have an existing Deno project that you would like to add dev container support to, execute **Remote-Containers: Add Development Container Configuration** **Files...** in the command palette, choose **Show All Definitions...** and then search for the `Deno` definition. This will setup a baseline `.devcontainer` configuration, which will install the latest version of the Deno CLI in the container.\n\n## Troubleshooting\nThe following sections cover challenges you might face when using the extension and try to give likely causes.\n\n## Errors/diagnostics\n`An import path cannot end with a '.ts' extension.` or `Cannot find name 'Deno'.`\n\nThis is normally a situation where Deno is not enabled on a Deno project. If you look at the source of the diagnostic you are probably going to see a `ts(2691)`. The `ts` indicates that it is coming from the built-in TypeScript/JavaScript engine in VS Code. You will want to check that your configuration is set properly and the **Deno: Enable** setting - `deno.enable` is true.\n\nYou can also check what the Deno language server thinks is your current active configuration by using **Deno: Language Server Status** from the command palette. This will display a document from the language server with a section named \"Workspace Configuration\". This will give you the configuration as reported by VS Code to the language server.\n\nAlso check if the VS Code configuration called `enableProjectDiagnostics`, located in **TypeScript › Tsserver › Experimental: Enable Project Diagnostics** is **disabled**. This setting allows TypeScript language server to execute in the background to check the entire project at once and Deno cannot disable its behavior so the errors keep showing even when all other settings are correctly set.\n\nIf `\"enable\"` is set to `true` in there, and the error message still persists, you might want to try restarting VS Code, as the part of the extension that \"mutes\" the built-in TypeScript diagnostics for files is not working as designed. If the issue still persists after a restart, you may have encountered a bug that we didn't expect and searching the issues and reporting a bug at https://github.com/denoland/vscode_deno is the next step.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/vscode", "title": "Deno & Visual Studio Code", "description": "This page covers developing Deno applications using Visual Studio Code and the official vscode_deno extension.", "has_code_examples": true, "has_best_practices": true, "section_count": 22, "timestamp": "2025-02-28 00:10:39", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno & Visual Studio Code", "og:title": "Deno & Visual Studio Code", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Deno & Visual Studio Code", "twitter:title": "Deno & Visual Studio Code", "scrapeId": "5b253566-8120-4a7e-a8e3-0050ded8976e", "sourceURL": "https://docs.deno.com/runtime/reference/vscode", "url": "https://docs.deno.com/runtime/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno & Visual Studio Code\"?\n\nAssistant: Here are some code examples:\n\n### Testing code lens example\n```yaml\nimport { assert } from \"jsr:@std/assert@1\";\n\nDeno.test({\n  name: \"a test case\",\n  fn() {\n    let someCondition = true;\n    assert(someCondition);\n  },\n});\n```\n\n### Code lens example with destructuring\n```yaml\nconst { test: denoTest } = Deno;\n\ndenoTest({\n  name: \"example test\",\n  fn() {},\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/vscode", "title": "Deno & Visual Studio Code", "description": "This page covers developing Deno applications using Visual Studio Code and the official vscode_deno extension.", "has_code_examples": true, "has_best_practices": true, "section_count": 22, "timestamp": "2025-02-28 00:10:39", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno & Visual Studio Code", "og:title": "Deno & Visual Studio Code", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Deno & Visual Studio Code", "twitter:title": "Deno & Visual Studio Code", "scrapeId": "5b253566-8120-4a7e-a8e3-0050ded8976e", "sourceURL": "https://docs.deno.com/runtime/reference/vscode", "url": "https://docs.deno.com/runtime/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno & Visual Studio Code\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable Deno in workspace settings instead of user settings to avoid enabling it for every workspace.\n• Use the command palette to initialize Deno workspace configuration.\n• Check the Deno language server status for current active configuration.\n• Use development containers for isolated environments without local Deno CLI installation.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/vscode", "title": "Deno & Visual Studio Code", "description": "This page covers developing Deno applications using Visual Studio Code and the official vscode_deno extension.", "has_code_examples": true, "has_best_practices": true, "section_count": 22, "timestamp": "2025-02-28 00:10:39", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno & Visual Studio Code", "og:title": "Deno & Visual Studio Code", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Deno & Visual Studio Code", "twitter:title": "Deno & Visual Studio Code", "scrapeId": "5b253566-8120-4a7e-a8e3-0050ded8976e", "sourceURL": "https://docs.deno.com/runtime/reference/vscode", "url": "https://docs.deno.com/runtime/reference/vscode/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Namespace APIs\"?\n\nAssistant: The global `Deno` namespace contains APIs that are not web standard, including APIs for reading from files, opening TCP sockets, serving HTTP, and executing subprocesses, etc.\n\nHere's a detailed explanation:\n\n\n## File System\nThe Deno runtime comes with [various functions for working with files and directories](https://docs.deno.com/api/deno/file-system). You will need to use --allow-read and --allow-write permissions to gain access to the file system.\n\nRefer to the links below for code examples of how to use the file system functions.\n\n- [Reading files in streams](https://docs.deno.com/examples/file_server_tutorial/)\n- [Reading a text file ( `Deno.readTextFile`)](https://docs.deno.com/examples/reading_files/)\n- [Writing a text file ( `Deno.writeTextFile`)](https://docs.deno.com/examples/writing_files/)\n\n## Network\nThe Deno runtime comes with [built-in functions for dealing with connections to network ports](https://docs.deno.com/api/deno/network).\n\nRefer to the links below for code examples for common functions.\n\n- [Connect to the hostname and port ( `Deno.connect`)](https://docs.deno.com/api/deno/~/Deno.connect)\n- [Announcing on the local transport address ( `Deno.listen`)](https://docs.deno.com/api/deno/~/Deno.listen)\n\n## Subprocesses\nThe Deno runtime comes with [built-in functions for spinning up subprocesses](https://docs.deno.com/api/deno/sub-process).\n\nRefer to the links below for code samples of how to create a subprocess.\n\n- [Creating a subprocess ( `Deno.Command`)](https://docs.deno.com/runtime/tutorials/subprocess/)\n\n## Errors\nThe Deno runtime comes with [20 error classes](https://docs.deno.com/api/deno/errors) that can be raised in response to a number of conditions.\n\nSome examples are:\n\n```highlight notranslate sh\nDeno.errors.NotFound;\nDeno.errors.WriteZero;\n```\n\nThey can be used as below:\n\n```highlight notranslate ts\ntry {\n  const file = await Deno.open(\"./some/file.txt\");\n} catch (error) {\n  if (error instanceof Deno.errors.NotFound) {\n    console.error(\"the file was not found\");\n  } else {\n    // otherwise re-throw\n    throw error;\n  }\n}\n```\n\n## HTTP Server\nDeno has two HTTP Server APIs:\n\n- [`Deno.serve`](https://docs.deno.com/api/deno/~/Deno.serve): native, _higher-level_, supports HTTP/1.1 and HTTP2, this is the preferred API to write HTTP servers in Deno.\n- [`Deno.serveHttp`](https://docs.deno.com/api/deno/~/Deno.serveHttp): native, _low-level_, supports HTTP/1.1 and HTTP2.\n\nTo start an HTTP server on a given port, use the `Deno.serve` function. This function takes a handler function that will be called for each incoming request, and is expected to return a response (or a promise resolving to a response). For example:\n\n```highlight notranslate ts\nDeno.serve((_req) => {\n  return new Response(\"Hello, World!\");\n});\n```\n\nBy default `Deno.serve` will listen on port `8000`, but this can be changed by passing in a port number in options bag as the first or second argument.\n\nYou can [read more about how to use the HTTP server APIs](https://docs.deno.com/runtime/fundamentals/http_server/).\n\n## Permissions\nPermissions are granted from the CLI when running the `deno` command. User code will often assume its own set of required permissions, but there is no guarantee during execution that the set of **granted** permissions will align with this.\n\nIn some cases, ensuring a fault-tolerant program requires a way to interact with the permission system at runtime.\n\n## import.meta\nDeno supports a number of properties and methods on the [`import.meta`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta) API. It can be used to get information about the module, such as the module's URL.\n\n## FFI\nThe FFI (foreign function interface) API allows users to call libraries written in native languages that support the C ABIs (C/C++, Rust, Zig, V, etc.) using `Deno.dlopen`.\n\n## Program Lifecycle\nDeno supports browser compatible lifecycle events:\n\n- [`load`](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event#:~:text=The%20load%20event%20is%20fired,for%20resources%20to%20finish%20loading.): fired when the whole page has loaded, including all dependent resources such as stylesheets and images.\n- [`beforeunload`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event#:~:text=The%20beforeunload%20event%20is%20fired,want%20to%20leave%20the%20page.): fired when the event loop has no more work to do and is about to exit. Scheduling more asynchronous work (like timers or network requests) will cause the program to continue.\n- [`unload`](https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event): fired when the document or a child resource is being unloaded.\n- [`unhandledrejection`](https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event): fired when a promise that has no rejection handler is rejected, ie. a promise that has no `.catch()` handler or a second argument to `.then()`. \n\nYou can use these events to provide setup and cleanup code in your program.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/deno_namespace_apis", "title": "Deno Namespace APIs", "description": "The global `Deno` namespace contains APIs that are not web standard, including APIs for reading from files, opening TCP sockets, serving HTTP, and executing subprocesses, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 00:11:19", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Deno Namespace APIs", "title": "Deno Namespace APIs", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "twitter:title": "Deno Namespace APIs", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Deno Namespace APIs", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "7b76fc17-edaa-4148-8ca8-e9ee8f6cb296", "sourceURL": "https://docs.deno.com/runtime/reference/deno_namespace_apis", "url": "https://docs.deno.com/runtime/reference/deno_namespace_apis/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno Namespace APIs\"?\n\nAssistant: Here are some code examples:\n\n### Error Handling Example\n```yaml\n```highlight notranslate ts\ntry {\n  const file = await Deno.open(\"./some/file.txt\");\n} catch (error) {\n  if (error instanceof Deno.errors.NotFound) {\n    console.error(\"the file was not found\");\n  } else {\n    // otherwise re-throw\n    throw error;\n  }\n}\n```\n```\n\n### HTTP Server Example\n```yaml\n```highlight notranslate ts\nDeno.serve((_req) => {\n  return new Response(\"Hello, World!\");\n});\n```\n```\n\n### Permission Descriptor Example\n```yaml\n```highlight notranslate ts\nconst desc = { name: \"read\", path: \"/foo/bar\" } as const;\n```\n```\n\n### Query Permissions Example\n```yaml\n```highlight notranslate ts\nconst desc1 = { name: \"read\", path: \"/foo\" } as const;\nconsole.log(await Deno.permissions.query(desc1));\n// PermissionStatus { state: \"granted\", partial: false }\n```\n```\n\n### Revoke Permissions Example\n```yaml\n```highlight notranslate ts\nconst desc = { name: \"read\", path: \"/foo\" } as const;\nconsole.log(await Deno.permissions.revoke(desc));\n// PermissionStatus { state: \"prompt\", partial: false }\n```\n```\n\n### import.meta.url Example\n```yaml\n```highlight notranslate ts\nconsole.log(import.meta.url);\n```\n```\n\n### FFI Example\n```yaml\n```highlight notranslate typescript\nconst libName = `./libadd.${libSuffix}`;\nconst dylib = Deno.dlopen(\n  libName,\n  {\n    \"add\": { parameters: [\"isize\", \"isize\"], result: \"isize\" },\n  } as const,\n);\nconst result = dylib.symbols.add(35, 34); // 69\nconsole.log(`Result from external addition of 35 and 34: ${result}`);\n```\n```\n\n### Non-blocking FFI Example\n```yaml\n```highlight notranslate typescript\nconst library = Deno.dlopen(\n  \"./sleep.so\",\n  {\n    sleep: {\n      parameters: [\"usize\"],\n      result: \"void\",\n      nonblocking: true,\n    },\n  } as const,\n);\nlibrary.symbols.sleep(500).then(() => console.log(\"After\"));\nconsole.log(\"Before\");\n```\n```\n\n### Callback FFI Example\n```yaml\n```highlight notranslate typescript\nconst callback = new Deno.UnsafeCallback(\n  {\n    parameters: [\"u8\"],\n    result: \"void\",\n  } as const,\n  (success: number) => {},\n);\n```\n```\n\n### Program Lifecycle Example\n```yaml\n```highlight notranslate ts\nconst handler = (e: Event): void => {\n  console.log(`got ${e.type} event in event handler (main)`);\n};\nglobalThis.addEventListener(\"load\", handler);\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/deno_namespace_apis", "title": "Deno Namespace APIs", "description": "The global `Deno` namespace contains APIs that are not web standard, including APIs for reading from files, opening TCP sockets, serving HTTP, and executing subprocesses, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 00:11:19", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Deno Namespace APIs", "title": "Deno Namespace APIs", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "twitter:title": "Deno Namespace APIs", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Deno Namespace APIs", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "7b76fc17-edaa-4148-8ca8-e9ee8f6cb296", "sourceURL": "https://docs.deno.com/runtime/reference/deno_namespace_apis", "url": "https://docs.deno.com/runtime/reference/deno_namespace_apis/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Namespace APIs\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `--allow-read` and `--allow-write` permissions to access the file system.\n• Prefer using `Deno.serve` for writing HTTP servers as it is the higher-level API.\n• Use `addEventListener` for registering multiple event handlers instead of `onload` or `onunload` to avoid overriding handlers.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/deno_namespace_apis", "title": "Deno Namespace APIs", "description": "The global `Deno` namespace contains APIs that are not web standard, including APIs for reading from files, opening TCP sockets, serving HTTP, and executing subprocesses, etc.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 00:11:19", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Deno Namespace APIs", "title": "Deno Namespace APIs", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogLocale": "en_US", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "twitter:title": "Deno Namespace APIs", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Deno Namespace APIs", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "7b76fc17-edaa-4148-8ca8-e9ee8f6cb296", "sourceURL": "https://docs.deno.com/runtime/reference/deno_namespace_apis", "url": "https://docs.deno.com/runtime/reference/deno_namespace_apis/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the HTTP server and client in Deno, including module imports, message headers, classes, functions, interfaces, type aliases, and variables related to HTTP.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\nTo use the HTTP server and client one must import the `node:http` module.\n\nThe HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses, so the user is able to stream data.\n\nHTTP message headers are represented by an object like this:\n\nKeys are lowercased. Values are not modified.\n\nIn order to support the full spectrum of possible HTTP applications, the Node.js HTTP API is very low-level. It deals with stream handling and message parsing only. It parses a message into headers and body but it does not parse the actual headers or the body.\n\nSee `message.headers` for details on how duplicate headers are handled.\n\nThe raw headers as they were received are retained in the `rawHeaders` property, which is an array of `[key, value, key2, value2, ...]`. For example, the previous message header object might have a `rawHeaders` list like the following:\n\n## Classes\nAn `Agent` is responsible for managing connection persistence and reuse for HTTP clients. It maintains a queue of pending requests for a given host and port, reusing a single socket connection for each until the queue is empty, at which time the socket is either destroyed or put into a pool where it is kept to be used again for requests to the same host and port. Whether it is destroyed or pooled depends on the `keepAlive` `option`.\n\n- [destroy](https://docs.deno.com/api/node/http/~/Agent#method_destroy_0)\n- [freeSockets](https://docs.deno.com/api/node/http/~/Agent#property_freesockets)\n- [maxFreeSockets](https://docs.deno.com/api/node/http/~/Agent#property_maxfreesockets)\n- [maxSockets](https://docs.deno.com/api/node/http/~/Agent#property_maxsockets)\n- [maxTotalSockets](https://docs.deno.com/api/node/http/~/Agent#property_maxtotalsockets)\n- [requests](https://docs.deno.com/api/node/http/~/Agent#property_requests)\n- [sockets](https://docs.deno.com/api/node/http/~/Agent#property_sockets)\n\nAn `IncomingMessage` object is created by [Server](https://docs.deno.com/api/node/http/~/Server) or [ClientRequest](https://docs.deno.com/api/node/http/~/ClientRequest) and passed as the first argument to the `'request'` and `'response'` event respectively. It may be used to access response status, headers, and data.\n\n## Functions\nReturns a new instance of [Server](https://docs.deno.com/api/node/http/~/Server).\n\n- [createServer](https://docs.deno.com/api/node/http/~/createServer \"createServer\")\n- [get](https://docs.deno.com/api/node/http/~/get \"get\")\n- [request](https://docs.deno.com/api/node/http/~/request \"request\")\n- [setMaxIdleHTTPParsers](https://docs.deno.com/api/node/http/~/setMaxIdleHTTPParsers \"setMaxIdleHTTPParsers\")\n- [validateHeaderName](https://docs.deno.com/api/node/http/~/validateHeaderName \"validateHeaderName\")\n- [validateHeaderValue](https://docs.deno.com/api/node/http/~/validateHeaderValue \"validateHeaderValue\")\n", "metadata": {"source_url": "https://docs.deno.com/api/node/http", "title": "Usage in Deno", "description": "This page covers the usage of the HTTP server and client in Deno, including module imports, message headers, classes, functions, interfaces, type aliases, and variables related to HTTP.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:11:53", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "og:title": "http - Node documentation", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "title": "http - Node documentation", "ogTitle": "http - Node documentation", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "http - Node documentation", "scrapeId": "0281903f-d47f-498a-a12a-40362a8e50a1", "sourceURL": "https://docs.deno.com/api/node/http", "url": "https://docs.deno.com/api/node/http/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the HTTP Module\n```yaml\nimport * as mod from \"node:http\";\n```\n\n### Example HTTP Message Headers\n```yaml\n{ \"content-length\": \"123\",\n  \"content-type\": \"text/plain\",\n  \"connection\": \"keep-alive\",\n  \"host\": \"example.com\",\n  \"accept\": \"*\" }\n```\n\n### Raw Headers Example\n```yaml\n[ 'ConTent-Length', '123456',\n  'content-LENGTH', '123',\n  'content-type', 'text/plain',\n  'CONNECTION', 'keep-alive',\n  'Host', 'example.com',\n  'accepT', '*' ]\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/http", "title": "Usage in Deno", "description": "This page covers the usage of the HTTP server and client in Deno, including module imports, message headers, classes, functions, interfaces, type aliases, and variables related to HTTP.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:11:53", "type": "code_examples", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "og:title": "http - Node documentation", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "title": "http - Node documentation", "ogTitle": "http - Node documentation", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "http - Node documentation", "scrapeId": "0281903f-d47f-498a-a12a-40362a8e50a1", "sourceURL": "https://docs.deno.com/api/node/http", "url": "https://docs.deno.com/api/node/http/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always lowercase the keys in HTTP message headers.\n• Use the `rawHeaders` property to access the raw headers as received.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/http", "title": "Usage in Deno", "description": "This page covers the usage of the HTTP server and client in Deno, including module imports, message headers, classes, functions, interfaces, type aliases, and variables related to HTTP.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:11:53", "type": "best_practices", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "og:title": "http - Node documentation", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "title": "http - Node documentation", "ogTitle": "http - Node documentation", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "http - Node documentation", "scrapeId": "0281903f-d47f-498a-a12a-40362a8e50a1", "sourceURL": "https://docs.deno.com/api/node/http", "url": "https://docs.deno.com/api/node/http/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Errors\"?\n\nAssistant: A comprehensive list of error classes in Deno, detailing the circumstances under which each error is raised.\n\nHere's a detailed explanation:\n\n\n## Classes\nDeno.errors.AddrInUse: Raised when attempting to open a server listener on an address and port that already has a listener.\n\nDeno.errors.AddrNotAvailable: Raised when the underlying operating system reports an `EADDRNOTAVAIL` error.\n\nDeno.errors.AlreadyExists: Raised when trying to create a resource, like a file, that already exists.\n\nDeno.errors.BadResource: The underlying IO resource is invalid or closed, and so the operation could not be performed.\n\nDeno.errors.BrokenPipe: Raised when trying to write to a resource and a broken pipe error occurs. This can happen when trying to write directly to `stdout` or `stderr` and the operating system is unable to pipe the output for a reason external to the Deno runtime.\n\nDeno.errors.Busy: Raised when the underlying IO resource is not available because it is being awaited on in another block of code.\n\nDeno.errors.ConnectionAborted: Raised when the underlying operating system reports an `ECONNABORTED` error.\n\nDeno.errors.ConnectionRefused: Raised when the underlying operating system reports that a connection to a resource is refused.\n\nDeno.errors.ConnectionReset: Raised when the underlying operating system reports that a connection has been reset. With network servers, it can be a normal occurrence where a client will abort a connection instead of properly shutting it down.\n\nDeno.errors.FilesystemLoop: Raised when too many symbolic links were encountered when resolving the filename.\n\nDeno.errors.Http: Raised in situations where when attempting to load a dynamic import, too many redirects were encountered.\n\nDeno.errors.Interrupted: Raised when the underlying operating system reports an `EINTR` error. In many cases, this underlying IO error will be handled internally within Deno, or result in a BadResource error instead.\n\nDeno.errors.InvalidData: Raised when an operation returns data that is invalid for the operation being performed.\n\nDeno.errors.IsADirectory: Raised when trying to open, create or write to a directory.\n\nDeno.errors.NetworkUnreachable: Raised when performing a socket operation but the remote host is not reachable.\n\nDeno.errors.NotADirectory: Raised when trying to perform an operation on a path that is not a directory, when a directory is required.\n\nDeno.errors.NotCapable: Raised when trying to perform an operation while the relevant Deno permission (like `--allow-read`) has not been granted.\n\nDeno.errors.NotConnected: Raised when the underlying operating system reports an `ENOTCONN` error.\n\nDeno.errors.NotFound: Raised when the underlying operating system indicates that the file was not found.\n\nDeno.errors.NotSupported: Raised when the underlying Deno API is asked to perform a function that is not currently supported.\n\nDeno.errors.PermissionDenied: Raised when the underlying operating system indicates the current user which the Deno process is running under does not have the appropriate permissions to a file or resource.\n\nDeno.errors.TimedOut: Raised when the underlying operating system reports that an I/O operation has timed out ( `ETIMEDOUT`).\n\nDeno.errors.UnexpectedEof: Raised when attempting to read bytes from a resource, but the EOF was unexpectedly encountered.\n\nDeno.errors.WouldBlock: Raised when the underlying operating system would need to block to complete but an asynchronous (non-blocking) API is used.\n\nDeno.errors.WriteZero: Raised when expecting to write to an IO buffer resulted in zero bytes being written.\n\n## Namespaces\nDeno.errors: A set of error constructors that are raised by Deno APIs.\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/errors", "title": "Deno Errors", "description": "A comprehensive list of error classes in Deno, detailing the circumstances under which each error is raised.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:13:15", "type": "overview", "page_metadata": {"ogTitle": "Errors - Deno documentation", "language": "en", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "twitter:title": "Errors - Deno documentation", "favicon": "https://docs.deno.com/favicon.ico", "og:title": "Errors - Deno documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Errors - Deno documentation", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "scrapeId": "ad16a0aa-3d66-49cf-83f9-d4a7e1516cb1", "sourceURL": "https://docs.deno.com/api/deno/errors", "url": "https://docs.deno.com/api/deno/errors", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the `node:child_process` module in Deno, detailing how to spawn subprocesses and manage their input/output.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:child_process\";\n```\n\nThe `node:child_process` module provides the ability to spawn subprocesses in a manner that is similar, but not identical, to [`popen(3)`](http://man7.org/linux/man-pages/man3/popen.3.html). This capability is primarily provided by the [spawn](https://docs.deno.com/api/node/child_process/~/spawn) function:\n\n```highlight notranslate js\nimport { spawn } from 'node:child_process';\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n```\n\nBy default, pipes for `stdin`, `stdout`, and `stderr` are established between the parent Node.js process and the spawned subprocess. These pipes have limited (and platform-specific) capacity. If the subprocess writes to stdout in excess of that limit without the output being captured, the subprocess blocks waiting for the pipe buffer to accept more data. This is identical to the behavior of pipes in the shell. Use the `{ stdio: 'ignore' }` option if the output will not be consumed.\n\nThe command lookup is performed using the `options.env.PATH` environment variable if `env` is in the `options` object. Otherwise, `process.env.PATH` is used. If `options.env` is set without `PATH`, lookup on Unix is performed on a default search path search of `/usr/bin:/bin` (see your operating system's manual for execvpe/execvp), on Windows the current processes environment variable `PATH` is used.\n\nOn Windows, environment variables are case-insensitive. Node.js lexicographically sorts the `env` keys and uses the first one that case-insensitively matches. Only first (in lexicographic order) entry will be passed to the subprocess. This might lead to issues on Windows when passing objects to the `env` option that have multiple variants of the same key, such as `PATH` and `Path`.\n\nThe [spawn](https://docs.deno.com/api/node/child_process/~/spawn) method spawns the child process asynchronously, without blocking the Node.js event loop. The [spawnSync](https://docs.deno.com/api/node/child_process/~/spawnSync) function provides equivalent functionality in a synchronous manner that blocks the event loop until the spawned process either exits or is terminated.\n\nFor convenience, the `node:child_process` module provides a handful of synchronous and asynchronous alternatives to [spawn](https://docs.deno.com/api/node/child_process/~/spawn) and [spawnSync](https://docs.deno.com/api/node/child_process/~/spawnSync). Each of these alternatives are implemented on top of [spawn](https://docs.deno.com/api/node/child_process/~/spawn) or [spawnSync](https://docs.deno.com/api/node/child_process/~/spawnSync).\n\n- [exec](https://docs.deno.com/api/node/child_process/~/exec): spawns a shell and runs a command within that shell, passing the `stdout` and `stderr` to a callback function when complete.\n- [execFile](https://docs.deno.com/api/node/child_process/~/execFile): similar to [exec](https://docs.deno.com/api/node/child_process/~/exec) except that it spawns the command directly without first spawning a shell by default.\n- [fork](https://docs.deno.com/api/node/child_process/~/fork): spawns a new Node.js process and invokes a specified module with an IPC communication channel established that allows sending messages between parent and child.\n- [execSync](https://docs.deno.com/api/node/child_process/~/execSync): a synchronous version of [exec](https://docs.deno.com/api/node/child_process/~/exec) that will block the Node.js event loop.\n- [execFileSync](https://docs.deno.com/api/node/child_process/~/execFileSync): a synchronous version of [execFile](https://docs.deno.com/api/node/child_process/~/execFile) that will block the Node.js event loop.\n\nFor certain use cases, such as automating shell scripts, the `synchronous counterparts` may be more convenient. In many cases, however, the synchronous methods can have significant impact on performance due to stalling the event loop while spawned processes complete.\n\n## Classes\n### Classes [\\#](https://docs.deno.com/api/node/child_process/#Classes)\n\n[ChildProcess](https://docs.deno.com/api/node/child_process/~/ChildProcess \"ChildProcess\")\n\nInstances of the `ChildProcess` represent spawned child processes.\n\n- [addListener](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_addlistener_0)\n- [channel](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_channel)\n- [connected](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_connected)\n- [disconnect](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_disconnect_0)\n- [emit](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_emit_0)\n- [exitCode](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_exitcode)\n- [kill](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_kill_0)\n- [killed](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_killed)\n- [on](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_on_0)\n- [once](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_once_0)\n- [prependListener](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_prependoncelistener_0)\n- [ref](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_ref_0)\n- [send](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_send_0)\n- [signalCode](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_signalcode)\n- [spawnargs](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_spawnargs)\n- [spawnfile](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_spawnfile)\n- [stderr](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_stderr)\n- [stdin](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_stdin)\n- [stdio](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_stdio)\n- [stdout](https://docs.deno.com/api/node/child_process/~/ChildProcess#property_stdout)\n- [unref](https://docs.deno.com/api/node/child_process/~/ChildProcess#method_unref_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/child_process", "title": "Usage in Deno", "description": "This page covers the usage of the `node:child_process` module in Deno, detailing how to spawn subprocesses and manage their input/output.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:14:50", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogTitle": "child_process - Node documentation", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "ogLocale": "en_US", "title": "child_process - Node documentation", "twitter:title": "child_process - Node documentation", "og:title": "child_process - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "scrapeId": "a1fcbb11-c897-4916-b7e0-d99eec8c6b8d", "sourceURL": "https://docs.deno.com/api/node/child_process", "url": "https://docs.deno.com/api/node/child_process/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Basic Usage of spawn\n```yaml\nimport { spawn } from 'node:child_process';\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/child_process", "title": "Usage in Deno", "description": "This page covers the usage of the `node:child_process` module in Deno, detailing how to spawn subprocesses and manage their input/output.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:14:50", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogTitle": "child_process - Node documentation", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "ogLocale": "en_US", "title": "child_process - Node documentation", "twitter:title": "child_process - Node documentation", "og:title": "child_process - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "scrapeId": "a1fcbb11-c897-4916-b7e0-d99eec8c6b8d", "sourceURL": "https://docs.deno.com/api/node/child_process", "url": "https://docs.deno.com/api/node/child_process/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `{ stdio: 'ignore' }` option if the output will not be consumed.\n• Be cautious of environment variable case sensitivity on Windows.\n• Consider using synchronous methods for automation tasks, but be aware of their impact on performance.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/child_process", "title": "Usage in Deno", "description": "This page covers the usage of the `node:child_process` module in Deno, detailing how to spawn subprocesses and manage their input/output.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:14:50", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogTitle": "child_process - Node documentation", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "ogLocale": "en_US", "title": "child_process - Node documentation", "twitter:title": "child_process - Node documentation", "og:title": "child_process - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "scrapeId": "a1fcbb11-c897-4916-b7e0-d99eec8c6b8d", "sourceURL": "https://docs.deno.com/api/node/child_process", "url": "https://docs.deno.com/api/node/child_process/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the `node:trace_events` module in Deno, including how to enable tracing and the available categories for tracing.\n\nHere's a detailed explanation:\n\n\n## Deno compatibility\nAll exports are non-functional stubs.\n\nThe `node:trace_events` module provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code.\n\nTracing can be enabled with the `--trace-event-categories` command-line flag or by using the `trace_events` module. The `--trace-event-categories` flag accepts a list of comma-separated category names.\n\nThe available categories are:\n\n- `node`: An empty placeholder.\n- `node.async_hooks`: Enables capture of detailed [`async_hooks`](https://nodejs.org/docs/latest-v22.x/api/async_hooks.html) trace data. The [`async_hooks`](https://nodejs.org/docs/latest-v22.x/api/async_hooks.html) events have a unique `asyncId` and a special `triggerId` `triggerAsyncId` property.\n- `node.bootstrap`: Enables capture of Node.js bootstrap milestones.\n- `node.console`: Enables capture of `console.time()` and `console.count()` output.\n- `node.threadpoolwork.sync`: Enables capture of trace data for threadpool synchronous operations, such as `blob`, `zlib`, `crypto` and `node_api`.\n- `node.threadpoolwork.async`: Enables capture of trace data for threadpool asynchronous operations, such as `blob`, `zlib`, `crypto` and `node_api`.\n- `node.dns.native`: Enables capture of trace data for DNS queries.\n- `node.net.native`: Enables capture of trace data for network.\n- `node.environment`: Enables capture of Node.js Environment milestones.\n- `node.fs.sync`: Enables capture of trace data for file system sync methods.\n- `node.fs_dir.sync`: Enables capture of trace data for file system sync directory methods.\n- `node.fs.async`: Enables capture of trace data for file system async methods.\n- `node.fs_dir.async`: Enables capture of trace data for file system async directory methods.\n- `node.perf`: Enables capture of [Performance API](https://nodejs.org/docs/latest-v22.x/api/perf_hooks.html) measurements.\n  - `node.perf.usertiming`: Enables capture of only Performance API User Timing measures and marks.\n  - `node.perf.timerify`: Enables capture of only Performance API timerify measurements.\n- `node.promises.rejections`: Enables capture of trace data tracking the number of unhandled Promise rejections and handled-after-rejections.\n- `node.vm.script`: Enables capture of trace data for the `node:vm` module's `runInNewContext()`, `runInContext()`, and `runInThisContext()` methods.\n- `v8`: The [V8](https://nodejs.org/docs/latest-v22.x/api/v8.html) events are GC, compiling, and execution related.\n- `node.http`: Enables capture of trace data for http request / response.\n\nBy default the `node`, `node.async_hooks`, and `v8` categories are enabled.\n\n## Enabling Tracing\n```highlight notranslate bash\nnode --trace-event-categories v8,node,node.async_hooks server.js\n```\n\nPrior versions of Node.js required the use of the `--trace-events-enabled` flag to enable trace events. This requirement has been removed. However, the `--trace-events-enabled` flag _may_ still be used and will enable the `node`, `node.async_hooks`, and `v8` trace event categories by default.\n\n```highlight notranslate bash\nnode --trace-events-enabled\n\nnode --trace-event-categories v8,node,node.async_hooks\n```\n\n## Using the `node:trace_events` Module\nAlternatively, trace events may be enabled using the `node:trace_events` module:\n\n```highlight notranslate js\nimport trace_events from 'node:trace_events';\nconst tracing = trace_events.createTracing({ categories: ['node.perf'] });\ntracing.enable();  // Enable trace event capture for the 'node.perf' category\n\n// do work\n\ntracing.disable();  // Disable trace event capture for the 'node.perf' category\n```\n\n## Log File Generation\nRunning Node.js with tracing enabled will produce log files that can be opened in the [`chrome://tracing`](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) tab of Chrome.\n\nThe logging file is by default called `node_trace.${rotation}.log`, where `${rotation}` is an incrementing log-rotation id. The filepath pattern can be specified with `--trace-event-file-pattern` that accepts a template string that supports `${rotation}` and `${pid}`:\n\n```highlight notranslate bash\nnode --trace-event-categories v8 --trace-event-file-pattern '${pid}-${rotation}.log' server.js\n```\n\n## Signal Handling\nTo guarantee that the log file is properly generated after signal events like `SIGINT`, `SIGTERM`, or `SIGBREAK`, make sure to have the appropriate handlers in your code, such as:\n\n```highlight notranslate js\nprocess.on('SIGINT', function onSigint() {\n  console.info('Received SIGINT.');\n  process.exit(130);  // Or applicable exit code depending on OS and signal\n});\n```\n\n## Timestamp Information\nThe tracing system uses the same time source as the one used by `process.hrtime()`. However the trace-event timestamps are expressed in microseconds, unlike `process.hrtime()` which returns nanoseconds.\n\nThe features from this module are not available in [`Worker`](https://nodejs.org/docs/latest-v22.x/api/worker_threads.html#class-worker) threads.\n\n## Functions\nf\n\n[createTracing](https://docs.deno.com/api/node/trace_events/~/createTracing \"createTracing\")\n\nNo documentation available\n\nf\n\n[getEnabledCategories](https://docs.deno.com/api/node/trace_events/~/getEnabledCategories \"getEnabledCategories\")\n\nNo documentation available\n\n## Interfaces\nI\n\n[CreateTracingOptions](https://docs.deno.com/api/node/trace_events/~/CreateTracingOptions \"CreateTracingOptions\")\n\nNo documentation available\n\n- [categories](https://docs.deno.com/api/node/trace_events/~/CreateTracingOptions#property_categories)\n\nI\n\n[Tracing](https://docs.deno.com/api/node/trace_events/~/Tracing \"Tracing\")\n\nNo documentation available\n\n- [categories](https://docs.deno.com/api/node/trace_events/~/Tracing#property_categories)\n- [disable](https://docs.deno.com/api/node/trace_events/~/Tracing#method_disable_0)\n- [enable](https://docs.deno.com/api/node/trace_events/~/Tracing#method_enable_0)\n- [enabled](https://docs.deno.com/api/node/trace_events/~/Tracing#property_enabled)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/trace_events", "title": "Usage in Deno", "description": "This page covers the usage of the `node:trace_events` module in Deno, including how to enable tracing and the available categories for tracing.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 00:15:38", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:title": "trace_events - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:title": "trace_events - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "trace_events - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "ogTitle": "trace_events - Node documentation", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "scrapeId": "9471e0ae-7f30-4bdf-bc96-776f9db2fa6b", "sourceURL": "https://docs.deno.com/api/node/trace_events", "url": "https://docs.deno.com/api/node/trace_events/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the Module\n```yaml\nimport * as mod from \"node:trace_events\";\n```\n\n### Enabling Tracing via Command Line\n```yaml\nnode --trace-event-categories v8,node,node.async_hooks server.js\n```\n\n### Enabling Tracing with the Module\n```yaml\nimport trace_events from 'node:trace_events';\nconst tracing = trace_events.createTracing({ categories: ['node.perf'] });\ntracing.enable();  // Enable trace event capture for the 'node.perf' category\n// do work\ntracing.disable();  // Disable trace event capture for the 'node.perf' category\n```\n\n### Log File Pattern\n```yaml\nnode --trace-event-categories v8 --trace-event-file-pattern '${pid}-${rotation}.log' server.js\n```\n\n### Signal Handling Example\n```yaml\nprocess.on('SIGINT', function onSigint() {\n  console.info('Received SIGINT.');\n  process.exit(130);  // Or applicable exit code depending on OS and signal\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/trace_events", "title": "Usage in Deno", "description": "This page covers the usage of the `node:trace_events` module in Deno, including how to enable tracing and the available categories for tracing.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 00:15:38", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:title": "trace_events - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:title": "trace_events - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "trace_events - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "ogTitle": "trace_events - Node documentation", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "scrapeId": "9471e0ae-7f30-4bdf-bc96-776f9db2fa6b", "sourceURL": "https://docs.deno.com/api/node/trace_events", "url": "https://docs.deno.com/api/node/trace_events/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to handle signal events like SIGINT, SIGTERM, or SIGBREAK to properly generate log files.\n• Use the appropriate categories for tracing to capture the necessary data.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/trace_events", "title": "Usage in Deno", "description": "This page covers the usage of the `node:trace_events` module in Deno, including how to enable tracing and the available categories for tracing.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 00:15:38", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:title": "trace_events - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:title": "trace_events - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "trace_events - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "ogTitle": "trace_events - Node documentation", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "scrapeId": "9471e0ae-7f30-4bdf-bc96-776f9db2fa6b", "sourceURL": "https://docs.deno.com/api/node/trace_events", "url": "https://docs.deno.com/api/node/trace_events/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Linting and formatting\"?\n\nAssistant: This page covers Deno's built-in linting and formatting tools, explaining how to use them effectively to maintain clean and consistent code.\n\nHere's a detailed explanation:\n\n\n## Linting\nLinting is the process of analyzing your code for potential errors, bugs, and stylistic issues. Deno’s built-in linter, [`deno lint`](https://docs.deno.com/runtime/reference/cli/linter/), supports recommended set of rules from [ESLint](https://eslint.org/) to provide comprehensive feedback on your code. This includes identifying syntax errors, enforcing coding conventions, and highlighting potential issues that could lead to bugs.\n\nTo run the linter, use the following command in your terminal:\n\n```highlight notranslate bash\ndeno lint\n```\n\nBy default, `deno lint` analyzes all TypeScript and JavaScript files in the current directory and its subdirectories. If you want to lint specific files or directories, you can pass them as arguments to the command. For example:\n\n```highlight notranslate bash\ndeno lint src/\n```\n\nThis command will lint all files in the `src/` directory.\n\nThe linter can be configured in a [`deno.json`](https://docs.deno.com/runtime/fundamentals/configuration/) file. You can specify custom rules, plugins, and settings to tailor the linting process to your needs.\n\n## Linting rules\nYou can view and search the list of available rules and their usage on the [List of rules](https://docs.deno.com/lint/) documentation page.\n\n## Formatting\nFormatting is the process of automatically adjusting the layout of your code to adhere to a consistent style. Deno’s built-in formatter, `deno fmt`, uses the powerful [dprint](https://dprint.dev/) engine to ensure that your code is always clean, readable, and consistent.\n\nTo format your code, simply execute the following command in your terminal:\n\n```highlight notranslate bash\ndeno fmt\n```\n\nBy default, `deno fmt` formats all TypeScript and JavaScript files in the current directory and its subdirectories. If you want to format specific files or directories, you can pass them as arguments to the command. For example:\n\n```highlight notranslate bash\ndeno fmt src/\n```\n\nThis command will format all files in the `src/` directory.\n\n## Checking your formatting\nThe `deno fmt --check` command is used to verify if your code is properly formatted according to Deno’s default formatting rules. Instead of modifying the files, it checks them and reports any formatting issues. This is particularly useful for integrating into continuous integration (CI) pipelines or pre-commit hooks to ensure code consistency across your project.\n\nIf there are formatting issues, `deno fmt --check` will list the files that need formatting. If all files are correctly formatted, it will simply exit without any output.\n\n## Integration in CI\nYou can add `deno fmt --check` to your CI pipeline to automatically check for formatting issues. For example, in a GitHub Actions workflow:\n\n```highlight notranslate yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v2\n        with:\n          deno-version: v2.x\n      - run: deno fmt --check\n```\n\nThis ensures that any code changes adhere to the project’s formatting standards before being merged.\n\n## Available options\n| Rule | Description | Default | possible values |\n| --- | --- | --- | --- |\n| indent-width | Define indentation width | **2** | number |\n| line-width | Define maximum line width | **80** | number |\n| no-semicolons | Don't use semicolons except where necessary | **false** | true, false |\n| prose-wrap | Define how prose should be wrapped | **always** | always, never, preserve |\n| single-quote | Use single quotes | **false** | true, false |\n| unstable-component | Enable formatting Svelte, Vue, Astro and Angular files |  |  |\n| unstable-sql | Enable formatting SQL files |  |  |\n| use-tabs | Use tabs instead of spaces for indentation | **false** | true, false |\n\nThe formatter can be configured in a [`deno.json`](https://docs.deno.com/runtime/fundamentals/configuration/#formatting) file. You can specify custom settings to tailor the formatting process to your needs.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/linting_and_formatting", "title": "Linting and formatting", "description": "This page covers Deno's built-in linting and formatting tools, explaining how to use them effectively to maintain clean and consistent code.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:16:01", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "ogTitle": "Linting and formatting", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Linting and formatting", "twitter:image": "/img/og.webp", "og:title": "Linting and formatting", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "twitter:site": "@deno_land", "title": "Linting and formatting", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "ab922f1e-7dcb-4a83-98b0-35c5805c7070", "sourceURL": "https://docs.deno.com/runtime/fundamentals/linting_and_formatting", "url": "https://docs.deno.com/runtime/fundamentals/linting_and_formatting/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Linting and formatting\"?\n\nAssistant: Here are some code examples:\n\n### Run the linter\n```yaml\ndeno lint\n```\n\n### Lint specific directory\n```yaml\ndeno lint src/\n```\n\n### Format the code\n```yaml\ndeno fmt\n```\n\n### Format specific directory\n```yaml\ndeno fmt src/\n```\n\n### Check formatting\n```yaml\ndeno fmt --check\n```\n\n### CI integration example\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v2\n        with:\n          deno-version: v2.x\n      - run: deno fmt --check\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/linting_and_formatting", "title": "Linting and formatting", "description": "This page covers Deno's built-in linting and formatting tools, explaining how to use them effectively to maintain clean and consistent code.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:16:01", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "ogTitle": "Linting and formatting", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Linting and formatting", "twitter:image": "/img/og.webp", "og:title": "Linting and formatting", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "twitter:site": "@deno_land", "title": "Linting and formatting", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "ab922f1e-7dcb-4a83-98b0-35c5805c7070", "sourceURL": "https://docs.deno.com/runtime/fundamentals/linting_and_formatting", "url": "https://docs.deno.com/runtime/fundamentals/linting_and_formatting/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Linting and formatting\"?\n\nAssistant: Here are the recommended best practices:\n\n• Integrate `deno fmt --check` into CI pipelines to ensure code consistency.\n• Use a `deno.json` file to configure custom linting and formatting rules.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/linting_and_formatting", "title": "Linting and formatting", "description": "This page covers Deno's built-in linting and formatting tools, explaining how to use them effectively to maintain clean and consistent code.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:16:01", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "ogTitle": "Linting and formatting", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Linting and formatting", "twitter:image": "/img/og.webp", "og:title": "Linting and formatting", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "twitter:site": "@deno_land", "title": "Linting and formatting", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "ab922f1e-7dcb-4a83-98b0-35c5805c7070", "sourceURL": "https://docs.deno.com/runtime/fundamentals/linting_and_formatting", "url": "https://docs.deno.com/runtime/fundamentals/linting_and_formatting/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: The `node:console` module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `node:console` module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\n- A `Console` class with methods such as `console.log()`, `console.error()`, and `console.warn()` that can be used to write to any Node.js stream.\n- A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) and [`process.stderr`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n\n_**Warning**_: The global console object's methods are neither consistently synchronous like the browser APIs they resemble, nor are they consistently asynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v22.x/api/process.html#a-note-on-process-io) for more information.\n\n## Example using the global console\n```javascript\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n\n## Example using the Console class\n```javascript\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```\n\n## Interfaces\n### Interfaces\n\n- [Console](https://docs.deno.com/api/node/console/~/Console \"Console\")\n  - No documentation available\n  - [Console](https://docs.deno.com/api/node/console/~/Console#property_console)\n  - [assert](https://docs.deno.com/api/node/console/~/Console#method_assert_0)\n  - [clear](https://docs.deno.com/api/node/console/~/Console#method_clear_0)\n  - [count](https://docs.deno.com/api/node/console/~/Console#method_count_0)\n  - [countReset](https://docs.deno.com/api/node/console/~/Console#method_countreset_0)\n  - [debug](https://docs.deno.com/api/node/console/~/Console#method_debug_0)\n  - [dir](https://docs.deno.com/api/node/console/~/Console#method_dir_0)\n  - [dirxml](https://docs.deno.com/api/node/console/~/Console#method_dirxml_0)\n  - [error](https://docs.deno.com/api/node/console/~/Console#method_error_0)\n  - [group](https://docs.deno.com/api/node/console/~/Console#method_group_0)\n  - [groupCollapsed](https://docs.deno.com/api/node/console/~/Console#method_groupcollapsed_0)\n  - [groupEnd](https://docs.deno.com/api/node/console/~/Console#method_groupend_0)\n  - [info](https://docs.deno.com/api/node/console/~/Console#method_info_0)\n  - [log](https://docs.deno.com/api/node/console/~/Console#method_log_0)\n  - [profile](https://docs.deno.com/api/node/console/~/Console#method_profile_0)\n  - [profileEnd](https://docs.deno.com/api/node/console/~/Console#method_profileend_0)\n  - [table](https://docs.deno.com/api/node/console/~/Console#method_table_0)\n  - [time](https://docs.deno.com/api/node/console/~/Console#method_time_0)\n  - [timeEnd](https://docs.deno.com/api/node/console/~/Console#method_timeend_0)\n  - [timeLog](https://docs.deno.com/api/node/console/~/Console#method_timelog_0)\n  - [timeStamp](https://docs.deno.com/api/node/console/~/Console#method_timestamp_0)\n  - [trace](https://docs.deno.com/api/node/console/~/Console#method_trace_0)\n  - [warn](https://docs.deno.com/api/node/console/~/Console#method_warn_0)\n\n- [console.ConsoleConstructor](https://docs.deno.com/api/node/console/~/console.ConsoleConstructor \"console.ConsoleConstructor\")\n  - No documentation available\n  - [prototype](https://docs.deno.com/api/node/console/~/console.ConsoleConstructor#property_prototype)\n\n- [console.ConsoleConstructorOptions](https://docs.deno.com/api/node/console/~/console.ConsoleConstructorOptions \"console.ConsoleConstructorOptions\")\n  - No documentation available\n  - [colorMode](https://docs.deno.com/api/node/console/~/console.ConsoleConstructorOptions#property_colormode)\n  - [groupIndentation](https://docs.deno.com/api/node/console/~/console.ConsoleConstructorOptions#property_groupindentation)\n  - [ignoreErrors](https://docs.deno.com/api/node/console/~/console.ConsoleConstructorOptions#property_ignoreerrors)\n  - [inspectOptions](https://docs.deno.com/api/node/console/~/console.ConsoleConstructorOptions#property_inspectoptions)\n  - [stderr](https://docs.deno.com/api/node/console/~/console.ConsoleConstructorOptions#property_stderr)\n  - [stdout](https://docs.deno.com/api/node/console/~/console.ConsoleConstructorOptions#property_stdout)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/console", "title": "Usage in Deno", "description": "The `node:console` module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:16:27", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "ogSiteName": "Deno", "ogLocale": "en_US", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "console - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogImage": "/img/og.webp", "ogTitle": "console - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "console - Node documentation", "title": "console - Node documentation", "scrapeId": "3567a2a0-c923-4b58-b27f-4148b1c25401", "sourceURL": "https://docs.deno.com/api/node/console", "url": "https://docs.deno.com/api/node/console/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Example using the global console\n```yaml\n```javascript\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n```\n\n### Example using the Console class\n```yaml\n```javascript\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/console", "title": "Usage in Deno", "description": "The `node:console` module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:16:27", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "ogSiteName": "Deno", "ogLocale": "en_US", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "console - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogImage": "/img/og.webp", "ogTitle": "console - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "console - Node documentation", "title": "console - Node documentation", "scrapeId": "3567a2a0-c923-4b58-b27f-4148b1c25401", "sourceURL": "https://docs.deno.com/api/node/console", "url": "https://docs.deno.com/api/node/console/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• The global console object's methods are neither consistently synchronous like the browser APIs they resemble, nor are they consistently asynchronous like all other Node.js streams.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/console", "title": "Usage in Deno", "description": "The `node:console` module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:16:27", "type": "best_practices", "page_metadata": {"twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "ogSiteName": "Deno", "ogLocale": "en_US", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "console - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogImage": "/img/og.webp", "ogTitle": "console - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "console - Node documentation", "title": "console - Node documentation", "scrapeId": "3567a2a0-c923-4b58-b27f-4148b1c25401", "sourceURL": "https://docs.deno.com/api/node/console", "url": "https://docs.deno.com/api/node/console/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno KV Tutorials & Examples\"?\n\nAssistant: Check out these examples showing real-world usage of Deno KV.\n\nHere's a detailed explanation:\n\n\n## Use queues to process incoming webhooks\nFollow [this tutorial](https://docs.deno.com/deploy/kv/tutorials/webhook_processor/) to learn how to use queues to offload tasks to a background process, so your web app can remain responsive. This example shows how to enqueue tasks that handle incoming webhook requests from [GitHub](https://www.github.com/).\n\n## Use queues to schedule a future notification\nFollow [this tutorial](https://docs.deno.com/deploy/kv/tutorials/schedule_notification/) to learn how to schedule code to execute at some time in the future using queues. This example shows how to schedule a notification with [Courier](https://www.courier.com/).\n\n## CRUD in Deno KV - TODO List\n- Zod schema validation\n- Built using Fresh\n- Real-time collaboration using BroadcastChannel\n- [Source code](https://github.com/denoland/showcase_todo)\n- [Live preview](https://showcase-todo.deno.dev/)\n\n## Deno SaaSKit\n- Modern SaaS template built on Fresh.\n- [Product Hunt](https://www.producthunt.com/)-like template entirely built on KV.\n- Uses Deno KV OAuth for GitHub OAuth 2.0 authentication\n- Use to launch your next app project faster\n- [Source code](https://github.com/denoland/saaskit)\n- [Live preview](https://hunt.deno.land/)\n\n## Multi-player Tic-Tac-Toe\n- GitHub authentication\n- Saved user state\n- Real-time sync using BroadcastChannel\n- [Source code](https://github.com/denoland/tic-tac-toe)\n- [Live preview](https://tic-tac-toe-game.deno.dev/)\n\n## Multi-user pixel art drawing\n- Persistent canvas state\n- Multi-user collaboration\n- Real-time sync using BroadcastChannel\n- [Source code](https://github.com/denoland/pixelpage)\n- [Live preview](https://pixelpage.deno.dev/)\n\n## GitHub authentication and KV\n- Stores drawings in KV\n- GitHub authentication\n- [Source code](https://github.com/hashrock/kv-sketchbook)\n- [Live preview](https://hashrock-kv-sketchbook.deno.dev/)\n\n## Deno KV oAuth 2\n- High-level OAuth 2.0 powered by Deno KV\n- [Source code](https://github.com/denoland/deno_kv_oauth)\n- [Live preview](https://kv-oauth.deno.dev/)\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/tutorials", "title": "Deno KV Tutorials & Examples", "description": "Check out these examples showing real-world usage of Deno KV.", "has_code_examples": false, "has_best_practices": false, "section_count": 8, "timestamp": "2025-02-28 00:20:28", "type": "overview", "page_metadata": {"ogTitle": "Deno KV Tutorials & Examples", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "title": "Deno KV Tutorials & Examples", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "twitter:title": "Deno KV Tutorials & Examples", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Deno KV Tutorials & Examples", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "scrapeId": "72f49806-9929-4652-af0d-af9b661441d6", "sourceURL": "https://docs.deno.com/deploy/kv/tutorials", "url": "https://docs.deno.com/deploy/kv/tutorials/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: The `node:assert` module provides a set of assertion functions for verifying invariants.\n\nHere's a detailed explanation:\n\n\n## Classes\n### Classes\n\n#### [assert.AssertionError](https://docs.deno.com/api/node/assert/~/assert.AssertionError \"assert.AssertionError\")\nIndicates the failure of an assertion. All errors thrown by the `node:assert` module will be instances of the `AssertionError` class.\n\n- [actual](https://docs.deno.com/api/node/assert/~/assert.AssertionError#property_actual)\n- [code](https://docs.deno.com/api/node/assert/~/assert.AssertionError#property_code)\n- [expected](https://docs.deno.com/api/node/assert/~/assert.AssertionError#property_expected)\n- [generatedMessage](https://docs.deno.com/api/node/assert/~/assert.AssertionError#property_generatedmessage)\n- [operator](https://docs.deno.com/api/node/assert/~/assert.AssertionError#property_operator)\n\n#### [assert.CallTracker](https://docs.deno.com/api/node/assert/~/assert.CallTracker \"assert.CallTracker\")\nThis feature is deprecated and will be removed in a future version.\nPlease consider using alternatives such as the `mock` helper function.\n\n- [calls](https://docs.deno.com/api/node/assert/~/assert.CallTracker#method_calls_0)\n- [getCalls](https://docs.deno.com/api/node/assert/~/assert.CallTracker#method_getcalls_0)\n- [report](https://docs.deno.com/api/node/assert/~/assert.CallTracker#method_report_0)\n- [reset](https://docs.deno.com/api/node/assert/~/assert.CallTracker#method_reset_0)\n- [verify](https://docs.deno.com/api/node/assert/~/assert.CallTracker#method_verify_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/assert", "title": "Usage in Deno", "description": "The `node:assert` module provides a set of assertion functions for verifying invariants.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:24:01", "type": "overview", "page_metadata": {"og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "title": "assert - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:title": "assert - Node documentation", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "assert - Node documentation", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "assert - Node documentation", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "og:type": "article", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "scrapeId": "8dddd278-3058-4fcb-88f4-d143e1a14cb0", "sourceURL": "https://docs.deno.com/api/node/assert", "url": "https://docs.deno.com/api/node/assert/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Usage in Deno\n```yaml\nimport * as mod from \"node:assert\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/assert", "title": "Usage in Deno", "description": "The `node:assert` module provides a set of assertion functions for verifying invariants.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:24:01", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "title": "assert - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:title": "assert - Node documentation", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "assert - Node documentation", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "assert - Node documentation", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "og:type": "article", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "scrapeId": "8dddd278-3058-4fcb-88f4-d143e1a14cb0", "sourceURL": "https://docs.deno.com/api/node/assert", "url": "https://docs.deno.com/api/node/assert/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Consider using alternatives to `assert.CallTracker` as it is deprecated.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/assert", "title": "Usage in Deno", "description": "The `node:assert` module provides a set of assertion functions for verifying invariants.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:24:01", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "title": "assert - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:title": "assert - Node documentation", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "assert - Node documentation", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "assert - Node documentation", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "og:type": "article", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "scrapeId": "8dddd278-3058-4fcb-88f4-d143e1a14cb0", "sourceURL": "https://docs.deno.com/api/node/assert", "url": "https://docs.deno.com/api/node/assert/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Web development\"?\n\nAssistant: Deno offers a secure and developer-friendly environment for building web applications, making your web dev a delightful experience.\n\nHere's a detailed explanation:\n\n\n## Web development\nDeno offers a secure and developer-friendly environment for building web applications, making your web dev a delightful experience.\n\n1. Deno has [secure defaults](https://docs.deno.com/runtime/fundamentals/security/), meaning it requires explicit permission for file, network, and environment access, reducing the risk of security vulnerabilities.\n2. Deno has [built-in TypeScript support](https://docs.deno.com/runtime/fundamentals/typescript/), allowing you to write TypeScript code without additional configuration or tooling.\n3. Deno comes with a [standard library](https://docs.deno.com/runtime/fundamentals/standard_library/) that includes modules for common tasks like HTTP servers, file system operations, and more.\n\nMost likely, if you're building a more complex application, you'll be interacting with Deno through a web framework.\n\n## React/Next\n[React](https://reactjs.org/) is a popular JavaScript library for building user interfaces. To use React with Deno, you can use the popular web framework [Next.js](https://nextjs.org/).\n\nTo get started with Next.js in Deno, you can create a new next app and run it immediately with Deno:\n\n```highlight notranslate sh\ndeno run -A npm:create-next-app@latest my-next-app\ncd my-next-app\ndeno task dev\n```\n\nThis will create a new Next.js app with TypeScript and run it with Deno. You can then open your browser to `http://localhost:3000` to see your new app, and start editing `page.tsx` to see your changes live.\n\nTo better understand how JSX and Deno interface under the hood, read on [here](https://docs.deno.com/runtime/reference/jsx/).\n\n## Fresh\n[Fresh](https://fresh.deno.dev/) is the most popular web framework for Deno. It uses a model where you send no JavaScript to clients by default.\n\nTo get started with a Fresh app, you can use the following command and follow the cli prompts to create your app:\n\n```highlight notranslate sh\ndeno run -A -r https://fresh.deno.dev\ncd my-fresh-app\ndeno task start\n```\n\nThis will create a new Fresh app and run it with Deno. You can then open your browser to `http://localhost:8000` to see your new app. Edit `/routes/index.tsx` to see your changes live.\n\nFresh does the majority of its rendering on the server, and the client is only responsible for re-rendering small [islands of interactivity](https://jasonformat.com/islands-architecture/). This means the developer explicitly opts in to client side rendering for specific components.\n\n## Astro\n[Astro](https://astro.build/) is a static site generator that allows developers to create fast and lightweight websites.\n\nTo get started with Astro, you can use the following command to create a new Astro site:\n\n```highlight notranslate sh\ndeno run -A npm:create-astro my-astro-site\ncd my-astro-site\ndeno task dev\n```\n\nThis will create a new Astro site and run it with Deno. You can then open your browser to `http://localhost:4321` to see your new site. Edit `/src/pages/index.astro` to see your changes live.\n\n## Vite\n[Vite](https://vitejs.dev/) is a web dev build tool that serves your code via native ES modules, which can be run directly in the browser. Vite is a great choice for building modern web applications with Deno.\n\nTo get started with Vite, you can use the following command to create a new Vite app:\n\n```highlight notranslate sh\ndeno run -A npm:create-vite@latest\ncd my-vite-app\ndeno install\ndeno task dev\n```\n\n## Lume\n[Lume](https://lume.land/) is a static site generator for Deno that is inspired by other static site generators such Jekyll or Eleventy.\n\nTo get started with Lume, you can use the following command to create a new Lume site:\n\n```highlight notranslate sh\nmkdir my-lume-site\ncd my-lume-site\ndeno run -A https://lume.land/init.ts\ndeno task serve\n```\n\n## Docusaurus\n[Docusaurus](https://docusaurus.io/) is a static site generator that is optimized for technical documentation websites.\n\nTo get started with Docusaurus, you can use the following command to create a new Docusaurus site:\n\n```highlight notranslate sh\ndeno run -A npm:create-docusaurus@latest my-website classic\ncd my-website\ndeno task start\n```\n\n## Hono\n[Hono](https://hono.dev/) is a light-weight web app framework in the tradition of Express and Sinatra.\n\nTo get started with Hono, you can use the following command to create a new Hono app:\n\n```highlight notranslate sh\ndeno run -A npm:create-hono@latest\ncd my-hono-app\ndeno task start\n```\n\nThis will create a new Hono app and run it with Deno. You can then open your browser to `http://localhost:8000` to see your new app.\n\n## Oak\n[Oak](https://jsr.io/@oak/oak) is a middleware framework for handling HTTP with Deno. Oak is the glue between your frontend application and a potential database or other data sources (e.g. REST APIs, GraphQL APIs).\n\nOak offers additional functionality over the native Deno HTTP server, including a basic router, JSON parser, middlewares, plugins, etc.\n\nTo get started with Oak, make a file called `server.ts` and add the following:\n\n```highlight notranslate ts\nimport { Application } from \"jsr:@oak/oak/application\";\nimport { Router } from \"jsr:@oak/oak/router\";\n\nconst router = new Router();\nrouter.get(\"/\", (ctx) => {\n  ctx.response.body = `<!DOCTYPE html>\n    <html>\n      <head><title>Hello oak!</title><head>\n      <body>\n        <h1>Hello oak!</h1>\n      </body>\n    </html>\n  `;\n});\n\nconst app = new Application();\nconst port = 8080;\n\napp.use(router.routes());\napp.use(router.allowedMethods());\nconsole.log(`Server running on http://localhost:${port}`);\n\napp.listen({ port: port });\n```\n\nRun the server with the following command:\n\n```highlight notranslate sh\ndeno run --allow-net server.ts\n```\n\n## Node projects\nDeno will run your Node.js projects out the box. Check out our guide on [migrating your Node.js project to Deno](https://docs.deno.com/runtime/fundamentals/node/#migrating-from-node.js-to-deno).\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/web_dev", "title": "Web development", "description": "Deno offers a secure and developer-friendly environment for building web applications, making your web dev a delightful experience.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:25:01", "type": "overview", "page_metadata": {"language": "en", "ogTitle": "Web development", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "title": "Web development", "og:type": "article", "ogLocale": "en_US", "twitter:title": "Web development", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Web development", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "e3fbbb27-9b5b-40d8-b22f-8d73836b773a", "sourceURL": "https://docs.deno.com/runtime/fundamentals/web_dev", "url": "https://docs.deno.com/runtime/fundamentals/web_dev/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Web development\"?\n\nAssistant: Here are some code examples:\n\n### Next.js with Deno\n```yaml\ndeno run -A npm:create-next-app@latest my-next-app\ncd my-next-app\ndeno task dev\n```\n\n### Fresh app with Deno\n```yaml\ndeno run -A -r https://fresh.deno.dev\ncd my-fresh-app\ndeno task start\n```\n\n### Astro site with Deno\n```yaml\ndeno run -A npm:create-astro my-astro-site\ncd my-astro-site\ndeno task dev\n```\n\n### Vite app with Deno\n```yaml\ndeno run -A npm:create-vite@latest\ncd my-vite-app\ndeno install\ndeno task dev\n```\n\n### Lume site with Deno\n```yaml\nmkdir my-lume-site\ncd my-lume-site\ndeno run -A https://lume.land/init.ts\ndeno task serve\n```\n\n### Docusaurus site with Deno\n```yaml\ndeno run -A npm:create-docusaurus@latest my-website classic\ncd my-website\ndeno task start\n```\n\n### Hono app with Deno\n```yaml\ndeno run -A npm:create-hono@latest\ncd my-hono-app\ndeno task start\n```\n\n### Oak server with Deno\n```yaml\nimport { Application } from \"jsr:@oak/oak/application\";\nimport { Router } from \"jsr:@oak/oak/router\";\n\nconst router = new Router();\nrouter.get(\"/\", (ctx) => {\n  ctx.response.body = `<!DOCTYPE html>\n    <html>\n      <head><title>Hello oak!</title><head>\n      <body>\n        <h1>Hello oak!</h1>\n      </body>\n    </html>\n  `;\n});\n\nconst app = new Application();\nconst port = 8080;\n\napp.use(router.routes());\napp.use(router.allowedMethods());\nconsole.log(`Server running on http://localhost:${port}`);\n\napp.listen({ port: port });\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/web_dev", "title": "Web development", "description": "Deno offers a secure and developer-friendly environment for building web applications, making your web dev a delightful experience.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:25:01", "type": "code_examples", "page_metadata": {"language": "en", "ogTitle": "Web development", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "title": "Web development", "og:type": "article", "ogLocale": "en_US", "twitter:title": "Web development", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Web development", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "e3fbbb27-9b5b-40d8-b22f-8d73836b773a", "sourceURL": "https://docs.deno.com/runtime/fundamentals/web_dev", "url": "https://docs.deno.com/runtime/fundamentals/web_dev/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Web development\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno has secure defaults, requiring explicit permission for file, network, and environment access.\n• Deno has built-in TypeScript support, allowing you to write TypeScript code without additional configuration or tooling.\n• Deno comes with a standard library that includes modules for common tasks like HTTP servers, file system operations, and more.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/web_dev", "title": "Web development", "description": "Deno offers a secure and developer-friendly environment for building web applications, making your web dev a delightful experience.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:25:01", "type": "best_practices", "page_metadata": {"language": "en", "ogTitle": "Web development", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "title": "Web development", "og:type": "article", "ogLocale": "en_US", "twitter:title": "Web development", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Web development", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "e3fbbb27-9b5b-40d8-b22f-8d73836b773a", "sourceURL": "https://docs.deno.com/runtime/fundamentals/web_dev", "url": "https://docs.deno.com/runtime/fundamentals/web_dev/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the cluster module in Deno, including code examples and class/interface documentation.\n\nHere's a detailed explanation:\n\n\n## Deno compatibility\nAll exports are non-functional stubs.\n\nClusters of Node.js processes can be used to run multiple instances of Node.js that can distribute workloads among their application threads. When process isolation is not needed, use the [`worker_threads`](https://nodejs.org/docs/latest-v22.x/api/worker_threads.html) module instead, which allows running multiple application threads within a single Node.js instance.\n\nThe cluster module allows easy creation of child processes that all share server ports.\n\n## Code Example\n```typescript\nimport * as mod from \"node:cluster\";\n```\n\n## Running Node.js\nRunning Node.js will now share port 8000 between the workers:\n\n```console\n$ node server.js\nPrimary 3596 is running\nWorker 4324 started\nWorker 4520 started\nWorker 6056 started\nWorker 5644 started\n```\n\n## Classes\n### Classes\n\n- [Worker](https://docs.deno.com/api/node/cluster/~/Worker \"Worker\")\n\nNo documentation available\n\n- [addListener](https://docs.deno.com/api/node/cluster/~/Worker#method_addlistener_0)\n- [destroy](https://docs.deno.com/api/node/cluster/~/Worker#method_destroy_0)\n- [disconnect](https://docs.deno.com/api/node/cluster/~/Worker#method_disconnect_0)\n- [emit](https://docs.deno.com/api/node/cluster/~/Worker#method_emit_0)\n- [exitedAfterDisconnect](https://docs.deno.com/api/node/cluster/~/Worker#property_exitedafterdisconnect)\n- [id](https://docs.deno.com/api/node/cluster/~/Worker#property_id)\n- [isConnected](https://docs.deno.com/api/node/cluster/~/Worker#method_isconnected_0)\n- [isDead](https://docs.deno.com/api/node/cluster/~/Worker#method_isdead_0)\n- [kill](https://docs.deno.com/api/node/cluster/~/Worker#method_kill_0)\n- [on](https://docs.deno.com/api/node/cluster/~/Worker#method_on_0)\n- [once](https://docs.deno.com/api/node/cluster/~/Worker#method_once_0)\n- [prependListener](https://docs.deno.com/api/node/cluster/~/Worker#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/cluster/~/Worker#method_prependoncelistener_0)\n- [process](https://docs.deno.com/api/node/cluster/~/Worker#property_process)\n- [send](https://docs.deno.com/api/node/cluster/~/Worker#method_send_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/cluster", "title": "Usage in Deno", "description": "This page covers the usage of the cluster module in Deno, including code examples and class/interface documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:25:29", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "cluster - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:title": "cluster - Node documentation", "og:title": "cluster - Node documentation", "og:type": "article", "og:site_name": "Deno", "twitter:card": "summary_large_image", "title": "cluster - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "og:image": "/img/og.webp", "scrapeId": "a4e2b202-b3fb-4881-bfcd-808af49740af", "sourceURL": "https://docs.deno.com/api/node/cluster", "url": "https://docs.deno.com/api/node/cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Basic Cluster Example\n```yaml\n```javascript\nimport cluster from 'node:cluster';\nimport http from 'node:http';\nimport { availableParallelism } from 'node:os';\nimport process from 'node:process';\n\nconst numCPUs = availableParallelism();\n\nif (cluster.isPrimary) {\n  console.log(`Primary ${process.pid} is running`);\n\n  // Fork workers.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('hello world\\n');\n  }).listen(8000);\n\n  console.log(`Worker ${process.pid} started`);\n}\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/cluster", "title": "Usage in Deno", "description": "This page covers the usage of the cluster module in Deno, including code examples and class/interface documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:25:29", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "cluster - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:title": "cluster - Node documentation", "og:title": "cluster - Node documentation", "og:type": "article", "og:site_name": "Deno", "twitter:card": "summary_large_image", "title": "cluster - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "og:image": "/img/og.webp", "scrapeId": "a4e2b202-b3fb-4881-bfcd-808af49740af", "sourceURL": "https://docs.deno.com/api/node/cluster", "url": "https://docs.deno.com/api/node/cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• On Windows, it is not yet possible to set up a named pipe server in a worker.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/cluster", "title": "Usage in Deno", "description": "This page covers the usage of the cluster module in Deno, including code examples and class/interface documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:25:29", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "cluster - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:title": "cluster - Node documentation", "og:title": "cluster - Node documentation", "og:type": "article", "og:site_name": "Deno", "twitter:card": "summary_large_image", "title": "cluster - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "og:image": "/img/og.webp", "scrapeId": "a4e2b202-b3fb-4881-bfcd-808af49740af", "sourceURL": "https://docs.deno.com/api/node/cluster", "url": "https://docs.deno.com/api/node/cluster/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the `node:zlib` module in Deno for compression and decompression functionality.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\nThe `node:zlib` module provides compression functionality implemented using Gzip, Deflate/Inflate, and Brotli.\n\nTo access it:\n\n```highlight notranslate js\nimport zlib from 'node:zlib';\n```\n\nCompression and decompression are built around the Node.js [Streams API](https://nodejs.org/docs/latest-v22.x/api/stream.html).\n\nCompressing or decompressing a stream (such as a file) can be accomplished by piping the source stream through a `zlib` `Transform` stream into a destination stream:\n\n```highlight notranslate js\nimport { createGzip } from 'node:zlib';\nimport { pipeline } from 'node:stream';\nimport {\n  createReadStream,\n  createWriteStream,\n} from 'node:fs';\n\nconst gzip = createGzip();\nconst source = createReadStream('input.txt');\nconst destination = createWriteStream('input.txt.gz');\n\npipeline(source, gzip, destination, (err) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n});\n\n// Or, Promisified\n\nimport { promisify } from 'node:util';\nconst pipe = promisify(pipeline);\n\nasync function do_gzip(input, output) {\n  const gzip = createGzip();\n  const source = createReadStream(input);\n  const destination = createWriteStream(output);\n  await pipe(source, gzip, destination);\n}\n\ndo_gzip('input.txt', 'input.txt.gz')\n  .catch((err) => {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  });\n```\n\nIt is also possible to compress or decompress data in a single step:\n\n```highlight notranslate js\nimport { deflate, unzip } from 'node:zlib';\n\nconst input = '.................................';\ndeflate(input, (err, buffer) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n  console.log(buffer.toString('base64'));\n});\n\nconst buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');\nunzip(buffer, (err, buffer) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n  console.log(buffer.toString());\n});\n\n// Or, Promisified\n\nimport { promisify } from 'node:util';\nconst do_unzip = promisify(unzip);\n\ndo_unzip(buffer)\n  .then((buf) => console.log(buf.toString()))\n  .catch((err) => {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  });\n```\n", "metadata": {"source_url": "https://docs.deno.com/api/node/zlib", "title": "Usage in Deno", "description": "This page covers the usage of the `node:zlib` module in Deno for compression and decompression functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:25:49", "type": "overview", "page_metadata": {"og:image": "/img/og.webp", "og:locale": "en_US", "twitter:title": "zlib - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "zlib - Node documentation", "ogImage": "/img/og.webp", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "zlib - Node documentation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "zlib - Node documentation", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "c3cd5a3b-3ff4-4c02-925a-2982d7be3aac", "sourceURL": "https://docs.deno.com/api/node/zlib", "url": "https://docs.deno.com/api/node/zlib/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing zlib\n```yaml\nimport zlib from 'node:zlib';\n```\n\n### Compressing a file using Gzip\n```yaml\nimport { createGzip } from 'node:zlib';\nimport { pipeline } from 'node:stream';\nimport {\n  createReadStream,\n  createWriteStream,\n} from 'node:fs';\n\nconst gzip = createGzip();\nconst source = createReadStream('input.txt');\nconst destination = createWriteStream('input.txt.gz');\n\npipeline(source, gzip, destination, (err) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n});\n\n// Or, Promisified\n\nimport { promisify } from 'node:util';\nconst pipe = promisify(pipeline);\n\nasync function do_gzip(input, output) {\n  const gzip = createGzip();\n  const source = createReadStream(input);\n  const destination = createWriteStream(output);\n  await pipe(source, gzip, destination);\n}\n\ndo_gzip('input.txt', 'input.txt.gz')\n  .catch((err) => {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  });\n```\n\n### Deflating and Unzipping data\n```yaml\nimport { deflate, unzip } from 'node:zlib';\n\nconst input = '.................................';\ndeflate(input, (err, buffer) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n  console.log(buffer.toString('base64'));\n});\n\nconst buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');\nunzip(buffer, (err, buffer) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n  console.log(buffer.toString());\n});\n\n// Or, Promisified\n\nimport { promisify } from 'node:util';\nconst do_unzip = promisify(unzip);\n\ndo_unzip(buffer)\n  .then((buf) => console.log(buf.toString()))\n  .catch((err) => {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  });\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/zlib", "title": "Usage in Deno", "description": "This page covers the usage of the `node:zlib` module in Deno for compression and decompression functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:25:49", "type": "code_examples", "page_metadata": {"og:image": "/img/og.webp", "og:locale": "en_US", "twitter:title": "zlib - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "zlib - Node documentation", "ogImage": "/img/og.webp", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "zlib - Node documentation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "zlib - Node documentation", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "c3cd5a3b-3ff4-4c02-925a-2982d7be3aac", "sourceURL": "https://docs.deno.com/api/node/zlib", "url": "https://docs.deno.com/api/node/zlib/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the Streams API for efficient compression and decompression of large files.\n• Consider using Promisified versions of pipeline for better error handling in asynchronous code.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/zlib", "title": "Usage in Deno", "description": "This page covers the usage of the `node:zlib` module in Deno for compression and decompression functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:25:49", "type": "best_practices", "page_metadata": {"og:image": "/img/og.webp", "og:locale": "en_US", "twitter:title": "zlib - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "zlib - Node documentation", "ogImage": "/img/og.webp", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "zlib - Node documentation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "zlib - Node documentation", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "c3cd5a3b-3ff4-4c02-925a-2982d7be3aac", "sourceURL": "https://docs.deno.com/api/node/zlib", "url": "https://docs.deno.com/api/node/zlib/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"TypeScript support\"?\n\nAssistant: TypeScript is a first class language in Deno, just like JavaScript or WebAssembly. You can run or import TypeScript without installing anything more than the Deno CLI. With its built-in TypeScript compiler, Deno will compile your TypeScript code to JavaScript with no extra config needed. Deno can also type check your TypeScript code, without requiring a separate type checking tool like `tsc`.\n\nHere's a detailed explanation:\n\n\n## Type Checking\nOne of the main advantages of TypeScript is that it can make your code type safe, catching errors during development rather than runtime. TypeScript is a superset of JavaScript meaning that syntactically valid JavaScript becomes TypeScript with warnings about being \"unsafe\".\n\nNote\n\n**Deno type checks TypeScript in `strict mode` by default**, the TypeScript core team recommends strict mode as a sensible default.\n\nDeno allows you to type-check your code (without executing it) with the [`deno check`](https://docs.deno.com/runtime/reference/cli/check/) subcommand:\n\n```shell\ndeno check module.ts\n# or also type check remote modules and npm packages\ndeno check --all module.ts\n# code snippets written in JSDoc can also be type checked\ndeno check --doc module.ts\n# or type check code snippets in markdown files\ndeno check --doc-only markdown.md\n```\n\nNote\n\nType checking can take a significant amount of time, especially if you are working on a codebase where you are making a lot of changes. Deno optimizes type checking, but it still comes at a cost. Therefore, **by default, TypeScript modules are not type-checked before they are executed**.\n\nWhen using the `deno run` command, Deno will skip type-checking and run the code directly. In order to perform a type check of the module before execution occurs, you can use the `--check` flag with `deno run`:\n\n```shell\ndeno run --check module.ts\n# or also type check remote modules and npm packages\ndeno run --check=all module.ts\n```\n\nWhen Deno encounters a type error when using this flag, the process will exit before executing the code.\n\nIn order to avoid this, you will either need to:\n\n- resolve the issue\n- use the `// @ts-ignore` or `// @ts-expect-error` pragmas to ignore the error\n- or skip type checking all together.\n\nWhen testing your code, type checking is enabled by default. You can use the `--no-check` flag to skip type checking if preferred:\n\n```shell\ndeno test --no-check\n```\n\n## Using with JavaScript\nDeno runs JavaScript and TypeScript code. During type checking, Deno will only type check TypeScript files by default though. If you want to type check JavaScript files too, you can either add a `// @ts-check` pragma at the top of the file, or add `compilerOptions.checkJs` to your `deno.json` file.\n\nmain.js\n\n```ts\n// @ts-check\n\nlet x = \"hello\";\nx = 42; // Type 'number' is not assignable to type 'string'.\n```\n\ndeno.json\n\n```json\n{\n  \"compilerOptions\": {\n    \"checkJs\": true\n  }\n}\n```\n\nIn JavaScript files, you can not use TypeScript syntax like type annotations or importing types. You can use [TSDoc](https://tsdoc.org/) comments to provide type information to the TypeScript compiler though.\n\nmain.js\n\n```ts\n// @ts-check\n\n/**\n * @param a {number}\n * @param b {number}\n * @returns {number}\n */\nfunction add(a, b) {\n  return a + b;\n}\n```\n\n## Providing declaration files\nWhen importing untyped JavaScript modules from TypeScript code, you may need to provide type information for the JavaScript module. This is not necessary if the JavaScript is annotated with TSDoc comments. Without this additional type information (in the form of a `.d.ts` declaration file), TypeScript will assume everything exported from the JavaScript module is of type `any`.\n\n`tsc` will pick up `d.ts` files that are siblings of a `js` file and have the same basename, automatically. **Deno does not do this.** You must explicitly specify either in the `.js` file (the source), or the `.ts` file (the importer) where to find the `.d.ts` file.\n\n## Providing types in the source\nOne should prefer specifying the `.d.ts` file in the `.js` file, as this makes it easier to use the JavaScript module from multiple TypeScript modules: you won't have to specify the `.d.ts` file in every TypeScript module that imports the JavaScript module.\n\nadd.js\n\n```ts\n// @ts-self-types=\"./add.d.ts\"\n\nexport function add(a, b) {\n  return a + b;\n}\n```\n\nadd.d.ts\n\n```ts\nexport function add(a: number, b: number): number;\n```\n\n## Providing types in the importer\nIf you can't modify the JavaScript source, you can specify the `.d.ts` file in the TypeScript module that imports the JavaScript module.\n\nmain.ts\n\n```ts\n// @ts-types=\"./add.d.ts\"\nimport { add } from \"./add.js\";\n```\n\nThis is also useful for NPM packages that don't provide type information:\n\nmain.ts\n\n```ts\n// @ts-types=\"npm:@types/lodash\"\nimport * as _ from \"npm:lodash\";\n```\n\n## Providing types for HTTP modules\nServers that host JavaScript modules via HTTP can also provide type information for those modules in a HTTP header. Deno will use this information when type-checking the module.\n\n```http\nHTTP/1.1 200 OK\nContent-Type: application/javascript; charset=UTF-8\nContent-Length: 648\nX-TypeScript-Types: ./add.d.ts\n```\n\nThe `X-TypeScript-Types` header specifies the location of the `.d.ts` file that provides type information for the JavaScript module. It is resolved relative to the URL of the JavaScript module, just like `Location` headers.\n\n## Type checking for browsers and web workers\nBy default, Deno type checks TypeScript modules as if they were running in the main thread of the Deno runtime. However, Deno also supports type checking for browsers, type checking for web workers, and type checking for combination browser-Deno environments like when using SSR (Server Side Rendering) with Deno.\n\nThese environments have different global objects and APIs available to them. Deno provides type definitions for these environments in the form of library files. These library files are used by the TypeScript compiler to provide type information for the global objects and APIs available in these environments.\n\nThe loaded library files can be changed using the `compilerOptions.lib` option in a `deno.json` configuration file, or through `/// <reference lib=\"...\" />` comments in your TypeScript files. It is recommended to use the `compilerOptions.lib` option in the `deno.json` configuration file to specify the library files to use.\n\nTo enable type checking for a **browser environment**, you can specify the `dom` library file in the `compilerOptions.lib` option in a `deno.json` configuration file:\n\ndeno.json\n\n```json\n{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\"]\n  }\n}\n```\n\nThis will enable type checking for a browser environment, providing type information for global objects like `document`. This will however disable type information for Deno-specific APIs like `Deno.readFile`.\n\nTo enable type checking for combined **browser and Deno environments**, like using SSR with Deno, you can specify both the `dom` and `deno.ns` (Deno namespace) library files in the `compilerOptions.lib` option in a `deno.json` configuration file:\n\ndeno.json\n\n```json\n{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"deno.ns\"]\n  }\n}\n```\n\nThis will enable type checking for both browser and Deno environments, providing type information for global objects like `document` and Deno-specific APIs like `Deno.readFile`.\n\nTo enable type checking for a **web worker environment in Deno**, (ie code that is run with `new Worker`), you can specify the `deno.worker` library file in the `compilerOptions.lib` option in a `deno.json`.\n\ndeno.json\n\n```json\n{\n  \"compilerOptions\": {\n    \"lib\": [\"deno.worker\"]\n  }\n}\n```\n\nTo specify the library files to use in a TypeScript file, you can use `/// <reference lib=\"...\" />` comments:\n\n```ts\n/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"dom\" />\n```\n\n## Augmenting global types\nDeno supports ambient or global types in TypeScript. This is useful when polyfilling global objects or augmenting the global scope with additional properties. **You should avoid using ambient or global types when possible**, since they can lead to naming conflicts and make it harder to reason about your code. They are also not supported when publishing to JSR.\n\n## Using declare global to augment the global scope\nYou can use the `declare global` syntax in any of the TypeScript files that are imported in your project to augment the global scope with additional properties. For example:\n\n```ts\ndeclare global {\n  interface Window {\n    polyfilledAPI(): string;\n  }\n}\n```\n\nThis makes the `polyfilledAPI` function available globally when the type definition is imported.\n\n## Using .d.ts files to augment the global scope\nYou can also use `.d.ts` files to augment the global scope. For example, you can create a `global.d.ts` file with the following content:\n\n```ts\ninterface Window {\n  polyfilledAPI(): string;\n}\n```\n\nThen you can load this `.d.ts` file in your TypeScript using `/// <reference types=\"./global.d.ts\" />`. This will augment the global scope with the `polyfilledAPI` function.\n\nAlternatively you can specify the `.d.ts` file in the `deno.json` configuration file, in the `compilerOptions.types` array:\n\n```json\n{\n  \"compilerOptions\": {\n    \"types\": [\"./global.d.ts\"]\n  }\n}\n```\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/typescript", "title": "TypeScript support", "description": "TypeScript is a first class language in Deno, just like JavaScript or WebAssembly. You can run or import TypeScript without installing anything more than the Deno CLI. With its built-in TypeScript compiler, Deno will compile your TypeScript code to JavaScript with no extra config needed. Deno can also type check your TypeScript code, without requiring a separate type checking tool like `tsc`.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:27:39", "type": "overview", "page_metadata": {"og:image": "/img/og.webp", "ogTitle": "TypeScript support", "title": "TypeScript support", "twitter:site": "@deno_land", "og:title": "TypeScript support", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:title": "TypeScript support", "og:type": "article", "og:locale": "en_US", "scrapeId": "9793c6aa-1ee6-4c62-9fd0-cf2caa8a2c10", "sourceURL": "https://docs.deno.com/runtime/fundamentals/typescript", "url": "https://docs.deno.com/runtime/fundamentals/typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"TypeScript support\"?\n\nAssistant: Here are some code examples:\n\n### Type Checking with deno check\n```yaml\ndeno check module.ts\n# or also type check remote modules and npm packages\ndeno check --all module.ts\n# code snippets written in JSDoc can also be type checked\ndeno check --doc module.ts\n# or type check code snippets in markdown files\ndeno check --doc-only markdown.md\n```\n\n### Type Checking with deno run\n```yaml\ndeno run --check module.ts\n# or also type check remote modules and npm packages\ndeno run --check=all module.ts\n```\n\n### Skipping Type Checking in Tests\n```yaml\ndeno test --no-check\n```\n\n### Using @ts-check in JavaScript\n```yaml\n// @ts-check\n\nlet x = \"hello\";\nx = 42; // Type 'number' is not assignable to type 'string'.\n```\n\n### Adding checkJs in deno.json\n```yaml\n{\n  \"compilerOptions\": {\n    \"checkJs\": true\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/typescript", "title": "TypeScript support", "description": "TypeScript is a first class language in Deno, just like JavaScript or WebAssembly. You can run or import TypeScript without installing anything more than the Deno CLI. With its built-in TypeScript compiler, Deno will compile your TypeScript code to JavaScript with no extra config needed. Deno can also type check your TypeScript code, without requiring a separate type checking tool like `tsc`.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:27:39", "type": "code_examples", "page_metadata": {"og:image": "/img/og.webp", "ogTitle": "TypeScript support", "title": "TypeScript support", "twitter:site": "@deno_land", "og:title": "TypeScript support", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:title": "TypeScript support", "og:type": "article", "og:locale": "en_US", "scrapeId": "9793c6aa-1ee6-4c62-9fd0-cf2caa8a2c10", "sourceURL": "https://docs.deno.com/runtime/fundamentals/typescript", "url": "https://docs.deno.com/runtime/fundamentals/typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"TypeScript support\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno type checks TypeScript in strict mode by default, which is recommended as a sensible default.\n• Type checking can take a significant amount of time, especially in large codebases with frequent changes.\n• By default, TypeScript modules are not type-checked before execution; use the --check flag with deno run to enforce type checking before execution.\n• When testing, type checking is enabled by default; use the --no-check flag to skip it if preferred.\n• Prefer specifying the .d.ts file in the .js file for easier usage across multiple TypeScript modules.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/typescript", "title": "TypeScript support", "description": "TypeScript is a first class language in Deno, just like JavaScript or WebAssembly. You can run or import TypeScript without installing anything more than the Deno CLI. With its built-in TypeScript compiler, Deno will compile your TypeScript code to JavaScript with no extra config needed. Deno can also type check your TypeScript code, without requiring a separate type checking tool like `tsc`.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:27:39", "type": "best_practices", "page_metadata": {"og:image": "/img/og.webp", "ogTitle": "TypeScript support", "title": "TypeScript support", "twitter:site": "@deno_land", "og:title": "TypeScript support", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:title": "TypeScript support", "og:type": "article", "og:locale": "en_US", "scrapeId": "9793c6aa-1ee6-4c62-9fd0-cf2caa8a2c10", "sourceURL": "https://docs.deno.com/runtime/fundamentals/typescript", "url": "https://docs.deno.com/runtime/fundamentals/typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deploy a React app with Vite\"?\n\nAssistant: This tutorial covers how to deploy a Vite Deno and React app on Deno Deploy.\n\nHere's a detailed explanation:\n\n\n## Step 1: Create a Vite app\nLet's use [Vite](https://vitejs.dev/) to quickly scaffold a Deno and React app:\n\n```highlight notranslate sh\ndeno run -RWE npm:create-vite-extra@latest\n```\n\nWe'll name our project `vite-project`. Be sure to select `deno-react` in the project configuration.\n\nThen, `cd` into the newly created project folder.\n\n## Step 2: Run the repo locally\nTo see and edit your new project locally you can run:\n\n```highlight notranslate sh\ndeno task dev\n```\n\n## Step 3: Deploy your project with Deno Deploy\nNow that we have everything in place, let's deploy your new project!\n\n1. In your browser, visit [Deno Deploy](https://dash.deno.com/new_project) and link your GitHub account.\n2. Select the repository which contains your new Vite project.\n3. You can give your project a name or allow Deno to generate one for you.\n4. Select **Vite** from the **Framework Preset** dropdown. This will populate the **Entrypoint** form field.\n5. Leave the **Install step** empty.\n6. Set the **Build step** to `deno task build`.\n7. Set the **Root directory** to `dist`\n8. Click **Deploy Project**\n\n> NB. The entrypoint that is set will be `jsr:@std/http/file-server`. Note that this is not a file that exists in the Vite repo itself. Instead, it is an external program. When run, this program uploads all the static asset files in your current repo ( `vite-project/dist`) to Deno Deploy. Then when you navigate to the deployment URL, it serves up the local directory.\n\n## `deployctl`\nAlternatively, you can use `deployctl` directly to deploy `vite-project` to Deno Deploy.\n\n```highlight notranslate console\ncd /dist\ndeployctl deploy --project= --entrypoint=jsr:@std/http/file-server\n```\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/vite", "title": "Deploy a React app with Vite", "description": "This tutorial covers how to deploy a Vite Deno and React app on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:27:55", "type": "overview", "page_metadata": {"ogLocale": "en_US", "ogTitle": "Deploy a React app with Vite", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:site_name": "Deno", "twitter:title": "Deploy a React app with Vite", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Deploy a React app with Vite", "title": "Deploy a React app with Vite", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "2ad538c3-48ff-4534-9624-651dd3b54dde", "sourceURL": "https://docs.deno.com/deploy/tutorials/vite", "url": "https://docs.deno.com/deploy/tutorials/vite/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deploy a React app with Vite\"?\n\nAssistant: Here are some code examples:\n\n### Create a Vite app\n```yaml\ndeno run -RWE npm:create-vite-extra@latest\n```\n\n### Run the repo locally\n```yaml\ndeno task dev\n```\n\n### Deploy with deployctl\n```yaml\ncd /dist\ndeployctl deploy --project= --entrypoint=jsr:@std/http/file-server\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/vite", "title": "Deploy a React app with Vite", "description": "This tutorial covers how to deploy a Vite Deno and React app on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:27:55", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "ogTitle": "Deploy a React app with Vite", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:site_name": "Deno", "twitter:title": "Deploy a React app with Vite", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Deploy a React app with Vite", "title": "Deploy a React app with Vite", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "2ad538c3-48ff-4534-9624-651dd3b54dde", "sourceURL": "https://docs.deno.com/deploy/tutorials/vite", "url": "https://docs.deno.com/deploy/tutorials/vite/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deploy a React app with Vite\"?\n\nAssistant: Here are the recommended best practices:\n\n• Be sure to select `deno-react` in the project configuration when creating the Vite app.\n• Leave the **Install step** empty when deploying your project.\n• Ensure the **Root directory** is set to `dist` before deploying.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/vite", "title": "Deploy a React app with Vite", "description": "This tutorial covers how to deploy a Vite Deno and React app on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:27:55", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "ogTitle": "Deploy a React app with Vite", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:site_name": "Deno", "twitter:title": "Deploy a React app with Vite", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Deploy a React app with Vite", "title": "Deploy a React app with Vite", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "2ad538c3-48ff-4534-9624-651dd3b54dde", "sourceURL": "https://docs.deno.com/deploy/tutorials/vite", "url": "https://docs.deno.com/deploy/tutorials/vite/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the node:url module in Deno, including classes, functions, and interfaces available for URL manipulation.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\nThe `node:url` module provides utilities for URL resolution and parsing. It can be accessed using:\n\n```highlight notranslate js\nimport url from 'node:url';\n```\n\n## Classes\n### Classes\n\n#### [URL](https://docs.deno.com/api/node/url/~/URL \"URL\")\nBrowser-compatible `URL` class, implemented by following the WHATWG URL Standard. [Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself. The `URL` class is also available on the global object.\n\n- [canParse](https://docs.deno.com/api/node/url/~/URL#method_canparse_0)\n- [createObjectURL](https://docs.deno.com/api/node/url/~/URL#method_createobjecturl_0)\n- [hash](https://docs.deno.com/api/node/url/~/URL#property_hash)\n- [host](https://docs.deno.com/api/node/url/~/URL#property_host)\n- [hostname](https://docs.deno.com/api/node/url/~/URL#property_hostname)\n- [href](https://docs.deno.com/api/node/url/~/URL#property_href)\n- [origin](https://docs.deno.com/api/node/url/~/URL#property_origin)\n- [parse](https://docs.deno.com/api/node/url/~/URL#method_parse_0)\n- [password](https://docs.deno.com/api/node/url/~/URL#property_password)\n- [pathname](https://docs.deno.com/api/node/url/~/URL#property_pathname)\n- [port](https://docs.deno.com/api/node/url/~/URL#property_port)\n- [protocol](https://docs.deno.com/api/node/url/~/URL#property_protocol)\n- [revokeObjectURL](https://docs.deno.com/api/node/url/~/URL#method_revokeobjecturl_0)\n- [search](https://docs.deno.com/api/node/url/~/URL#property_search)\n- [searchParams](https://docs.deno.com/api/node/url/~/URL#property_searchparams)\n- [toJSON](https://docs.deno.com/api/node/url/~/URL#method_tojson_0)\n- [toString](https://docs.deno.com/api/node/url/~/URL#method_tostring_0)\n- [username](https://docs.deno.com/api/node/url/~/URL#property_username)\n\n#### [URLSearchParams](https://docs.deno.com/api/node/url/~/URLSearchParams \"URLSearchParams\")\nThe `URLSearchParams` API provides read and write access to the query of a `URL`. The `URLSearchParams` class can also be used standalone with one of the four following constructors. The `URLSearchParams` class is also available on the global object.\n\n- [append](https://docs.deno.com/api/node/url/~/URLSearchParams#method_append_0)\n- [delete](https://docs.deno.com/api/node/url/~/URLSearchParams#method_delete_0)\n- [entries](https://docs.deno.com/api/node/url/~/URLSearchParams#method_entries_0)\n- [forEach](https://docs.deno.com/api/node/url/~/URLSearchParams#method_foreach_0)\n- [get](https://docs.deno.com/api/node/url/~/URLSearchParams#method_get_0)\n- [getAll](https://docs.deno.com/api/node/url/~/URLSearchParams#method_getall_0)\n- [has](https://docs.deno.com/api/node/url/~/URLSearchParams#method_has_0)\n- [keys](https://docs.deno.com/api/node/url/~/URLSearchParams#method_keys_0)\n- [set](https://docs.deno.com/api/node/url/~/URLSearchParams#method_set_0)\n- [size](https://docs.deno.com/api/node/url/~/URLSearchParams#property_size)\n- [sort](https://docs.deno.com/api/node/url/~/URLSearchParams#method_sort_0)\n- [toString](https://docs.deno.com/api/node/url/~/URLSearchParams#method_tostring_0)\n- [values](https://docs.deno.com/api/node/url/~/URLSearchParams#method_values_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/url", "title": "Usage in Deno", "description": "This page covers the usage of the node:url module in Deno, including classes, functions, and interfaces available for URL manipulation.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:28:16", "type": "overview", "page_metadata": {"og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "url - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "url - Node documentation", "og:image": "/img/og.webp", "ogTitle": "url - Node documentation", "language": "en", "og:type": "article", "og:title": "url - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "49cdc604-f366-41a2-a983-a17adb90513d", "sourceURL": "https://docs.deno.com/api/node/url", "url": "https://docs.deno.com/api/node/url/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the node:url module\n```yaml\nimport url from 'node:url';\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/url", "title": "Usage in Deno", "description": "This page covers the usage of the node:url module in Deno, including classes, functions, and interfaces available for URL manipulation.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:28:16", "type": "code_examples", "page_metadata": {"og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "url - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "url - Node documentation", "og:image": "/img/og.webp", "ogTitle": "url - Node documentation", "language": "en", "og:type": "article", "og:title": "url - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "49cdc604-f366-41a2-a983-a17adb90513d", "sourceURL": "https://docs.deno.com/api/node/url", "url": "https://docs.deno.com/api/node/url/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the URL class for browser-compatible URL manipulation.\n• Utilize URLSearchParams for easy query string management.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/url", "title": "Usage in Deno", "description": "This page covers the usage of the node:url module in Deno, including classes, functions, and interfaces available for URL manipulation.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:28:16", "type": "best_practices", "page_metadata": {"og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "url - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "url - Node documentation", "og:image": "/img/og.webp", "ogTitle": "url - Node documentation", "language": "en", "og:type": "article", "og:title": "url - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "49cdc604-f366-41a2-a983-a17adb90513d", "sourceURL": "https://docs.deno.com/api/node/url", "url": "https://docs.deno.com/api/node/url/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: Deno compatibility and usage of the node:inspector module.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:inspector\";\n```\n\nDeno compatibility\n\n`console` is supported. Other APIs are non-functional stubs.\n\nThe `node:inspector` module provides an API for interacting with the V8 inspector.\n\n## Classes\n### Classes [#](https://docs.deno.com/api/node/inspector/#Classes)\n\n[Session](https://docs.deno.com/api/node/inspector/~/Session \"Session\")\n\nThe `inspector.Session` is used for dispatching messages to the V8 inspector back-end and receiving message responses and notifications.\n\n- [addListener](https://docs.deno.com/api/node/inspector/~/Session#method_addlistener_0)\n- [connect](https://docs.deno.com/api/node/inspector/~/Session#method_connect_0)\n- [connectToMainThread](https://docs.deno.com/api/node/inspector/~/Session#method_connecttomainthread_0)\n- [disconnect](https://docs.deno.com/api/node/inspector/~/Session#method_disconnect_0)\n- [emit](https://docs.deno.com/api/node/inspector/~/Session#method_emit_0)\n- [on](https://docs.deno.com/api/node/inspector/~/Session#method_on_0)\n- [once](https://docs.deno.com/api/node/inspector/~/Session#method_once_0)\n- [post](https://docs.deno.com/api/node/inspector/~/Session#method_post_0)\n- [prependListener](https://docs.deno.com/api/node/inspector/~/Session#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/inspector/~/Session#method_prependoncelistener_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/inspector", "title": "Usage in Deno", "description": "Deno compatibility and usage of the node:inspector module.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:28:35", "type": "overview", "page_metadata": {"twitter:title": "inspector - Node documentation", "language": "en", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "title": "inspector - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:title": "inspector - Node documentation", "ogTitle": "inspector - Node documentation", "scrapeId": "cb326c8c-08f2-4627-b0c0-9df5d36defa5", "sourceURL": "https://docs.deno.com/api/node/inspector", "url": "https://docs.deno.com/api/node/inspector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the inspector module\n```yaml\nimport * as mod from \"node:inspector\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/inspector", "title": "Usage in Deno", "description": "Deno compatibility and usage of the node:inspector module.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:28:35", "type": "code_examples", "page_metadata": {"twitter:title": "inspector - Node documentation", "language": "en", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "title": "inspector - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:title": "inspector - Node documentation", "ogTitle": "inspector - Node documentation", "scrapeId": "cb326c8c-08f2-4627-b0c0-9df5d36defa5", "sourceURL": "https://docs.deno.com/api/node/inspector", "url": "https://docs.deno.com/api/node/inspector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--experimental-network-inspection` flag to enable network inspection features.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/inspector", "title": "Usage in Deno", "description": "Deno compatibility and usage of the node:inspector module.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:28:35", "type": "best_practices", "page_metadata": {"twitter:title": "inspector - Node documentation", "language": "en", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "title": "inspector - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:title": "inspector - Node documentation", "ogTitle": "inspector - Node documentation", "scrapeId": "cb326c8c-08f2-4627-b0c0-9df5d36defa5", "sourceURL": "https://docs.deno.com/api/node/inspector", "url": "https://docs.deno.com/api/node/inspector/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Web Crypto API Interfaces\"?\n\nAssistant: This documentation covers various interfaces related to the Web Crypto API, including parameters and properties for cryptographic algorithms.\n\nHere's a detailed explanation:\n\n\n## Interfaces\nThis section lists various interfaces related to the Web Crypto API.\n\n## Type Aliases\nThis section lists type aliases used in the Web Crypto API.\n\n## Variables\nThis section lists variables related to the Web Crypto API.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/crypto", "title": "Web Crypto API Interfaces", "description": "This documentation covers various interfaces related to the Web Crypto API, including parameters and properties for cryptographic algorithms.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 00:29:11", "type": "overview", "page_metadata": {"ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Crypto - Web documentation", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:locale": "en_US", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Crypto - Web documentation", "ogSiteName": "Deno", "og:title": "Crypto - Web documentation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "title": "Crypto - Web documentation", "scrapeId": "814b81ed-7d2c-4b37-9950-a207a50d0e50", "sourceURL": "https://docs.deno.com/api/web/crypto", "url": "https://docs.deno.com/api/web/crypto", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno KV Quick Start\"?\n\nAssistant: Deno KV is a key-value database built directly into the Deno runtime, available in the Deno.Kv namespace. It can be used for many kinds of data storage use cases, but excels at storing simple data structures that benefit from very fast reads and writes.\n\nHere's a detailed explanation:\n\n\n## Opening a database\nIn your Deno program, you can get a reference to a KV database using `Deno.openKv()`. You may pass in an optional file system path to where you'd like to store your database, otherwise one will be created for you based on the current working directory of your script.\n\n## Creating, updating, and reading a key-value pair\nData in Deno KV is stored as key-value pairs, much like properties of a JavaScript object literal or a Map. Keys are represented as an array of JavaScript types, like `string`, `number`, `bigint`, or `boolean`. Values can be arbitrary JavaScript objects. In this example, we create a key-value pair representing a user's UI preferences, and save it with `kv.set()`.\n\n## Listing several key-value pairs\nTo get values for a finite number of keys, you may use `kv.getMany()`. Pass in several keys as arguments, and you'll receive an array of values for each key. Note that values and versionstamps can be `null` if no value exists for the given key(s).\n\n## Deleting key-value pairs\nYou can delete a key from the database using `kv.delete()`. No action is taken if no value is found for the given key.\n\n## Atomic transactions\nDeno KV is capable of executing atomic transactions, which enables you to conditionally execute one or many data manipulation operations at once. In the following example, we create a new preferences object only if it hasn't been created already.\n\n## Improve querying with secondary indexes\nSecondary indexes store the same data by multiple keys, allowing for simpler queries of the data you need. Let's say that we need to be able to access user preferences by both username AND email. To enable this, you could provide a function that wraps the logic to save the preferences to create two indexes.\n\n## Watching for updates in Deno KV\nYou can also listen for updates from Deno KV with `kv.watch()`, which will emit a new value or values of the key or keys you provide.\n\n## Production usage\nDeno KV is available for use in live applications on Deno Deploy. In production, Deno KV is backed by FoundationDB, the open source key-value store created by Apple.\n\n## Testing\nBy default, `Deno.openKv()` creates or opens a persistent store based on the path from which the script that invoked it was run. This isn't usually desirable for tests, which need to produce the same behavior when run many times in a row.\n\n## Next steps\nAt this point, you're just beginning to scratch the surface with Deno KV. Be sure to check out our guide on the Deno KV key space, and a collection of tutorials and example applications here.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual", "title": "Deno KV Quick Start", "description": "Deno KV is a key-value database built directly into the Deno runtime, available in the Deno.Kv namespace. It can be used for many kinds of data storage use cases, but excels at storing simple data structures that benefit from very fast reads and writes.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:29:27", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Deno KV Quick Start", "ogTitle": "Deno KV Quick Start", "ogLocale": "en_US", "ogSiteName": "Deno", "og:type": "article", "twitter:title": "Deno KV Quick Start", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "language": "en", "og:title": "Deno KV Quick Start", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "13f2862e-6bd5-41f1-9d21-99b15ca0e591", "sourceURL": "https://docs.deno.com/deploy/kv/manual", "url": "https://docs.deno.com/deploy/kv/manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno KV Quick Start\"?\n\nAssistant: Here are some code examples:\n\n### Opening a database\n```yaml\nconst kv = await Deno.openKv();\n```\n\n### Creating a key-value pair\n```yaml\nconst prefs = {\n  username: \"ada\",\n  theme: \"dark\",\n  language: \"en-US\",\n};\nconst result = await kv.set([\"preferences\", \"ada\"], prefs);\n```\n\n### Reading a key-value pair\n```yaml\nconst entry = await kv.get([\"preferences\", \"ada\"]);\nconsole.log(entry.key);\nconsole.log(entry.value);\nconsole.log(entry.versionstamp);\n```\n\n### Listing several key-value pairs\n```yaml\nconst result = await kv.getMany([\n  [\"preferences\", \"ada\"],\n  [\"preferences\", \"grace\"],\n]);\n```\n\n### Listing with prefix\n```yaml\nconst entries = kv.list({ prefix: [\"preferences\"] });\nfor await (const entry of entries) {\n  console.log(entry.key);\n  console.log(entry.value);\n  console.log(entry.versionstamp);\n}\n```\n\n### Deleting a key-value pair\n```yaml\nawait kv.delete([\"preferences\", \"alan\"]);\n```\n\n### Atomic transaction example\n```yaml\nconst res = await kv.atomic()\n  .check({ key, versionstamp: null })\n  .set(key, value)\n  .commit();\nif (res.ok) {\n  console.log(\"Preferences did not yet exist. Inserted!\");\n} else {\n  console.error(\"Preferences already exist.\");\n}\n```\n\n### Secondary indexes example\n```yaml\nasync function savePreferences(prefs) {\n  const key = [\"preferences\", prefs.username];\n  const r = await kv.set(key, prefs);\n  await kv.set([\"preferencesByEmail\", prefs.email], key);\n  return r;\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual", "title": "Deno KV Quick Start", "description": "Deno KV is a key-value database built directly into the Deno runtime, available in the Deno.Kv namespace. It can be used for many kinds of data storage use cases, but excels at storing simple data structures that benefit from very fast reads and writes.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:29:27", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Deno KV Quick Start", "ogTitle": "Deno KV Quick Start", "ogLocale": "en_US", "ogSiteName": "Deno", "og:type": "article", "twitter:title": "Deno KV Quick Start", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "language": "en", "og:title": "Deno KV Quick Start", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "13f2862e-6bd5-41f1-9d21-99b15ca0e591", "sourceURL": "https://docs.deno.com/deploy/kv/manual", "url": "https://docs.deno.com/deploy/kv/manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno KV Quick Start\"?\n\nAssistant: Here are the recommended best practices:\n\n• No additional configuration is necessary to run your Deno programs that use KV on Deploy - a new Deploy database will be provisioned for you when required by your code.\n• To test code that uses Deno KV, you can use the special argument \":memory:\" to create an ephemeral Deno KV datastore.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual", "title": "Deno KV Quick Start", "description": "Deno KV is a key-value database built directly into the Deno runtime, available in the Deno.Kv namespace. It can be used for many kinds of data storage use cases, but excels at storing simple data structures that benefit from very fast reads and writes.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:29:27", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Deno KV Quick Start", "ogTitle": "Deno KV Quick Start", "ogLocale": "en_US", "ogSiteName": "Deno", "og:type": "article", "twitter:title": "Deno KV Quick Start", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "language": "en", "og:title": "Deno KV Quick Start", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "13f2862e-6bd5-41f1-9d21-99b15ca0e591", "sourceURL": "https://docs.deno.com/deploy/kv/manual", "url": "https://docs.deno.com/deploy/kv/manual/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"camelcase\"?\n\nAssistant: Enforces the use of camelCase in variable names.\n\nHere's a detailed explanation:\n\n\n## Overview\nConsistency in a code base is key for readability and maintainability. This rule enforces variable declarations and object property names which you create to be in camelCase.\n\n## Notes\nOf note:\n\n- `_` is allowed at the start or end of a variable\n- All uppercase variable names (e.g. constants) may have `_` in their name\n- If you have to use a snake_case key in an object for some reasons, wrap it in quotation mark\n- This rule also applies to variables imported or exported via ES modules, but not to object properties of those variables\n\n## Invalid Examples\n**Invalid:**\n\n```highlight notranslate typescript\nlet first_name = \"Ichigo\";\nconst obj1 = { last_name: \"Hoshimiya\" };\nconst obj2 = { first_name };\nconst { last_name } = obj1;\n\nfunction do_something() {}\nfunction foo({ snake_case = \"default value\" }) {}\n\nclass snake_case_class {}\nclass Also_Not_Valid_Class {}\n\nimport { not_camelCased } from \"external-module.js\";\nexport * as not_camelCased from \"mod.ts\";\n\nenum snake_case_enum {\n  snake_case_variant,\n}\n\ntype snake_case_type = { some_property: number };\n\ninterface snake_case_interface {\n  some_property: number;\n}\n```\n\n\n## Valid Examples\n**Valid:**\n\n```highlight notranslate typescript\nlet firstName = \"Ichigo\";\nconst FIRST_NAME = \"Ichigo\";\nconst __myPrivateVariable = \"Hoshimiya\";\nconst myPrivateVariable_ = \"Hoshimiya\";\nconst obj1 = { \"last_name\": \"Hoshimiya\" }; // if an object key is wrapped in quotation mark, then it's valid\nconst obj2 = { \"first_name\": first_name };\nconst { last_name: lastName } = obj;\n\nfunction doSomething() {} // function declarations must be camelCase but...\ndo_something(); // ...snake_case function calls are allowed\nfunction foo({ snake_case: camelCase = \"default value\" }) {}\n\nclass PascalCaseClass {}\n\nimport { not_camelCased as camelCased } from \"external-module.js\";\nexport * as camelCased from \"mod.ts\";\n\nenum PascalCaseEnum {\n  PascalCaseVariant,\n}\n\ntype PascalCaseType = { someProperty: number };\n\ninterface PascalCaseInterface {\n  someProperty: number;\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/camelcase", "title": "camelcase", "description": "Enforces the use of camelCase in variable names.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:29:43", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "camelcase", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "ogTitle": "camelcase", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:title": "camelcase", "og:title": "camelcase", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "og:type": "article", "scrapeId": "cdb13453-aa50-4122-a817-3e1ded80a5e3", "sourceURL": "https://docs.deno.com/lint/rules/camelcase", "url": "https://docs.deno.com/lint/rules/camelcase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"camelcase\"?\n\nAssistant: Here are some code examples:\n\n### Invalid Examples\n```yaml\n```highlight notranslate typescript\nlet first_name = \"Ichigo\";\nconst obj1 = { last_name: \"Hoshimiya\" };\nconst obj2 = { first_name };\nconst { last_name } = obj1;\n\nfunction do_something() {}\nfunction foo({ snake_case = \"default value\" }) {}\n\nclass snake_case_class {}\nclass Also_Not_Valid_Class {}\n\nimport { not_camelCased } from \"external-module.js\";\nexport * as not_camelCased from \"mod.ts\";\n\nenum snake_case_enum {\n  snake_case_variant,\n}\n\ntype snake_case_type = { some_property: number };\n\ninterface snake_case_interface {\n  some_property: number;\n}\n```\n```\n\n### Valid Examples\n```yaml\n```highlight notranslate typescript\nlet firstName = \"Ichigo\";\nconst FIRST_NAME = \"Ichigo\";\nconst __myPrivateVariable = \"Hoshimiya\";\nconst myPrivateVariable_ = \"Hoshimiya\";\nconst obj1 = { \"last_name\": \"Hoshimiya\" }; // if an object key is wrapped in quotation mark, then it's valid\nconst obj2 = { \"first_name\": first_name };\nconst { last_name: lastName } = obj;\n\nfunction doSomething() {} // function declarations must be camelCase but...\ndo_something(); // ...snake_case function calls are allowed\nfunction foo({ snake_case: camelCase = \"default value\" }) {}\n\nclass PascalCaseClass {}\n\nimport { not_camelCased as camelCased } from \"external-module.js\";\nexport * as camelCased from \"mod.ts\";\n\nenum PascalCaseEnum {\n  PascalCaseVariant,\n}\n\ntype PascalCaseType = { someProperty: number };\n\ninterface PascalCaseInterface {\n  someProperty: number;\n}\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/camelcase", "title": "camelcase", "description": "Enforces the use of camelCase in variable names.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:29:43", "type": "code_examples", "page_metadata": {"twitter:site": "@deno_land", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "camelcase", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "ogTitle": "camelcase", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:title": "camelcase", "og:title": "camelcase", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "og:type": "article", "scrapeId": "cdb13453-aa50-4122-a817-3e1ded80a5e3", "sourceURL": "https://docs.deno.com/lint/rules/camelcase", "url": "https://docs.deno.com/lint/rules/camelcase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"camelcase\"?\n\nAssistant: Here are the recommended best practices:\n\n• Consistency in a code base is key for readability and maintainability.\n• Use camelCase for variable declarations and object property names.\n• Wrap snake_case keys in quotation marks when used in objects.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/camelcase", "title": "camelcase", "description": "Enforces the use of camelCase in variable names.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:29:43", "type": "best_practices", "page_metadata": {"twitter:site": "@deno_land", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "camelcase", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "ogTitle": "camelcase", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:title": "camelcase", "og:title": "camelcase", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "og:type": "article", "scrapeId": "cdb13453-aa50-4122-a817-3e1ded80a5e3", "sourceURL": "https://docs.deno.com/lint/rules/camelcase", "url": "https://docs.deno.com/lint/rules/camelcase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connect to Firebase\"?\n\nAssistant: This tutorial covers how to connect to Firebase from an application deployed on Deno Deploy.\n\nHere's a detailed explanation:\n\n\n## Get credentials from Firebase\nThis tutorial assumes that you've already created a project in Firebase and added a web application to your project.\n\n1. Navigate to your project in Firebase and click on **Project Settings**\n\n2. Scroll down until you see a card with your app name, and a code sample that includes a `firebaseConfig` object. It should look something like the below. Keep this handy. We will use it later:\n\n```highlight notranslate js\nvar firebaseConfig = {\n     apiKey: \"APIKEY\",\n     authDomain: \"example-12345.firebaseapp.com\",\n     projectId: \"example-12345\",\n     storageBucket: \"example-12345.appspot.com\",\n     messagingSenderId: \"1234567890\",\n     appId: \"APPID\",\n};\n```\n\n## Create a Project in Deno Deploy\n1. Go to [https://dash.deno.com/new](https://dash.deno.com/new) (Sign in with GitHub if you didn't already) and click on **\\+ Empty Project** under **Deploy** **from the command line**.\n\n2. Now click on the **Settings** button available on the project page.\n\n3. Navigate to the **Environment Variables** section and add the following:\n`FIREBASE_USERNAME` The Firebase user (email address) that was added above.\n`FIREBASE_PASSWORD` The Firebase user password that was added above.\n`FIREBASE_CONFIG` The configuration of the Firebase application as a JSON string.\nThe configuration needs to be a valid JSON string to be readable by the application. If the code snippet given when setting up looked like this:\n\n```highlight notranslate js\nvar firebaseConfig = {\n     apiKey: \"APIKEY\",\n     authDomain: \"example-12345.firebaseapp.com\",\n     projectId: \"example-12345\",\n     storageBucket: \"example-12345.appspot.com\",\n     messagingSenderId: \"1234567890\",\n     appId: \"APPID\",\n};\n```\n\nYou would need to set the value of the string to this (noting that spacing and new lines are not required):\n\n```highlight notranslate json\n{\n     \"apiKey\": \"APIKEY\",\n     \"authDomain\": \"example-12345.firebaseapp.com\",\n     \"projectId\": \"example-12345\",\n     \"storageBucket\": \"example-12345.appspot.com\",\n     \"messagingSenderId\": \"1234567890\",\n     \"appId\": \"APPID\"\n}\n```\n\n## Write code that connects to Firebase\nThe first thing we will do is import the `XMLHttpRequest` polyfill that Firebase needs to work under Deploy as well as a polyfill for `localStorage` to allow the Firebase auth to persist logged in users:\n\n```highlight notranslate js\nimport \"https://deno.land/x/xhr@0.1.1/mod.ts\";\nimport { installGlobals } from \"https://deno.land/x/virtualstorage@0.1.0/mod.ts\";\ninstallGlobals();\n```\n\n> ℹ️ we are using the current version of packages at the time of the writing of this tutorial. They may not be up-to-date and you may want to double check current versions.\n\nBecause Deploy has a lot of the web standard APIs, it is best to use the web libraries for Firebase under deploy. Currently v9 is in still in beta for Firebase, so we will use v8:\n\n```highlight notranslate js\nimport firebase from \"https://esm.sh/firebase@9.17.0/app\";\nimport \"https://esm.sh/firebase@9.17.0/auth\";\nimport \"https://esm.sh/firebase@9.17.0/firestore\";\n```\n\nNow we need to setup our Firebase application. We will be getting the configuration from the environment variables we set up previously and get references to the parts of Firebase we are going to use:\n\n```highlight notranslate js\nconst firebaseConfig = JSON.parse(Deno.env.get(\"FIREBASE_CONFIG\"));\nconst firebaseApp = firebase.initializeApp(firebaseConfig, \"example\");\nconst auth = firebase.auth(firebaseApp);\nconst db = firebase.firestore(firebaseApp);\n```\n\nOk, we are almost done. We just need to create our middleware application and add the `localStorage` middleware we imported:\n\n```highlight notranslate js\nconst app = new Application();\napp.use(virtualStorage());\n```\n\nAnd then we need to add middleware to authenticate the user. In this tutorial we are simply grabbing the username and password from the environment variables we will be setting up, but this could easily be adapted to redirect a user to a sign-in page if they are not logged in:\n\n```highlight notranslate js\napp.use(async (ctx, next) => {\n  const signedInUid = ctx.cookies.get(\"LOGGED_IN_UID\");\n  const signedInUser = signedInUid != null ? users.get(signedInUid) : undefined;\n  if (!signedInUid || !signedInUser || !auth.currentUser) {\n    const creds = await auth.signInWithEmailAndPassword(\n      Deno.env.get(\"FIREBASE_USERNAME\"),\n      Deno.env.get(\"FIREBASE_PASSWORD\"),\n    );\n    const { user } = creds;\n    if (user) {\n      users.set(user.uid, user);\n      ctx.cookies.set(\"LOGGED_IN_UID\", user.uid);\n    } else if (signedInUser && signedInUid.uid !== auth.currentUser?.uid) {\n      await auth.updateCurrentUser(signedInUser);\n    }\n  }\n  return next();\n});\n```\n\n## Deploy the application to Deno Deploy\nOnce you have finished writing your application, you can deploy it on Deno Deploy.\n\nTo do this, go back to your project page at `https://dash.deno.com/projects/<project-name>`.\n\nYou should see a couple of options to deploy:\n\n- [Github integration](https://docs.deno.com/deploy/manual/ci_github)\n- [`deployctl`](https://docs.deno.com/deploy/manual/deployctl/)\n\n```highlight notranslate sh\ndeployctl deploy --project=<project-name> <application-file-name>\n```\n\nUnless you want to add a build step, we recommend that you select the Github integration.\n\nFor more details on the different ways to deploy on Deno Deploy and the different configuration options, read [here](https://docs.deno.com/deploy/manual/how-to-deploy).\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/firebase", "title": "Connect to Firebase", "description": "This tutorial covers how to connect to Firebase from an application deployed on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:30:07", "type": "overview", "page_metadata": {"ogTitle": "Connect to Firebase", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:title": "Connect to Firebase", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogSiteName": "Deno", "og:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "title": "Connect to Firebase", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "Connect to Firebase", "og:site_name": "Deno", "scrapeId": "e5ea00c2-f358-4372-bf79-b930b6aca02a", "sourceURL": "https://docs.deno.com/deploy/manual/firebase", "url": "https://docs.deno.com/deploy/manual/firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connect to Firebase\"?\n\nAssistant: Here are some code examples:\n\n### Firebase Configuration Object\n```yaml\nvar firebaseConfig = {\n     apiKey: \"APIKEY\",\n     authDomain: \"example-12345.firebaseapp.com\",\n     projectId: \"example-12345\",\n     storageBucket: \"example-12345.appspot.com\",\n     messagingSenderId: \"1234567890\",\n     appId: \"APPID\",\n};\n```\n\n### Firebase Configuration JSON String\n```yaml\n{\n     \"apiKey\": \"APIKEY\",\n     \"authDomain\": \"example-12345.firebaseapp.com\",\n     \"projectId\": \"example-12345\",\n     \"storageBucket\": \"example-12345.appspot.com\",\n     \"messagingSenderId\": \"1234567890\",\n     \"appId\": \"APPID\"\n}\n```\n\n### Importing Polyfills\n```yaml\nimport \"https://deno.land/x/xhr@0.1.1/mod.ts\";\nimport { installGlobals } from \"https://deno.land/x/virtualstorage@0.1.0/mod.ts\";\ninstallGlobals();\n```\n\n### Firebase Imports\n```yaml\nimport firebase from \"https://esm.sh/firebase@9.17.0/app\";\nimport \"https://esm.sh/firebase@9.17.0/auth\";\nimport \"https://esm.sh/firebase@9.17.0/firestore\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/firebase", "title": "Connect to Firebase", "description": "This tutorial covers how to connect to Firebase from an application deployed on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:30:07", "type": "code_examples", "page_metadata": {"ogTitle": "Connect to Firebase", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:title": "Connect to Firebase", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogSiteName": "Deno", "og:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "title": "Connect to Firebase", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "Connect to Firebase", "og:site_name": "Deno", "scrapeId": "e5ea00c2-f358-4372-bf79-b930b6aca02a", "sourceURL": "https://docs.deno.com/deploy/manual/firebase", "url": "https://docs.deno.com/deploy/manual/firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connect to Firebase\"?\n\nAssistant: Here are the recommended best practices:\n\n• Double check current versions of packages as they may not be up-to-date.\n• Use the web libraries for Firebase under Deno Deploy.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/firebase", "title": "Connect to Firebase", "description": "This tutorial covers how to connect to Firebase from an application deployed on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:30:07", "type": "best_practices", "page_metadata": {"ogTitle": "Connect to Firebase", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:title": "Connect to Firebase", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogSiteName": "Deno", "og:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "title": "Connect to Firebase", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "Connect to Firebase", "og:site_name": "Deno", "scrapeId": "e5ea00c2-f358-4372-bf79-b930b6aca02a", "sourceURL": "https://docs.deno.com/deploy/manual/firebase", "url": "https://docs.deno.com/deploy/manual/firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno documentation\"?\n\nAssistant: We welcome and appreciate contributions to the Deno documentation. If you find an issue, or want to add to the docs, each page has an 'Edit this page' button at the bottom of the page.\n\nHere's a detailed explanation:\n\n\n## Contribution Guidelines\nWe welcome and appreciate contributions to the Deno documentation. If you find an issue, or want to add to the docs, each page has an 'Edit this page' button at the bottom of the page. Clicking this button will take you to the source file for that page in the Deno docs repository. You can then make your changes and submit a pull request.\n\n## Generated Pages\nSome pages in the Deno documentation are generated from source files in the Deno repository. These pages are not directly editable:\n\n- The API reference pages are generated from type definitions in the Deno repository.\n- The CLI reference pages for each individual command are generated from source files in the Deno repository.\n\n## Reporting Issues\nIf you find an issue with one of these pages, you can either submit a pull request to the Deno repository. Or raise an issue in the Deno docs repository and we'll get it fixed.\n\n## Feedback\nDid you find what you needed? Yes/No [Edit this page](https://github.com/denoland/docs/edit/main/runtime/contributing/docs.md)\n\nThank you! Feedback received. ✅\n\nAny additional comments? (optional)\n\nEmail address (optional)\n\nSend additional feedback\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/docs", "title": "Deno documentation", "description": "We welcome and appreciate contributions to the Deno documentation. If you find an issue, or want to add to the docs, each page has an 'Edit this page' button at the bottom of the page.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:30:15", "type": "overview", "page_metadata": {"twitter:title": "Deno documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:title": "Deno documentation", "twitter:card": "summary_large_image", "title": "Deno documentation", "ogTitle": "Deno documentation", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "language": "en", "scrapeId": "205d23cc-9e72-4e49-85d7-7bf0aab36529", "sourceURL": "https://docs.deno.com/runtime/contributing/docs", "url": "https://docs.deno.com/runtime/contributing/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno documentation\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the 'Edit this page' button for contributions.\n• Submit pull requests for issues found in the documentation.\n• Raise issues in the Deno docs repository for generated pages.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/docs", "title": "Deno documentation", "description": "We welcome and appreciate contributions to the Deno documentation. If you find an issue, or want to add to the docs, each page has an 'Edit this page' button at the bottom of the page.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:30:15", "type": "best_practices", "page_metadata": {"twitter:title": "Deno documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:title": "Deno documentation", "twitter:card": "summary_large_image", "title": "Deno documentation", "ogTitle": "Deno documentation", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "language": "en", "scrapeId": "205d23cc-9e72-4e49-85d7-7bf0aab36529", "sourceURL": "https://docs.deno.com/runtime/contributing/docs", "url": "https://docs.deno.com/runtime/contributing/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This module provides an implementation of a subset of the W3C Web Performance APIs as well as additional APIs for Node.js-specific performance measurements.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:perf_hooks\";\n```\n\nThis module provides an implementation of a subset of the W3C [Web Performance APIs](https://w3c.github.io/perf-timing-primer/) as well as additional APIs for Node.js-specific performance measurements.\n\nNode.js supports the following [Web Performance APIs](https://w3c.github.io/perf-timing-primer/):\n\n- [High Resolution Time](https://www.w3.org/TR/hr-time-2)\n- [Performance Timeline](https://w3c.github.io/performance-timeline/)\n- [User Timing](https://www.w3.org/TR/user-timing/)\n- [Resource Timing](https://www.w3.org/TR/resource-timing-2/)\n\n```highlight notranslate js\nimport { PerformanceObserver, performance } from 'node:perf_hooks';\n\nconst obs = new PerformanceObserver((items) => {\n  console.log(items.getEntries()[0].duration);\n  performance.clearMarks();\n});\nobs.observe({ type: 'measure' });\nperformance.measure('Start to Now');\n\nperformance.mark('A');\ndoSomeLongRunningProcess(() => {\n  performance.measure('A to Now', 'A');\n\n  performance.mark('B');\n  performance.measure('A to B', 'A', 'B');\n});\n```\n\n## Classes\n### Classes\n\n- [PerformanceEntry](https://docs.deno.com/api/node/perf_hooks/~/PerformanceEntry \"PerformanceEntry\")\n\nThe constructor of this class is not exposed to users directly.\n\n- [detail](https://docs.deno.com/api/node/perf_hooks/~/PerformanceEntry#property_detail)\n- [duration](https://docs.deno.com/api/node/perf_hooks/~/PerformanceEntry#property_duration)\n- [entryType](https://docs.deno.com/api/node/perf_hooks/~/PerformanceEntry#property_entrytype)\n- [name](https://docs.deno.com/api/node/perf_hooks/~/PerformanceEntry#property_name)\n- [startTime](https://docs.deno.com/api/node/perf_hooks/~/PerformanceEntry#property_starttime)\n- [toJSON](https://docs.deno.com/api/node/perf_hooks/~/PerformanceEntry#method_tojson_0)\n\n- [PerformanceMark](https://docs.deno.com/api/node/perf_hooks/~/PerformanceMark \"PerformanceMark\")\n\nExposes marks created via the `Performance.mark()` method.\n\n- [duration](https://docs.deno.com/api/node/perf_hooks/~/PerformanceMark#property_duration)\n- [entryType](https://docs.deno.com/api/node/perf_hooks/~/PerformanceMark#property_entrytype)\n\n- [PerformanceMeasure](https://docs.deno.com/api/node/perf_hooks/~/PerformanceMeasure \"PerformanceMeasure\")\n\nExposes measures created via the `Performance.measure()` method.\n\n- [entryType](https://docs.deno.com/api/node/perf_hooks/~/PerformanceMeasure#property_entrytype)\n\n- [PerformanceNodeTiming](https://docs.deno.com/api/node/perf_hooks/~/PerformanceNodeTiming \"PerformanceNodeTiming\")\n\n_This property is an extension by Node.js. It is not available in Web browsers._\n\n- [bootstrapComplete](https://docs.deno.com/api/node/perf_hooks/~/PerformanceNodeTiming#property_bootstrapcomplete)\n- [entryType](https://docs.deno.com/api/node/perf_hooks/~/PerformanceNodeTiming#property_entrytype)\n- [environment](https://docs.deno.com/api/node/perf_hooks/~/PerformanceNodeTiming#property_environment)\n- [idleTime](https://docs.deno.com/api/node/perf_hooks/~/PerformanceNodeTiming#property_idletime)\n- [loopExit](https://docs.deno.com/api/node/perf_hooks/~/PerformanceNodeTiming#property_loopexit)\n- [loopStart](https://docs.deno.com/api/node/perf_hooks/~/PerformanceNodeTiming#property_loopstart)\n- [nodeStart](https://docs.deno.com/api/node/perf_hooks/~/PerformanceNodeTiming#property_nodestart)\n- [v8Start](https://docs.deno.com/api/node/perf_hooks/~/PerformanceNodeTiming#property_v8start)\n\n- [PerformanceObserver](https://docs.deno.com/api/node/perf_hooks/~/PerformanceObserver \"PerformanceObserver\")\n\nNo documentation available\n\n- [disconnect](https://docs.deno.com/api/node/perf_hooks/~/PerformanceObserver#method_disconnect_0)\n- [observe](https://docs.deno.com/api/node/perf_hooks/~/PerformanceObserver#method_observe_0)\n\n- [PerformanceObserverEntryList](https://docs.deno.com/api/node/perf_hooks/~/PerformanceObserverEntryList \"PerformanceObserverEntryList\")\n\nNo documentation available\n\n- [getEntries](https://docs.deno.com/api/node/perf_hooks/~/PerformanceObserverEntryList#method_getentries_0)\n- [getEntriesByName](https://docs.deno.com/api/node/perf_hooks/~/PerformanceObserverEntryList#method_getentriesbyname_0)\n- [getEntriesByType](https://docs.deno.com/api/node/perf_hooks/~/PerformanceObserverEntryList#method_getentriesbytype_0)\n\n- [PerformanceResourceTiming](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming \"PerformanceResourceTiming\")\n\nProvides detailed network timing data regarding the loading of an application's resources.\n\n- [connectEnd](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_connectend)\n- [connectStart](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_connectstart)\n- [decodedBodySize](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_decodedbodysize)\n- [domainLookupEnd](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_domainlookupend)\n- [domainLookupStart](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_domainlookupstart)\n- [encodedBodySize](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_encodedbodysize)\n- [entryType](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_entrytype)\n- [fetchStart](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_fetchstart)\n- [redirectEnd](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_redirectend)\n- [redirectStart](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_redirectstart)\n- [requestStart](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_requeststart)\n- [responseEnd](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_responseend)\n- [secureConnectionStart](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_secureconnectionstart)\n- [toJSON](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#method_tojson_0)\n- [transferSize](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_transfersize)\n- [workerStart](https://docs.deno.com/api/node/perf_hooks/~/PerformanceResourceTiming#property_workerstart)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/perf_hooks", "title": "Usage in Deno", "description": "This module provides an implementation of a subset of the W3C Web Performance APIs as well as additional APIs for Node.js-specific performance measurements.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:30:43", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "perf_hooks - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:title": "perf_hooks - Node documentation", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "perf_hooks - Node documentation", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:image": "/img/og.webp", "language": "en", "title": "perf_hooks - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:type": "article", "scrapeId": "f424478a-cb8d-4d43-9075-061382ff4bd1", "sourceURL": "https://docs.deno.com/api/node/perf_hooks", "url": "https://docs.deno.com/api/node/perf_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Basic Usage Example\n```yaml\n```highlight notranslate typescript\nimport * as mod from \"node:perf_hooks\";\n```\n\n```highlight notranslate js\nimport { PerformanceObserver, performance } from 'node:perf_hooks';\n\nconst obs = new PerformanceObserver((items) => {\n  console.log(items.getEntries()[0].duration);\n  performance.clearMarks();\n});\nobs.observe({ type: 'measure' });\nperformance.measure('Start to Now');\n\nperformance.mark('A');\ndoSomeLongRunningProcess(() => {\n  performance.measure('A to Now', 'A');\n\n  performance.mark('B');\n  performance.measure('A to B', 'A', 'B');\n});\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/perf_hooks", "title": "Usage in Deno", "description": "This module provides an implementation of a subset of the W3C Web Performance APIs as well as additional APIs for Node.js-specific performance measurements.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:30:43", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "perf_hooks - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:title": "perf_hooks - Node documentation", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "perf_hooks - Node documentation", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:image": "/img/og.webp", "language": "en", "title": "perf_hooks - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:type": "article", "scrapeId": "f424478a-cb8d-4d43-9075-061382ff4bd1", "sourceURL": "https://docs.deno.com/api/node/perf_hooks", "url": "https://docs.deno.com/api/node/perf_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use PerformanceObserver to monitor performance measurements effectively.\n• Clear marks after measuring to avoid confusion in subsequent measurements.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/perf_hooks", "title": "Usage in Deno", "description": "This module provides an implementation of a subset of the W3C Web Performance APIs as well as additional APIs for Node.js-specific performance measurements.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:30:43", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "perf_hooks - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:title": "perf_hooks - Node documentation", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "perf_hooks - Node documentation", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:image": "/img/og.webp", "language": "en", "title": "perf_hooks - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:type": "article", "scrapeId": "f424478a-cb8d-4d43-9075-061382ff4bd1", "sourceURL": "https://docs.deno.com/api/node/perf_hooks", "url": "https://docs.deno.com/api/node/perf_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the node:stream module in Deno, including classes, functions, interfaces, type aliases, and variables related to stream handling.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:stream\";\n```\n\nA stream is an abstract interface for working with streaming data in Node.js.\nThe `node:stream` module provides an API for implementing the stream interface.\n\nThere are many stream objects provided by Node.js. For instance, a [request to an HTTP server](https://nodejs.org/docs/latest-v22.x/api/http.html#class-httpincomingmessage)\nand [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) are both stream instances.\n\nStreams can be readable, writable, or both. All streams are instances of [`EventEmitter`](https://nodejs.org/docs/latest-v22.x/api/events.html#class-eventemitter).\n\nTo access the `node:stream` module:\n\n```highlight notranslate js\nimport stream from 'node:stream';\n```\n\nThe `node:stream` module is useful for creating new types of stream instances.\nIt is usually not necessary to use the `node:stream` module to consume streams.\n\n## Classes\nc\n\nN\n\n[default](https://docs.deno.com/api/node/stream/~/default \"default\")\n\nNo documentation available\n\n- [compose](https://docs.deno.com/api/node/stream/~/default#method_compose_0)\n- [pipe](https://docs.deno.com/api/node/stream/~/default#method_pipe_0)\n\nc\n\n[default.Duplex](https://docs.deno.com/api/node/stream/~/default.Duplex \"default.Duplex\")\n\nDuplex streams are streams that implement both the `Readable` and `Writable` interfaces.\n\n- [\\_destroy](https://docs.deno.com/api/node/stream/~/default.Duplex#method__destroy_0)\n- [\\_final](https://docs.deno.com/api/node/stream/~/default.Duplex#method__final_0)\n- [\\_write](https://docs.deno.com/api/node/stream/~/default.Duplex#method__write_0)\n- [\\_writev](https://docs.deno.com/api/node/stream/~/default.Duplex#method__writev_0)\n- [addListener](https://docs.deno.com/api/node/stream/~/default.Duplex#method_addlistener_0)\n- [allowHalfOpen](https://docs.deno.com/api/node/stream/~/default.Duplex#property_allowhalfopen)\n- [closed](https://docs.deno.com/api/node/stream/~/default.Duplex#property_closed)\n- [cork](https://docs.deno.com/api/node/stream/~/default.Duplex#method_cork_0)\n- [emit](https://docs.deno.com/api/node/stream/~/default.Duplex#method_emit_0)\n- [end](https://docs.deno.com/api/node/stream/~/default.Duplex#method_end_0)\n- [errored](https://docs.deno.com/api/node/stream/~/default.Duplex#property_errored)\n- [from](https://docs.deno.com/api/node/stream/~/default.Duplex#method_from_0)\n- [fromWeb](https://docs.deno.com/api/node/stream/~/default.Duplex#method_fromweb_0)\n- [on](https://docs.deno.com/api/node/stream/~/default.Duplex#method_on_0)\n- [once](https://docs.deno.com/api/node/stream/~/default.Duplex#method_once_0)\n- [prependListener](https://docs.deno.com/api/node/stream/~/default.Duplex#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/stream/~/default.Duplex#method_prependoncelistener_0)\n- [removeListener](https://docs.deno.com/api/node/stream/~/default.Duplex#method_removelistener_0)\n- [setDefaultEncoding](https://docs.deno.com/api/node/stream/~/default.Duplex#method_setdefaultencoding_0)\n- [toWeb](https://docs.deno.com/api/node/stream/~/default.Duplex#method_toweb_0)\n- [uncork](https://docs.deno.com/api/node/stream/~/default.Duplex#method_uncork_0)\n- [writable](https://docs.deno.com/api/node/stream/~/default.Duplex#property_writable)\n- [writableCorked](https://docs.deno.com/api/node/stream/~/default.Duplex#property_writablecorked)\n- [writableEnded](https://docs.deno.com/api/node/stream/~/default.Duplex#property_writableended)\n- [writableFinished](https://docs.deno.com/api/node/stream/~/default.Duplex#property_writablefinished)\n- [writableHighWaterMark](https://docs.deno.com/api/node/stream/~/default.Duplex#property_writablehighwatermark)\n- [writableLength](https://docs.deno.com/api/node/stream/~/default.Duplex#property_writablelength)\n- [writableNeedDrain](https://docs.deno.com/api/node/stream/~/default.Duplex#property_writableneeddrain)\n- [writableObjectMode](https://docs.deno.com/api/node/stream/~/default.Duplex#property_writableobjectmode)\n- [write](https://docs.deno.com/api/node/stream/~/default.Duplex#method_write_0)\n\nc\n\n[default.PassThrough](https://docs.deno.com/api/node/stream/~/default.PassThrough \"default.PassThrough\")\n\nThe `stream.PassThrough` class is a trivial implementation of a `Transform` stream that simply passes the input bytes across to the output. Its purpose is primarily for examples and testing, but there are some use cases where `stream.PassThrough` is useful as a building block for novel sorts of streams.\n\nc\n\n[default.Readable](https://docs.deno.com/api/node/stream/~/default.Readable \"default.Readable\")\n\nNo documentation available\n\n- [fromWeb](https://docs.deno.com/api/node/stream/~/default.Readable#method_fromweb_0)\n- [toWeb](https://docs.deno.com/api/node/stream/~/default.Readable#method_toweb_0)\n\nc\n\n[default.Stream](https://docs.deno.com/api/node/stream/~/default.Stream \"default.Stream\")\n\nNo documentation available\n\nc\n\n[default.Transform](https://docs.deno.com/api/node/stream/~/default.Transform \"default.Transform\")\n\nTransform streams are `Duplex` streams where the output is in some way related to the input. Like all `Duplex` streams, `Transform` streams implement both the `Readable` and `Writable` interfaces.\n\n- [\\_flush](https://docs.deno.com/api/node/stream/~/default.Transform#method__flush_0)\n- [\\_transform](https://docs.deno.com/api/node/stream/~/default.Transform#method__transform_0)\n\nc\n\n[default.Writable](https://docs.deno.com/api/node/stream/~/default.Writable \"default.Writable\")\n\nNo documentation available\n\n- [fromWeb](https://docs.deno.com/api/node/stream/~/default.Writable#method_fromweb_0)\n- [toWeb](https://docs.deno.com/api/node/stream/~/default.Writable#method_toweb_0)\n\nc\n\nN\n\n[internal](https://docs.deno.com/api/node/stream/~/internal \"internal\")\n\nNo documentation available\n\n- [compose](https://docs.deno.com/api/node/stream/~/internal#method_compose_0)\n- [pipe](https://docs.deno.com/api/node/stream/~/internal#method_pipe_0)\n\nc\n\n[internal.Duplex](https://docs.deno.com/api/node/stream/~/internal.Duplex \"internal.Duplex\")\n\nDuplex streams are streams that implement both the `Readable` and `Writable` interfaces.\n\n- [\\_destroy](https://docs.deno.com/api/node/stream/~/internal.Duplex#method__destroy_0)\n- [\\_final](https://docs.deno.com/api/node/stream/~/internal.Duplex#method__final_0)\n- [\\_write](https://docs.deno.com/api/node/stream/~/internal.Duplex#method__write_0)\n- [\\_writev](https://docs.deno.com/api/node/stream/~/internal.Duplex#method__writev_0)\n- [addListener](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_addlistener_0)\n- [allowHalfOpen](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_allowhalfopen)\n- [closed](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_closed)\n- [cork](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_cork_0)\n- [emit](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_emit_0)\n- [end](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_end_0)\n- [errored](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_errored)\n- [from](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_from_0)\n- [fromWeb](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_fromweb_0)\n- [on](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_on_0)\n- [once](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_once_0)\n- [prependListener](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_prependoncelistener_0)\n- [removeListener](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_removelistener_0)\n- [setDefaultEncoding](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_setdefaultencoding_0)\n- [toWeb](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_toweb_0)\n- [uncork](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_uncork_0)\n- [writable](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_writable)\n- [writableCorked](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_writablecorked)\n- [writableEnded](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_writableended)\n- [writableFinished](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_writablefinished)\n- [writableHighWaterMark](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_writablehighwatermark)\n- [writableLength](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_writablelength)\n- [writableNeedDrain](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_writableneeddrain)\n- [writableObjectMode](https://docs.deno.com/api/node/stream/~/internal.Duplex#property_writableobjectmode)\n- [write](https://docs.deno.com/api/node/stream/~/internal.Duplex#method_write_0)\n\nc\n\n[internal.PassThrough](https://docs.deno.com/api/node/stream/~/internal.PassThrough \"internal.PassThrough\")\n\nThe `stream.PassThrough` class is a trivial implementation of a `Transform` stream that simply passes the input bytes across to the output. Its purpose is primarily for examples and testing, but there are some use cases where `stream.PassThrough` is useful as a building block for novel sorts of streams.\n\nc\n\n[internal.Readable](https://docs.deno.com/api/node/stream/~/internal.Readable \"internal.Readable\")\n\nNo documentation available\n\n- [fromWeb](https://docs.deno.com/api/node/stream/~/internal.Readable#method_fromweb_0)\n- [toWeb](https://docs.deno.com/api/node/stream/~/internal.Readable#method_toweb_0)\n\nc\n\n[internal.Stream](https://docs.deno.com/api/node/stream/~/internal.Stream \"internal.Stream\")\n\nNo documentation available\n\nc\n\n[internal.Transform](https://docs.deno.com/api/node/stream/~/internal.Transform \"internal.Transform\")\n\nTransform streams are `Duplex` streams where the output is in some way related to the input. Like all `Duplex` streams, `Transform` streams implement both the `Readable` and `Writable` interfaces.\n\n- [\\_flush](https://docs.deno.com/api/node/stream/~/internal.Transform#method__flush_0)\n- [\\_transform](https://docs.deno.com/api/node/stream/~/internal.Transform#method__transform_0)\n\nc\n\n[internal.Writable](https://docs.deno.com/api/node/stream/~/internal.Writable \"internal.Writable\")\n\nNo documentation available\n\n- [fromWeb](https://docs.deno.com/api/node/stream/~/internal.Writable#method_fromweb_0)\n- [toWeb](https://docs.deno.com/api/node/stream/~/internal.Writable#method_toweb_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/stream", "title": "Usage in Deno", "description": "This page covers the usage of the node:stream module in Deno, including classes, functions, interfaces, type aliases, and variables related to stream handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:33:40", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "title": "stream - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:title": "stream - Node documentation", "ogTitle": "stream - Node documentation", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:title": "stream - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "scrapeId": "e1c0fb02-e587-4e4c-8e4c-7d83fa574d74", "sourceURL": "https://docs.deno.com/api/node/stream", "url": "https://docs.deno.com/api/node/stream/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the stream module\n```yaml\nimport * as mod from \"node:stream\";\n```\n\n### Accessing the node:stream module\n```yaml\nimport stream from 'node:stream';\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/stream", "title": "Usage in Deno", "description": "This page covers the usage of the node:stream module in Deno, including classes, functions, interfaces, type aliases, and variables related to stream handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:33:40", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "title": "stream - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:title": "stream - Node documentation", "ogTitle": "stream - Node documentation", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:title": "stream - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "scrapeId": "e1c0fb02-e587-4e4c-8e4c-7d83fa574d74", "sourceURL": "https://docs.deno.com/api/node/stream", "url": "https://docs.deno.com/api/node/stream/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• It is usually not necessary to use the node:stream module to consume streams.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/stream", "title": "Usage in Deno", "description": "This page covers the usage of the node:stream module in Deno, including classes, functions, interfaces, type aliases, and variables related to stream handling.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:33:40", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "title": "stream - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:title": "stream - Node documentation", "ogTitle": "stream - Node documentation", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:title": "stream - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "scrapeId": "e1c0fb02-e587-4e4c-8e4c-7d83fa574d74", "sourceURL": "https://docs.deno.com/api/node/stream", "url": "https://docs.deno.com/api/node/stream/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connect to DynamoDB\"?\n\nAssistant: Amazon DynamoDB is a fully managed NoSQL database. To persist data to DynamoDB, follow the steps below: The tutorial assumes that you have an AWS and Deno Deploy account.\n\nHere's a detailed explanation:\n\n\n## Gather credentials from DynamoDB\nThe first step in the process is to generate AWS credentials to programmatically access DynamoDB.\n\nGenerate Credentials:\n\n1. Go to [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/) and go to the \"Users\" section.\n2. Click on the **Add user** button, fill the **User name** field (maybe use `denamo`), and select **Programmatic access** type.\n3. Click on **Next: Permissions**, then on **Attach existing policies** **directly**, search for `AmazonDynamoDBFullAccess` and select it.\n4. Click on **Next: Tags**, then on **Next: Review** and finally **Create** **user**.\n5. Click on **Download .csv** button to download the credentials.\n\n## Create a project in Deno Deploy\nNext, let's create a project in Deno Deploy and set it up with the requisite environment variables:\n\n1. Go to [https://dash.deno.com/new](https://dash.deno.com/new) (Sign in with GitHub if you didn't already) and click on **\\+ Empty Project** under **Deploy** **from the command line**.\n2. Now click on the **Settings** button available on the project page.\n3. Navigate to **Environment Variables** Section and add the following secrets.\n\n- `AWS_ACCESS_KEY_ID` \\- Use the value that's available under **Access key id** column in the downloaded CSV.\n- `AWS_SECRET_ACCESS_KEY` \\- Use the value that's available under **Secret access** **key** column in the downloaded CSV.\n\n## Write code that connects to DynamoDB\nAWS has an [official SDK](https://www.npmjs.com/package/@aws-sdk/client-dynamodb) that works with browsers. As most Deno Deploy's APIs are similar to browsers', the same SDK works with Deno Deploy. To use the SDK in Deno, import from a cdn like below and create a client:\n\n```highlight notranslate js\nimport {\n  DynamoDBClient,\n  GetItemCommand,\n  PutItemCommand,\n} from \"https://esm.sh/@aws-sdk/client-dynamodb?dts\";\n\n// Create a client instance by providing your region information.\n// The credentials are automatically obtained from environment variables which\n// we set during our project creation step on Deno Deploy, so we don't have to\n// pass them manually here.\nconst client = new ApiFactory().makeNew(DynamoDB);\n\nserve({\n  \"/songs\": handleRequest,\n});\n\nasync function handleRequest(request) {\n  // async/await.\n  try {\n    const data = await client.send(command);\n    // process data.\n  } catch (error) {\n    // error handling.\n  } finally {\n    // finally.\n  }\n}\n``\n\n## Deploy application to Deno Deploy\nOnce you have finished writing your application, you can deploy it on Deno Deploy.\n\nTo do this, go back to your project page at `https://dash.deno.com/projects/<project-name>`.\n\nYou should see a couple of options to deploy:\n\n- [Github integration](https://docs.deno.com/deploy/manual/ci_github)\n- [`deployctl`](https://docs.deno.com/deploy/manual/deployctl/)\n\n\n```highlight notranslate sh\ndeployctl deploy --project=<project-name> <application-file-name>\n```\n\nUnless you want to add a build step, we recommend that you select the Github integration.\n\nFor more details on the different ways to deploy on Deno Deploy and the different configuration options, read [here](https://docs.deno.com/deploy/manual/how-to-deploy).\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/dynamodb", "title": "Connect to DynamoDB", "description": "Amazon DynamoDB is a fully managed NoSQL database. To persist data to DynamoDB, follow the steps below: The tutorial assumes that you have an AWS and Deno Deploy account.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:33:58", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "twitter:site": "@deno_land", "og:title": "Connect to DynamoDB", "twitter:title": "Connect to DynamoDB", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "title": "Connect to DynamoDB", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Connect to DynamoDB", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "d15776eb-8b5c-4579-b659-624185459ff2", "sourceURL": "https://docs.deno.com/deploy/manual/dynamodb", "url": "https://docs.deno.com/deploy/manual/dynamodb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connect to DynamoDB\"?\n\nAssistant: Here are some code examples:\n\n### Connecting to DynamoDB\n```yaml\nimport {\n  DynamoDBClient,\n  GetItemCommand,\n  PutItemCommand,\n} from \"https://esm.sh/@aws-sdk/client-dynamodb?dts\";\n\n// Create a client instance by providing your region information.\n// The credentials are automatically obtained from environment variables which\n// we set during our project creation step on Deno Deploy, so we don't have to\n// pass them manually here.\nconst client = new ApiFactory().makeNew(DynamoDB);\n\nserve({\n  \"/songs\": handleRequest,\n});\n\nasync function handleRequest(request) {\n  // async/await.\n  try {\n    const data = await client.send(command);\n    // process data.\n  } catch (error) {\n    // error handling.\n  } finally {\n    // finally.\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/dynamodb", "title": "Connect to DynamoDB", "description": "Amazon DynamoDB is a fully managed NoSQL database. To persist data to DynamoDB, follow the steps below: The tutorial assumes that you have an AWS and Deno Deploy account.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:33:58", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "twitter:site": "@deno_land", "og:title": "Connect to DynamoDB", "twitter:title": "Connect to DynamoDB", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "title": "Connect to DynamoDB", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Connect to DynamoDB", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "d15776eb-8b5c-4579-b659-624185459ff2", "sourceURL": "https://docs.deno.com/deploy/manual/dynamodb", "url": "https://docs.deno.com/deploy/manual/dynamodb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connect to DynamoDB\"?\n\nAssistant: Here are the recommended best practices:\n\n• Unless you want to add a build step, we recommend that you select the Github integration.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/dynamodb", "title": "Connect to DynamoDB", "description": "Amazon DynamoDB is a fully managed NoSQL database. To persist data to DynamoDB, follow the steps below: The tutorial assumes that you have an AWS and Deno Deploy account.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:33:58", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "twitter:site": "@deno_land", "og:title": "Connect to DynamoDB", "twitter:title": "Connect to DynamoDB", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "title": "Connect to DynamoDB", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "Connect to DynamoDB", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "d15776eb-8b5c-4579-b659-624185459ff2", "sourceURL": "https://docs.deno.com/deploy/manual/dynamodb", "url": "https://docs.deno.com/deploy/manual/dynamodb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"WebAssembly API Documentation\"?\n\nAssistant: This page provides an overview of the WebAssembly API, including classes, functions, interfaces, namespaces, and type aliases.\n\nHere's a detailed explanation:\n\n\n## Classes\nThe following classes are part of the WebAssembly API:\n\n- **WebAssembly.CompileError**: Indicates an error during WebAssembly decoding or validation.\n- **WebAssembly.Global**: Represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more `WebAssembly.Module` instances. This allows dynamic linking of multiple modules.\n  - [value](https://docs.deno.com/api/web/~/WebAssembly.Global#property_value)\n  - [valueOf](https://docs.deno.com/api/web/~/WebAssembly.Global#method_valueof_0)\n- **WebAssembly.Instance**: A stateful, executable instance of a `WebAssembly.Module`. Instance objects contain all the Exported WebAssembly functions that allow calling into WebAssembly code from JavaScript.\n  - [exports](https://docs.deno.com/api/web/~/WebAssembly.Instance#property_exports)\n- **WebAssembly.LinkError**: Indicates an error during module instantiation (besides traps from the start function).\n- **WebAssembly.Memory**: A resizable `ArrayBuffer` or `SharedArrayBuffer` that holds the raw bytes of memory accessed by a WebAssembly Instance.\n  - [buffer](https://docs.deno.com/api/web/~/WebAssembly.Memory#property_buffer)\n  - [grow](https://docs.deno.com/api/web/~/WebAssembly.Memory#method_grow_0)\n- **WebAssembly.Module**: Contains stateless WebAssembly code that has already been compiled by the browser — this can be efficiently shared with Workers, and instantiated multiple times.\n  - [customSections](https://docs.deno.com/api/web/~/WebAssembly.Module#method_customsections_0)\n  - [exports](https://docs.deno.com/api/web/~/WebAssembly.Module#method_exports_0)\n  - [imports](https://docs.deno.com/api/web/~/WebAssembly.Module#method_imports_0)\n- **WebAssembly.RuntimeError**: The error type that is thrown whenever WebAssembly specifies a trap.\n- **WebAssembly.Table**: A JavaScript wrapper object — an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.\n  - [get](https://docs.deno.com/api/web/~/WebAssembly.Table#method_get_0)\n  - [grow](https://docs.deno.com/api/web/~/WebAssembly.Table#method_grow_0)\n  - [length](https://docs.deno.com/api/web/~/WebAssembly.Table#property_length)\n  - [set](https://docs.deno.com/api/web/~/WebAssembly.Table#method_set_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/web/wasm", "title": "WebAssembly API Documentation", "description": "This page provides an overview of the WebAssembly API, including classes, functions, interfaces, namespaces, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:34:11", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "og:title": "Wasm - Web documentation", "ogSiteName": "Deno", "twitter:title": "Wasm - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Wasm - Web documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "title": "Wasm - Web documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:type": "article", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "e366b039-0e95-4699-b172-dfe64c783e03", "sourceURL": "https://docs.deno.com/api/web/wasm", "url": "https://docs.deno.com/api/web/wasm", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"WebAssembly API Documentation\"?\n\nAssistant: Here are some code examples:\n\n### WebAssembly.compile()\n```yaml\nWebAssembly.compile(binaryCode) // Compiles WebAssembly binary code into a WebAssembly.Module object.\n```\n\n### WebAssembly.instantiate()\n```yaml\nWebAssembly.instantiate(module) // Compiles and instantiates WebAssembly code.\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/web/wasm", "title": "WebAssembly API Documentation", "description": "This page provides an overview of the WebAssembly API, including classes, functions, interfaces, namespaces, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:34:11", "type": "code_examples", "page_metadata": {"ogImage": "/img/og.webp", "og:title": "Wasm - Web documentation", "ogSiteName": "Deno", "twitter:title": "Wasm - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Wasm - Web documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "title": "Wasm - Web documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:type": "article", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "e366b039-0e95-4699-b172-dfe64c783e03", "sourceURL": "https://docs.deno.com/api/web/wasm", "url": "https://docs.deno.com/api/web/wasm", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"WebAssembly API Documentation\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use WebAssembly.compile() for compiling binary code before instantiation.\n• Use WebAssembly.instantiateStreaming() for the most efficient way to load wasm code.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/wasm", "title": "WebAssembly API Documentation", "description": "This page provides an overview of the WebAssembly API, including classes, functions, interfaces, namespaces, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:34:11", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "og:title": "Wasm - Web documentation", "ogSiteName": "Deno", "twitter:title": "Wasm - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Wasm - Web documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "title": "Wasm - Web documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:type": "article", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "e366b039-0e95-4699-b172-dfe64c783e03", "sourceURL": "https://docs.deno.com/api/web/wasm", "url": "https://docs.deno.com/api/web/wasm", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the EventEmitter class in Deno, including examples and details about its methods and properties.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\nMuch of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called \"emitters\") emit named events that cause `Function` objects (\"listeners\") to be called.\n\nFor instance: a `net.Server` object emits an event each time a peer connects to it; a `fs.ReadStream` emits an event when the file is opened; a `stream` emits an event whenever data is available to be read.\n\nAll objects that emit events are instances of the `EventEmitter` class. These objects expose an `eventEmitter.on()` function that allows one or more functions to be attached to named events emitted by the object. Typically, event names are camel-cased strings but any valid JavaScript property key can be used.\n\nWhen the `EventEmitter` object emits an event, all of the functions attached to that specific event are called _synchronously_. Any values returned by the called listeners are _ignored_ and discarded.\n\n## Classes\n[EventEmitter.EventEmitterAsyncResource](https://docs.deno.com/api/node/events/~/EventEmitter.EventEmitterAsyncResource \"EventEmitter.EventEmitterAsyncResource\")\n\nIntegrates `EventEmitter` with `AsyncResource` for `EventEmitter` s that require manual async tracking. Specifically, all events emitted by instances of `events.EventEmitterAsyncResource` will run within its `async context`.\n\n- [asyncId](https://docs.deno.com/api/node/events/~/EventEmitter.EventEmitterAsyncResource#property_asyncid)\n- [asyncResource](https://docs.deno.com/api/node/events/~/EventEmitter.EventEmitterAsyncResource#property_asyncresource)\n- [emitDestroy](https://docs.deno.com/api/node/events/~/EventEmitter.EventEmitterAsyncResource#method_emitdestroy_0)\n- [triggerAsyncId](https://docs.deno.com/api/node/events/~/EventEmitter.EventEmitterAsyncResource#property_triggerasyncid)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/events", "title": "Usage in Deno", "description": "This page covers the usage of the EventEmitter class in Deno, including examples and details about its methods and properties.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:34:18", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogTitle": "events - Node documentation", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "events - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "title": "events - Node documentation", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "og:locale": "en_US", "og:site_name": "Deno", "twitter:title": "events - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "b968f43d-7652-45bb-96ca-73f116e6542c", "sourceURL": "https://docs.deno.com/api/node/events", "url": "https://docs.deno.com/api/node/events/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Basic EventEmitter Example\n```yaml\nimport { EventEmitter } from 'node:events';\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('an event occurred!');\n});\nmyEmitter.emit('event');\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/events", "title": "Usage in Deno", "description": "This page covers the usage of the EventEmitter class in Deno, including examples and details about its methods and properties.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:34:18", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogTitle": "events - Node documentation", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "events - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "title": "events - Node documentation", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "og:locale": "en_US", "og:site_name": "Deno", "twitter:title": "events - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "b968f43d-7652-45bb-96ca-73f116e6542c", "sourceURL": "https://docs.deno.com/api/node/events", "url": "https://docs.deno.com/api/node/events/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Event names should be camel-cased strings, but any valid JavaScript property key can be used.\n• Listeners are called synchronously when an event is emitted, and their return values are ignored.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/events", "title": "Usage in Deno", "description": "This page covers the usage of the EventEmitter class in Deno, including examples and details about its methods and properties.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:34:18", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogTitle": "events - Node documentation", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "events - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "title": "events - Node documentation", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "og:locale": "en_US", "og:site_name": "Deno", "twitter:title": "events - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "b968f43d-7652-45bb-96ca-73f116e6542c", "sourceURL": "https://docs.deno.com/api/node/events", "url": "https://docs.deno.com/api/node/events/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page provides information on how to use the `node:crypto` module in Deno, including code examples and descriptions of classes, functions, interfaces, namespaces, and type aliases.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:crypto\";\n```\n\nThe `node:crypto` module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.\n\n## Classes\n### Classes\n\n- [Certificate](https://docs.deno.com/api/node/crypto/~/Certificate \"Certificate\")\n  - No documentation available\n  - Methods: [exportChallenge](https://docs.deno.com/api/node/crypto/~/Certificate#method_exportchallenge_0), [exportPublicKey](https://docs.deno.com/api/node/crypto/~/Certificate#method_exportpublickey_0), [verifySpkac](https://docs.deno.com/api/node/crypto/~/Certificate#method_verifyspkac_0)\n\n- [Cipher](https://docs.deno.com/api/node/crypto/~/Cipher \"Cipher\")\n  - Instances of the `Cipher` class are used to encrypt data. The class can be used in one of two ways:\n    - [final](https://docs.deno.com/api/node/crypto/~/Cipher#method_final_0)\n    - [setAutoPadding](https://docs.deno.com/api/node/crypto/~/Cipher#method_setautopadding_0)\n    - [update](https://docs.deno.com/api/node/crypto/~/Cipher#method_update_0)\n\n- [Decipher](https://docs.deno.com/api/node/crypto/~/Decipher \"Decipher\")\n  - Instances of the `Decipher` class are used to decrypt data. The class can be used in one of two ways:\n    - [final](https://docs.deno.com/api/node/crypto/~/Decipher#method_final_0)\n    - [setAutoPadding](https://docs.deno.com/api/node/crypto/~/Decipher#method_setautopadding_0)\n    - [update](https://docs.deno.com/api/node/crypto/~/Decipher#method_update_0)\n\n- [DiffieHellman](https://docs.deno.com/api/node/crypto/~/DiffieHellman \"DiffieHellman\")\n  - The `DiffieHellman` class is a utility for creating Diffie-Hellman key exchanges.\n  - Methods: [computeSecret](https://docs.deno.com/api/node/crypto/~/DiffieHellman#method_computesecret_0), [generateKeys](https://docs.deno.com/api/node/crypto/~/DiffieHellman#method_generatekeys_0), [getGenerator](https://docs.deno.com/api/node/crypto/~/DiffieHellman#method_getgenerator_0), [getPrime](https://docs.deno.com/api/node/crypto/~/DiffieHellman#method_getprime_0), [getPrivateKey](https://docs.deno.com/api/node/crypto/~/DiffieHellman#method_getprivatekey_0), [getPublicKey](https://docs.deno.com/api/node/crypto/~/DiffieHellman#method_getpublickey_0), [setPrivateKey](https://docs.deno.com/api/node/crypto/~/DiffieHellman#method_setprivatekey_0), [setPublicKey](https://docs.deno.com/api/node/crypto/~/DiffieHellman#method_setpublickey_0), [verifyError](https://docs.deno.com/api/node/crypto/~/DiffieHellman#property_verifyerror)\n\n- [ECDH](https://docs.deno.com/api/node/crypto/~/ECDH \"ECDH\")\n  - No documentation available\n  - Methods: [computeSecret](https://docs.deno.com/api/node/crypto/~/ECDH#method_computesecret_0), [convertKey](https://docs.deno.com/api/node/crypto/~/ECDH#method_convertkey_0), [generateKeys](https://docs.deno.com/api/node/crypto/~/ECDH#method_generatekeys_0), [getPrivateKey](https://docs.deno.com/api/node/crypto/~/ECDH#method_getprivatekey_0), [getPublicKey](https://docs.deno.com/api/node/crypto/~/ECDH#method_getpublickey_0), [setPrivateKey](https://docs.deno.com/api/node/crypto/~/ECDH#method_setprivatekey_0)\n\n- [Hash](https://docs.deno.com/api/node/crypto/~/Hash \"Hash\")\n  - The `Hash` class is a utility for creating hash digests of data. It can be used in one of two ways:\n    - [copy](https://docs.deno.com/api/node/crypto/~/Hash#method_copy_0)\n    - [digest](https://docs.deno.com/api/node/crypto/~/Hash#method_digest_0)\n    - [update](https://docs.deno.com/api/node/crypto/~/Hash#method_update_0)\n\n- [KeyObject](https://docs.deno.com/api/node/crypto/~/KeyObject \"KeyObject\")\n  - No documentation available\n  - Properties: [asymmetricKeyDetails](https://docs.deno.com/api/node/crypto/~/KeyObject#property_asymmetrickeydetails), [asymmetricKeySize](https://docs.deno.com/api/node/crypto/~/KeyObject#property_asymmetrickeysize), [asymmetricKeyType](https://docs.deno.com/api/node/crypto/~/KeyObject#property_asymmetrickeytype), [equals](https://docs.deno.com/api/node/crypto/~/KeyObject#method_equals_0), [export](https://docs.deno.com/api/node/crypto/~/KeyObject#method_export_0), [from](https://docs.deno.com/api/node/crypto/~/KeyObject#method_from_0), [symmetricKeySize](https://docs.deno.com/api/node/crypto/~/KeyObject#property_symmetrickeysize), [type](https://docs.deno.com/api/node/crypto/~/KeyObject#property_type)\n\n- [Sign](https://docs.deno.com/api/node/crypto/~/Sign \"Sign\")\n  - No documentation available\n  - Methods: [sign](https://docs.deno.com/api/node/crypto/~/Sign#method_sign_0), [update](https://docs.deno.com/api/node/crypto/~/Sign#method_update_0)\n\n- [Verify](https://docs.deno.com/api/node/crypto/~/Verify \"Verify\")\n  - The `Verify` class is a utility for verifying signatures. It can be used in one of two ways:\n    - [update](https://docs.deno.com/api/node/crypto/~/Verify#method_update_0)\n    - [verify](https://docs.deno.com/api/node/crypto/~/Verify#method_verify_0)\n\n- [X509Certificate](https://docs.deno.com/api/node/crypto/~/X509Certificate \"X509Certificate\")\n  - Encapsulates an X509 certificate and provides read-only access to its information.\n  - Properties: [ca](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_ca), [checkEmail](https://docs.deno.com/api/node/crypto/~/X509Certificate#method_checkemail_0), [checkHost](https://docs.deno.com/api/node/crypto/~/X509Certificate#method_checkhost_0), [checkIP](https://docs.deno.com/api/node/crypto/~/X509Certificate#method_checkip_0), [checkIssued](https://docs.deno.com/api/node/crypto/~/X509Certificate#method_checkissued_0), [checkPrivateKey](https://docs.deno.com/api/node/crypto/~/X509Certificate#method_checkprivatekey_0), [fingerprint](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_fingerprint), [fingerprint256](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_fingerprint256), [fingerprint512](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_fingerprint512), [infoAccess](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_infoaccess), [issuer](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_issuer), [issuerCertificate](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_issuercertificate), [keyUsage](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_keyusage), [publicKey](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_publickey), [raw](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_raw), [serialNumber](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_serialnumber), [subject](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_subject), [subjectAltName](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_subjectaltname), [toJSON](https://docs.deno.com/api/node/crypto/~/X509Certificate#method_tojson_0), [toLegacyObject](https://docs.deno.com/api/node/crypto/~/X509Certificate#method_tolegacyobject_0), [toString](https://docs.deno.com/api/node/crypto/~/X509Certificate#method_tostring_0), [validFrom](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_validfrom), [validTo](https://docs.deno.com/api/node/crypto/~/X509Certificate#property_validto), [verify](https://docs.deno.com/api/node/crypto/~/X509Certificate#method_verify_0)\n\n- [Hmac](https://docs.deno.com/api/node/crypto/~/Hmac \"Hmac\")\n  - The `Hmac` class is a utility for creating cryptographic HMAC digests. It can be used in one of two ways:\n    - [digest](https://docs.deno.com/api/node/crypto/~/Hmac#method_digest_0)\n    - [update](https://docs.deno.com/api/node/crypto/~/Hmac#method_update_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/crypto", "title": "Usage in Deno", "description": "This page provides information on how to use the `node:crypto` module in Deno, including code examples and descriptions of classes, functions, interfaces, namespaces, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:34:47", "type": "overview", "page_metadata": {"title": "crypto - Node documentation", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "crypto - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogTitle": "crypto - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:title": "crypto - Node documentation", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "57133933-cd43-4ed0-aeca-fe58c9009656", "sourceURL": "https://docs.deno.com/api/node/crypto", "url": "https://docs.deno.com/api/node/crypto/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### HMAC Example\n```yaml\n```highlight notranslate js\nconst { createHmac } = await import('node:crypto');\n\nconst secret = 'abcdefg';\nconst hash = createHmac('sha256', secret)\n               .update('I love cupcakes')\n               .digest('hex');\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/crypto", "title": "Usage in Deno", "description": "This page provides information on how to use the `node:crypto` module in Deno, including code examples and descriptions of classes, functions, interfaces, namespaces, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:34:47", "type": "code_examples", "page_metadata": {"title": "crypto - Node documentation", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "crypto - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogTitle": "crypto - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:title": "crypto - Node documentation", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "57133933-cd43-4ed0-aeca-fe58c9009656", "sourceURL": "https://docs.deno.com/api/node/crypto", "url": "https://docs.deno.com/api/node/crypto/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `createHmac` function for generating HMACs securely.\n• Always validate input data before processing it with cryptographic functions.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/crypto", "title": "Usage in Deno", "description": "This page provides information on how to use the `node:crypto` module in Deno, including code examples and descriptions of classes, functions, interfaces, namespaces, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:34:47", "type": "best_practices", "page_metadata": {"title": "crypto - Node documentation", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "crypto - Node documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogTitle": "crypto - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:title": "crypto - Node documentation", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "57133933-cd43-4ed0-aeca-fe58c9009656", "sourceURL": "https://docs.deno.com/api/node/crypto", "url": "https://docs.deno.com/api/node/crypto/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno 1.x to 2.x Migration Guide\"?\n\nAssistant: This guide covers the migration process from Deno 1.x to 2.x, focusing on backwards compatibility, dependency management, framework support, configuration changes, CLI changes, and API changes.\n\nHere's a detailed explanation:\n\n\n## Backwards compatibility with Node.js and npm\nDeno 2 is backwards compatible with Node.js and npm. This allows you to not only run Deno in your current Node.js projects, but also incrementally adopt pieces of Deno's all-in-one toolchain.\n\nFor example, you can use `deno install` on a Node.js project to install dependencies, run `deno fmt` to format code without needing Prettier, or use `deno lint` to check for common pitfalls instead of using ESLint.\n\nDeno 2 understands `package.json`, the `node_modules` directory, and even npm workspaces, allowing you to migrate your existing projects using ESM with little effort.\n\nFor better Node compatibility, npm packages are no longer installed by default when there is a package.json and instead running `deno install` is recommended. To get Deno 1.x behavior of auto-installing, add the following to your deno.json:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"nodeModulesDir\": \"auto\"\n}\n```\n\n[Read more on `Node.js support` page](https://docs.deno.com/runtime/fundamentals/node/)\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/migration_guide", "title": "Deno 1.x to 2.x Migration Guide", "description": "This guide covers the migration process from Deno 1.x to 2.x, focusing on backwards compatibility, dependency management, framework support, configuration changes, CLI changes, and API changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:34:58", "type": "overview", "page_metadata": {"twitter:title": "Deno 1.x to 2.x Migration Guide", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:title": "Deno 1.x to 2.x Migration Guide", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno 1.x to 2.x Migration Guide", "language": "en", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "title": "Deno 1.x to 2.x Migration Guide", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "9d7c99db-4482-45e7-8747-54e2606322fe", "sourceURL": "https://docs.deno.com/runtime/reference/migration_guide", "url": "https://docs.deno.com/runtime/reference/migration_guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno 1.x to 2.x Migration Guide\"?\n\nAssistant: Here are some code examples:\n\n### deno.json configuration for auto-installing npm packages\n```yaml\n{\n  \"nodeModulesDir\": \"auto\"\n}\n```\n\n### Private npm registry configuration\n```yaml\n@mycompany:registry=http://mycompany.com:8111/\nmycompany.com:8111/:_authToken=token\n```\n\n### Using esbuild for bundling\n```yaml\nimport * as esbuild from \"npm:esbuild\";\nimport { denoPlugins } from \"jsr:@luca/esbuild-deno-loader\";\n\nconst result = await esbuild.build({\n  plugins: [...denoPlugins()],\n  entryPoints: [\"https://deno.land/std@0.185.0/bytes/mod.ts\"],\n  outfile: \"./dist/bytes.esm.js\",\n  bundle: true,\n  format: \"esm\",\n});\n\nesbuild.stop();\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/migration_guide", "title": "Deno 1.x to 2.x Migration Guide", "description": "This guide covers the migration process from Deno 1.x to 2.x, focusing on backwards compatibility, dependency management, framework support, configuration changes, CLI changes, and API changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:34:58", "type": "code_examples", "page_metadata": {"twitter:title": "Deno 1.x to 2.x Migration Guide", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:title": "Deno 1.x to 2.x Migration Guide", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno 1.x to 2.x Migration Guide", "language": "en", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "title": "Deno 1.x to 2.x Migration Guide", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "9d7c99db-4482-45e7-8747-54e2606322fe", "sourceURL": "https://docs.deno.com/runtime/reference/migration_guide", "url": "https://docs.deno.com/runtime/reference/migration_guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno 1.x to 2.x Migration Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• For better Node compatibility, npm packages are no longer installed by default when there is a package.json; running `deno install` is recommended.\n• To keep the default Deno 1.x auto-installing behavior, set `nodeModulesDir` to `auto` in your deno.json.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/migration_guide", "title": "Deno 1.x to 2.x Migration Guide", "description": "This guide covers the migration process from Deno 1.x to 2.x, focusing on backwards compatibility, dependency management, framework support, configuration changes, CLI changes, and API changes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:34:58", "type": "best_practices", "page_metadata": {"twitter:title": "Deno 1.x to 2.x Migration Guide", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:title": "Deno 1.x to 2.x Migration Guide", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno 1.x to 2.x Migration Guide", "language": "en", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "title": "Deno 1.x to 2.x Migration Guide", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "9d7c99db-4482-45e7-8747-54e2606322fe", "sourceURL": "https://docs.deno.com/runtime/reference/migration_guide", "url": "https://docs.deno.com/runtime/reference/migration_guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of Buffer objects in Deno, including their creation, methods, and related classes and functions.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n`Buffer` objects are used to represent a fixed-length sequence of bytes. Many Node.js APIs support `Buffer` s.\n\nThe `Buffer` class is a subclass of JavaScript's [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) class and extends it with methods that cover additional use cases. Node.js APIs accept plain [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) s wherever `Buffer` s are supported as well.\n\nWhile the `Buffer` class is available within the global scope, it is still recommended to explicitly reference it via an import or require statement.\n\n## Classes\n### Classes\n\n#### [Blob](https://docs.deno.com/api/web/~/Blob \"Blob\")\nA [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) encapsulates immutable, raw data that can be safely shared across multiple worker threads.\n\n- [arrayBuffer](https://docs.deno.com/api/web/~/Blob#method_arraybuffer_0)\n- [bytes](https://docs.deno.com/api/web/~/Blob#method_bytes_0)\n- [size](https://docs.deno.com/api/web/~/Blob#property_size)\n- [slice](https://docs.deno.com/api/web/~/Blob#method_slice_0)\n- [stream](https://docs.deno.com/api/web/~/Blob#method_stream_0)\n- [text](https://docs.deno.com/api/web/~/Blob#method_text_0)\n- [type](https://docs.deno.com/api/web/~/Blob#property_type)\n\n#### [File](https://docs.deno.com/api/node/buffer/~/File \"File\")\nA [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) provides information about files.\n\n- [lastModified](https://docs.deno.com/api/node/buffer/~/File#property_lastmodified)\n- [name](https://docs.deno.com/api/node/buffer/~/File#property_name)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/buffer", "title": "Usage in Deno", "description": "This page covers the usage of Buffer objects in Deno, including their creation, methods, and related classes and functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:35:09", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "title": "buffer - Node documentation", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "buffer - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "buffer - Node documentation", "ogLocale": "en_US", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "buffer - Node documentation", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "cc394f05-d779-4bf7-8250-04ecc3dfdb12", "sourceURL": "https://docs.deno.com/api/node/buffer", "url": "https://docs.deno.com/api/node/buffer/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Buffer Creation Examples\n```yaml\nimport { Buffer } from 'node:buffer';\n\n// Creates a zero-filled Buffer of length 10.\nconst buf1 = Buffer.alloc(10);\n\n// Creates a Buffer of length 10,\n// filled with bytes which all have the value `1`.\nconst buf2 = Buffer.alloc(10, 1);\n\n// Creates an uninitialized buffer of length 10.\n// This is faster than calling Buffer.alloc() but the returned\n// Buffer instance might contain old data that needs to be\n// overwritten using fill(), write(), or other functions that fill the Buffer's\n// contents.\nconst buf3 = Buffer.allocUnsafe(10);\n\n// Creates a Buffer containing the bytes [1, 2, 3].\nconst buf4 = Buffer.from([1, 2, 3]);\n\n// Creates a Buffer containing the bytes [1, 1, 1, 1] – the entries\n// are all truncated using `(value &#x26; 255)` to fit into the range 0–255.\nconst buf5 = Buffer.from([257, 257.5, -255, '1']);\n\n// Creates a Buffer containing the UTF-8-encoded bytes for the string 'tést':\n// [0x74, 0xc3, 0xa9, 0x73, 0x74] (in hexadecimal notation)\n// [116, 195, 169, 115, 116] (in decimal notation)\nconst buf6 = Buffer.from('tést');\n\n// Creates a Buffer containing the Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].\nconst buf7 = Buffer.from('tést', 'latin1');\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/buffer", "title": "Usage in Deno", "description": "This page covers the usage of Buffer objects in Deno, including their creation, methods, and related classes and functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:35:09", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "title": "buffer - Node documentation", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "buffer - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "buffer - Node documentation", "ogLocale": "en_US", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "buffer - Node documentation", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "cc394f05-d779-4bf7-8250-04ecc3dfdb12", "sourceURL": "https://docs.deno.com/api/node/buffer", "url": "https://docs.deno.com/api/node/buffer/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• It is recommended to explicitly reference the Buffer class via an import or require statement.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/buffer", "title": "Usage in Deno", "description": "This page covers the usage of Buffer objects in Deno, including their creation, methods, and related classes and functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:35:09", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "title": "buffer - Node documentation", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "buffer - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "buffer - Node documentation", "ogLocale": "en_US", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "buffer - Node documentation", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "cc394f05-d779-4bf7-8250-04ecc3dfdb12", "sourceURL": "https://docs.deno.com/api/node/buffer", "url": "https://docs.deno.com/api/node/buffer/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the timer module in Deno, including classes, functions, interfaces, and variables related to timers.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\nThe `timer` module exposes a global API for scheduling functions to be called at some future period of time. Because the timer functions are globals, there is no need to import `node:timers` to use the API.\n\nThe timer functions within Node.js implement a similar API as the timers API provided by Web Browsers but use a different internal implementation that is built around the Node.js [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout).\n\n## Classes\n### Classes\n\n#### [Immediate](https://docs.deno.com/api/node/timers/~/Immediate \"Immediate\")\nThis object is created internally and is returned from `setImmediate()`. It can be passed to `clearImmediate()` in order to cancel the scheduled actions.\n\n- [\\_onImmediate](https://docs.deno.com/api/node/timers/~/Immediate#property__onimmediate)\n- [hasRef](https://docs.deno.com/api/node/timers/~/Immediate#method_hasref_0)\n- [ref](https://docs.deno.com/api/node/timers/~/Immediate#method_ref_0)\n- [unref](https://docs.deno.com/api/node/timers/~/Immediate#method_unref_0)\n\n#### [Timeout](https://docs.deno.com/api/node/timers/~/Timeout \"Timeout\")\nThis object is created internally and is returned from `setTimeout()` and `setInterval()`. It can be passed to either `clearTimeout()` or `clearInterval()` in order to cancel the scheduled actions.\n\n- [hasRef](https://docs.deno.com/api/node/timers/~/Timeout#method_hasref_0)\n- [ref](https://docs.deno.com/api/node/timers/~/Timeout#method_ref_0)\n- [refresh](https://docs.deno.com/api/node/timers/~/Timeout#method_refresh_0)\n- [unref](https://docs.deno.com/api/node/timers/~/Timeout#method_unref_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/timers", "title": "Usage in Deno", "description": "This page covers the usage of the timer module in Deno, including classes, functions, interfaces, and variables related to timers.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:35:16", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "timers - Node documentation", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "timers - Node documentation", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:title": "timers - Node documentation", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "twitter:title": "timers - Node documentation", "ogLocale": "en_US", "scrapeId": "90254972-5e69-4876-b6bc-472005d45e31", "sourceURL": "https://docs.deno.com/api/node/timers", "url": "https://docs.deno.com/api/node/timers/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the Timer Module\n```yaml\nimport * as mod from \"node:timers\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/timers", "title": "Usage in Deno", "description": "This page covers the usage of the timer module in Deno, including classes, functions, interfaces, and variables related to timers.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:35:16", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "timers - Node documentation", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "timers - Node documentation", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:title": "timers - Node documentation", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "twitter:title": "timers - Node documentation", "ogLocale": "en_US", "scrapeId": "90254972-5e69-4876-b6bc-472005d45e31", "sourceURL": "https://docs.deno.com/api/node/timers", "url": "https://docs.deno.com/api/node/timers/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• The timer functions are globals, so there is no need to import `node:timers` to use the API.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/timers", "title": "Usage in Deno", "description": "This page covers the usage of the timer module in Deno, including classes, functions, interfaces, and variables related to timers.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:35:16", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "timers - Node documentation", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "timers - Node documentation", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:title": "timers - Node documentation", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "twitter:title": "timers - Node documentation", "ogLocale": "en_US", "scrapeId": "90254972-5e69-4876-b6bc-472005d45e31", "sourceURL": "https://docs.deno.com/api/node/timers", "url": "https://docs.deno.com/api/node/timers/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Environment variables\"?\n\nAssistant: This page covers how to use environment variables in Deno, including built-in support, .env files, and special environment variables.\n\nHere's a detailed explanation:\n\n\n## Built-in Deno.env\nThe Deno runtime offers built-in support for environment variables with [`Deno.env`](https://docs.deno.com/api/deno/~/Deno.env).\n\n`Deno.env` has getter and setter methods. Here is example usage:\n\n```highlight notranslate ts\nDeno.env.set(\"FIREBASE_API_KEY\", \"examplekey123\");\nDeno.env.set(\"FIREBASE_AUTH_DOMAIN\", \"firebasedomain.com\");\n\nconsole.log(Deno.env.get(\"FIREBASE_API_KEY\")); // examplekey123\nconsole.log(Deno.env.get(\"FIREBASE_AUTH_DOMAIN\")); // firebasedomain.com\nconsole.log(Deno.env.has(\"FIREBASE_AUTH_DOMAIN\")); // true\n``\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/env_variables", "title": "Environment variables", "description": "This page covers how to use environment variables in Deno, including built-in support, .env files, and special environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:35:23", "type": "overview", "page_metadata": {"og:image": "/img/og.webp", "twitter:site": "@deno_land", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Environment variables", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Environment variables", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Environment variables", "language": "en", "ogImage": "/img/og.webp", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:title": "Environment variables", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "ba60da24-a746-4d37-8154-9e6470853bc7", "sourceURL": "https://docs.deno.com/runtime/reference/env_variables", "url": "https://docs.deno.com/runtime/reference/env_variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Environment variables\"?\n\nAssistant: Here are some code examples:\n\n### Using Deno.env\n```yaml\nDeno.env.set(\"FIREBASE_API_KEY\", \"examplekey123\");\nDeno.env.set(\"FIREBASE_AUTH_DOMAIN\", \"firebasedomain.com\");\n\nconsole.log(Deno.env.get(\"FIREBASE_API_KEY\")); // examplekey123\nconsole.log(Deno.env.get(\"FIREBASE_AUTH_DOMAIN\")); // firebasedomain.com\nconsole.log(Deno.env.has(\"FIREBASE_AUTH_DOMAIN\")); // true\n```\n\n### Loading from .env file\n```yaml\nimport \"jsr:@std/dotenv/load\";\n\nconsole.log(Deno.env.get(\"GREETING\")); // \"Hello, world.\"\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/env_variables", "title": "Environment variables", "description": "This page covers how to use environment variables in Deno, including built-in support, .env files, and special environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:35:23", "type": "code_examples", "page_metadata": {"og:image": "/img/og.webp", "twitter:site": "@deno_land", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Environment variables", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Environment variables", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Environment variables", "language": "en", "ogImage": "/img/og.webp", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:title": "Environment variables", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "ba60da24-a746-4d37-8154-9e6470853bc7", "sourceURL": "https://docs.deno.com/runtime/reference/env_variables", "url": "https://docs.deno.com/runtime/reference/env_variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Environment variables\"?\n\nAssistant: Here are the recommended best practices:\n\n• When multiple declarations for the same environment variable exist within a single .env file, the first occurrence is applied.\n• If the same variable is defined across multiple .env files, the value from the last file specified takes precedence.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/env_variables", "title": "Environment variables", "description": "This page covers how to use environment variables in Deno, including built-in support, .env files, and special environment variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:35:23", "type": "best_practices", "page_metadata": {"og:image": "/img/og.webp", "twitter:site": "@deno_land", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Environment variables", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Environment variables", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Environment variables", "language": "en", "ogImage": "/img/og.webp", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:title": "Environment variables", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "ba60da24-a746-4d37-8154-9e6470853bc7", "sourceURL": "https://docs.deno.com/runtime/reference/env_variables", "url": "https://docs.deno.com/runtime/reference/env_variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Runtime API\"?\n\nAssistant: Documentation for the Deno runtime API, including functions, interfaces, type aliases, and variables.\n\nHere's a detailed explanation:\n\n\n## Functions\nDeno.addSignalListener: Registers the given function as a listener of the given signal event.\n\nDeno.chdir: Change the current working directory to the specified path.\n\nDeno.cwd: Return a string representing the current working directory.\n\nDeno.execPath: Returns the path to the current deno executable.\n\nDeno.exit: Exit the Deno process with optional exit code.\n\nDeno.gid: Returns the group id of the process on POSIX platforms. Returns null on windows.\n\nDeno.hostname: Get the hostname of the machine the Deno process is running on.\n\nDeno.loadavg: Returns an array containing the 1, 5, and 15 minute load averages. The load average is a measure of CPU and IO utilization of the last one, five, and 15 minute periods expressed as a fractional number. Zero means there is no load. On Windows, the three values are always the same and represent the current load, not the 1, 5 and 15 minute load averages.\n\nDeno.memoryUsage: Returns an object describing the memory usage of the Deno process and the V8 subsystem measured in bytes.\n\nDeno.osRelease: Returns the release version of the Operating System.\n\nDeno.osUptime: Returns the Operating System uptime in number of seconds.\n\nDeno.refTimer: Make the timer of the given id block the event loop from finishing.\n\nDeno.removeSignalListener: Removes the given signal listener that has been registered with Deno.addSignalListener.\n\nDeno.systemMemoryInfo: Displays the total amount of free and used physical and swap memory in the system, as well as the buffers and caches used by the kernel.\n\nDeno.uid: Returns the user id of the process on POSIX platforms. Returns null on Windows.\n\nDeno.unrefTimer: Make the timer of the given id not block the event loop from finishing.\n\n## Interfaces\nDeno.Env: An interface containing methods to interact with the process environment variables.\n\nDeno.MemoryUsage: No documentation available.\n\nDeno.SystemMemoryInfo: Information returned from a call to Deno.systemMemoryInfo.\n\nDeno.OpMetrics: No documentation available.\n\n## Type Aliases\nDeno.Signal: Operating signals which can be listened for or sent to sub-processes. What signals and what their standard behaviors are OS dependent.\n\n## Variables\nDeno.args: Returns the script arguments to the program.\n\nDeno.build: Information related to the build of the current Deno runtime.\n\nDeno.env: An interface containing methods to interact with the process environment variables.\n\nDeno.exitCode: The exit code for the Deno process.\n\nDeno.mainModule: The URL of the entrypoint module entered from the command-line. It requires read permission to the CWD.\n\nDeno.noColor: Reflects the NO_COLOR environment variable at program start.\n\nDeno.pid: The current process ID of this instance of the Deno CLI.\n\nDeno.ppid: The process ID of parent process of this instance of the Deno CLI.\n\nDeno.version: Version information related to the current Deno CLI runtime environment.\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/runtime", "title": "Deno Runtime API", "description": "Documentation for the Deno runtime API, including functions, interfaces, type aliases, and variables.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 00:35:33", "type": "overview", "page_metadata": {"og:type": "article", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Runtime - Deno documentation", "og:title": "Runtime - Deno documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Runtime - Deno documentation", "language": "en", "ogLocale": "en_US", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Runtime - Deno documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "scrapeId": "8f1aed01-f434-4795-85ed-5ca5b17496e9", "sourceURL": "https://docs.deno.com/api/deno/runtime", "url": "https://docs.deno.com/api/deno/runtime", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"CI and GitHub Actions\"?\n\nAssistant: Deno Deploy's Git integration enables deployment of code changes that are pushed to a GitHub repository. Commits on the production branch will be deployed as a production deployment. Commits on all other branches will be deployed as a preview deployment.\n\nHere's a detailed explanation:\n\n\n## Automatic\nIf your project doesn't require any additional build steps, then the system chooses **Automatic** mode. The entrypoint file is simply the file that Deno Deploy will run.\n\n## GitHub Actions\nIf you enter a command in **Install Step** and/or **Build Step** in the **Project Configuration**, Deno Deploy will create a necessary GitHub Actions workflow file and push it into your repository. In this workflow file, we leverage the `deployctl` [Github action](https://github.com/denoland/deployctl/blob/main/action/README.md) to deploy your project. You can do whatever you need to do, such as running a build command, before deploying it to Deno Deploy.\n\nTo configure preprocessing commands you want to run, click **Show advanced** **options** button that appears after choosing your git repository. Then enter values as needed to input boxes.\n\nTip\n\nFor example, if you want to enable [ahead-of-time builds](https://fresh.deno.dev/docs/concepts/ahead-of-time-builds) for a Fresh project, you will enter `deno task build` in the **Build Step** box.\n\nSee also [the Fresh doc](https://fresh.deno.dev/docs/getting-started/deploy-to-production) for deploying a Fresh project to Deno Deploy.\n\nThe GitHub Actions workflow file that Deno Deploy generates and pushes to your repository looks like as follows.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/ci_github", "title": "CI and GitHub Actions", "description": "Deno Deploy's Git integration enables deployment of code changes that are pushed to a GitHub repository. Commits on the production branch will be deployed as a production deployment. Commits on all other branches will be deployed as a preview deployment.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:35:43", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "CI and GitHub Actions", "og:title": "CI and GitHub Actions", "ogImage": "/img/og.webp", "twitter:title": "CI and GitHub Actions", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:type": "article", "twitter:site": "@deno_land", "ogTitle": "CI and GitHub Actions", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "5cd26c79-1060-43d3-b157-15413dd7ebcb", "sourceURL": "https://docs.deno.com/deploy/manual/ci_github", "url": "https://docs.deno.com/deploy/manual/ci_github/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"CI and GitHub Actions\"?\n\nAssistant: Here are some code examples:\n\n### GitHub Actions Workflow File\n```yaml\n```highlight notranslate yml\nname: Deploy\non:\n  push:\n    branches: main\n  pull_request:\n    branches: main\n\njobs:\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n\n    permissions:\n      id-token: write # Needed for auth with Deno Deploy\n      contents: read # Needed to clone the repository\n\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v4\n\n      - name: Install Deno\n        uses: denoland/setup-deno@v2\n        with:\n          deno-version: v2.x\n\n      - name: Build step\n        run: \"deno task build\"\n\n      - name: Upload to Deno Deploy\n        uses: denoland/deployctl@v1\n        with:\n          project: \"\"\n          entrypoint: \"main.ts\"\n          root: \".\"\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/ci_github", "title": "CI and GitHub Actions", "description": "Deno Deploy's Git integration enables deployment of code changes that are pushed to a GitHub repository. Commits on the production branch will be deployed as a production deployment. Commits on all other branches will be deployed as a preview deployment.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:35:43", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "CI and GitHub Actions", "og:title": "CI and GitHub Actions", "ogImage": "/img/og.webp", "twitter:title": "CI and GitHub Actions", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:type": "article", "twitter:site": "@deno_land", "ogTitle": "CI and GitHub Actions", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "5cd26c79-1060-43d3-b157-15413dd7ebcb", "sourceURL": "https://docs.deno.com/deploy/manual/ci_github", "url": "https://docs.deno.com/deploy/manual/ci_github/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"CI and GitHub Actions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno Deploy will automatically pull code and assets from your repository source every time you push, and deploy it in Automatic mode.\n• If you want to enable ahead-of-time builds for a Fresh project, you will enter `deno task build` in the Build Step box.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/ci_github", "title": "CI and GitHub Actions", "description": "Deno Deploy's Git integration enables deployment of code changes that are pushed to a GitHub repository. Commits on the production branch will be deployed as a production deployment. Commits on all other branches will be deployed as a preview deployment.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:35:43", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "CI and GitHub Actions", "og:title": "CI and GitHub Actions", "ogImage": "/img/og.webp", "twitter:title": "CI and GitHub Actions", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:type": "article", "twitter:site": "@deno_land", "ogTitle": "CI and GitHub Actions", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:locale": "en_US", "scrapeId": "5cd26c79-1060-43d3-b157-15413dd7ebcb", "sourceURL": "https://docs.deno.com/deploy/manual/ci_github", "url": "https://docs.deno.com/deploy/manual/ci_github/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page provides information on how to use the node:http2 module in Deno, including classes, functions, interfaces, namespaces, and variables.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:http2\";\n```\n\nThe `node:http2` module provides an implementation of the [HTTP/2](https://tools.ietf.org/html/rfc7540) protocol.\nIt can be accessed using:\n\n```highlight notranslate js\nimport http2 from 'node:http2';\n```\n\n## Classes\n### Classes [#](https://docs.deno.com/api/node/http2/#Classes)\n\n#### [Http2ServerRequest](https://docs.deno.com/api/node/http2/~/Http2ServerRequest \"Http2ServerRequest\")\nA `Http2ServerRequest` object is created by Server or SecureServer and passed as the first argument to the 'request' event. It may be used to access a request status, headers, and data.\n\n- [aborted](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_aborted)\n- [addListener](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#method_addlistener_0)\n- [authority](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_authority)\n- [complete](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_complete)\n- [connection](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_connection)\n- [emit](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#method_emit_0)\n- [headers](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_headers)\n- [httpVersion](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_httpversion)\n- [httpVersionMajor](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_httpversionmajor)\n- [httpVersionMinor](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_httpversionminor)\n- [method](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_method)\n- [on](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#method_on_0)\n- [once](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#method_once_0)\n- [prependListener](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#method_prependoncelistener_0)\n- [rawHeaders](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_rawheaders)\n- [rawTrailers](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_rawtrailers)\n- [read](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#method_read_0)\n- [scheme](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_scheme)\n- [setTimeout](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#method_settimeout_0)\n- [socket](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_socket)\n- [stream](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_stream)\n- [trailers](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_trailers)\n- [url](https://docs.deno.com/api/node/http2/~/Http2ServerRequest#property_url)\n\n#### [Http2ServerResponse](https://docs.deno.com/api/node/http2/~/Http2ServerResponse \"Http2ServerResponse\")\nThis object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the 'request' event.\n\n- [addListener](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_addlistener_0)\n- [addTrailers](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_addtrailers_0)\n- [appendHeader](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_appendheader_0)\n- [connection](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#property_connection)\n- [createPushResponse](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_createpushresponse_0)\n- [emit](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_emit_0)\n- [end](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_end_0)\n- [finished](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#property_finished)\n- [getHeader](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_getheader_0)\n- [getHeaderNames](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_getheadernames_0)\n- [getHeaders](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_getheaders_0)\n- [hasHeader](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_hasheader_0)\n- [headersSent](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#property_headerssent)\n- [on](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_on_0)\n- [once](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_once_0)\n- [prependListener](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_prependoncelistener_0)\n- [removeHeader](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_removeheader_0)\n- [req](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#property_req)\n- [sendDate](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#property_senddate)\n- [setHeader](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_setheader_0)\n- [setTimeout](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_settimeout_0)\n- [socket](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#property_socket)\n- [statusCode](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#property_statuscode)\n- [statusMessage](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#property_statusmessage)\n- [stream](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#property_stream)\n- [write](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_write_0)\n- [writeContinue](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_writecontinue_0)\n- [writeEarlyHints](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_writeearlyhints_0)\n- [writeHead](https://docs.deno.com/api/node/http2/~/Http2ServerResponse#method_writehead_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/http2", "title": "Usage in Deno", "description": "This page provides information on how to use the node:http2 module in Deno, including classes, functions, interfaces, namespaces, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:36:09", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogTitle": "http2 - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogSiteName": "Deno", "title": "http2 - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:title": "http2 - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "http2 - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:type": "article", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "b161299c-d578-492f-bb93-e51e97c517ed", "sourceURL": "https://docs.deno.com/api/node/http2", "url": "https://docs.deno.com/api/node/http2/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the HTTP/2 Module\n```yaml\nimport * as mod from \"node:http2\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/http2", "title": "Usage in Deno", "description": "This page provides information on how to use the node:http2 module in Deno, including classes, functions, interfaces, namespaces, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:36:09", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogTitle": "http2 - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogSiteName": "Deno", "title": "http2 - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:title": "http2 - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "http2 - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:type": "article", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "b161299c-d578-492f-bb93-e51e97c517ed", "sourceURL": "https://docs.deno.com/api/node/http2", "url": "https://docs.deno.com/api/node/http2/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `node:http2` module to implement HTTP/2 protocol in Deno.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/http2", "title": "Usage in Deno", "description": "This page provides information on how to use the node:http2 module in Deno, including classes, functions, interfaces, namespaces, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:36:09", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogTitle": "http2 - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogSiteName": "Deno", "title": "http2 - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:title": "http2 - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "http2 - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:type": "article", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "b161299c-d578-492f-bb93-e51e97c517ed", "sourceURL": "https://docs.deno.com/api/node/http2", "url": "https://docs.deno.com/api/node/http2/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Command line interface\"?\n\nAssistant: Deno is a command line program. The Deno command line interface (CLI) can be used to run scripts, manage dependencies, and even compile your code into standalone executables.\n\nHere's a detailed explanation:\n\n\n## An example subcommand - `deno run`\nYou can run a local TypeScript or JavaScript file by specifying its path relative to the current working directory:\n\n```highlight notranslate shell\ndeno run main.ts\n```\n\nDeno supports running scripts directly from URLs. This is particularly useful for quickly testing or running code without downloading it first:\n\n```highlight notranslate shell\ndeno run https://docs.deno.com/examples/scripts/hello_world.ts\n```\n\nYou can also run a script by piping it through standard input. This is useful for integrating with other command-line tools or dynamically generating scripts:\n\n```highlight notranslate shell\ncat main.ts | deno run -\n```\n\n## Passing script arguments\nScript arguments are additional parameters you can pass to your script when running it from the command line. These arguments can be used to customize the behavior of your program based on the input provided at runtime. Arguments should be passed **after** the script name.\n\nTo test this out we can make a script that will log the arguments passed to it:\n\nmain.ts\n\n```highlight notranslate ts\nconsole.log(Deno.args);\n```\n\nWhen we run that script and pass it some arguments it will log them to the console:\n\n```highlight notranslate shell\n$ deno run main.ts arg1 arg2 arg3\n[ \"arg1\", \"arg2\", \"arg3\" ]\n```\n\n## Argument and flag ordering\n_Note that anything passed after the script name will be passed as a script_ _argument and not consumed as a Deno runtime flag._ This leads to the following pitfall:\n\n```highlight notranslate shell\n# Good. We grant net permission to net_client.ts.\ndeno run --allow-net net_client.ts\n\n# Bad! --allow-net was passed to Deno.args, throws a net permission error.\ndeno run net_client.ts --allow-net\n```\n\n## Common flags\nSome flags can be used with multiple related subcommands. We discuss these below.\n\n## Watch mode\nYou can supply the `--watch` flag to `deno run`, `deno test`, and `deno fmt` to enable the built-in file watcher. The watcher enables automatic reloading of your application whenever changes are detected in the source files. This is particularly useful during development, as it allows you to see the effects of your changes immediately without manually restarting the application.\n\nThe files that are watched will depend on the subcommand used:\n\n- for `deno run` and `deno test` the entrypoint, and all local files that the entrypoint statically imports will be watched.\n- for `deno fmt` all local files and directories specified as command line arguments (or the working directory if no specific files/directories is passed) are watched.\n\n```highlight notranslate shell\ndeno run --watch main.ts\ndeno test --watch\ndeno fmt --watch\n```\n\nYou can exclude paths or patterns from watching by providing the `--watch-exclude` flag. The syntax is `--watch-exclude=path1,path2`. For example:\n\n```highlight notranslate shell\ndeno run --watch --watch-exclude=file1.ts,file2.ts main.ts\n```\n\nThis will exclude file1.ts and file2.ts from being watched.\n\nTo exclude a pattern, remember to surround it in quotes to prevent your shell from expanding the glob:\n\n```highlight notranslate shell\ndeno run --watch --watch-exclude='*.js' main.ts\n```\n\n## Hot Module Replacement mode\nYou can use `--watch-hmr` flag with `deno run` to enable the hot module replacement mode. Instead of restarting the program, the runtime will try to update the program in-place. If updating in-place fails, the program will still be restarted.\n\n```highlight notranslate sh\ndeno run --watch-hmr main.ts\n```\n\nWhen a hot module replacement is triggered, the runtime will dispatch a `CustomEvent` of type `hmr` that will include `path` property in its `detail` object. You can listen for this event and perform any additional logic that you need to do when a module is updated (eg. notify a browser over a WebSocket connection).\n\n```highlight notranslate ts\naddEventListener(\"hmr\", (e) => {\n  console.log(\"HMR triggered\", e.detail.path);\n});\n```\n\n## Integrity flags (lock files)\nAffect commands which can download resources to the cache: `deno install`, `deno run`, `deno test`, `deno doc`, and `deno compile`.\n\n```highlight notranslate sh\n--lock <FILE>    Check the specified lock file\n--frozen[=<BOOLEAN>] Error out if lockfile is out of date\n```\n\n## Cache and compilation flags\nAffect commands which can populate the cache: `deno install`, `deno run`, `deno test`, `deno doc`, and `deno compile`. As well as the flags above, this includes those which affect module resolution, compilation configuration etc.\n\n```highlight notranslate sh\n--config <FILE>               Load configuration file\n--import-map <FILE>           Load import map file\n--no-remote                   Do not resolve remote modules\n--reload=<CACHE_BLOCKLIST>    Reload source code cache (recompile TypeScript)\n--unstable                    Enable unstable APIs\n```\n\n## Runtime flags\nAffect commands which execute user code: `deno run` and `deno test`. These include all of the above as well as the following.\n\n## Type checking flags\nYou can type-check your code (without executing it) using the command:\n\n```highlight notranslate shell\n> deno check main.ts\n```\n\nYou can also type-check your code before execution by using the `--check` argument to deno run:\n\n```highlight notranslate shell\n> deno run --check main.ts\n```\n\nThis flag affects `deno run`, `deno eval`, `deno repl`. The following table describes the type-checking behavior of various subcommands. Here \"Local\" means that only errors from local code will induce type-errors, modules imported from https URLs (remote) may have type errors that are not reported. (To turn on type-checking for all modules, use `--check=all`.)\n\n| Subcommand | Type checking mode |\n| --- | --- |\n| `deno bench` | 📁 Local |\n| `deno check` | 📁 Local |\n| `deno compile` | 📁 Local |\n| `deno eval` | ❌ None |\n| `deno repl` | ❌ None |\n| `deno run` | ❌ None |\n| `deno test` | 📁 Local |\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/command_line_interface", "title": "Command line interface", "description": "Deno is a command line program. The Deno command line interface (CLI) can be used to run scripts, manage dependencies, and even compile your code into standalone executables.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:36:47", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Command line interface", "twitter:title": "Command line interface", "og:type": "article", "title": "Command line interface", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Command line interface", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "og:site_name": "Deno", "scrapeId": "6501722d-c308-4d37-a8a8-f40a8765fa16", "sourceURL": "https://docs.deno.com/runtime/getting_started/command_line_interface", "url": "https://docs.deno.com/runtime/getting_started/command_line_interface/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Command line interface\"?\n\nAssistant: Here are some code examples:\n\n### Running a local TypeScript file\n```yaml\ndeno run main.ts\n```\n\n### Running a script from a URL\n```yaml\ndeno run https://docs.deno.com/examples/scripts/hello_world.ts\n```\n\n### Piping a script through standard input\n```yaml\ncat main.ts | deno run -\n```\n\n### Logging script arguments\n```yaml\nconsole.log(Deno.args);\n```\n\n### Running a script with arguments\n```yaml\n$ deno run main.ts arg1 arg2 arg3\n[ \"arg1\", \"arg2\", \"arg3\" ]\n```\n\n### Granting net permission\n```yaml\ndeno run --allow-net net_client.ts\n```\n\n### Bad argument ordering example\n```yaml\ndeno run net_client.ts --allow-net\n```\n\n### Using watch mode\n```yaml\ndeno run --watch main.ts\ndeno test --watch\ndeno fmt --watch\n```\n\n### Excluding files from watch mode\n```yaml\ndeno run --watch --watch-exclude=file1.ts,file2.ts main.ts\n```\n\n### Excluding patterns from watch mode\n```yaml\ndeno run --watch --watch-exclude='*.js' main.ts\n```\n\n### Enabling hot module replacement mode\n```yaml\ndeno run --watch-hmr main.ts\n```\n\n### Listening for hot module replacement event\n```yaml\naddEventListener(\"hmr\", (e) => {\n  console.log(\"HMR triggered\", e.detail.path);\n});\n```\n\n### Lock file command\n```yaml\n--lock <FILE>    Check the specified lock file\n--frozen[=<BOOLEAN>] Error out if lockfile is out of date\n```\n\n### Cache and compilation flags\n```yaml\n--config <FILE>               Load configuration file\n--import-map <FILE>           Load import map file\n--no-remote                   Do not resolve remote modules\n--reload=<CACHE_BLOCKLIST>    Reload source code cache (recompile TypeScript)\n--unstable                    Enable unstable APIs\n```\n\n### Type checking command\n```yaml\ndeno check main.ts\n```\n\n### Type checking before execution\n```yaml\ndeno run --check main.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/command_line_interface", "title": "Command line interface", "description": "Deno is a command line program. The Deno command line interface (CLI) can be used to run scripts, manage dependencies, and even compile your code into standalone executables.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:36:47", "type": "code_examples", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Command line interface", "twitter:title": "Command line interface", "og:type": "article", "title": "Command line interface", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Command line interface", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "og:site_name": "Deno", "scrapeId": "6501722d-c308-4d37-a8a8-f40a8765fa16", "sourceURL": "https://docs.deno.com/runtime/getting_started/command_line_interface", "url": "https://docs.deno.com/runtime/getting_started/command_line_interface/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Command line interface\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--watch` flag for automatic reloading during development.\n• Be cautious with argument and flag ordering to avoid permission errors.\n• Utilize hot module replacement for a smoother development experience.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/command_line_interface", "title": "Command line interface", "description": "Deno is a command line program. The Deno command line interface (CLI) can be used to run scripts, manage dependencies, and even compile your code into standalone executables.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:36:47", "type": "best_practices", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Command line interface", "twitter:title": "Command line interface", "og:type": "article", "title": "Command line interface", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Command line interface", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "og:site_name": "Deno", "scrapeId": "6501722d-c308-4d37-a8a8-f40a8765fa16", "sourceURL": "https://docs.deno.com/runtime/getting_started/command_line_interface", "url": "https://docs.deno.com/runtime/getting_started/command_line_interface/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Stability and releases\"?\n\nAssistant: This page covers the stability of Deno APIs, release schedules, channels, long-term support, unstable APIs, and the standard library.\n\nHere's a detailed explanation:\n\n\n## Release schedule, channels and long term support\nDeno releases a new stable, minor version (eg. v2.1.0, v2.0.0) on a 12 week schedule.\n\nPatch releases including bug fixes for the latest minor version are released as needed - you can expect several patch releases before a new minor version is released.\n\n## Release channels\nDeno offers 4 release channels:\n\n- `stable` - a semver minor/patch release, as described above. This is **the** **default** distribution channel that is recommended for most users.\n- `lts` - long term support for a particular stable release, recommended for enterprise users who prefer not to upgrade so often. See below for details.\n- `rc` - a release candidate for the upcoming semver minor release.\n- `canary` - an unstable release that changes multiple times per day, allows to try out latest bug fixes and new features that might end up in the `stable` channel.\n\n## Long Term Support (LTS)\nStarting with Deno v2.1.0 (released in November 2024), Deno offers an LTS (long-term support) channel.\n\nAn LTS channel is a minor semver version that we maintain with only backwards-compatible bug fixes.\n\nWe are initially keeping the LTS support window short while we refine the process. **LTS releases occur every six months**, with patch releases as needed for bug fixes. We plan to extend this support window to one year in the future.\n\nLTS backports include:\n\n- Security patches\n- Critical bug fixes (e.g., crashes, incorrect computations)\n- **Critical** performance improvements _may_ be backported based on severity.\n\n**API changes and major new features will not be backported.**\n\n## Unstable APIs\nWhen introducing new APIs, these are first marked as unstable. This means that the API may change in the future. These APIs are not available to use unless you explicitly pass an unstable flag, like `--unstable-kv`.\n\nThere are also some non-runtime features of Deno that are considered unstable, and are locked behind unstable flags. For example, the `--unstable-sloppy-imports` flag is used to enable `import` ing code without specifying file extensions.\n\n## Standard library\nThe Deno Standard Library (https://jsr.io/@std) is mostly stable. All standard library modules that are version 1.0.0 or higher are considered stable. All other modules (0.x) are considered unstable, and may change in the future.\n\nUsing unstable standard library modules is not recommended for production code, but it is a great way to experiment with new features and provide feedback to the Deno team. It is not necessary to use any unstable flags to use unstable standard library modules.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/stability_and_releases", "title": "Stability and releases", "description": "This page covers the stability of Deno APIs, release schedules, channels, long-term support, unstable APIs, and the standard library.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:37:01", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "ogTitle": "Stability and releases", "twitter:title": "Stability and releases", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:title": "Stability and releases", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Stability and releases", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "twitter:card": "summary_large_image", "scrapeId": "eb53c539-3876-42d5-9990-16eb87daf69b", "sourceURL": "https://docs.deno.com/runtime/fundamentals/stability_and_releases", "url": "https://docs.deno.com/runtime/fundamentals/stability_and_releases/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Stability and releases\"?\n\nAssistant: Here are the recommended best practices:\n\n• LTS releases occur every six months with patch releases as needed for bug fixes.\n• Using unstable standard library modules is not recommended for production code.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/stability_and_releases", "title": "Stability and releases", "description": "This page covers the stability of Deno APIs, release schedules, channels, long-term support, unstable APIs, and the standard library.", "has_code_examples": false, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:37:01", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "ogTitle": "Stability and releases", "twitter:title": "Stability and releases", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:title": "Stability and releases", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Stability and releases", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "twitter:card": "summary_large_image", "scrapeId": "eb53c539-3876-42d5-9990-16eb87daf69b", "sourceURL": "https://docs.deno.com/runtime/fundamentals/stability_and_releases", "url": "https://docs.deno.com/runtime/fundamentals/stability_and_releases/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Installation\"?\n\nAssistant: Deno works on macOS, Linux, and Windows. Deno is a single binary executable. It has no external dependencies. On macOS, both M1 (arm64) and Intel (x64) executables are provided. On Linux and Windows, only x64 is supported.\n\nHere's a detailed explanation:\n\n\n## Download and install\n[deno_install](https://github.com/denoland/deno_install) provides convenience scripts to download and install the binary.\n\n- macOS\n- Windows\n- Linux\n\nUsing Shell:\n\n```highlight notranslate shell\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\nUsing [npm](https://npmjs.com/package/deno):\n\n```highlight notranslate shell\nnpm install -g deno\n```\n\n> The startup time of the Deno command gets affected if it's installed via npm. We recommend the shell install script for better performance.\n\nUsing [Homebrew](https://formulae.brew.sh/formula/deno):\n\n```highlight notranslate shell\nbrew install deno\n```\n\nUsing [MacPorts](https://ports.macports.org/port/deno/):\n\n```highlight notranslate shell\nsudo port install deno\n```\n\nUsing [Nix](https://nixos.org/download.html):\n\n```highlight notranslate shell\nnix-shell -p deno\n```\n\nUsing [asdf](https://asdf-vm.com/):\n\n```highlight notranslate shell\nasdf plugin add deno https://github.com/asdf-community/asdf-deno.git\n\n# Download and install the latest version of Deno\nasdf install deno latest\n\n# To set as the default version of Deno globally\nasdf set -u deno latest\n\n# To set as the default version of Deno locally (current project only)\nasdf set deno latest\n```\n\nUsing [vfox](https://vfox.lhan.me/):\n\n```highlight notranslate shell\nvfox add deno\n\n# Download and install the latest version of Deno\nvfox install deno@latest\n\n# To set the version of Deno globally\nvfox use --global deno\n```\n\nUsing PowerShell (Windows):\n\n```highlight notranslate powershell\nirm https://deno.land/install.ps1 | iex\n```\n\nUsing [npm](https://npmjs.com/package/deno):\n\n```highlight notranslate shell\nnpm install -g deno\n```\n\n> The startup time of the Deno command gets affected if it's installed via npm. We recommend the PowerShell install script for better performance.\n\nUsing [Scoop](https://scoop.sh/):\n\n```highlight notranslate shell\nscoop install deno\n```\n\nUsing [Chocolatey](https://chocolatey.org/packages/deno):\n\n```highlight notranslate shell\nchoco install deno\n```\n\nUsing [Winget](https://github.com/microsoft/winget-cli):\n\n```highlight notranslate shell\nwinget install DenoLand.Deno\n```\n\nUsing [vfox](https://vfox.lhan.me/):\n\n```highlight notranslate shell\nvfox add deno\n\n# Download and install the latest version of Deno\nvfox install deno@latest\n\n# To set the version of Deno globally\nvfox use --global deno\n```\n\nUsing Shell:\n\n```highlight notranslate shell\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\nUsing [npm](https://npmjs.com/package/deno):\n\n```highlight notranslate shell\nnpm install -g deno\n```\n\n> The startup time of the Deno command gets affected if it's installed via npm. We recommend the shell install script for better performance.\n\nUsing [Nix](https://nixos.org/download.html):\n\n```highlight notranslate shell\nnix-shell -p deno\n```\n\nUsing [asdf](https://asdf-vm.com/):\n\n```highlight notranslate shell\nasdf plugin add deno https://github.com/asdf-community/asdf-deno.git\n\n# Download and install the latest version of Deno\nasdf install deno latest\n\n# To set as the default version of Deno globally\nasdf set -u deno latest\n\n# To set as the default version of Deno locally (current project only)\nasdf set deno latest\n```\n\nUsing [vfox](https://vfox.lhan.me/):\n\n```highlight notranslate shell\nvfox add deno\n\n# Download and install the latest version of Deno\nvfox install deno@latest\n\n# To set the version of Deno globally\nvfox use --global deno\n```\n\nYou can also build and install from source using [Cargo](https://crates.io/crates/deno):\n\n```highlight notranslate shell\ncargo install deno --locked\n```\n\nDeno binaries can also be installed manually, by downloading a zip file at [github.com/denoland/deno/releases](https://github.com/denoland/deno/releases). These packages contain just a single executable file. You will have to set the executable bit on macOS and Linux.\n\n## Docker\nFor more information and instructions on the official Docker images:\n[https://github.com/denoland/deno_docker](https://github.com/denoland/deno_docker)\n\n## Testing your installation\nTo test your installation, run `deno --version`. If this prints the Deno version to the console the installation was successful.\n\nUse `deno help` to see help text documenting Deno's flags and usage. Get a detailed guide on the CLI [here](https://docs.deno.com/runtime/getting_started/command_line_interface/).\n\n## Updating\nTo update a previously installed version of Deno, you can run:\n\n```highlight notranslate shell\ndeno upgrade\n```\n\nOr using [Winget](https://github.com/microsoft/winget-cli) (Windows):\n\n```highlight notranslate shell\nwinget upgrade DenoLand.Deno\n```\n\nThis will fetch the latest release from [github.com/denoland/deno/releases](https://github.com/denoland/deno/releases), unzip it, and replace your current executable with it.\n\nYou can also use this utility to install a specific version of Deno:\n\n```highlight notranslate shell\ndeno upgrade --version 1.0.1\n```\n\n## Building from source\nInformation about how to build from source can be found in the [`Contributing`](https://docs.deno.com/runtime/contributing/building_from_source/) chapter.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/installation", "title": "Installation", "description": "Deno works on macOS, Linux, and Windows. Deno is a single binary executable. It has no external dependencies. On macOS, both M1 (arm64) and Intel (x64) executables are provided. On Linux and Windows, only x64 is supported.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:37:35", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Installation", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Installation", "language": "en", "ogTitle": "Installation", "title": "Installation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "scrapeId": "e503019e-a5d1-4b74-84f7-380a4ebb4fe4", "sourceURL": "https://docs.deno.com/runtime/getting_started/installation", "url": "https://docs.deno.com/runtime/getting_started/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Installation\"?\n\nAssistant: Here are some code examples:\n\n### Download and install using Shell\n```yaml\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n### Download and install using npm\n```yaml\nnpm install -g deno\n```\n\n### Download and install using Homebrew\n```yaml\nbrew install deno\n```\n\n### Download and install using MacPorts\n```yaml\nsudo port install deno\n```\n\n### Download and install using Nix\n```yaml\nnix-shell -p deno\n```\n\n### Download and install using asdf\n```yaml\nasdf plugin add deno https://github.com/asdf-community/asdf-deno.git\n\n# Download and install the latest version of Deno\nasdf install deno latest\n\n# To set as the default version of Deno globally\nasdf set -u deno latest\n\n# To set as the default version of Deno locally (current project only)\nasdf set deno latest\n```\n\n### Download and install using vfox\n```yaml\nvfox add deno\n\n# Download and install the latest version of Deno\nvfox install deno@latest\n\n# To set the version of Deno globally\nvfox use --global deno\n```\n\n### Download and install using PowerShell\n```yaml\nirm https://deno.land/install.ps1 | iex\n```\n\n### Download and install using Scoop\n```yaml\nscoop install deno\n```\n\n### Download and install using Chocolatey\n```yaml\nchoco install deno\n```\n\n### Download and install using Winget\n```yaml\nwinget install DenoLand.Deno\n```\n\n### Update Deno\n```yaml\ndeno upgrade\n```\n\n### Update Deno using Winget\n```yaml\nwinget upgrade DenoLand.Deno\n```\n\n### Install specific version of Deno\n```yaml\ndeno upgrade --version 1.0.1\n```\n\n### Build from source using Cargo\n```yaml\ncargo install deno --locked\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/installation", "title": "Installation", "description": "Deno works on macOS, Linux, and Windows. Deno is a single binary executable. It has no external dependencies. On macOS, both M1 (arm64) and Intel (x64) executables are provided. On Linux and Windows, only x64 is supported.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:37:35", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Installation", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Installation", "language": "en", "ogTitle": "Installation", "title": "Installation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "scrapeId": "e503019e-a5d1-4b74-84f7-380a4ebb4fe4", "sourceURL": "https://docs.deno.com/runtime/getting_started/installation", "url": "https://docs.deno.com/runtime/getting_started/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Installation\"?\n\nAssistant: Here are the recommended best practices:\n\n• The startup time of the Deno command gets affected if it's installed via npm. We recommend the shell install script for better performance.\n• The startup time of the Deno command gets affected if it's installed via npm. We recommend the PowerShell install script for better performance.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/installation", "title": "Installation", "description": "Deno works on macOS, Linux, and Windows. Deno is a single binary executable. It has no external dependencies. On macOS, both M1 (arm64) and Intel (x64) executables are provided. On Linux and Windows, only x64 is supported.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 00:37:35", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Installation", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "Installation", "language": "en", "ogTitle": "Installation", "title": "Installation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "scrapeId": "e503019e-a5d1-4b74-84f7-380a4ebb4fe4", "sourceURL": "https://docs.deno.com/runtime/getting_started/installation", "url": "https://docs.deno.com/runtime/getting_started/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Interfaces\"?\n\nAssistant: This page covers various interfaces related to the Streams API in Deno.\n\nHere's a detailed explanation:\n\n\n## ByteLengthQueuingStrategy\nNo documentation available\n\n- [highWaterMark](https://docs.deno.com/api/web/~/ByteLengthQueuingStrategy#property_highwatermark)\n- [prototype](https://docs.deno.com/api/web/~/ByteLengthQueuingStrategy#property_prototype)\n- [size](https://docs.deno.com/api/web/~/ByteLengthQueuingStrategy#property_size)\n\n## CompressionStream\nAn API for compressing a stream of data.\n\n- [prototype](https://docs.deno.com/api/web/~/CompressionStream#property_prototype)\n- [readable](https://docs.deno.com/api/web/~/CompressionStream#property_readable)\n- [writable](https://docs.deno.com/api/web/~/CompressionStream#property_writable)\n\n## CountQueuingStrategy\nThis Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.\n\n- [highWaterMark](https://docs.deno.com/api/web/~/CountQueuingStrategy#property_highwatermark)\n- [prototype](https://docs.deno.com/api/web/~/CountQueuingStrategy#property_prototype)\n- [size](https://docs.deno.com/api/web/~/CountQueuingStrategy#property_size)\n\n## DecompressionStream\nAn API for decompressing a stream of data.\n\n- [prototype](https://docs.deno.com/api/web/~/DecompressionStream#property_prototype)\n- [readable](https://docs.deno.com/api/web/~/DecompressionStream#property_readable)\n- [writable](https://docs.deno.com/api/web/~/DecompressionStream#property_writable)\n\n## GenericTransformStream\nNo documentation available\n\n- [readable](https://docs.deno.com/api/web/~/GenericTransformStream#property_readable)\n- [writable](https://docs.deno.com/api/web/~/GenericTransformStream#property_writable)\n\n## QueuingStrategy\nNo documentation available\n\n- [highWaterMark](https://docs.deno.com/api/web/~/QueuingStrategy#property_highwatermark)\n- [size](https://docs.deno.com/api/web/~/QueuingStrategy#property_size)\n\n## QueuingStrategyInit\nNo documentation available\n\n- [highWaterMark](https://docs.deno.com/api/web/~/QueuingStrategyInit#property_highwatermark)\n\n## QueuingStrategySize\nNo documentation available\n\n## ReadableByteStreamController\nNo documentation available\n\n- [byobRequest](https://docs.deno.com/api/web/~/ReadableByteStreamController#property_byobrequest)\n- [close](https://docs.deno.com/api/web/~/ReadableByteStreamController#method_close_0)\n- [desiredSize](https://docs.deno.com/api/web/~/ReadableByteStreamController#property_desiredsize)\n- [enqueue](https://docs.deno.com/api/web/~/ReadableByteStreamController#method_enqueue_0)\n- [error](https://docs.deno.com/api/web/~/ReadableByteStreamController#method_error_0)\n- [prototype](https://docs.deno.com/api/web/~/ReadableByteStreamController#property_prototype)\n\n## ReadableStream\nThis Streams API interface represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the body property of a Response object.\n\n- [cancel](https://docs.deno.com/api/web/~/ReadableStream#method_cancel_0)\n- [from](https://docs.deno.com/api/web/~/ReadableStream#method_from_0)\n- [getReader](https://docs.deno.com/api/web/~/ReadableStream#method_getreader_0)\n- [locked](https://docs.deno.com/api/web/~/ReadableStream#property_locked)\n- [pipeThrough](https://docs.deno.com/api/web/~/ReadableStream#method_pipethrough_0)\n- [pipeTo](https://docs.deno.com/api/web/~/ReadableStream#method_pipeto_0)\n- [prototype](https://docs.deno.com/api/web/~/ReadableStream#property_prototype)\n- [tee](https://docs.deno.com/api/web/~/ReadableStream#method_tee_0)\n- [values](https://docs.deno.com/api/web/~/ReadableStream#method_values_0)\n\n## ReadableStreamBYOBReader\nNo documentation available\n\n- [prototype](https://docs.deno.com/api/web/~/ReadableStreamBYOBReader#property_prototype)\n- [read](https://docs.deno.com/api/web/~/ReadableStreamBYOBReader#method_read_0)\n- [releaseLock](https://docs.deno.com/api/web/~/ReadableStreamBYOBReader#method_releaselock_0)\n\n## ReadableStreamBYOBReaderReadOptions\nNo documentation available\n\n- [min](https://docs.deno.com/api/web/~/ReadableStreamBYOBReaderReadOptions#property_min)\n\n## ReadableStreamBYOBRequest\nNo documentation available\n\n- [prototype](https://docs.deno.com/api/web/~/ReadableStreamBYOBRequest#property_prototype)\n- [respond](https://docs.deno.com/api/web/~/ReadableStreamBYOBRequest#method_respond_0)\n- [respondWithNewView](https://docs.deno.com/api/web/~/ReadableStreamBYOBRequest#method_respondwithnewview_0)\n- [view](https://docs.deno.com/api/web/~/ReadableStreamBYOBRequest#property_view)\n\n## ReadableStreamDefaultController\nNo documentation available\n\n- [close](https://docs.deno.com/api/web/~/ReadableStreamDefaultController#method_close_0)\n- [desiredSize](https://docs.deno.com/api/web/~/ReadableStreamDefaultController#property_desiredsize)\n- [enqueue](https://docs.deno.com/api/web/~/ReadableStreamDefaultController#method_enqueue_0)\n- [error](https://docs.deno.com/api/web/~/ReadableStreamDefaultController#method_error_0)\n- [prototype](https://docs.deno.com/api/web/~/ReadableStreamDefaultController#property_prototype)\n\n## ReadableStreamDefaultReader\nNo documentation available\n\n- [prototype](https://docs.deno.com/api/web/~/ReadableStreamDefaultReader#property_prototype)\n- [read](https://docs.deno.com/api/web/~/ReadableStreamDefaultReader#method_read_0)\n- [releaseLock](https://docs.deno.com/api/web/~/ReadableStreamDefaultReader#method_releaselock_0)\n\n## ReadableStreamGenericReader\nNo documentation available\n\n- [cancel](https://docs.deno.com/api/web/~/ReadableStreamGenericReader#method_cancel_0)\n- [closed](https://docs.deno.com/api/web/~/ReadableStreamGenericReader#property_closed)\n\n## ReadableStreamGetReaderOptions\nNo documentation available\n\n- [mode](https://docs.deno.com/api/web/~/ReadableStreamGetReaderOptions#property_mode)\n\n## ReadableStreamIteratorOptions\nNo documentation available\n\n- [preventCancel](https://docs.deno.com/api/web/~/ReadableStreamIteratorOptions#property_preventcancel)\n\n## ReadableStreamReadDoneResult\nNo documentation available\n\n- [done](https://docs.deno.com/api/web/~/ReadableStreamReadDoneResult#property_done)\n- [value](https://docs.deno.com/api/web/~/ReadableStreamReadDoneResult#property_value)\n\n## ReadableStreamReadValueResult\nNo documentation available\n\n- [done](https://docs.deno.com/api/web/~/ReadableStreamReadValueResult#property_done)\n- [value](https://docs.deno.com/api/web/~/ReadableStreamReadValueResult#property_value)\n\n## ReadableWritablePair\nNo documentation available\n\n- [readable](https://docs.deno.com/api/web/~/ReadableWritablePair#property_readable)\n- [writable](https://docs.deno.com/api/web/~/ReadableWritablePair#property_writable)\n\n## StreamPipeOptions\nNo documentation available\n\n- [preventAbort](https://docs.deno.com/api/web/~/StreamPipeOptions#property_preventabort)\n- [preventCancel](https://docs.deno.com/api/web/~/StreamPipeOptions#property_preventcancel)\n- [preventClose](https://docs.deno.com/api/web/~/StreamPipeOptions#property_preventclose)\n- [signal](https://docs.deno.com/api/web/~/StreamPipeOptions#property_signal)\n\n## Transformer\nNo documentation available\n\n- [cancel](https://docs.deno.com/api/web/~/Transformer#property_cancel)\n- [flush](https://docs.deno.com/api/web/~/Transformer#property_flush)\n- [readableType](https://docs.deno.com/api/web/~/Transformer#property_readabletype)\n- [start](https://docs.deno.com/api/web/~/Transformer#property_start)\n- [transform](https://docs.deno.com/api/web/~/Transformer#property_transform)\n- [writableType](https://docs.deno.com/api/web/~/Transformer#property_writabletype)\n\n## TransformerCancelCallback\nNo documentation available\n\n## TransformerFlushCallback\nNo documentation available\n\n## TransformerStartCallback\nNo documentation available\n\n## TransformerTransformCallback\nNo documentation available\n\n## TransformStream\nNo documentation available\n\n- [prototype](https://docs.deno.com/api/web/~/TransformStream#property_prototype)\n- [readable](https://docs.deno.com/api/web/~/TransformStream#property_readable)\n- [writable](https://docs.deno.com/api/web/~/TransformStream#property_writable)\n\n## TransformStreamDefaultController\nNo documentation available\n\n- [desiredSize](https://docs.deno.com/api/web/~/TransformStreamDefaultController#property_desiredsize)\n- [enqueue](https://docs.deno.com/api/web/~/TransformStreamDefaultController#method_enqueue_0)\n- [error](https://docs.deno.com/api/web/~/TransformStreamDefaultController#method_error_0)\n- [prototype](https://docs.deno.com/api/web/~/TransformStreamDefaultController#property_prototype)\n- [terminate](https://docs.deno.com/api/web/~/TransformStreamDefaultController#method_terminate_0)\n\n## UnderlyingByteSource\nNo documentation available\n\n- [autoAllocateChunkSize](https://docs.deno.com/api/web/~/UnderlyingByteSource#property_autoallocatechunksize)\n- [cancel](https://docs.deno.com/api/web/~/UnderlyingByteSource#property_cancel)\n- [pull](https://docs.deno.com/api/web/~/UnderlyingByteSource#property_pull)\n- [start](https://docs.deno.com/api/web/~/UnderlyingByteSource#property_start)\n- [type](https://docs.deno.com/api/web/~/UnderlyingByteSource#property_type)\n\n## UnderlyingDefaultSource\nNo documentation available\n\n- [cancel](https://docs.deno.com/api/web/~/UnderlyingDefaultSource#property_cancel)\n- [pull](https://docs.deno.com/api/web/~/UnderlyingDefaultSource#property_pull)\n- [start](https://docs.deno.com/api/web/~/UnderlyingDefaultSource#property_start)\n- [type](https://docs.deno.com/api/web/~/UnderlyingDefaultSource#property_type)\n\n## UnderlyingSink\nNo documentation available\n\n- [abort](https://docs.deno.com/api/web/~/UnderlyingSink#property_abort)\n- [close](https://docs.deno.com/api/web/~/UnderlyingSink#property_close)\n- [start](https://docs.deno.com/api/web/~/UnderlyingSink#property_start)\n- [type](https://docs.deno.com/api/web/~/UnderlyingSink#property_type)\n- [write](https://docs.deno.com/api/web/~/UnderlyingSink#property_write)\n\n## UnderlyingSinkAbortCallback\nNo documentation available\n\n## UnderlyingSinkCloseCallback\nNo documentation available\n\n## UnderlyingSinkStartCallback\nNo documentation available\n\n## UnderlyingSinkWriteCallback\nNo documentation available\n\n## UnderlyingSource\nNo documentation available\n\n- [autoAllocateChunkSize](https://docs.deno.com/api/web/~/UnderlyingSource#property_autoallocatechunksize)\n- [cancel](https://docs.deno.com/api/web/~/UnderlyingSource#property_cancel)\n- [pull](https://docs.deno.com/api/web/~/UnderlyingSource#property_pull)\n- [start](https://docs.deno.com/api/web/~/UnderlyingSource#property_start)\n- [type](https://docs.deno.com/api/web/~/UnderlyingSource#property_type)\n\n## UnderlyingSourceCancelCallback\nNo documentation available\n\n## UnderlyingSourcePullCallback\nNo documentation available\n\n## UnderlyingSourceStartCallback\nNo documentation available\n\n## WritableStream\nThis Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.\n\n- [abort](https://docs.deno.com/api/web/~/WritableStream#method_abort_0)\n- [close](https://docs.deno.com/api/web/~/WritableStream#method_close_0)\n- [getWriter](https://docs.deno.com/api/web/~/WritableStream#method_getwriter_0)\n- [locked](https://docs.deno.com/api/web/~/WritableStream#property_locked)\n- [prototype](https://docs.deno.com/api/web/~/WritableStream#property_prototype)\n\n## WritableStreamDefaultController\nThis Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.\n\n- [error](https://docs.deno.com/api/web/~/WritableStreamDefaultController#method_error_0)\n- [prototype](https://docs.deno.com/api/web/~/WritableStreamDefaultController#property_prototype)\n- [signal](https://docs.deno.com/api/web/~/WritableStreamDefaultController#property_signal)\n\n## WritableStreamDefaultWriter\nThis Streams API interface is the object returned by WritableStream.getWriter() and once created locks the writer to the WritableStream ensuring that no other streams can write to the underlying sink.\n\n- [abort](https://docs.deno.com/api/web/~/WritableStreamDefaultWriter#method_abort_0)\n- [close](https://docs.deno.com/api/web/~/WritableStreamDefaultWriter#method_close_0)\n- [closed](https://docs.deno.com/api/web/~/WritableStreamDefaultWriter#property_closed)\n- [desiredSize](https://docs.deno.com/api/web/~/WritableStreamDefaultWriter#property_desiredsize)\n- [prototype](https://docs.deno.com/api/web/~/WritableStreamDefaultWriter#property_prototype)\n- [ready](https://docs.deno.com/api/web/~/WritableStreamDefaultWriter#property_ready)\n- [releaseLock](https://docs.deno.com/api/web/~/WritableStreamDefaultWriter#method_releaselock_0)\n- [write](https://docs.deno.com/api/web/~/WritableStreamDefaultWriter#method_write_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/web/streams", "title": "Interfaces", "description": "This page covers various interfaces related to the Streams API in Deno.", "has_code_examples": false, "has_best_practices": false, "section_count": 43, "timestamp": "2025-02-28 00:38:13", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Streams - Web documentation", "ogSiteName": "Deno", "og:title": "Streams - Web documentation", "og:image": "/img/og.webp", "twitter:title": "Streams - Web documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Streams - Web documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "cab4ac4f-412b-42e0-8adb-3e544333539d", "sourceURL": "https://docs.deno.com/api/web/streams", "url": "https://docs.deno.com/api/web/streams", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Building Deno from Source\"?\n\nAssistant: Instructions on how to build Deno from source, including prerequisites and steps for different operating systems.\n\nHere's a detailed explanation:\n\n\n## Cloning the Repository\nDeno uses submodules, so you must remember to clone using `--recurse-submodules`.\n\n**Linux(Debian)/Mac/WSL**:\n\n```highlight notranslate shell\ngit clone --recurse-submodules https://github.com/denoland/deno.git\n```\n\n**Windows**:\n\n1. [Enable \"Developer Mode\"](https://www.google.com/search?q=windows+enable+developer+mode) (otherwise symlinks would require administrator privileges).\n2. Make sure you are using git version 2.19.2.windows.1 or newer.\n3. Set `core.symlinks=true` before the checkout:\n\n```highlight notranslate shell\ngit config --global core.symlinks true\ngit clone --recurse-submodules https://github.com/denoland/deno.git\n```\n\n## Prerequisites\n### Rust\n\nDeno requires a specific release of Rust. Deno may not support building on other versions, or on the Rust Nightly Releases. The version of Rust required for a particular release is specified in the `rust-toolchain.toml` file.\n\n[Update or Install Rust](https://www.rust-lang.org/tools/install). Check that Rust installed/updated correctly:\n\n```highlight notranslate console\nrustc -V\ncargo -V\n```\n\n### Native Compilers and Linkers\n\nMany components of Deno require a native compiler to build optimized native functions.\n\n#### Linux(Debian)/WSL\n\n```highlight notranslate shell\nwget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\n./llvm.sh 17\napt install --install-recommends -y cmake libglib2.0-dev\n```\n\n#### Mac\n\nMac users must have the _XCode Command Line Tools_ installed. ( [XCode](https://developer.apple.com/xcode/) already includes the _XCode Command _Line Tools_. Run `xcode-select --install` to install it without XCode.)\n\n[CMake](https://cmake.org/) is also required, but does not ship with the _Command Line Tools_.\n\n```highlight notranslate console\nbrew install cmake\n```\n\n#### Mac M1/M2\n\nFor Apple aarch64 users `lld` must be installed.\n\n```highlight notranslate console\nbrew install llvm lld\n# Add /opt/homebrew/opt/llvm/bin/ to $PATH\n```\n\n#### Windows\n\n1. Get [VS Community 2019](https://www.visualstudio.com/downloads/) with the \"Desktop development with C++\" toolkit and make sure to select the following required tools listed below along with all C++ tools.\n   - Visual C++ tools for CMake\n   - Windows 10 SDK (10.0.17763.0)\n   - Testing tools core features - Build Tools\n   - Visual C++ ATL for x86 and x64\n   - Visual C++ MFC for x86 and x64\n   - C++/CLI support\n   - VC++ 2015.3 v14.00 (v140) toolset for desktop\n2. Enable \"Debugging Tools for Windows\".\n   - Go to \"Control Panel\" → \"Programs\" → \"Programs and Features\"\n   - Select \"Windows Software Development Kit - Windows 10\"\n   - → \"Change\" → \"Change\" → Check \"Debugging Tools For Windows\" → \"Change\" →\"Finish\".\n   - Or use: [Debugging Tools for Windows](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/) (Notice: it will download the files, you should install `X64 Debuggers And Tools-x64_en-us.msi` file manually.)\n\n### Protobuf Compiler\n\nBuilding Deno requires the [Protocol Buffers compiler](https://grpc.io/docs/protoc-installation/).\n\n#### Linux(Debian)/WSL\n\n```highlight notranslate sh\napt install -y protobuf-compiler\nprotoc --version  # Ensure compiler version is 3+\n```\n\n#### Mac\n\n```highlight notranslate sh\nbrew install protobuf\nprotoc --version  # Ensure compiler version is 3+\n```\n\n#### Windows\n\nWindows users can download the latest binary release from [GitHub](https://github.com/protocolbuffers/protobuf/releases/latest).\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/building_from_source", "title": "Building Deno from Source", "description": "Instructions on how to build Deno from source, including prerequisites and steps for different operating systems.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:38:32", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Building deno from Source", "ogTitle": "Building deno from Source", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Building deno from Source", "ogImage": "/img/og.webp", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:title": "Building deno from Source", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "scrapeId": "822457ba-56ef-4726-be72-cba2045f527d", "sourceURL": "https://docs.deno.com/runtime/contributing/building_from_source", "url": "https://docs.deno.com/runtime/contributing/building_from_source/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Building Deno from Source\"?\n\nAssistant: Here are some code examples:\n\n### Cloning the Repository (Linux/Mac/WSL)\n```yaml\ngit clone --recurse-submodules https://github.com/denoland/deno.git\n```\n\n### Cloning the Repository (Windows)\n```yaml\ngit config --global core.symlinks true\ngit clone --recurse-submodules https://github.com/denoland/deno.git\n```\n\n### Check Rust Version\n```yaml\nrustc -V\ncargo -V\n```\n\n### Install Native Compilers (Linux/Debian/WSL)\n```yaml\nwget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\n./llvm.sh 17\napt install --install-recommends -y cmake libglib2.0-dev\n```\n\n### Install CMake (Mac)\n```yaml\nbrew install cmake\n```\n\n### Install LLVM and LLD (Mac M1/M2)\n```yaml\nbrew install llvm lld\n# Add /opt/homebrew/opt/llvm/bin/ to $PATH\n```\n\n### Install Protobuf Compiler (Linux/Debian/WSL)\n```yaml\napt install -y protobuf-compiler\nprotoc --version  # Ensure compiler version is 3+\n```\n\n### Install Protobuf Compiler (Mac)\n```yaml\nbrew install protobuf\nprotoc --version  # Ensure compiler version is 3+\n```\n\n### Build Deno\n```yaml\ncargo build -vv\n```\n\n### Run Tests\n```yaml\ncargo test -vv\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/building_from_source", "title": "Building Deno from Source", "description": "Instructions on how to build Deno from source, including prerequisites and steps for different operating systems.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:38:32", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Building deno from Source", "ogTitle": "Building deno from Source", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Building deno from Source", "ogImage": "/img/og.webp", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:title": "Building deno from Source", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "scrapeId": "822457ba-56ef-4726-be72-cba2045f527d", "sourceURL": "https://docs.deno.com/runtime/contributing/building_from_source", "url": "https://docs.deno.com/runtime/contributing/building_from_source/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Building Deno from Source\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have the latest version of Rust specified in the rust-toolchain.toml file.\n• For WSL, allocate at least 16GB of memory in .wslconfig.\n• If you encounter build errors, ensure you have the latest main branch and try building again, or clean and rebuild.\n• When working with multiple crates, use Cargo's patch feature to override default dependency paths.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/building_from_source", "title": "Building Deno from Source", "description": "Instructions on how to build Deno from source, including prerequisites and steps for different operating systems.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:38:32", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Building deno from Source", "ogTitle": "Building deno from Source", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Building deno from Source", "ogImage": "/img/og.webp", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:title": "Building deno from Source", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "scrapeId": "822457ba-56ef-4726-be72-cba2045f527d", "sourceURL": "https://docs.deno.com/runtime/contributing/building_from_source", "url": "https://docs.deno.com/runtime/contributing/building_from_source/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Web Platform Test\"?\n\nAssistant: Deno uses a custom test runner for Web Platform Tests. It can be found at ./tools/wpt.ts.\n\nHere's a detailed explanation:\n\n\n## Running tests\nIf you are on Windows, or your system does not support hashbangs, prefix all `./tools/wpt.ts` commands with `deno run --unstable --allow-write --allow-read --allow-net --allow-env --allow-run`.\n\nBefore attempting to run WPT tests for the first time, please run the WPT setup. You must also run this command every time the `./test_util/wpt` submodule is updated:\n\n```highlight notranslate shell\n./tools/wpt.ts setup\n```\n\nTo run all available web platform tests, run the following command:\n\n```highlight notranslate shell\n./tools/wpt.ts run\n\n# You can also filter which test files to run by specifying filters:\n./tools/wpt.ts run -- streams/piping/general hr-time\n```\n\nThe test runner will run each web platform test and record its status (failed or ok). It will then compare this output to the expected output of each test as specified in the `./tools/wpt/expectation.json` file. This file is a nested JSON structure that mirrors the `./test_utils/wpt` directory. It describes for each test file, if it should pass as a whole (all tests pass, `true`), if it should fail as a whole (test runner encounters an exception outside of a test or all tests fail, `false`), or which tests it expects to fail (a string array of test case names).\n\n## Updating enabled tests or expectations\nYou can update the `./tools/wpt/expectation.json` file manually by changing the value of each of the test file entries in the JSON structure. The alternative and preferred option is to have the WPT runner run all, or a filtered subset of tests, and then automatically update the `expectation.json` file to match the current reality. You can do this with the `./wpt.ts update` command. Example:\n\n```highlight notranslate shell\n./tools/wpt.ts update -- hr-time\n```\n\nAfter running this command the `expectation.json` file will match the current output of all the tests that were run. This means that running `wpt.ts run` right after a `wpt.ts update` should always pass.\n\n## Subcommands\n### `setup`\nValidate that your environment is configured correctly, or help you configure it.\n\nThis will check that the python3 (or `python.exe` on Windows) is actually Python 3.\n\nYou can specify the following flags to customize behaviour:\n\n```highlight notranslate console\n--rebuild\n    Rebuild the manifest instead of downloading. This can take up to 3 minutes.\n\n--auto-config\n    Automatically configure /etc/hosts if it is not configured (no prompt will be shown).\n```\n\n### `run`\nRun all tests like specified in `expectation.json`.\n\nYou can specify the following flags to customize behaviour:\n\n```highlight notranslate console\n--release\n    Use the ./target/release/deno binary instead of ./target/debug/deno\n\n--quiet\n    Disable printing of `ok` test cases.\n\n--json=\n    Output the test results as JSON to the file specified.\n```\n\nYou can also specify exactly which tests to run by specifying one of more filters after a `--`:\n\n```highlight notranslate console\n./tools/wpt.ts run -- hr-time streams/piping/general\n```\n\n### `update`\nUpdate the `expectation.json` to match the current reality.\n\nYou can specify the following flags to customize behaviour:\n\n```highlight notranslate console\n--release\n    Use the ./target/release/deno binary instead of ./target/debug/deno\n\n--quiet\n    Disable printing of `ok` test cases.\n\n--json=\n    Output the test results as JSON to the file specified.\n```\n\nYou can also specify exactly which tests to run by specifying one of more filters after a `--`:\n\n```highlight notranslate console\n./tools/wpt.ts update -- hr-time streams/piping/general\n```\n\n## FAQ\n### Upgrading the wpt submodule:\n\n```highlight notranslate shell\ncd test_util/wpt/\ngit fetch origin\ngit checkout origin/epochs/daily\ncd ../../\ngit add ./test_util/wpt\n```\n\nAll contributors will need to rerun `./tools/wpt.ts setup` after this.\n\nSince upgrading WPT usually requires updating the expectations to cover all sorts of upstream changes, it's best to do that as a separate PR, rather than as part of a PR that implements a fix or feature.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/web_platform_tests", "title": "Web Platform Test", "description": "Deno uses a custom test runner for Web Platform Tests. It can be found at ./tools/wpt.ts.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:38:46", "type": "overview", "page_metadata": {"og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:title": "Web Platform Test", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Web Platform Test", "title": "Web Platform Test", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:title": "Web Platform Test", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "scrapeId": "9595f173-6f85-4582-9336-aa653108fb3e", "sourceURL": "https://docs.deno.com/runtime/contributing/web_platform_tests", "url": "https://docs.deno.com/runtime/contributing/web_platform_tests/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Web Platform Test\"?\n\nAssistant: Here are some code examples:\n\n### Running WPT setup\n```yaml\n./tools/wpt.ts setup\n```\n\n### Running all web platform tests\n```yaml\n./tools/wpt.ts run\n```\n\n### Filtering test files to run\n```yaml\n./tools/wpt.ts run -- streams/piping/general hr-time\n```\n\n### Updating expectation.json\n```yaml\n./tools/wpt.ts update -- hr-time\n```\n\n### Setup subcommand\n```yaml\n./tools/wpt.ts setup --rebuild\n```\n\n### Run subcommand\n```yaml\n./tools/wpt.ts run --release\n```\n\n### Update subcommand\n```yaml\n./tools/wpt.ts update --quiet\n```\n\n### Upgrading the wpt submodule\n```yaml\ncd test_util/wpt/\ngit fetch origin\ngit checkout origin/epochs/daily\ncd ../../\ngit add ./test_util/wpt\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/web_platform_tests", "title": "Web Platform Test", "description": "Deno uses a custom test runner for Web Platform Tests. It can be found at ./tools/wpt.ts.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:38:46", "type": "code_examples", "page_metadata": {"og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:title": "Web Platform Test", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Web Platform Test", "title": "Web Platform Test", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:title": "Web Platform Test", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "scrapeId": "9595f173-6f85-4582-9336-aa653108fb3e", "sourceURL": "https://docs.deno.com/runtime/contributing/web_platform_tests", "url": "https://docs.deno.com/runtime/contributing/web_platform_tests/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Web Platform Test\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you are on Windows, prefix all `./tools/wpt.ts` commands with `deno run --unstable --allow-write --allow-read --allow-net --allow-env --allow-run`.\n• Run the WPT setup before attempting to run WPT tests for the first time and every time the `./test_util/wpt` submodule is updated.\n• Use the `./wpt.ts update` command to automatically update the `expectation.json` file to match the current reality after running tests.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/web_platform_tests", "title": "Web Platform Test", "description": "Deno uses a custom test runner for Web Platform Tests. It can be found at ./tools/wpt.ts.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:38:46", "type": "best_practices", "page_metadata": {"og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:title": "Web Platform Test", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Web Platform Test", "title": "Web Platform Test", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:title": "Web Platform Test", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "scrapeId": "9595f173-6f85-4582-9336-aa653108fb3e", "sourceURL": "https://docs.deno.com/runtime/contributing/web_platform_tests", "url": "https://docs.deno.com/runtime/contributing/web_platform_tests/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Web API\"?\n\nAssistant: Documentation for Deno's Web API, including functions, interfaces, type aliases, and variables.\n\nHere's a detailed explanation:\n\n\n## Functions\nA collection of functions available in the Deno Web API.\n\n## Interfaces\nA collection of interfaces available in the Deno Web API.\n\n## Type Aliases\nA collection of type aliases available in the Deno Web API.\n\n## Variables\nA collection of variables available in the Deno Web API.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/platform", "title": "Deno Web API", "description": "Documentation for Deno's Web API, including functions, interfaces, type aliases, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:38:54", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "ogLocale": "en_US", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Platform - Web documentation", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Platform - Web documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "Platform - Web documentation", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Platform - Web documentation", "og:type": "article", "og:site_name": "Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "3582bd73-0c2e-4d2a-bdb0-9431e0004be6", "sourceURL": "https://docs.deno.com/api/web/platform", "url": "https://docs.deno.com/api/web/platform", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno Web API\"?\n\nAssistant: Here are some code examples:\n\n### Functions\n```yaml\nalert('Hello, World!');\n```\n\n### clearInterval\n```yaml\nclearInterval(intervalId);\n```\n\n### setTimeout\n```yaml\nsetTimeout(() => { console.log('Hello after 1 second'); }, 1000);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/web/platform", "title": "Deno Web API", "description": "Documentation for Deno's Web API, including functions, interfaces, type aliases, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:38:54", "type": "code_examples", "page_metadata": {"twitter:site": "@deno_land", "ogLocale": "en_US", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Platform - Web documentation", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Platform - Web documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "Platform - Web documentation", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Platform - Web documentation", "og:type": "article", "og:site_name": "Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "3582bd73-0c2e-4d2a-bdb0-9431e0004be6", "sourceURL": "https://docs.deno.com/api/web/platform", "url": "https://docs.deno.com/api/web/platform", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Web API\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use clearInterval to stop a repeating action started by setInterval.\n• Use clearTimeout to cancel a scheduled action initiated by setTimeout.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/platform", "title": "Deno Web API", "description": "Documentation for Deno's Web API, including functions, interfaces, type aliases, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:38:54", "type": "best_practices", "page_metadata": {"twitter:site": "@deno_land", "ogLocale": "en_US", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Platform - Web documentation", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Platform - Web documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "Platform - Web documentation", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Platform - Web documentation", "og:type": "article", "og:site_name": "Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "3582bd73-0c2e-4d2a-bdb0-9431e0004be6", "sourceURL": "https://docs.deno.com/api/web/platform", "url": "https://docs.deno.com/api/web/platform", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Organizations\"?\n\nAssistant: Organizations allow you to collaborate with other users. A project created in an organization is accessible to all members of the organization. Users should first signup for Deno Deploy before they can be added to an organization.\n\nHere's a detailed explanation:\n\n\n## Create an organization\n1. On your Deploy dashboard, click on the organization dropdown in the top left of the screen, in the navigation bar.\n![organizations](https://docs.deno.com/deploy/docs-images/organizations.png)\n2. Select **Organization +**.\n3. Enter a name for your organization and click on **Create**.\n\n## Add members\n1. Select the desired organization in the organization dropdown in the top left of the screen, in the navigation bar.\n2. Click on the **Members** icon button.\n3. Under the **Members** panel, click on **\\+ Invite member**.\n\n> **Note:** Users should first signup for Deno Deploy using [this link](https://dash.deno.com/signin) before you invite them.\n\n4. Enter the GitHub username of the user and click on **Invite**.\n\nDeploy will send the user an invite email. They can then can either accept or decline your invite. Once they accept the invite, they're added to your organization and shown in the members panel.\n\nPending invites are displayed in the **Invites** panel. You can revoke pending invites by clicking on the delete icon next to the pending invite.\n\n## Remove members\n1. Select the desired organization in the organization dropdown in the top left of the screen, in the navigation bar.\n2. Click on the **Members** icon button.\n3. In the **Members** panel, click on the delete button beside the user you want to remove.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/organizations", "title": "Organizations", "description": "Organizations allow you to collaborate with other users. A project created in an organization is accessible to all members of the organization. Users should first signup for Deno Deploy before they can be added to an organization.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:39:01", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Organizations", "ogSiteName": "Deno", "og:site_name": "Deno", "language": "en", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "twitter:title": "Organizations", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Organizations", "twitter:image": "/img/og.webp", "title": "Organizations", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "09316feb-9eba-47d2-aaaf-e337c0f1f908", "sourceURL": "https://docs.deno.com/deploy/manual/organizations", "url": "https://docs.deno.com/deploy/manual/organizations/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Organizations\"?\n\nAssistant: Here are the recommended best practices:\n\n• Users should first signup for Deno Deploy before they can be added to an organization.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/organizations", "title": "Organizations", "description": "Organizations allow you to collaborate with other users. A project created in an organization is accessible to all members of the organization. Users should first signup for Deno Deploy before they can be added to an organization.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:39:01", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Organizations", "ogSiteName": "Deno", "og:site_name": "Deno", "language": "en", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "twitter:title": "Organizations", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Organizations", "twitter:image": "/img/og.webp", "title": "Organizations", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "09316feb-9eba-47d2-aaaf-e337c0f1f908", "sourceURL": "https://docs.deno.com/deploy/manual/organizations", "url": "https://docs.deno.com/deploy/manual/organizations/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"JSX\"?\n\nAssistant: Deno has built-in support for JSX in both .jsx files and .tsx files. JSX in Deno can be handy for server-side rendering or generating code for browser consumption.\n\nHere's a detailed explanation:\n\n\n## Default configuration\nThe Deno CLI has a default configuration for JSX that is different than the defaults for `tsc`. Effectively Deno uses the following [TypeScript compiler](https://www.typescriptlang.org/docs/handbook/compiler-options.html) options by default:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"React.createElement\",\n    \"jsxFragmentFactory\": \"React.Fragment\"\n  }\n}\n```\n\nUsing the \"react\" option will convert JSX into the following JavaScript code:\n\n```highlight notranslate jsx\n// input\nconst jsx = (\n  <div className=\"foo\">\n    <MyComponent value={2} />\n  </div>\n);\n\n// output:\nconst jsx = React.createElement(\n  \"div\",\n  { className: \"foo\" },\n  React.createElement(MyComponent, { value: 2 }),\n);\n```\n\n## JSX automatic runtime (recommended)\nIn React 17, the React team added what they called [the _new_ JSX transforms](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html). This enhanced and modernized the API for JSX transforms as well as provided a mechanism to automatically add relevant JSX imports so that you don't have to do this yourself. This is the recommended way to use JSX.\n\nTo use the newer JSX runtime transform change the compiler options in your `deno.json`.\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"react\"\n  },\n  \"imports\": {\n    \"react\": \"npm:react\"\n  }\n}\n```\n\nBehind the scenes the `jsxImportSource` setting will always append a `/jsx-runtime` to the import specifier.\n\n```highlight notranslate js\n// This import will be inserted automatically\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n```\n\nUsing the \"react-jsx\" option will convert JSX into the following JavaScript code:\n\n```highlight notranslate jsx\n// input\nconst jsx = (\n  <div className=\"foo\">\n    <MyComponent value={2} />\n  </div>\n);\n\n// output\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst jsx = _jsx(\n  \"div\",\n  {\n    className: \"foo\",\n    children: _jsx(MyComponent, { value: 2 }),\n  },\n);\n```\n\n## Development transform\nSetting the \"jsx\" option to \"react-jsxdev\" instead of \"react-jsx\" will pass additional debugging information to each JSX node. The additional information is the file path, line number and column number of the callsite of each JSX node.\n\nThis information is typically used in frameworks to enhance the debugging experience during development. In React this information is used to enhance stack traces and show where a component was instantiated in the React developer tools browser extension.\n\nUsing the \"react-jsxdev\" option will convert JSX into the following JavaScript code:\n\n```highlight notranslate jsx\n// input\nconst jsx = (\n  <div className=\"foo\">\n    <MyComponent value={2} />\n  </div>\n);\n\n// output\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst _jsxFileName = \"file:///input.tsx\";\nconst jsx = _jsxDEV(\n  \"div\",\n  {\n    className: \"foo\",\n    children: _jsxDEV(\n      MyComponent,\n      {\n        value: 2,\n      },\n      void 0,\n      false,\n      {\n        fileName: _jsxFileName,\n        lineNumber: 3,\n        columnNumber: 5,\n      },\n      this,\n    ),\n  },\n  void 0,\n  false,\n  {\n    fileName: _jsxFileName,\n    lineNumber: 1,\n    columnNumber: 14,\n  },\n  this,\n);\n```\n\n## Using the JSX import source pragma\nWhether you have a JSX import source configured for your project, or if you are using the default \"legacy\" configuration, you can add the JSX import source pragma to a `.jsx` or `.tsx` module, and Deno will respect it.\n\nThe `@jsxImportSource` pragma needs to be in the leading comments of the module. For example to use Preact from [esm.sh](http://esm.sh/), you would do something like this:\n\n```highlight notranslate jsx\n/** @jsxImportSource https://esm.sh/preact */\n\nexport function App() {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n    </div>\n  );\n}\n```\n\n## `jsxImportSourceTypes`\nIn certain cases, a library may not provide types. To specify the types, you can use the `@jsxImportSourceTypes` pragma:\n\n```highlight notranslate jsx\n/** @jsxImportSource npm:react@^18.3 */\n/** @jsxImportSourceTypes npm:@types/react@^18.3 */\n\nexport function Hello() {\n  return <div>Hello!</div>;\n}\n```\n\nOr specify via the `jsxImportSourceTypes` compiler option in a _deno.json_:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"npm:react@^18.3\",\n    \"jsxImportSourceTypes\": \"npm:@types/react@^18.3\"\n  }\n}\n```\n\n## JSX precompile transform\nDeno ships with a [new JSX transform](https://deno.com/blog/v1.38#fastest-jsx-transform) that is optimized for server-side rendering. It can be up to **7-20x faster** than the other JSX transform options. The difference is that the precompile transform analyses your JSX statically and stores precompiled HTML strings if possible. That way a lot of time creating JSX objects can be avoided.\n\nTo use the precompile transform, set the `jsx` option to \"precompile\".\n\ndeno.json\n\n```highlight notranslate diff\n  {\n    \"compilerOptions\": {\n+     \"jsx\": \"precompile\",\n      \"jsxImportSource\": \"preact\"\n    },\n    \"imports\": {\n      \"preact\": \"npm:preact\"\n    }\n  }\n```\n\nTo prevent JSX nodes representing HTML elements from being precompiled, you can add them to the `jsxPrecompileSkipElements` setting.\n\ndeno.json\n\n```highlight notranslate diff\n  {\n    \"compilerOptions\": {\n      \"jsx\": \"precompile\",\n      \"jsxImportSource\": \"preact\",\n+     \"jsxPrecompileSkipElements\": [\"a\", \"link\"]\n    },\n    \"imports\": {\n      \"preact\": \"npm:preact\"\n    }\n  }\n```\n\nNote\n\nThe `precompile` transform works best with [Preact](https://preactjs.com/) or [Hono](https://hono.dev/). It is not supported in React.\n\nUsing the \"precompile\" option will convert JSX into the following JavaScript code:\n\n```highlight notranslate jsx\n// input\nconst jsx = (\n  <div className=\"foo\">\n    <MyComponent value={2} />\n  </div>\n);\n\n// output:\nimport {\n  jsx as _jsx,\n  jsxTemplate as _jsxTemplate,\n} from \"npm:preact/jsx-runtime\";\nconst $$_tpl_1 = [\\\n  '<div class=\"foo\">',\\\n  \"</div>\",\\\n];\nfunction MyComponent() {\n  return null;\n}\nconst jsx = _jsxTemplate(\n  $$_tpl_1,\n  _jsx(MyComponent, {\n    value: 2,\n  }),\n);\n```\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/jsx", "title": "JSX", "description": "Deno has built-in support for JSX in both .jsx files and .tsx files. JSX in Deno can be handy for server-side rendering or generating code for browser consumption.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:40:09", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "JSX", "og:type": "article", "og:site_name": "Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "JSX", "language": "en", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "JSX", "title": "JSX", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "6ff8a63f-ff09-4d38-8499-079a0bb991c4", "sourceURL": "https://docs.deno.com/runtime/reference/jsx", "url": "https://docs.deno.com/runtime/reference/jsx/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"JSX\"?\n\nAssistant: Here are some code examples:\n\n### Default configuration\n```yaml\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"React.createElement\",\n    \"jsxFragmentFactory\": \"React.Fragment\"\n  }\n}\n```\n\n### Using the \"react\" option\n```yaml\n// input\nconst jsx = (\n  <div className=\"foo\">\n    <MyComponent value={2} />\n  </div>\n);\n\n// output:\nconst jsx = React.createElement(\n  \"div\",\n  { className: \"foo\" },\n  React.createElement(MyComponent, { value: 2 }),\n);\n```\n\n### JSX automatic runtime configuration\n```yaml\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"react\"\n  },\n  \"imports\": {\n    \"react\": \"npm:react\"\n  }\n}\n```\n\n### Using the \"react-jsx\" option\n```yaml\n// input\nconst jsx = (\n  <div className=\"foo\">\n    <MyComponent value={2} />\n  </div>\n);\n\n// output\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst jsx = _jsx(\n  \"div\",\n  {\n    className: \"foo\",\n    children: _jsx(MyComponent, { value: 2 }),\n  },\n);\n```\n\n### Development transform configuration\n```yaml\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsxdev\"\n  }\n}\n```\n\n### Using the JSX import source pragma\n```yaml\n/** @jsxImportSource https://esm.sh/preact */\n\nexport function App() {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n    </div>\n  );\n}\n```\n\n### jsxImportSourceTypes configuration\n```yaml\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"npm:react@^18.3\",\n    \"jsxImportSourceTypes\": \"npm:@types/react@^18.3\"\n  }\n}\n```\n\n### JSX precompile transform configuration\n```yaml\n{\n  \"compilerOptions\": {\n    \"jsx\": \"precompile\",\n    \"jsxImportSource\": \"preact\"\n  },\n  \"imports\": {\n    \"preact\": \"npm:preact\"\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/jsx", "title": "JSX", "description": "Deno has built-in support for JSX in both .jsx files and .tsx files. JSX in Deno can be handy for server-side rendering or generating code for browser consumption.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:40:09", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "JSX", "og:type": "article", "og:site_name": "Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "JSX", "language": "en", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "JSX", "title": "JSX", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "6ff8a63f-ff09-4d38-8499-079a0bb991c4", "sourceURL": "https://docs.deno.com/runtime/reference/jsx", "url": "https://docs.deno.com/runtime/reference/jsx/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"JSX\"?\n\nAssistant: Here are the recommended best practices:\n\n• Only use the \"react-jsxdev\" information during development and not in production.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/jsx", "title": "JSX", "description": "Deno has built-in support for JSX in both .jsx files and .tsx files. JSX in Deno can be handy for server-side rendering or generating code for browser consumption.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 00:40:09", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "JSX", "og:type": "article", "og:site_name": "Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "JSX", "language": "en", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "JSX", "title": "JSX", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "6ff8a63f-ff09-4d38-8499-079a0bb991c4", "sourceURL": "https://docs.deno.com/runtime/reference/jsx", "url": "https://docs.deno.com/runtime/reference/jsx/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the `node:util` module in Deno, including classes, functions, interfaces, namespaces, type aliases, and variables.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:util\";\n``` \nThe `node:util` module supports the needs of Node.js internal APIs. Many of the utilities are useful for application and module developers as well. To access it:\n\n```highlight notranslate js\nimport util from 'node:util';\n```\n\n## Classes\n### Classes\n\n- [MIMEParams](https://docs.deno.com/api/node/util/~/MIMEParams \"MIMEParams\")\n  - No documentation available\n  - [delete](https://docs.deno.com/api/node/util/~/MIMEParams#method_delete_0)\n  - [entries](https://docs.deno.com/api/node/util/~/MIMEParams#method_entries_0)\n  - [get](https://docs.deno.com/api/node/util/~/MIMEParams#method_get_0)\n  - [has](https://docs.deno.com/api/node/util/~/MIMEParams#method_has_0)\n  - [keys](https://docs.deno.com/api/node/util/~/MIMEParams#method_keys_0)\n  - [set](https://docs.deno.com/api/node/util/~/MIMEParams#method_set_0)\n  - [values](https://docs.deno.com/api/node/util/~/MIMEParams#method_values_0)\n\n- [MIMEType](https://docs.deno.com/api/node/util/~/MIMEType \"MIMEType\")\n  - No documentation available\n  - [essence](https://docs.deno.com/api/node/util/~/MIMEType#property_essence)\n  - [params](https://docs.deno.com/api/node/util/~/MIMEType#property_params)\n  - [subtype](https://docs.deno.com/api/node/util/~/MIMEType#property_subtype)\n  - [toString](https://docs.deno.com/api/node/util/~/MIMEType#method_tostring_0)\n  - [type](https://docs.deno.com/api/node/util/~/MIMEType#property_type)\n\n- [TextDecoder](https://docs.deno.com/api/node/util/~/TextDecoder \"TextDecoder\")\n  - An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextDecoder` API.\n  - [decode](https://docs.deno.com/api/node/util/~/TextDecoder#method_decode_0)\n  - [encoding](https://docs.deno.com/api/node/util/~/TextDecoder#property_encoding)\n  - [fatal](https://docs.deno.com/api/node/util/~/TextDecoder#property_fatal)\n  - [ignoreBOM](https://docs.deno.com/api/node/util/~/TextDecoder#property_ignorebom)\n\n- [TextEncoder](https://docs.deno.com/api/node/util/~/TextEncoder \"TextEncoder\")\n  - An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextEncoder` API. All instances of `TextEncoder` only support UTF-8 encoding.\n  - [encode](https://docs.deno.com/api/node/util/~/TextEncoder#method_encode_0)\n  - [encodeInto](https://docs.deno.com/api/node/util/~/TextEncoder#method_encodeinto_0)\n  - [encoding](https://docs.deno.com/api/node/util/~/TextEncoder#property_encoding)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/util", "title": "Usage in Deno", "description": "This page covers the usage of the `node:util` module in Deno, including classes, functions, interfaces, namespaces, type aliases, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:40:26", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "ogTitle": "util - Node documentation", "viewport": "width=device-width, initial-scale=1", "og:title": "util - Node documentation", "ogLocale": "en_US", "twitter:title": "util - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "title": "util - Node documentation", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:type": "article", "scrapeId": "e0198ce4-07c2-400e-a9d2-8b9cef778f2f", "sourceURL": "https://docs.deno.com/api/node/util", "url": "https://docs.deno.com/api/node/util/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the util module\n```yaml\nimport * as mod from \"node:util\";\n```\n\n### Accessing the util module\n```yaml\nimport util from 'node:util';\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/util", "title": "Usage in Deno", "description": "This page covers the usage of the `node:util` module in Deno, including classes, functions, interfaces, namespaces, type aliases, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:40:26", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "ogTitle": "util - Node documentation", "viewport": "width=device-width, initial-scale=1", "og:title": "util - Node documentation", "ogLocale": "en_US", "twitter:title": "util - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "title": "util - Node documentation", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:type": "article", "scrapeId": "e0198ce4-07c2-400e-a9d2-8b9cef778f2f", "sourceURL": "https://docs.deno.com/api/node/util", "url": "https://docs.deno.com/api/node/util/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `node:util` module for accessing Node.js internal APIs and utilities that are useful for application and module development.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/util", "title": "Usage in Deno", "description": "This page covers the usage of the `node:util` module in Deno, including classes, functions, interfaces, namespaces, type aliases, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:40:26", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "ogTitle": "util - Node documentation", "viewport": "width=device-width, initial-scale=1", "og:title": "util - Node documentation", "ogLocale": "en_US", "twitter:title": "util - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "title": "util - Node documentation", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:type": "article", "scrapeId": "e0198ce4-07c2-400e-a9d2-8b9cef778f2f", "sourceURL": "https://docs.deno.com/api/node/util", "url": "https://docs.deno.com/api/node/util/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Writing an HTTP Server\"?\n\nAssistant: This page covers how to build an HTTP server using Deno's built-in HTTP server API, including examples and best practices.\n\nHere's a detailed explanation:\n\n\n## Deno's built-in HTTP server\nDeno has a built in HTTP server API that allows you to write HTTP servers. The `Deno.serve` API supports HTTP/1.1 and HTTP/2.\n\n## A \"Hello World\" server\nThe `Deno.serve` function takes a handler function that will be called for each incoming request, and is expected to return a response (or a promise resolving to a response).\n\nHere is an example of a server that returns a \"Hello, World!\" response for each request:\n\n```typescript\nDeno.serve((_req) => {\n  return new Response(\"Hello, World!\");\n});\n```\n\nThe handler can also return a `Promise<Response>`, which means it can be an `async` function.\n\nTo run this server, you can use the `deno run` command:\n\n```sh\ndeno run --allow-net server.ts\n```\n\n## Listening on a specific port\nBy default `Deno.serve` will listen on port `8000`, but this can be changed by passing in a port number in options bag as the first or second argument:\n\n```javascript\n// To listen on port 4242.\nDeno.serve({ port: 4242 }, handler);\n\n// To listen on port 4242 and bind to 0.0.0.0.\nDeno.serve({ port: 4242, hostname: \"0.0.0.0\" }, handler);\n```\n\n## Inspecting the incoming request\nMost servers will not answer with the same response for every request. Instead they will change their answer depending on various aspects of the request: the HTTP method, the headers, the path, or the body contents.\n\nThe request is passed in as the first argument to the handler function. Here is an example showing how to extract various parts of the request:\n\n```typescript\nDeno.serve(async (req) => {\n  console.log(\"Method:\", req.method);\n\n  const url = new URL(req.url);\n  console.log(\"Path:\", url.pathname);\n  console.log(\"Query parameters:\", url.searchParams);\n\n  console.log(\"Headers:\", req.headers);\n\n  if (req.body) {\n    const body = await req.text();\n    console.log(\"Body:\", body);\n  }\n\n  return new Response(\"Hello, World!\");\n});\n```\n\nCaution\n\nBe aware that the `req.text()` call can fail if the user hangs up the connection before the body is fully received. Make sure to handle this case. Do note this can happen in all methods that read from the request body, such as `req.json()`, `req.formData()`, `req.arrayBuffer()`, `req.body.getReader().read()`, `req.body.pipeTo()`, etc.\n\n## Responding with real data\nMost servers do not respond with \"Hello, World!\" to every request. Instead they might respond with different headers, status codes, and body contents (even body streams).\n\nHere is an example of returning a response with a 404 status code, a JSON body, and a custom header:\n\n```typescript\nDeno.serve((req) => {\n  const body = JSON.stringify({ message: \"NOT FOUND\" });\n  return new Response(body, {\n    status: 404,\n    headers: {\n      \"content-type\": \"application/json; charset=utf-8\",\n    },\n  });\n});\n```\n\n## Responding with a stream\nResponse bodies can also be streams. Here is an example of a response that returns a stream of \"Hello, World!\" repeated every second:\n\n```typescript\nDeno.serve((req) => {\n  let timer: number;\n  const body = new ReadableStream({\n    async start(controller) {\n      timer = setInterval(() => {\n        controller.enqueue(\"Hello, World!\\n\");\n      }, 1000);\n    },\n    cancel() {\n      clearInterval(timer);\n    },\n  });\n  return new Response(body.pipeThrough(new TextEncoderStream()), {\n    headers: {\n      \"content-type\": \"text/plain; charset=utf-8\",\n    },\n  });\n});\n```\n\nNote\n\nNote the `cancel` function above. This is called when the client hangs up the connection. It is important to make sure that you handle this case, otherwise the server will keep queuing up messages forever, and eventually run out of memory.\n\n## HTTPS support\nTo use HTTPS, pass two extra arguments in the options: `cert` and `key`. These are contents of the certificate and key files, respectively.\n\n```javascript\nDeno.serve({\n  port: 443,\n  cert: Deno.readTextFileSync(\"./cert.pem\"),\n  key: Deno.readTextFileSync(\"./key.pem\"),\n}, handler);\n```\n\nNote\n\nTo use HTTPS, you will need a valid TLS certificate and a private key for your server.\n\n## HTTP/2 support\nHTTP/2 support is \"automatic\" when using the HTTP server APIs with Deno. You just need to create your server, and it will handle HTTP/1 or HTTP/2 requests seamlessly.\n\n## Automatic body compression\nThe HTTP server has built in automatic compression of response bodies. When a response is sent to a client, Deno determines if the response body can be safely compressed. This compression happens within the internals of Deno, so it is fast and efficient.\n\nCurrently Deno supports gzip and brotli compression. A body is automatically compressed if the following conditions are true:\n\n- The request has an `Accept-Encoding` header which indicates the requester supports `br` for Brotli or `gzip`. Deno will respect the preference of the quality value in the header.\n- The response includes a `Content-Type` which is considered compressible.\n- The response body is greater than 64 bytes.\n\nWhen the response body is compressed, Deno will set the `Content-Encoding` header to reflect the encoding, as well as ensure the `Vary` header is adjusted or added to indicate which request headers affected the response.\n\n## Serving WebSockets\nDeno can upgrade incoming HTTP requests to a WebSocket. This allows you to handle WebSocket endpoints on your HTTP servers.\n\nTo upgrade an incoming `Request` to a WebSocket you use the `Deno.upgradeWebSocket` function. This returns an object consisting of a `Response` and a web standard `WebSocket` object. The returned response should be used to respond to the incoming request.\n\n```typescript\nDeno.serve((req) => {\n  if (req.headers.get(\"upgrade\") != \"websocket\") {\n    return new Response(null, { status: 501 });\n  }\n\n  const { socket, response } = Deno.upgradeWebSocket(req);\n  socket.addEventListener(\"open\", () => {\n    console.log(\"a client connected!\");\n  });\n\n  socket.addEventListener(\"message\", (event) => {\n    if (event.data === \"ping\") {\n      socket.send(\"pong\");\n    }\n  });\n\n  return response;\n});\n```\n\nNote\n\nNote that WebSockets are only supported on HTTP/1.1 for now.\n\n## Default fetch export\nAnother way to create an HTTP server in Deno is by exporting a default `fetch` function. The fetch API initiates an HTTP request to retrieve data from across a network and is built into the Deno runtime.\n\n```typescript\nexport default {\n  fetch(request) {\n    const userAgent = request.headers.get(\"user-agent\") || \"Unknown\";\n    return new Response(`User Agent: ${userAgent}`);\n  },\n} satisfies Deno.ServeDefaultExport;\n```\n\nYou can run this file with the `deno serve` command:\n\n```sh\ndeno serve server.ts\n```\n\n## Building on these examples\nYou will likely want to expand on these examples to create more complex servers. Deno recommends using Oak for building web servers. Oak is a middleware framework for Deno's HTTP server, designed to be expressive and easy to use.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/http_server", "title": "Writing an HTTP Server", "description": "This page covers how to build an HTTP server using Deno's built-in HTTP server API, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 00:41:00", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "title": "Writing an HTTP Server", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogTitle": "Writing an HTTP Server", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "twitter:title": "Writing an HTTP Server", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Writing an HTTP Server", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "473da17d-94ff-4b69-b6dc-b5f3c466f2ff", "sourceURL": "https://docs.deno.com/runtime/fundamentals/http_server", "url": "https://docs.deno.com/runtime/fundamentals/http_server/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Writing an HTTP Server\"?\n\nAssistant: Here are some code examples:\n\n### A \"Hello World\" server\n```yaml\nDeno.serve((_req) => {\n  return new Response(\"Hello, World!\");\n});\n```\n\n### Running the server\n```yaml\ndeno run --allow-net server.ts\n```\n\n### Listening on a specific port\n```yaml\n// To listen on port 4242.\nDeno.serve({ port: 4242 }, handler);\n\n// To listen on port 4242 and bind to 0.0.0.0.\nDeno.serve({ port: 4242, hostname: \"0.0.0.0\" }, handler);\n```\n\n### Inspecting the incoming request\n```yaml\nDeno.serve(async (req) => {\n  console.log(\"Method:\", req.method);\n\n  const url = new URL(req.url);\n  console.log(\"Path:\", url.pathname);\n  console.log(\"Query parameters:\", url.searchParams);\n\n  console.log(\"Headers:\", req.headers);\n\n  if (req.body) {\n    const body = await req.text();\n    console.log(\"Body:\", body);\n  }\n\n  return new Response(\"Hello, World!\");\n});\n```\n\n### Responding with real data\n```yaml\nDeno.serve((req) => {\n  const body = JSON.stringify({ message: \"NOT FOUND\" });\n  return new Response(body, {\n    status: 404,\n    headers: {\n      \"content-type\": \"application/json; charset=utf-8\",\n    },\n  });\n});\n```\n\n### Responding with a stream\n```yaml\nDeno.serve((req) => {\n  let timer: number;\n  const body = new ReadableStream({\n    async start(controller) {\n      timer = setInterval(() => {\n        controller.enqueue(\"Hello, World!\\n\");\n      }, 1000);\n    },\n    cancel() {\n      clearInterval(timer);\n    },\n  });\n  return new Response(body.pipeThrough(new TextEncoderStream()), {\n    headers: {\n      \"content-type\": \"text/plain; charset=utf-8\",\n    },\n  });\n});\n```\n\n### Using HTTPS\n```yaml\nDeno.serve({\n  port: 443,\n  cert: Deno.readTextFileSync(\"./cert.pem\"),\n  key: Deno.readTextFileSync(\"./key.pem\"),\n}, handler);\n```\n\n### Default fetch export\n```yaml\nexport default {\n  fetch(request) {\n    const userAgent = request.headers.get(\"user-agent\") || \"Unknown\";\n    return new Response(`User Agent: ${userAgent}`);\n  },\n} satisfies Deno.ServeDefaultExport;\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/http_server", "title": "Writing an HTTP Server", "description": "This page covers how to build an HTTP server using Deno's built-in HTTP server API, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 00:41:00", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "title": "Writing an HTTP Server", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogTitle": "Writing an HTTP Server", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "twitter:title": "Writing an HTTP Server", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Writing an HTTP Server", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "473da17d-94ff-4b69-b6dc-b5f3c466f2ff", "sourceURL": "https://docs.deno.com/runtime/fundamentals/http_server", "url": "https://docs.deno.com/runtime/fundamentals/http_server/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Writing an HTTP Server\"?\n\nAssistant: Here are the recommended best practices:\n\n• Be aware that the `req.text()` call can fail if the user hangs up the connection before the body is fully received. Make sure to handle this case.\n• Note the `cancel` function in the stream example. This is called when the client hangs up the connection. It is important to handle this case to avoid memory issues.\n• To use HTTPS, you will need a valid TLS certificate and a private key for your server.\n• WebSockets are only supported on HTTP/1.1 for now.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/http_server", "title": "Writing an HTTP Server", "description": "This page covers how to build an HTTP server using Deno's built-in HTTP server API, including examples and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 00:41:00", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "title": "Writing an HTTP Server", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogTitle": "Writing an HTTP Server", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "twitter:title": "Writing an HTTP Server", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Writing an HTTP Server", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "473da17d-94ff-4b69-b6dc-b5f3c466f2ff", "sourceURL": "https://docs.deno.com/runtime/fundamentals/http_server", "url": "https://docs.deno.com/runtime/fundamentals/http_server/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Set up your environment\"?\n\nAssistant: Deno comes with many of the tools that are commonly needed for developing applications, including a full language server (LSP) to help power your IDE of choice. This page will help you set up your environment to get the most out of Deno while you are developing.\n\nHere's a detailed explanation:\n\n\n## Setting up your editor/IDE\nDeno is well-supported on various editors and IDEs. Below are the instructions for setting up Deno with different editors.\n\n## Visual Studio Code\nIf you haven’t already, download and install Visual Studio Code from the official website. In the Extensions tab, search for \"Deno\" and install the extension by Denoland. Next, open the Command Palette by pressing `Ctrl+Shift+P` and type `Deno: Initialize Workspace Configuration`. Select this option to configure Deno for your workspace. A file called `.vscode/settings.json` will be created in your workspace with the following configuration:\n\n```json\n{\n  \"deno.enable\": true\n}\n```\n\nThat’s it! You’ve successfully set up your developer environment for Deno using VSCode. You will now get all the benefits of Deno’s LSP, including IntelliSense, code formatting, linting, and more.\n\n## JetBrains IDEs\nTo install the Deno Plugin, open your IDE and go to **File** > **Settings**. Navigate to **Plugins** and search for `Deno`. Install the official Deno plugin. To configure the Plugin, go to **File** > **Settings** again. Navigate to **Languages & Frameworks** > **Deno**. Check **Enable Deno for your project** and specify the path to the Deno executable (if it has not been auto-detected). Check out this blog post to learn more about how to get started with Deno in Jetbrains IDEs.\n\n## Vim/Neovim via plugins\nDeno is well-supported on both Vim and Neovim via coc.nvim, vim-easycomplete, ALE and vim-lsp. coc.nvim offers plugins to integrate to the Deno language server while ALE supports it out of the box.\n\n## Neovim 0.6+ using the built-in language server\nTo use the Deno language server install nvim-lspconfig and follow the instructions to enable the supplied Deno configuration. Note that if you also have `ts_ls` as an LSP client, you may run into issues where both `ts_ls` and `denols` are attached to your current buffer. To resolve this, make sure to set some unique `root_dir` for both `ts_ls` and `denols`. You may also need to set `single_file_support` to `false` for `ts_ls` to prevent it from running in single file mode. Here is an example of such a configuration:\n\n```lua\nlocal nvim_lsp = require('lspconfig')\nnvim_lsp.denols.setup {\n  on_attach = on_attach,\n  root_dir = nvim_lsp.util.root_pattern(\"deno.json\", \"deno.jsonc\"),\n}\n\nnvim_lsp.ts_ls.setup {\n  on_attach = on_attach,\n  root_dir = nvim_lsp.util.root_pattern(\"package.json\"),\n  single_file_support = false\n}\n```\n\n## Kickstart.nvim and Mason LSP\nIf you are using kickstart.nvim add the above configuration like this inside the servers table in your configuration `init.lua`.\n\n```lua\nlocal servers = {\n        -- ... some configuration\n        ts_ls = {\n            root_dir = require(\"lspconfig\").util.root_pattern({ \"package.json\", \"tsconfig.json\" }),\n            single_file_support = false,\n            settings = {},\n        },\n        denols = {\n            root_dir = require(\"lspconfig\").util.root_pattern({\"deno.json\", \"deno.jsonc\"}),\n            single_file_support = false,\n            settings = {},\n        },\n    }\n```\n\n## coc.nvim\nOnce you have coc.nvim installed, you need to install the required coc-deno via `:CocInstall coc-deno`. Once the plugin is installed, and you want to enable Deno for a workspace, run the command `:CocCommand deno.initializeWorkspace` and you should be able to utilize commands like `gd` (goto definition) and `gr` (go/find references).\n\n## ALE\nALE supports Deno via the Deno language server out of the box and in many uses cases doesn't require additional configuration. Once you have ALE installed you can perform the command `:help ale-typescript-deno` to get information on the configuration options available.\n\n## Vim-EasyComplete\nVim-EasyComplete supports Deno without any other configuration. Once you have vim-easycomplete installed, you need install deno via `:InstallLspServer deno` if you haven't installed deno.\n\n## Vim-Lsp\nAfter installing Vim-Lsp through vim-plug or vim packages. Add this code to your `.vimrc` configuration:\n\n```vim\nif executable('deno')\n  let server_config = {\n    \\ 'name': 'deno',\n    \\ 'cmd': {server_info->['deno', 'lsp']},\n    \\ 'allowlist': ['typescript', 'javascript', 'javascriptreact', 'typescriptreact'],\n    \\ }\n\n  if exists('$DENO_ENABLE')\n    let deno_enabled = $DENO_ENABLE == '1'\n    let server_config['workspace_config'] = { 'deno': { 'enable': deno_enabled ? v:true : v:false } }\n  endif\n\n  au User lsp_setup call lsp#register_server(server_config)\nendif\n```\n\n## Emacs\nEmacs supports Deno via the Deno language server using lsp-mode. Once lsp-mode is installed it should support Deno, which can be configured to support various settings.\n\n## lsp-mode\nOnce lsp-mode is installed it should support Deno, which can be configured to support various settings.\n\n## eglot\nYou can also use built-in Deno language server by using eglot. An example configuration for Deno via eglot:\n\n```elisp\n(add-to-list 'eglot-server-programs '((js-mode typescript-mode) . (eglot-deno \"deno\" \"lsp\")))\n\n  (defclass eglot-deno (eglot-lsp-server) ()\n    :documentation \"A custom class for deno lsp.\")\n\n  (cl-defmethod eglot-initialization-options ((server eglot-deno))\n    \"Passes through required deno initialization options\"\n    (list :enable t\n    :lint t))\n```\n\n## Pulsar\nThe Pulsar editor, formerly known as Atom supports integrating with the Deno language server via the atom-ide-deno package. `atom-ide-deno` requires that the Deno CLI be installed and the atom-ide-base package to be installed as well.\n\n## Sublime Text\nSublime Text supports connecting to the Deno language server via the LSP package. You may also want to install the TypeScript package to get full syntax highlighting. Once you have the LSP package installed, you will want to add configuration to your `.sublime-project` configuration like the below:\n\n```jsonc\n{\n  \"settings\": {\n    \"LSP\": {\n      \"deno\": {\n        \"command\": [\"deno\", \"lsp\"],\n        \"initializationOptions\": {\n          // \"config\": \"\", // Sets the path for the config file in your project\n          \"enable\": true,\n          // \"importMap\": \"\", // Sets the path for the import-map in your project\n          \"lint\": true,\n          \"unstable\": false\n        },\n        \"enabled\": true,\n        \"languages\": [\n          {\n            \"languageId\": \"javascript\",\n            \"scopes\": [\"source.js\"],\n            \"syntaxes\": [\n              \"Packages/Babel/JavaScript (Babel).sublime-syntax\",\n              \"Packages/JavaScript/JavaScript.sublime-syntax\"\n            ]\n          },\n          {\n            \"languageId\": \"javascriptreact\",\n            \"scopes\": [\"source.jsx\"],\n            \"syntaxes\": [\n              \"Packages/Babel/JavaScript (Babel).sublime-syntax\",\n              \"Packages/JavaScript/JavaScript.sublime-syntax\"\n            ]\n          },\n          {\n            \"languageId\": \"typescript\",\n            \"scopes\": [\"source.ts\"],\n            \"syntaxes\": [\n              \"Packages/TypeScript-TmLanguage/TypeScript.tmLanguage\",\n              \"Packages/TypeScript Syntax/TypeScript.tmLanguage\"\n            ]\n          },\n          {\n            \"languageId\": \"typescriptreact\",\n            \"scopes\": [\"source.tsx\"],\n            \"syntaxes\": [\n              \"Packages/TypeScript-TmLanguage/TypeScriptReact.tmLanguage\",\n              \"Packages/TypeScript Syntax/TypeScriptReact.tmLanguage\"\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n## Nova\nThe Nova editor can integrate the Deno language server via the Deno extension.\n\n## GitHub Codespaces\nGitHub Codespaces allows you to develop fully online or remotely on your local machine without needing to configure or install Deno. It is currently in early access. If a project is a Deno enabled project and contains the `.devcontainer` configuration as part of the repository, opening the project in GitHub Codespaces should just \"work\".\n\n## Kakoune\nKakoune supports connecting to the Deno language server via the kak-lsp client. Once kak-lsp is installed an example of configuring it up to connect to the Deno language server is by adding the following to your `kak-lsp.toml`:\n\n```toml\n[language.typescript]\nfiletypes = [\"typescript\", \"javascript\"]\nroots = [\".git\"]\ncommand = \"deno\"\nargs = [\"lsp\"]\n[language.typescript.settings.deno]\nenable = true\nlint = true\n```\n\n## Helix\nHelix comes with built-in language server support. Enabling connection to the Deno language server requires changes in the languages.toml configuration file.\n\n```toml\n[[language]]\nname = \"typescript\"\nroots = [\"deno.json\", \"deno.jsonc\", \"package.json\"]\nauto-format = true\nlanguage-servers = [\"deno-lsp\"]\n\n[[language]]\nname = \"javascript\"\nroots = [\"deno.json\", \"deno.jsonc\", \"package.json\"]\nauto-format = true\nlanguage-servers = [\"deno-lsp\"]\n\n[language-server.deno-lsp]\ncommand = \"deno\"\nargs = [\"lsp\"]\nconfig.deno.enable = true\n```\n\n## Shell completions\nBuilt into the Deno CLI is support to generate shell completion information for the CLI itself. By using `deno completions <shell>`, the Deno CLI will output to stdout the completions. Current shells that are supported:\n- bash\n- elvish\n- fish\n- powershell\n- zsh\n\n## bash example\nOutput the completions and add them to the environment:\n\n```shell\n> deno completions bash > /usr/local/etc/bash_completion.d/deno.bash\n> source /usr/local/etc/bash_completion.d/deno.bash\n```\n\n## PowerShell example\nOutput the completions:\n\n```shell\n> deno completions powershell >> $profile\n> .$profile\n```\n\n## zsh example\nYou should have a directory where the completions can be saved:\n\n```shell\n> mkdir ~/.zsh\n```\n\nThen output the completions:\n\n```shell\n> deno completions zsh > ~/.zsh/_deno\n```\n\nAnd ensure the completions get loaded in your `~/.zshrc`:\n\n```shell\nfpath=(~/.zsh $fpath)\nautoload -Uz compinit\ncompinit -u\n```\n\n## zsh example with ohmyzsh and antigen\nCreate the directory to store the completions and output the completions:\n\n```shell\n> mkdir ~/.oh-my-zsh/custom/plugins/deno\n> deno completions zsh > ~/.oh-my-zsh/custom/plugins/deno/_deno\n```\n\nThen your `.zshrc` might look something like this:\n\n```shell\nsource /path-to-antigen/antigen.zsh\n\n# Load the oh-my-zsh's library.\nantigen use oh-my-zsh\n\nantigen bundle deno\n```\n\n## fish example\nOutput the completions to a `deno.fish` file into the completions directory in the fish config folder:\n\n```shell\n> deno completions fish > ~/.config/fish/completions/deno.fish\n```\n\n## Other tools\nIf you are writing or supporting a community integration using the Deno language server, read more about integrating with the Deno LSP, but also feel free to join our Discord community in the `#dev-lsp` channel.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/setup_your_environment", "title": "Set up your environment", "description": "Deno comes with many of the tools that are commonly needed for developing applications, including a full language server (LSP) to help power your IDE of choice. This page will help you set up your environment to get the most out of Deno while you are developing.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-02-28 00:41:42", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "title": "Set up your environment", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Set up your environment", "twitter:image": "/img/og.webp", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "ogTitle": "Set up your environment", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:title": "Set up your environment", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "scrapeId": "a7abf6f5-bab7-46a2-ae8d-23667de8362a", "sourceURL": "https://docs.deno.com/runtime/getting_started/setup_your_environment", "url": "https://docs.deno.com/runtime/getting_started/setup_your_environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Set up your environment\"?\n\nAssistant: Here are some code examples:\n\n### Visual Studio Code Configuration\n```yaml\n{\n  \"deno.enable\": true\n}\n```\n\n### Neovim Configuration Example\n```yaml\nlocal nvim_lsp = require('lspconfig')\nnvim_lsp.denols.setup {\n  on_attach = on_attach,\n  root_dir = nvim_lsp.util.root_pattern(\"deno.json\", \"deno.jsonc\"),\n}\n\nnvim_lsp.ts_ls.setup {\n  on_attach = on_attach,\n  root_dir = nvim_lsp.util.root_pattern(\"package.json\"),\n  single_file_support = false\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/setup_your_environment", "title": "Set up your environment", "description": "Deno comes with many of the tools that are commonly needed for developing applications, including a full language server (LSP) to help power your IDE of choice. This page will help you set up your environment to get the most out of Deno while you are developing.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-02-28 00:41:42", "type": "code_examples", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "title": "Set up your environment", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Set up your environment", "twitter:image": "/img/og.webp", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "ogTitle": "Set up your environment", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:title": "Set up your environment", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "scrapeId": "a7abf6f5-bab7-46a2-ae8d-23667de8362a", "sourceURL": "https://docs.deno.com/runtime/getting_started/setup_your_environment", "url": "https://docs.deno.com/runtime/getting_started/setup_your_environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Set up your environment\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to check the official documentation for each editor/IDE for the latest setup instructions.\n• For Neovim, ensure unique root directories for LSP clients to avoid conflicts.\n• When using shell completions, ensure the completion files are sourced correctly in your shell configuration.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/setup_your_environment", "title": "Set up your environment", "description": "Deno comes with many of the tools that are commonly needed for developing applications, including a full language server (LSP) to help power your IDE of choice. This page will help you set up your environment to get the most out of Deno while you are developing.", "has_code_examples": true, "has_best_practices": true, "section_count": 26, "timestamp": "2025-02-28 00:41:42", "type": "best_practices", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "title": "Set up your environment", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Set up your environment", "twitter:image": "/img/og.webp", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "ogTitle": "Set up your environment", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:title": "Set up your environment", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "scrapeId": "a7abf6f5-bab7-46a2-ae8d-23667de8362a", "sourceURL": "https://docs.deno.com/runtime/getting_started/setup_your_environment", "url": "https://docs.deno.com/runtime/getting_started/setup_your_environment/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Web Events API\"?\n\nAssistant: Documentation for the Deno Web Events API, covering functions and interfaces related to event handling.\n\nHere's a detailed explanation:\n\n\n## Functions\n### Functions\n\n- **[addEventListener](https://docs.deno.com/api/web/~/addEventListener \"addEventListener\")**\n  Registers an event listener in the global scope, which will be called synchronously whenever the event `type` is dispatched.\n\n- **[dispatchEvent](https://docs.deno.com/api/web/~/dispatchEvent \"dispatchEvent\")**\n  Dispatches an event in the global scope, synchronously invoking any registered event listeners for this event in the appropriate order. Returns false if event is cancelable and at least one of the event handlers which handled this event called Event.preventDefault(). Otherwise it returns true.\n\n- **[removeEventListener](https://docs.deno.com/api/web/~/removeEventListener \"removeEventListener\")**\n  Remove a previously registered event listener from the global scope.\n\n## Interfaces\n### Interfaces\n\n- **[AddEventListenerOptions](https://docs.deno.com/api/web/~/AddEventListenerOptions \"AddEventListenerOptions\")**\n  No documentation available\n  - [once](https://docs.deno.com/api/web/~/AddEventListenerOptions#property_once)\n  - [passive](https://docs.deno.com/api/web/~/AddEventListenerOptions#property_passive)\n  - [signal](https://docs.deno.com/api/web/~/AddEventListenerOptions#property_signal)\n\n- **[CustomEvent](https://docs.deno.com/api/web/~/CustomEvent \"CustomEvent\")**\n  No documentation available\n  - [detail](https://docs.deno.com/api/web/~/CustomEvent#property_detail)\n  - [prototype](https://docs.deno.com/api/web/~/CustomEvent#property_prototype)\n\n- **[CustomEventInit](https://docs.deno.com/api/web/~/CustomEventInit \"CustomEventInit\")**\n  No documentation available\n  - [detail](https://docs.deno.com/api/web/~/CustomEventInit#property_detail)\n\n- **[ErrorEvent](https://docs.deno.com/api/web/~/ErrorEvent \"ErrorEvent\")**\n  No documentation available\n  - [colno](https://docs.deno.com/api/web/~/ErrorEvent#property_colno)\n  - [error](https://docs.deno.com/api/web/~/ErrorEvent#property_error)\n  - [filename](https://docs.deno.com/api/web/~/ErrorEvent#property_filename)\n  - [lineno](https://docs.deno.com/api/web/~/ErrorEvent#property_lineno)\n  - [message](https://docs.deno.com/api/web/~/ErrorEvent#property_message)\n  - [prototype](https://docs.deno.com/api/web/~/ErrorEvent#property_prototype)\n\n- **[ErrorEventInit](https://docs.deno.com/api/web/~/ErrorEventInit \"ErrorEventInit\")**\n  No documentation available\n  - [colno](https://docs.deno.com/api/web/~/ErrorEventInit#property_colno)\n  - [error](https://docs.deno.com/api/web/~/ErrorEventInit#property_error)\n  - [filename](https://docs.deno.com/api/web/~/ErrorEventInit#property_filename)\n  - [lineno](https://docs.deno.com/api/web/~/ErrorEventInit#property_lineno)\n  - [message](https://docs.deno.com/api/web/~/ErrorEventInit#property_message)\n\n- **[Event](https://docs.deno.com/api/web/~/Event \"Event\")**\n  An event which takes place in the DOM.\n  - [AT_TARGET](https://docs.deno.com/api/web/~/Event#property_at_target)\n  - [BUBBLING_PHASE](https://docs.deno.com/api/web/~/Event#property_bubbling_phase)\n  - [CAPTURING_PHASE](https://docs.deno.com/api/web/~/Event#property_capturing_phase)\n  - [NONE](https://docs.deno.com/api/web/~/Event#property_none)\n  - [bubbles](https://docs.deno.com/api/web/~/Event#property_bubbles)\n  - [cancelBubble](https://docs.deno.com/api/web/~/Event#property_cancelbubble)\n  - [cancelable](https://docs.deno.com/api/web/~/Event#property_cancelable)\n  - [composed](https://docs.deno.com/api/web/~/Event#property_composed)\n  - [composedPath](https://docs.deno.com/api/web/~/Event#method_composedpath_0)\n  - [currentTarget](https://docs.deno.com/api/web/~/Event#property_currenttarget)\n  - [defaultPrevented](https://docs.deno.com/api/web/~/Event#property_defaultprevented)\n  - [eventPhase](https://docs.deno.com/api/web/~/Event#property_eventphase)\n  - [initEvent](https://docs.deno.com/api/web/~/Event#method_initevent_0)\n  - [isTrusted](https://docs.deno.com/api/web/~/Event#property_istrusted)\n  - [preventDefault](https://docs.deno.com/api/web/~/Event#method_preventdefault_0)\n  - [prototype](https://docs.deno.com/api/web/~/Event#property_prototype)\n  - [returnValue](https://docs.deno.com/api/web/~/Event#property_returnvalue)\n  - [srcElement](https://docs.deno.com/api/web/~/Event#property_srcelement)\n  - [stopImmediatePropagation](https://docs.deno.com/api/web/~/Event#method_stopimmediatepropagation_0)\n  - [stopPropagation](https://docs.deno.com/api/web/~/Event#method_stoppropagation_0)\n  - [target](https://docs.deno.com/api/web/~/Event#property_target)\n  - [timeStamp](https://docs.deno.com/api/web/~/Event#property_timestamp)\n  - [type](https://docs.deno.com/api/web/~/Event#property_type)\n\n- **[EventInit](https://docs.deno.com/api/web/~/EventInit \"EventInit\")**\n  No documentation available\n  - [bubbles](https://docs.deno.com/api/web/~/EventInit#property_bubbles)\n  - [cancelable](https://docs.deno.com/api/web/~/EventInit#property_cancelable)\n  - [composed](https://docs.deno.com/api/web/~/EventInit#property_composed)\n\n- **[EventListener](https://docs.deno.com/api/web/~/EventListener \"EventListener\")**\n  No documentation available\n\n- **[EventListenerObject](https://docs.deno.com/api/web/~/EventListenerObject \"EventListenerObject\")**\n  No documentation available\n  - [handleEvent](https://docs.deno.com/api/web/~/EventListenerObject#method_handleevent_0)\n\n- **[EventListenerOptions](https://docs.deno.com/api/web/~/EventListenerOptions \"EventListenerOptions\")**\n  No documentation available\n  - [capture](https://docs.deno.com/api/web/~/EventListenerOptions#property_capture)\n\n- **[EventTarget](https://docs.deno.com/api/web/~/EventTarget \"EventTarget\")**\n  EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.\n  - [addEventListener](https://docs.deno.com/api/web/~/EventTarget#method_addeventlistener_0)\n  - [dispatchEvent](https://docs.deno.com/api/web/~/EventTarget#method_dispatchevent_0)\n  - [prototype](https://docs.deno.com/api/web/~/EventTarget#property_prototype)\n  - [removeEventListener](https://docs.deno.com/api/web/~/EventTarget#method_removeeventlistener_0)\n\n- **[MessageEvent](https://docs.deno.com/api/web/~/MessageEvent \"MessageEvent\")**\n  No documentation available\n  - [data](https://docs.deno.com/api/web/~/MessageEvent#property_data)\n  - [initMessageEvent](https://docs.deno.com/api/web/~/MessageEvent#method_initmessageevent_0)\n  - [lastEventId](https://docs.deno.com/api/web/~/MessageEvent#property_lasteventid)\n  - [origin](https://docs.deno.com/api/web/~/MessageEvent#property_origin)\n  - [ports](https://docs.deno.com/api/web/~/MessageEvent#property_ports)\n  - [prototype](https://docs.deno.com/api/web/~/MessageEvent#property_prototype)\n  - [source](https://docs.deno.com/api/web/~/MessageEvent#property_source)\n\n- **[MessageEventInit](https://docs.deno.com/api/web/~/MessageEventInit \"MessageEventInit\")**\n  No documentation available\n  - [data](https://docs.deno.com/api/web/~/MessageEventInit#property_data)\n  - [lastEventId](https://docs.deno.com/api/web/~/MessageEventInit#property_lasteventid)\n  - [origin](https://docs.deno.com/api/web/~/MessageEventInit#property_origin)\n  - [ports](https://docs.deno.com/api/web/~/MessageEventInit#property_ports)\n  - [source](https://docs.deno.com/api/web/~/MessageEventInit#property_source)\n\n- **[ProgressEvent](https://docs.deno.com/api/web/~/ProgressEvent \"ProgressEvent\")**\n  Events measuring progress of an underlying process, like an HTTP request.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/events", "title": "Deno Web Events API", "description": "Documentation for the Deno Web Events API, covering functions and interfaces related to event handling.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:42:09", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "title": "Events - Web documentation", "og:title": "Events - Web documentation", "twitter:image": "/img/og.webp", "ogTitle": "Events - Web documentation", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:title": "Events - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "5308c9de-bd3a-4f7e-8801-9568f1b1eb79", "sourceURL": "https://docs.deno.com/api/web/events", "url": "https://docs.deno.com/api/web/events", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Jupyter API\"?\n\nAssistant: Documentation for Deno's Jupyter API, including functions, interfaces, namespaces, and variables.\n\nHere's a detailed explanation:\n\n\n## Functions\nDeno.jupyter.broadcast: Broadcast a message on IO pub channel.\n\nDeno.jupyter.display: Display function for Jupyter Deno Kernel. Mimics the behavior of IPython's `display(obj, raw=True)` function to allow asynchronous displaying of objects in Jupyter.\n\nDeno.jupyter.format: Format an object for displaying in Deno.\n\nDeno.jupyter.html: Show HTML in Jupyter frontends with a tagged template function.\n\nDeno.jupyter.image: Display a JPG or PNG image.\n\nDeno.jupyter.md: Show Markdown in Jupyter frontends with a tagged template function.\n\nDeno.jupyter.svg: SVG Tagged Template Function.\n\n## Interfaces\nDeno.jupyter.Displayable: No documentation available.\n\n- $display: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.Displayable#property_$display)\n\nDeno.jupyter.DisplayOptions: No documentation available.\n\n- display_id: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.DisplayOptions#property_display_id)\n- raw: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.DisplayOptions#property_raw)\n- update: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.DisplayOptions#property_update)\n\nDeno.jupyter.MediaBundle: A collection of supported media types and data for Jupyter frontends.\n\n- application/geo+json: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_application&#x2F;geo+json)\n- application/javascript: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_application&#x2F;javascript)\n- application/json: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_application&#x2F;json)\n- application/pdf: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_application&#x2F;pdf)\n- application/vdom.v1+json: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_application&#x2F;vdom_v1+json)\n- application/vnd.plotly.v1+json: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_application&#x2F;vnd_plotly_v1+json)\n- application/vnd.vega.v5+json: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_application&#x2F;vnd_vega_v5+json)\n- application/vnd.vegalite.v4+json: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_application&#x2F;vnd_vegalite_v4+json)\n- application/vnd.vegalite.v5+json: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_application&#x2F;vnd_vegalite_v5+json)\n- image/gif: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_image&#x2F;gif)\n- image/jpeg: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_image&#x2F;jpeg)\n- image/png: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_image&#x2F;png)\n- image/svg+xml: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_image&#x2F;svg+xml)\n- text/html: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_text&#x2F;html)\n- text/markdown: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_text&#x2F;markdown)\n- text/plain: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.MediaBundle#property_text&#x2F;plain)\n\nDeno.jupyter.VegaObject: No documentation available.\n\n- $schema: [Link](https://docs.deno.com/api/deno/~/Deno.jupyter.VegaObject#property_$schema)\n\n## Namespaces\nDeno.jupyter: A namespace containing runtime APIs available in Jupyter notebooks.\n\n## Variables\nDeno.jupyter.$display: No documentation available.\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/jupyter", "title": "Deno Jupyter API", "description": "Documentation for Deno's Jupyter API, including functions, interfaces, namespaces, and variables.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 00:45:28", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "twitter:image": "/img/og.webp", "twitter:title": "Jupyter - Deno documentation", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "language": "en", "ogTitle": "Jupyter - Deno documentation", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:title": "Jupyter - Deno documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "title": "Jupyter - Deno documentation", "scrapeId": "5f7c04af-ba62-4eba-8fdb-5d5c358552cc", "sourceURL": "https://docs.deno.com/api/deno/jupyter", "url": "https://docs.deno.com/api/deno/jupyter", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Node and npm support\"?\n\nAssistant: This page covers how Deno supports Node.js built-in modules, npm packages, CommonJS modules, and other related topics.\n\nHere's a detailed explanation:\n\n\n## Using Node's built-in modules\nDeno provides a compatibility layer that allows the use of Node.js built-in APIs within Deno programs. However, in order to use them, you will need to add the `node:` specifier to any import statements that use them:\n\n```highlight notranslate js\nimport * as os from \"node:os\";\nconsole.log(os.cpus());\n```\n\nAnd run it with `deno run main.mjs` - you will notice you get the same output as running the program in Node.js.\n\nUpdating any imports in your application to use `node:` specifiers should enable any code using Node built-ins to function as it did in Node.js.\n\nTo make updating existing code easier, Deno will provide helpful hints for imports that don't use `node:` prefix:\n\nmain.mjs\n\n```highlight notranslate js\nimport * as os from \"os\";\nconsole.log(os.cpus());\n```\n\n```highlight notranslate sh\n$ deno run main.mjs\nerror: Relative import path \"os\" not prefixed with / or ./ or ../\n  hint: If you want to use a built-in Node module, add a \"node:\" prefix (ex. \"node:os\").\n    at file:///main.mjs:1:21\n```\n\nThe same hints and additional quick-fixes are provided by the Deno LSP in your editor.\n\n[Explore built-in Node APIs](https://docs.deno.com/api/node/)\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/node", "title": "Node and npm support", "description": "This page covers how Deno supports Node.js built-in modules, npm packages, CommonJS modules, and other related topics.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:47:49", "type": "overview", "page_metadata": {"ogLocale": "en_US", "og:title": "Node and npm support", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Node and npm support", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Node and npm support", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "og:locale": "en_US", "ogTitle": "Node and npm support", "twitter:site": "@deno_land", "scrapeId": "5cf24c97-a233-4d2d-ab79-987f705dd78f", "sourceURL": "https://docs.deno.com/runtime/fundamentals/node", "url": "https://docs.deno.com/runtime/fundamentals/node/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Node and npm support\"?\n\nAssistant: Here are some code examples:\n\n### Importing Hono from npm\n```yaml\nimport { Hono } from \"npm:hono\";\n```\n\n### Using Node's built-in modules\n```yaml\nimport * as os from \"node:os\";\nconsole.log(os.cpus());\n```\n\n### Running a script with Deno\n```yaml\n$ deno run main.mjs\n```\n\n### Importing emoji from npm\n```yaml\nimport * as emoji from \"npm:node-emoji\";\n\nconsole.log(emoji.emojify(`:sauropod: :heart:  npm`));\n```\n\n### Running a script with npm package\n```yaml\n$ deno run main.js\n🦕 ❤️ npm\n```\n\n### Importing CommonJS package\n```yaml\nimport react from \"npm:react\";\nconsole.log(react);\n```\n\n### Using .cjs extension\n```yaml\nconst express = require(\"express\");\n```\n\n### Creating require() manually\n```yaml\nimport { createRequire } from \"node:module\";\nconst require = createRequire(import.meta.url);\nconst express = require(\"express\");\n```\n\n### Importing CommonJS modules\n```yaml\nimport greet from \"./greet.js\";\nconsole.log(greet);\n```\n\n### Using npm package with types\n```yaml\nimport chalk from \"npm:chalk@5\";\n```\n\n### Including Node types\n```yaml\n/// <reference types=\"npm:@types/node\" />\n```\n\n### Running npm scripts\n```yaml\ndeno task start\n```\n\n### Creating node_modules directory automatically\n```yaml\ndeno run --node-modules-dir=auto main.ts\n```\n\n### Creating node_modules directory manually\n```yaml\ndeno install\n\ndeno run --node-modules-dir=manual main.ts\n```\n\n### Using Node.js global objects\n```yaml\nconsole.log(process.versions.deno);\n```\n\n### Using Buffer API\n```yaml\nimport { Buffer } from \"node:buffer\";\n\nconst buf = new Buffer(5, \"0\");\n```\n\n### Running a test\n```yaml\nDeno.test(\"my test\", () => {\n  // Your test code here\n});\n\ndeno test\n```\n\n### Using private registries\n```yaml\n@mycompany:registry=http://mycompany.com:8111/\n//mycompany.com:8111/:_auth=secretToken\n```\n\n### Node to Deno Cheatsheet\n```yaml\n| Node.js | Deno |\n| --- | --- |\n| `node file.js` | `deno file.js` |\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/node", "title": "Node and npm support", "description": "This page covers how Deno supports Node.js built-in modules, npm packages, CommonJS modules, and other related topics.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:47:49", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "og:title": "Node and npm support", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Node and npm support", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Node and npm support", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "og:locale": "en_US", "ogTitle": "Node and npm support", "twitter:site": "@deno_land", "scrapeId": "5cf24c97-a233-4d2d-ab79-987f705dd78f", "sourceURL": "https://docs.deno.com/runtime/fundamentals/node", "url": "https://docs.deno.com/runtime/fundamentals/node/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Node and npm support\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno is Node-compatible. Most Node projects will run in Deno with little or no change!\n• Deno supports npm packages. Just use the `npm:` specifier in the import, and Deno takes care of the rest.\n• Updating any imports in your application to use `node:` specifiers should enable any code using Node built-ins to function as it did in Node.js.\n• Deno will provide helpful hints for imports that don't use `node:` prefix.\n• Deno encourages the use of ES modules in your code but offers CommonJS support with certain restrictions.\n• Deno's permission system is still in effect when using CommonJS modules. It may be necessary to provide at least `--allow-read` permission.\n• If the file extension is `.cjs`, Deno will treat this module as CommonJS.\n• Deno will attempt to load `.js`, `.jsx`, `.ts`, and `.tsx` files as CommonJS if there's a `package.json` file with `\"type\": \"commonjs\"` option next to the file.\n• Deno supports private registries, which allow you to host and share your own modules.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/node", "title": "Node and npm support", "description": "This page covers how Deno supports Node.js built-in modules, npm packages, CommonJS modules, and other related topics.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:47:49", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "og:title": "Node and npm support", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Node and npm support", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:title": "Node and npm support", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "og:locale": "en_US", "ogTitle": "Node and npm support", "twitter:site": "@deno_land", "scrapeId": "5cf24c97-a233-4d2d-ab79-987f705dd78f", "sourceURL": "https://docs.deno.com/runtime/fundamentals/node", "url": "https://docs.deno.com/runtime/fundamentals/node/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Configuration\"?\n\nAssistant: This page covers how to configure Deno using deno.json and package.json files, including support for dependencies, tasks, linting, formatting, and more.\n\nHere's a detailed explanation:\n\n\n## deno.json and package.json\nYou can configure Deno using a `deno.json` file. This file can be used to configure the TypeScript compiler, linter, formatter, and other Deno tools.\n\nThe configuration file supports `.json` and [`.jsonc`](https://code.visualstudio.com/docs/languages/json#_json-with-comments) extensions.\n\nDeno will automatically detect a `deno.json` or `deno.jsonc` configuration file if it's in your current working directory or parent directories. The `--config` flag can be used to specify a different configuration file.\n\n## package.json support\nDeno also supports a `package.json` file for compatibility with Node.js projects. If you have a Node.js project, it is not necessary to create a `deno.json` file. Deno will use the `package.json` file to configure the project.\n\nIf both a `deno.json` and `package.json` file are present in the same directory, Deno will understand dependencies specified in both `deno.json` and `package.json`; and use the `deno.json` file for Deno-specific configurations. Read more about [Node compatibility in Deno](https://docs.deno.com/runtime/fundamentals/node/#node-compatibility).\n\n## Dependencies\nThe `\"imports\"` field in your `deno.json` allows you to specify dependencies used in your project. You can use it to map bare specifiers to URLs or file paths making it easier to manage dependencies and module resolution in your applications.\n\nFor example, if you want to use the `assert` module from the standard library in your project, you could use this import map:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"@std/assert\": \"jsr:@std/assert@^1.0.0\",\n    \"chalk\": \"npm:chalk@5\"\n  }\n}\n```\n\nThen your script can use the bare specifier `std/assert`:\n\nscript.ts\n\n```highlight notranslate js\nimport { assertEquals } from \"@std/assert\";\nimport chalk from \"chalk\";\n\nassertEquals(1, 2);\nconsole.log(chalk.yellow(\"Hello world\"));\n```\n\nYou can also use a `\"dependencies\"` field in `package.json`:\n\npackage.json\n\n```highlight notranslate json\n{\n  \"dependencies\": {\n    \"express\": \"express@^1.0.0\"\n  }\n}\n```\n\nscript.ts\n\n```highlight notranslate js\nimport express from \"express\";\n\nconst app = express();\n```\n\nNote that this will require you to run `deno install`. Read more about [module imports and dependencies](https://docs.deno.com/runtime/fundamentals/modules/).\n\n## Custom path mappings\nThe import map in `deno.json` can be used for more general path mapping of specifiers. You can map an exact specifiers to a third party module or a file directly, or you can map a part of an import specifier to a directory.\n\ndeno.jsonc\n\n```highlight notranslate jsonc\n{\n  \"imports\": {\n    // Map to an exact file\n    \"foo\": \"./some/long/path/foo.ts\",\n    // Map to a directory, usage: \"bar/file.ts\"\n    \"bar/\": \"./some/folder/bar/\"\n  }\n}\n```\n\nUsage:\n\n```highlight notranslate ts\nimport * as foo from \"foo\";\nimport * as bar from \"bar/file.ts\";\n```\n\nPath mapping of import specifies is commonly used in larger code bases for brevity.\n\nTo use your project root for absolute imports:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"/\": \"./\",\n    \"./\": \"./\"\n  }\n}\n```\n\nmain.ts\n\n```highlight notranslate ts\nimport { MyUtil } from \"/util.ts\";\n```\n\nThis causes import specifiers starting with `/` to be resolved relative to the import map's URL or file path.\n\n## Tasks\nThe `tasks` field in your `deno.json` file is used to define custom commands that can be executed with the `deno task` command and allows you to tailor commands and permissions to the specific needs of your project.\n\nIt is similar to the `scripts` field in a `package.json` file, which is also supported.\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"tasks\": {\n    \"start\": \"deno run --allow-net --watch=static/,routes/,data/ dev.ts\",\n    \"test\": \"deno test --allow-net\",\n    \"lint\": \"deno lint\"\n  }\n}\n```\n\npackage.json\n\n```highlight notranslate json\n{\n  \"scripts\": {\n    \"dev\": \"vite dev\",\n    \"build\": \"vite build\"\n  }\n}\n```\n\nTo execute a task, use the `deno task` command followed by the task name. For example:\n\n```highlight notranslate sh\ndeno task start\ndeno task test\ndeno task lint\ndeno task dev\ndeno task build\n``` \n\nRead more about [`deno task`](https://docs.deno.com/runtime/reference/cli/task_runner/).\n\n## Linting\nThe `lint` field in the `deno.json` file is used to configure the behavior of Deno’s built-in linter. This allows you to specify which files to include or exclude from linting, as well as customize the linting rules to suit your project’s needs.\n\nFor example:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"lint\": {\n    \"include\": [\"src/\"],\n    \"exclude\": [\"src/testdata/\", \"src/fixtures/**/*.ts\"],\n    \"rules\": {\n      \"tags\": [\"recommended\"],\n      \"include\": [\"ban-untagged-todo\"],\n      \"exclude\": [\"no-unused-vars\"]\n    }\n  }\n}\n```\n\nThis configuration will:\n\n- only lint files in the `src/` directory,\n- will not lint files in the `src/testdata/` directory or any TypeScript files in the `src/fixtures/` directory.\n- specifies that the recommended linting rules should be applied,\n- adds the `ban-untagged-todo`\n- removes the `no-unused-vars` rule excluded.\n\nYou can find a full list of available linting rules in the [List of rules](https://docs.deno.com/lint/) documentation page.\n\nRead more about [linting with Deno](https://docs.deno.com/runtime/reference/cli/linter/).\n\n## Formatting\nThe `fmt` field in the `deno.json` file is used to configure the behavior of Deno’s built-in code formatter. This allows you to customize how your code is formatted, ensuring consistency across your project, making it easier to read and collaborate on. Here are the key options you can configure:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"fmt\": {\n    \"useTabs\": true,\n    \"lineWidth\": 80,\n    \"indentWidth\": 4,\n    \"semiColons\": true,\n    \"singleQuote\": true,\n    \"proseWrap\": \"preserve\",\n    \"include\": [\"src/\"],\n    \"exclude\": [\"src/testdata/\", \"src/fixtures/**/*.ts\"]\n  }\n}\n```\n\nThis configuration will:\n\n- use tabs instead of spaces for indentation,\n- limit lines to 80 characters,\n- use an indentation width of 4 spaces,\n- add semicolons to the end of statements,\n- use single quotes for strings,\n- preserve prose wrapping,\n- format files in the `src/` directory,\n- exclude files in the `src/testdata/` directory and any TypeScript files in the `src/fixtures/` directory.\n\nRead more about [formatting your code with Deno](https://docs.deno.com/runtime/fundamentals/linting_and_formatting/).\n\n## Lockfile\nThe `lock` field in the `deno.json` file is used to specify configuration of the lock file that Deno uses to [ensure the integrity of your dependencies](https://docs.deno.com/runtime/fundamentals/modules/#integrity-checking-and-lock-files). A lock file records the exact versions and integrity hashes of the modules your project depends on, ensuring that the same versions are used every time the project is run, even if the dependencies are updated or changed remotely.\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"lock\": {\n    \"path\": \"./deno.lock\",\n    \"frozen\": true\n  }\n}\n```\n\nThis configuration will:\n\n- specify lockfile location at `./deno.lock` (this is the default and can be omitted)\n- tell Deno that you want to error out if any dependency changes\n\nDeno uses lockfile by default, you can disable it with following configuration:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"lock\": false\n}\n```\n\n## Node modules directory\nBy default Deno uses a local `node_modules` directory if you have a `package.json` file in your project directory.\n\nYou can control this behavior using the `nodeModulesDir` field in the `deno.json` file.\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"nodeModulesDir\": \"auto\"\n}\n```\n\nYou can set this field to following values:\n\n| Value | Behavior |\n| --- | --- |\n| `\"none\"` | Don't use a local `node_modules` directory. Instead use global cache in `$DENO_DIR` that is automatically kept up to date by Deno. |\n| `\"auto\"` | Use a local `node_modules` directory. The directory is automatically created and kept up to date by Deno. |\n| `\"manual\"` | Use a local `node_modules` directory. User must keep this directory up to date manually, eg. using `deno install` or `npm install`. |\n\nIt is not required to specify this setting, the following defaults are applied:\n\n- `\"none\"` if there is no `package.json` file in your project directory\n- `\"manual\"` if there is a `package.json` file in your project directory\n\nWhen using workspaces, this setting can only be used in the workspace root. Specifying it in any of the members will result in warnings. The `\"manual\"` setting will only be applied automatically if there's a `package.json` file in the workspace root.\n\n## TypeScript compiler options\nThe `compilerOptions` field in the `deno.json` file is used to configure [TypeScript compiler settings](https://www.typescriptlang.org/tsconfig) for your Deno project. This allows you to customize how TypeScript code is compiled, ensuring it aligns with your project’s requirements and coding standards.\n\nInfo\n\nDeno recommends the default TypeScript configuration. This will help when sharing code.\n\nSee also [Configuring TypeScript in Deno](https://docs.deno.com/runtime/reference/ts_config_migration/).\n\n## Unstable features\nThe `unstable` field in a `deno.json` file is used to enable specific unstable features for your Deno project.\n\nThese features are still in development and not yet part of the stable API. By listing features in the `unstable` array, you can experiment with and use these new capabilities before they are officially released.\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"unstable\": [\"cron\", \"kv\", \"webgpu\"]\n}\n```\n\n[Learn more](https://docs.deno.com/runtime/reference/cli/unstable_flags/).\n\n## include and exclude\nMany configurations (ex. `lint`, `fmt`) have an `include` and `exclude` property for specifying the files to include.\n\n### include\n\nOnly the paths or patterns specified here will be included.\n\n```highlight notranslate jsonc\n{\n  \"lint\": {\n    // only format the src/ directory\n    \"include\": [\"src/\"]\n  }\n}\n```\n\n### exclude\n\nThe paths or patterns specified here will be excluded.\n\n```highlight notranslate jsonc\n{\n  \"lint\": {\n    // don't lint the dist/ folder\n    \"exclude\": [\"dist/\"]\n  }\n}\n```\n\nThis has HIGHER precedence than `include` and will win over `include` if a path is matched in both `include` and `exclude`.\n\nYou may wish to exclude a directory, but include a sub directory. In Deno 1.41.2+, you may un-exclude a more specific path by specifying a negated glob below the more general exclude:\n\n```highlight notranslate jsonc\n{\n  \"fmt\": {\n    // don't format the \"fixtures\" directory,\n    // but do format \"fixtures/scripts\"\n    \"exclude\": [\n      \"fixtures\",\n      \"!fixtures/scripts\"\n    ]\n  }\n}\n```\n\n### Top level exclude\n\nIf there's a directory you never want Deno to fmt, lint, type check, analyze in the LSP, etc., then specify it in the top level exclude array:\n\n```highlight notranslate jsonc\n{\n  \"exclude\": [\n    // exclude the dist folder from all sub-commands and the LSP\n    \"dist/\"\n  ]\n}\n```\n\nSometimes you may find that you want to un-exclude a path or pattern that's excluded in the top level-exclude. In Deno 1.41.2+, you may un-exclude a path by specifying a negated glob in a more specific config:\n\n```highlight notranslate jsonc\n{\n  \"fmt\": {\n    \"exclude\": [\n      // format the dist folder even though it's\n      // excluded at the top level\n      \"!dist\"\n    ]\n  },\n  \"exclude\": [\n    \"dist/\"\n  ]\n}\n```\n\n## Publish - Override .gitignore\nThe `.gitignore` is taken into account for the `deno publish` command. In Deno 1.41.2+, you can opt-out of excluded files ignored in the _.gitignore_ by using a negated exclude glob:\n\n.gitignore\n\n```highlight notranslate title=\".gitignore\"\ndist/\n.env\n```\n\ndeno.json\n\n```highlight notranslate jsonc\n{\n  \"publish\": {\n    \"exclude\": [\n      // include the .gitignored dist folder\n      \"!dist/\"\n    ]\n  }\n}\n```\n\nAlternatively, explicitly specifying the gitignored paths in an `\"include\"` works as well:\n\n```highlight notranslate json\n{\n  \"publish\": {\n    \"include\": [\n      \"dist/\",\n      \"README.md\",\n      \"deno.json\"\n    ]\n  }\n}\n```\n\n## Full example\n```highlight notranslate json\n{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"lib\": [\"deno.window\"],\n    \"strict\": true\n  },\n  \"lint\": {\n    \"include\": [\"src/\"],\n    \"exclude\": [\"src/testdata/\", \"src/fixtures/**/*.ts\"],\n    \"rules\": {\n      \"tags\": [\"recommended\"],\n      \"include\": [\"ban-untagged-todo\"],\n      \"exclude\": [\"no-unused-vars\"]\n    }\n  },\n  \"fmt\": {\n    \"useTabs\": true,\n    \"lineWidth\": 80,\n    \"indentWidth\": 4,\n    \"semiColons\": false,\n    \"singleQuote\": true,\n    \"proseWrap\": \"preserve\",\n    \"include\": [\"src/\"],\n    \"exclude\": [\"src/testdata/\", \"src/fixtures/**/*.ts\"]\n  },\n  \"lock\": false,\n  \"nodeModulesDir\": \"auto\",\n  \"unstable\": [\"webgpu\"],\n  \"test\": {\n    \"include\": [\"src/\"],\n    \"exclude\": [\"src/testdata/\", \"src/fixtures/**/*.ts\"]\n  },\n  \"tasks\": {\n    \"start\": \"deno run --allow-read main.ts\"\n  },\n  \"imports\": {\n    \"oak\": \"jsr:@oak/oak\"\n  },\n  \"exclude\": [\n    \"dist/\"\n  ]\n}\n```\n\n## JSON schema\nA JSON schema file is available for editors to provide autocompletion. The file is versioned and available at: [https://deno.land/x/deno/cli/schemas/config-file.v1.json](https://deno.land/x/deno/cli/schemas/config-file.v1.json) \n\n## Proxies\nDeno supports proxies for module downloads and the fetch API. Proxy configuration is read from [environment variables](https://docs.deno.com/runtime/reference/env_variables/#special-environment-variables): HTTP_PROXY, HTTPS_PROXY and NO_PROXY.\n\nIf you are using Windows - if environment variables are not found Deno falls back to reading proxies from the registry.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/configuration", "title": "Deno Configuration", "description": "This page covers how to configure Deno using deno.json and package.json files, including support for dependencies, tasks, linting, formatting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 00:49:44", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "title": "deno.json and package.json", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogLocale": "en_US", "og:site_name": "Deno", "twitter:title": "deno.json and package.json", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogTitle": "deno.json and package.json", "twitter:image": "/img/og.webp", "og:title": "deno.json and package.json", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "scrapeId": "92575f35-2af3-40f0-bdac-a702015b6b2c", "sourceURL": "https://docs.deno.com/runtime/fundamentals/configuration", "url": "https://docs.deno.com/runtime/fundamentals/configuration/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno Configuration\"?\n\nAssistant: Here are some code examples:\n\n### Deno Configuration Example\n```yaml\n{\n  \"imports\": {\n    \"@std/assert\": \"jsr:@std/assert@^1.0.0\",\n    \"chalk\": \"npm:chalk@5\"\n  }\n}\n```\n\n### Script Example Using Deno Imports\n```yaml\nimport { assertEquals } from \"@std/assert\";\nimport chalk from \"chalk\";\n\nassertEquals(1, 2);\nconsole.log(chalk.yellow(\"Hello world\"));\n```\n\n### Package.json Example\n```yaml\n{\n  \"dependencies\": {\n    \"express\": \"express@^1.0.0\"\n  }\n}\n```\n\n### Task Example in Deno\n```yaml\n{\n  \"tasks\": {\n    \"start\": \"deno run --allow-net --watch=static/,routes/,data/ dev.ts\",\n    \"test\": \"deno test --allow-net\",\n    \"lint\": \"deno lint\"\n  }\n}\n```\n\n### Lint Configuration Example\n```yaml\n{\n  \"lint\": {\n    \"include\": [\"src/\"],\n    \"exclude\": [\"src/testdata/\", \"src/fixtures/**/*.ts\"],\n    \"rules\": {\n      \"tags\": [\"recommended\"],\n      \"include\": [\"ban-untagged-todo\"],\n      \"exclude\": [\"no-unused-vars\"]\n    }\n  }\n}\n```\n\n### Formatting Configuration Example\n```yaml\n{\n  \"fmt\": {\n    \"useTabs\": true,\n    \"lineWidth\": 80,\n    \"indentWidth\": 4,\n    \"semiColons\": true,\n    \"singleQuote\": true,\n    \"proseWrap\": \"preserve\",\n    \"include\": [\"src/\"],\n    \"exclude\": [\"src/testdata/\", \"src/fixtures/**/*.ts\"]\n  }\n}\n```\n\n### Lockfile Configuration Example\n```yaml\n{\n  \"lock\": {\n    \"path\": \"./deno.lock\",\n    \"frozen\": true\n  }\n}\n```\n\n### Node Modules Directory Example\n```yaml\n{\n  \"nodeModulesDir\": \"auto\"\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/configuration", "title": "Deno Configuration", "description": "This page covers how to configure Deno using deno.json and package.json files, including support for dependencies, tasks, linting, formatting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 00:49:44", "type": "code_examples", "page_metadata": {"ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "title": "deno.json and package.json", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogLocale": "en_US", "og:site_name": "Deno", "twitter:title": "deno.json and package.json", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogTitle": "deno.json and package.json", "twitter:image": "/img/og.webp", "og:title": "deno.json and package.json", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "scrapeId": "92575f35-2af3-40f0-bdac-a702015b6b2c", "sourceURL": "https://docs.deno.com/runtime/fundamentals/configuration", "url": "https://docs.deno.com/runtime/fundamentals/configuration/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Configuration\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `deno.json` for Deno-specific configurations and `package.json` for Node.js compatibility.\n• Utilize the `imports` field in `deno.json` to manage dependencies effectively.\n• Define custom tasks in `deno.json` for project-specific commands.\n• Configure linting and formatting rules to maintain code quality and consistency.\n• Use the lockfile to ensure dependency integrity across different environments.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/configuration", "title": "Deno Configuration", "description": "This page covers how to configure Deno using deno.json and package.json files, including support for dependencies, tasks, linting, formatting, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 00:49:44", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "title": "deno.json and package.json", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogLocale": "en_US", "og:site_name": "Deno", "twitter:title": "deno.json and package.json", "language": "en", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "og:locale": "en_US", "ogSiteName": "Deno", "twitter:site": "@deno_land", "ogTitle": "deno.json and package.json", "twitter:image": "/img/og.webp", "og:title": "deno.json and package.json", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "scrapeId": "92575f35-2af3-40f0-bdac-a702015b6b2c", "sourceURL": "https://docs.deno.com/runtime/fundamentals/configuration", "url": "https://docs.deno.com/runtime/fundamentals/configuration/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Making a Deno project\"?\n\nAssistant: This page covers how to initialize, run, and test a Deno project using built-in tools and TypeScript.\n\nHere's a detailed explanation:\n\n\n## Initialize a new project\nTo initialize a new Deno project, run the following command in your terminal:\n\n```highlight notranslate bash\ndeno init my_project\n```\n\nThis will create a new directory called `my_project` with the following structure:\n\n```highlight notranslate plaintext\nmy_project\n├── deno.json\n├── main_test.ts\n└── main.ts\n```\n\nA `deno.json` file is created to [configure your project](https://docs.deno.com/runtime/fundamentals/configuration/), and two TypeScript files are created; `main.ts` and `main_test.ts`. The `main.ts` file is where you'll write your application code, on initial creation it will contain a simple program which adds two numbers together. The `main_test.ts` file is where you can write tests, initially it will contain a test for your addition program.\n\n## Run your project\nYou can run this program with the following command:\n\n```highlight notranslate bash\n$ deno main.ts\nAdd 2 + 3 = 5\n```\n\n## Run your tests\nDeno has a [built in test runner](https://docs.deno.com/runtime/fundamentals/testing/). You can write tests for your code and run them with the `deno test` command. Run the tests in your new project with:\n\n```highlight notranslate bash\n$ deno test\nrunning 1 test from ./main_test.ts\naddTest ... ok (1ms)\n\nok | 1 passed | 0 failed (3ms)\n```\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/first_project", "title": "Making a Deno project", "description": "This page covers how to initialize, run, and test a Deno project using built-in tools and TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:49:52", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogTitle": "Making a Deno project", "ogLocale": "en_US", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "title": "Making a Deno project", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Making a Deno project", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Making a Deno project", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "twitter:card": "summary_large_image", "scrapeId": "7c263e08-2094-431e-bcf2-e2a32fd0387d", "sourceURL": "https://docs.deno.com/runtime/getting_started/first_project", "url": "https://docs.deno.com/runtime/getting_started/first_project/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Making a Deno project\"?\n\nAssistant: Here are some code examples:\n\n### Initialize a new project command\n```yaml\ndeno init my_project\n```\n\n### Run your project command\n```yaml\n$ deno main.ts\nAdd 2 + 3 = 5\n```\n\n### Run your tests command\n```yaml\n$ deno test\nrunning 1 test from ./main_test.ts\naddTest ... ok (1ms)\nok | 1 passed | 0 failed (3ms)\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/first_project", "title": "Making a Deno project", "description": "This page covers how to initialize, run, and test a Deno project using built-in tools and TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:49:52", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogTitle": "Making a Deno project", "ogLocale": "en_US", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "title": "Making a Deno project", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Making a Deno project", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Making a Deno project", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "twitter:card": "summary_large_image", "scrapeId": "7c263e08-2094-431e-bcf2-e2a32fd0387d", "sourceURL": "https://docs.deno.com/runtime/getting_started/first_project", "url": "https://docs.deno.com/runtime/getting_started/first_project/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Making a Deno project\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno has built-in support for TypeScript, which is recommended for this guide.\n• You can rename files to .js and remove type annotations if you prefer to use JavaScript.\n• Check out examples and tutorials for more ideas on what to build with Deno.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/getting_started/first_project", "title": "Making a Deno project", "description": "This page covers how to initialize, run, and test a Deno project using built-in tools and TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:49:52", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogTitle": "Making a Deno project", "ogLocale": "en_US", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "title": "Making a Deno project", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Making a Deno project", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Making a Deno project", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "twitter:card": "summary_large_image", "scrapeId": "7c263e08-2094-431e-bcf2-e2a32fd0387d", "sourceURL": "https://docs.deno.com/runtime/getting_started/first_project", "url": "https://docs.deno.com/runtime/getting_started/first_project/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Modules and dependencies\"?\n\nAssistant: Deno uses ECMAScript modules as its default module system to align with modern JavaScript standards and to promote a more efficient and consistent development experience.\n\nHere's a detailed explanation:\n\n\n## Importing modules\nIn this example the `add` function is imported from a local `calc.ts` module.\n\ncalc.ts\n\n```highlight notranslate ts\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n```\n\nmain.ts\n\n```highlight notranslate ts\n// imports the `calc.ts` module next to this file\nimport { add } from \"./calc.ts\";\n\nconsole.log(add(1, 2)); // 3\n```\n\nYou can run this example by calling `deno run main.ts` in the directory that contains both `main.ts` and `calc.ts.\n\nWith ECMAScript modules, local import specifiers must always include the full file extension. It cannot be omitted.\n\nexample.ts\n\n```highlight notranslate ts\n// WRONG: missing file extension\nimport { add } from \"./calc\";\n\n// CORRECT: includes file extension\nimport { add } from \"./calc.ts\";\n```\n\n## Importing third party modules and libraries\nWhen working with third-party modules in Deno, use the same `import` syntax as you do for local code. Third party modules are typically imported from a remote registry and start with `jsr:` , `npm:` or `https://`.\n\nmain.ts\n\n```highlight notranslate ts\nimport { camelCase } from \"jsr:@luca/cases@1.0.0\";\nimport { say } from \"npm:cowsay@1.6.0\";\nimport { pascalCase } from \"https://deno.land/x/case/mod.ts\";\n```\n\nDeno recommends [JSR](https://jsr.io/), the modern JavaScript registry, for third party modules. There, you'll find plenty of well documented ES modules for your projects, including the [Deno Standard Library](https://docs.deno.com/runtime/fundamentals/standard_library/). You can [read more about Deno's support for npm packages here](https://docs.deno.com/runtime/fundamentals/node/#using-npm-modules).\n\n## Managing third party modules and libraries\nTyping out the module name with the full version specifier can become tedious when importing them in multiple files. You can centralize management of remote modules with an `imports` field in your `deno.json` file. We call this `imports` field the **import map**, which is based on the [Import Maps Standard](https://github.com/WICG/import-maps).\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"@luca/cases\": \"jsr:@luca/cases@^1.0.0\",\n    \"cowsay\": \"npm:cowsay@^1.6.0\",\n    \"cases\": \"https://deno.land/x/case/mod.ts\"\n  }\n}\n```\n\nWith remapped specifiers, the code looks cleaner:\n\nmain.ts\n\n```highlight notranslate ts\nimport { camelCase } from \"@luca/cases\";\nimport { say } from \"cowsay\";\nimport { pascalCase } from \"cases\";\n```\n\n## Differentiating between imports or importMap in deno.json and --import-map option\nThe [Import Maps Standard](https://github.com/WICG/import-maps) requires two entries for each module: one for the module specifier and another for the specifier with a trailing `/`. This is because the standard allows only one entry per module specifier, and the trailing `/` indicates that the specifier refers to a directory. For example, when using the `--import-map import_map.json` option, the `import_map.json` file must include both entries for each module (note the use of `jsr:/@std/async` instead of `jsr:@std/async`):\n\nimport_map.json\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"@std/async\": \"jsr:@std/async@^1.0.0\",\n    \"@std/async/\": \"jsr:/@std/async@^1.0.0/\"\n  }\n}\n```\n\nIn contrast, `deno.json` extends the import maps standard. When you use the imports field in `deno.json` or reference an `import_map.json` file via the `importMap` field, you only need to specify the module specifier without the trailing `/`:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"@std/async\": \"jsr:@std/async@^1.0.0\"\n  }\n}\n```\n\n## Adding dependencies with deno add\nThe installation process is made easy with the `deno add` subcommand. It will automatically add the latest version of the package you requested to the `imports` section in `deno.json`.\n\n```highlight notranslate sh\n# Add the latest version of the module to deno.json\n$ deno add jsr:@luca/cases\nAdd @luca/cases - jsr:@luca/cases@1.0.0\n```\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"@luca/cases\": \"jsr:@luca/cases@^1.0.0\"\n  }\n}\n```\n\nYou can also specify an exact version:\n\n```highlight notranslate sh\n# Passing an exact version\n$ deno add jsr:@luca/cases@1.0.0\nAdd @luca/cases - jsr:@luca/cases@1.0.0\n```\n\n## Package Versions\nIt is possible to specify a version range for the package you are importing. This is done using the `@` symbol followed by a version range specifier, and follows the [semver](https://semver.org/) versioning scheme.\n\nFor example:\n\n```highlight notranslate bash\n@scopename/mypackage           # highest version\n@scopename/mypackage@16.1.0    # exact version\n@scopename/mypackage@16        # highest 16.x version >= 16.0.0\n@scopename/mypackage@^16.1.0   # highest 16.x version >= 16.1.0\n@scopename/mypackage@~16.1.0   # highest 16.1.x version >= 16.1.0\n```\n\nHere is an overview of all the ways you can specify a version or a range:\n\n| Symbol | Description | Example |\n| --- | --- | --- |\n| `1.2.3` | An exact version. Only this specific version will be used. | `1.2.3` |\n| `^1.2.3` | Compatible with version 1.2.3. Allows updates that do not change the leftmost non-zero digit. <br>For example, `1.2.4` and `1.3.0` are allowed, but `2.0.0` is not. | `^1.2.3` |\n| `~1.2.3` | Approximately equivalent to version 1.2.3. Allows updates to the patch version. <br> For example, `1.2.4` is allowed, but `1.3.0` is not. | `~1.2.3` |\n| `>=1.2.3` | Greater than or equal to version 1.2.3. Any version `1.2.3` or higher is allowed. | `>=1.2.3` |\n| `<=1.2.3` | Less than or equal to version 1.2.3. Any version `1.2.3` or lower is allowed. | `<=1.2.3` |\n| `>1.2.3` | Greater than version 1.2.3. Only versions higher than `1.2.3` are allowed. | `>1.2.3` |\n| `<1.2.3` | Less than version 1.2.3. Only versions lower than `1.2.3` are allowed. | `<1.2.3` |\n| `1.2.x` | Any patch version within the minor version 1.2. For example, `1.2.0`, `1.2.1`, etc. | `1.2.x` |\n| `1.x` | Any minor and patch version within the major version 1. For example, `1.0.0`, `1.1.0`, `1.2.0`, etc. | `1.x` |\n| `*` | Any version is allowed. | `*` |\n\n## HTTPS imports\nDeno also supports import statements that reference HTTP/HTTPS URLs, either directly:\n\n```highlight notranslate js\nimport { Application } from \"https://deno.land/x/oak/mod.ts\";\n```\n\nor part of your `deno.json` import map:\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"oak\": \"https://deno.land/x/oak/mod.ts\"\n  }\n}\n```\n\nSupporting HTTPS imports enables us to support the following JavaScript CDNs, as they provide URL access to JavaScript modules:\n\n- [deno.land/x](https://deno.land/x)\n- [esm.sh](https://esm.sh/)\n- [unpkg.com](https://unpkg.com/)\n\nHTTPS imports are useful if you have a small, often single file, Deno project that doesn't require any other configuration. With HTTPS imports, you can avoid having a `deno.json` file at all. It is **not** advised to use this style of import in larger applications however, as you may end up with version conflicts (where different files use different version specifiers).\n\nInfo\n\nUse HTTPS imports with caution, and only **from trusted sources**. If the server is compromised, it could serve malicious code to your application. They can also cause versioning issues if you import different versions in different files. HTTPS imports remain supported, **but we recommend using a package registry for** **the best experience.**\n\n## Overriding dependencies\nDeno provides mechanisms to override dependencies, enabling developers to use custom or local versions of libraries during development or testing.\n\nNote: If you need to cache and modify dependencies locally for use across builds, consider [vendoring remote modules](https://docs.deno.com/runtime/fundamentals/modules/#vendoring-remote-modules).\n\n## Overriding local JSR packages\nFor developers familiar with `npm link` in Node.js, Deno provides a similar feature for local JSR packages through the `patch` field in `deno.json`. This allows you to override dependencies with local versions during development without needing to publish them.\n\nExample:\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"patch\": [\n    \"../some-package-or-workspace\"\n  ]\n}\n```\n\nKey points:\n\n- The `patch` field accepts paths to directories containing JSR packages or workspaces. If you reference a single package within a workspace, the entire workspace will be included.\n- This feature is only respected in the workspace root. Using `patch` elsewhere will trigger warnings.\n- Currently, `patch` is limited to JSR packages. Attempting to patch `npm` packages will result in a warning with no effect.\n\nLimitations:\n\n- `npm` package overrides are not supported yet. This is planned for future updates.\n- Git-based dependency overrides are unavailable.\n- The `patch` field requires proper configuration in the workspace root.\n- This feature is experimental and may change based on user feedback.\n\n## Overriding NPM packages\nWe plan to support NPM packages with the patch functionality described above, but until then if you have a `node_modules` directory, `npm link` can be used without change to achieve the same effect. This is typically done with `{ \"nodeModulesDir\": \"manual\" }` set in the `deno.json` file. See also the documentation on [`node_modules`](https://docs.deno.com/runtime/fundamentals/node/#node_modules)\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/modules", "title": "Modules and dependencies", "description": "Deno uses ECMAScript modules as its default module system to align with modern JavaScript standards and to promote a more efficient and consistent development experience.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:50:29", "type": "overview", "page_metadata": {"title": "Modules and dependencies", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Modules and dependencies", "og:title": "Modules and dependencies", "ogTitle": "Modules and dependencies", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "scrapeId": "e5850fd8-f8d6-43c6-9150-cb077467baee", "sourceURL": "https://docs.deno.com/runtime/fundamentals/modules", "url": "https://docs.deno.com/runtime/fundamentals/modules/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Modules and dependencies\"?\n\nAssistant: Here are some code examples:\n\n### Importing a function from a local module\n```yaml\ncalc.ts\n\n```highlight notranslate ts\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n```\n\nmain.ts\n\n```highlight notranslate ts\n// imports the `calc.ts` module next to this file\nimport { add } from \"./calc.ts\";\n\nconsole.log(add(1, 2)); // 3\n```\n```\n\n### Incorrect and Correct Import Example\n```yaml\nexample.ts\n\n```highlight notranslate ts\n// WRONG: missing file extension\nimport { add } from \"./calc\";\n\n// CORRECT: includes file extension\nimport { add } from \"./calc.ts\";\n```\n```\n\n### Importing third-party modules\n```yaml\nmain.ts\n\n```highlight notranslate ts\nimport { camelCase } from \"jsr:@luca/cases@1.0.0\";\nimport { say } from \"npm:cowsay@1.6.0\";\nimport { pascalCase } from \"https://deno.land/x/case/mod.ts\";\n```\n```\n\n### Managing third-party modules with import map\n```yaml\ndeno.json\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"@luca/cases\": \"jsr:@luca/cases@^1.0.0\",\n    \"cowsay\": \"npm:cowsay@^1.6.0\",\n    \"cases\": \"https://deno.land/x/case/mod.ts\"\n  }\n}\n```\n```\n\n### Adding a dependency with deno add\n```yaml\n```highlight notranslate sh\n# Add the latest version of the module to deno.json\n$ deno add jsr:@luca/cases\nAdd @luca/cases - jsr:@luca/cases@1.0.0\n```\n```\n\n### Specifying package versions\n```yaml\n```highlight notranslate bash\n@scopename/mypackage           # highest version\n@scopename/mypackage@16.1.0    # exact version\n@scopename/mypackage@16        # highest 16.x version >= 16.0.0\n@scopename/mypackage@^16.1.0   # highest 16.x version >= 16.1.0\n@scopename/mypackage@~16.1.0   # highest 16.1.x version >= 16.1.0\n```\n```\n\n### Using HTTPS imports\n```yaml\n```highlight notranslate js\nimport { Application } from \"https://deno.land/x/oak/mod.ts\";\n```\n```\n\n### Overriding dependencies with patch\n```yaml\ndeno.json\n\n```highlight notranslate json\n{\n  \"patch\": [\n    \"../some-package-or-workspace\"\n  ]\n}\n```\n```\n\n### Overriding HTTPS imports\n```yaml\ndeno.json\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"example/\": \"https://deno.land/x/example/\"\n  },\n  \"scopes\": {\n    \"https://deno.land/x/example/\": {\n      \"https://deno.land/x/my-library@1.0.0/mod.ts\": \"./patched/mod.ts\"\n    }\n  }\n}\n```\n```\n\n### Vendoring remote modules\n```yaml\ndeno.json\n\n```highlight notranslate json\n{\n  \"vendor\": true\n}\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/modules", "title": "Modules and dependencies", "description": "Deno uses ECMAScript modules as its default module system to align with modern JavaScript standards and to promote a more efficient and consistent development experience.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:50:29", "type": "code_examples", "page_metadata": {"title": "Modules and dependencies", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Modules and dependencies", "og:title": "Modules and dependencies", "ogTitle": "Modules and dependencies", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "scrapeId": "e5850fd8-f8d6-43c6-9150-cb077467baee", "sourceURL": "https://docs.deno.com/runtime/fundamentals/modules", "url": "https://docs.deno.com/runtime/fundamentals/modules/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Modules and dependencies\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use HTTPS imports with caution, and only from trusted sources. If the server is compromised, it could serve malicious code to your application.\n• Deno recommends using a package registry for the best experience with module imports.\n• When using the `--import-map` option, ensure to include both entries for each module in the import map file.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/modules", "title": "Modules and dependencies", "description": "Deno uses ECMAScript modules as its default module system to align with modern JavaScript standards and to promote a more efficient and consistent development experience.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-28 00:50:29", "type": "best_practices", "page_metadata": {"title": "Modules and dependencies", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Modules and dependencies", "og:title": "Modules and dependencies", "ogTitle": "Modules and dependencies", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "scrapeId": "e5850fd8-f8d6-43c6-9150-cb077467baee", "sourceURL": "https://docs.deno.com/runtime/fundamentals/modules", "url": "https://docs.deno.com/runtime/fundamentals/modules/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Lint Plugins\"?\n\nAssistant: This page covers the lint plugin API in Deno, which allows for the extension of the built-in linter with custom lint rules.\n\nHere's a detailed explanation:\n\n\n## Caution\nThis is an experimental feature and requires Deno `2.2.0` or newer. The plugin API is currently marked as \"unstable\" since it is subject to changes in the future.\n\n## Introduction\nThe built-in linter can be extended with plugins to add custom lint rules. Whilst Deno ships with many lint rules out of the box, there are cases where you need a custom rule tailored particularly to your project - whether to catch a context-specific problem or enforce company-wide conventions. This is where the lint plugin API comes into play. The lint plugin API is intentionally modeled after the ESLint API. While this API doesn't provide 100% compatibility, the existing knowledge of authoring ESLint plugins can be mostly reused if you happen to have written custom ESLint rules in the past. Plugins are loaded via the `lint.plugins` setting in `deno.json`. The value is an array of plugin specifiers. These can be paths, `npm:`, or `jsr:` specifiers.\n\n## Example plugin\nA plugin always has the same shape. It has a default export which is your plugin object. Deno provides type declarations for the lint plugins API. All the typings are available under the `Deno.lint` namespace.\n\n## Using selectors to match nodes\nWriting code to match a specific node can sometimes become a bit tedious if you write it in plain JavaScript. Sometimes this matching logic would be easier to express via a selector, similar to CSS selectors. By using a string as the property name in the returned visitor object, we can specify a custom selector. Note, that we can always refine our match further in JavaScript if the matching logic is too complex to be expressed as a selector alone.\n\n## Applying fixes\nA custom lint rule can supply a function to apply a fix when reporting a problem. The optional `fix()` method is called when running `deno lint --fix` or applying a fix from inside your editor through the Deno LSP. The `fix()` method receives a `fixer` instance which contains helper methods to make creating a fix easier.\n\n## Running cleanup code\nIf your plugin requires running cleanup code after a file has been linted, you can hook into the linter via the `destroy()` hook. It is called after a file has been linted and just before the plugin context is destroyed.\n\n## Excluding custom rules\nSimilar to built-in rules, you can disable custom rules provided by a plugin. To do so, add it to the `lint.rules.exclude` key in `deno.json`. The format of a custom lint rule is always `<plugin-name>/<rule-name>`.\n\n## Testing plugins\nThe `Deno.lint.runPlugin` API provides a convenient way to test your plugins. It allows you to assert that the plugin produces expected diagnostics given the particular input.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/lint_plugins", "title": "Lint Plugins", "description": "This page covers the lint plugin API in Deno, which allows for the extension of the built-in linter with custom lint rules.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 00:50:47", "type": "overview", "page_metadata": {"og:title": "Lint Plugins", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Lint Plugins", "twitter:title": "Lint Plugins", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:image": "/img/og.webp", "ogTitle": "Lint Plugins", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "c0b1f599-a4cf-4ae5-a188-c45ddce2fbf8", "sourceURL": "https://docs.deno.com/runtime/reference/lint_plugins", "url": "https://docs.deno.com/runtime/reference/lint_plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Lint Plugins\"?\n\nAssistant: Here are some code examples:\n\n### deno.json configuration for plugins\n```yaml\n{\n  \"lint\": {\n    \"plugins\": [\"./my-plugin.ts\"]\n  }\n}\n```\n\n### Example plugin structure\n```yaml\nexport default {\n  name: \"my-plugin\",\n  rules: {\n    \"my-rule\": {\n      create(context) {\n        return {\n          Identifier(node) {\n            if (node.name === \"_a\") {\n              context.report({\n                node,\n                message: \"should be _b\",\n                fix(fixer) {\n                  return fixer.replaceText(node, \"_b\");\n                },\n              });\n            }\n          },\n        };\n      },\n    },\n  },\n} satisfies Deno.lint.Plugin;\n```\n\n### Using selectors in a plugin\n```yaml\nexport default {\n  name: \"my-plugin\",\n  rules: {\n    \"my-rule\": {\n      create(context) {\n        return {\n          'CallExpression[callee.name=\"require\"]'(node) {\n            context.report({\n              node,\n              message: \"Don't use require() calls to load modules\",\n            });\n          },\n        };\n      },\n    },\n  },\n} satisfies Deno.lint.Plugin;\n```\n\n### Fixing a lint error\n```yaml\ncontext.report({\n  node,\n  message: \"should be _b\",\n  fix(fixer) {\n    return fixer.replaceText(node, \"_b\");\n  },\n});\n```\n\n### Cleanup code in a plugin\n```yaml\nexport default {\n  name: \"my-plugin\",\n  rules: {\n    \"my-rule\": {\n      create(context) {\n        // ...\n      },\n      destroy() {\n        // do some cleanup stuff if you need to\n      },\n    },\n  },\n} satisfies Deno.lint.Plugin;\n```\n\n### Excluding a custom rule in deno.json\n```yaml\n{\n  \"lint\": {\n    \"plugins\": [\"./my-plugin.ts\"],\n    \"rules\": {\n      \"exclude\": [\"my-plugin/my-rule\"]\n    }\n  }\n}\n```\n\n### Testing a plugin\n```yaml\nimport { assert, assertEquals } from \"jsr:@std/assert\";\nimport myPlugin from \"./my-plugin.ts\";\n\nDeno.test(\"my-plugin\", () => {\n  const diagnostics = Deno.lint.runPlugin(plugin, \"main.ts\", \"const _a = 'a';\");\n\n  assertEquals(diagnostics.length, 1);\n  const d = diagnostics[0];\n  assertEquals(d.id, \"my-plugin/my-rule\");\n  assertEquals(d.message, \"should be _b\");\n  assert(typeof d.fix === \"function\");\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/lint_plugins", "title": "Lint Plugins", "description": "This page covers the lint plugin API in Deno, which allows for the extension of the built-in linter with custom lint rules.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 00:50:47", "type": "code_examples", "page_metadata": {"og:title": "Lint Plugins", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Lint Plugins", "twitter:title": "Lint Plugins", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:image": "/img/og.webp", "ogTitle": "Lint Plugins", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "c0b1f599-a4cf-4ae5-a188-c45ddce2fbf8", "sourceURL": "https://docs.deno.com/runtime/reference/lint_plugins", "url": "https://docs.deno.com/runtime/reference/lint_plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Lint Plugins\"?\n\nAssistant: Here are the recommended best practices:\n\n• We highly recommend using the typescript-eslint playground when developing lint rules. It allows you to inspect code and the resulting AST format. This makes it easier to see which selectors match which node.\n• It is not safe to assume that your plugin code will be executed again for each of the files linted. Prefer not to keep a global state, and do cleanup in the destroy hook, in case deno lint decides to reuse the existing plugin instance.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/lint_plugins", "title": "Lint Plugins", "description": "This page covers the lint plugin API in Deno, which allows for the extension of the built-in linter with custom lint rules.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 00:50:47", "type": "best_practices", "page_metadata": {"og:title": "Lint Plugins", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Lint Plugins", "twitter:title": "Lint Plugins", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "og:image": "/img/og.webp", "ogTitle": "Lint Plugins", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "c0b1f599-a4cf-4ae5-a188-c45ddce2fbf8", "sourceURL": "https://docs.deno.com/runtime/reference/lint_plugins", "url": "https://docs.deno.com/runtime/reference/lint_plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Planning your implementation\"?\n\nAssistant: This page covers how to plan and implement deployments using Deno Deploy, including creating deployments, understanding deployment components, and using custom domains.\n\nHere's a detailed explanation:\n\n\n## Creating a deployment for a project\nIn the previous chapter, you created a new project and noted its `id` property. In the example in the previous chapter, the ID was:\n\n```highlight notranslate console\nf084712a-b23b-4aba-accc-3c2de0bfa26a\n```\n\nYou can use a project identifier to [create a deployment](https://apidocs.deno.com/#get-/projects/-projectId-/deployments) for that project. Create a new file called `create_deployment.ts` and include the following code to create a new \"hello world\" deployment for your project.\n\ncreate_deployment.ts\n\n```highlight notranslate ts\nconst accessToken = Deno.env.get(\"DEPLOY_ACCESS_TOKEN\");\nconst API = \"https://api.deno.com/v1\";\n\n// Replace with your desired project ID\nconst projectId = \"your-project-id-here\";\n\n// Create a new deployment\nconst res = await fetch(`${API}/projects/${projectId}/deployments`, {\n  method: \"POST\",\n  headers: {\n    Authorization: `Bearer ${accessToken}`,\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    entryPointUrl: \"main.ts\",\n    assets: {\n      \"main.ts\": {\n        \"kind\": \"file\",\n        \"content\":\n          `export default { async fetch(req) { return new Response(\"Hello, World!\"); } }`,\n        \"encoding\": \"utf-8\",\n      },\n    },\n    envVars: {},\n  }),\n});\n\nconst deployment = await res.json();\n\nconsole.log(res.status);\nconsole.log(\n  \"Visit your site here:\",\n  `https://${project.name}-${deployment.id}.deno.dev`,\n);\n```\n\nIf you run this script with the following command:\n\n```highlight notranslate bash\ndeno run -A --env create_deployment.ts\n```\n\nYou should soon have a simple \"Hello World!\" server live on a public URL, visible from your Deno Deploy dashboard.\n\n## Parts of a deployment\nThe example above showed a very simple example of a deployment. A more complex deployment might include some or all of these components, fully described [here in the API docs](https://apidocs.deno.com/#get-/projects/-projectId-/deployments).\n\n- **Assets:** TypeScript or JavaScript source files, images, JSON documents - code and static files that make your deployment run. These files can be encoded in the JSON you upload to the server using `utf-8` (for plain source files) or `base64` for images and other text files. In addition to actual files, you can also include symbolic links to other files.\n- **Entry point URL:** A file path to an asset (a TypeScript or JavaScript file) from the collection above that should be executed to start a server in your deployment.\n- **Environment variables:** You can specify values that should exist in the system environment, to be retrieved by `Deno.env.get`.\n- **Database ID:** The identifier for a Deno KV database that should be made available to this deployment.\n- **Compiler options:** A set of options that should be used to interpret TypeScript code.\n\n## Custom domains\nAfter a deployment is created, it is assigned a generated URL. That may be fine for some scenarios, but often you'll want to associate a custom domain with your deployments as well. [Check out the API reference for domains](https://apidocs.deno.com/#get-/organizations/-organizationId-/domains).\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/manual/planning_your_implementation", "title": "Planning your implementation", "description": "This page covers how to plan and implement deployments using Deno Deploy, including creating deployments, understanding deployment components, and using custom domains.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:51:02", "type": "overview", "page_metadata": {"language": "en", "twitter:site": "@deno_land", "og:title": "Planning your implementation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Planning your implementation", "title": "Planning your implementation", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Planning your implementation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "scrapeId": "4f337e89-fd89-4c7d-b837-09f1323937b3", "sourceURL": "https://docs.deno.com/subhosting/manual/planning_your_implementation", "url": "https://docs.deno.com/subhosting/manual/planning_your_implementation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Planning your implementation\"?\n\nAssistant: Here are some code examples:\n\n### Creating a deployment script\n```yaml\nconst accessToken = Deno.env.get(\"DEPLOY_ACCESS_TOKEN\");\nconst API = \"https://api.deno.com/v1\";\n\n// Replace with your desired project ID\nconst projectId = \"your-project-id-here\";\n\n// Create a new deployment\nconst res = await fetch(`${API}/projects/${projectId}/deployments`, {\n  method: \"POST\",\n  headers: {\n    Authorization: `Bearer ${accessToken}`,\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify({\n    entryPointUrl: \"main.ts\",\n    assets: {\n      \"main.ts\": {\n        \"kind\": \"file\",\n        \"content\":\n          `export default { async fetch(req) { return new Response(\"Hello, World!\"); } }`,\n        \"encoding\": \"utf-8\",\n      },\n    },\n    envVars: {},\n  }),\n});\n\nconst deployment = await res.json();\n\nconsole.log(res.status);\nconsole.log(\n  \"Visit your site here:\",\n  `https://${project.name}-${deployment.id}.deno.dev`,\n);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/manual/planning_your_implementation", "title": "Planning your implementation", "description": "This page covers how to plan and implement deployments using Deno Deploy, including creating deployments, understanding deployment components, and using custom domains.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:51:02", "type": "code_examples", "page_metadata": {"language": "en", "twitter:site": "@deno_land", "og:title": "Planning your implementation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Planning your implementation", "title": "Planning your implementation", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Planning your implementation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "scrapeId": "4f337e89-fd89-4c7d-b837-09f1323937b3", "sourceURL": "https://docs.deno.com/subhosting/manual/planning_your_implementation", "url": "https://docs.deno.com/subhosting/manual/planning_your_implementation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Planning your implementation\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use a project identifier to create a deployment for that project.\n• Create a new file for deployment scripts to keep your code organized.\n• Consider using multiple deployments for staging and production versions of your application.\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/manual/planning_your_implementation", "title": "Planning your implementation", "description": "This page covers how to plan and implement deployments using Deno Deploy, including creating deployments, understanding deployment components, and using custom domains.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:51:02", "type": "best_practices", "page_metadata": {"language": "en", "twitter:site": "@deno_land", "og:title": "Planning your implementation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Planning your implementation", "title": "Planning your implementation", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Planning your implementation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "scrapeId": "4f337e89-fd89-4c7d-b837-09f1323937b3", "sourceURL": "https://docs.deno.com/subhosting/manual/planning_your_implementation", "url": "https://docs.deno.com/subhosting/manual/planning_your_implementation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connect to Postgres\"?\n\nAssistant: This tutorial covers how to connect to a Postgres database from an application deployed on Deno Deploy.\n\nHere's a detailed explanation:\n\n\n## Setup Postgres\nThis tutorial will focus entirely on connecting to Postgres unencrypted. If you would like to use encryption with a custom CA certificate, use the documentation [here](https://deno-postgres.com/#/?id=ssltls-connection).\n\nTo get started, we need to create a new Postgres instance for us to connect to. For this tutorial, we will be using [Supabase](https://supabase.com/) as they provide free, managed Postgres instances. If you like to host your database somewhere else, you can do that too.\n\n1. Visit [https://app.supabase.io/](https://app.supabase.io/) and click **New project**.\n2. Select a name, password, and region for your database. Make sure to save the password, as you will need it later.\n3. Click **Create new project**. Creating the project can take a while, so be patient.\n\n## Gather credentials from Postgres\nOnce you've set up your Postgres database, gather your connection information from your Postgres instance.\n\n### Supabase\nFor the Supabase instance above, to get your connection information:\n\n1. Navigate to the **Database** tab on the left.\n2. Go to the **Project Settings** > **Database** and copy the connection string from the **Connection String** > **URI** field. This is the connection string you will use to connect to your database. Insert the password you saved earlier into this string, and then save the string somewhere - you will need it later.\n\n### psql\nIf you are using psql, you should generally be able to find your connection information by running:\n\n```highlight notranslate psql\ntest=# \\conninfo\n```\n\nYour Postgres connection string will take the form:\n\n```highlight notranslate sh\npostgres://user:password@127.0.0.1:5432/deploy?sslmode=disable\n```\n\n## Create a project in Deno Deploy\nNext, let's create a project in Deno Deploy and set it up with the requisite environment variables:\n\n1. Go to [https://dash.deno.com/new](https://dash.deno.com/new) (Sign in with GitHub if you didn't already) and click on **\\+ Empty Project** under **Deploy** **from the command line**.\n2. Now click on the **Settings** button available on the project page.\n3. Navigate to **Environment Variables** Section and add the following secrets.\n\n- `DATABASE_URL` - The value should be your connection string that you retrieved in the last step.\n\n![postgres_env_variable](https://docs.deno.com/deploy/docs-images/postgres_env_variable.png)\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/postgres", "title": "Connect to Postgres", "description": "This tutorial covers how to connect to a Postgres database from an application deployed on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:51:12", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "twitter:title": "Connect to Postgres", "viewport": "width=device-width, initial-scale=1", "og:title": "Connect to Postgres", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Connect to Postgres", "ogTitle": "Connect to Postgres", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "scrapeId": "af8e1097-318d-4c86-85d7-20e3f4189858", "sourceURL": "https://docs.deno.com/deploy/manual/postgres", "url": "https://docs.deno.com/deploy/manual/postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connect to Postgres\"?\n\nAssistant: Here are some code examples:\n\n### Code to connect to Postgres\n```yaml\nimport { Pool } from \"https://deno.land/x/postgres@v0.17.0/mod.ts\";\n\n// Get the connection string from the environment variable \"DATABASE_URL\"\nconst databaseUrl = Deno.env.get(\"DATABASE_URL\")!;\n\n// Create a database pool with three connections that are lazily established\nconst pool = new Pool(databaseUrl, 3, true);\n\n// Connect to the database\nconst connection = await pool.connect();\n\ntry {\n  // Create the table\n  await connection.queryObject`\n    CREATE TABLE IF NOT EXISTS todos (\n      id SERIAL PRIMARY KEY,\n      title TEXT NOT NULL\n    )\n  `;\n} finally {\n  // Release the connection back into the pool\n  connection.release();\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/postgres", "title": "Connect to Postgres", "description": "This tutorial covers how to connect to a Postgres database from an application deployed on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:51:12", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "twitter:title": "Connect to Postgres", "viewport": "width=device-width, initial-scale=1", "og:title": "Connect to Postgres", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Connect to Postgres", "ogTitle": "Connect to Postgres", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "scrapeId": "af8e1097-318d-4c86-85d7-20e3f4189858", "sourceURL": "https://docs.deno.com/deploy/manual/postgres", "url": "https://docs.deno.com/deploy/manual/postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connect to Postgres\"?\n\nAssistant: Here are the recommended best practices:\n\n• This tutorial will focus entirely on connecting to Postgres unencrypted. If you would like to use encryption with a custom CA certificate, use the documentation provided.\n• Make sure to save the password for your database as you will need it later when creating the connection string.\n• When using psql, you can find your connection information by running `\\conninfo`.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/postgres", "title": "Connect to Postgres", "description": "This tutorial covers how to connect to a Postgres database from an application deployed on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:51:12", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "twitter:title": "Connect to Postgres", "viewport": "width=device-width, initial-scale=1", "og:title": "Connect to Postgres", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "Connect to Postgres", "ogTitle": "Connect to Postgres", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "scrapeId": "af8e1097-318d-4c86-85d7-20e3f4189858", "sourceURL": "https://docs.deno.com/deploy/manual/postgres", "url": "https://docs.deno.com/deploy/manual/postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the punycode module in Deno, including its deprecation and available functions.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:punycode\";\n```\n\n## Deprecated\n**The version of the punycode module bundled in Node.js is being deprecated.** In a future major version of Node.js this module will be removed. Users currently depending on the `punycode` module should switch to using the userland-provided [Punycode.js](https://github.com/bestiejs/punycode.js) module instead. For punycode-based URL encoding, see `url.domainToASCII` or, more generally, the `WHATWG URL API`.\n\nThe `punycode` module is a bundled version of the [Punycode.js](https://github.com/bestiejs/punycode.js) module. It can be accessed using:\n\n```highlight notranslate js\nimport punycode from 'node:punycode';\n```\n\n[Punycode](https://tools.ietf.org/html/rfc3492) is a character encoding scheme defined by RFC 3492 that is primarily intended for use in Internationalized Domain Names. Because host names in URLs are limited to ASCII characters only, Domain Names that contain non-ASCII characters must be converted into ASCII using the Punycode scheme. For instance, the Japanese character that translates into the English word, `'example'` is `'例'`. The Internationalized Domain Name, `'例.com'` (equivalent to `'example.com'`) is represented by Punycode as the ASCII string `'xn--fsq.com'`.\n\nThe `punycode` module provides a simple implementation of the Punycode standard.\n\nThe `punycode` module is a third-party dependency used by Node.js and made available to developers as a convenience. Fixes or other modifications to the module must be directed to the [Punycode.js](https://github.com/bestiejs/punycode.js) project.\n\n## Functions\n### Functions [#](https://docs.deno.com/api/node/punycode/#Functions)\n\nf\n\n[decode](https://docs.deno.com/api/node/punycode/~/decode \"decode\")\n\nThe `punycode.decode()` method converts a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only characters to the equivalent string of Unicode codepoints.\n\nf\n\n[encode](https://docs.deno.com/api/node/punycode/~/encode \"encode\")\n\nThe `punycode.encode()` method converts a string of Unicode codepoints to a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only characters.\n\nf\n\n[toASCII](https://docs.deno.com/api/node/punycode/~/toASCII \"toASCII\")\n\nThe `punycode.toASCII()` method converts a Unicode string representing an Internationalized Domain Name to [Punycode](https://tools.ietf.org/html/rfc3492). Only the non-ASCII parts of the domain name will be converted. Calling `punycode.toASCII()` on a string that already only contains ASCII characters will have no effect.\n\nf\n\n[toUnicode](https://docs.deno.com/api/node/punycode/~/toUnicode \"toUnicode\")\n\nThe `punycode.toUnicode()` method converts a string representing a domain name containing [Punycode](https://tools.ietf.org/html/rfc3492) encoded characters into Unicode. Only the [Punycode](https://tools.ietf.org/html/rfc3492) encoded parts of the domain name are be converted.\n\n## Variables\n### Variables [#](https://docs.deno.com/api/node/punycode/#Variables)\n\nI\n\nv\n\n[ucs2](https://docs.deno.com/api/node/punycode/~/ucs2 \"ucs2\")\n\nNo documentation available\n\n- [decode](https://docs.deno.com/api/node/punycode/~/ucs2#method_decode_0)\n- [encode](https://docs.deno.com/api/node/punycode/~/ucs2#method_encode_0)\n\nv\n\n[version](https://docs.deno.com/api/node/punycode/~/version \"version\")\n\nNo documentation available\n", "metadata": {"source_url": "https://docs.deno.com/api/node/punycode", "title": "Usage in Deno", "description": "This page covers the usage of the punycode module in Deno, including its deprecation and available functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:51:27", "type": "overview", "page_metadata": {"og:title": "punycode - Node documentation", "title": "punycode - Node documentation", "ogLocale": "en_US", "language": "en", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "punycode - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "punycode - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "scrapeId": "403487f4-3e08-436e-a5e9-4eed64bee0e5", "sourceURL": "https://docs.deno.com/api/node/punycode", "url": "https://docs.deno.com/api/node/punycode/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing punycode module in Deno\n```yaml\n```highlight notranslate typescript\nimport * as mod from \"node:punycode\";\n```\n```\n\n### Accessing punycode module\n```yaml\n```highlight notranslate js\nimport punycode from 'node:punycode';\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/punycode", "title": "Usage in Deno", "description": "This page covers the usage of the punycode module in Deno, including its deprecation and available functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:51:27", "type": "code_examples", "page_metadata": {"og:title": "punycode - Node documentation", "title": "punycode - Node documentation", "ogLocale": "en_US", "language": "en", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "punycode - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "punycode - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "scrapeId": "403487f4-3e08-436e-a5e9-4eed64bee0e5", "sourceURL": "https://docs.deno.com/api/node/punycode", "url": "https://docs.deno.com/api/node/punycode/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Switch to using the userland-provided Punycode.js module instead of the deprecated punycode module in Node.js.\n• For punycode-based URL encoding, consider using url.domainToASCII or the WHATWG URL API.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/punycode", "title": "Usage in Deno", "description": "This page covers the usage of the punycode module in Deno, including its deprecation and available functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 00:51:27", "type": "best_practices", "page_metadata": {"og:title": "punycode - Node documentation", "title": "punycode - Node documentation", "ogLocale": "en_US", "language": "en", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "punycode - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "punycode - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "scrapeId": "403487f4-3e08-436e-a5e9-4eed64bee0e5", "sourceURL": "https://docs.deno.com/api/node/punycode", "url": "https://docs.deno.com/api/node/punycode/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Release Schedule\"?\n\nAssistant: A new minor release for the `deno` cli is scheduled for release every 12 weeks.\n\nHere's a detailed explanation:\n\n\n## Canary channel\nIn addition to the stable channel described above, canaries are released multiple times daily (for each commit on main). You can upgrade to the latest canary release by running:\n\n```highlight notranslate console\ndeno upgrade --canary\n```\n\nTo update to a specific canary, pass the commit hash in the `--version` option:\n\n```highlight notranslate console\ndeno upgrade --canary --version=973af61d8bb03c1709f61e456581d58386ed4952\n```\n\nTo switch back to the stable channel, run `deno upgrade`.\n\nCanaries can be downloaded from [https://dl.deno.land](https://dl.deno.land/).\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/release_schedule", "title": "Release Schedule", "description": "A new minor release for the `deno` cli is scheduled for release every 12 weeks.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:51:32", "type": "overview", "page_metadata": {"title": "Release Schedule", "og:title": "Release Schedule", "ogTitle": "Release Schedule", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogImage": "/img/og.webp", "language": "en", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Release Schedule", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "421595a6-e3f9-4471-aeba-27744cd119ff", "sourceURL": "https://docs.deno.com/runtime/contributing/release_schedule", "url": "https://docs.deno.com/runtime/contributing/release_schedule/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Release Schedule\"?\n\nAssistant: Here are some code examples:\n\n### Upgrade to latest canary release\n```yaml\ndeno upgrade --canary\n```\n\n### Upgrade to a specific canary release\n```yaml\ndeno upgrade --canary --version=973af61d8bb03c1709f61e456581d58386ed4952\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/release_schedule", "title": "Release Schedule", "description": "A new minor release for the `deno` cli is scheduled for release every 12 weeks.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:51:32", "type": "code_examples", "page_metadata": {"title": "Release Schedule", "og:title": "Release Schedule", "ogTitle": "Release Schedule", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogImage": "/img/og.webp", "language": "en", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Release Schedule", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "421595a6-e3f9-4471-aeba-27744cd119ff", "sourceURL": "https://docs.deno.com/runtime/contributing/release_schedule", "url": "https://docs.deno.com/runtime/contributing/release_schedule/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Release Schedule\"?\n\nAssistant: Here are the recommended best practices:\n\n• Stable releases can be found on the GitHub releases page.\n• See Milestones on Deno's GitHub for the upcoming releases.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/release_schedule", "title": "Release Schedule", "description": "A new minor release for the `deno` cli is scheduled for release every 12 weeks.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:51:32", "type": "best_practices", "page_metadata": {"title": "Release Schedule", "og:title": "Release Schedule", "ogTitle": "Release Schedule", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogImage": "/img/og.webp", "language": "en", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Release Schedule", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "421595a6-e3f9-4471-aeba-27744cd119ff", "sourceURL": "https://docs.deno.com/runtime/contributing/release_schedule", "url": "https://docs.deno.com/runtime/contributing/release_schedule/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the node:dgram module in Deno, including code examples and descriptions of classes, functions, interfaces, and type aliases.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\nThe `node:dgram` module provides an implementation of UDP datagram sockets.\n\n## Classes\n- [Socket](https://docs.deno.com/api/node/dgram/~/Socket \"Socket\")\n\nNo documentation available\n\n- [addListener](https://docs.deno.com/api/node/dgram/~/Socket#method_addlistener_0)\n- [addMembership](https://docs.deno.com/api/node/dgram/~/Socket#method_addmembership_0)\n- [addSourceSpecificMembership](https://docs.deno.com/api/node/dgram/~/Socket#method_addsourcespecificmembership_0)\n- [address](https://docs.deno.com/api/node/dgram/~/Socket#method_address_0)\n- [bind](https://docs.deno.com/api/node/dgram/~/Socket#method_bind_0)\n- [close](https://docs.deno.com/api/node/dgram/~/Socket#method_close_0)\n- [connect](https://docs.deno.com/api/node/dgram/~/Socket#method_connect_0)\n- [disconnect](https://docs.deno.com/api/node/dgram/~/Socket#method_disconnect_0)\n- [dropMembership](https://docs.deno.com/api/node/dgram/~/Socket#method_dropmembership_0)\n- [dropSourceSpecificMembership](https://docs.deno.com/api/node/dgram/~/Socket#method_dropsourcespecificmembership_0)\n- [emit](https://docs.deno.com/api/node/dgram/~/Socket#method_emit_0)\n- [getRecvBufferSize](https://docs.deno.com/api/node/dgram/~/Socket#method_getrecvbuffersize_0)\n- [getSendBufferSize](https://docs.deno.com/api/node/dgram/~/Socket#method_getsendbuffersize_0)\n- [getSendQueueCount](https://docs.deno.com/api/node/dgram/~/Socket#method_getsendqueuecount_0)\n- [getSendQueueSize](https://docs.deno.com/api/node/dgram/~/Socket#method_getsendqueuesize_0)\n- [on](https://docs.deno.com/api/node/dgram/~/Socket#method_on_0)\n- [once](https://docs.deno.com/api/node/dgram/~/Socket#method_once_0)\n- [prependListener](https://docs.deno.com/api/node/dgram/~/Socket#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/dgram/~/Socket#method_prependoncelistener_0)\n- [ref](https://docs.deno.com/api/node/dgram/~/Socket#method_ref_0)\n- [remoteAddress](https://docs.deno.com/api/node/dgram/~/Socket#method_remoteaddress_0)\n- [send](https://docs.deno.com/api/node/dgram/~/Socket#method_send_0)\n- [setBroadcast](https://docs.deno.com/api/node/dgram/~/Socket#method_setbroadcast_0)\n- [setMulticastInterface](https://docs.deno.com/api/node/dgram/~/Socket#method_setmulticastinterface_0)\n- [setMulticastLoopback](https://docs.deno.com/api/node/dgram/~/Socket#method_setmulticastloopback_0)\n- [setMulticastTTL](https://docs.deno.com/api/node/dgram/~/Socket#method_setmulticastttl_0)\n- [setRecvBufferSize](https://docs.deno.com/api/node/dgram/~/Socket#method_setrecvbuffersize_0)\n- [setSendBufferSize](https://docs.deno.com/api/node/dgram/~/Socket#method_setsendbuffersize_0)\n- [setTTL](https://docs.deno.com/api/node/dgram/~/Socket#method_setttl_0)\n- [unref](https://docs.deno.com/api/node/dgram/~/Socket#method_unref_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/dgram", "title": "Usage in Deno", "description": "This page covers the usage of the node:dgram module in Deno, including code examples and descriptions of classes, functions, interfaces, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:51:44", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "dgram - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "dgram - Node documentation", "ogLocale": "en_US", "twitter:title": "dgram - Node documentation", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "dgram - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "9c7a1f01-82eb-4696-93e2-b28b5fabc7b9", "sourceURL": "https://docs.deno.com/api/node/dgram", "url": "https://docs.deno.com/api/node/dgram/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Basic UDP Server Example\n```yaml\nimport dgram from 'node:dgram';\n\nconst server = dgram.createSocket('udp4');\n\nserver.on('error', (err) => {\n  console.error(`server error:\\n${err.stack}`);\n  server.close();\n});\n\nserver.on('message', (msg, rinfo) => {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on('listening', () => {\n  const address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234); // Prints: server listening 0.0.0.0:41234\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/dgram", "title": "Usage in Deno", "description": "This page covers the usage of the node:dgram module in Deno, including code examples and descriptions of classes, functions, interfaces, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:51:44", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "dgram - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "dgram - Node documentation", "ogLocale": "en_US", "twitter:title": "dgram - Node documentation", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "dgram - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "9c7a1f01-82eb-4696-93e2-b28b5fabc7b9", "sourceURL": "https://docs.deno.com/api/node/dgram", "url": "https://docs.deno.com/api/node/dgram/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to handle errors in your UDP server to prevent crashes.\n• Always bind your server to a specific port to avoid conflicts.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/dgram", "title": "Usage in Deno", "description": "This page covers the usage of the node:dgram module in Deno, including code examples and descriptions of classes, functions, interfaces, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:51:44", "type": "best_practices", "page_metadata": {"twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "dgram - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "dgram - Node documentation", "ogLocale": "en_US", "twitter:title": "dgram - Node documentation", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "dgram - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "9c7a1f01-82eb-4696-93e2-b28b5fabc7b9", "sourceURL": "https://docs.deno.com/api/node/dgram", "url": "https://docs.deno.com/api/node/dgram/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deploying a Fresh Application on Deno Deploy\"?\n\nAssistant: This tutorial will cover how to deploy a Fresh application on Deno Deploy. Fresh is a web framework built for Deno, akin to Express for Node.\n\nHere's a detailed explanation:\n\n\n## Step 1: Create Fresh application\nTo create a Fresh application, run the following command:\n\n```sh\ndeno run -A -r https://fresh.deno.dev fresh-site\n```\n\nTo run this application locally:\n\n```sh\ndeno task start\n```\n\nYou can edit `routes/index.js` to modify the application.\n\n## Step 2: Create a new Github repo and link your local Fresh application.\n1. Create a new Github repo and record the git repo remote URL.\n\n2. From your local `fresh-site`, initialize git and push to the new remote repo:\n\n```sh\ngit init\ngit add .\ngit commit -m \"First commit\"\ngit remote add origin <remote-url>\ngit push origin main\n```\n\n## Step 3: Deploy to Deno Deploy\n1. Navigate to [https://dash.deno.com/new_project](https://dash.deno.com/new_project).\n2. Connect to your GitHub account and select your repository.\n3. Fill in the values on the form:\n   - Give your project a name\n   - Select `Fresh` from the \"Framework Preset\" options\n   - Set production branch to `main`\n   - Select `main.ts` as the entrypoint file\n4. Click \"Deploy Project\" to kick off Deno Deploy.\n5. Once deployed, you can view your new project at the URL provided in your project dashboard.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/fresh", "title": "Deploying a Fresh Application on Deno Deploy", "description": "This tutorial will cover how to deploy a Fresh application on Deno Deploy. Fresh is a web framework built for Deno, akin to Express for Node.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:51:51", "type": "overview", "page_metadata": {"ogLocale": "en_US", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Basic Fresh site", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:title": "Basic Fresh site", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:site_name": "Deno", "ogTitle": "Basic Fresh site", "title": "Basic Fresh site", "ogSiteName": "Deno", "scrapeId": "49e897a6-fe91-4bfa-8583-827ab25cdaf5", "sourceURL": "https://docs.deno.com/deploy/tutorials/fresh", "url": "https://docs.deno.com/deploy/tutorials/fresh/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deploying a Fresh Application on Deno Deploy\"?\n\nAssistant: Here are some code examples:\n\n### Create Fresh application\n```yaml\ndeno run -A -r https://fresh.deno.dev fresh-site\n```\n\n### Run application locally\n```yaml\ndeno task start\n```\n\n### Initialize Git and push to remote repo\n```yaml\ngit init\ngit add .\ngit commit -m \"First commit\"\ngit remote add origin <remote-url>\ngit push origin main\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/fresh", "title": "Deploying a Fresh Application on Deno Deploy", "description": "This tutorial will cover how to deploy a Fresh application on Deno Deploy. Fresh is a web framework built for Deno, akin to Express for Node.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:51:51", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Basic Fresh site", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:title": "Basic Fresh site", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:site_name": "Deno", "ogTitle": "Basic Fresh site", "title": "Basic Fresh site", "ogSiteName": "Deno", "scrapeId": "49e897a6-fe91-4bfa-8583-827ab25cdaf5", "sourceURL": "https://docs.deno.com/deploy/tutorials/fresh", "url": "https://docs.deno.com/deploy/tutorials/fresh/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deploying a Fresh Application on Deno Deploy\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have Deno installed before starting the tutorial.\n• Make sure to replace `<remote-url>` with your actual GitHub repository URL when initializing git.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/fresh", "title": "Deploying a Fresh Application on Deno Deploy", "description": "This tutorial will cover how to deploy a Fresh application on Deno Deploy. Fresh is a web framework built for Deno, akin to Express for Node.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:51:51", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Basic Fresh site", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:title": "Basic Fresh site", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:site_name": "Deno", "ogTitle": "Basic Fresh site", "title": "Basic Fresh site", "ogSiteName": "Deno", "scrapeId": "49e897a6-fe91-4bfa-8583-827ab25cdaf5", "sourceURL": "https://docs.deno.com/deploy/tutorials/fresh", "url": "https://docs.deno.com/deploy/tutorials/fresh/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Documentation Tests\"?\n\nAssistant: Deno supports both type-checking evaluating your documentation examples.\n\nHere's a detailed explanation:\n\n\n## Examples\nThe basic idea is this:\n\n````highlight notranslate ts\n/**\n * # Examples\n *\n * ```ts\n * const x = 42;\n * ```\n */\n````\n\nThe triple backticks mark the start and end of code blocks, the language is determined by the language identifier attribute which may be any of the following:\n\n- `js`\n- `javascript`\n- `mjs`\n- `cjs`\n- `jsx`\n- `ts`\n- `typescript`\n- `mts`\n- `cts`\n- `tsx`\n\nIf no language identifier is specified then the language is inferred from media type of the source document that the code block is extracted from.\n\nAnother attribute supported is `ignore`, which tells the test runner to skip type-checking the code block.\n\n````highlight notranslate ts\n/**\n * # Does not pass type check\n *\n * ```typescript ignore\n * const x: string = 42;\n * ```\n */\n````\n\nIf this example was in a file named foo.ts, running `deno test --doc foo.ts` will extract this example, and then both type-check and evaluate it as a standalone module living in the same directory as the module being documented.\n\nTo document your exports, import the module using a relative path specifier:\n\n````highlight notranslate ts\n/**\n * # Examples\n *\n * ```ts\n * import { foo } from \"./foo.ts\";\n * ```\n */\nexport function foo(): string {\n  return \"foo\";\n}\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/documentation", "title": "Documentation Tests", "description": "Deno supports both type-checking evaluating your documentation examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:52:01", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:title": "Documentation Tests", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Documentation Tests", "title": "Documentation Tests", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Documentation Tests", "language": "en", "scrapeId": "f5d2d583-028f-4e59-82db-abac68ed63db", "sourceURL": "https://docs.deno.com/runtime/reference/documentation", "url": "https://docs.deno.com/runtime/reference/documentation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Documentation Tests\"?\n\nAssistant: Here are some code examples:\n\n### Basic Example\n```yaml\n````highlight notranslate ts\n/**\n * # Examples\n *\n * ```ts\n * const x = 42;\n * ```\n */\n````\n```\n\n### Ignored Type Check Example\n```yaml\n````highlight notranslate ts\n/**\n * # Does not pass type check\n *\n * ```typescript ignore\n * const x: string = 42;\n * ```\n */\n````\n```\n\n### Exporting Example\n```yaml\n````highlight notranslate ts\n/**\n * # Examples\n *\n * ```ts\n * import { foo } from \"./foo.ts\";\n * ```\n */\nexport function foo(): string {\n  return \"foo\";\n}\n````\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/documentation", "title": "Documentation Tests", "description": "Deno supports both type-checking evaluating your documentation examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:52:01", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:title": "Documentation Tests", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Documentation Tests", "title": "Documentation Tests", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Documentation Tests", "language": "en", "scrapeId": "f5d2d583-028f-4e59-82db-abac68ed63db", "sourceURL": "https://docs.deno.com/runtime/reference/documentation", "url": "https://docs.deno.com/runtime/reference/documentation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Documentation Tests\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use triple backticks to mark the start and end of code blocks.\n• Specify the language identifier for code blocks to ensure proper type-checking.\n• Use the `ignore` attribute to skip type-checking for specific code blocks.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/documentation", "title": "Documentation Tests", "description": "Deno supports both type-checking evaluating your documentation examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:52:01", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:title": "Documentation Tests", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Documentation Tests", "title": "Documentation Tests", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Documentation Tests", "language": "en", "scrapeId": "f5d2d583-028f-4e59-82db-abac68ed63db", "sourceURL": "https://docs.deno.com/runtime/reference/documentation", "url": "https://docs.deno.com/runtime/reference/documentation/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Security and responsible disclosure\"?\n\nAssistant: This page outlines the method we use to work with the security research community to address our system security.\n\nHere's a detailed explanation:\n\n\n## Reporting a vulnerability\nPlease email you findings to security@deno.com. We strive to resolve all problems as quickly as possible, and are more than happy to play an active role in publication of writeups after the problem is resolved.\n\n## Please do the following:\n- Do not take advantage of the vulnerability or problem you have discovered. For example only download data that is necessary to demonstrate the vulnerability - do not download any more. Also do not delete, modify, or view other people's data.\n- Do not publish or reveal the problem until it has been resolved.\n- Do not use attacks on physical security, social engineering, distributed denial of service, spam or applications of third parties.\n- Do provide sufficient information to reproduce the problem, so we will be able to resolve it as quickly as possible. Usually, the IP address or the URL of the affected system and a description of the vulnerability will be sufficient, but complex vulnerabilities may require further explanation.\n\n## Our commitment\n- If you act in accordance with this policy, we will not take legal action against you in regard to your report.\n- We will handle your report with strict confidentiality, and not pass on your personal details to third parties without your permission.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/security", "title": "Security and responsible disclosure", "description": "This page outlines the method we use to work with the security research community to address our system security.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:52:09", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Security and responsible disclosure", "ogTitle": "Security and responsible disclosure", "ogLocale": "en_US", "og:type": "article", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Security and responsible disclosure", "twitter:site": "@deno_land", "og:locale": "en_US", "og:site_name": "Deno", "title": "Security and responsible disclosure", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "367ef364-83df-4fcc-9e4b-fc19d7a2a702", "sourceURL": "https://docs.deno.com/deploy/manual/security", "url": "https://docs.deno.com/deploy/manual/security/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Security and responsible disclosure\"?\n\nAssistant: Here are the recommended best practices:\n\n• Do not take advantage of the vulnerability or problem you have discovered.\n• Do not publish or reveal the problem until it has been resolved.\n• Do not use attacks on physical security, social engineering, distributed denial of service, spam or applications of third parties.\n• Provide sufficient information to reproduce the problem.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/security", "title": "Security and responsible disclosure", "description": "This page outlines the method we use to work with the security research community to address our system security.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:52:09", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Security and responsible disclosure", "ogTitle": "Security and responsible disclosure", "ogLocale": "en_US", "og:type": "article", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Security and responsible disclosure", "twitter:site": "@deno_land", "og:locale": "en_US", "og:site_name": "Deno", "title": "Security and responsible disclosure", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "367ef364-83df-4fcc-9e4b-fc19d7a2a702", "sourceURL": "https://docs.deno.com/deploy/manual/security", "url": "https://docs.deno.com/deploy/manual/security/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the node:path module in Deno, including interfaces and namespaces.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:path\";\n```\n\nThe `node:path` module provides utilities for working with file and directory paths. It can be accessed using:\n\n```highlight notranslate js\nimport path from 'node:path';\n```\n\n## Interfaces\n### Interfaces [#](https://docs.deno.com/api/node/path/#Interfaces)\n\nI\n\n[default.FormatInputPathObject](https://docs.deno.com/api/node/path/~/default.FormatInputPathObject \"default.FormatInputPathObject\")\n\nNo documentation available\n\n- [base](https://docs.deno.com/api/node/path/~/default.FormatInputPathObject#property_base)\n- [dir](https://docs.deno.com/api/node/path/~/default.FormatInputPathObject#property_dir)\n- [ext](https://docs.deno.com/api/node/path/~/default.FormatInputPathObject#property_ext)\n- [name](https://docs.deno.com/api/node/path/~/default.FormatInputPathObject#property_name)\n- [root](https://docs.deno.com/api/node/path/~/default.FormatInputPathObject#property_root)\n\nI\n\n[default.ParsedPath](https://docs.deno.com/api/node/path/~/default.ParsedPath \"default.ParsedPath\")\n\nA parsed path object generated by path.parse() or consumed by path.format().\n\n- [base](https://docs.deno.com/api/node/path/~/default.ParsedPath#property_base)\n- [dir](https://docs.deno.com/api/node/path/~/default.ParsedPath#property_dir)\n- [ext](https://docs.deno.com/api/node/path/~/default.ParsedPath#property_ext)\n- [name](https://docs.deno.com/api/node/path/~/default.ParsedPath#property_name)\n- [root](https://docs.deno.com/api/node/path/~/default.ParsedPath#property_root)\n\nI\n\n[default.PlatformPath](https://docs.deno.com/api/node/path/~/default.PlatformPath \"default.PlatformPath\")\n\nNo documentation available\n\n- [basename](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_basename_0)\n- [delimiter](https://docs.deno.com/api/node/path/~/default.PlatformPath#property_delimiter)\n- [dirname](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_dirname_0)\n- [extname](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_extname_0)\n- [format](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_format_0)\n- [isAbsolute](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_isabsolute_0)\n- [join](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_join_0)\n- [matchesGlob](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_matchesglob_0)\n- [normalize](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_normalize_0)\n- [parse](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_parse_0)\n- [posix](https://docs.deno.com/api/node/path/~/default.PlatformPath#property_posix)\n- [relative](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_relative_0)\n- [resolve](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_resolve_0)\n- [sep](https://docs.deno.com/api/node/path/~/default.PlatformPath#property_sep)\n- [toNamespacedPath](https://docs.deno.com/api/node/path/~/default.PlatformPath#method_tonamespacedpath_0)\n- [win32](https://docs.deno.com/api/node/path/~/default.PlatformPath#property_win32)\n\nI\n\n[path.FormatInputPathObject](https://docs.deno.com/api/node/path/~/path.FormatInputPathObject \"path.FormatInputPathObject\")\n\nNo documentation available\n\n- [base](https://docs.deno.com/api/node/path/~/path.FormatInputPathObject#property_base)\n- [dir](https://docs.deno.com/api/node/path/~/path.FormatInputPathObject#property_dir)\n- [ext](https://docs.deno.com/api/node/path/~/path.FormatInputPathObject#property_ext)\n- [name](https://docs.deno.com/api/node/path/~/path.FormatInputPathObject#property_name)\n- [root](https://docs.deno.com/api/node/path/~/path.FormatInputPathObject#property_root)\n\nI\n\n[path.ParsedPath](https://docs.deno.com/api/node/path/~/path.ParsedPath \"path.ParsedPath\")\n\nA parsed path object generated by path.parse() or consumed by path.format().\n\n- [base](https://docs.deno.com/api/node/path/~/path.ParsedPath#property_base)\n- [dir](https://docs.deno.com/api/node/path/~/path.ParsedPath#property_dir)\n- [ext](https://docs.deno.com/api/node/path/~/path.ParsedPath#property_ext)\n- [name](https://docs.deno.com/api/node/path/~/path.ParsedPath#property_name)\n- [root](https://docs.deno.com/api/node/path/~/path.ParsedPath#property_root)\n\nI\n\n[path.PlatformPath](https://docs.deno.com/api/node/path/~/path.PlatformPath \"path.PlatformPath\")\n\nNo documentation available\n\n- [basename](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_basename_0)\n- [delimiter](https://docs.deno.com/api/node/path/~/path.PlatformPath#property_delimiter)\n- [dirname](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_dirname_0)\n- [extname](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_extname_0)\n- [format](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_format_0)\n- [isAbsolute](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_isabsolute_0)\n- [join](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_join_0)\n- [matchesGlob](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_matchesglob_0)\n- [normalize](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_normalize_0)\n- [parse](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_parse_0)\n- [posix](https://docs.deno.com/api/node/path/~/path.PlatformPath#property_posix)\n- [relative](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_relative_0)\n- [resolve](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_resolve_0)\n- [sep](https://docs.deno.com/api/node/path/~/path.PlatformPath#property_sep)\n- [toNamespacedPath](https://docs.deno.com/api/node/path/~/path.PlatformPath#method_tonamespacedpath_0)\n- [win32](https://docs.deno.com/api/node/path/~/path.PlatformPath#property_win32)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/path", "title": "Usage in Deno", "description": "This page covers the usage of the node:path module in Deno, including interfaces and namespaces.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:52:28", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogImage": "/img/og.webp", "og:locale": "en_US", "ogTitle": "path - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogLocale": "en_US", "language": "en", "twitter:title": "path - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:title": "path - Node documentation", "og:image": "/img/og.webp", "title": "path - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "2a931469-245b-49e0-ae66-8da1c3a54353", "sourceURL": "https://docs.deno.com/api/node/path", "url": "https://docs.deno.com/api/node/path/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the node:path module\n```yaml\nimport * as mod from \"node:path\";\n```\n\n### Accessing the node:path module\n```yaml\nimport path from 'node:path';\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/path", "title": "Usage in Deno", "description": "This page covers the usage of the node:path module in Deno, including interfaces and namespaces.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:52:28", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogImage": "/img/og.webp", "og:locale": "en_US", "ogTitle": "path - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogLocale": "en_US", "language": "en", "twitter:title": "path - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:title": "path - Node documentation", "og:image": "/img/og.webp", "title": "path - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "2a931469-245b-49e0-ae66-8da1c3a54353", "sourceURL": "https://docs.deno.com/api/node/path", "url": "https://docs.deno.com/api/node/path/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Web Encoding API\"?\n\nAssistant: Documentation for the Deno Web Encoding API, including functions and interfaces for encoding and decoding text.\n\nHere's a detailed explanation:\n\n\n## Functions\nThe following functions are available for encoding and decoding:\n\n- **[atob](https://docs.deno.com/api/web/~/atob)**: Decodes a string of data which has been encoded using base-64 encoding.\n- **[btoa](https://docs.deno.com/api/web/~/btoa)**: Creates a base-64 ASCII encoded string from the input string.\n\n## Interfaces\nThe following interfaces are available:\n\n- **[TextDecodeOptions](https://docs.deno.com/api/web/~/TextDecodeOptions)**: No documentation available.\n  - **[stream](https://docs.deno.com/api/web/~/TextDecodeOptions#property_stream)**\n\n- **[TextDecoder](https://docs.deno.com/api/web/~/TextDecoder)**: Represents a decoder for a specific text encoding, allowing you to convert binary data into a string given the encoding.\n  - **[decode](https://docs.deno.com/api/web/~/TextDecoder#method_decode_0)**\n  - **[prototype](https://docs.deno.com/api/web/~/TextDecoder#property_prototype)**\n\n- **[TextDecoderCommon](https://docs.deno.com/api/web/~/TextDecoderCommon)**: No documentation available.\n  - **[encoding](https://docs.deno.com/api/web/~/TextDecoderCommon#property_encoding)**\n  - **[fatal](https://docs.deno.com/api/web/~/TextDecoderCommon#property_fatal)**\n  - **[ignoreBOM](https://docs.deno.com/api/web/~/TextDecoderCommon#property_ignorebom)**\n\n- **[TextDecoderOptions](https://docs.deno.com/api/web/~/TextDecoderOptions)**: No documentation available.\n  - **[fatal](https://docs.deno.com/api/web/~/TextDecoderOptions#property_fatal)**\n  - **[ignoreBOM](https://docs.deno.com/api/web/~/TextDecoderOptions#property_ignorebom)**\n\n- **[TextDecoderStream](https://docs.deno.com/api/web/~/TextDecoderStream)**: No documentation available.\n  - **[prototype](https://docs.deno.com/api/web/~/TextDecoderStream#property_prototype)**\n  - **[readable](https://docs.deno.com/api/web/~/TextDecoderStream#property_readable)**\n  - **[writable](https://docs.deno.com/api/web/~/TextDecoderStream#property_writable)**\n\n- **[TextEncoder](https://docs.deno.com/api/web/~/TextEncoder)**: No documentation available.\n  - **[encode](https://docs.deno.com/api/web/~/TextEncoder#method_encode_0)**\n  - **[encodeInto](https://docs.deno.com/api/web/~/TextEncoder#method_encodeinto_0)**\n  - **[prototype](https://docs.deno.com/api/web/~/TextEncoder#property_prototype)**\n\n- **[TextEncoderCommon](https://docs.deno.com/api/web/~/TextEncoderCommon)**: No documentation available.\n  - **[encoding](https://docs.deno.com/api/web/~/TextEncoderCommon#property_encoding)**\n\n- **[TextEncoderEncodeIntoResult](https://docs.deno.com/api/web/~/TextEncoderEncodeIntoResult)**: No documentation available.\n  - **[read](https://docs.deno.com/api/web/~/TextEncoderEncodeIntoResult#property_read)**\n  - **[written](https://docs.deno.com/api/web/~/TextEncoderEncodeIntoResult#property_written)**\n\n- **[TextEncoderStream](https://docs.deno.com/api/web/~/TextEncoderStream)**: No documentation available.\n  - **[prototype](https://docs.deno.com/api/web/~/TextEncoderStream#property_prototype)**\n  - **[readable](https://docs.deno.com/api/web/~/TextEncoderStream#property_readable)**\n  - **[writable](https://docs.deno.com/api/web/~/TextEncoderStream#property_writable)**\n", "metadata": {"source_url": "https://docs.deno.com/api/web/encoding", "title": "Deno Web Encoding API", "description": "Documentation for the Deno Web Encoding API, including functions and interfaces for encoding and decoding text.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:52:42", "type": "overview", "page_metadata": {"language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Encoding - Web documentation", "twitter:title": "Encoding - Web documentation", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Encoding - Web documentation", "og:type": "article", "twitter:site": "@deno_land", "title": "Encoding - Web documentation", "scrapeId": "0aaedc6e-fcb1-4b32-8b5a-c27d52336879", "sourceURL": "https://docs.deno.com/api/web/encoding", "url": "https://docs.deno.com/api/web/encoding", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the node:string_decoder module in Deno for decoding Buffer objects into strings while preserving multi-byte UTF-8 and UTF-16 characters.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\nThe `node:string_decoder` module provides an API for decoding `Buffer` objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters. It can be accessed using:\n\n```highlight notranslate js\nimport { StringDecoder } from 'node:string_decoder';\n```\n\nThe following example shows the basic use of the `StringDecoder` class.\n\n```highlight notranslate js\nimport { StringDecoder } from 'node:string_decoder';\nconst decoder = new StringDecoder('utf8');\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent)); // Prints: ¢\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro)); // Prints: €\n```\n\nWhen a `Buffer` instance is written to the `StringDecoder` instance, an internal buffer is used to ensure that the decoded string does not contain any incomplete multibyte characters. These are held in the buffer until the next call to `stringDecoder.write()` or until `stringDecoder.end()` is called.\n\nIn the following example, the three UTF-8 encoded bytes of the European Euro symbol ( `€`) are written over three separate operations:\n\n```highlight notranslate js\nimport { StringDecoder } from 'node:string_decoder';\nconst decoder = new StringDecoder('utf8');\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC]))); // Prints: €\n```\n\n## Classes\nThe `node:string_decoder` module provides an API for decoding `Buffer` objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters. It can be accessed using:\n\n- [end](https://docs.deno.com/api/node/string_decoder/~/StringDecoder#method_end_0)\n- [write](https://docs.deno.com/api/node/string_decoder/~/StringDecoder#method_write_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/string_decoder", "title": "Usage in Deno", "description": "This page covers the usage of the node:string_decoder module in Deno for decoding Buffer objects into strings while preserving multi-byte UTF-8 and UTF-16 characters.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:52:58", "type": "overview", "page_metadata": {"ogTitle": "string_decoder - Node documentation", "og:image": "/img/og.webp", "og:locale": "en_US", "title": "string_decoder - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "string_decoder - Node documentation", "og:title": "string_decoder - Node documentation", "scrapeId": "3952ca9d-8adf-44ed-a002-817ca02bf4cb", "sourceURL": "https://docs.deno.com/api/node/string_decoder", "url": "https://docs.deno.com/api/node/string_decoder/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Basic Usage of StringDecoder\n```yaml\nimport { StringDecoder } from 'node:string_decoder';\nconst decoder = new StringDecoder('utf8');\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent)); // Prints: ¢\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro)); // Prints: €\n\n```\n\n### Handling Incomplete Multibyte Characters\n```yaml\nimport { StringDecoder } from 'node:string_decoder';\nconst decoder = new StringDecoder('utf8');\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC]))); // Prints: €\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/string_decoder", "title": "Usage in Deno", "description": "This page covers the usage of the node:string_decoder module in Deno for decoding Buffer objects into strings while preserving multi-byte UTF-8 and UTF-16 characters.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:52:58", "type": "code_examples", "page_metadata": {"ogTitle": "string_decoder - Node documentation", "og:image": "/img/og.webp", "og:locale": "en_US", "title": "string_decoder - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "string_decoder - Node documentation", "og:title": "string_decoder - Node documentation", "scrapeId": "3952ca9d-8adf-44ed-a002-817ca02bf4cb", "sourceURL": "https://docs.deno.com/api/node/string_decoder", "url": "https://docs.deno.com/api/node/string_decoder/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to handle incomplete multibyte characters by using the internal buffer of StringDecoder.\n• Use the end() method to finalize the decoding process when all bytes have been written.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/string_decoder", "title": "Usage in Deno", "description": "This page covers the usage of the node:string_decoder module in Deno for decoding Buffer objects into strings while preserving multi-byte UTF-8 and UTF-16 characters.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:52:58", "type": "best_practices", "page_metadata": {"ogTitle": "string_decoder - Node documentation", "og:image": "/img/og.webp", "og:locale": "en_US", "title": "string_decoder - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "string_decoder - Node documentation", "og:title": "string_decoder - Node documentation", "scrapeId": "3952ca9d-8adf-44ed-a002-817ca02bf4cb", "sourceURL": "https://docs.deno.com/api/node/string_decoder", "url": "https://docs.deno.com/api/node/string_decoder/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deployment events\"?\n\nAssistant: During the lifetime of a deployment execution, several events are recorded into its execution logs. Using the deployment logs API, these event logs can be used to understand and monitor the behavior of your deployments.\n\nHere's a detailed explanation:\n\n\n## Boot\nThe `boot` event is emitted after the deployment has successfully booted and is running. It logs the time elapsed since receiving the initial request that prompted the deployment to boot, until the deployment is ready to start handling it. Alongside the start time as a whole, the event also logs the part of it that was spent executing the deployment's Javascript code (referred to as the \"user time\").\n\n## Memory Limit\nThe `memory-limit` event is emitted when the deployment is terminated for exceeding the memory limit allowed per deployment execution. In some cases, it is followed by an event URN to cross-reference it with any observability artifact generated as a result:\n\nAll the requests that where in-flight when the deployment was terminated receive a 502 response with the code \"MEMORY_LIMIT\".\n\n## CPU Time Limit\nThe `time-limit` event is emitted when the deployment is terminated for exceeding the CPU-time limit allowed per request. The event URN included in the log can be used to cross-reference it with any observability artifact generated as a result.\n\nAll the requests that where in-flight when the deployment was terminated receive a 502 response with the code \"TIME_LIMIT\".\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/manual/events", "title": "Deployment events", "description": "During the lifetime of a deployment execution, several events are recorded into its execution logs. Using the deployment logs API, these event logs can be used to understand and monitor the behavior of your deployments.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:53:05", "type": "overview", "page_metadata": {"ogTitle": "Deployment events", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Deployment events", "twitter:title": "Deployment events", "title": "Deployment events", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "og:type": "article", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:locale": "en_US", "scrapeId": "193aa548-0874-4e22-a5fd-484813aff158", "sourceURL": "https://docs.deno.com/subhosting/manual/events", "url": "https://docs.deno.com/subhosting/manual/events/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deployment events\"?\n\nAssistant: Here are some code examples:\n\n### Boot Event Log\n```yaml\n\"isolate start time: 96.67 ms (user time: 6.13 ms)\"\n```\n\n### Memory Limit Event Log\n```yaml\n\"Memory limit exceeded, terminated\"\n```\n\n### Memory Limit Event Log with URN\n```yaml\n\"Memory limit exceeded, terminated (urn:dd-hard-memory-limit:deno:pcx8pcbpc34b:048730b1-0e1f-4df7-8f92-e64233415322)\"\n```\n\n### CPU Time Limit Event Log\n```yaml\n\"CPU time limit exceeded, see https://deno.com/deploy/docs/pricing-and-limit (urn:dd-time-limit:deno:pcx8pcbpc34b:b8c729c0-e17a-4ce1-a6df-4267cbeb6d5c)\"\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/manual/events", "title": "Deployment events", "description": "During the lifetime of a deployment execution, several events are recorded into its execution logs. Using the deployment logs API, these event logs can be used to understand and monitor the behavior of your deployments.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:53:05", "type": "code_examples", "page_metadata": {"ogTitle": "Deployment events", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Deployment events", "twitter:title": "Deployment events", "title": "Deployment events", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "og:type": "article", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:locale": "en_US", "scrapeId": "193aa548-0874-4e22-a5fd-484813aff158", "sourceURL": "https://docs.deno.com/subhosting/manual/events", "url": "https://docs.deno.com/subhosting/manual/events/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deployment events\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the deployment logs API to monitor the behavior of your deployments.\n• Cross-reference event URNs with observability artifacts for better insights.\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/manual/events", "title": "Deployment events", "description": "During the lifetime of a deployment execution, several events are recorded into its execution logs. Using the deployment logs API, these event logs can be used to understand and monitor the behavior of your deployments.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:53:05", "type": "best_practices", "page_metadata": {"ogTitle": "Deployment events", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Deployment events", "twitter:title": "Deployment events", "title": "Deployment events", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "og:type": "article", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:locale": "en_US", "scrapeId": "193aa548-0874-4e22-a5fd-484813aff158", "sourceURL": "https://docs.deno.com/subhosting/manual/events", "url": "https://docs.deno.com/subhosting/manual/events/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the `node:tty` module in Deno, including classes, functions, and type aliases.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\nThe `node:tty` module provides the `tty.ReadStream` and `tty.WriteStream` classes. In most cases, it will not be necessary or possible to use this module directly. However, it can be accessed using:\n\n```highlight notranslate js\nimport tty from 'node:tty';\n```\n\nWhen Node.js detects that it is being run with a text terminal (\"TTY\") attached, `process.stdin` will, by default, be initialized as an instance of `tty.ReadStream` and both `process.stdout` and `process.stderr` will, by default, be instances of `tty.WriteStream`. The preferred method of determining whether Node.js is being run within a TTY context is to check that the value of the `process.stdout.isTTY` property is `true`:\n\n```highlight notranslate console\n$ node -p -e \"Boolean(process.stdout.isTTY)\"\ntrue\n$ node -p -e \"Boolean(process.stdout.isTTY)\" | cat\nfalse\n```\n\nIn most cases, there should be little to no reason for an application to manually create instances of the `tty.ReadStream` and `tty.WriteStream` classes.\n\n## Classes\n### Classes\n\n#### [ReadStream](https://docs.deno.com/api/node/tty/~/ReadStream \"ReadStream\")\nRepresents the readable side of a TTY. In normal circumstances `process.stdin` will be the only `tty.ReadStream` instance in a Node.js process and there should be no reason to create additional instances.\n\n- [isRaw](https://docs.deno.com/api/node/tty/~/ReadStream#property_israw)\n- [isTTY](https://docs.deno.com/api/node/tty/~/ReadStream#property_istty)\n- [setRawMode](https://docs.deno.com/api/node/tty/~/ReadStream#method_setrawmode_0)\n\n#### [WriteStream](https://docs.deno.com/api/node/tty/~/WriteStream \"WriteStream\")\nRepresents the writable side of a TTY. In normal circumstances, `process.stdout` and `process.stderr` will be the only `tty.WriteStream` instances created for a Node.js process and there should be no reason to create additional instances.\n\n- [addListener](https://docs.deno.com/api/node/tty/~/WriteStream#method_addlistener_0)\n- [clearLine](https://docs.deno.com/api/node/tty/~/WriteStream#method_clearline_0)\n- [clearScreenDown](https://docs.deno.com/api/node/tty/~/WriteStream#method_clearscreendown_0)\n- [columns](https://docs.deno.com/api/node/tty/~/WriteStream#property_columns)\n- [cursorTo](https://docs.deno.com/api/node/tty/~/WriteStream#method_cursorto_0)\n- [emit](https://docs.deno.com/api/node/tty/~/WriteStream#method_emit_0)\n- [getColorDepth](https://docs.deno.com/api/node/tty/~/WriteStream#method_getcolordepth_0)\n- [getWindowSize](https://docs.deno.com/api/node/tty/~/WriteStream#method_getwindowsize_0)\n- [hasColors](https://docs.deno.com/api/node/tty/~/WriteStream#method_hascolors_0)\n- [isTTY](https://docs.deno.com/api/node/tty/~/WriteStream#property_istty)\n- [moveCursor](https://docs.deno.com/api/node/tty/~/WriteStream#method_movecursor_0)\n- [on](https://docs.deno.com/api/node/tty/~/WriteStream#method_on_0)\n- [once](https://docs.deno.com/api/node/tty/~/WriteStream#method_once_0)\n- [prependListener](https://docs.deno.com/api/node/tty/~/WriteStream#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/tty/~/WriteStream#method_prependoncelistener_0)\n- [rows](https://docs.deno.com/api/node/tty/~/WriteStream#property_rows)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/tty", "title": "Usage in Deno", "description": "This page covers the usage of the `node:tty` module in Deno, including classes, functions, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:19", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "tty - Node documentation", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "title": "tty - Node documentation", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "tty - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:title": "tty - Node documentation", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "scrapeId": "c76d3ba7-d2a9-4508-936d-0346bcae89d9", "sourceURL": "https://docs.deno.com/api/node/tty", "url": "https://docs.deno.com/api/node/tty/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the tty module\n```yaml\nimport * as mod from \"node:tty\";\n```\n\n### Accessing tty module\n```yaml\nimport tty from 'node:tty';\n```\n\n### Checking if process is TTY\n```yaml\n$ node -p -e \"Boolean(process.stdout.isTTY)\"\ntrue\n$ node -p -e \"Boolean(process.stdout.isTTY)\" | cat\nfalse\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/tty", "title": "Usage in Deno", "description": "This page covers the usage of the `node:tty` module in Deno, including classes, functions, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:19", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "tty - Node documentation", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "title": "tty - Node documentation", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "tty - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:title": "tty - Node documentation", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "scrapeId": "c76d3ba7-d2a9-4508-936d-0346bcae89d9", "sourceURL": "https://docs.deno.com/api/node/tty", "url": "https://docs.deno.com/api/node/tty/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• In most cases, there should be little to no reason for an application to manually create instances of the `tty.ReadStream` and `tty.WriteStream` classes.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/tty", "title": "Usage in Deno", "description": "This page covers the usage of the `node:tty` module in Deno, including classes, functions, and type aliases.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:19", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "tty - Node documentation", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "title": "tty - Node documentation", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "tty - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:title": "tty - Node documentation", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "scrapeId": "c76d3ba7-d2a9-4508-936d-0346bcae89d9", "sourceURL": "https://docs.deno.com/api/node/tty", "url": "https://docs.deno.com/api/node/tty/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Canvas API\"?\n\nAssistant: Documentation for the Canvas API in Deno, covering functions, interfaces, and type aliases.\n\nHere's a detailed explanation:\n\n\n## Functions\nCreate a new `ImageBitmap` object from a given source.\n\n## Interfaces\nThe `ImageBitmap` interface represents a bitmap image which can be drawn to a canvas.\n\n- `close`\n- `height`\n- `prototype`\n- `width`\n\nThe options of `createImageBitmap` include:\n\n- `colorSpaceConversion`\n- `imageOrientation`\n- `premultiplyAlpha`\n- `resizeHeight`\n- `resizeQuality`\n- `resizeWidth`\n\n## Type Aliases\nSpecifies whether the image should be decoded using color space conversion.\nEither none or default (default). The value default indicates that implementation-specific behavior is used.\n\nThe `ImageBitmapSource` type represents an image data source that can be used to create an `ImageBitmap`.\n\nSpecifies how the bitmap image should be oriented.\n\nSpecifies whether the bitmap's color channels should be premultiplied by the alpha channel.\n\nSpecifies the algorithm to be used for resizing the input to match the output dimensions. One of `pixelated`, `low` (default), `medium`, or `high`.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/canvas", "title": "Canvas API", "description": "Documentation for the Canvas API in Deno, covering functions, interfaces, and type aliases.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 00:53:24", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "title": "Canvas - Web documentation", "ogTitle": "Canvas - Web documentation", "og:title": "Canvas - Web documentation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Canvas - Web documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogLocale": "en_US", "scrapeId": "95fca7d3-b53a-4e3e-b96b-af0fe96346bd", "sourceURL": "https://docs.deno.com/api/web/canvas", "url": "https://docs.deno.com/api/web/canvas", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Interfaces and Type Aliases\"?\n\nAssistant: Documentation for various interfaces and type aliases related to file handling in Deno.\n\nHere's a detailed explanation:\n\n\n## Interfaces\n### Blob\nA file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.\n\n- [arrayBuffer](https://docs.deno.com/api/web/~/Blob#method_arraybuffer_0)\n- [bytes](https://docs.deno.com/api/web/~/Blob#method_bytes_0)\n- [prototype](https://docs.deno.com/api/web/~/Blob#property_prototype)\n- [size](https://docs.deno.com/api/web/~/Blob#property_size)\n- [slice](https://docs.deno.com/api/web/~/Blob#method_slice_0)\n- [stream](https://docs.deno.com/api/web/~/Blob#method_stream_0)\n- [text](https://docs.deno.com/api/web/~/Blob#method_text_0)\n- [type](https://docs.deno.com/api/web/~/Blob#property_type)\n\n### BlobPropertyBag\nNo documentation available\n\n- [endings](https://docs.deno.com/api/web/~/BlobPropertyBag#property_endings)\n- [type](https://docs.deno.com/api/web/~/BlobPropertyBag#property_type)\n\n### File\nProvides information about files and allows JavaScript in a web page to access their content.\n\n- [lastModified](https://docs.deno.com/api/web/~/File#property_lastmodified)\n- [name](https://docs.deno.com/api/web/~/File#property_name)\n- [prototype](https://docs.deno.com/api/web/~/File#property_prototype)\n- [webkitRelativePath](https://docs.deno.com/api/web/~/File#property_webkitrelativepath)\n\n### FilePropertyBag\nNo documentation available\n\n- [lastModified](https://docs.deno.com/api/web/~/FilePropertyBag#property_lastmodified)\n\n### FileReader\nLets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.\n\n- [DONE](https://docs.deno.com/api/web/~/FileReader#property_done)\n- [EMPTY](https://docs.deno.com/api/web/~/FileReader#property_empty)\n- [LOADING](https://docs.deno.com/api/web/~/FileReader#property_loading)\n- [abort](https://docs.deno.com/api/web/~/FileReader#method_abort_0)\n- [addEventListener](https://docs.deno.com/api/web/~/FileReader#method_addeventlistener_0)\n- [error](https://docs.deno.com/api/web/~/FileReader#property_error)\n- [onabort](https://docs.deno.com/api/web/~/FileReader#property_onabort)\n- [onerror](https://docs.deno.com/api/web/~/FileReader#property_onerror)\n- [onload](https://docs.deno.com/api/web/~/FileReader#property_onload)\n- [onloadend](https://docs.deno.com/api/web/~/FileReader#property_onloadend)\n- [onloadstart](https://docs.deno.com/api/web/~/FileReader#property_onloadstart)\n- [onprogress](https://docs.deno.com/api/web/~/FileReader#property_onprogress)\n- [prototype](https://docs.deno.com/api/web/~/FileReader#property_prototype)\n- [readAsArrayBuffer](https://docs.deno.com/api/web/~/FileReader#method_readasarraybuffer_0)\n- [readAsBinaryString](https://docs.deno.com/api/web/~/FileReader#method_readasbinarystring_0)\n- [readAsDataURL](https://docs.deno.com/api/web/~/FileReader#method_readasdataurl_0)\n- [readAsText](https://docs.deno.com/api/web/~/FileReader#method_readastext_0)\n- [readyState](https://docs.deno.com/api/web/~/FileReader#property_readystate)\n- [removeEventListener](https://docs.deno.com/api/web/~/FileReader#method_removeeventlistener_0)\n- [result](https://docs.deno.com/api/web/~/FileReader#property_result)\n\n### FileReaderEventMap\nNo documentation available\n\n- [abort](https://docs.deno.com/api/web/~/FileReaderEventMap#property_abort)\n- [error](https://docs.deno.com/api/web/~/FileReaderEventMap#property_error)\n- [load](https://docs.deno.com/api/web/~/FileReaderEventMap#property_load)\n- [loadend](https://docs.deno.com/api/web/~/FileReaderEventMap#property_loadend)\n- [loadstart](https://docs.deno.com/api/web/~/FileReaderEventMap#property_loadstart)\n- [progress](https://docs.deno.com/api/web/~/FileReaderEventMap#property_progress)\n", "metadata": {"source_url": "https://docs.deno.com/api/web/file", "title": "Interfaces and Type Aliases", "description": "Documentation for various interfaces and type aliases related to file handling in Deno.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:53:38", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "og:type": "article", "twitter:title": "File - Web documentation", "title": "File - Web documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "File - Web documentation", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "File - Web documentation", "twitter:card": "summary_large_image", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "2aacae1b-05be-4483-a8c9-72604892ceb1", "sourceURL": "https://docs.deno.com/api/web/file", "url": "https://docs.deno.com/api/web/file", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Testing API\"?\n\nAssistant: Documentation for the Deno testing API, including functions, interfaces, and variables for benchmarking and testing.\n\nHere's a detailed explanation:\n\n\n## Functions\nDeno.bench\n\nRegister a benchmark test which will be run when `deno bench` is used on the command line and the containing module looks like a bench module.\n\n## Interfaces\nDeno.BenchContext\n\nContext that is passed to a benchmarked function. The instance is shared between iterations of the benchmark. Its methods can be used for example to override of the measured portion of the function.\n\n- end\n- name\n- origin\n- start\n\nDeno.BenchDefinition\n\nThe interface for defining a benchmark test using `Deno.bench`.\n\n- baseline\n- fn\n- group\n- ignore\n- n\n- name\n- only\n- permissions\n- sanitizeExit\n- warmup\n\nDeno.DenoTest\n\nNo documentation available\n\n- ignore\n- only\n\nDeno.TestContext\n\nContext that is passed to a testing function, which can be used to either gain information about the current test, or register additional test steps within the current test.\n\n- name\n- origin\n- parent\n- step\n\nDeno.TestDefinition\n\nNo documentation available\n\n- fn\n- ignore\n- name\n- only\n- permissions\n- sanitizeExit\n- sanitizeOps\n- sanitizeResources\n\nDeno.TestStepDefinition\n\nNo documentation available\n\n- fn\n- ignore\n- name\n- sanitizeExit\n- sanitizeOps\n- sanitizeResources\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/testing", "title": "Deno Testing API", "description": "Documentation for the Deno testing API, including functions, interfaces, and variables for benchmarking and testing.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:44", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "title": "Testing - Deno documentation", "language": "en", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "ogLocale": "en_US", "og:title": "Testing - Deno documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Testing - Deno documentation", "og:image": "/img/og.webp", "ogTitle": "Testing - Deno documentation", "scrapeId": "d9228667-919b-4e40-91f1-52e300a893d9", "sourceURL": "https://docs.deno.com/api/deno/testing", "url": "https://docs.deno.com/api/deno/testing", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Testing API\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `Deno.bench` to register benchmark tests for performance measurement.\n• Use `Deno.test` to register tests for unit testing.\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/testing", "title": "Deno Testing API", "description": "Documentation for the Deno testing API, including functions, interfaces, and variables for benchmarking and testing.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:44", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "title": "Testing - Deno documentation", "language": "en", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "ogLocale": "en_US", "og:title": "Testing - Deno documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Testing - Deno documentation", "og:image": "/img/og.webp", "ogTitle": "Testing - Deno documentation", "scrapeId": "d9228667-919b-4e40-91f1-52e300a893d9", "sourceURL": "https://docs.deno.com/api/deno/testing", "url": "https://docs.deno.com/api/deno/testing", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the HTTPS module in Deno, including classes, functions, interfaces, type aliases, and variables.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:https\";\n```\n\n## Classes\n### Classes\n\n- [Agent](https://docs.deno.com/api/node/https/~/Agent \"Agent\")\n\nAn `Agent` object for HTTPS similar to `http.Agent`. See [request](https://docs.deno.com/api/node/https/~/request) for more information.\n\n- [options](https://docs.deno.com/api/node/https/~/Agent#property_options) \n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/https", "title": "Usage in Deno", "description": "This page covers the usage of the HTTPS module in Deno, including classes, functions, interfaces, type aliases, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:49", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "language": "en", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "title": "https - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "https - Node documentation", "ogTitle": "https - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "https - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "54b3d3fc-9abf-4ea2-853f-a7ec5bd41448", "sourceURL": "https://docs.deno.com/api/node/https", "url": "https://docs.deno.com/api/node/https/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing HTTPS Module\n```yaml\nimport * as mod from \"node:https\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/https", "title": "Usage in Deno", "description": "This page covers the usage of the HTTPS module in Deno, including classes, functions, interfaces, type aliases, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:49", "type": "code_examples", "page_metadata": {"twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "language": "en", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "title": "https - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "https - Node documentation", "ogTitle": "https - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "https - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "54b3d3fc-9abf-4ea2-853f-a7ec5bd41448", "sourceURL": "https://docs.deno.com/api/node/https", "url": "https://docs.deno.com/api/node/https/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `Agent` object for managing connections in HTTPS similar to how you would in HTTP.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/https", "title": "Usage in Deno", "description": "This page covers the usage of the HTTPS module in Deno, including classes, functions, interfaces, type aliases, and variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:49", "type": "best_practices", "page_metadata": {"twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "language": "en", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "title": "https - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "https - Node documentation", "ogTitle": "https - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "https - Node documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "54b3d3fc-9abf-4ea2-853f-a7ec5bd41448", "sourceURL": "https://docs.deno.com/api/node/https", "url": "https://docs.deno.com/api/node/https/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the async_hooks module in Deno, including classes, functions, and interfaces available in the module.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\nWe strongly discourage the use of the `async_hooks` API. Other APIs that can cover most of its use cases include:\n\n- [`AsyncLocalStorage`](https://nodejs.org/docs/latest-v22.x/api/async_context.html#class-asynclocalstorage) tracks async context\n- [`process.getActiveResourcesInfo()`](https://nodejs.org/docs/latest-v22.x/api/process.html#processgetactiveresourcesinfo) tracks active resources\n\nThe `node:async_hooks` module provides an API to track asynchronous resources. It can be accessed using:\n\n```highlight notranslate js\nimport async_hooks from 'node:async_hooks';\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/async_hooks", "title": "Usage in Deno", "description": "This page covers the usage of the async_hooks module in Deno, including classes, functions, and interfaces available in the module.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:53:53", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "twitter:title": "async_hooks - Node documentation", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "title": "async_hooks - Node documentation", "language": "en", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "async_hooks - Node documentation", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "async_hooks - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "33dbdeea-7f98-4354-8952-6909271881ef", "sourceURL": "https://docs.deno.com/api/node/async_hooks", "url": "https://docs.deno.com/api/node/async_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing async_hooks\n```yaml\nimport * as mod from \"node:async_hooks\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/async_hooks", "title": "Usage in Deno", "description": "This page covers the usage of the async_hooks module in Deno, including classes, functions, and interfaces available in the module.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:53:53", "type": "code_examples", "page_metadata": {"ogImage": "/img/og.webp", "twitter:title": "async_hooks - Node documentation", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "title": "async_hooks - Node documentation", "language": "en", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "async_hooks - Node documentation", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "async_hooks - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "33dbdeea-7f98-4354-8952-6909271881ef", "sourceURL": "https://docs.deno.com/api/node/async_hooks", "url": "https://docs.deno.com/api/node/async_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• We strongly discourage the use of the `async_hooks` API.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/async_hooks", "title": "Usage in Deno", "description": "This page covers the usage of the async_hooks module in Deno, including classes, functions, and interfaces available in the module.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:53:53", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "twitter:title": "async_hooks - Node documentation", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "title": "async_hooks - Node documentation", "language": "en", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "async_hooks - Node documentation", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "async_hooks - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "33dbdeea-7f98-4354-8952-6909271881ef", "sourceURL": "https://docs.deno.com/api/node/async_hooks", "url": "https://docs.deno.com/api/node/async_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Contributing Examples to Deno\"?\n\nAssistant: This page provides information on how to contribute examples to the Deno documentation and how to receive stickers as a token of appreciation.\n\nHere's a detailed explanation:\n\n\n## Contributing an example\nDeno by Example is a collection of examples that demonstrate how to use Deno and its APIs. If you contribute an example, we'll send you a free pack of stickers!\n\n![Deno stickers laid out on a table](https://docs.deno.com/runtime/contributing/images/stickers.jpg)\n\nIf you have a Deno example that you would like to share with the community, you can contribute it to the Deno docs repository or make an issue if there's an example you'd like to see. If your example is merged, we'll credit you as the author and send you some awesome special edition Deno stickers so that you can show off your contributor status as a token of our appreciation.\n\n## Getting your stickers\nIf you've contributed an example, drop us an email at docs@deno.com and let us know so we can get your stickers out to you!\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/examples", "title": "Contributing Examples to Deno", "description": "This page provides information on how to contribute examples to the Deno documentation and how to receive stickers as a token of appreciation.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:59", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Contributing an example", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "twitter:title": "Contributing an example", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:site_name": "Deno", "title": "Contributing an example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Contributing an example", "og:locale": "en_US", "ogImage": "/img/og.webp", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "scrapeId": "4911ee81-a266-4ce9-9de5-aee0b38416cd", "sourceURL": "https://docs.deno.com/runtime/contributing/examples", "url": "https://docs.deno.com/runtime/contributing/examples/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Contributing Examples to Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Contribute your Deno examples to the Deno docs repository for community sharing.\n• Email docs@deno.com to request your stickers after contributing an example.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/examples", "title": "Contributing Examples to Deno", "description": "This page provides information on how to contribute examples to the Deno documentation and how to receive stickers as a token of appreciation.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:53:59", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Contributing an example", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "twitter:title": "Contributing an example", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:site_name": "Deno", "title": "Contributing an example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Contributing an example", "og:locale": "en_US", "ogImage": "/img/og.webp", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "scrapeId": "4911ee81-a266-4ce9-9de5-aee0b38416cd", "sourceURL": "https://docs.deno.com/runtime/contributing/examples", "url": "https://docs.deno.com/runtime/contributing/examples/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno IO API\"?\n\nAssistant: Documentation for Deno IO related APIs including Enums, Functions, Interfaces, and Variables.\n\nHere's a detailed explanation:\n\n\n## Enums\nA enum which defines the seek mode for IO related APIs that support seeking.\n\n## Functions\n- `Deno.consoleSize`: Gets the size of the console as columns/rows.\n- `Deno.inspect`: Converts the input into a string that has the same format as printed by `console.log()`.\n\n## Interfaces\n- `Deno.InspectOptions`: Option which can be specified when performing `Deno.inspect`.\n  - [breakLength](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_breaklength)\n  - [colors](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_colors)\n  - [compact](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_compact)\n  - [depth](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_depth)\n  - [escapeSequences](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_escapesequences)\n  - [getters](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_getters)\n  - [iterableLimit](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_iterablelimit)\n  - [showHidden](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_showhidden)\n  - [showProxy](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_showproxy)\n  - [sorted](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_sorted)\n  - [strAbbreviateSize](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_strabbreviatesize)\n  - [trailingComma](https://docs.deno.com/api/deno/~/Deno.InspectOptions#property_trailingcomma)\n- `Deno.SetRawOptions`: No documentation available.\n  - [cbreak](https://docs.deno.com/api/deno/~/Deno.SetRawOptions#property_cbreak)\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/io", "title": "Deno IO API", "description": "Documentation for Deno IO related APIs including Enums, Functions, Interfaces, and Variables.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 00:54:14", "type": "overview", "page_metadata": {"title": "I/O - Deno documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "I/O - Deno documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "language": "en", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "ogTitle": "I/O - Deno documentation", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "og:title": "I/O - Deno documentation", "scrapeId": "cd60184b-17ea-4185-845a-acb1e27edff3", "sourceURL": "https://docs.deno.com/api/deno/io", "url": "https://docs.deno.com/api/deno/io", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno IO API\"?\n\nAssistant: Here are some code examples:\n\n### Deno.stderr\n```yaml\nA reference to `stderr` which can be used to write directly to `stderr`. It implements the Deno specific [`Writer`](https://jsr.io/@std/io/doc/types/~/Writer), [`WriterSync`](https://jsr.io/@std/io/doc/types/~/WriterSync), and [`Closer`](https://jsr.io/@std/io/doc/types/~/Closer) interfaces as well as provides a `WritableStream` interface.\n- [close](https://docs.deno.com/api/deno/~/Deno.stderr#method_close_0)\n- [isTerminal](https://docs.deno.com/api/deno/~/Deno.stderr#method_isterminal_0)\n- [writable](https://docs.deno.com/api/deno/~/Deno.stderr#property_writable)\n- [write](https://docs.deno.com/api/deno/~/Deno.stderr#method_write_0)\n- [writeSync](https://docs.deno.com/api/deno/~/Deno.stderr#method_writesync_0)\n```\n\n### Deno.stdin\n```yaml\nA reference to `stdin` which can be used to read directly from `stdin`.\n- [close](https://docs.deno.com/api/deno/~/Deno.stdin#method_close_0)\n- [isTerminal](https://docs.deno.com/api/deno/~/Deno.stdin#method_isterminal_0)\n- [read](https://docs.deno.com/api/deno/~/Deno.stdin#method_read_0)\n- [readSync](https://docs.deno.com/api/deno/~/Deno.stdin#method_readsync_0)\n- [readable](https://docs.deno.com/api/deno/~/Deno.stdin#property_readable)\n- [setRaw](https://docs.deno.com/api/deno/~/Deno.stdin#method_setraw_0)\n```\n\n### Deno.stdout\n```yaml\nA reference to `stdout` which can be used to write directly to `stdout`. It implements the Deno specific [`Writer`](https://jsr.io/@std/io/doc/types/~/Writer), [`WriterSync`](https://jsr.io/@std/io/doc/types/~/WriterSync), and [`Closer`](https://jsr.io/@std/io/doc/types/~/Closer) interfaces as well as provides a `WritableStream` interface.\n- [close](https://docs.deno.com/api/deno/~/Deno.stdout#method_close_0)\n- [isTerminal](https://docs.deno.com/api/deno/~/Deno.stdout#method_isterminal_0)\n- [writable](https://docs.deno.com/api/deno/~/Deno.stdout#property_writable)\n- [write](https://docs.deno.com/api/deno/~/Deno.stdout#method_write_0)\n- [writeSync](https://docs.deno.com/api/deno/~/Deno.stdout#method_writesync_0)\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/io", "title": "Deno IO API", "description": "Documentation for Deno IO related APIs including Enums, Functions, Interfaces, and Variables.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 00:54:14", "type": "code_examples", "page_metadata": {"title": "I/O - Deno documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "I/O - Deno documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "language": "en", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "ogTitle": "I/O - Deno documentation", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "og:title": "I/O - Deno documentation", "scrapeId": "cd60184b-17ea-4185-845a-acb1e27edff3", "sourceURL": "https://docs.deno.com/api/deno/io", "url": "https://docs.deno.com/api/deno/io", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the deprecated Node module in Deno, specifically focusing on domains and their functionality.\n\nHere's a detailed explanation:\n\n\n## Deprecated\nDeno compatibility\n\nAll exports are non-functional stubs.\nThis is a deprecated Node module.\n\n**This module is pending deprecation.** Once a replacement API has been finalized, this module will be fully deprecated. Most developers should **not** have cause to use this module. Users who absolutely must have the functionality that domains provide may rely on it for the time being but should expect to have to migrate to a different solution in the future.\n\nDomains provide a way to handle multiple different IO operations as a single group. If any of the event emitters or callbacks registered to a domain emit an 'error' event, or throw an error, then the domain object will be notified, rather than losing the context of the error in the process.on('uncaughtException') handler, or causing the program to exit immediately with an error code.\n\n## Classes\n[Domain](https://docs.deno.com/api/node/domain/~/Domain \"Domain\")\n\nNo documentation available\n\n- [add](https://docs.deno.com/api/node/domain/~/Domain#method_add_0)\n- [bind](https://docs.deno.com/api/node/domain/~/Domain#method_bind_0)\n- [enter](https://docs.deno.com/api/node/domain/~/Domain#method_enter_0)\n- [exit](https://docs.deno.com/api/node/domain/~/Domain#method_exit_0)\n- [intercept](https://docs.deno.com/api/node/domain/~/Domain#method_intercept_0)\n- [members](https://docs.deno.com/api/node/domain/~/Domain#property_members)\n- [remove](https://docs.deno.com/api/node/domain/~/Domain#method_remove_0)\n- [run](https://docs.deno.com/api/node/domain/~/Domain#method_run_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/domain", "title": "Usage in Deno", "description": "This page covers the usage of the deprecated Node module in Deno, specifically focusing on domains and their functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:54:20", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "domain - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogSiteName": "Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "domain - Node documentation", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "domain - Node documentation", "language": "en", "og:title": "domain - Node documentation", "viewport": "width=device-width, initial-scale=1", "scrapeId": "86e1e956-3b96-4018-86a6-de32907195fc", "sourceURL": "https://docs.deno.com/api/node/domain", "url": "https://docs.deno.com/api/node/domain/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Usage in Deno\n```yaml\nimport * as mod from \"node:domain\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/domain", "title": "Usage in Deno", "description": "This page covers the usage of the deprecated Node module in Deno, specifically focusing on domains and their functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:54:20", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "domain - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogSiteName": "Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "domain - Node documentation", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "domain - Node documentation", "language": "en", "og:title": "domain - Node documentation", "viewport": "width=device-width, initial-scale=1", "scrapeId": "86e1e956-3b96-4018-86a6-de32907195fc", "sourceURL": "https://docs.deno.com/api/node/domain", "url": "https://docs.deno.com/api/node/domain/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Most developers should not have cause to use this module.\n• Users who must use the functionality that domains provide should expect to migrate to a different solution in the future.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/domain", "title": "Usage in Deno", "description": "This page covers the usage of the deprecated Node module in Deno, specifically focusing on domains and their functionality.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:54:20", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "domain - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogSiteName": "Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:title": "domain - Node documentation", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "domain - Node documentation", "language": "en", "og:title": "domain - Node documentation", "viewport": "width=device-width, initial-scale=1", "scrapeId": "86e1e956-3b96-4018-86a6-de32907195fc", "sourceURL": "https://docs.deno.com/api/node/domain", "url": "https://docs.deno.com/api/node/domain/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Fetch API Documentation\"?\n\nAssistant: Documentation for the Deno Fetch API, including classes, functions, and interfaces.\n\nHere's a detailed explanation:\n\n\n## Classes\nDeno.HttpClient\n\nA custom `HttpClient` for use with `fetch` function. This is designed to allow custom certificates or proxies to be used with `fetch()`.\n\n- [close](https://docs.deno.com/api/deno/~/Deno.HttpClient#method_close_0)\n\n## Functions\nDeno.createHttpClient\n\nCreate a custom HttpClient to use with `fetch`. This is an extension of the web platform Fetch API which allows Deno to use custom TLS CA certificates and connect via a proxy while using `fetch()`.\n\n## Interfaces\nDeno.BasicAuth\n\nBasic authentication credentials to be used with a [`Deno.Proxy`](https://docs.deno.com/api/deno/~/Deno.Proxy) server when specifying [`Deno.CreateHttpClientOptions`](https://docs.deno.com/api/deno/~/Deno.CreateHttpClientOptions).\n\n- [password](https://docs.deno.com/api/deno/~/Deno.BasicAuth#property_password)\n- [username](https://docs.deno.com/api/deno/~/Deno.BasicAuth#property_username)\n\nDeno.CreateHttpClientOptions\n\nThe options used when creating a [`Deno.HttpClient`](https://docs.deno.com/api/deno/~/Deno.HttpClient).\n\n- [allowHost](https://docs.deno.com/api/deno/~/Deno.CreateHttpClientOptions#property_allowhost)\n- [caCerts](https://docs.deno.com/api/deno/~/Deno.CreateHttpClientOptions#property_cacerts)\n- [http1](https://docs.deno.com/api/deno/~/Deno.CreateHttpClientOptions#property_http1)\n- [http2](https://docs.deno.com/api/deno/~/Deno.CreateHttpClientOptions#property_http2)\n- [poolIdleTimeout](https://docs.deno.com/api/deno/~/Deno.CreateHttpClientOptions#property_poolidletimeout)\n- [poolMaxIdlePerHost](https://docs.deno.com/api/deno/~/Deno.CreateHttpClientOptions#property_poolmaxidleperhost)\n- [proxy](https://docs.deno.com/api/deno/~/Deno.CreateHttpClientOptions#property_proxy)\n\nDeno.Proxy\n\nThe definition of a proxy when specifying [`Deno.CreateHttpClientOptions`](https://docs.deno.com/api/deno/~/Deno.CreateHttpClientOptions).\n\n- [basicAuth](https://docs.deno.com/api/deno/~/Deno.Proxy#property_basicauth)\n- [url](https://docs.deno.com/api/deno/~/Deno.Proxy#property_url)\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/fetch", "title": "Deno Fetch API Documentation", "description": "Documentation for the Deno Fetch API, including classes, functions, and interfaces.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 00:54:29", "type": "overview", "page_metadata": {"og:title": "Fetch - Deno documentation", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "Fetch - Deno documentation", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "title": "Fetch - Deno documentation", "ogImage": "/img/og.webp", "og:type": "article", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Fetch - Deno documentation", "scrapeId": "8c3f9525-917f-42b3-b004-48dcca9e4968", "sourceURL": "https://docs.deno.com/api/deno/fetch", "url": "https://docs.deno.com/api/deno/fetch", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Authentication\"?\n\nAssistant: Developers can provision projects, domains, KV databases, and other resources using the Subhosting REST API.\n\nHere's a detailed explanation:\n\n\n## Endpoint and authentication\nThe base URL for the Subhosting REST API v1 is below.\n\n```highlight notranslate console\nhttps://api.deno.com/v1/\n```\n\nThe v1 API uses [HTTP bearer token](https://swagger.io/docs/specification/authentication/bearer-authentication/) authentication. You can create an access token to use the API in the dashboard [here](https://dash.deno.com/account#access-tokens). Most API requests will also require your organization ID. You can retrieve yours from the Deno Deploy dashboard for your organization.\n\n![Find your org ID here](https://docs.deno.com/subhosting/api/images/org-id.png)\n\nUsing both your organization ID and your access token, you can test your API access by listing all the projects associated with your organization.\n\n## Code Example\nHere is an example Deno script you can use to access the API.\n\n```highlight notranslate typescript\n// Replace these with your own!\nconst organizationId = \"a75a9caa-b8ac-47b3-a423-3f2077c58731\";\nconst token = \"ddo_u7mo08lBNHm8GMGLhtrEVfcgBsCuSp36dumX\";\n\nconst res = await fetch(\n  `https://api.deno.com/v1/organizations/${organizationId}/projects`,\n  {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  },\n);\n\nconst response = await res.json();\nconsole.log(response);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/api/authentication", "title": "Authentication", "description": "Developers can provision projects, domains, KV databases, and other resources using the Subhosting REST API.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:54:37", "type": "overview", "page_metadata": {"og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:title": "Authentication", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "Authentication", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Authentication", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Authentication", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "scrapeId": "90a700ad-b607-4a65-8006-ea0293e52a7c", "sourceURL": "https://docs.deno.com/subhosting/api/authentication", "url": "https://docs.deno.com/subhosting/api/authentication/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Authentication\"?\n\nAssistant: Here are some code examples:\n\n### Fetch Projects Example\n```yaml\n// Replace these with your own!\nconst organizationId = \"a75a9caa-b8ac-47b3-a423-3f2077c58731\";\nconst token = \"ddo_u7mo08lBNHm8GMGLhtrEVfcgBsCuSp36dumX\";\n\nconst res = await fetch(\n  `https://api.deno.com/v1/organizations/${organizationId}/projects`,\n  {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  },\n);\n\nconst response = await res.json();\nconsole.log(response);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/api/authentication", "title": "Authentication", "description": "Developers can provision projects, domains, KV databases, and other resources using the Subhosting REST API.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:54:37", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:title": "Authentication", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "Authentication", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Authentication", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Authentication", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "scrapeId": "90a700ad-b607-4a65-8006-ea0293e52a7c", "sourceURL": "https://docs.deno.com/subhosting/api/authentication", "url": "https://docs.deno.com/subhosting/api/authentication/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Interfaces\"?\n\nAssistant: This page covers various interfaces related to messaging in Deno.\n\nHere's a detailed explanation:\n\n\n## BroadcastChannel\nNo documentation available\n\n- [addEventListener](https://docs.deno.com/api/web/~/BroadcastChannel#method_addeventlistener_0)\n- [close](https://docs.deno.com/api/web/~/BroadcastChannel#method_close_0)\n- [name](https://docs.deno.com/api/web/~/BroadcastChannel#property_name)\n- [onmessage](https://docs.deno.com/api/web/~/BroadcastChannel#property_onmessage)\n- [onmessageerror](https://docs.deno.com/api/web/~/BroadcastChannel#property_onmessageerror)\n- [postMessage](https://docs.deno.com/api/web/~/BroadcastChannel#method_postmessage_0)\n- [prototype](https://docs.deno.com/api/web/~/BroadcastChannel#property_prototype)\n- [removeEventListener](https://docs.deno.com/api/web/~/BroadcastChannel#method_removeeventlistener_0)\n\n## BroadcastChannelEventMap\nNo documentation available\n\n- [message](https://docs.deno.com/api/web/~/BroadcastChannelEventMap#property_message)\n- [messageerror](https://docs.deno.com/api/web/~/BroadcastChannelEventMap#property_messageerror)\n\n## MessageChannel\nThe MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.\n\n- [port1](https://docs.deno.com/api/web/~/MessageChannel#property_port1)\n- [port2](https://docs.deno.com/api/web/~/MessageChannel#property_port2)\n- [prototype](https://docs.deno.com/api/web/~/MessageChannel#property_prototype)\n\n## MessagePort\nThe MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.\n\n- [addEventListener](https://docs.deno.com/api/web/~/MessagePort#method_addeventlistener_0)\n- [close](https://docs.deno.com/api/web/~/MessagePort#method_close_0)\n- [onmessage](https://docs.deno.com/api/web/~/MessagePort#property_onmessage)\n- [onmessageerror](https://docs.deno.com/api/web/~/MessagePort#property_onmessageerror)\n- [postMessage](https://docs.deno.com/api/web/~/MessagePort#method_postmessage_0)\n- [prototype](https://docs.deno.com/api/web/~/MessagePort#property_prototype)\n- [removeEventListener](https://docs.deno.com/api/web/~/MessagePort#method_removeeventlistener_0)\n- [start](https://docs.deno.com/api/web/~/MessagePort#method_start_0)\n\n## MessagePortEventMap\nNo documentation available\n\n- [message](https://docs.deno.com/api/web/~/MessagePortEventMap#property_message)\n- [messageerror](https://docs.deno.com/api/web/~/MessagePortEventMap#property_messageerror)\n", "metadata": {"source_url": "https://docs.deno.com/api/web/messaging", "title": "Interfaces", "description": "This page covers various interfaces related to messaging in Deno.", "has_code_examples": false, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 00:54:46", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "title": "Messaging - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Messaging - Web documentation", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "twitter:title": "Messaging - Web documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Messaging - Web documentation", "og:site_name": "Deno", "og:locale": "en_US", "og:image": "/img/og.webp", "language": "en", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "1359d74c-7718-4594-8313-7c46c078b75e", "sourceURL": "https://docs.deno.com/api/web/messaging", "url": "https://docs.deno.com/api/web/messaging", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Pricing and Limits\"?\n\nAssistant: This page outlines the pricing and limits for Deno subhosting, including deployment size, frequency, CPU time per request, event loop blocking, and available memory.\n\nHere's a detailed explanation:\n\n\n## Deployment size\nDeployments should be less than 1GB across all source code and assets in aggregate, per deployment.\n\n## Deployment frequency\nThe maximum number of deployments per hour that a subhosting user can make is either 60 (on the free tier) or 300 (on the builder tier). Higher limits are available for organizations on the enterprise plan.\n\n## CPU time per request\n- 50ms or 200ms, depending on tier.\n- CPU time limit per request is limited on the average across many requests. It is not strictly enforced on a per-request basis.\n- Does not include time that a deployment is waiting for I/O (e.g. while waiting for the remote server while making a fetch() request)\n\n## Blocking the event loop\nPrograms should not block the event loop for more than 1s.\n\n## Available memory\n512MB max memory is available.\n", "metadata": {"source_url": "https://docs.deno.com/subhosting/manual/pricing_and_limits", "title": "Pricing and Limits", "description": "This page outlines the pricing and limits for Deno subhosting, including deployment size, frequency, CPU time per request, event loop blocking, and available memory.", "has_code_examples": false, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 00:54:51", "type": "overview", "page_metadata": {"og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:locale": "en_US", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Pricing and Limits", "ogTitle": "Pricing and Limits", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Pricing and Limits", "twitter:image": "/img/og.webp", "title": "Pricing and Limits", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogImage": "/img/og.webp", "og:type": "article", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "fbf1bd0a-5cf6-4af4-9458-d356e0797cc3", "sourceURL": "https://docs.deno.com/subhosting/manual/pricing_and_limits", "url": "https://docs.deno.com/subhosting/manual/pricing_and_limits/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Interfaces and Variables\"?\n\nAssistant: Documentation for Cache, CacheQueryOptions, CacheStorage, and caches in Deno.\n\nHere's a detailed explanation:\n\n\n## Interfaces\n### Interfaces\n\n#### Cache\nNo documentation available\n- [delete](https://docs.deno.com/api/web/~/Cache#method_delete_0)\n- [match](https://docs.deno.com/api/web/~/Cache#method_match_0)\n- [prototype](https://docs.deno.com/api/web/~/Cache#property_prototype)\n- [put](https://docs.deno.com/api/web/~/Cache#method_put_0)\n\n#### CacheQueryOptions\nNo documentation available\n- [ignoreMethod](https://docs.deno.com/api/web/~/CacheQueryOptions#property_ignoremethod)\n- [ignoreSearch](https://docs.deno.com/api/web/~/CacheQueryOptions#property_ignoresearch)\n- [ignoreVary](https://docs.deno.com/api/web/~/CacheQueryOptions#property_ignorevary)\n\n#### CacheStorage\nNo documentation available\n- [delete](https://docs.deno.com/api/web/~/CacheStorage#method_delete_0)\n- [has](https://docs.deno.com/api/web/~/CacheStorage#method_has_0)\n- [open](https://docs.deno.com/api/web/~/CacheStorage#method_open_0)\n- [prototype](https://docs.deno.com/api/web/~/CacheStorage#property_prototype)\n", "metadata": {"source_url": "https://docs.deno.com/api/web/cache", "title": "Interfaces and Variables", "description": "Documentation for Cache, CacheQueryOptions, CacheStorage, and caches in Deno.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:54:57", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "twitter:title": "Cache - Web documentation", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Cache - Web documentation", "twitter:site": "@deno_land", "og:locale": "en_US", "og:title": "Cache - Web documentation", "twitter:card": "summary_large_image", "title": "Cache - Web documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "scrapeId": "32f6e564-d1f7-4cfa-b249-cc68d370780f", "sourceURL": "https://docs.deno.com/api/web/cache", "url": "https://docs.deno.com/api/web/cache", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This section covers how to use the constants module in Deno.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:constants\";\n```\n\n## Deprecated\nThis section lists deprecated variables.\n\n## Variables\n### Variables\n\n- [default](https://docs.deno.com/api/node/constants/~/default \"default\")\n  - No documentation available\n\n- [exp](https://docs.deno.com/api/node/constants/~/exp \"exp\")\n  - No documentation available\n", "metadata": {"source_url": "https://docs.deno.com/api/node/constants", "title": "Usage in Deno", "description": "This section covers how to use the constants module in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:55:08", "type": "overview", "page_metadata": {"og:type": "article", "ogTitle": "constants - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "twitter:title": "constants - Node documentation", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "constants - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "constants - Node documentation", "ogSiteName": "Deno", "scrapeId": "6011f060-52e3-48a7-92b1-c27c5aba4e8c", "sourceURL": "https://docs.deno.com/api/node/constants", "url": "https://docs.deno.com/api/node/constants/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing Constants Module\n```yaml\nimport * as mod from \"node:constants\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/constants", "title": "Usage in Deno", "description": "This section covers how to use the constants module in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:55:08", "type": "code_examples", "page_metadata": {"og:type": "article", "ogTitle": "constants - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "twitter:title": "constants - Node documentation", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "constants - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "constants - Node documentation", "ogSiteName": "Deno", "scrapeId": "6011f060-52e3-48a7-92b1-c27c5aba4e8c", "sourceURL": "https://docs.deno.com/api/node/constants", "url": "https://docs.deno.com/api/node/constants/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Refer to the official documentation for the most up-to-date information on constants.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/constants", "title": "Usage in Deno", "description": "This section covers how to use the constants module in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:55:08", "type": "best_practices", "page_metadata": {"og:type": "article", "ogTitle": "constants - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:locale": "en_US", "language": "en", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "twitter:title": "constants - Node documentation", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "constants - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "constants - Node documentation", "ogSiteName": "Deno", "scrapeId": "6011f060-52e3-48a7-92b1-c27c5aba4e8c", "sourceURL": "https://docs.deno.com/api/node/constants", "url": "https://docs.deno.com/api/node/constants/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Subprocess API\"?\n\nAssistant: Documentation for handling subprocesses in Deno, including classes, functions, and interfaces.\n\nHere's a detailed explanation:\n\n\n## Classes\n### Classes\n\n#### Deno.ChildProcess\nThe interface for handling a child process returned from `Deno.Command.spawn`.\n\n- [kill](https://docs.deno.com/api/deno/~/Deno.ChildProcess#method_kill_0)\n- [output](https://docs.deno.com/api/deno/~/Deno.ChildProcess#method_output_0)\n- [pid](https://docs.deno.com/api/deno/~/Deno.ChildProcess#property_pid)\n- [ref](https://docs.deno.com/api/deno/~/Deno.ChildProcess#method_ref_0)\n- [status](https://docs.deno.com/api/deno/~/Deno.ChildProcess#property_status)\n- [stderr](https://docs.deno.com/api/deno/~/Deno.ChildProcess#accessor_stderr)\n- [stdin](https://docs.deno.com/api/deno/~/Deno.ChildProcess#accessor_stdin)\n- [stdout](https://docs.deno.com/api/deno/~/Deno.ChildProcess#accessor_stdout)\n- [unref](https://docs.deno.com/api/deno/~/Deno.ChildProcess#method_unref_0)\n\n#### Deno.Command\nCreate a child process.\n\n- [output](https://docs.deno.com/api/deno/~/Deno.Command#method_output_0)\n- [outputSync](https://docs.deno.com/api/deno/~/Deno.Command#method_outputsync_0)\n- [spawn](https://docs.deno.com/api/deno/~/Deno.Command#method_spawn_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/subprocess", "title": "Deno Subprocess API", "description": "Documentation for handling subprocesses in Deno, including classes, functions, and interfaces.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:55:22", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "language": "en", "title": "Subprocess - Deno documentation", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Subprocess - Deno documentation", "ogImage": "/img/og.webp", "ogLocale": "en_US", "og:title": "Subprocess - Deno documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Subprocess - Deno documentation", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "8ae8d2a1-5763-428f-bc2d-aca1f6cf1d55", "sourceURL": "https://docs.deno.com/api/deno/subprocess", "url": "https://docs.deno.com/api/deno/subprocess", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno Subprocess API\"?\n\nAssistant: Here are some code examples:\n\n### Deno.kill\n```yaml\nSend a signal to process under given `pid`. The value and meaning of the `signal` to the process is operating system and process dependant. `Signal` provides the most common signals. Default signal is `\"SIGTERM\"`.\n```\n\n### Deno.CommandOptions\n```yaml\nOptions which can be set when calling [`Deno.Command`](https://docs.deno.com/api/deno/~/Deno.Command).\n- [args](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_args)\n- [clearEnv](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_clearenv)\n- [cwd](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_cwd)\n- [env](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_env)\n- [gid](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_gid)\n- [signal](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_signal)\n- [stderr](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_stderr)\n- [stdin](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_stdin)\n- [stdout](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_stdout)\n- [uid](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_uid)\n- [windowsRawArguments](https://docs.deno.com/api/deno/~/Deno.CommandOptions#property_windowsrawarguments)\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/subprocess", "title": "Deno Subprocess API", "description": "Documentation for handling subprocesses in Deno, including classes, functions, and interfaces.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:55:22", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "language": "en", "title": "Subprocess - Deno documentation", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Subprocess - Deno documentation", "ogImage": "/img/og.webp", "ogLocale": "en_US", "og:title": "Subprocess - Deno documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Subprocess - Deno documentation", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "8ae8d2a1-5763-428f-bc2d-aca1f6cf1d55", "sourceURL": "https://docs.deno.com/api/deno/subprocess", "url": "https://docs.deno.com/api/deno/subprocess", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Subprocess API\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `Deno.kill` to send signals to processes safely.\n• Always check the process status after execution to handle errors properly.\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/subprocess", "title": "Deno Subprocess API", "description": "Documentation for handling subprocesses in Deno, including classes, functions, and interfaces.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 00:55:22", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "language": "en", "title": "Subprocess - Deno documentation", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Subprocess - Deno documentation", "ogImage": "/img/og.webp", "ogLocale": "en_US", "og:title": "Subprocess - Deno documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Subprocess - Deno documentation", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "8ae8d2a1-5763-428f-bc2d-aca1f6cf1d55", "sourceURL": "https://docs.deno.com/api/deno/subprocess", "url": "https://docs.deno.com/api/deno/subprocess", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno WebSockets\"?\n\nAssistant: Documentation for Deno WebSockets API, including functions and interfaces.\n\nHere's a detailed explanation:\n\n\n## Functions\nDeno.upgradeWebSocket\n\nUpgrade an incoming HTTP request to a WebSocket.\n\n## Interfaces\nDeno.UpgradeWebSocketOptions\n\nOptions which can be set when performing a Deno.upgradeWebSocket upgrade of a Request\n\n- idleTimeout\n- protocol\n\nDeno.WebSocketUpgrade\n\nThe object that is returned from a Deno.upgradeWebSocket request.\n\n- response\n- socket\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/websockets", "title": "Deno WebSockets", "description": "Documentation for Deno WebSockets API, including functions and interfaces.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:55:26", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogTitle": "WebSockets - Deno documentation", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "WebSockets - Deno documentation", "title": "WebSockets - Deno documentation", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:title": "WebSockets - Deno documentation", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "d8057102-38b7-47b0-81e2-6a6c3e8f4590", "sourceURL": "https://docs.deno.com/api/deno/websockets", "url": "https://docs.deno.com/api/deno/websockets", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Namespaces\"?\n\nAssistant: APIs for working with the OpenTelemetry observability framework. Deno can export traces, metrics, and logs to OpenTelemetry compatible backends via the OTLP protocol.\n\nHere's a detailed explanation:\n\n\n## Namespaces\nDeno.telemetry APIs for working with the OpenTelemetry observability framework. Deno can export traces, metrics, and logs to OpenTelemetry compatible backends via the OTLP protocol.\n\n## Variables\nDeno.telemetry.contextManager: A ContextManager compatible with OpenTelemetry.js. [ContextManager Documentation](https://open-telemetry.github.io/opentelemetry-js/interfaces/_opentelemetry_api.ContextManager.html)\n\nDeno.telemetry.meterProvider: A MeterProvider compatible with OpenTelemetry.js. [MeterProvider Documentation](https://open-telemetry.github.io/opentelemetry-js/interfaces/_opentelemetry_api.MeterProvider.html)\n\nDeno.telemetry.tracerProvider: A TracerProvider compatible with OpenTelemetry.js. [TracerProvider Documentation](https://open-telemetry.github.io/opentelemetry-js/interfaces/_opentelemetry_api.TracerProvider.html)\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/telemetry", "title": "Namespaces", "description": "APIs for working with the OpenTelemetry observability framework. Deno can export traces, metrics, and logs to OpenTelemetry compatible backends via the OTLP protocol.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:55:32", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:title": "Telemetry - Deno documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Telemetry - Deno documentation", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "title": "Telemetry - Deno documentation", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Telemetry - Deno documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "17a9c091-3835-47cd-b100-3dd8e1a8c4a9", "sourceURL": "https://docs.deno.com/api/deno/telemetry", "url": "https://docs.deno.com/api/deno/telemetry", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Classes\"?\n\nAssistant: This section covers the classes available in the Deno GPU API.\n\nHere's a detailed explanation:\n\n\n## Deno.UnsafeWindowSurface\nCreates a presentable WebGPU surface from given window and display handles.\n\n- [getContext](https://docs.deno.com/api/deno/~/Deno.UnsafeWindowSurface#method_getcontext_0)\n- [present](https://docs.deno.com/api/deno/~/Deno.UnsafeWindowSurface#method_present_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/gpu", "title": "Classes", "description": "This section covers the classes available in the Deno GPU API.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:55:36", "type": "overview", "page_metadata": {"og:image": "/img/og.webp", "og:site_name": "Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "GPU - Deno documentation", "ogTitle": "GPU - Deno documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "GPU - Deno documentation", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "GPU - Deno documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "scrapeId": "87b1dd47-6122-473d-86db-b6af16e7b80b", "sourceURL": "https://docs.deno.com/api/deno/gpu", "url": "https://docs.deno.com/api/deno/gpu", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"WebSockets API\"?\n\nAssistant: Documentation for WebSockets API in Deno, including interfaces and type aliases.\n\nHere's a detailed explanation:\n\n\n## Interfaces\nThis section covers various interfaces related to WebSockets.\n\n## Type Aliases\nThis section covers type aliases related to WebSockets.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/websockets", "title": "WebSockets API", "description": "Documentation for WebSockets API in Deno, including interfaces and type aliases.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:55:38", "type": "overview", "page_metadata": {"title": "WebSockets - Web documentation", "og:title": "WebSockets - Web documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "WebSockets - Web documentation", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogTitle": "WebSockets - Web documentation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "69d472f6-648b-4d95-ae9c-29c788c947ab", "sourceURL": "https://docs.deno.com/api/web/websockets", "url": "https://docs.deno.com/api/web/websockets", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Namespaces\"?\n\nAssistant: The global namespace where Deno specific, non-standard APIs are located.\n\nHere's a detailed explanation:\n\n\n## Deno\nThe global namespace where Deno specific, non-standard APIs are located.\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/uncategorized", "title": "Namespaces", "description": "The global namespace where Deno specific, non-standard APIs are located.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 00:55:41", "type": "overview", "page_metadata": {"og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Uncategorized - Deno documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Uncategorized - Deno documentation", "og:title": "Uncategorized - Deno documentation", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "title": "Uncategorized - Deno documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "scrapeId": "ee484092-31e9-477c-a25b-85301d22f6da", "sourceURL": "https://docs.deno.com/api/deno/uncategorized", "url": "https://docs.deno.com/api/deno/uncategorized", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: The `fs/promises` API provides asynchronous file system methods that return promises.\n\nHere's a detailed explanation:\n\n\n## Functions\nThe promise APIs use the underlying Node.js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.\n\n- [access](https://docs.deno.com/api/node/fs/promises/~/access \"access\")\n\nTests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs.constants.F_OK` or a mask consisting of the bitwise OR of any of `fs.constants.R_OK`, `fs.constants.W_OK`, and `fs.constants.X_OK` (e.g. `fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for possible values of `mode`.\n\n- [appendFile](https://docs.deno.com/api/node/fs/promises/~/appendFile \"appendFile\")\n\nAsynchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a `Buffer`.\n\n- [chmod](https://docs.deno.com/api/node/fs/promises/~/chmod \"chmod\")\n\nChanges the permissions of a file.\n\n- [chown](https://docs.deno.com/api/node/fs/promises/~/chown \"chown\")\n\nChanges the ownership of a file.\n\n- [copyFile](https://docs.deno.com/api/node/fs/promises/~/copyFile \"copyFile\")\n\nAsynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists.\n\n- [cp](https://docs.deno.com/api/node/fs/promises/~/cp \"cp\")\n\nAsynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.\n\n- [glob](https://docs.deno.com/api/node/fs/promises/~/glob \"glob\")\n\nRetrieves the files matching the specified pattern.\n\n- [lchown](https://docs.deno.com/api/node/fs/promises/~/lchown \"lchown\")\n\nChanges the ownership on a symbolic link.\n\n- [link](https://docs.deno.com/api/node/fs/promises/~/link \"link\")\n\nCreates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail.\n\n- [lstat](https://docs.deno.com/api/node/fs/promises/~/lstat \"lstat\")\n\nEquivalent to `fsPromises.stat()` unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to. Refer to the POSIX [`lstat(2)`](http://man7.org/linux/man-pages/man2/lstat.2.html) document for more detail.\n\n- [lutimes](https://docs.deno.com/api/node/fs/promises/~/lutimes \"lutimes\")\n\nChanges the access and modification times of a file in the same way as `fsPromises.utimes()`, with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.\n\n- [mkdir](https://docs.deno.com/api/node/fs/promises/~/mkdir \"mkdir\")\n\nAsynchronously creates a directory.\n\n- [mkdtemp](https://docs.deno.com/api/node/fs/promises/~/mkdtemp \"mkdtemp\")\n\nCreates a unique temporary directory. A unique directory name is generated by appending six random characters to the end of the provided `prefix`. Due to platform inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.\n\n- [open](https://docs.deno.com/api/node/fs/promises/~/open \"open\")\n\nOpens a `FileHandle`.\n\n- [opendir](https://docs.deno.com/api/node/fs/promises/~/opendir \"opendir\")\n\nAsynchronously open a directory for iterative scanning. See the POSIX [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html) documentation for more detail.\n\n- [readdir](https://docs.deno.com/api/node/fs/promises/~/readdir \"readdir\")\n\nReads the contents of a directory.\n\n- [readFile](https://docs.deno.com/api/node/fs/promises/~/readFile \"readFile\")\n\nAsynchronously reads the entire contents of a file.\n\n- [readlink](https://docs.deno.com/api/node/fs/promises/~/readlink \"readlink\")\n\nReads the contents of the symbolic link referred to by `path`. See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more detail. The promise is fulfilled with the `linkString` upon success.\n\n- [realpath](https://docs.deno.com/api/node/fs/promises/~/realpath \"realpath\")\n\nDetermines the actual location of `path` using the same semantics as the `fs.realpath.native()` function.\n\n- [rename](https://docs.deno.com/api/node/fs/promises/~/rename \"rename\")\n\nRenames `oldPath` to `newPath`.\n\n- [rm](https://docs.deno.com/api/node/fs/promises/~/rm \"rm\")\n\nRemoves files and directories (modeled on the standard POSIX `rm` utility).\n\n- [rmdir](https://docs.deno.com/api/node/fs/promises/~/rmdir \"rmdir\")\n\nRemoves the directory identified by `path`.\n\n- [stat](https://docs.deno.com/api/node/fs/promises/~/stat \"stat\")\n\nNo documentation available\n\n- [statfs](https://docs.deno.com/api/node/fs/promises/~/statfs \"statfs\")\n\nNo documentation available\n\n- [symlink](https://docs.deno.com/api/node/fs/promises/~/symlink \"symlink\")\n\nCreates a symbolic link.\n\n- [truncate](https://docs.deno.com/api/node/fs/promises/~/truncate \"truncate\")\n\nTruncates (shortens or extends the length) of the content at `path` to `len` bytes.\n\n- [unlink](https://docs.deno.com/api/node/fs/promises/~/unlink \"unlink\")\n\nIf `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers. If the `path` refers to a file path that is not a symbolic link, the file is deleted. See the POSIX [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html) documentation for more detail.\n\n- [utimes](https://docs.deno.com/api/node/fs/promises/~/utimes \"utimes\")\n\nChange the file system timestamps of the object referenced by `path`.\n\n- [watch](https://docs.deno.com/api/node/fs/promises/~/watch \"watch\")\n\nReturns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory.\n\n- [writeFile](https://docs.deno.com/api/node/fs/promises/~/writeFile \"writeFile\")\n\nAsynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an [AsyncIterable](https://tc39.github.io/ecma262/#sec-asynciterable-interface), or an [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) object.\n\n- [lchmod](https://docs.deno.com/api/node/fs/promises/~/lchmod \"lchmod\")\n\nNo documentation available.\n\n## Interfaces\n- [CreateReadStreamOptions](https://docs.deno.com/api/node/fs/promises/~/CreateReadStreamOptions \"CreateReadStreamOptions\")\n\nNo documentation available\n\n- [autoClose](https://docs.deno.com/api/node/fs/promises/~/CreateReadStreamOptions#property_autoclose)\n- [emitClose](https://docs.deno.com/api/node/fs/promises/~/CreateReadStreamOptions#property_emitclose)\n- [encoding](https://docs.deno.com/api/node/fs/promises/~/CreateReadStreamOptions#property_encoding)\n- [end](https://docs.deno.com/api/node/fs/promises/~/CreateReadStreamOptions#property_end)\n- [highWaterMark](https://docs.deno.com/api/node/fs/promises/~/CreateReadStreamOptions#property_highwatermark)\n- [start](https://docs.deno.com/api/node/fs/promises/~/CreateReadStreamOptions#property_start)\n\n- [CreateWriteStreamOptions](https://docs.deno.com/api/node/fs/promises/~/CreateWriteStreamOptions \"CreateWriteStreamOptions\")\n\nNo documentation available\n\n- [autoClose](https://docs.deno.com/api/node/fs/promises/~/CreateWriteStreamOptions#property_autoclose)\n- [emitClose](https://docs.deno.com/api/node/fs/promises/~/CreateWriteStreamOptions#property_emitclose)\n- [encoding](https://docs.deno.com/api/node/fs/promises/~/CreateWriteStreamOptions#property_encoding)\n- [flush](https://docs.deno.com/api/node/fs/promises/~/CreateWriteStreamOptions#property_flush)\n- [highWaterMark](https://docs.deno.com/api/node/fs/promises/~/CreateWriteStreamOptions#property_highwatermark)\n- [start](https://docs.deno.com/api/node/fs/promises/~/CreateWriteStreamOptions#property_start)\n\n- [FileChangeInfo](https://docs.deno.com/api/node/fs/promises/~/FileChangeInfo \"FileChangeInfo\")\n\nNo documentation available\n\n- [eventType](https://docs.deno.com/api/node/fs/promises/~/FileChangeInfo#property_eventtype)\n- [filename](https://docs.deno.com/api/node/fs/promises/~/FileChangeInfo#property_filename)\n\n- [FileHandle](https://docs.deno.com/api/node/fs/promises/~/FileHandle \"FileHandle\")\n\nNo documentation available\n\n- [appendFile](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_appendfile_0)\n- [chmod](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_chmod_0)\n- [chown](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_chown_0)\n- [close](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_close_0)\n- [createReadStream](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_createreadstream_0)\n- [createWriteStream](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_createwritestream_0)\n- [datasync](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_datasync_0)\n- [fd](https://docs.deno.com/api/node/fs/promises/~/FileHandle#property_fd)\n- [read](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_read_0)\n- [readFile](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_readfile_0)\n- [readLines](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_readlines_0)\n- [readableWebStream](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_readablewebstream_0)\n- [readv](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_readv_0)\n- [stat](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_stat_0)\n- [sync](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_sync_0)\n- [truncate](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_truncate_0)\n- [utimes](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_utimes_0)\n- [write](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_write_0)\n- [writeFile](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_writefile_0)\n- [writev](https://docs.deno.com/api/node/fs/promises/~/FileHandle#method_writev_0)\n\n- [FileReadOptions](https://docs.deno.com/api/node/fs/promises/~/FileReadOptions \"FileReadOptions\")\n\nNo documentation available\n\n- [buffer](https://docs.deno.com/api/node/fs/promises/~/FileReadOptions#property_buffer)\n- [length](https://docs.deno.com/api/node/fs/promises/~/FileReadOptions#property_length)\n- [offset](https://docs.deno.com/api/node/fs/promises/~/FileReadOptions#property_offset)\n- [position](https://docs.deno.com/api/node/fs/promises/~/FileReadOptions#property_position)\n\n- [FileReadResult](https://docs.deno.com/api/node/fs/promises/~/FileReadResult \"FileReadResult\")\n\nNo documentation available\n\n- [buffer](https://docs.deno.com/api/node/fs/promises/~/FileReadResult#property_buffer)\n- [bytesRead](https://docs.deno.com/api/node/fs/promises/~/FileReadResult#property_bytesread)\n\n- [FlagAndOpenMode](https://docs.deno.com/api/node/fs/promises/~/FlagAndOpenMode \"FlagAndOpenMode\")\n\nNo documentation available\n\n- [flag](https://docs.deno.com/api/node/fs/promises/~/FlagAndOpenMode#property_flag)\n- [mode](https://docs.deno.com/api/node/fs/promises/~/FlagAndOpenMode#property_mode)\n\n- [ReadableWebStreamOptions](https://docs.deno.com/api/node/fs/promises/~/ReadableWebStreamOptions \"ReadableWebStreamOptions\")\n\nNo documentation available\n\n- [type](https://docs.deno.com/api/node/fs/promises/~/ReadableWebStreamOptions#property_type)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/fs/promises", "title": "Usage in Deno", "description": "The `fs/promises` API provides asynchronous file system methods that return promises.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:56:24", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogLocale": "en_US", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "title": "fs/promises - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "fs/promises - Node documentation", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "fs/promises - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "fs/promises - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "scrapeId": "688530b6-9153-4ef5-a0ec-9c3af9c01749", "sourceURL": "https://docs.deno.com/api/node/fs/promises", "url": "https://docs.deno.com/api/node/fs/promises/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Usage in Deno\n```yaml\nimport * as mod from \"node:fs/promises\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/fs/promises", "title": "Usage in Deno", "description": "The `fs/promises` API provides asynchronous file system methods that return promises.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:56:24", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogLocale": "en_US", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "title": "fs/promises - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "fs/promises - Node documentation", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "fs/promises - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "fs/promises - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "scrapeId": "688530b6-9153-4ef5-a0ec-9c3af9c01749", "sourceURL": "https://docs.deno.com/api/node/fs/promises", "url": "https://docs.deno.com/api/node/fs/promises/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/fs/promises", "title": "Usage in Deno", "description": "The `fs/promises` API provides asynchronous file system methods that return promises.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:56:24", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogLocale": "en_US", "og:site_name": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "title": "fs/promises - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "fs/promises - Node documentation", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogTitle": "fs/promises - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "fs/promises - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "scrapeId": "688530b6-9153-4ef5-a0ec-9c3af9c01749", "sourceURL": "https://docs.deno.com/api/node/fs/promises", "url": "https://docs.deno.com/api/node/fs/promises/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Data Modeling in TypeScript\"?\n\nAssistant: In TypeScript applications, it is usually desirable to create strongly-typed, well-documented objects to contain the data that your application operates on. This guide covers strategies for working with strongly typed objects going into and back out from Deno KV.\n\nHere's a detailed explanation:\n\n\n## Using interfaces and type assertions\nWhen storing and retrieving application data in Deno KV, you might want to begin by describing the shape of your data using TypeScript interfaces. Below is an object model which describes some key components of a blogging system:\n\nmodel.ts\n\n```highlight notranslate ts\nexport interface Author {\n  username: string;\n  fullName: string;\n}\n\nexport interface Post {\n  slug: string;\n  title: string;\n  body: string;\n  author: Author;\n  createdAt: Date;\n  updatedAt: Date;\n}\n```\n\nThis object model describes a blog post and an associated author.\n\nWith Deno KV, you can use these TypeScript interfaces like data transfer objects (DTOs) - a strongly typed wrapper around the otherwise untyped objects you might send to or receive from Deno KV.\n\nWithout any additional work, you can happily store the contents of one of these DTOs in Deno KV.\n\n```highlight notranslate ts\nimport { Author } from \"./model.ts\";\n\nconst kv = await Deno.openKv();\n\nconst a: Author = {\n  username: \"acdoyle\",\n  fullName: \"Arthur Conan Doyle\",\n};\n\nawait kv.set([\"authors\", a.username], a);\n```\n\nWhen retrieving this same object from Deno KV, however, it won't by default have type information associated with it. If you know the shape of the object that was stored for the key, however, you can use type assertion to inform the TypeScript compiler about the shape of an object.\n\n```highlight notranslate ts\nimport { Author } from \"./model.ts\";\n\nconst kv = await Deno.openKv();\n\nconst r = await kv.get([\"authors\", \"acdoyle\"]);\nconst ac = r.value as Author;\n\nconsole.log(ac.fullName);\n```\n\nYou can also specify an optional type parameter for `get`:\n\n```highlight notranslate ts\nimport { Author } from \"./model.ts\";\n\nconst kv = await Deno.openKv();\n\nconst r = await kv.get<Author>([\"authors\", \"acdoyle\"]);\n\nconsole.log(r.value.fullName);\n```\n\nFor simpler data structures, this technique may be sufficient. But often, you will want or need to apply some business logic when creating or accessing your domain objects. When this need arises, you can develop a set of pure functions that can operate on your DTOs.\n\n## Encapsulating business logic with a service layer\nWhen your application's persistence needs become more complex - such as when you need to create secondary indexes to query your data by different keys, or maintain relationships between objects - you will want to create a set of functions to sit on top of your DTOs to ensure that the data being passed around is valid (and not merely typed correctly).\n\nFrom our business objects above, the `Post` object is complex enough where it is likely to need a small layer of code to save and retrieve an instance of the object. Below is an example of two functions that wrap the underlying Deno KV APIs, and return strongly typed object instances for the `Post` interface.\n\nNotably, we need to store an identifier for an `Author` object, so we can retrieve author information from KV later.\n\n```highlight notranslate ts\nimport { Author, Post } from \"./model.ts\";\n\nconst kv = await Deno.openKv();\n\ninterface RawPost extends Post {\n  authorUsername: string;\n}\n\nexport async function savePost(p: Post): Promise<Post> {\n  const postData: RawPost = Object.assign({}, p, {\n    authorUsername: p.author.username,\n  });\n\n  await kv.set([\"posts\", p.slug], postData);\n  return p;\n}\n\nexport async function getPost(slug: string): Promise<Post> {\n  const postResponse = await kv.get([\"posts\", slug]);\n  const rawPost = postResponse.value as RawPost;\n  const authorResponse = await kv.get([\"authors\", rawPost.authorUsername]);\n\n  const author = authorResponse.value as Author;\n  const post = Object.assign({}, postResponse.value, {\n    author,\n  }) as Post;\n\n  return post;\n}\n```\n\nThis thin layer uses a `RawPost` interface, which extends the actual `Post` interface, to include some additional data that is used to reference data at another index (the associated `Author` object).\n\nThe `savePost` and `getPost` functions take the place of a direct Deno KV `get` or `set` operation, so that they can properly serialize and \"hydrate\" model objects for us with appropriate types and associations.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/data_modeling_typescript", "title": "Data Modeling in TypeScript", "description": "In TypeScript applications, it is usually desirable to create strongly-typed, well-documented objects to contain the data that your application operates on. This guide covers strategies for working with strongly typed objects going into and back out from Deno KV.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:56:40", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "title": "Data Modeling in TypeScript", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Data Modeling in TypeScript", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogTitle": "Data Modeling in TypeScript", "og:title": "Data Modeling in TypeScript", "og:locale": "en_US", "scrapeId": "165d9673-debe-4585-9afb-bc990b1a778f", "sourceURL": "https://docs.deno.com/deploy/kv/manual/data_modeling_typescript", "url": "https://docs.deno.com/deploy/kv/manual/data_modeling_typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Data Modeling in TypeScript\"?\n\nAssistant: Here are some code examples:\n\n### Modeling Interfaces\n```yaml\nexport interface Author {\n  username: string;\n  fullName: string;\n}\n\nexport interface Post {\n  slug: string;\n  title: string;\n  body: string;\n  author: Author;\n  createdAt: Date;\n  updatedAt: Date;\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/data_modeling_typescript", "title": "Data Modeling in TypeScript", "description": "In TypeScript applications, it is usually desirable to create strongly-typed, well-documented objects to contain the data that your application operates on. This guide covers strategies for working with strongly typed objects going into and back out from Deno KV.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:56:40", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "title": "Data Modeling in TypeScript", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Data Modeling in TypeScript", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogTitle": "Data Modeling in TypeScript", "og:title": "Data Modeling in TypeScript", "og:locale": "en_US", "scrapeId": "165d9673-debe-4585-9afb-bc990b1a778f", "sourceURL": "https://docs.deno.com/deploy/kv/manual/data_modeling_typescript", "url": "https://docs.deno.com/deploy/kv/manual/data_modeling_typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Data Modeling in TypeScript\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use TypeScript interfaces to describe the shape of your data when working with Deno KV.\n• Utilize data transfer objects (DTOs) as strongly typed wrappers around untyped objects sent to or received from Deno KV.\n• Implement a service layer to encapsulate business logic and ensure data validity when working with complex objects.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/data_modeling_typescript", "title": "Data Modeling in TypeScript", "description": "In TypeScript applications, it is usually desirable to create strongly-typed, well-documented objects to contain the data that your application operates on. This guide covers strategies for working with strongly typed objects going into and back out from Deno KV.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:56:40", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "title": "Data Modeling in TypeScript", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Data Modeling in TypeScript", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogTitle": "Data Modeling in TypeScript", "og:title": "Data Modeling in TypeScript", "og:locale": "en_US", "scrapeId": "165d9673-debe-4585-9afb-bc990b1a778f", "sourceURL": "https://docs.deno.com/deploy/kv/manual/data_modeling_typescript", "url": "https://docs.deno.com/deploy/kv/manual/data_modeling_typescript/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Simple API server\"?\n\nAssistant: Deno is great for creating simple, light-weight API servers. Learn how to create and deploy one using Deno Deploy in this tutorial.\n\nHere's a detailed explanation:\n\n\n## Create a local API server\nIn your terminal, create a file named `server.ts`.\n\n```highlight notranslate shell\ntouch server.ts\n```\n\nWe'll implement a simple link shortener service using a [Deno KV database](https://docs.deno.com/deploy/kv/manual).\n\nserver.ts\n\n```highlight notranslate ts\nconst kv = await Deno.openKv();\n\nDeno.serve(async (request: Request) => {\n  // Create short links\n  if (request.method == \"POST\") {\n    const body = await request.text();\n    const { slug, url } = JSON.parse(body);\n    const result = await kv.set([\"links\", slug], url);\n    return new Response(JSON.stringify(result));\n  }\n\n  // Redirect short links\n  const slug = request.url.split(\"/\").pop() || \"\";\n  const url = (await kv.get([\"links\", slug])).value as string;\n  if (url) {\n    return Response.redirect(url, 301);\n  } else {\n    const m = !slug ? \"Please provide a slug.\" : `Slug \"${slug}\" not found`;\n    return new Response(m, { status: 404 });\n  }\n});\n```\n\nYou can run this server on your machine with this command:\n\n```highlight notranslate shell\ndeno run -A --unstable-kv server.ts\n```\n\nThis server will respond to HTTP `GET` and `POST` requests. The `POST` handler expects to receive a JSON document in request the body with `slug` and `url` properties. The `slug` is the short URL component, and the `url` is the full URL you want to redirect to.\n\nHere's an example of using this API endpoint with cURL:\n\n```highlight notranslate shell\ncurl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"url\":\"https://docs.deno.com/runtime/manual\",\"slug\":\"denodocs\"}' \\\n  http://localhost:8000/\n```\n\nIn response, the server should send you JSON with the KV data representing the result of the `set` operation:\n\n```highlight notranslate json\n{ \"ok\": true, \"versionstamp\": \"00000000000000060000\" }\n```\n\nA `GET` request to our server will take a URL slug as a path parameter, and redirect to the provided URL. You can visit this URL in the browser, or make another cURL request to see this in action!\n\n```highlight notranslate shell\ncurl -v http://localhost:8000/denodocs\n```\n\n## Create a GitHub repository for your app\nSign in to [GitHub](https://github.com/) and [create a new repository](https://docs.github.com/en/get-started/quickstart/create-a-repo). You can skip adding a README or any other files for now - a blank repo will do fine for our purposes.\n\nIn the folder where you created your API server, initialize a local git repo with these commands in sequence. Be sure to swap out `your_username` and `your_repo_name` with the appropriate values.\n\n```highlight notranslate sh\necho \"# My Deno Link Shortener\" >> README.md\ngit init\ngit add .\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/your_username/your_repo_name.git\ngit push -u origin main\n``` \n\nYou should now have a GitHub repository with your `server.ts` file in it, as in [this example repository](https://github.com/kwhinnery/simple_api_server). Now you're ready to import and run this application on Deno Deploy.\n\n## Import and deploy your project\nNext, sign up for an account on [Deno Deploy](https://dash.deno.com/) and [create a new project](https://dash.deno.com/new_project). Connect your GitHub account and select the repository we created a moment ago.\n\n![Deno Deploy project selection](https://docs.deno.com/deploy/tutorials/images/simple_api_deploy.png)\n\nThe configuration should look something like this:\n\n![Deno Deploy config](https://docs.deno.com/deploy/tutorials/images/simple_api_deploy_settings.png)\n\nClick on the \"Deploy Project\" button. Once deployed, your link shortener service will be live on Deno Deploy!\n\n![Deno Deploy dashboard](https://docs.deno.com/deploy/tutorials/images/simple_api_dashboard.png)\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/simple-api", "title": "Simple API server", "description": "Deno is great for creating simple, light-weight API servers. Learn how to create and deploy one using Deno Deploy in this tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:56:58", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:title": "Simple API server", "og:title": "Simple API server", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "title": "Simple API server", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Simple API server", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "39750bfd-a849-41ca-8355-e66ec3b9ba98", "sourceURL": "https://docs.deno.com/deploy/tutorials/simple-api", "url": "https://docs.deno.com/deploy/tutorials/simple-api/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Simple API server\"?\n\nAssistant: Here are some code examples:\n\n### Create a local API server\n```yaml\ntouch server.ts\n```\n\n### Run the server\n```yaml\ndeno run -A --unstable-kv server.ts\n```\n\n### cURL request to create a short link\n```yaml\ncurl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"url\":\"https://docs.deno.com/runtime/manual\",\"slug\":\"denodocs\"}' \\\n  http://localhost:8000/ \n\n```\n\n### cURL request to redirect to a short link\n```yaml\ncurl -v http://localhost:8000/denodocs\n```\n\n### Initialize GitHub repository\n```yaml\necho \"# My Deno Link Shortener\" >> README.md\ngit init\ngit add .\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/your_username/your_repo_name.git\ngit push -u origin main\n\n```\n\n### cURL request to create a short link on Deno Deploy\n```yaml\ncurl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"url\":\"https://docs.deno.com/runtime/\",\"slug\":\"denodocs\"}' \\\n  https://your-deno-project-url-here.deno.dev/ \n\n```\n\n### cURL request to redirect to a short link on Deno Deploy\n```yaml\ncurl -v https://your-deno-project-url-here.deno.dev/denodocs\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/simple-api", "title": "Simple API server", "description": "Deno is great for creating simple, light-weight API servers. Learn how to create and deploy one using Deno Deploy in this tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:56:58", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:title": "Simple API server", "og:title": "Simple API server", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "title": "Simple API server", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Simple API server", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "39750bfd-a849-41ca-8355-e66ec3b9ba98", "sourceURL": "https://docs.deno.com/deploy/tutorials/simple-api", "url": "https://docs.deno.com/deploy/tutorials/simple-api/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Simple API server\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can skip adding a README or any other files for the GitHub repository; a blank repo will do fine.\n• Be sure to swap out `your_username` and `your_repo_name` with the appropriate values when initializing the GitHub repository.\n• Without any additional configuration, Deno KV just works on Deploy.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/simple-api", "title": "Simple API server", "description": "Deno is great for creating simple, light-weight API servers. Learn how to create and deploy one using Deno Deploy in this tutorial.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:56:58", "type": "best_practices", "page_metadata": {"twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:title": "Simple API server", "og:title": "Simple API server", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "title": "Simple API server", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Simple API server", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "39750bfd-a849-41ca-8355-e66ec3b9ba98", "sourceURL": "https://docs.deno.com/deploy/tutorials/simple-api", "url": "https://docs.deno.com/deploy/tutorials/simple-api/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"prefer-primordials\"?\n\nAssistant: Suggests using frozen intrinsics from `primordials` rather than the default globals.\n\nHere's a detailed explanation:\n\n\n## Overview\nThis lint rule is designed to be dedicated to Deno's internal code. Normal users don't have to run this rule for their code.\n\n## Purpose\nPrimordials are a frozen set of all intrinsic objects in the runtime, which we should use in the Deno's internal to avoid the risk of prototype pollution. This rule detects the direct use of global intrinsics and suggests replacing it with the corresponding one from the `primordials` object.\n\n## Examples\nOne such example is:\n\n```highlight notranslate javascript\nconst arr = getSomeArrayOfNumbers();\nconst evens = arr.filter((val) => val % 2 === 0);\n```\n\nThe second line of this example should be:\n\n```highlight notranslate javascript\nconst evens = primordials.ArrayPrototypeFilter(arr, (val) => val % 2 === 0);\n```\n\n**Invalid:**\n\n```highlight notranslate javascript\nconst arr = new Array();\n\nconst s = JSON.stringify({});\n\nconst i = parseInt(\"42\");\n\nconst { ownKeys } = Reflect;\n```\n\n**Valid:**\n\n```highlight notranslate javascript\nconst { Array } = primordials;\nconst arr = new Array();\n\nconst { JSONStringify } = primordials;\nconst s = JSONStringify({});\n\nconst { NumberParseInt } = primordials;\nconst i = NumberParseInt(\"42\");\n\nconst { ReflectOwnKeys } = primordials;\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/prefer-primordials", "title": "prefer-primordials", "description": "Suggests using frozen intrinsics from `primordials` rather than the default globals.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:57:07", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "language": "en", "title": "prefer-primordials", "viewport": "width=device-width, initial-scale=1", "twitter:title": "prefer-primordials", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "ogTitle": "prefer-primordials", "og:locale": "en_US", "og:site_name": "Deno", "og:title": "prefer-primordials", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "dcf2ece7-6773-4dc3-9bbc-7ce754cf6aeb", "sourceURL": "https://docs.deno.com/lint/rules/prefer-primordials", "url": "https://docs.deno.com/lint/rules/prefer-primordials/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"prefer-primordials\"?\n\nAssistant: Here are some code examples:\n\n### Invalid Example\n```yaml\n```highlight notranslate javascript\nconst arr = new Array();\n\nconst s = JSON.stringify({});\n\nconst i = parseInt(\"42\");\n\nconst { ownKeys } = Reflect;\n```\n```\n\n### Valid Example\n```yaml\n```highlight notranslate javascript\nconst { Array } = primordials;\nconst arr = new Array();\n\nconst { JSONStringify } = primordials;\nconst s = JSONStringify({});\n\nconst { NumberParseInt } = primordials;\nconst i = NumberParseInt(\"42\");\n\nconst { ReflectOwnKeys } = primordials;\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/prefer-primordials", "title": "prefer-primordials", "description": "Suggests using frozen intrinsics from `primordials` rather than the default globals.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:57:07", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "language": "en", "title": "prefer-primordials", "viewport": "width=device-width, initial-scale=1", "twitter:title": "prefer-primordials", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "ogTitle": "prefer-primordials", "og:locale": "en_US", "og:site_name": "Deno", "og:title": "prefer-primordials", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "dcf2ece7-6773-4dc3-9bbc-7ce754cf6aeb", "sourceURL": "https://docs.deno.com/lint/rules/prefer-primordials", "url": "https://docs.deno.com/lint/rules/prefer-primordials/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"prefer-primordials\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use frozen intrinsics from `primordials` to avoid prototype pollution.\n• Replace direct use of global intrinsics with corresponding ones from the `primordials` object.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/prefer-primordials", "title": "prefer-primordials", "description": "Suggests using frozen intrinsics from `primordials` rather than the default globals.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:57:07", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "language": "en", "title": "prefer-primordials", "viewport": "width=device-width, initial-scale=1", "twitter:title": "prefer-primordials", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "ogTitle": "prefer-primordials", "og:locale": "en_US", "og:site_name": "Deno", "og:title": "prefer-primordials", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "dcf2ece7-6773-4dc3-9bbc-7ce754cf6aeb", "sourceURL": "https://docs.deno.com/lint/rules/prefer-primordials", "url": "https://docs.deno.com/lint/rules/prefer-primordials/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Task Documentation\"?\n\nAssistant: This page provides detailed information about the `deno task` command, including options, syntax, and examples for managing tasks in Deno.\n\nHere's a detailed explanation:\n\n\n## Options\n### `--config`  \nShort flag: `-c`  \nConfigure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary.\n\n### `--cwd`  \nSpecify the directory to run the task in.\n\n### `--eval`  \nEvaluate the passed value as if it was a task in a configuration file.\n\n### `--filter`  \nShort flag: `-f`  \nFilter members of the workspace by name, implies ` --recursive` flag.\n\n### `--recursive`  \nShort flag: `-r`  \nRun the task in all projects in the workspace.\n\n## Dependency management options\n### `--frozen`  \nError out if lockfile is out of date.\n\n### `--node-modules-dir`  \nSets the node modules management mode for npm packages.\n\n## Description\n`deno task` provides a cross-platform way to define and execute custom commands specific to a codebase. To get started, define your commands in your codebase's [Deno configuration file](https://docs.deno.com/runtime/fundamentals/configuration/) under a `\"tasks\"` key.\n\n## Specifying the current working directory\nBy default, `deno task` executes commands with the directory of the Deno configuration file (ex. _deno.json_) as the current working directory. This allows tasks to use relative paths and continue to work regardless of where in the directory tree you happen to execute the deno task from. In some scenarios, this may not be desired and this behavior can be overridden with the `INIT_CWD` environment variable.\n\n## Getting directory deno task was run from\nSince tasks are run using the directory of the Deno configuration file as the current working directory, it may be useful to know the directory the `deno task` was executed from instead. This is possible by using the `INIT_CWD` environment variable in a task or script launched from `deno task`.\n\n## Wildcard matching of tasks\nThe `deno task` command can run multiple tasks in parallel by passing a wildcard pattern. A wildcard pattern is specified with the `*` character.\n\n## Task dependencies\nYou can specify dependencies for a task.\n\n## Node and npx binary support\nBy default, `deno task` will execute commands with the `deno` binary. If you need to ensure that a command is run with the `npm` or `npx` binary, you can do so by invoking the `npm` or `npx` `run` command respectively.\n\n## Workspace support\n`deno task` can be used in workspaces, to run tasks from multiple member directories in parallel.\n\n## Syntax\n`deno task` uses a cross-platform shell that's a subset of sh/bash to execute defined tasks.\n\n## Boolean lists\nBoolean lists provide a way to execute additional commands based on the exit code of the initial command.\n\n## Sequential lists\nSequential lists are similar to boolean lists, but execute regardless of whether the previous command in the list passed or failed.\n\n## Async commands\nAsync commands provide a way to make a command execute asynchronously.\n\n## Environment variables\nEnvironment variables are defined like the following.\n\n## Setting environment variables for a command\nTo specify environment variable(s) before a command, list them like so.\n\n## Shell variables\nShell variables are similar to environment variables, but won't be exported to spawned commands.\n\n## Exit status variable\nThe exit code of the previously run command is available in the `$?` variable.\n\n## Pipelines\nPipelines provide a way to pipe the output of one command to another.\n\n## Command substitution\nThe `$(command)` syntax provides a way to use the output of a command in other commands that get executed.\n\n## Negate exit code\nTo negate the exit code, add an exclamation point and space before a command.\n\n## Redirects\nRedirects provide a way to pipe stdout and/or stderr to a file.\n\n## Cross-platform shebang\nStarting in Deno 1.42, `deno task` will execute scripts that start with `#!/usr/bin/env -S` the same way on all platforms.\n\n## Glob expansion\nGlob expansion is supported in Deno 1.34 and above.\n\n## Built-in commands\n`deno task` ships with several built-in commands that work the same out of the box on Windows, Mac, and Linux.\n\n## package.json support\n`deno task` falls back to reading from the `\"scripts\"` entries in a package.json file if it is discovered.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/task", "title": "Deno Task Documentation", "description": "This page provides detailed information about the `deno task` command, including options, syntax, and examples for managing tasks in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 25, "timestamp": "2025-02-28 00:57:30", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "`deno task`", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:title": "`deno task`", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "`deno task`", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "`deno task`", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "22dda796-2fc0-4ea1-b4de-50ecf2f3d293", "sourceURL": "https://docs.deno.com/runtime/reference/cli/task", "url": "https://docs.deno.com/runtime/reference/cli/task/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno Task Documentation\"?\n\nAssistant: Here are some code examples:\n\n### Basic Command Line Usage\n```yaml\ndeno task [OPTIONS] [TASK]\n```\n\n### Run a Task\n```yaml\ndeno task build\n```\n\n### List All Available Tasks\n```yaml\ndeno task\n```\n\n### Evaluate a Task from String\n```yaml\ndeno task --eval \"echo $(pwd)\"\n```\n\n### Example Task Configuration\n```yaml\n{\n  \"tasks\": {\n    \"data\": \"deno task collect && deno task analyze\",\n    \"collect\": \"deno run --allow-read=. --allow-write=. scripts/collect.js\",\n    \"analyze\": {\n      \"description\": \"Run analysis script\",\n      \"command\": \"deno run --allow-read=. scripts/analyze.js\"\n    }\n  }\n}\n```\n\n### Specifying Current Working Directory\n```yaml\n{\n  \"tasks\": {\n    \"my_task\": \"cd $INIT_CWD && pwd\"\n  }\n}\n```\n\n### Getting Directory Deno Task Was Run From\n```yaml\n{\n  \"tasks\": {\n    \"start\": \"deno run main.ts \\\"$INIT_CWD\\\"\"\n  }\n}\n```\n\n### Wildcard Matching of Tasks\n```yaml\n{\n  \"tasks\": {\n    \"build-client\": \"deno run -RW client/build.ts\",\n    \"build-server\": \"deno run -RW server/build.ts\"\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/task", "title": "Deno Task Documentation", "description": "This page provides detailed information about the `deno task` command, including options, syntax, and examples for managing tasks in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 25, "timestamp": "2025-02-28 00:57:30", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "`deno task`", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:title": "`deno task`", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "`deno task`", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "`deno task`", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "22dda796-2fc0-4ea1-b4de-50ecf2f3d293", "sourceURL": "https://docs.deno.com/runtime/reference/cli/task", "url": "https://docs.deno.com/runtime/reference/cli/task/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Task Documentation\"?\n\nAssistant: Here are the recommended best practices:\n\n• When using a wildcard, make sure to quote the task name (eg. \"build-*\"), otherwise your shell might try to expand the wildcard character, leading to surprising errors.\n• If a cycle between dependencies is discovered, an error will be returned.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/task", "title": "Deno Task Documentation", "description": "This page provides detailed information about the `deno task` command, including options, syntax, and examples for managing tasks in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 25, "timestamp": "2025-02-28 00:57:30", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "`deno task`", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:title": "`deno task`", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "`deno task`", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "`deno task`", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "22dda796-2fc0-4ea1-b4de-50ecf2f3d293", "sourceURL": "https://docs.deno.com/runtime/reference/cli/task", "url": "https://docs.deno.com/runtime/reference/cli/task/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"All-in-one tooling\"?\n\nAssistant: This page covers the built-in CLI tools in Deno for linting, formatting, and testing, showcasing how they save time and effort in project setup.\n\nHere's a detailed explanation:\n\n\n## Description of video\nIn Node.js, before we can get started working on our project, we have to go through a configuration step for things like linting, formatting, and testing. Deno saves us a ton of time by including these tools natively. Let's take a look at what's included with these built-in CLI tools.\n\n## Transcript and code\nHere we have a function called sing:\n\n```highlight notranslate javascript\nfunction sing(phrase: string, times: number): string {\n  return Array(times).fill(phrase).join(\" \");\n}\n```\n\nNow let's run the formatter:\n\n```highlight notranslate shell\ndeno fmt\n```\n\nThe formatter automatically formats your code to follow Deno's rules and conventions. Let's run it to clean up any formatting issues.\n\nDeno even formats code snippets in markdown files. So anything that is enclosed in triple backticks will be formatted when you run this command as well.\n\nThe deno lint command is used to analyze your code for potential issues. It’s similar to ESLint but built into Deno.\n\n```highlight notranslate shell\ndeno lint --help\n```\n\nThis will lint all of the JavaScript and TypeScript files in the current directory and in subdirectories.\n\nYou can also lint specific files by passing their names\n\n```highlight notranslate shell\n# lint specific files\ndeno lint myfile1.ts myfile2.ts\n```\n\nYou can run it on specific directories\n\n```highlight notranslate shell\ndeno lint src/\n```\n\nAnd if you're feeling like you want to skip linting certain files, at the top of the files, you can add a comment, and deno will know to skip this one.\n\n```highlight notranslate javascript\n// deno-lint-ignore-file\n// deno-lint-ignore-file -- reason for ignoring\n```\n\nDeno also has some CLI commands for testing. In our directory here we have a test file. It uses the name of the function and test.\n\nsing_test.ts\n\n```highlight notranslate javascript\nimport { sing } from \"./sing.ts\";\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test(\"sing repeats a phrase\", () => {\n  const result = sing(\"La\", 3);\n  assertEquals(result, \"La La La\");\n});\n```\n\nNow, we’ll run our tests using the deno test command. Deno automatically discovers and runs test files.\n\n```highlight notranslate shell\ndeno test\n```\n\nThe way Deno decides which files should be considered test files is that it follows:\n\n`_test.ts`, `_test.js`, `_test.tsx`, `_test.jsx`, `.test.js`, `.test.ts`, `.test.tsx`, `.test.jsx`\n\n`deno test encourage.test.js`\n\nOr you can pass a specific directory path and Deno will search for test files in there.\n\n```highlight notranslate sh\n./tests/\n```\n\nYou can even check code coverage. By default, when you run deno test --coverage a coverage profile will be generated in the /coverage directory in the current working directory.\n\n```highlight notranslate shell\ndeno test --coverage\n```\n\nFrom there you can run deno coverage to print a coverage report to standard output\n\n```highlight notranslate shell\ndeno coverage\n```\n\nAs you can see, Deno's built-in tools are pretty cool. We don't have to spend a whole day configuring these settings before we can start working on our project. And we can format, lint, and test code without the need for third-party dependencies.\n", "metadata": {"source_url": "https://docs.deno.com/examples/all-in-one_tooling", "title": "All-in-one tooling", "description": "This page covers the built-in CLI tools in Deno for linting, formatting, and testing, showcasing how they save time and effort in project setup.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:57:47", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogTitle": "All-in-one tooling", "ogLocale": "en_US", "language": "en", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "ogImage": "/img/og.webp", "og:title": "All-in-one tooling", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "title": "All-in-one tooling", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "All-in-one tooling", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "scrapeId": "c9875412-7730-4854-95af-a68a4b9378e0", "sourceURL": "https://docs.deno.com/examples/all-in-one_tooling", "url": "https://docs.deno.com/examples/all-in-one_tooling/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"All-in-one tooling\"?\n\nAssistant: Here are some code examples:\n\n### Function sing\n```yaml\nfunction sing(phrase: string, times: number): string {\n  return Array(times).fill(phrase).join(\" \");\n}\n```\n\n### Run formatter\n```yaml\ndeno fmt\n```\n\n### Lint all files\n```yaml\ndeno lint --help\n```\n\n### Lint specific files\n```yaml\n# lint specific files\ndeno lint myfile1.ts myfile2.ts\n```\n\n### Lint specific directory\n```yaml\ndeno lint src/\n```\n\n### Ignore linting for a file\n```yaml\n// deno-lint-ignore-file\n// deno-lint-ignore-file -- reason for ignoring\n```\n\n### Test function sing\n```yaml\nimport { sing } from \"./sing.ts\";\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test(\"sing repeats a phrase\", () => {\n  const result = sing(\"La\", 3);\n  assertEquals(result, \"La La La\");\n});\n```\n\n### Run tests\n```yaml\ndeno test\n```\n\n### Check code coverage\n```yaml\ndeno test --coverage\n```\n\n### Print coverage report\n```yaml\ndeno coverage\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/all-in-one_tooling", "title": "All-in-one tooling", "description": "This page covers the built-in CLI tools in Deno for linting, formatting, and testing, showcasing how they save time and effort in project setup.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:57:47", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogTitle": "All-in-one tooling", "ogLocale": "en_US", "language": "en", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "ogImage": "/img/og.webp", "og:title": "All-in-one tooling", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "title": "All-in-one tooling", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "All-in-one tooling", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "scrapeId": "c9875412-7730-4854-95af-a68a4b9378e0", "sourceURL": "https://docs.deno.com/examples/all-in-one_tooling", "url": "https://docs.deno.com/examples/all-in-one_tooling/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"All-in-one tooling\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno's built-in tools save time by eliminating the need for extensive configuration before starting a project.\n• Use the formatter to automatically format code according to Deno's rules and conventions.\n• Utilize the lint command to analyze code for potential issues, similar to ESLint.\n• You can skip linting for specific files by adding comments at the top of the file.\n• Deno automatically discovers and runs test files based on naming conventions.\n", "metadata": {"source_url": "https://docs.deno.com/examples/all-in-one_tooling", "title": "All-in-one tooling", "description": "This page covers the built-in CLI tools in Deno for linting, formatting, and testing, showcasing how they save time and effort in project setup.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 00:57:47", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogTitle": "All-in-one tooling", "ogLocale": "en_US", "language": "en", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "ogImage": "/img/og.webp", "og:title": "All-in-one tooling", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "title": "All-in-one tooling", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "All-in-one tooling", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "scrapeId": "c9875412-7730-4854-95af-a68a4b9378e0", "sourceURL": "https://docs.deno.com/examples/all-in-one_tooling", "url": "https://docs.deno.com/examples/all-in-one_tooling/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"ban-types\"?\n\nAssistant: This rule is part of the recommended rule set that bans the use of primitive wrapper objects and non-explicit types in TypeScript.\n\nHere's a detailed explanation:\n\n\n## Enabling the Rule\nEnable full set in `deno.json`:\n\n```\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\nEnable full set using the Deno CLI:\n\n```\ndeno lint --tags=recommended\n```\n\n## Overview\nBans the use of primitive wrapper objects (e.g. `String` the object is a wrapper of `string` the primitive) in addition to the non-explicit `Function` type and the misunderstood `Object` type.\n\nThere are very few situations where primitive wrapper objects are desired and far more often a mistake was made with the case of the primitive type. You also cannot assign a primitive wrapper object to a primitive leading to type issues down the line. For reference, [the TypeScript handbook](https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html#number-string-boolean-symbol-and-object) also says we shouldn't ever use these wrapper objects.\n\nWith `Function`, it is better to explicitly define the entire function signature rather than use the non-specific `Function` type which won't give you type safety with the function.\n\nFinally, `Object` and `{}` means \"any non-nullish value\" rather than \"any object type\". `object` is a good choice for a meaning of \"any object type\".\n\n## Examples\n**Invalid:**\n\n```highlight notranslate typescript\nlet a: Boolean;\nlet b: String;\nlet c: Number;\nlet d: Symbol;\nlet e: Function;\nlet f: Object;\nlet g: {};\n```\n\n**Valid:**\n\n```highlight notranslate typescript\nlet a: boolean;\nlet b: string;\nlet c: number;\nlet d: symbol;\nlet e: () => number;\nlet f: object;\nlet g: Record<string, never>;\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/ban-types", "title": "ban-types", "description": "This rule is part of the recommended rule set that bans the use of primitive wrapper objects and non-explicit types in TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:57:57", "type": "overview", "page_metadata": {"og:type": "article", "title": "ban-types", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:locale": "en_US", "twitter:title": "ban-types", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:image": "/img/og.webp", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "ban-types", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "ban-types", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "f3d9d5b5-0623-4ced-818b-8064d9f66964", "sourceURL": "https://docs.deno.com/lint/rules/ban-types", "url": "https://docs.deno.com/lint/rules/ban-types/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"ban-types\"?\n\nAssistant: Here are some code examples:\n\n### Invalid TypeScript Usage\n```yaml\n```highlight notranslate typescript\nlet a: Boolean;\nlet b: String;\nlet c: Number;\nlet d: Symbol;\nlet e: Function;\nlet f: Object;\nlet g: {};\n```\n```\n\n### Valid TypeScript Usage\n```yaml\n```highlight notranslate typescript\nlet a: boolean;\nlet b: string;\nlet c: number;\nlet d: symbol;\nlet e: () => number;\nlet f: object;\nlet g: Record<string, never>;\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/ban-types", "title": "ban-types", "description": "This rule is part of the recommended rule set that bans the use of primitive wrapper objects and non-explicit types in TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:57:57", "type": "code_examples", "page_metadata": {"og:type": "article", "title": "ban-types", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:locale": "en_US", "twitter:title": "ban-types", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:image": "/img/og.webp", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "ban-types", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "ban-types", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "f3d9d5b5-0623-4ced-818b-8064d9f66964", "sourceURL": "https://docs.deno.com/lint/rules/ban-types", "url": "https://docs.deno.com/lint/rules/ban-types/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"ban-types\"?\n\nAssistant: Here are the recommended best practices:\n\n• Avoid using primitive wrapper objects like Boolean, String, Number, and Symbol.\n• Prefer explicit function signatures over the non-specific Function type for better type safety.\n• Use object instead of Object or {} to represent any object type.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/ban-types", "title": "ban-types", "description": "This rule is part of the recommended rule set that bans the use of primitive wrapper objects and non-explicit types in TypeScript.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:57:57", "type": "best_practices", "page_metadata": {"og:type": "article", "title": "ban-types", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:locale": "en_US", "twitter:title": "ban-types", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:image": "/img/og.webp", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "ban-types", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "ban-types", "twitter:card": "summary_large_image", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "f3d9d5b5-0623-4ced-818b-8064d9f66964", "sourceURL": "https://docs.deno.com/lint/rules/ban-types", "url": "https://docs.deno.com/lint/rules/ban-types/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"interfaceEvent and variableEvent Documentation\"?\n\nAssistant: Documentation for interfaceEvent and variableEvent which describes the properties and methods associated with DOM events.\n\nHere's a detailed explanation:\n\n\n## interfaceEvent\nAn event which takes place in the DOM.\n\n### Properties\n\n- `#bubbles: boolean`\n  Returns true or false depending on how event was initialized. True if event goes through its target's ancestors in reverse tree order, and false otherwise.\n\n- `#cancelBubble: boolean` (deprecated)\n\n- `#cancelable: boolean`\n  Returns true or false depending on how event was initialized. Its return value does not always carry meaning, but true can indicate that part of the operation during which event was dispatched, can be canceled by invoking the preventDefault() method.\n\n- `#composed: boolean`\n  Returns true or false depending on how event was initialized. True if event invokes listeners past a ShadowRoot node that is the root of its target, and false otherwise.\n\n- `#currentTarget: EventTarget | null`\n  Returns the object whose event listener's callback is currently being invoked.\n\n- `#defaultPrevented: boolean`\n  Returns true if preventDefault() was invoked successfully to indicate cancellation, and false otherwise.\n\n- `#eventPhase: number`\n  Returns the event's phase, which is one of NONE, CAPTURING_PHASE, AT_TARGET, and BUBBLING_PHASE.\n\n- `#isTrusted: boolean`\n  Returns true if event was dispatched by the user agent, and false otherwise.\n\n- `#returnValue: boolean` (deprecated)\n\n- `#srcElement: EventTarget | null`\n\n- `#target: EventTarget | null`\n  Returns the object to which event is dispatched (its target).\n\n- `#timeStamp: number`\n  Returns the event's timestamp as the number of milliseconds measured relative to the time origin.\n\n- `#type: string`\n  Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\".\n\n- `#NONE: 0`\n\n- `#CAPTURING_PHASE: 1`\n\n- `#AT_TARGET: 2`\n\n- `#BUBBLING_PHASE: 3`\n\n### Methods\n\n- `#composedPath(): EventTarget[]`\n  Returns the invocation target objects of event's path (objects on which listeners will be invoked), except for any nodes in shadow trees of which the shadow root's mode is \"closed\" that are not reachable from event's currentTarget.\n\n- `#initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void` (deprecated)\n\n- `#preventDefault(): void`\n  If invoked when the cancelable attribute value is true, and while executing a listener for the event with passive set to false, signals to the operation that caused event to be dispatched that it needs to be canceled.\n\n- `#stopImmediatePropagation(): void`\n  Invoking this method prevents event from reaching any registered event listeners after the current one finishes running and, when dispatched in a tree, also prevents event from reaching any other objects.\n\n- `#stopPropagation(): void`\n  When dispatched in a tree, invoking this method prevents event from reaching any objects other than the current object.\n\n## variableEvent\nAn event which takes place in the DOM.\n\n### Properties\n\n- `#prototype: Event`\n\n- `#NONE: 0`\n\n- `#CAPTURING_PHASE: 1`\n\n- `#AT_TARGET: 2`\n\n- `#BUBBLING_PHASE: 3`\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/Event", "title": "interfaceEvent and variableEvent Documentation", "description": "Documentation for interfaceEvent and variableEvent which describes the properties and methods associated with DOM events.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 00:58:09", "type": "overview", "page_metadata": {"og:type": "article", "language": "en", "og:image": "/img/og.webp", "title": "Event - Events - Web documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Event - Events - Web documentation", "og:locale": "en_US", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogTitle": "Event - Events - Web documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:title": "Event - Events - Web documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "2c960db6-6108-40d6-886b-9d5bce5908b9", "sourceURL": "https://docs.deno.com/api/web/~/Event", "url": "https://docs.deno.com/api/web/~/Event", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"valid-typeof\"?\n\nAssistant: This rule restricts the use of the typeof operator to a specific set of string literals.\n\nHere's a detailed explanation:\n\n\n## Enabling the Rule\nEnable full set in `deno.json`:\n\n```\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\nEnable full set using the Deno CLI:\n\n```\ndeno lint --tags=recommended\n```\n\n## Rule Description\nRestricts the use of the `typeof` operator to a specific set of string literals.\n\nWhen used with a value the `typeof` operator returns one of the following strings:\n\n- \"undefined\"\n- \"object\"\n- \"boolean\"\n- \"number\"\n- \"string\"\n- \"function\"\n- \"symbol\"\n- \"bigint\"\n\nThis rule disallows comparison with anything other than one of these string literals when using the `typeof` operator, as this likely represents a typing mistake in the string. The rule also disallows comparing the result of a `typeof` operation with any non-string literal value, such as `undefined`, which can represent an inadvertent use of a keyword instead of a string. This includes comparing against string variables even if they contain one of the above values as this cannot be guaranteed. An exception to this is comparing the results of two `typeof` operations as these are both guaranteed to return one of the above strings.\n\n## Examples\n**Invalid:**\n\n```highlight notranslate typescript\n// typo\ntypeof foo === \"strnig\";\ntypeof foo == \"undefimed\";\ntypeof bar != \"nunber\";\ntypeof bar !== \"fucntion\";\n\n// compare with non-string literals\ntypeof foo === undefined;\ntypeof bar == Object;\ntypeof baz === anotherVariable;\ntypeof foo == 5;\n```\n\n**Valid:**\n\n```highlight notranslate typescript\ntypeof foo === \"undefined\";\ntypeof bar == \"object\";\ntypeof baz === \"string\";\ntypeof bar === typeof qux;\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/valid-typeof", "title": "valid-typeof", "description": "This rule restricts the use of the typeof operator to a specific set of string literals.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:58:19", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "valid-typeof", "twitter:card": "summary_large_image", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "valid-typeof", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:title": "valid-typeof", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "title": "valid-typeof", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "3bee2bc8-a9be-4a3e-90e6-466ce05cd198", "sourceURL": "https://docs.deno.com/lint/rules/valid-typeof", "url": "https://docs.deno.com/lint/rules/valid-typeof/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"valid-typeof\"?\n\nAssistant: Here are some code examples:\n\n### Invalid Examples\n```yaml\n```highlight notranslate typescript\n// typo\ntypeof foo === \"strnig\";\ntypeof foo == \"undefimed\";\ntypeof bar != \"nunber\";\ntypeof bar !== \"fucntion\";\n\n// compare with non-string literals\ntypeof foo === undefined;\ntypeof bar == Object;\ntypeof baz === anotherVariable;\ntypeof foo == 5;\n```\n```\n\n### Valid Examples\n```yaml\n```highlight notranslate typescript\ntypeof foo === \"undefined\";\ntypeof bar == \"object\";\ntypeof baz === \"string\";\ntypeof bar === typeof qux;\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/valid-typeof", "title": "valid-typeof", "description": "This rule restricts the use of the typeof operator to a specific set of string literals.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:58:19", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "valid-typeof", "twitter:card": "summary_large_image", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "valid-typeof", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:title": "valid-typeof", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "title": "valid-typeof", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "3bee2bc8-a9be-4a3e-90e6-466ce05cd198", "sourceURL": "https://docs.deno.com/lint/rules/valid-typeof", "url": "https://docs.deno.com/lint/rules/valid-typeof/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"valid-typeof\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always use string literals when comparing with the typeof operator.\n• Avoid using non-string literals in typeof comparisons to prevent typing mistakes.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/valid-typeof", "title": "valid-typeof", "description": "This rule restricts the use of the typeof operator to a specific set of string literals.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 00:58:19", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "valid-typeof", "twitter:card": "summary_large_image", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "valid-typeof", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:title": "valid-typeof", "og:image": "/img/og.webp", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "title": "valid-typeof", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "3bee2bc8-a9be-4a3e-90e6-466ce05cd198", "sourceURL": "https://docs.deno.com/lint/rules/valid-typeof", "url": "https://docs.deno.com/lint/rules/valid-typeof/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"interfaceRequest\"?\n\nAssistant: This Fetch API interface represents a resource request.\n\nHere's a detailed explanation:\n\n\n## Properties\n### Properties\n\n- `#cache: RequestCache`\n  - Returns the cache mode associated with request, which is a string indicating how the request will interact with the browser's cache when fetching.\n\n- `#credentials: RequestCredentials`\n  - Returns the credentials mode associated with request, which is a string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.\n\n- `#destination: RequestDestination`\n  - Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n\n- `#headers: Headers`\n  - Returns a Headers object consisting of the headers associated with request. Note that headers added in the network layer by the user agent will not be accounted for in this object, e.g., the \"Host\" header.\n\n- `#integrity: string`\n  - Returns request's subresource integrity metadata, which is a cryptographic hash of the resource being fetched. Its value consists of multiple hashes separated by whitespace. [SRI]\n\n- `#isHistoryNavigation: boolean`\n  - Returns a boolean indicating whether or not request is for a history navigation (a.k.a. back-forward navigation).\n\n- `#isReloadNavigation: boolean`\n  - Returns a boolean indicating whether or not request is for a reload navigation.\n\n- `#keepalive: boolean`\n  - Returns a boolean indicating whether or not request can outlive the global in which it was created.\n\n- `#method: string`\n  - Returns request's HTTP method, which is \"GET\" by default.\n\n- `#mode: RequestMode`\n  - Returns the mode associated with request, which is a string indicating whether the request will use CORS, or will be restricted to same-origin URLs.\n\n- `#redirect: RequestRedirect`\n  - Returns the redirect mode associated with request, which is a string indicating how redirects for the request will be handled during fetching. A request will follow redirects by default.\n\n- `#referrer: string`\n  - Returns the referrer of request. Its value can be a same-origin URL if explicitly set in init, the empty string to indicate no referrer, and \"about:client\" when defaulting to the global's default. This is used during fetching to determine the value of the `Referer` header of the request being made.\n\n- `#referrerPolicy: ReferrerPolicy`\n  - Returns the referrer policy associated with request. This is used during fetching to compute the value of the request's referrer.\n\n- `#signal: AbortSignal`\n  - Returns the signal associated with request, which is an AbortSignal object indicating whether or not request has been aborted, and its abort event handler.\n\n- `#url: string`\n  - Returns the URL of request as a string.\n\n## Methods\n### Methods\n\n- `#clone(): Request`\n  - Creates a clone of the request.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/Request", "title": "interfaceRequest", "description": "This Fetch API interface represents a resource request.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 01:02:39", "type": "overview", "page_metadata": {"og:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Request - Fetch - Web documentation", "twitter:card": "summary_large_image", "title": "Request - Fetch - Web documentation", "ogTitle": "Request - Fetch - Web documentation", "og:site_name": "Deno", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Request - Fetch - Web documentation", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "scrapeId": "abb8a2c3-c2c2-4f94-8558-5a5b4c8b69b9", "sourceURL": "https://docs.deno.com/api/web/~/Request", "url": "https://docs.deno.com/api/web/~/Request", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno eval\"?\n\nAssistant: Evaluate JavaScript from the command line.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno eval [OPTIONS] [CODE_ARG]...\n```\n\nEvaluate JavaScript from the command line.\n\n```\ndeno eval \"console.log('hello world')\"\n```\n\nTo evaluate as TypeScript:\n\n```\ndeno eval --ext=ts \"const v: string = 'hello'; console.log(v)\"\n```\n\nThis command has implicit access to all permissions.\n\n## Type checking options\n### `--check`\nEnable type-checking. This subcommand does not type-check by default. If the value of \"all\" is supplied, remote modules will be included. Alternatively, the 'deno check' subcommand can be used.\n\n### `--no-check`\nSkip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored.\n\n## Dependency management options\n### `--cached-only`\nRequire that remote dependencies are already cached.\n\n### `--frozen`\nError out if lockfile is out of date.\n\n### `--import-map`\nLoad import map file from local file or remote URL.\n\n### `--lock`\nCheck the specified lock file. (If value is not provided, defaults to \"./deno.lock\").\n\n### `--no-lock`\nDisable auto discovery of the lock file.\n\n### `--no-npm`\nDo not resolve npm modules.\n\n### `--no-remote`\nDo not resolve remote modules.\n\n### `--node-modules-dir`\nSets the node modules management mode for npm packages.\n\n### `--reload`\nShort flag: `-r`\nReload source code cache (recompile TypeScript)\nno value Reload everything\njsr:@std/http/file-server,jsr:@std/assert/assert-equals Reloads specific modules\nnpm: Reload all npm modules\nnpm:chalk Reload specific npm module.\n\n### `--vendor`\nToggles local vendor folder usage for remote modules and a node_modules folder for npm packages.\n\n## Options\n### `--allow-scripts`\nAllow running npm lifecycle scripts for the given packages. Note: Scripts will only be executed when using a node_modules directory ( `--node-modules-dir`).\n\n### `--cert`\nLoad certificate authority from PEM encoded file.\n\n### `--config`\nShort flag: `-c`\nConfigure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary.\n\n### `--env-file`\nLoad environment variables from local file. Only the first environment variable with a given key is used. Existing process environment variables are not overwritten, so if variables with the same names already exist in the environment, their values will be preserved. Where multiple declarations for the same environment variable exist in your .env file, the first one encountered is applied. This is determined by the order of the files you pass as arguments.\n\n### `--ext`\nSet content type of the supplied file.\n\n### `--location`\nValue of globalThis.location used by some web APIs.\n\n### `--no-config`\nDisable automatic loading of the configuration file.\n\n### `--print`\nShort flag: `-p`\nprint result to stdout.\n\n### `--seed`\nSet the random number generator seed.\n\n### `--v8-flags`\nTo see a list of all available flags use ` --v8-flags=--help`. Flags can also be set via the DENO_V8_FLAGS environment variable. Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable.\n\n## Debugging options\n### `--inspect`\nActivate inspector on host:port [default: 127.0.0.1:9229]\n\n### `--inspect-brk`\nActivate inspector on host:port, wait for debugger to connect and break at the start of user script.\n\n### `--inspect-wait`\nActivate inspector on host:port and wait for debugger to connect before running user code.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/eval", "title": "deno eval", "description": "Evaluate JavaScript from the command line.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:03:30", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:title": "deno eval", "ogLocale": "en_US", "language": "en", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "deno eval", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:title": "deno eval", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "deno eval", "twitter:image": "/img/og.webp", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "scrapeId": "a6d8e7d3-851b-4e2e-82e1-cdd8e904f91c", "sourceURL": "https://docs.deno.com/runtime/reference/cli/eval", "url": "https://docs.deno.com/runtime/reference/cli/eval/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno eval\"?\n\nAssistant: Here are some code examples:\n\n### Basic JavaScript Evaluation\n```yaml\ndeno eval \"console.log('hello world')\"\n```\n\n### TypeScript Evaluation\n```yaml\ndeno eval --ext=ts \"const v: string = 'hello'; console.log(v)\"\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/eval", "title": "deno eval", "description": "Evaluate JavaScript from the command line.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:03:30", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:title": "deno eval", "ogLocale": "en_US", "language": "en", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "deno eval", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:title": "deno eval", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "deno eval", "twitter:image": "/img/og.webp", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "scrapeId": "a6d8e7d3-851b-4e2e-82e1-cdd8e904f91c", "sourceURL": "https://docs.deno.com/runtime/reference/cli/eval", "url": "https://docs.deno.com/runtime/reference/cli/eval/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno eval\"?\n\nAssistant: Here are the recommended best practices:\n\n• This command has implicit access to all permissions.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/eval", "title": "deno eval", "description": "Evaluate JavaScript from the command line.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 01:03:30", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:title": "deno eval", "ogLocale": "en_US", "language": "en", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "deno eval", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:title": "deno eval", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "deno eval", "twitter:image": "/img/og.webp", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "scrapeId": "a6d8e7d3-851b-4e2e-82e1-cdd8e904f91c", "sourceURL": "https://docs.deno.com/runtime/reference/cli/eval", "url": "https://docs.deno.com/runtime/reference/cli/eval/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: The `dns.promises` API provides an alternative set of asynchronous DNS methods that return `Promise` objects rather than using callbacks.\n\nHere's a detailed explanation:\n\n\n## Classes\n### Classes\n\n- [Resolver](https://docs.deno.com/api/node/dns/promises/~/Resolver \"Resolver\")\n\nAn independent resolver for DNS requests.\n\n- [cancel](https://docs.deno.com/api/node/dns/promises/~/Resolver#method_cancel_0)\n- [getServers](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_getservers)\n- [resolve](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolve)\n- [resolve4](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolve4)\n- [resolve6](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolve6)\n- [resolveAny](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolveany)\n- [resolveCaa](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolvecaa)\n- [resolveCname](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolvecname)\n- [resolveMx](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolvemx)\n- [resolveNaptr](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolvenaptr)\n- [resolveNs](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolvens)\n- [resolvePtr](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolveptr)\n- [resolveSoa](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolvesoa)\n- [resolveSrv](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolvesrv)\n- [resolveTxt](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_resolvetxt)\n- [reverse](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_reverse)\n- [setLocalAddress](https://docs.deno.com/api/node/dns/promises/~/Resolver#method_setlocaladdress_0)\n- [setServers](https://docs.deno.com/api/node/dns/promises/~/Resolver#property_setservers)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/dns/promises", "title": "Usage in Deno", "description": "The `dns.promises` API provides an alternative set of asynchronous DNS methods that return `Promise` objects rather than using callbacks.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:06:56", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:title": "dns/promises - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "dns/promises - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "dns/promises - Node documentation", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "language": "en", "og:locale": "en_US", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:site": "@deno_land", "title": "dns/promises - Node documentation", "scrapeId": "de2d8503-63cc-4bc5-829b-4abc69549c4e", "sourceURL": "https://docs.deno.com/api/node/dns/promises", "url": "https://docs.deno.com/api/node/dns/promises/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing dns.promises\n```yaml\nimport * as mod from \"node:dns/promises\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/dns/promises", "title": "Usage in Deno", "description": "The `dns.promises` API provides an alternative set of asynchronous DNS methods that return `Promise` objects rather than using callbacks.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:06:56", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:title": "dns/promises - Node documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "dns/promises - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "dns/promises - Node documentation", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "language": "en", "og:locale": "en_US", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:site": "@deno_land", "title": "dns/promises - Node documentation", "scrapeId": "de2d8503-63cc-4bc5-829b-4abc69549c4e", "sourceURL": "https://docs.deno.com/api/node/dns/promises", "url": "https://docs.deno.com/api/node/dns/promises/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Dynamic import\"?\n\nAssistant: Deno Deploy supports dynamic import but with some limitations. This page outlines these limitations.\n\nHere's a detailed explanation:\n\n\n## Specifiers must be statically determined string literals\nIn the usual dynamic import, specifiers don't need to be determined at build time. So all of the following forms are valid:\n\nValid dynamic imports in Deno CLI\n\n```highlight notranslate ts\n// 1. Statically determined string literal\nawait import(\"jsr:@std/assert\");\n\n// 2. Statically determined, but via variable\nconst specifier = \"jsr:@std/assert\";\nawait import(specifier);\n\n// 3. Statically determined, but template literal\nconst stdModuleName = \"path\";\nawait import(`jsr:@std/${stdModuleName}`);\n\n// 4. Dynamically determined\nconst rand = Math.random();\nconst mod = rand < 0.5 ? \"npm:cowsay\" : \"npm:node-emoji\";\nawait import(mod);\n```\n\nIn Deno Deploy, however, specifiers must be string literals with no string interpolation. So among the three examples above, only the first one works in Deno Deploy.\n\nOnly static string literals work in Deno Deploy\n\n```highlight notranslate ts\n// 1. ✅ Works fine on Deno Deploy\nawait import(\"jsr:@std/assert\");\n\n// 2. ❌ Doesn't work on Deno Deploy\n// because what's passed to `import` is a variable\nconst specifier = \"jsr:@std/streams\";\nawait import(specifier);\n\n// 3. ❌ Doesn't work on Deno Deploy\n// because this has an interpolation\nconst stdModuleName = \"path\";\nawait import(`jsr:@std/${stdModuleName}`);\n\n// 4. ❌ Doesn't work on Deno Deploy\n// because it's dynamic\nconst rand = Math.random();\nconst mod = rand < 0.5 ? \"npm:cowsay\" : \"npm:node-emoji\";\nawait import(mod);\n```\n\n## One exception - dynamic specifiers work for same project files\nSpecifiers that are dynamically determined are supported if target files (modules) are included in the same project.\n\nDynamic specifiers work for files in the same project\n\n```highlight notranslate ts\n// ✅ Works fine on Deno Deploy\nawait import(\"./my_module1.ts\");\n\n// ✅ Works fine on Deno Deploy\nconst rand = Math.random();\nconst modPath = rand < 0.5 ? \"dir1/moduleA.ts\" : \"dir2/dir3/moduleB.ts\";\nawait import(`./${modPath}`);\n```\n\nNote that template literals starting with `./` tell the module resolver that the target module is in the same project. Conversely, if a specifier does not start with `./`, the possible target modules will not be included the resulting eszip, causing dynamic imports to fail at runtime, even if the final evaluated specifier starts with `./`.\n\n```highlight notranslate ts\n// ❌ Doesn't work because the analyzer can't statically determine if the\n// specifier starts with `./` or not in this case.\n// Compare this to the previous example. Only difference is whether to put\n// `./` in the template literal or in the variable.\nconst rand = Math.random();\nconst modPath = rand < 0.5 ? \"./dir1/moduleA.ts\" : \"./dir2/dir3/moduleB.ts\";\nawait import(modPath);\n```\n\nWe will consider if we can relax this constraint in the future.\n\n## What is eszip?\nWhen you do a new deployment on Deno Deploy, the system analyzes your code, constructs the module graph by recursively traversing it, and bundles all the dependencies into a single file. We call this eszip. Since its creation is done completely statically, dynamic import capabilities are limited on Deno Deploy.\n\n## Data URLs\nData URL can be used as a specifier passed to dynamic imports.\n\nStatic data URL\n\n```highlight notranslate ts\n// ✅ Works fine on Deno Deploy\nconst { val } = await import(\n  \"data:text/javascript,export const val = 42;\"\n);\nconsole.log(val); // -> 42\n```\n\nFor data URLs, fully dynamic data is supported.\n\nDynamic data URL\n\n```highlight notranslate ts\nfunction generateDynamicDataUrl() {\n  const moduleStr = `export const val = ${Math.random()};`;\n  return `data:text/javascript,${moduleStr}`;\n}\n\n// ✅ Works fine on Deno Deploy\nconst { val } = await import(generateDynamicDataUrl());\nconsole.log(val); // -> Random value is printed\n```\n\nApplying this technique to JavaScript code fetched from the web, you can even simulate a true dynamic import:\n\nexternal.js\n\n```highlight notranslate js\nexport const name = \"external.js\";\n```\n\nDynamic data URL from fetched source\n\n```highlight notranslate ts\nimport { assert } from \"jsr:@std/assert/assert\";\nconst res = await fetch(\n  \"https://gist.githubusercontent.com/magurotuna/1cacb136f9fd6b786eb8bbad92c8e6d6/raw/56a96fd0d246fd3feabbeecea6ea1155bdf5f50d/external.js\",\n);\nassert(res.ok);\nconst src = await res.text();\nconst dataUrl = `data:application/javascript,${src}`;\n\n// ✅ Works fine on Deno Deploy\nconst { name } = await import(dataUrl);\nconsole.log(`Hello from ${name}`); // -> \"Hello from external.js\"\n```\n\nHowever, note that data URL given to import has to be JavaScript; TypeScript, when passed, throws a TypeError at runtime.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/dynamic-import", "title": "Dynamic import", "description": "Deno Deploy supports dynamic import but with some limitations. This page outlines these limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:07:49", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "language": "en", "title": "Dynamic import", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Dynamic import", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "twitter:image": "/img/og.webp", "twitter:title": "Dynamic import", "og:title": "Dynamic import", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:site": "@deno_land", "scrapeId": "4e62679e-afcc-4e6a-8db3-d1744819cf25", "sourceURL": "https://docs.deno.com/deploy/api/dynamic-import", "url": "https://docs.deno.com/deploy/api/dynamic-import/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Dynamic import\"?\n\nAssistant: Here are some code examples:\n\n### Valid dynamic imports in Deno CLI\n```yaml\n```highlight notranslate ts\n// 1. Statically determined string literal\nawait import(\"jsr:@std/assert\");\n\n// 2. Statically determined, but via variable\nconst specifier = \"jsr:@std/assert\";\nawait import(specifier);\n\n// 3. Statically determined, but template literal\nconst stdModuleName = \"path\";\nawait import(`jsr:@std/${stdModuleName}`);\n\n// 4. Dynamically determined\nconst rand = Math.random();\nconst mod = rand < 0.5 ? \"npm:cowsay\" : \"npm:node-emoji\";\nawait import(mod);\n```\n```\n\n### Only static string literals work in Deno Deploy\n```yaml\n```highlight notranslate ts\n// 1. ✅ Works fine on Deno Deploy\nawait import(\"jsr:@std/assert\");\n\n// 2. ❌ Doesn't work on Deno Deploy\n// because what's passed to `import` is a variable\nconst specifier = \"jsr:@std/streams\";\nawait import(specifier);\n\n// 3. ❌ Doesn't work on Deno Deploy\n// because this has an interpolation\nconst stdModuleName = \"path\";\nawait import(`jsr:@std/${stdModuleName}`);\n\n// 4. ❌ Doesn't work on Deno Deploy\n// because it's dynamic\nconst rand = Math.random();\nconst mod = rand < 0.5 ? \"npm:cowsay\" : \"npm:node-emoji\";\nawait import(mod);\n```\n```\n\n### Dynamic specifiers work for files in the same project\n```yaml\n```highlight notranslate ts\n// ✅ Works fine on Deno Deploy\nawait import(\"./my_module1.ts\");\n\n// ✅ Works fine on Deno Deploy\nconst rand = Math.random();\nconst modPath = rand < 0.5 ? \"dir1/moduleA.ts\" : \"dir2/dir3/moduleB.ts\";\nawait import(`./${modPath}`);\n```\n```\n\n### Dynamic data URL\n```yaml\n```highlight notranslate ts\nfunction generateDynamicDataUrl() {\n  const moduleStr = `export const val = ${Math.random()};`;\n  return `data:text/javascript,${moduleStr}`;\n}\n\n// ✅ Works fine on Deno Deploy\nconst { val } = await import(generateDynamicDataUrl());\nconsole.log(val); // -> Random value is printed\n```\n```\n\n### Dynamic data URL from fetched source\n```yaml\n```highlight notranslate ts\nimport { assert } from \"jsr:@std/assert/assert\";\nconst res = await fetch(\n  \"https://gist.githubusercontent.com/magurotuna/1cacb136f9fd6b786eb8bbad92c8e6d6/raw/56a96fd0d246fd3feabbeecea6ea1155bdf5f50d/external.js\",\n);\nassert(res.ok);\nconst src = await res.text();\nconst dataUrl = `data:application/javascript,${src}`;\n\n// ✅ Works fine on Deno Deploy\nconst { name } = await import(dataUrl);\nconsole.log(`Hello from ${name}`); // -> \"Hello from external.js\"\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/dynamic-import", "title": "Dynamic import", "description": "Deno Deploy supports dynamic import but with some limitations. This page outlines these limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:07:49", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "language": "en", "title": "Dynamic import", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Dynamic import", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "twitter:image": "/img/og.webp", "twitter:title": "Dynamic import", "og:title": "Dynamic import", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:site": "@deno_land", "scrapeId": "4e62679e-afcc-4e6a-8db3-d1744819cf25", "sourceURL": "https://docs.deno.com/deploy/api/dynamic-import", "url": "https://docs.deno.com/deploy/api/dynamic-import/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Dynamic import\"?\n\nAssistant: Here are the recommended best practices:\n\n• Specifiers must be statically determined string literals in Deno Deploy.\n• Dynamic specifiers work for files in the same project.\n• Data URLs can be used as specifiers for dynamic imports.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/dynamic-import", "title": "Dynamic import", "description": "Deno Deploy supports dynamic import but with some limitations. This page outlines these limitations.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:07:49", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "language": "en", "title": "Dynamic import", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Dynamic import", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "og:type": "article", "og:locale": "en_US", "twitter:image": "/img/og.webp", "twitter:title": "Dynamic import", "og:title": "Dynamic import", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:site": "@deno_land", "scrapeId": "4e62679e-afcc-4e6a-8db3-d1744819cf25", "sourceURL": "https://docs.deno.com/deploy/api/dynamic-import", "url": "https://docs.deno.com/deploy/api/dynamic-import/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Cron Tasks in Deno\"?\n\nAssistant: This page covers how to schedule and manage cron tasks using the Deno.cron interface, including design limitations, usage on Deno Deploy, and configuration examples.\n\nHere's a detailed explanation:\n\n\n## Scheduling cron tasks\nThe [`Deno.cron`](https://docs.deno.com/api/deno/~/Deno.cron) interface enables you to configure JavaScript or TypeScript code that executes on a configurable schedule using [cron syntax](https://en.wikipedia.org/wiki/Cron). In the example below, we configure a block of JavaScript code that will execute every minute.\n\n```highlight notranslate ts\nDeno.cron(\"Log a message\", \"* * * * *\", () => {\n  console.log(\"This will print once a minute.\");\n});\n```\n\nIt's also possible to use JavaScript objects to define the cron schedule. In the example below, we configure a block of JavaScript code that will execute once an hour.\n\n```highlight notranslate ts\nDeno.cron(\"Log a message\", { hour: { every: 1 } }, () => {\n  console.log(\"This will print once an hour.\");\n});\n```\n\n`Deno.cron` takes three arguments:\n\n- A human-readable name for the cron task\n- A cron schedule string or JavaScript object that defines a schedule on which the cron job will run\n- a function to be executed on the given schedule\n\nIf you are new to cron syntax, there are a number of third party modules [like this one](https://www.npmjs.com/package/cron-time-generator) that will help you generate cron schedule strings.\n\n## Retrying failed runs\nFailed cron invocations are automatically retried with a default retry policy. If you would like to specify a custom retry policy, you can use the `backoffSchedule` property to specify an array of wait times (in milliseconds) to wait before retrying the function call again. In the following example, we will attempt to retry failed callbacks three times - after one second, five seconds, and then ten seconds.\n\n```highlight notranslate ts\nDeno.cron(\"Retry example\", \"* * * * *\", () => {\n  throw new Error(\"Deno.cron will retry this three times, to no avail!\");\n}, {\n  backoffSchedule: [1000, 5000, 10000],\n});\n```\n\n## Design and limitations\nBelow are some design details and limitations to be aware of when using `Deno.cron`.\n\n## Tasks must be defined at the top level module scope\nThe [`Deno.cron`](https://docs.deno.com/api/deno/~/Deno.cron) interface is designed to support static definition of cron tasks based on pre-defined schedules. All `Deno.cron` tasks must be defined at the top-level of a module. Any nested `Deno.cron` definitions (e.g. inside [`Deno.serve`](https://docs.deno.com/api/deno/~/Deno.serve) handler) will result in an error or will be ignored.\n\nIf you need to schedule tasks dynamically during your Deno program execution, you can use the [Deno Queues](https://docs.deno.com/deploy/kv/manual/queue_overview) APIs.\n\n## Time zone\n`Deno.cron` schedules are specified using UTC time zone. This helps avoid issues with time zones which observe daylight saving time.\n\n## Overlapping executions\nIt's possible for the next scheduled invocation of your cron task to overlap with the previous invocation. If this occurs, `Deno.cron` will skip the next scheduled invocation in order to avoid overlapping executions.\n\n## Day-of-week numeric representation\n`Deno.cron` does not use 0-based day-of-week numeric representation. Instead, it uses 1-7 (or SUN-SAT) to represent Sunday through Saturday. This may be different compared to other cron engines which use 0-6 representation.\n\n## Usage on Deno Deploy\nWith [Deno Deploy](https://deno.com/deploy), you can run your background tasks on V8 isolates in the cloud. When doing so, there are a few considerations to keep in mind.\n\n## Differences with Deno CLI\nLike other Deno runtime built-ins (like queues and Deno KV), the `Deno.cron` implementation works slightly differently on Deno Deploy.\n\n## How cron works by default\nThe implementation of `Deno.cron` in the Deno runtime keeps execution state in-memory. If you run multiple Deno programs that use `Deno.cron`, each program will have its own independent set of cron tasks.\n\n## How cron works on Deno Deploy\nDeno Deploy provides a serverless implementation of `Deno.cron` that is designed for high availability and scale. Deno Deploy automatically extracts your `Deno.cron` definitions at deployment time, and schedules them for execution using on-demand isolates. Your latest production deployment defines the set of active cron tasks that are scheduled for execution. To add, remove, or modify cron tasks, simply modify your code and create a new production deployment.\n\nDeno Deploy guarantees that your cron tasks are executed at least once per each scheduled time interval. This generally means that your cron handler will be invoked once per scheduled time. In some failure scenarios, the handler may be invoked multiple times for the same scheduled time.\n\n## Cron dashboard\nWhen you make a production deployment that includes a cron task, you can view a list of all your cron tasks in the [Deploy dashboard](https://dash.deno.com/projects) under the `Cron` tab for your project.\n\n## Pricing\n`Deno.cron` invocations are charged at the same rate as inbound HTTP requests to your deployments. Learn more about pricing [here](https://deno.com/deploy/pricing).\n\n## Deploy-specific limitations\n- `Deno.cron` is only available for production deployments (not preview deployments)\n- The exact invocation time of your `Deno.cron` handler may vary by up to a minute from the scheduled time.\n\n## Cron configuration examples\nHere are a few common cron configurations, provided for your convenience.\n\nRun once a minute\n\n```highlight notranslate ts\nDeno.cron(\"Run once a minute\", \"* * * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\nRun every fifteen minutes\n\n```highlight notranslate ts\nDeno.cron(\"Run every fifteen minutes\", \"*/15 * * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\nRun once an hour, on the hour\n\n```highlight notranslate ts\nDeno.cron(\"Run once an hour, on the hour\", \"0 * * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\nRun every three hours\n\n```highlight notranslate ts\nDeno.cron(\"Run every three hours\", \"0 */3 * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\nRun every day at 1am\n\n```highlight notranslate ts\nDeno.cron(\"Run every day at 1am\", \"0 1 * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\nRun every Wednesday at midnight\n\n```highlight notranslate ts\nDeno.cron(\"Run every Wednesday at midnight\", \"0 0 * * WED\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\nRun on the first of the month at midnight\n\n```highlight notranslate ts\nDeno.cron(\"Run on the first of the month at midnight\", \"0 0 1 * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/cron", "title": "Cron Tasks in Deno", "description": "This page covers how to schedule and manage cron tasks using the Deno.cron interface, including design limitations, usage on Deno Deploy, and configuration examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-28 01:08:18", "type": "overview", "page_metadata": {"og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Scheduling cron tasks", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "language": "en", "ogTitle": "Scheduling cron tasks", "og:title": "Scheduling cron tasks", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "title": "Scheduling cron tasks", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en_US", "scrapeId": "918c980a-1a5e-4880-bd92-4bd4c0d43e77", "sourceURL": "https://docs.deno.com/deploy/kv/manual/cron", "url": "https://docs.deno.com/deploy/kv/manual/cron/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Cron Tasks in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Log a message every minute\n```yaml\nDeno.cron(\"Log a message\", \"* * * * *\", () => {\n  console.log(\"This will print once a minute.\");\n});\n```\n\n### Log a message once an hour\n```yaml\nDeno.cron(\"Log a message\", { hour: { every: 1 } }, () => {\n  console.log(\"This will print once an hour.\");\n});\n```\n\n### Retry example\n```yaml\nDeno.cron(\"Retry example\", \"* * * * *\", () => {\n  throw new Error(\"Deno.cron will retry this three times, to no avail!\");\n}, {\n  backoffSchedule: [1000, 5000, 10000],\n});\n```\n\n### Run once a minute\n```yaml\nDeno.cron(\"Run once a minute\", \"* * * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\n### Run every fifteen minutes\n```yaml\nDeno.cron(\"Run every fifteen minutes\", \"*/15 * * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\n### Run once an hour, on the hour\n```yaml\nDeno.cron(\"Run once an hour, on the hour\", \"0 * * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\n### Run every three hours\n```yaml\nDeno.cron(\"Run every three hours\", \"0 */3 * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\n### Run every day at 1am\n```yaml\nDeno.cron(\"Run every day at 1am\", \"0 1 * * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\n### Run every Wednesday at midnight\n```yaml\nDeno.cron(\"Run every Wednesday at midnight\", \"0 0 * * WED\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\n### Run on the first of the month at midnight\n```yaml\nDeno.cron(\"Run on the first of the month at midnight\", \"0 0 1 * *\", () => {\n  console.log(\"Hello, cron!\");\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/cron", "title": "Cron Tasks in Deno", "description": "This page covers how to schedule and manage cron tasks using the Deno.cron interface, including design limitations, usage on Deno Deploy, and configuration examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-28 01:08:18", "type": "code_examples", "page_metadata": {"og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Scheduling cron tasks", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "language": "en", "ogTitle": "Scheduling cron tasks", "og:title": "Scheduling cron tasks", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "title": "Scheduling cron tasks", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en_US", "scrapeId": "918c980a-1a5e-4880-bd92-4bd4c0d43e77", "sourceURL": "https://docs.deno.com/deploy/kv/manual/cron", "url": "https://docs.deno.com/deploy/kv/manual/cron/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Cron Tasks in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use UTC time zone for cron schedules to avoid daylight saving time issues.\n• Define all `Deno.cron` tasks at the top level of a module to avoid errors.\n• Consider using third-party modules to generate cron schedule strings if you're new to cron syntax.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/cron", "title": "Cron Tasks in Deno", "description": "This page covers how to schedule and manage cron tasks using the Deno.cron interface, including design limitations, usage on Deno Deploy, and configuration examples.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-28 01:08:18", "type": "best_practices", "page_metadata": {"og:site_name": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "twitter:title": "Scheduling cron tasks", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "language": "en", "ogTitle": "Scheduling cron tasks", "og:title": "Scheduling cron tasks", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "title": "Scheduling cron tasks", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en_US", "scrapeId": "918c980a-1a5e-4880-bd92-4bd4c0d43e77", "sourceURL": "https://docs.deno.com/deploy/kv/manual/cron", "url": "https://docs.deno.com/deploy/kv/manual/cron/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"use-isnan\"?\n\nAssistant: This rule disallows comparisons to NaN in JavaScript, encouraging the use of isNaN() or Number.isNaN() for checking NaN values.\n\nHere's a detailed explanation:\n\n\n## Overview\nDisallows comparisons to NaN. Because NaN is unique in JavaScript by not being equal to anything, including itself, the results of comparisons to NaN are confusing:\n\n- NaN === NaN or NaN == NaN evaluate to false\n- NaN !== NaN or NaN != NaN evaluate to true\n\nTherefore, this rule makes you use the isNaN() or Number.isNaN() to judge the value is NaN or not.\n\n## Invalid Examples\nThe following examples demonstrate invalid comparisons to NaN:\n\n```typescript\nif (foo == NaN) {\n  // ...\n}\n\nif (foo != NaN) {\n  // ...\n}\n\nswitch (NaN) {\n  case foo:\n    // ...\n}\n\nswitch (foo) {\n  case NaN:\n    // ...\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/use-isnan", "title": "use-isnan", "description": "This rule disallows comparisons to NaN in JavaScript, encouraging the use of isNaN() or Number.isNaN() for checking NaN values.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:08:40", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "use-isnan", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "use-isnan", "twitter:card": "summary_large_image", "twitter:title": "use-isnan", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:title": "use-isnan", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "language": "en", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "scrapeId": "b597867a-071d-40ac-a002-4490cfec0cd5", "sourceURL": "https://docs.deno.com/lint/rules/use-isnan", "url": "https://docs.deno.com/lint/rules/use-isnan/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"use-isnan\"?\n\nAssistant: Here are some code examples:\n\n### Enable full set in deno.json\n```yaml\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n### Enable full set using the Deno CLI\n```yaml\ndeno lint --tags=recommended\n```\n\n### Valid Examples\n```yaml\n```typescript\nif (isNaN(foo)) {\n  // ...\n}\n\nif (!isNaN(foo)) {\n  // ...\n}\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/use-isnan", "title": "use-isnan", "description": "This rule disallows comparisons to NaN in JavaScript, encouraging the use of isNaN() or Number.isNaN() for checking NaN values.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:08:40", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "use-isnan", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "use-isnan", "twitter:card": "summary_large_image", "twitter:title": "use-isnan", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:title": "use-isnan", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "language": "en", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "scrapeId": "b597867a-071d-40ac-a002-4490cfec0cd5", "sourceURL": "https://docs.deno.com/lint/rules/use-isnan", "url": "https://docs.deno.com/lint/rules/use-isnan/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"use-isnan\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always use isNaN() or Number.isNaN() to check for NaN values instead of direct comparisons.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/use-isnan", "title": "use-isnan", "description": "This rule disallows comparisons to NaN in JavaScript, encouraging the use of isNaN() or Number.isNaN() for checking NaN values.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:08:40", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "use-isnan", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "use-isnan", "twitter:card": "summary_large_image", "twitter:title": "use-isnan", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "og:title": "use-isnan", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "language": "en", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "scrapeId": "b597867a-071d-40ac-a002-4490cfec0cd5", "sourceURL": "https://docs.deno.com/lint/rules/use-isnan", "url": "https://docs.deno.com/lint/rules/use-isnan/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno check\"?\n\nAssistant: Download and type-check without execution.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno check [OPTIONS] [file]...\n```\n\nDownload and type-check without execution.\n\n```\ndeno check jsr:@std/http/file-server\n\n```\n\nUnless --reload is specified, this command will not re-download already cached dependencies.\n\n## Dependency management options\n### `--frozen`\nError out if lockfile is out of date.\n\n### `--import-map`\nLoad import map file from local file or remote URL.\n\n### `--lock`\nCheck the specified lock file. (If value is not provided, defaults to \"./deno.lock\").\n\n### `--no-lock`\nDisable auto discovery of the lock file.\n\n### `--no-npm`\nDo not resolve npm modules.\n\n### `--no-remote`\nDo not resolve remote modules.\n\n### `--node-modules-dir`\nSets the node modules management mode for npm packages.\n\n### `--reload`\nShort flag: `-r`\n\nReload source code cache (recompile TypeScript)\nno value Reload everything\njsr:@std/http/file-server,jsr:@std/assert/assert-equals Reloads specific modules\nnpm: Reload all npm modules\nnpm:chalk Reload specific npm module.\n\n### `--vendor`\nToggles local vendor folder usage for remote modules and a node_modules folder for npm packages.\n\n## Options\n### `--all`\nType-check all code, including remote modules and npm packages.\n\n### `--allow-import`\nShort flag: `-I`\n\nAllow importing from remote hosts. Optionally specify allowed IP addresses and host names, with ports as necessary. Default value: deno.land:443, [jsr.io:443](http://jsr.io:443/), [esm.sh:443](http://esm.sh:443/), [cdn.jsdelivr.net:443](http://cdn.jsdelivr.net:443/), [raw.githubusercontent.com:443](http://raw.githubusercontent.com:443/), [user.githubusercontent.com:443](http://user.githubusercontent.com:443/).\n\n### `--cert`\nLoad certificate authority from PEM encoded file.\n\n### `--config`\nShort flag: `-c`\n\nConfigure different aspects of deno including TypeScript, linting, and code formatting\nTypically the configuration file will be called `deno.json` or `deno.jsonc` and\nautomatically detected; in that case this flag is not necessary.\n\n### `--doc`\nType-check code blocks in JSDoc as well as actual code.\n\n### `--doc-only`\nType-check code blocks in JSDoc and Markdown only.\n\n### `--no-code-cache`\nDisable V8 code cache feature.\n\n### `--no-config`\nDisable automatic loading of the configuration file.\n\n## Example\nType-check without execution.\n\nexample.ts\n\n```highlight notranslate ts\nconst x: string = 1 + 1n;\n\n```\n\n```highlight notranslate bash\ndeno check example.ts\n\n```\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/check", "title": "deno check", "description": "Download and type-check without execution.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:10:01", "type": "overview", "page_metadata": {"language": "en", "ogTitle": "deno check", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "deno check", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "deno check", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "deno check", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "twitter:site": "@deno_land", "scrapeId": "1b00606a-c8f5-4dd7-ab3d-a87da3b02d1a", "sourceURL": "https://docs.deno.com/runtime/reference/cli/check", "url": "https://docs.deno.com/runtime/reference/cli/check/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno check\"?\n\nAssistant: Here are some code examples:\n\n### Command line usage example\n```yaml\ndeno check [OPTIONS] [file]...\n\ndeno check jsr:@std/http/file-server\n```\n\n### Type-check example\n```yaml\nconst x: string = 1 + 1n;\n\ndeno check example.ts\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/check", "title": "deno check", "description": "Download and type-check without execution.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:10:01", "type": "code_examples", "page_metadata": {"language": "en", "ogTitle": "deno check", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "deno check", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "deno check", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "deno check", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "twitter:site": "@deno_land", "scrapeId": "1b00606a-c8f5-4dd7-ab3d-a87da3b02d1a", "sourceURL": "https://docs.deno.com/runtime/reference/cli/check", "url": "https://docs.deno.com/runtime/reference/cli/check/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno check\"?\n\nAssistant: Here are the recommended best practices:\n\n• Unless --reload is specified, this command will not re-download already cached dependencies.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/check", "title": "deno check", "description": "Download and type-check without execution.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:10:01", "type": "best_practices", "page_metadata": {"language": "en", "ogTitle": "deno check", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "ogImage": "/img/og.webp", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "deno check", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "deno check", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "deno check", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "twitter:site": "@deno_land", "scrapeId": "1b00606a-c8f5-4dd7-ab3d-a87da3b02d1a", "sourceURL": "https://docs.deno.com/runtime/reference/cli/check", "url": "https://docs.deno.com/runtime/reference/cli/check/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"no-undef\"?\n\nAssistant: Disallow the use of undeclared variables.\n\nHere's a detailed explanation:\n\n\n## Invalid Example\n```highlight notranslate typescript\nconst foo = someFunction();\nconst bar = a + 1;\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-undef", "title": "no-undef", "description": "Disallow the use of undeclared variables.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:10:20", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "no-undef", "og:site_name": "Deno", "og:title": "no-undef", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "title": "no-undef", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "twitter:title": "no-undef", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "37671062-cbd7-4881-89f0-cffcb0be733e", "sourceURL": "https://docs.deno.com/lint/rules/no-undef", "url": "https://docs.deno.com/lint/rules/no-undef/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"no-undef\"?\n\nAssistant: Here are some code examples:\n\n### Invalid Code Example\n```yaml\n```highlight notranslate typescript\nconst foo = someFunction();\nconst bar = a + 1;\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-undef", "title": "no-undef", "description": "Disallow the use of undeclared variables.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:10:20", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "no-undef", "og:site_name": "Deno", "og:title": "no-undef", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "title": "no-undef", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "twitter:title": "no-undef", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "37671062-cbd7-4881-89f0-cffcb0be733e", "sourceURL": "https://docs.deno.com/lint/rules/no-undef", "url": "https://docs.deno.com/lint/rules/no-undef/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"API server with Postgres\"?\n\nAssistant: Postgres is a popular database for web applications because of its flexibility and ease of use. This guide will show you how to use Deno Deploy with Postgres.\n\nHere's a detailed explanation:\n\n\n## Overview\nWe are going to build the API for a simple todo list application. It will have two endpoints:\n\n`GET /todos` will return a list of all todos, and `POST /todos` will create a new todo.\n\n```\nGET /todos\n---\ntitle: \"returns a list of all todos\"\n---\n[\\\n  {\\\n    \"id\": 1,\\\n    \"title\": \"Buy bread\"\\\n  },\\\n  {\\\n    \"id\": 2,\\\n    \"title\": \"Buy rice\"\\\n  },\\\n  {\\\n    \"id\": 3,\\\n    \"title\": \"Buy spices\"\\\n  }\\\n]\n\nPOST /todos\n---\ntitle: \"creates a new todo\"\n---\n\"Buy milk\"\n---\ntitle: \"returns a 201 status code\"\n---\n```\n\nIn this tutorial, we will be:\n\n- Creating and setting up a [Postgres](https://www.postgresql.org/) instance on [Neon Postgres](https://neon.tech/) or [Supabase](https://supabase.com/).\n- Using a [Deno Deploy](https://docs.deno.com/deploy/manual/deployctl/) Playground to develop and deploy the application.\n- Testing our application using [cURL](https://curl.se/).\n\n## Setup Postgres\n> This tutorial will focus entirely on connecting to Postgres unencrypted. If you would like to use encryption with a custom CA certificate, use the documentation [here](https://deno-postgres.com/#/?id=ssltls-connection).\n\nTo get started we need to create a new Postgres instance for us to connect to. For this tutorial, you can use either [Neon Postgres](https://neon.tech/) or [Supabase](https://supabase.com/), as they both provide free, managed Postgres instances. If you like to host your database somewhere else, you can do that too.\n\n### Neon Postgres\n\n1. Visit [https://neon.tech/](https://neon.tech/) and click **Sign up** to sign up with an email, Github, Google, or partner account. After signing up, you are directed to the Neon Console to create your first project.\n\n2. Enter a name for your project, select a Postgres version, provide a database name, and select a region. Generally, you'll want to select the region closest to your application. When you're finished, click **Create project**.\n\n3. You are presented with the connection string for your new project, which you can use to connect to your database. Save the connection string, which looks something like this:\n\n```highlight notranslate sh\npostgres://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require\n```\n\n### Supabase\n\n1. Visit [https://app.supabase.io/](https://app.supabase.io/) and click \"New project\".\n2. Select a name, password, and region for your database. Make sure to save the password, as you will need it later.\n3. Click \"Create new project\". Creating the project can take a while, so be patient.\n4. Once the project is created, navigate to the \"Database\" tab on the left.\n5. Go to the \"Connection Pooling\" settings, and copy the connection string from the \"Connection String\" field. This is the connection string you will use to connect to your database. Insert the password you saved earlier into this string, and then save the string somewhere - you will need it later.\n\n## Write and deploy the application\nWe can now start writing our application. To start, we will create a new Deno Deploy playground in the control panel: press the \"New Playground\" button on [https://dash.deno.com/projects](https://dash.deno.com/projects).\n\nThis will open up the playground editor. Before we can actually start writing code, we'll need to put our Postgres connection string into the environment variables. To do this, click on the project name in the top left corner of the editor. This will open up the project settings.\n\nFrom here, you can navigate to the \"Settings\" -> \"Environment Variable\" tab via the left navigation menu. Enter \"DATABASE_URL\" into the \"Key\" field, and paste your connection string into the \"Value\" field. Now, press \"Add\". Your environment variables is now set.\n\nLet's return back to the editor: to do this, go to the \"Overview\" tab via the left navigation menu, and press \"Open Playground\". Let's start by serving HTTP requests using `Deno.serve()`:\n\n```highlight notranslate ts\nDeno.serve(async (req) => {\n  return new Response(\"Not Found\", { status: 404 });\n});\n```\n\nYou can already save this code using `Ctrl` + `S` (or `Cmd` + `S` on Mac). You should see the preview page on the right refresh automatically: it now says \"Not Found\".\n\nNext, let's import the Postgres module, read the connection string from the environment variables, and create a connection pool.\n\n```highlight notranslate ts\nimport * as postgres from \"https://deno.land/x/postgres@v0.14.0/mod.ts\";\n\n// Get the connection string from the environment variable \"DATABASE_URL\"\nconst databaseUrl = Deno.env.get(\"DATABASE_URL\")!;\n\n// Create a database pool with three connections that are lazily established\nconst pool = new postgres.Pool(databaseUrl, 3, true);\n```\n\nAgain, you can save this code now, but this time you should see no changes. We are creating a connection pool, but we are not actually running any queries against the database yet. Before we can do that, we need to set up our table schema.\n\nWe want to store a list of todos. Let's create a table called `todos` with an auto-increment `id` column and a `title` column:\n\n```highlight notranslate ts\nconst pool = new postgres.Pool(databaseUrl, 3, true);\n\n// Connect to the database\nconst connection = await pool.connect();\ntry {\n  // Create the table\n  await connection.queryObject`\n    CREATE TABLE IF NOT EXISTS todos (\n      id SERIAL PRIMARY KEY,\n      title TEXT NOT NULL\n    )\n  `;\n} finally {\n  // Release the connection back into the pool\n  connection.release();\n}\n```\n\nNow that we have a table, we can add the HTTP handlers for the GET and POST endpoints.\n\n```highlight notranslate ts\nDeno.serve(async (req) => {\n  // Parse the URL and check that the requested endpoint is /todos. If it is\n  // not, return a 404 response.\n  const url = new URL(req.url);\n  if (url.pathname !== \"/todos\") {\n    return new Response(\"Not Found\", { status: 404 });\n  }\n\n  // Grab a connection from the database pool\n  const connection = await pool.connect();\n\n  try {\n    switch (req.method) {\n      case \"GET\": { // This is a GET request. Return a list of all todos.\n        // Run the query\n        const result = await connection.queryObject`\n          SELECT * FROM todos\n        `;\n\n        // Encode the result as JSON\n        const body = JSON.stringify(result.rows, null, 2);\n\n        // Return the result as JSON\n        return new Response(body, {\n          headers: { \"content-type\": \"application/json\" },\n        });\n      }\n      case \"POST\": { // This is a POST request. Create a new todo.\n        // Parse the request body as JSON. If the request body fails to parse,\n        // is not a string, or is longer than 256 chars, return a 400 response.\n        const title = await req.json().catch(() => null);\n        if (typeof title !== \"string\" || title.length > 256) {\n          return new Response(\"Bad Request\", { status: 400 });\n        }\n\n        // Insert the new todo into the database\n        await connection.queryObject`\n          INSERT INTO todos (title) VALUES (${title})\n        `;\n\n        // Return a 201 Created response\n        return new Response(\"\", { status: 201 });\n      }\n      default: // If this is neither a POST, or a GET return a 405 response.\n        return new Response(\"Method Not Allowed\", { status: 405 });\n    }\n  } catch (err) {\n    console.error(err);\n    // If an error occurs, return a 500 response\n    return new Response(`Internal Server Error\\n\\n${err.message}`, {\n      status: 500,\n    });\n  } finally {\n    // Release the connection back into the pool\n    connection.release();\n  }\n});\n```\n\nAnd there we go - application done. Deploy this code by saving the editor. You can now POST to the `/todos` endpoint to create a new todo, and you can get a list of all todos by making a GET request to `/todos`:\n\n```highlight notranslate sh\n$ curl -X GET https://tutorial-postgres.deno.dev/todos\n[]⏎\n\n$ curl -X POST -d '\"Buy milk\"' https://tutorial-postgres.deno.dev/todos\n\n$ curl -X GET https://tutorial-postgres.deno.dev/todos\n[\\\n  {\\\n    \"id\": 1,\\\n    \"title\": \"Buy milk\"\\\n  }\\\n]⏎\n```\n\nIt's all working 🎉\n\nThe full code for the tutorial:\n```\nimport { serve } from \"https://deno.land/std@0.114.0/http/server.ts\";\nimport * as postgres from \"https://deno.land/x/postgres@v0.14.2/mod.ts\";\n\n// Get the connection string from the environment variable \"DATABASE_URL\"\nconst databaseUrl = Deno.env.get(\"DATABASE_URL\")!;\n\n// Create a database pool with three connections that are lazily established\nconst pool = new postgres.Pool(databaseUrl, 3, true);\n\n// Connect to the database\nconst connection = await pool.connect();\ntry {\n  // Create the table\n  await connection.queryObject`\n    CREATE TABLE IF NOT EXISTS todos (\n      id SERIAL PRIMARY KEY,\n      title TEXT NOT NULL\n    )\n  `;\n} finally {\n  // Release the connection back into the pool\n  connection.release();\n}\n\nserve(async (req) => {\n  // Parse the URL and check that the requested endpoint is /todos. If it is\n  // not, return a 404 response.\n  const url = new URL(req.url);\n  if (url.pathname !== \"/todos\") {\n    return new Response(\"Not Found\", { status: 404 });\n  }\n\n  // Grab a connection from the database pool\n  const connection = await pool.connect();\n\n  try {\n    switch (req.method) {\n      case \"GET\": { // This is a GET request. Return a list of all todos.\n        // Run the query\n        const result = await connection.queryObject`\n          SELECT * FROM todos\n        `;\n\n        // Encode the result as JSON\n        const body = JSON.stringify(result.rows, null, 2);\n\n        // Return the result as JSON\n        return new Response(body, {\n          headers: { \"content-type\": \"application/json\" },\n        });\n      }\n      case \"POST\": { // This is a POST request. Create a new todo.\n        // Parse the request body as JSON. If the request body fails to parse,\n        // is not a string, or is longer than 256 chars, return a 400 response.\n        const title = await req.json().catch(() => null);\n        if (typeof title !== \"string\" || title.length > 256) {\n          return new Response(\"Bad Request\", { status: 400 });\n        }\n\n        // Insert the new todo into the database\n        await connection.queryObject`\n          INSERT INTO todos (title) VALUES (${title})\n        `;\n\n        // Return a 201 Created response\n        return new Response(\"\", { status: 201 });\n      }\n      default: // If this is neither a POST, or a GET return a 405 response.\n        return new Response(\"Method Not Allowed\", { status: 405 });\n    }\n  } catch (err) {\n    console.error(err);\n    // If an error occurs, return a 500 response\n    return new Response(`Internal Server Error\\n\\n${err.message}`, {\n      status: 500,\n    });\n  } finally {\n    // Release the connection back into the pool\n    connection.release();\n  }\n});\n```\n\nAs an extra challenge, try add a `DELETE /todos/:id` endpoint to delete a todo. The [URLPattern](https://developer.mozilla.org/en-US/docs/Web/API/URL_Pattern_API) API can help with this.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-postgres", "title": "API server with Postgres", "description": "Postgres is a popular database for web applications because of its flexibility and ease of use. This guide will show you how to use Deno Deploy with Postgres.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:11:16", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "API server with Postgres", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "API server with Postgres", "ogTitle": "API server with Postgres", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0"], "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "API server with Postgres", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "2fd28cc7-07da-431b-a10d-b5690741e7b2", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-postgres", "url": "https://docs.deno.com/deploy/tutorials/tutorial-postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"API server with Postgres\"?\n\nAssistant: Here are some code examples:\n\n### GET /todos\n```yaml\nGET /todos\n---\ntitle: \"returns a list of all todos\"\n---\n[\\\n  {\\\n    \"id\": 1,\\\n    \"title\": \"Buy bread\"\\\n  },\\\n  {\\\n    \"id\": 2,\\\n    \"title\": \"Buy rice\"\\\n  },\\\n  {\\\n    \"id\": 3,\\\n    \"title\": \"Buy spices\"\\\n  }\\\n]\n```\n\n### POST /todos\n```yaml\nPOST /todos\n---\ntitle: \"creates a new todo\"\n---\n\"Buy milk\"\n---\ntitle: \"returns a 201 status code\"\n---\n\n```\n\n### Postgres Connection String\n```yaml\npostgres://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require\n```\n\n### Deno.serve() Example\n```yaml\nDeno.serve(async (req) => {\n  return new Response(\"Not Found\", { status: 404 });\n});\n```\n\n### Postgres Pool Creation\n```yaml\nimport * as postgres from \"https://deno.land/x/postgres@v0.14.0/mod.ts\";\n\n// Get the connection string from the environment variable \"DATABASE_URL\"\nconst databaseUrl = Deno.env.get(\"DATABASE_URL\")!;\n\n// Create a database pool with three connections that are lazily established\nconst pool = new postgres.Pool(databaseUrl, 3, true);\n```\n\n### Create Todos Table\n```yaml\nconst pool = new postgres.Pool(databaseUrl, 3, true);\n\n// Connect to the database\nconst connection = await pool.connect();\ntry {\n  // Create the table\n  await connection.queryObject`\n    CREATE TABLE IF NOT EXISTS todos (\n      id SERIAL PRIMARY KEY,\n      title TEXT NOT NULL\n    )\n  `;\n} finally {\n  // Release the connection back into the pool\n  connection.release();\n}\n```\n\n### HTTP Handlers for GET and POST\n```yaml\nDeno.serve(async (req) => {\n  const url = new URL(req.url);\n  if (url.pathname !== \"/todos\") {\n    return new Response(\"Not Found\", { status: 404 });\n  }\n\n  const connection = await pool.connect();\n\n  try {\n    switch (req.method) {\n      case \"GET\": {\n        const result = await connection.queryObject`\n          SELECT * FROM todos\n        `;\n        const body = JSON.stringify(result.rows, null, 2);\n        return new Response(body, {\n          headers: { \"content-type\": \"application/json\" },\n        });\n      }\n      case \"POST\": {\n        const title = await req.json().catch(() => null);\n        if (typeof title !== \"string\" || title.length > 256) {\n          return new Response(\"Bad Request\", { status: 400 });\n        }\n        await connection.queryObject`\n          INSERT INTO todos (title) VALUES (${title})\n        `;\n        return new Response(\"\", { status: 201 });\n      }\n      default:\n        return new Response(\"Method Not Allowed\", { status: 405 });\n    }\n  } catch (err) {\n    console.error(err);\n    return new Response(`Internal Server Error\\n\\n${err.message}`, {\n      status: 500,\n    });\n  } finally {\n    connection.release();\n  }\n});\n```\n\n### cURL Example\n```yaml\n$ curl -X GET https://tutorial-postgres.deno.dev/todos\n[]⏎\n\n$ curl -X POST -d '\"Buy milk\"' https://tutorial-postgres.deno.dev/todos\n\n$ curl -X GET https://tutorial-postgres.deno.dev/todos\n[\\\n  {\\\n    \"id\": 1,\\\n    \"title\": \"Buy milk\"\\\n  }\\\n]\n```\n\n### Full Code for the Tutorial\n```yaml\nimport { serve } from \"https://deno.land/std@0.114.0/http/server.ts\";\nimport * as postgres from \"https://deno.land/x/postgres@v0.14.2/mod.ts\";\n\nconst databaseUrl = Deno.env.get(\"DATABASE_URL\")!;\nconst pool = new postgres.Pool(databaseUrl, 3, true);\n\nconst connection = await pool.connect();\ntry {\n  await connection.queryObject`\n    CREATE TABLE IF NOT EXISTS todos (\n      id SERIAL PRIMARY KEY,\n      title TEXT NOT NULL\n    )\n  `;\n} finally {\n  connection.release();\n}\n\nserve(async (req) => {\n  const url = new URL(req.url);\n  if (url.pathname !== \"/todos\") {\n    return new Response(\"Not Found\", { status: 404 });\n  }\n\n  const connection = await pool.connect();\n\n  try {\n    switch (req.method) {\n      case \"GET\": {\n        const result = await connection.queryObject`\n          SELECT * FROM todos\n        `;\n        const body = JSON.stringify(result.rows, null, 2);\n        return new Response(body, {\n          headers: { \"content-type\": \"application/json\" },\n        });\n      }\n      case \"POST\": {\n        const title = await req.json().catch(() => null);\n        if (typeof title !== \"string\" || title.length > 256) {\n          return new Response(\"Bad Request\", { status: 400 });\n        }\n        await connection.queryObject`\n          INSERT INTO todos (title) VALUES (${title})\n        `;\n        return new Response(\"\", { status: 201 });\n      }\n      default:\n        return new Response(\"Method Not Allowed\", { status: 405 });\n    }\n  } catch (err) {\n    console.error(err);\n    return new Response(`Internal Server Error\\n\\n${err.message}`, {\n      status: 500,\n    });\n  } finally {\n    connection.release();\n  }\n});\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-postgres", "title": "API server with Postgres", "description": "Postgres is a popular database for web applications because of its flexibility and ease of use. This guide will show you how to use Deno Deploy with Postgres.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:11:16", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "API server with Postgres", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "API server with Postgres", "ogTitle": "API server with Postgres", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0"], "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "API server with Postgres", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "2fd28cc7-07da-431b-a10d-b5690741e7b2", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-postgres", "url": "https://docs.deno.com/deploy/tutorials/tutorial-postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"API server with Postgres\"?\n\nAssistant: Here are the recommended best practices:\n\n• This tutorial will focus entirely on connecting to Postgres unencrypted. If you would like to use encryption with a custom CA certificate, use the documentation here.\n• Make sure to save the password when creating a Supabase project, as you will need it later.\n• When creating a Postgres instance, select the region closest to your application for better performance.\n• Use environment variables to store sensitive information like database connection strings.\n• Consider adding a DELETE /todos/:id endpoint to enhance the functionality of your application.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-postgres", "title": "API server with Postgres", "description": "Postgres is a popular database for web applications because of its flexibility and ease of use. This guide will show you how to use Deno Deploy with Postgres.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:11:16", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "API server with Postgres", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "ogSiteName": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "API server with Postgres", "ogTitle": "API server with Postgres", "viewport": ["width=device-width, initial-scale=1", "width=device-width, initial-scale=1.0"], "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "API server with Postgres", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "2fd28cc7-07da-431b-a10d-b5690741e7b2", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-postgres", "url": "https://docs.deno.com/deploy/tutorials/tutorial-postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Privacy Policy\"?\n\nAssistant: Deno Land Inc. collects and uses personal information to provide its products and services. This Privacy Policy describes the personal information collected, its purposes, sharing parties, and user choices.\n\nHere's a detailed explanation:\n\n\n## I. The Information We Collect, And How We Collect It\nWe collect the following categories of information, which may include personal information (collectively, the \"Information\").\n\n1. Information You Provide To Us\n\nWe collect information from and about you directly when you provide it to us. This information may be collected when you contact us, fill out a form, create an account, subscribe to our blog, access or participate on our Sites, respond to surveys, or otherwise interact with us. This information may include:\n\n*Contact Information.* We collect your contact information when you voluntarily provide it to us. For example, you may disclose contact information to us via the \"Contact\" link on our Sites, submit information by mail, telephone, in person or electronically, when signing up for our newsletters and other marketing communications, or when you register to attend an event or program. Contact Information typically includes first name, last name, e-mail address, postal address, organization, telephone number and other information that identifies you or can be used to identify or contact you.\n\n_Account Credentials_. When you register to create an account with us, we will collect certain additional personal information, including your name, email address, and potentially other information such as your GitHub user name and public GitHub profile.\n\nIn addition to Contact Information and Account Credentials, we may collect other kinds of information, such as:\n\n- Comments, questions, and requests you may make;\n- Information about your preferences, such as your preferred methods of communication and the types of information in which you are interested;\n- Event and service-related information (such as information required for registration, access to premises or online resources, dietary restrictions, and areas of interest);\n- Audio and visual information, such as photographs, video and voice recordings (e.g., from events you attended with us), or security camera recordings if you visit our premises;\n- Details of downloads from our Sites;\n- Records and copies of your correspondence (including email addresses and phone numbers), if you contact us; and\n- Any other information you voluntarily provide.\n\n2. Information Obtained From Third Parties\n\nWe may receive certain information about you from other sources, including publicly available sources (such as public records and social media platforms), as well as our service providers and marketing partners.\n\nWhen we collect personal information from users and visitors of other sites on which you have interacted with us, we will do so in accordance with the terms of use and privacy policies of those sites and applicable law. We may also receive personal information when you comment on our social media advertisements, post comments about us, or tag us in a public-facing social media post. Personal information may also be collected by the third-party social media sites that host our social media pages. These sites may provide aggregate information and analysis to us about visitors’ use of our social media pages. This allows us to better understand and analyze our user growth, general demographic information about the users of these pages, and interaction with the content that we post. Overall, this information may be used to help us understand the types of visitors and users of our social media pages and use of the content. This Privacy Policy does not cover personal information collected by such third-party social media sites. For more information on their privacy and security practices please review the privacy policies and terms of use on their respective websites.\n\n3. Information Collected Automatically\n\nWe and our service providers may automatically obtain certain information about you, your electronic device, and your interactions with us, including the following:\n\n- _Device data_. We may collect data such as the type of device and its operating system and settings, browser type, mobile device carrier, country, IP address, and unique identifiers.\n- _Internet and other or electronic activity data_. This includes information about your interaction with our Sites, emails, and other online content.\n- _Tracking Data_. We may collect tracking data using first and third-party cookies, pixels, web server logs, web beacons, and similar data collection and tracking technologies on the Sites, third party websites, apps and online services, and across your devices (such as IP address, browser, type, ISP, platform type, device type). Third parties such as advertising networks and analytics providers may also collect information about your online activities over time and across different websites and devices when you access or use the Sites.\n\n## II. How We Use And Share Your Information\nDeno uses the Information for the purpose for which it was collected and in a manner that is consistent with this Privacy Policy. These functions include operation, maintenance and improvements to the Sites, providing our products and services, solicitation of your feedback, gaining a better understanding of our customers and visitors of our Sites, responding to your requests and questions, hosting events, and informing you about our organization, products, services, events, and other areas of interest.\n\n_Analytics Services_. We may use third-party web analytics services, such as Google Analytics, to help us understand and analyze how Site visitors use our services. For more information on how Google Analytics uses data collected through our Sites, visit www.google.com/policies/privacy/partners.\n\n_Aggregated Data_. We may analyze your personal information in aggregate form which does not identify you personally (\"Aggregated Data\"). The Aggregated Data may be used to operate, maintain, manage, and improve the Sites, shared with our affiliates, agents, and business partners, and otherwise used and disclosed for lawful business purposes. We do not re-identify de-identified or aggregated information.\n\n_Service Providers/Vendors_. Like many businesses, we hire other companies to perform certain business-related services. We may disclose personal information to certain types of third party companies but only to the extent needed to enable them to provide such services, for example web hosting, disaster recovery, client survey and marketing, and data storage.\n\n_Reorganization_. If, in the future, Deno undergoes a corporate, partnership, or business reorganization, we may transfer the Information, including personal information, to the new or surviving entity.\n\n_Protection of Rights and Compliance_. We may use your Information to protect the rights, privacy or safety you, us or others; to ensure our compliance with legal and contractual requirements; and to prevent and investigate illegal, unethical, or unauthorized activities (including cyberattacks and identity theft).\n\nIf Deno intends on using or disclosing your personal information in any manner that is not consistent with this Privacy Policy, you will be informed of such anticipated use prior to or at the time at which the personal information is collected.\n\n## III. How We Protect Your Information\nWe take commercially reasonable steps to protect your personal information from loss, misuse, and unauthorized access, disclosure, alteration, or destruction. Please understand, however, that no security system is impenetrable. We cannot guarantee the security of our databases, nor can we guarantee that the personal information that you supply will not be intercepted while being transmitted to and from us over the Internet.\n\n## IV. Data Retention\nDeno determines the retention period for all Information based on the purposes for which we collect and/or receive the Information and/or tax, legal and regulatory requirements. In addition to this, we may consider other factors, such as the nature and sensitivity of the data, and whether we can achieve the purpose for which we collected the data through other means.\n\n## V. Your Privacy Choices\n1. Your Information\n\nYou may request access to, correction of, or deletion of the personal information we maintain about you, and we will endeavor to respond promptly to your request. In order to make such a request, please contact us as indicated below.\n\n2. Marketing Communications\n\nYou may opt-out of marketing-related emails by clicking on the “unsubscribe” link located on the bottom of any marketing email or emailing us at support@deno.com. We will use commercially reasonable efforts to process such requests in a timely manner. Please note that even if you opt-out of marketing-related emails, you will continue to receive service-related and other non-marketing emails.\n\n3. Tracking Technology\n\nYou can choose not to permit tracking technologies, such as cookies and web beacons, when you use our services, but blocking some types of these tracking technologies may interfere with your experience.\n\n_Browser-Based Opt-Outs_. You may be able to disable tracking technologies using your web browser settings. Please review your browser’s instructions or visit All About Cookies for general information. Note that your web browser may have settings that allow you to transmit a “Do Not Track” signal when you use online services. Like many websites, our Sites are not currently designed to respond to “Do Not Track” signals received from browsers.\n\n_Self-Regulatory Program Opt-Outs_. Two self-regulatory programs are available to help you control the use of tracking technologies on your browsers — the Digital Advertising Alliance and the Network Advertising Initiative. Both programs help to regulate vendors in the digital advertising space. One function of their self-regulatory programs is to give you the ability to opt out of targeted (or interest-based) advertising, including the use of tracking technologies, from their member companies. You can visit the Digital Advertising Alliance’s Your Ad Choices website to opt out of targeted advertising for participating vendors. The Network Advertising Initiative similarly assists with opt outs through their Opt Out of Interest-Based Advertising webpage.\n\n_Google Analytics Opt-Out._ To opt out of Google Analytics cookies, visit Google’s My Ad Center and/or download the Google Analytics Opt-Out Browser Add-On.\n\n## VI. Children\nWe do not knowingly collect personal information from children under the age of 18 through the Sites. If you are under 18, please do not give us any personal information. We encourage parents and legal guardians to monitor their children’s Internet usage and to help enforce our Privacy Policy by instructing their children never to provide personal information through the Sites without their permission. If you have reason to believe that a child under the age of 18 has provided personal information to us, please contact us, at support@deno.com and we will endeavor to delete that information from our databases.\n\n## VII. External Websites\nThe Sites may contain links to third-party websites. These third-party sites may collect information about you if you click on a link. We have no control over the privacy practices or the content of these websites. As such, we are not responsible for the content or the privacy policies of those third-party websites. You should check the applicable third-party privacy policy and terms of use when visiting any other websites.\n\n## VIII. Important Notice To Non-U.S. Residents\nThe Sites are hosted in and provided from the United States and other countries. If you are located outside of the United States, please be aware that any information you provide to us may be transferred to the United States or other countries where the privacy laws may not be as protective as those in your country of origin. If you are located outside the United States and choose to use the Sites, you consent to any transfer and processing of your personal information in accordance with this Privacy Policy, and you do so at your own risk.\n\n## IX. Notice To California Residents\nPursuant to Section 1798.83 of the California Civil Code, residents of California have the right to obtain certain information about the types of personal information that companies with whom they have an established business relationship (and that are not otherwise exempt) have shared with third parties for direct marketing purposes during the preceding calendar year, including the names and addresses of those third parties, and examples of the types of services or products marketed by those third parties. In order to submit such a request, please contact us using the contact information provided at the end of this document. Please note, however, that we do not share, nor have we shared in the past, personal information with third parties for direct marketing purposes.\n\n## X. Notice To Nevada Residents\nIf you are a resident of Nevada, you have the right to opt-out of the sale of personal information to third parties. You can exercise this right by contacting us at support@deno.com with the subject line “Nevada Do Not Sell Request” and providing us with your name and the email address. Please note, however, that we do not sell any personal information to third parties.\n\n## XI. Changes To This Privacy Policy\nThis Privacy Policy is effective as of the date stated at the top of this Privacy Policy. We may change this Privacy Policy from time to time. Any such changes will be posted on the Sites. By accessing the Sites after we make any such changes to this Privacy Policy, you are deemed to have accepted such changes. Please be aware that, to the extent permitted by applicable law, our use of the Information is governed by the Privacy Policy in effect at the time we collect the Information. Please refer back to this Privacy Policy on a regular basis.\n\n## XII. How To Contact Us\nPlease reach out to support@deno.com for any questions, complaints, or requests regarding this Privacy Policy, and include in the subject line “Privacy Policy\", or contact us by mail at:\n\nDeno Land Inc.\n\n1111 6th Ave Ste 550\n\nPMB 702973\n\nSan Diego CA, 92101\n\nUSA\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/privacy-policy", "title": "Deno Privacy Policy", "description": "Deno Land Inc. collects and uses personal information to provide its products and services. This Privacy Policy describes the personal information collected, its purposes, sharing parties, and user choices.", "has_code_examples": false, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:13:00", "type": "overview", "page_metadata": {"og:locale": "en_US", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:type": "article", "ogImage": "/img/og.webp", "og:title": "Privacy Policy", "language": "en", "ogLocale": "en_US", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "ogTitle": "Privacy Policy", "twitter:title": "Privacy Policy", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Privacy Policy", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "e61f5e87-9ae4-43cd-8447-bc8d3be20fa6", "sourceURL": "https://docs.deno.com/deploy/manual/privacy-policy", "url": "https://docs.deno.com/deploy/manual/privacy-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Privacy Policy\"?\n\nAssistant: Here are the recommended best practices:\n\n• You may request access to, correction of, or deletion of the personal information we maintain about you.\n• You may opt-out of marketing-related emails by clicking on the “unsubscribe” link located on the bottom of any marketing email.\n• You can choose not to permit tracking technologies, such as cookies and web beacons, when you use our services.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/privacy-policy", "title": "Deno Privacy Policy", "description": "Deno Land Inc. collects and uses personal information to provide its products and services. This Privacy Policy describes the personal information collected, its purposes, sharing parties, and user choices.", "has_code_examples": false, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 01:13:00", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:type": "article", "ogImage": "/img/og.webp", "og:title": "Privacy Policy", "language": "en", "ogLocale": "en_US", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "ogTitle": "Privacy Policy", "twitter:title": "Privacy Policy", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Privacy Policy", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "e61f5e87-9ae4-43cd-8447-bc8d3be20fa6", "sourceURL": "https://docs.deno.com/deploy/manual/privacy-policy", "url": "https://docs.deno.com/deploy/manual/privacy-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Console Interface\"?\n\nAssistant: The Console interface provides methods for logging information to the console, as well as other utility methods for debugging and inspecting code.\n\nHere's a detailed explanation:\n\n\n## Methods\nThe Console interface includes the following methods:\n\n- `#assert(condition?: boolean, ...data: any[]): void`\n  Tests that an expression is true. If not, logs an error message.\n\n- `#clear(): void`\n  Clears the console if the environment allows it.\n\n- `#count(label?: string): void`\n  Maintains an internal counter for a given label, incrementing it each time the method is called.\n\n- `#countReset(label?: string): void`\n  Resets the counter for a given label.\n\n- `#debug(...data: any[]): void`\n  Outputs a debugging message to the console.\n\n- `#dir(item?: any, options?: any): void`\n  Displays a list of the properties of a specified object.\n\n- `#error(...data: any[]): void`\n  Outputs an error message to the console. This method routes the output to stderr, unlike other console methods that route to stdout.\n\n- `#group(...data: any[]): void`\n  Creates a new inline group in the console, indenting subsequent console messages.\n\n- `#groupCollapsed(...data: any[]): void`\n  Creates a new inline group in the console that is initially collapsed.\n\n- `#groupEnd(): void`\n  Exits the current inline group in the console.\n\n- `#info(...data: any[]): void`\n  Outputs an informational message to the console.\n\n- `#log(...data: any[]): void`\n  Outputs a message to the console.\n\n- `#table(tabularData?: any, properties?: string[]): void`\n  Displays tabular data as a table.\n\n- `#time(label?: string): void`\n  Starts a timer you can use to track how long an operation takes.\n\n- `#timeEnd(label?: string): void`\n  Stops a timer that was previously started.\n\n- `#timeLog(label?: string, ...data: any[]): void`\n  Logs the current value of a timer that was previously started.\n\n- `#trace(...data: any[]): void`\n  Outputs a stack trace to the console.\n\n- `#warn(...data: any[]): void`\n  Outputs a warning message to the console.\n\n- `#timeStamp(label?: string): void`\n  Adds a marker to the DevTools Performance panel.\n\n- `#profile(label?: string): void`\n  Starts recording a performance profile.\n\n- `#profileEnd(label?: string): void`\n  Stops recording a performance profile.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/Console", "title": "Console Interface", "description": "The Console interface provides methods for logging information to the console, as well as other utility methods for debugging and inspecting code.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:14:23", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "title": "Console - I/O - Web documentation", "ogLocale": "en_US", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Console - I/O - Web documentation", "og:title": "Console - I/O - Web documentation", "twitter:title": "Console - I/O - Web documentation", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "63b4ffe0-3b2d-4cf4-8b43-eac7df713239", "sourceURL": "https://docs.deno.com/api/web/~/Console", "url": "https://docs.deno.com/api/web/~/Console", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Secondary Indexes\"?\n\nAssistant: This page covers the implementation and usage of secondary indexes in key-value stores, specifically in Deno KV, including unique and non-unique indexes.\n\nHere's a detailed explanation:\n\n\n## Secondary Indexes\nKey-value stores like Deno KV organize data as collections of key-value pairs, where each unique key is associated with a single value. This structure enables easy retrieval of values based on their keys but does not allow for querying based on the values themselves. To overcome this constraint, you can create secondary indexes, which store the same value under additional keys that include (part of) that value.\n\nMaintaining consistency between primary and secondary keys is crucial when using secondary indexes. If a value is updated at the primary key without updating the secondary key, the data returned from a query targeting the secondary key will be incorrect. To ensure that primary and secondary keys always represent the same data, use atomic operations when inserting, updating, or deleting data. This approach ensures that the group of mutation actions are executed as a single unit, and either all succeed or all fail, preventing inconsistencies.\n\n## Unique indexes (one-to-one)\nNon-unique indexes are secondary indexes where a single key can be associated with multiple primary keys, allowing you to query for multiple items based on a shared attribute. For example, when querying users by their favorite color, implement this using a non-unique secondary index. The favorite color is a non-unique attribute since multiple users can have the same favorite color.\n\nTo implement a non-unique secondary index for this example, follow these steps:\n\n1. Define the `User` interface:\n\n\n```highlight notranslate ts\ninterface User {\n     id: string;\n     name: string;\n     favoriteColor: string;\n}\n```\n\n2. Define the `insertUser` function:\n\n\n```highlight notranslate ts\nasync function insertUser(user: User) {\n     const primaryKey = [\"users\", user.id];\n     const byColorKey = [\n       \"users_by_favorite_color\",\n       user.favoriteColor,\n       user.id,\n     ];\n     await kv.atomic()\n       .check({ key: primaryKey, versionstamp: null })\n       .set(primaryKey, user)\n       .set(byColorKey, user)\n       .commit();\n}\n```\n\n3. Define a function to retrieve users by their favorite color:\n\n\n```highlight notranslate ts\nasync function getUsersByFavoriteColor(color: string): Promise<User[]> {\n     const iter = kv.list<User>({ prefix: [\"users_by_favorite_color\", color] });\n     const users = [];\n     for await (const { value } of iter) {\n       users.push(value);\n     }\n     return users;\n}\n```\n\nThis example demonstrates the use of a non-unique secondary index, `users_by_favorite_color`, which allows querying users based on their favorite color. The primary key remains the user `id`.\n\nThe primary difference between the implementation of unique and non-unique indexes lies in the structure and organization of the secondary keys. In unique indexes, each secondary key is associated with exactly one primary key, ensuring that the indexed attribute is unique across all records. In the case of non-unique indexes, a single secondary key can be associated with multiple primary keys, as the indexed attribute may be shared among multiple records. To achieve this, non-unique secondary keys are typically structured with an additional unique identifier (e.g., primary key) as part of the key, allowing multiple records with the same attribute to coexist without conflicts.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/secondary_indexes", "title": "Secondary Indexes", "description": "This page covers the implementation and usage of secondary indexes in key-value stores, specifically in Deno KV, including unique and non-unique indexes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:14:58", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Secondary Indexes", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "Secondary Indexes", "og:title": "Secondary Indexes", "ogSiteName": "Deno", "og:image": "/img/og.webp", "twitter:title": "Secondary Indexes", "scrapeId": "482bf2ba-637c-451d-aac4-cbb5e63beaf3", "sourceURL": "https://docs.deno.com/deploy/kv/manual/secondary_indexes", "url": "https://docs.deno.com/deploy/kv/manual/secondary_indexes/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Secondary Indexes\"?\n\nAssistant: Here are some code examples:\n\n### User Interface Definition\n```yaml\ninterface User {\n     id: string;\n     name: string;\n     email: string;\n}\n```\n\n### Insert User Function\n```yaml\nasync function insertUser(user: User) {\n     const primaryKey = [\"users\", user.id];\n     const byEmailKey = [\"users_by_email\", user.email];\n     const res = await kv.atomic()\n       .check({ key: primaryKey, versionstamp: null })\n       .check({ key: byEmailKey, versionstamp: null })\n       .set(primaryKey, user)\n       .set(byEmailKey, user)\n       .commit();\n     if (!res.ok) {\n       throw new TypeError(\"User with ID or email already exists\");\n     }\n}\n```\n\n### Get User by ID Function\n```yaml\nasync function getUser(id: string): Promise<User | null> {\n     const res = await kv.get<User>([\"users\", id]);\n     return res.value;\n}\n```\n\n### Get User by Email Function\n```yaml\nasync function getUserByEmail(email: string): Promise<User | null> {\n     const res = await kv.get<User>([\"users_by_email\", email]);\n     return res.value;\n}\n```\n\n### Delete User Function\n```yaml\nasync function deleteUser(id: string) {\n     let res = { ok: false };\n     while (!res.ok) {\n       const getRes = await kv.get<User>([\"users\", id]);\n       if (getRes.value === null) return;\n       res = await kv.atomic()\n         .check(getRes)\n         .delete([\"users\", id])\n         .delete([\"users_by_email\", getRes.value.email])\n         .commit();\n     }\n}\n```\n\n### User Interface Definition for Non-Unique Index\n```yaml\ninterface User {\n     id: string;\n     name: string;\n     favoriteColor: string;\n}\n```\n\n### Insert User Function for Non-Unique Index\n```yaml\nasync function insertUser(user: User) {\n     const primaryKey = [\"users\", user.id];\n     const byColorKey = [\n       \"users_by_favorite_color\",\n       user.favoriteColor,\n       user.id,\n     ];\n     await kv.atomic()\n       .check({ key: primaryKey, versionstamp: null })\n       .set(primaryKey, user)\n       .set(byColorKey, user)\n       .commit();\n}\n```\n\n### Get Users by Favorite Color Function\n```yaml\nasync function getUsersByFavoriteColor(color: string): Promise<User[]> {\n     const iter = kv.list<User>({ prefix: [\"users_by_favorite_color\", color] });\n     const users = [];\n     for await (const { value } of iter) {\n       users.push(value);\n     }\n     return users;\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/secondary_indexes", "title": "Secondary Indexes", "description": "This page covers the implementation and usage of secondary indexes in key-value stores, specifically in Deno KV, including unique and non-unique indexes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:14:58", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Secondary Indexes", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "Secondary Indexes", "og:title": "Secondary Indexes", "ogSiteName": "Deno", "og:image": "/img/og.webp", "twitter:title": "Secondary Indexes", "scrapeId": "482bf2ba-637c-451d-aac4-cbb5e63beaf3", "sourceURL": "https://docs.deno.com/deploy/kv/manual/secondary_indexes", "url": "https://docs.deno.com/deploy/kv/manual/secondary_indexes/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Secondary Indexes\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use atomic operations when inserting, updating, or deleting data to maintain consistency between primary and secondary keys.\n• Ensure that secondary indexes enforce uniqueness constraints where necessary, such as in the case of user emails.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/secondary_indexes", "title": "Secondary Indexes", "description": "This page covers the implementation and usage of secondary indexes in key-value stores, specifically in Deno KV, including unique and non-unique indexes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:14:58", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Secondary Indexes", "ogImage": "/img/og.webp", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "Secondary Indexes", "og:title": "Secondary Indexes", "ogSiteName": "Deno", "og:image": "/img/og.webp", "twitter:title": "Secondary Indexes", "scrapeId": "482bf2ba-637c-451d-aac4-cbb5e63beaf3", "sourceURL": "https://docs.deno.com/deploy/kv/manual/secondary_indexes", "url": "https://docs.deno.com/deploy/kv/manual/secondary_indexes/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"no-eval\"?\n\nAssistant: Disallows the use of `eval`.\n\nHere's a detailed explanation:\n\n\n## Overview\n`eval` is a potentially dangerous function which can open your code to a number of security vulnerabilities. In addition to being slow, `eval` is also often unnecessary with better solutions available.\n\n## Examples\n**Invalid:**\n\n```highlight notranslate typescript\nconst obj = { x: \"foo\" };\nconst key = \"x\",\nconst value = eval(\"obj.\" + key);\n```\n\n**Valid:**\n\n```highlight notranslate typescript\nconst obj = { x: \"foo\" };\nconst value = obj[x];\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-eval", "title": "no-eval", "description": "Disallows the use of `eval`.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:15:10", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "no-eval", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "no-eval", "title": "no-eval", "language": "en", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "no-eval", "ogLocale": "en_US", "scrapeId": "0efb122a-4e33-471f-b4e0-b387886d2095", "sourceURL": "https://docs.deno.com/lint/rules/no-eval", "url": "https://docs.deno.com/lint/rules/no-eval/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"no-eval\"?\n\nAssistant: Here are some code examples:\n\n### Invalid Example\n```yaml\nconst obj = { x: \"foo\" };\nconst key = \"x\",\nconst value = eval(\"obj.\" + key);\n```\n\n### Valid Example\n```yaml\nconst obj = { x: \"foo\" };\nconst value = obj[x];\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-eval", "title": "no-eval", "description": "Disallows the use of `eval`.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:15:10", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "no-eval", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "no-eval", "title": "no-eval", "language": "en", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "no-eval", "ogLocale": "en_US", "scrapeId": "0efb122a-4e33-471f-b4e0-b387886d2095", "sourceURL": "https://docs.deno.com/lint/rules/no-eval", "url": "https://docs.deno.com/lint/rules/no-eval/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"no-eval\"?\n\nAssistant: Here are the recommended best practices:\n\n• Avoid using `eval` due to security vulnerabilities and performance issues.\n• Use alternative methods to access object properties.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-eval", "title": "no-eval", "description": "Disallows the use of `eval`.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:15:10", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "twitter:site": "@deno_land", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "no-eval", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "no-eval", "title": "no-eval", "language": "en", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "no-eval", "ogLocale": "en_US", "scrapeId": "0efb122a-4e33-471f-b4e0-b387886d2095", "sourceURL": "https://docs.deno.com/lint/rules/no-eval", "url": "https://docs.deno.com/lint/rules/no-eval/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HTTP Response\"?\n\nAssistant: The Response interface is part of the Fetch API and represents a response resource of fetch().\n\nHere's a detailed explanation:\n\n\n## Constructor\nThe Response() constructor creates a new Response instance.\n\n```highlight notranslate ts\nlet response = new Response(body, init);\n```\n\n\n## Parameters\n| name | type | optional | description |\n| --- | --- | --- | --- |\n| body | `Blob`, `BufferSource`, `FormData`, `ReadableStream`, `URLSearchParams`, or `USVString` | `true` | The body of the response. The default value is `null`. |\n| init | `ResponseInit` | `true` | An optional object that allows setting status and headers of the response. |\n\nThe return type is a `Response` instance.\n\n##### `ResponseInit`\n\n| name | type | optional | description |\n| --- | --- | --- | --- |\n| `status` | `number` | `true` | The status code of the response. |\n| `statusText` | `string` | `true` | The status message representative of the status code. |\n| `headers` | `Headers` or `string[][]` or `Record<string, string>` | `false` | The HTTP headers of the response. |\n\n## Properties\n| name | type | read only | description |\n| --- | --- | --- | --- |\n| [`body`](https://developer.mozilla.org/en-US/docs/Web/API/Body/body) | `ReadableStream` | `true` | The getter exposes a `ReadableStream` of the body contents. |\n| [`bodyUsed`](https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed) | `boolean` | `true` | Indicates whether the body content is read. |\n| [`url`](https://developer.mozilla.org/en-US/docs/Web/API/Request/url) | `USVString` | `true` | The URL of the response. |\n| [`headers`](https://developer.mozilla.org/en-US/docs/Web/API/Request/headers) | `Headers` | `true` | The headers associated with the response. |\n| [`ok`](https://developer.mozilla.org/en-US/docs/Web/API/Response/ok) | `boolean` | `true` | Indicates if the response is successful (200-299 status). |\n| [`redirected`](https://developer.mozilla.org/en-US/docs/Web/API/Response/redirected) | `boolean` | `true` | Indicates if the response is the result of a redirect. |\n| [`status`](https://developer.mozilla.org/en-US/docs/Web/API/Response/status) | `number` | `true` | The status code of the response |\n| [`statusText`](https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText) | `string` | `true` | The status message of the response |\n| [`type`](https://developer.mozilla.org/en-US/docs/Web/API/Response/type) | `string` | `true` | The type of the response. |\n\n## Methods\n| name | description |\n| --- | --- |\n| [`arrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer) | Reads the body stream to its completion and returns an `ArrayBuffer` object. |\n| [`blob()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/blob) | Reads the body stream to its completion and returns a `Blob` object. |\n| [`formData()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/formdata) | Reads the body stream to its completion and returns a `FormData` object. |\n| [`json()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/json) | Reads the body stream to its completion, parses it as JSON and returns a JavaScript object. |\n| [`text()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/text) | Reads the body stream to its completion and returns a USVString object (text). |\n| [`clone()`](https://developer.mozilla.org/en-US/docs/Web/API/Response/clone) | Clones the response object. |\n| [`error()`](https://developer.mozilla.org/en-US/docs/Web/API/Response/error) | Returns a new response object associated with a network error. |\n| [`redirect(url: string, status?: number)`](https://developer.mozilla.org/en-US/docs/Web/API/Response/redirect) | Creates a new response that redirects to the provided URL. |\n\n## Example\n```highlight notranslate ts\nfunction handler(_req) {\n  // Create a response with html as its body.\n  const response = new Response(\"<html> Hello </html>\", {\n    status: 200,\n    headers: {\n      \"content-type\": \"text/html\",\n    },\n  });\n\n  console.log(response.status); // 200\n  console.log(response.headers.get(\"content-type\")); // text/html\n\n  return response;\n}\n\nDeno.serve(handler);\n```\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-response", "title": "HTTP Response", "description": "The Response interface is part of the Fetch API and represents a response resource of fetch().", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 01:16:02", "type": "overview", "page_metadata": {"twitter:title": "HTTP Response", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:title": "HTTP Response", "ogImage": "/img/og.webp", "language": "en", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "HTTP Response", "ogLocale": "en_US", "ogTitle": "HTTP Response", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en_US", "scrapeId": "c31467c1-5e7b-4b70-8c7b-4acf76a4b5a3", "sourceURL": "https://docs.deno.com/deploy/api/runtime-response", "url": "https://docs.deno.com/deploy/api/runtime-response/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HTTP Response\"?\n\nAssistant: Here are some code examples:\n\n### Response Constructor Example\n```yaml\nlet response = new Response(body, init);\n```\n\n### Example Handler Function\n```yaml\nfunction handler(_req) {\n  // Create a response with html as its body.\n  const response = new Response(\"<html> Hello </html>\", {\n    status: 200,\n    headers: {\n      \"content-type\": \"text/html\",\n    },\n  });\n\n  console.log(response.status); // 200\n  console.log(response.headers.get(\"content-type\")); // text/html\n\n  return response;\n}\n\nDeno.serve(handler);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-response", "title": "HTTP Response", "description": "The Response interface is part of the Fetch API and represents a response resource of fetch().", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 01:16:02", "type": "code_examples", "page_metadata": {"twitter:title": "HTTP Response", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:title": "HTTP Response", "ogImage": "/img/og.webp", "language": "en", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "HTTP Response", "ogLocale": "en_US", "ogTitle": "HTTP Response", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en_US", "scrapeId": "c31467c1-5e7b-4b70-8c7b-4acf76a4b5a3", "sourceURL": "https://docs.deno.com/deploy/api/runtime-response", "url": "https://docs.deno.com/deploy/api/runtime-response/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno File System API\"?\n\nAssistant: Documentation for the Deno File System API, including classes, functions, interfaces, and type aliases.\n\nHere's a detailed explanation:\n\n\n## Classes\nDeno.FsFile\n\nThe Deno abstraction for reading and writing files.\n\n- close\n- isTerminal\n- lock\n- lockSync\n- read\n- readSync\n- readable\n- seek\n- seekSync\n- setRaw\n- stat\n- statSync\n- sync\n- syncData\n- syncDataSync\n- syncSync\n- truncate\n- truncateSync\n- unlock\n- unlockSync\n- utime\n- utimeSync\n- writable\n- write\n- writeSync\n\n## Functions\nDeno.chmod\n\nChanges the permission of a specific file/directory of specified path. Ignores the process's umask.\n\nDeno.chmodSync\n\nSynchronously changes the permission of a specific file/directory of specified path. Ignores the process's umask.\n\nDeno.chown\n\nChange owner of a regular file or directory.\n\nDeno.chownSync\n\nSynchronously change owner of a regular file or directory.\n\nDeno.copyFile\n\nCopies the contents and permissions of one file to another specified path, by default creating a new file if needed, else overwriting. Fails if target path is a directory or is unwritable.\n\nDeno.copyFileSync\n\nSynchronously copies the contents and permissions of one file to another specified path, by default creating a new file if needed, else overwriting. Fails if target path is a directory or is unwritable.\n\nDeno.create\n\nCreates a file if none exists or truncates an existing file and resolves to an instance of Deno.FsFile.\n\nDeno.createSync\n\nCreates a file if none exists or truncates an existing file and returns an instance of Deno.FsFile.\n\nDeno.link\n\nCreates newpath as a hard link to oldpath.\n\nDeno.linkSync\n\nSynchronously creates newpath as a hard link to oldpath.\n\nDeno.lstat\n\nResolves to a Deno.FileInfo for the specified path. If path is a symlink, information for the symlink will be returned instead of what it points to.\n\nDeno.lstatSync\n\nSynchronously returns a Deno.FileInfo for the specified path. If path is a symlink, information for the symlink will be returned instead of what it points to.\n\nDeno.makeTempDir\n\nCreates a new temporary directory in the default directory for temporary files, unless dir is specified. Other optional options include prefixing and suffixing the directory name with prefix and suffix respectively.\n\nDeno.makeTempDirSync\n\nSynchronously creates a new temporary directory in the default directory for temporary files, unless dir is specified. Other optional options include prefixing and suffixing the directory name with prefix and suffix respectively.\n\nDeno.makeTempFile\n\nCreates a new temporary file in the default directory for temporary files, unless dir is specified.\n\nDeno.makeTempFileSync\n\nSynchronously creates a new temporary file in the default directory for temporary files, unless dir is specified.\n\nDeno.mkdir\n\nCreates a new directory with the specified path.\n\nDeno.mkdirSync\n\nSynchronously creates a new directory with the specified path.\n\nDeno.open\n\nOpen a file and resolve to an instance of Deno.FsFile. The file does not need to previously exist if using the create or createNew open options. The caller may have the resulting file automatically closed by the runtime once it's out of scope by declaring the file variable with the using keyword.\n\nDeno.openSync\n\nSynchronously open a file and return an instance of Deno.FsFile. The file does not need to previously exist if using the create or createNew open options. The caller may have the resulting file automatically closed by the runtime once it's out of scope by declaring the file variable with the using keyword.\n\nDeno.readDir\n\nReads the directory given by path and returns an async iterable of Deno.DirEntry. The order of entries is not guaranteed.\n\nDeno.readDirSync\n\nSynchronously reads the directory given by path and returns an iterable of Deno.DirEntry. The order of entries is not guaranteed.\n\nDeno.readFile\n\nReads and resolves to the entire contents of a file as an array of bytes. TextDecoder can be used to transform the bytes to string if required. Rejects with an error when reading a directory.\n\nDeno.readFileSync\n\nSynchronously reads and returns the entire contents of a file as an array of bytes. TextDecoder can be used to transform the bytes to string if required. Throws an error when reading a directory.\n\nDeno.readLink\n\nResolves to the full path destination of the named symbolic link.\n\nDeno.readLinkSync\n\nSynchronously returns the full path destination of the named symbolic link.\n\nDeno.readTextFile\n\nAsynchronously reads and returns the entire contents of a file as an UTF-8 decoded string. Reading a directory throws an error.\n\nDeno.readTextFileSync\n\nSynchronously reads and returns the entire contents of a file as an UTF-8 decoded string. Reading a directory throws an error.\n\nDeno.realPath\n\nResolves to the absolute normalized path, with symbolic links resolved.\n\nDeno.realPathSync\n\nSynchronously returns absolute normalized path, with symbolic links resolved.\n\nDeno.remove\n\nRemoves the named file or directory.\n\nDeno.removeSync\n\nSynchronously removes the named file or directory.\n\nDeno.rename\n\nRenames (moves) oldpath to newpath. Paths may be files or directories. If newpath already exists and is not a directory, rename() replaces it. OS-specific restrictions may apply when oldpath and newpath are in different directories.\n\nDeno.renameSync\n\nSynchronously renames (moves) oldpath to newpath. Paths may be files or directories. If newpath already exists and is not a directory, renameSync() replaces it. OS-specific restrictions may apply when oldpath and newpath are in different directories.\n\nDeno.stat\n\nResolves to a Deno.FileInfo for the specified path. Will always follow symlinks.\n\nDeno.statSync\n\nSynchronously returns a Deno.FileInfo for the specified path. Will always follow symlinks.\n\nDeno.symlink\n\nCreates newpath as a symbolic link to oldpath.\n\nDeno.symlinkSync\n\nCreates newpath as a symbolic link to oldpath.\n\nDeno.truncate\n\nTruncates (or extends) the specified file, to reach the specified len. If len is not specified then the entire file contents are truncated.\n\nDeno.truncateSync\n\nSynchronously truncates (or extends) the specified file, to reach the specified len. If len is not specified then the entire file contents are truncated.\n\nDeno.umask\n\nRetrieve the process umask. If mask is provided, sets the process umask. This call always returns what the umask was before the call.\n\nDeno.utime\n\nChanges the access (atime) and modification (mtime) times of a file system object referenced by path. Given times are either in seconds (UNIX epoch time) or as Date objects.\n\nDeno.utimeSync\n\nSynchronously changes the access (atime) and modification (mtime) times of a file system object referenced by path. Given times are either in seconds (UNIX epoch time) or as Date objects.\n\nDeno.watchFs\n\nWatch for file system events against one or more paths, which can be files or directories. These paths must exist already. One user action (e.g. touch test.file) can generate multiple file system events. Likewise, one user action can result in multiple file paths in one event (e.g. mv old_name.txt new_name.txt).\n\nDeno.writeFile\n\nWrite data to the given path, by default creating a new file if needed, else overwriting.\n\nDeno.writeFileSync\n\nSynchronously write data to the given path, by default creating a new file if needed, else overwriting.\n\nDeno.writeTextFile\n\nWrite string data to the given path, by default creating a new file if needed, else overwriting.\n\nDeno.writeTextFileSync\n\nSynchronously write string data to the given path, by default creating a new file if needed, else overwriting.\n\n## Interfaces\nDeno.DirEntry\n\nInformation about a directory entry returned from Deno.readDir and Deno.readDirSync.\n\n- isDirectory\n- isFile\n- isSymlink\n- name\n\nDeno.FileInfo\n\nProvides information about a file and is returned by Deno.stat, Deno.lstat, Deno.statSync, and Deno.lstatSync or from calling stat() and statSync() on an Deno.FsFile instance.\n\n- atime\n- birthtime\n- blksize\n- blocks\n- ctime\n- dev\n- gid\n- ino\n- isBlockDevice\n- isCharDevice\n- isDirectory\n- isFifo\n- isFile\n- isSocket\n- isSymlink\n- mode\n- mtime\n- nlink\n- rdev\n- size\n- uid\n\nDeno.FsEvent\n\nRepresents a unique file system event yielded by a Deno.FsWatcher.\n\n- flag\n- kind\n- paths\n\nDeno.FsWatcher\n\nReturned by Deno.watchFs. It is an async iterator yielding up system events. To stop watching the file system by calling .close() method.\n\n- close\n- return\n\nDeno.MakeTempOptions\n\nOptions which can be set when using Deno.makeTempDir, Deno.makeTempDirSync, Deno.makeTempFile, and Deno.makeTempFileSync.\n\n- dir\n- prefix\n- suffix\n\nDeno.MkdirOptions\n\nOptions which can be set when using Deno.mkdir and Deno.mkdirSync.\n\n- mode\n- recursive\n\nDeno.OpenOptions\n\nOptions which can be set when doing Deno.open and Deno.openSync.\n\n- append\n- create\n- createNew\n- mode\n- read\n- truncate\n- write\n\nDeno.ReadFileOptions\n\nOptions which can be set when using Deno.readFile or Deno.readFileSync.\n\n- signal\n\nDeno.RemoveOptions\n\nOptions which can be set when using Deno.remove and Deno.removeSync.\n\n- recursive\n\nDeno.SymlinkOptions\n\nOptions that can be used with symlink and symlinkSync.\n\n- type\n\nDeno.WriteFileOptions\n\nOptions for writing to a file.\n\n- append\n- create\n- createNew\n- mode\n- signal\n\n## Type Aliases\nDeno.FsEventFlag\n\nAdditional information for FsEvent objects with the \"other\" kind.\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/file-system", "title": "Deno File System API", "description": "Documentation for the Deno File System API, including classes, functions, interfaces, and type aliases.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-28 01:19:51", "type": "overview", "page_metadata": {"og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:title": "File System - Deno documentation", "og:type": "article", "og:locale": "en_US", "title": "File System - Deno documentation", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:title": "File System - Deno documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:site_name": "Deno", "ogTitle": "File System - Deno documentation", "twitter:card": "summary_large_image", "scrapeId": "47af93ea-5112-4fdd-96d3-becf7470c52a", "sourceURL": "https://docs.deno.com/api/deno/file-system", "url": "https://docs.deno.com/api/deno/file-system", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"require-await\"?\n\nAssistant: This rule disallows async functions that have no await expression or await using declaration.\n\nHere's a detailed explanation:\n\n\n## Enable full set in deno.json\n```json\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n## Enable full set using the Deno CLI\n```bash\ndeno lint --tags=recommended\n```\n\n## Invalid examples\n**Invalid:**\n\n```highlight notranslate typescript\nasync function f1() {\n  doSomething();\n}\n\nconst f2 = async () => {\n  doSomething();\n};\n\nconst f3 = async () => doSomething();\n\nconst obj = {\n  async method() {\n    doSomething();\n  },\n};\n\nclass MyClass {\n  async method() {\n    doSomething();\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/require-await", "title": "require-await", "description": "This rule disallows async functions that have no await expression or await using declaration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:20:15", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:title": "require-await", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "require-await", "twitter:site": "@deno_land", "ogTitle": "require-await", "ogImage": "/img/og.webp", "twitter:title": "require-await", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:image": "/img/og.webp", "scrapeId": "853aa220-4e5d-4e49-88c3-09ca914d9c7c", "sourceURL": "https://docs.deno.com/lint/rules/require-await", "url": "https://docs.deno.com/lint/rules/require-await/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"require-await\"?\n\nAssistant: Here are some code examples:\n\n### Invalid examples\n```yaml\n```highlight notranslate typescript\nasync function f1() {\n  doSomething();\n}\n\nconst f2 = async () => {\n  doSomething();\n};\n\nconst f3 = async () => doSomething();\n\nconst obj = {\n  async method() {\n    doSomething();\n  },\n};\n\nclass MyClass {\n  async method() {\n    doSomething();\n  }\n}\n```\n\n```\n\n### Valid examples\n```yaml\n**Valid:**\n\n```highlight notranslate typescript\nawait asyncFunction();\n\nfunction normalFunction() {\n  doSomething();\n}\n\nasync function f1() {\n  await asyncFunction();\n}\n\nconst f2 = async () => {\n  await asyncFunction();\n};\n\nconst f3 = async () => await asyncFunction();\n\nasync function f4() {\n  for await (const num of asyncIterable) {\n    console.log(num);\n  }\n}\n\nasync function f5() {\n  using = createResource();\n}\n\n// empty functions are valid\nasync function emptyFunction() {}\nconst emptyArrowFunction = async () => {};\n\n// generators are also valid\nasync function* gen() {\n  console.log(42);\n}\n```\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/require-await", "title": "require-await", "description": "This rule disallows async functions that have no await expression or await using declaration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:20:15", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:title": "require-await", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "require-await", "twitter:site": "@deno_land", "ogTitle": "require-await", "ogImage": "/img/og.webp", "twitter:title": "require-await", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:image": "/img/og.webp", "scrapeId": "853aa220-4e5d-4e49-88c3-09ca914d9c7c", "sourceURL": "https://docs.deno.com/lint/rules/require-await", "url": "https://docs.deno.com/lint/rules/require-await/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"require-await\"?\n\nAssistant: Here are the recommended best practices:\n\n• The primary reason to use async functions is to use await expressions or await using declarations inside.\n• If an async function has neither await expressions nor await using declarations, it is most likely an unintentional mistake.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/require-await", "title": "require-await", "description": "This rule disallows async functions that have no await expression or await using declaration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:20:15", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "og:title": "require-await", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "title": "require-await", "twitter:site": "@deno_land", "ogTitle": "require-await", "ogImage": "/img/og.webp", "twitter:title": "require-await", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogSiteName": "Deno", "og:image": "/img/og.webp", "scrapeId": "853aa220-4e5d-4e49-88c3-09ca914d9c7c", "sourceURL": "https://docs.deno.com/lint/rules/require-await", "url": "https://docs.deno.com/lint/rules/require-await/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno upgrade\"?\n\nAssistant: Upgrade deno executable to the given version.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno upgrade [OPTIONS] [VERSION]...\n``` \nUpgrade deno executable to the given version.\n\n## Latest\n```\ndeno upgrade\n```\n\n## Specific version\n```\ndeno upgrade 1.45.0\n```\n```\ndeno upgrade 1.46.0-rc.1\n```\n```\ndeno upgrade 9bc2dd29ad6ba334fd57a20114e367d3c04763d4\n```\n\n## Channel\n```\ndeno upgrade stable\n```\n```\ndeno upgrade rc\n```\n```\ndeno upgrade canary\n``` \nThe version is downloaded from `https://dl.deno.land` and is used to replace the current executable.\n\nIf you want to not replace the current Deno executable but instead download an update to a different location, use the `--output` flag:\n\n```\ndeno upgrade --output $HOME/my_deno\n```\n\n## Upgrade options\n### `--dry-run`\nPerform all checks without replacing old exe.\n\n### `--force`\nShort flag: `-f`\nReplace current exe even if not out-of-date.\n\n### `--output`\nThe path to output the updated version to.\n\n## Options\n### `--cert`\nLoad certificate authority from PEM encoded file.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/upgrade", "title": "deno upgrade", "description": "Upgrade deno executable to the given version.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:20:36", "type": "overview", "page_metadata": {"title": "deno upgrade", "og:title": "deno upgrade", "ogImage": "/img/og.webp", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:site": "@deno_land", "language": "en", "ogTitle": "deno upgrade", "ogSiteName": "Deno", "twitter:title": "deno upgrade", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:site_name": "Deno", "scrapeId": "650ba277-8682-4d40-8966-3c93927ff88f", "sourceURL": "https://docs.deno.com/runtime/reference/cli/upgrade", "url": "https://docs.deno.com/runtime/reference/cli/upgrade/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno upgrade\"?\n\nAssistant: Here are some code examples:\n\n### Command line usage\n```yaml\ndeno upgrade [OPTIONS] [VERSION]...\n```\n\n### Latest version upgrade\n```yaml\ndeno upgrade\n```\n\n### Specific version upgrade\n```yaml\ndeno upgrade 1.45.0\n```\n\n### Specific version upgrade (release candidate)\n```yaml\ndeno upgrade 1.46.0-rc.1\n```\n\n### Specific version upgrade (commit hash)\n```yaml\ndeno upgrade 9bc2dd29ad6ba334fd57a20114e367d3c04763d4\n```\n\n### Channel upgrade (stable)\n```yaml\ndeno upgrade stable\n```\n\n### Channel upgrade (release candidate)\n```yaml\ndeno upgrade rc\n```\n\n### Channel upgrade (canary)\n```yaml\ndeno upgrade canary\n```\n\n### Output to a different location\n```yaml\ndeno upgrade --output $HOME/my_deno\n```\n\n### Dry run option\n```yaml\n--dry-run\n```\n\n### Force option\n```yaml\n--force\n```\n\n### Output option\n```yaml\n--output\n```\n\n### Certificate option\n```yaml\n--cert\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/upgrade", "title": "deno upgrade", "description": "Upgrade deno executable to the given version.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:20:36", "type": "code_examples", "page_metadata": {"title": "deno upgrade", "og:title": "deno upgrade", "ogImage": "/img/og.webp", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:site": "@deno_land", "language": "en", "ogTitle": "deno upgrade", "ogSiteName": "Deno", "twitter:title": "deno upgrade", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:site_name": "Deno", "scrapeId": "650ba277-8682-4d40-8966-3c93927ff88f", "sourceURL": "https://docs.deno.com/runtime/reference/cli/upgrade", "url": "https://docs.deno.com/runtime/reference/cli/upgrade/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno upgrade\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--dry-run` option to check for updates without making changes.\n• Use the `--force` option to replace the current executable even if it is not out-of-date.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/upgrade", "title": "deno upgrade", "description": "Upgrade deno executable to the given version.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:20:36", "type": "best_practices", "page_metadata": {"title": "deno upgrade", "og:title": "deno upgrade", "ogImage": "/img/og.webp", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "og:locale": "en_US", "twitter:site": "@deno_land", "language": "en", "ogTitle": "deno upgrade", "ogSiteName": "Deno", "twitter:title": "deno upgrade", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "og:site_name": "Deno", "scrapeId": "650ba277-8682-4d40-8966-3c93927ff88f", "sourceURL": "https://docs.deno.com/runtime/reference/cli/upgrade", "url": "https://docs.deno.com/runtime/reference/cli/upgrade/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"no-debugger\"?\n\nAssistant: Disallows the use of the `debugger` statement.\n\nHere's a detailed explanation:\n\n\n## Enable full set in `deno.json`\n```json\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n## Enable full set using the Deno CLI\n```bash\ndeno lint --tags=recommended\n```\n\n## Explanation\nDisallows the use of the `debugger` statement.\n\n`debugger` is a statement which is meant for stopping the javascript execution environment and start the debugger at the statement. Modern debuggers and tooling no longer need this statement and leaving it in can cause the execution of your code to stop in production.\n\n## Examples\n**Invalid:**\n\n```highlight notranslate typescript\nfunction isLongString(x: string) {\n  debugger;\n  return x.length > 100;\n}\n```\n\n**Valid:**\n\n```highlight notranslate typescript\nfunction isLongString(x: string) {\n  return x.length > 100; // set breakpoint here instead\n}\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-debugger", "title": "no-debugger", "description": "Disallows the use of the `debugger` statement.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:22:51", "type": "overview", "page_metadata": {"ogLocale": "en_US", "og:title": "no-debugger", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "twitter:title": "no-debugger", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "no-debugger", "og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "no-debugger", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogSiteName": "Deno", "scrapeId": "0f596b3a-85d9-4166-999a-b8ab99f7df65", "sourceURL": "https://docs.deno.com/lint/rules/no-debugger", "url": "https://docs.deno.com/lint/rules/no-debugger/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"no-debugger\"?\n\nAssistant: Here are some code examples:\n\n### Enable full set in `deno.json`\n```yaml\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n### Enable full set using the Deno CLI\n```yaml\ndeno lint --tags=recommended\n```\n\n### Invalid Example\n```yaml\nfunction isLongString(x: string) {\n  debugger;\n  return x.length > 100;\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-debugger", "title": "no-debugger", "description": "Disallows the use of the `debugger` statement.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:22:51", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "og:title": "no-debugger", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "twitter:title": "no-debugger", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "no-debugger", "og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "no-debugger", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogSiteName": "Deno", "scrapeId": "0f596b3a-85d9-4166-999a-b8ab99f7df65", "sourceURL": "https://docs.deno.com/lint/rules/no-debugger", "url": "https://docs.deno.com/lint/rules/no-debugger/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"no-debugger\"?\n\nAssistant: Here are the recommended best practices:\n\n• Modern debuggers and tooling no longer need the `debugger` statement.\n• Set breakpoints in your code instead of using the `debugger` statement.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-debugger", "title": "no-debugger", "description": "Disallows the use of the `debugger` statement.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:22:51", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "og:title": "no-debugger", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "twitter:title": "no-debugger", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:card": "summary_large_image", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "no-debugger", "og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "no-debugger", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "ogSiteName": "Deno", "scrapeId": "0f596b3a-85d9-4166-999a-b8ab99f7df65", "sourceURL": "https://docs.deno.com/lint/rules/no-debugger", "url": "https://docs.deno.com/lint/rules/no-debugger/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"API server with DynamoDB\"?\n\nAssistant: In this tutorial let's take a look at how we can use it to build a small API that has endpoints to insert and retrieve information, backed by DynamoDB.\n\nHere's a detailed explanation:\n\n\n## Overview\nWe're going to build an API with a single endpoint that accepts GET/POST requests and returns appropriate information\n\n```highlight notranslate sh\n# A GET request to the endpoint should return the details of the song based on its title.\nGET /songs?title=Song%20Title # '%20' == space\n# response\n{\n  title: \"Song Title\"\n  artist: \"Someone\"\n  album: \"Something\",\n  released: \"1970\",\n  genres: \"country rap\",\n}\n\n# A POST request to the endpoint should insert the song details.\nPOST /songs\n# post request body\n{\n  title: \"A New Title\"\n  artist: \"Someone New\"\n  album: \"Something New\",\n  released: \"2020\",\n  genres: \"country rap\",\n}\n\n```\n\n## Setup DynamoDB\nOur first step in the process is to generate AWS credentials to programmatically access DynamoDB.\n\nGenerate Credentials:\n\n01. Go to [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/) and go to \"Users\" section.\n02. Click on **Create user** button, fill the **User name** field (maybe use `denamo`) and select **Programmatic access** type.\n03. Click **Next**\n04. Select **Attach policies directly** and search for `AmazonDynamoDBFullAccess`. Check the box next to this policy in the results.\n05. Click **Next** and **Create user**\n06. On the resulting **Users** page, click through to the user you just created\n07. Click on **Create access key**\n08. Select **Application running outside AWS**\n09. Click **Create**\n10. Click **Download .csv file** to download the credentials you just created.\n\nCreate database table:\n\n1. Go to [https://console.aws.amazon.com/dynamodb](https://console.aws.amazon.com/dynamodb) and click on **Create table** button.\n2. Fill the **Table name** field with `songs` and **Partition key** with `title`.\n3. Scroll down and click on **Create table**.\n4. Once the table is created, click on the table name and find its **General** **information**\n5. Under **Amazon Resource Name (ARN)** take note of the region of your new table (for example us-east-1).\n\n## Write the Application\nCreate a file called `index.js` and insert the following:\n\n```highlight notranslate js\nimport {\n  json,\n  serve,\n  validateRequest,\n} from \"https://deno.land/x/sift@0.6.0/mod.ts\";\n// AWS has an official SDK that works with browsers. As most Deno Deploy's\n// APIs are similar to browser's, the same SDK works with Deno Deploy.\n// So we import the SDK along with some classes required to insert and\n// retrieve data.\nimport {\n  DynamoDBClient,\n  GetItemCommand,\n  PutItemCommand,\n} from \"https://esm.sh/@aws-sdk/client-dynamodb\";\n\n// Create a client instance by providing your region information.\n// The credentials are obtained from environment variables which\n// we set during our project creation step on Deno Deploy.\nconst client = new DynamoDBClient({\n  region: Deno.env.get(\"AWS_TABLE_REGION\"),\n  credentials: {\n    accessKeyId: Deno.env.get(\"AWS_ACCESS_KEY_ID\"),\n    secretAccessKey: Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"),\n  },\n});\n\nserve({\n  \"/songs\": handleRequest,\n});\n\nasync function handleRequest(request) {\n  // The endpoint allows GET and POST request. A parameter named \"title\"\n  // for a GET request to be processed. And body with the fields defined\n  // below are required to process POST request.\n  // validateRequest ensures that the provided terms are met by the request.\n  const { error, body } = await validateRequest(request, {\n    GET: {\n      params: [\"title\"],\n    },\n    POST: {\n      body: [\"title\", \"artist\", \"album\", \"released\", \"genres\"],\n    },\n  });\n  if (error) {\n    return json({ error: error.message }, { status: error.status });\n  }\n\n  // Handle POST request.\n  if (request.method === \"POST\") {\n    try {\n      // When we want to interact with DynamoDB, we send a command using the client\n      // instance. Here we are sending a PutItemCommand to insert the data from the\n      // request.\n      const {\n        $metadata: { httpStatusCode },\n      } = await client.send(\n        new PutItemCommand({\n          TableName: \"songs\",\n          Item: {\n            // Here 'S' implies that the value is of type string\n            // and 'N' implies a number.\n            title: { S: body.title },\n            artist: { S: body.artist },\n            album: { S: body.album },\n            released: { N: body.released },\n            genres: { S: body.genres },\n          },\n        }),\n      );\n\n      // On a successful put item request, dynamo returns a 200 status code (weird).\n      // So we test status code to verify if the data has been inserted and respond\n      // with the data provided by the request as a confirmation.\n      if (httpStatusCode === 200) {\n        return json({ ...body }, { status: 201 });\n      }\n    } catch (error) {\n      // If something goes wrong while making the request, we log\n      // the error for our reference.\n      console.log(error);\n    }\n\n    // If the execution reaches here it implies that the insertion wasn't successful.\n    return json({ error: \"couldn't insert data\" }, { status: 500 });\n  }\n\n  // Handle GET request.\n  try {\n    // We grab the title form the request and send a GetItemCommand\n    // to retrieve the information about the song.\n    const { searchParams } = new URL(request.url);\n    const { Item } = await client.send(\n      new GetItemCommand({\n        TableName: \"songs\",\n        Key: {\n          title: { S: searchParams.get(\"title\") },\n        },\n      }),\n    );\n\n    // The Item property contains all the data, so if it's not undefined,\n    // we proceed to returning the information about the title\n    if (Item) {\n      return json({\n        title: Item.title.S,\n        artist: Item.artist.S,\n        album: Item.album.S,\n        released: Item.released.S,\n        genres: Item.genres.S,\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n\n  // We might reach here if an error is thrown during the request to database\n  // or if the Item is not found in the database.\n  // We reflect both conditions with a general message.\n  return json(\n    {\n      message: \"couldn't find the title\",\n    },\n    { status: 404 },\n  );\n}\n\n```\n\n## Deploy the Application\nNow that we have everything in place, let's deploy your new application!\n\n1. In your browser, visit [Deno Deploy](https://dash.deno.com/new_project) and link your GitHub account.\n2. Select the repository which contains your new application.\n3. You can give your project a name or allow Deno to generate one for you\n4. Select `index.js` in the Entrypoint dropdown\n5. Click **Deploy Project**\n\nIn order for your Application to work, we will need to configure its environment variables.\n\nOn your project's success page, or in your project dashboard, click on **Add** **environmental variables**. Under Environment Variables, click **\\+ Add** **Variable**. Create the following variables:\n\n1. `AWS_ACCESS_KEY_ID` \\- with the value from the CSV you downloaded\n2. `AWS_SECRET_ACCESS_KEY` \\- with the value from the CSV you downloaded.\n3. `AWS_TABLE_REGION` \\- with your table's region\n\nClick to save the variables.\n\nLet's test the API.\n\nPOST some data.\n\n```highlight notranslate sh\ncurl --request POST --data \\\n'{\"title\": \"Old Town Road\", \"artist\": \"Lil Nas X\", \"album\": \"7\", \"released\": \"2019\", \"genres\": \"Country rap, Pop\"}' \\\n--dump-header - https://<project_name>.deno.dev/songs\n\n```\n\nGET information about the title.\n\n```highlight notranslate sh\ncurl https://<project_name>.deno.dev/songs?title=Old%20Town%20Road\n\n```\n\nCongratulations on learning how to use DynamoDB with Deno Deploy!\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-dynamodb", "title": "API server with DynamoDB", "description": "In this tutorial let's take a look at how we can use it to build a small API that has endpoints to insert and retrieve information, backed by DynamoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:23:36", "type": "overview", "page_metadata": {"ogLocale": "en_US", "twitter:card": "summary_large_image", "title": "API server with DynamoDB", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "ogTitle": "API server with DynamoDB", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:title": "API server with DynamoDB", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:title": "API server with DynamoDB", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "50d66b35-eab9-4ad1-ac21-c84940ceb18b", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-dynamodb", "url": "https://docs.deno.com/deploy/tutorials/tutorial-dynamodb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"API server with DynamoDB\"?\n\nAssistant: Here are some code examples:\n\n### GET Request Example\n```yaml\nGET /songs?title=Song%20Title # '%20' == space\n# response\n{\n  title: \"Song Title\"\n  artist: \"Someone\"\n  album: \"Something\",\n  released: \"1970\",\n  genres: \"country rap\",\n}\n```\n\n### POST Request Example\n```yaml\nPOST /songs\n# post request body\n{\n  title: \"A New Title\"\n  artist: \"Someone New\"\n  album: \"Something New\",\n  released: \"2020\",\n  genres: \"country rap\",\n}\n```\n\n### Deno Application Code\n```yaml\nimport {\n  json,\n  serve,\n  validateRequest,\n} from \"https://deno.land/x/sift@0.6.0/mod.ts\";\nimport {\n  DynamoDBClient,\n  GetItemCommand,\n  PutItemCommand,\n} from \"https://esm.sh/@aws-sdk/client-dynamodb\";\n\nconst client = new DynamoDBClient({\n  region: Deno.env.get(\"AWS_TABLE_REGION\"),\n  credentials: {\n    accessKeyId: Deno.env.get(\"AWS_ACCESS_KEY_ID\"),\n    secretAccessKey: Deno.env.get(\"AWS_SECRET_ACCESS_KEY\"),\n  },\n});\n\nserve({\n  \"/songs\": handleRequest,\n});\n\nasync function handleRequest(request) {\n  // ... function implementation ...\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-dynamodb", "title": "API server with DynamoDB", "description": "In this tutorial let's take a look at how we can use it to build a small API that has endpoints to insert and retrieve information, backed by DynamoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:23:36", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "twitter:card": "summary_large_image", "title": "API server with DynamoDB", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "ogTitle": "API server with DynamoDB", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:title": "API server with DynamoDB", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:title": "API server with DynamoDB", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "50d66b35-eab9-4ad1-ac21-c84940ceb18b", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-dynamodb", "url": "https://docs.deno.com/deploy/tutorials/tutorial-dynamodb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"API server with DynamoDB\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have an AWS and Deno Deploy account before starting the tutorial.\n• When creating AWS credentials, make sure to select the correct permissions for DynamoDB access.\n• Always validate the request parameters and body to ensure they meet the expected format before processing.\n• Use environment variables to store sensitive information like AWS credentials securely.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-dynamodb", "title": "API server with DynamoDB", "description": "In this tutorial let's take a look at how we can use it to build a small API that has endpoints to insert and retrieve information, backed by DynamoDB.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:23:36", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "twitter:card": "summary_large_image", "title": "API server with DynamoDB", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "ogTitle": "API server with DynamoDB", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "twitter:title": "API server with DynamoDB", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:locale": "en_US", "og:title": "API server with DynamoDB", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "scrapeId": "50d66b35-eab9-4ad1-ac21-c84940ceb18b", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-dynamodb", "url": "https://docs.deno.com/deploy/tutorials/tutorial-dynamodb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno init, start a new project\"?\n\nAssistant: This page covers the usage of the `deno init` command to scaffold a new Deno project, including options, examples, and specific project types.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno init [OPTIONS] [DIRECTORY OR PACKAGE]...\n```\n\nscaffolds a basic Deno project with a script, test, and configuration file\n\n## Options\n### `--lib`\nGenerate an example library project.\n\n### `--npm`\nGenerate a npm create-* project.\n\n### `--serve`\nGenerate an example project for `deno serve`.\n\n## Examples\n```highlight notranslate sh\n$ deno init\n✅ Project initialized\nRun these commands to get started\n\n  // Run the program\n  deno run main.ts\n\n  // Run the program and watch for file changes\n  deno task dev\n\n  // Run the tests\n  deno test\n\n$ deno run main.ts\nAdd 2 + 3 = 5\n\n$ deno test\nCheck file:///dev/main_test.ts\nrunning 1 test from main_test.ts\naddTest ... ok (6ms)\n\nok | 1 passed | 0 failed (29ms)\n```\n\nThe `init` subcommand will create two files ( `main.ts` and `main_test.ts`). These files provide a basic example of how to write a Deno program and how to write tests for it. The `main.ts` file exports a `add` function that adds two numbers together and the `main_test.ts` file contains a test for this function.\n\nYou can also specify an argument to `deno init` to initialize a project in a specific directory:\n\n```highlight notranslate sh\n$ deno init my_deno_project\n✅ Project initialized\n\nRun these commands to get started\n\n  cd my_deno_project\n\n  // Run the program\n  deno run main.ts\n\n  // Run the program and watch for file changes\n  deno task dev\n\n  // Run the tests\n  deno test\n\n```\n\n## Init a JSR package\nBy running `deno init --lib` Deno will bootstrap a project that is ready to be published on [JSR](https://jsr.io/).\n\n```highlight notranslate sh\n$ deno init --lib\n✅ Project initialized\n\nRun these commands to get started\n\n  # Run the tests\n  deno test\n\n  # Run the tests and watch for file changes\n  deno task dev\n\n  # Publish to JSR (dry run)\n  deno publish --dry-run\n\n```\n\nInside `deno.json` you'll see that the entries for `name`, `exports` and `version` are prefilled.\n\n```highlight notranslate json\n{\n  \"name\": \"my-lib\",\n  \"version\": \"0.1.0\",\n  \"exports\": \"./mod.ts\",\n  \"tasks\": {\n    \"dev\": \"deno test --watch mod.ts\"\n  },\n  \"imports\": {\n    \"@std/assert\": \"jsr:@std/assert@1\"\n  }\n}\n\n```\n\n## Initialize a web server\nRunning `deno init --serve` bootstraps a web server that works with [`deno serve`](https://docs.deno.com/runtime/reference/cli/serve).\n\n```highlight notranslate sh\n$ deno init --serve\n✅ Project initialized\n\nRun these commands to get started\n\n  # Run the server\n  deno serve -R main.ts\n\n  # Run the server and watch for file changes\n  deno task dev\n\n  # Run the tests\n  deno -R test\n\n```\n\nYour [`deno.json`](https://docs.deno.com/runtime/fundamentals/configuration/) file will look like this:\n\n```highlight notranslate json\n{\n  \"tasks\": {\n    \"dev\": \"deno serve --watch -R main.ts\"\n  },\n  \"imports\": {\n    \"@std/assert\": \"jsr:@std/assert@1\",\n    \"@std/http\": \"jsr:@std/http@1\"\n  }\n}\n\n```\n\nNow, you can start your web server, which [watches for changes](https://docs.deno.com/runtime/getting_started/command_line_interface/#watch-mode), by running `deno task dev`.\n\n```highlight notranslate sh\n$ deno task dev\nTask dev deno serve --watch -R main.ts\nWatcher Process started.\ndeno serve: Listening on http://0.0.0.0:8000/\n\n```\n\n## Generate a library project\nYou can append a `--lib` flag to add extra parameters to your `deno.json`, such as \"name\", \"version\" and an \"exports\" fields.\n\n```highlight notranslate sh\n$ deno init my_deno_project --lib\n✅ Project initialized\n\n``` \n\nThe resulting `deno.json` will be as follows:\n\n```highlight notranslate jsonc\n{\n  \"name\": \"my_deno_project\",\n  \"version\": \"0.1.0\",\n  \"exports\": \"./mod.ts\",\n  \"tasks\": {\n    \"dev\": \"deno test --watch mod.ts\"\n  },\n  \"license\": \"MIT\",\n  \"imports\": {\n    \"@std/assert\": \"jsr:@std/assert@1\"\n  }\n}\n\n```\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/init", "title": "deno init, start a new project", "description": "This page covers the usage of the `deno init` command to scaffold a new Deno project, including options, examples, and specific project types.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:24:17", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "`deno init`, start a new project", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:title": "`deno init`, start a new project", "title": "`deno init`, start a new project", "twitter:title": "`deno init`, start a new project", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:locale": "en_US", "scrapeId": "6c44f473-2210-44ae-8bc0-6c716f1b233d", "sourceURL": "https://docs.deno.com/runtime/reference/cli/init", "url": "https://docs.deno.com/runtime/reference/cli/init/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno init, start a new project\"?\n\nAssistant: Here are some code examples:\n\n### Basic Deno project initialization\n```yaml\n```highlight notranslate sh\n$ deno init\n✅ Project initialized\nRun these commands to get started\n\n  // Run the program\n  deno run main.ts\n\n  // Run the program and watch for file changes\n  deno task dev\n\n  // Run the tests\n  deno test\n\n$ deno run main.ts\nAdd 2 + 3 = 5\n\n$ deno test\nCheck file:///dev/main_test.ts\nrunning 1 test from main_test.ts\naddTest ... ok (6ms)\n\nok | 1 passed | 0 failed (29ms)\n```\n```\n\n### Initialize a project in a specific directory\n```yaml\n```highlight notranslate sh\n$ deno init my_deno_project\n✅ Project initialized\n\nRun these commands to get started\n\n  cd my_deno_project\n\n  // Run the program\n  deno run main.ts\n\n  // Run the program and watch for file changes\n  deno task dev\n\n  // Run the tests\n  deno test\n\n```\n```\n\n### JSR package initialization\n```yaml\n```highlight notranslate sh\n$ deno init --lib\n✅ Project initialized\n\nRun these commands to get started\n\n  # Run the tests\n  deno test\n\n  # Run the tests and watch for file changes\n  deno task dev\n\n  # Publish to JSR (dry run)\n  deno publish --dry-run\n```\n```\n\n### Web server initialization\n```yaml\n```highlight notranslate sh\n$ deno init --serve\n✅ Project initialized\n\nRun these commands to get started\n\n  # Run the server\n  deno serve -R main.ts\n\n  # Run the server and watch for file changes\n  deno task dev\n\n  # Run the tests\n  deno -R test\n```\n```\n\n### Generate a library project with extra parameters\n```yaml\n```highlight notranslate sh\n$ deno init my_deno_project --lib\n✅ Project initialized\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/init", "title": "deno init, start a new project", "description": "This page covers the usage of the `deno init` command to scaffold a new Deno project, including options, examples, and specific project types.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:24:17", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "`deno init`, start a new project", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:title": "`deno init`, start a new project", "title": "`deno init`, start a new project", "twitter:title": "`deno init`, start a new project", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:locale": "en_US", "scrapeId": "6c44f473-2210-44ae-8bc0-6c716f1b233d", "sourceURL": "https://docs.deno.com/runtime/reference/cli/init", "url": "https://docs.deno.com/runtime/reference/cli/init/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno init, start a new project\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can specify an argument to `deno init` to initialize a project in a specific directory.\n• Use the `--lib` option to generate an example library project.\n• Use the `--serve` option to bootstrap a web server that works with `deno serve`.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/init", "title": "deno init, start a new project", "description": "This page covers the usage of the `deno init` command to scaffold a new Deno project, including options, examples, and specific project types.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-28 01:24:17", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogTitle": "`deno init`, start a new project", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:title": "`deno init`, start a new project", "title": "`deno init`, start a new project", "twitter:title": "`deno init`, start a new project", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:locale": "en_US", "scrapeId": "6c44f473-2210-44ae-8bc0-6c716f1b233d", "sourceURL": "https://docs.deno.com/runtime/reference/cli/init", "url": "https://docs.deno.com/runtime/reference/cli/init/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno KV Operations\"?\n\nAssistant: The Deno KV API provides a set of operations that can be performed on the key space.\n\nHere's a detailed explanation:\n\n\n## Operations\nThe Deno KV API provides a set of operations that can be performed on the key space.\n\nThere are two operations that read data from the store, and five operations that write data to the store.\n\nRead operations can either be performed in strong or eventual consistency mode. Strong consistency mode guarantees that the read operation will return the most recently written value. Eventual consistency mode may return a stale value, but is faster.\n\n## get\nThe `get` operation returns the value and versionstamp associated with a given key. If a value does not exist, get returns a `null` value and versionstamp.\n\nThere are two APIs that can be used to perform a `get` operation. The [`Deno.Kv.prototype.get(key, options?)`](https://docs.deno.com/api/deno/~/Deno.Kv.prototype.get) API, which can be used to read a single key, and the [`Deno.Kv.prototype.getMany(keys, options?)`](https://docs.deno.com/api/deno/~/Deno.Kv.prototype.getMany) API, which can be used to read multiple keys at once.\n\nGet operations are performed as a \"snapshot read\" in all consistency modes. This means that when retrieving multiple keys at once, the values returned will be consistent with each other.\n\n## list\nThe `list` operation returns a list of keys that match a given selector. The associated values and versionstamps for these keys are also returned. There are 2 different selectors that can be used to filter the keys matched.\n\nThe `prefix` selector matches all keys that start with the given prefix key parts, but not inclusive of an exact match of the key. The prefix selector may optionally be given a `start` OR `end` key to limit the range of keys returned. The `start` key is inclusive, and the `end` key is exclusive.\n\nThe `range` selector matches all keys that are lexicographically between the given `start` and `end` keys. The `start` key is inclusive, and the `end` key is exclusive.\n\n## set\nThe `set` operation sets the value of a key in the store. If the key does not exist, it is created. If the key already exists, its value is overwritten.\n\n## delete\nThe `delete` operation deletes a key from the store. If the key does not exist, the operation is a no-op.\n\n## sum\nThe `sum` operation atomically adds a value to a key in the store. If the key does not exist, it is created with the value of the sum. If the key already exists, its value is added to the sum.\n\n## min\nThe `min` operation atomically sets a key to the minimum of its current value and a given value. If the key does not exist, it is created with the given value. If the key already exists, its value is set to the minimum of its current value and the given value.\n\n## max\nThe `max` operation atomically sets a key to the maximum of its current value and a given value. If the key does not exist, it is created with the given value. If the key already exists, its value is set to the maximum of its current value and the given value.\n\n## watch\nThe `watch` operation accepts an array of keys, and returns a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream), which emits a new value whenever any of the watched keys change their `versionstamp`. The emitted value is an array of [Deno.KvEntryMaybe](https://docs.deno.com/api/deno/~/Deno.KvEntryMaybe) objects.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/operations", "title": "Deno KV Operations", "description": "The Deno KV API provides a set of operations that can be performed on the key space.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 01:24:49", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Operations", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "twitter:title": "Operations", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:title": "Operations", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "title": "Operations", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "scrapeId": "7bf293f2-37ba-4b45-962f-7196ed103457", "sourceURL": "https://docs.deno.com/deploy/kv/manual/operations", "url": "https://docs.deno.com/deploy/kv/manual/operations/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno KV Operations\"?\n\nAssistant: Here are some code examples:\n\n### get example\n```yaml\nconst res = await kv.get<string>([\"config\"]);\nconsole.log(res); // { key: [\"config\"], value: \"value\", versionstamp: \"000002fa526aaccb0000\" }\n```\n\n### list example\n```yaml\nconst iter = kv.list<string>({ prefix: [\"users\"] });\nconst users = [];\nfor await (const res of iter) users.push(res);\nconsole.log(users[0]); // { key: [\"users\", \"alex\"], value: \"alex\", versionstamp: \"00a44a3c3e53b9750000\" }\n```\n\n### set example\n```yaml\nconst res = await kv.set([\"users\", \"alex\"], \"alex\");\nconsole.log(res.versionstamp); // \"00a44a3c3e53b9750000\"\n```\n\n### delete example\n```yaml\nawait kv.delete([\"users\", \"alex\"]);\n```\n\n### sum example\n```yaml\nawait kv.atomic()\n  .mutate({\n    type: \"sum\",\n    key: [\"accounts\", \"alex\"],\n    value: new Deno.KvU64(100n),\n  })\n  .commit();\n```\n\n### min example\n```yaml\nawait kv.atomic()\n  .mutate({\n    type: \"min\",\n    key: [\"accounts\", \"alex\"],\n    value: new Deno.KvU64(100n),\n  })\n  .commit();\n```\n\n### max example\n```yaml\nawait kv.atomic()\n  .mutate({\n    type: \"max\",\n    key: [\"accounts\", \"alex\"],\n    value: new Deno.KvU64(100n),\n  })\n  .commit();\n```\n\n### watch example\n```yaml\nconst db = await Deno.openKv();\n\nconst stream = db.watch([[\"foo\"], [\"bar\"]]);\nfor await (const entries of stream) {\n  entries[0].key; // [\"foo\"]\n  entries[0].value; // \"bar\"\n  entries[0].versionstamp; // \"00000000000000010000\"\n  entries[1].key; // [\"bar\"]\n  entries[1].value; // null\n  entries[1].versionstamp; // null\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/operations", "title": "Deno KV Operations", "description": "The Deno KV API provides a set of operations that can be performed on the key space.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 01:24:49", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Operations", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "twitter:title": "Operations", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:title": "Operations", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "title": "Operations", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "scrapeId": "7bf293f2-37ba-4b45-962f-7196ed103457", "sourceURL": "https://docs.deno.com/deploy/kv/manual/operations", "url": "https://docs.deno.com/deploy/kv/manual/operations/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno KV Operations\"?\n\nAssistant: Here are the recommended best practices:\n\n• Read operations can either be performed in strong or eventual consistency mode.\n• Write operations are always performed in strong consistency mode.\n• The list operation reads data from the store in batches. The size of each batch can be controlled using the `batchSize` option. The default batch size is 500 keys.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/operations", "title": "Deno KV Operations", "description": "The Deno KV API provides a set of operations that can be performed on the key space.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 01:24:49", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Operations", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "twitter:title": "Operations", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:title": "Operations", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "title": "Operations", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "scrapeId": "7bf293f2-37ba-4b45-962f-7196ed103457", "sourceURL": "https://docs.deno.com/deploy/kv/manual/operations", "url": "https://docs.deno.com/deploy/kv/manual/operations/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"WebSocket Interface\"?\n\nAssistant: Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.\n\nHere's a detailed explanation:\n\n\n## Properties\n### Properties\n\n`#binaryType: BinaryType`\n\nReturns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n\nCan be set, to change how binary data is returned. The default is \"blob\".\n\n```highlight notranslate ts\nconst ws = new WebSocket(\"ws://localhost:8080\");\nws.binaryType = \"arraybuffer\";\n```\n\nreadonly\n\n`#bufferedAmount: number`\n\nReturns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n\nIf the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n\n```highlight notranslate ts\nconst ws = new WebSocket(\"ws://localhost:8080\");\nws.send(\"Hello, world!\");\nconsole.log(ws.bufferedAmount); // 13\n```\n\nreadonly\n\n`#extensions: string`\n\nReturns the extensions selected by the server, if any.\n\nWebSocket extensions add optional features negotiated during the handshake via\nthe `Sec-WebSocket-Extensions` header.\n\nAt the time of writing, there are two registered extensions:\n\n- [`permessage-deflate`](https://www.rfc-editor.org/rfc/rfc7692.html): Enables per-message compression using DEFLATE.\n- [`bbf-usp-protocol`](https://usp.technology/): Used by the Broadband Forum's User Services Platform (USP).\n\nSee the full list at [IANA WebSocket Extensions](https://www.iana.org/assignments/websocket/websocket.xml#extension-name).\n\nExample:\n\n```highlight notranslate ts\nconst ws = new WebSocket(\"ws://localhost:8080\");\nconsole.log(ws.extensions); // e.g., \"permessage-deflate\"\n```\n\n`#onclose: ((this: WebSocket, ev: CloseEvent,) => any) | null`\n\n`#onerror: ((this: WebSocket, ev: Event | ErrorEvent,) => any) | null`\n\n`#onmessage: ((this: WebSocket, ev: MessageEvent,) => any) | null`\n\n`#onopen: ((this: WebSocket, ev: Event,) => any) | null`\n\nreadonly\n\n`#protocol: string`\n\nReturns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.\n\nreadonly\n\n`#readyState: number`\n\nReturns the state of the WebSocket object's connection. It can have the values described below.\n\nreadonly\n\n`#url: string`\n\nReturns the URL that was used to establish the WebSocket connection.\n\nreadonly\n\n`#CLOSED: number`\n\nreadonly\n\n`#CLOSING: number`\n\nreadonly\n\n`#CONNECTING: number`\n\nreadonly\n\n`#OPEN: number`\n\n## Methods\n### Methods\n\n`#close(code?: number, reason?: string,): void`\n\nCloses the WebSocket connection, optionally using code as the WebSocket connection close code and reason as the WebSocket connection close reason.\n\n`#send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void`\n\nTransmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.\n\n`#addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: ((this: WebSocket, ev: WebSocketEventMap[K],) => any), options?: boolean | AddEventListenerOptions,): void`\n\n`#addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions,): void`\n\n`#removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: ((this: WebSocket, ev: WebSocketEventMap[K],) => any), options?: boolean | EventListenerOptions,): void`\n\n`#removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions,): void`\n\n## See Also\n- [https://developer.mozilla.org/docs/Web/API/WebSocket](https://developer.mozilla.org/docs/Web/API/WebSocket)\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/WebSocket", "title": "WebSocket Interface", "description": "Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:25:15", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "WebSocket - WebSockets - Web documentation", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:title": "WebSocket - WebSockets - Web documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "WebSocket - WebSockets - Web documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "WebSocket - WebSockets - Web documentation", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "16bdb5e0-7b04-44ab-8ddc-471d80a94831", "sourceURL": "https://docs.deno.com/api/web/~/WebSocket", "url": "https://docs.deno.com/api/web/~/WebSocket", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"WebSocket Interface\"?\n\nAssistant: Here are some code examples:\n\n### Setting binaryType\n```yaml\nconst ws = new WebSocket(\"ws://localhost:8080\");\nws.binaryType = \"arraybuffer\";\n```\n\n### Checking bufferedAmount\n```yaml\nconst ws = new WebSocket(\"ws://localhost:8080\");\nws.send(\"Hello, world!\");\nconsole.log(ws.bufferedAmount); // 13\n```\n\n### Checking extensions\n```yaml\nconst ws = new WebSocket(\"ws://localhost:8080\");\nconsole.log(ws.extensions); // e.g., \"permessage-deflate\"\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/WebSocket", "title": "WebSocket Interface", "description": "Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:25:15", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "WebSocket - WebSockets - Web documentation", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:title": "WebSocket - WebSockets - Web documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "WebSocket - WebSockets - Web documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "WebSocket - WebSockets - Web documentation", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "16bdb5e0-7b04-44ab-8ddc-471d80a94831", "sourceURL": "https://docs.deno.com/api/web/~/WebSocket", "url": "https://docs.deno.com/api/web/~/WebSocket", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"WebSocket Interface\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you are looking to create a WebSocket server, please take a look at `Deno.upgradeWebSocket()`.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/WebSocket", "title": "WebSocket Interface", "description": "Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:25:15", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "WebSocket - WebSockets - Web documentation", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:title": "WebSocket - WebSockets - Web documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "og:locale": "en_US", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "WebSocket - WebSockets - Web documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "WebSocket - WebSockets - Web documentation", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "16bdb5e0-7b04-44ab-8ddc-471d80a94831", "sourceURL": "https://docs.deno.com/api/web/~/WebSocket", "url": "https://docs.deno.com/api/web/~/WebSocket", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"KV on Deno Deploy\"?\n\nAssistant: Deno Deploy now offers a built-in serverless key-value database called Deno KV.\n\nHere's a detailed explanation:\n\n\n## Consistency\nDeno KV, by default, is a strongly-consistent database. It provides the strictest form of strong consistency called _external consistency_, which implies:\n\n- **Serializability**: This is the highest level of isolation for transactions. It ensures that the concurrent execution of multiple transactions results in a system state that would be the same as if the transactions were executed sequentially, one after another. In other words, the end result of serializable transactions is equivalent to some sequential order of these transactions.\n- **Linearizability**: This consistency model guarantees that operations, such as read and write, appear to be instantaneous and occur in real-time. Once a write operation completes, all subsequent read operations will immediately return the updated value. Linearizability ensures a strong real-time ordering of operations, making the system more predictable and easier to reason about.\n\nMeanwhile, you can choose to relax consistency constraints by setting the `consistency: \"eventual\"` option on individual read operations. This option allows the system to serve the read from global replicas and caches for minimal latency.\n\nBelow are the latency figures observed in our top regions:\n\n| Region | Latency (Eventual Consistency) | Latency (Strong Consistency) |\n| --- | --- | --- |\n| North Virginia (us-east4) | 7ms | 7ms |\n| Frankfurt (europe-west3) | 7ms | 94ms |\n| Netherlands (europe-west4) | 13ms | 95ms |\n| California (us-west2) | 72ms | 72ms |\n| Hong Kong (asia-east2) | 42ms | 194ms |\n\n## Distributed queues\nServerless distributed queues are available on Deno Deploy. See [Queues on Deno Deploy](https://docs.deno.com/deploy/kv/manual/queue_overview#queues-on-deno-deploy) for more details.\n\n## Connect to managed databases from outside of Deno Deploy\nYou can connect to your Deno Deploy KV database from your Deno application outside of Deno Deploy. To open a managed database, set the `DENO_KV_ACCESS_TOKEN` environment variable to a Deno Deploy personal access token and provide the URL of the database to `Deno.openKv`:\n\n```highlight notranslate ts\nconst kv = await Deno.openKv(\n  \"https://api.deno.com/databases/<database-id>/connect\",\n);\n```\n\nPlease check the [docs](https://github.com/denoland/deno/tree/main/ext/kv#kv-connect) for the specification of the protocol for connecting to a remote KV database.\n\n## Data distribution\nDeno KV databases are replicated across at least 6 data centers, spanning 3 regions (US, Europe, and Asia). Once a write operation is committed, its mutations are persistently stored in a minimum of two data centers within the primary region. Asynchronous replication typically transfers these mutations to the other two regions in under 10 seconds.\n\nThe system is designed to tolerate most data center-level failures without experiencing downtime or data loss. Recovery Point Objectives (RPO) and Recovery Time Objectives (RTO) help quantify the system's resilience under various failure modes. RPO represents the maximum acceptable amount of data loss measured in time, whereas RTO signifies the maximum acceptable time required to restore the system to normal operations after a failure.\n\n- Loss of one data center in the primary region: RPO=0 (no data loss), RTO<5s (system restoration in under 5 seconds)\n- Loss of any number of data centers in a replica region: RPO=0, RTO<5s\n- Loss of two or more data centers in the primary region: RPO<60s (under 60 seconds of data loss)\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/on_deploy", "title": "KV on Deno Deploy", "description": "Deno Deploy now offers a built-in serverless key-value database called Deno KV.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:26:01", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:title": "KV on Deno Deploy", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "KV on Deno Deploy", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogImage": "/img/og.webp", "ogTitle": "KV on Deno Deploy", "language": "en", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "ogSiteName": "Deno", "title": "KV on Deno Deploy", "og:locale": "en_US", "scrapeId": "3aa9742e-ee63-4679-a08a-a55d0b9f8afc", "sourceURL": "https://docs.deno.com/deploy/kv/manual/on_deploy", "url": "https://docs.deno.com/deploy/kv/manual/on_deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"KV on Deno Deploy\"?\n\nAssistant: Here are some code examples:\n\n### Connect to Deno Deploy KV Database\n```yaml\nconst kv = await Deno.openKv(\n  \"https://api.deno.com/databases/<database-id>/connect\",\n);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/on_deploy", "title": "KV on Deno Deploy", "description": "Deno Deploy now offers a built-in serverless key-value database called Deno KV.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:26:01", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:title": "KV on Deno Deploy", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "KV on Deno Deploy", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogImage": "/img/og.webp", "ogTitle": "KV on Deno Deploy", "language": "en", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "ogSiteName": "Deno", "title": "KV on Deno Deploy", "og:locale": "en_US", "scrapeId": "3aa9742e-ee63-4679-a08a-a55d0b9f8afc", "sourceURL": "https://docs.deno.com/deploy/kv/manual/on_deploy", "url": "https://docs.deno.com/deploy/kv/manual/on_deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"KV on Deno Deploy\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno KV is strongly consistent by default, providing external consistency with serializability and linearizability.\n• You can relax consistency constraints by using the 'eventual' option for minimal latency on reads.\n• Deno KV databases are replicated across at least 6 data centers for resilience and availability.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/on_deploy", "title": "KV on Deno Deploy", "description": "Deno Deploy now offers a built-in serverless key-value database called Deno KV.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:26:01", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:title": "KV on Deno Deploy", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "KV on Deno Deploy", "og:site_name": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "ogImage": "/img/og.webp", "ogTitle": "KV on Deno Deploy", "language": "en", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "ogSiteName": "Deno", "title": "KV on Deno Deploy", "og:locale": "en_US", "scrapeId": "3aa9742e-ee63-4679-a08a-a55d0b9f8afc", "sourceURL": "https://docs.deno.com/deploy/kv/manual/on_deploy", "url": "https://docs.deno.com/deploy/kv/manual/on_deploy/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"for-direction\"?\n\nAssistant: This rule is part of the recommended rule set for Deno linting, focusing on the correct direction of incrementing for loop control variables.\n\nHere's a detailed explanation:\n\n\n## Enabling the Rule\nEnable full set in `deno.json`:\n\n```\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\nEnable full set using the Deno CLI:\n\n```\ndeno lint --tags=recommended\n```\n\n## Rule Explanation\nRequires `for` loop control variables to increment in the correct direction.\n\nIncrementing `for` loop control variables in the wrong direction leads to infinite loops. This can occur through incorrect initialization, bad continuation step logic or wrong direction incrementing of the loop control variable.\n\n## Examples\n**Invalid:**\n\n```highlight notranslate typescript\n// Infinite loop\nfor (let i = 0; i < 2; i--) {}\n```\n\n**Valid:**\n\n```highlight notranslate typescript\nfor (let i = 0; i < 2; i++) {}\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/for-direction", "title": "for-direction", "description": "This rule is part of the recommended rule set for Deno linting, focusing on the correct direction of incrementing for loop control variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:28:30", "type": "overview", "page_metadata": {"language": "en", "title": "for-direction", "viewport": "width=device-width, initial-scale=1", "og:title": "for-direction", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:title": "for-direction", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "for-direction", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "6068a462-8f64-464b-9bd9-f33621cafab3", "sourceURL": "https://docs.deno.com/lint/rules/for-direction", "url": "https://docs.deno.com/lint/rules/for-direction/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"for-direction\"?\n\nAssistant: Here are some code examples:\n\n### Enabling in deno.json\n```yaml\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n### Enabling via Deno CLI\n```yaml\ndeno lint --tags=recommended\n```\n\n### Invalid Example\n```yaml\n// Infinite loop\nfor (let i = 0; i < 2; i--) {}\n```\n\n### Valid Example\n```yaml\nfor (let i = 0; i < 2; i++) {}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/for-direction", "title": "for-direction", "description": "This rule is part of the recommended rule set for Deno linting, focusing on the correct direction of incrementing for loop control variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:28:30", "type": "code_examples", "page_metadata": {"language": "en", "title": "for-direction", "viewport": "width=device-width, initial-scale=1", "og:title": "for-direction", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:title": "for-direction", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "for-direction", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "6068a462-8f64-464b-9bd9-f33621cafab3", "sourceURL": "https://docs.deno.com/lint/rules/for-direction", "url": "https://docs.deno.com/lint/rules/for-direction/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"for-direction\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure loop control variables are initialized correctly.\n• Verify continuation step logic is appropriate for the loop's intended behavior.\n• Always increment loop control variables in the correct direction to avoid infinite loops.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/for-direction", "title": "for-direction", "description": "This rule is part of the recommended rule set for Deno linting, focusing on the correct direction of incrementing for loop control variables.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:28:30", "type": "best_practices", "page_metadata": {"language": "en", "title": "for-direction", "viewport": "width=device-width, initial-scale=1", "og:title": "for-direction", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "ogLocale": "en_US", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "twitter:title": "for-direction", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "for-direction", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "og:site_name": "Deno", "og:locale": "en_US", "twitter:image": "/img/og.webp", "scrapeId": "6068a462-8f64-464b-9bd9-f33621cafab3", "sourceURL": "https://docs.deno.com/lint/rules/for-direction", "url": "https://docs.deno.com/lint/rules/for-direction/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno completions\"?\n\nAssistant: Output shell completion script to standard output.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno completions [OPTIONS] [shell]\n```\n\n## Examples\n### Configure Bash shell completion\n```highlight notranslate bash\ndeno completions bash > /usr/local/etc/bash_completion.d/deno.bash\nsource /usr/local/etc/bash_completion.d/deno.bash\n```\n\n### Configure PowerShell shell completion\n```highlight notranslate bash\ndeno completions powershell | Out-String | Invoke-Expression\n```\n\n### Configure zsh shell completion\nFirst add the following to your `.zshrc` file:\n```highlight notranslate bash\nfpath=(~/.zsh/completion $fpath)\nautoload -U compinit\ncompinit\n```\nThen run the following commands:\n```highlight notranslate bash\ndeno completions zsh > _deno\nmv _deno ~/.zsh/completion/_deno\nautoload -U compinit && compinit\n```\n\n### Configure fish shell completion\n```highlight notranslate bash\ndeno completions fish > completions.fish\nchmod +x ./completions.fish\n```\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/completions", "title": "deno completions", "description": "Output shell completion script to standard output.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 01:32:25", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "deno completions", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "deno completions", "language": "en", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogTitle": "deno completions", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "deno completions", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "b370dec3-6188-49fa-8e2f-72c477990cb8", "sourceURL": "https://docs.deno.com/runtime/reference/cli/completions", "url": "https://docs.deno.com/runtime/reference/cli/completions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno completions\"?\n\nAssistant: Here are some code examples:\n\n### Command line usage\n```yaml\ndeno completions [OPTIONS] [shell]\n```\n\n### Bash shell completion\n```yaml\ndeno completions bash > /usr/local/etc/bash_completion.d/deno.bash\nsource /usr/local/etc/bash_completion.d/deno.bash\n```\n\n### PowerShell shell completion\n```yaml\ndeno completions powershell | Out-String | Invoke-Expression\n```\n\n### Zsh shell completion setup\n```yaml\nfpath=(~/.zsh/completion $fpath)\nautoload -U compinit\ncompinit\n\ndeno completions zsh > _deno\nmv _deno ~/.zsh/completion/_deno\nautoload -U compinit && compinit\n```\n\n### Fish shell completion\n```yaml\ndeno completions fish > completions.fish\nchmod +x ./completions.fish\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/completions", "title": "deno completions", "description": "Output shell completion script to standard output.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 01:32:25", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "deno completions", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:title": "deno completions", "language": "en", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogTitle": "deno completions", "og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "deno completions", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "b370dec3-6188-49fa-8e2f-72c477990cb8", "sourceURL": "https://docs.deno.com/runtime/reference/cli/completions", "url": "https://docs.deno.com/runtime/reference/cli/completions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno uninstall\"?\n\nAssistant: Uninstalls a dependency or an executable script in the installation root's bin directory.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno uninstall [OPTIONS] [name-or-package] [additional-packages]...\n```\n\nUninstalls a dependency or an executable script in the installation root's bin directory.\n\n```\ndeno uninstall @std/dotenv chalk\n\n```\n\n```\ndeno uninstall --global file_server\n\n```\n\nTo change the installation root, use `--root` flag:\n\n```\ndeno uninstall --global --root /usr/local serve\n\n```\n\nThe installation root is determined, in order of precedence:\n\n- `--root` option\n- `DENO_INSTALL_ROOT` environment variable\n- `$HOME/.deno`\n\n## Options\n### `--global`\n\nShort flag: `-g`\n\nRemove globally installed package or module.\n\n### `--root`\n\nInstallation root.\n\n## `deno uninstall [PACKAGES]`\nRemove dependencies specified in `deno.json` or `package.json`:\n\n```highlight notranslate shell\n$ deno add npm:express\nAdd npm:express@5.0.0\n\n$ cat deno.json\n{\n  \"imports\": {\n    \"express\": \"npm:express@5.0.0\"\n  }\n}\n\n```\n\n```highlight notranslate shell\n$ deno uninstall express\nRemoved express\n\n$ cat deno.json\n{\n  \"imports\": {}\n}\n\n```\n\nTip\n\nYou can also use `deno remove` which is an alias to `deno uninstall [PACKAGES]`\n\nYou can remove multiple dependencies at once:\n\n```highlight notranslate shell\n$ deno add npm:express jsr:@std/http\nAdded npm:express@5.0.0\nAdded jsr:@std/http@1.0.7\n\n$ cat deno.json\n{\n  \"imports\": {\n    \"@std/http\": \"jsr:@std/http@^1.0.7\",\n    \"express\": \"npm:express@^5.0.0\",\n  }\n}\n\n```\n\n```highlight notranslate shell\n$ deno remove express @std/http\nRemoved express\nRemoved @std/http\n\n$ cat deno.json\n{\n  \"imports\": {}\n}\n\n```\n\nInfo\n\nWhile dependencies are removed from the `deno.json` and `package.json` they still persist in the global cache for future use.\n\nIf your project contains `package.json`, `deno uninstall` can work with it too:\n\n```highlight notranslate shell\n$ cat package.json\n{\n  \"dependencies\": {\n    \"express\": \"^5.0.0\"\n  }\n}\n\n$ deno remove express\nRemoved express\n\n$ cat package.json\n{\n  \"dependencies\": {}\n}\n\n```\n\n## `deno uninstall --global [SCRIPT_NAME]`\nUninstall `serve`\n\n```highlight notranslate bash\ndeno uninstall --global serve\n\n```\n\nUninstall `serve` from a specific installation root\n\n```highlight notranslate bash\ndeno uninstall -g --root /usr/local/bin serve\n\n```\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/uninstall", "title": "deno uninstall", "description": "Uninstalls a dependency or an executable script in the installation root's bin directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:33:54", "type": "overview", "page_metadata": {"ogLocale": "en_US", "og:title": "deno uninstall", "ogImage": "/img/og.webp", "og:type": "article", "ogSiteName": "Deno", "og:locale": "en_US", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogTitle": "deno uninstall", "twitter:title": "deno uninstall", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "deno uninstall", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "scrapeId": "76739c4b-e38f-4717-bb16-b8232cb04a17", "sourceURL": "https://docs.deno.com/runtime/reference/cli/uninstall", "url": "https://docs.deno.com/runtime/reference/cli/uninstall/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno uninstall\"?\n\nAssistant: Here are some code examples:\n\n### Command line usage\n```yaml\ndeno uninstall [OPTIONS] [name-or-package] [additional-packages]...\n```\n\n### Uninstalling packages\n```yaml\ndeno uninstall @std/dotenv chalk\n```\n\n### Uninstalling globally\n```yaml\ndeno uninstall --global file_server\n```\n\n### Changing installation root\n```yaml\ndeno uninstall --global --root /usr/local serve\n```\n\n### Removing dependencies from deno.json\n```yaml\n$ deno uninstall express\n```\n\n### Removing multiple dependencies\n```yaml\n$ deno remove express @std/http\n```\n\n### Uninstalling a global script\n```yaml\ndeno uninstall --global serve\n```\n\n### Uninstalling from specific root\n```yaml\ndeno uninstall -g --root /usr/local/bin serve\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/uninstall", "title": "deno uninstall", "description": "Uninstalls a dependency or an executable script in the installation root's bin directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:33:54", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "og:title": "deno uninstall", "ogImage": "/img/og.webp", "og:type": "article", "ogSiteName": "Deno", "og:locale": "en_US", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogTitle": "deno uninstall", "twitter:title": "deno uninstall", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "deno uninstall", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "scrapeId": "76739c4b-e38f-4717-bb16-b8232cb04a17", "sourceURL": "https://docs.deno.com/runtime/reference/cli/uninstall", "url": "https://docs.deno.com/runtime/reference/cli/uninstall/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno uninstall\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can also use `deno remove` which is an alias to `deno uninstall [PACKAGES]`.\n• While dependencies are removed from the `deno.json` and `package.json` they still persist in the global cache for future use.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/uninstall", "title": "deno uninstall", "description": "Uninstalls a dependency or an executable script in the installation root's bin directory.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:33:54", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "og:title": "deno uninstall", "ogImage": "/img/og.webp", "og:type": "article", "ogSiteName": "Deno", "og:locale": "en_US", "og:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogTitle": "deno uninstall", "twitter:title": "deno uninstall", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "deno uninstall", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "scrapeId": "76739c4b-e38f-4717-bb16-b8232cb04a17", "sourceURL": "https://docs.deno.com/runtime/reference/cli/uninstall", "url": "https://docs.deno.com/runtime/reference/cli/uninstall/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"prefer-const\"?\n\nAssistant: This rule recommends declaring variables with const over let to enhance code robustness, maintainability, and readability.\n\nHere's a detailed explanation:\n\n\n## Overview\nRecommends declaring variables with [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) over [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let). Since ES2015, JavaScript supports [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) and [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) for declaring variables. If variables are declared with [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), then they become mutable; we can set other values to them afterwards. Meanwhile, if declared with [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), they are immutable; we cannot perform re-assignment to them.\n\n## Recommendation\nIn general, to make the codebase more robust, maintainable, and readable, it is highly recommended to use [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) instead of [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) wherever possible. The fewer mutable variables are, the easier it should be to keep track of the variable states while reading through the code, and thus it is less likely to write buggy code. So this lint rule checks if there are [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) variables that could potentially be declared with [`const`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const) instead.\n\n## Invalid Examples\n**Invalid:**\n\n```highlight notranslate typescript\nlet a = 0;\n\nlet b = 0;\nsomeOperation(b);\n\n// `const` could be used instead\nfor (let c in someObject) {}\n\n// `const` could be used instead\nfor (let d of someArray) {}\n\n// variable that is uninitialized at first and then assigned in the same scope is NOT allowed\n// because we could simply write it like `const e = 2;` instead\nlet e;\ne = 2;\n```\n\n\n\n## Valid Examples\n**Valid:**\n\n```highlight notranslate typescript\n// uninitialized variable is allowed\nlet a;\n\nlet b = 0;\nb += 1;\n\nlet c = 0;\nc = 1;\n\n// variable that is uninitialized at first and then assigned in the same scope _two or more times_ is allowed\n// because we cannot represent it with `const`\nlet d;\nd = 2;\nd = 3;\n\nconst e = 0;\n\n// `f` is mutated through `f++`\nfor (let f = 0; f < someArray.length; f++) {}\n\n// variable that is initialized (or assigned) in another scope is allowed\nlet g;\nfunction func1() {\n  g = 42;\n}\n\n// conditionally initialized variable is allowed\nlet h;\nif (trueOrFalse) {\n  h = 0;\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/prefer-const", "title": "prefer-const", "description": "This rule recommends declaring variables with const over let to enhance code robustness, maintainability, and readability.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:34:07", "type": "overview", "page_metadata": {"og:locale": "en_US", "title": "prefer-const", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:title": "prefer-const", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "prefer-const", "ogTitle": "prefer-const", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "ogLocale": "en_US", "scrapeId": "9fd12637-449c-4c32-9331-b93c046b91d1", "sourceURL": "https://docs.deno.com/lint/rules/prefer-const", "url": "https://docs.deno.com/lint/rules/prefer-const/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"prefer-const\"?\n\nAssistant: Here are some code examples:\n\n### Enable full set in deno.json\n```yaml\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n### Enable full set using the Deno CLI\n```yaml\ndeno lint --tags=recommended\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/prefer-const", "title": "prefer-const", "description": "This rule recommends declaring variables with const over let to enhance code robustness, maintainability, and readability.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:34:07", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "title": "prefer-const", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:title": "prefer-const", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "prefer-const", "ogTitle": "prefer-const", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "ogLocale": "en_US", "scrapeId": "9fd12637-449c-4c32-9331-b93c046b91d1", "sourceURL": "https://docs.deno.com/lint/rules/prefer-const", "url": "https://docs.deno.com/lint/rules/prefer-const/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"prefer-const\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use const instead of let wherever possible to enhance code robustness and maintainability.\n• Avoid using mutable variables to reduce the likelihood of writing buggy code.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/prefer-const", "title": "prefer-const", "description": "This rule recommends declaring variables with const over let to enhance code robustness, maintainability, and readability.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:34:07", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "title": "prefer-const", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:title": "prefer-const", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "prefer-const", "ogTitle": "prefer-const", "og:image": "/img/og.webp", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:type": "article", "ogLocale": "en_US", "scrapeId": "9fd12637-449c-4c32-9331-b93c046b91d1", "sourceURL": "https://docs.deno.com/lint/rules/prefer-const", "url": "https://docs.deno.com/lint/rules/prefer-const/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Key Space\"?\n\nAssistant: Deno KV is a key value store. The key space is a flat namespace of key+value+versionstamp pairs. Keys are sequences of key parts, which allow modeling of hierarchical data. Values are arbitrary JavaScript objects. Versionstamps represent when a value was inserted / modified.\n\nHere's a detailed explanation:\n\n\n## Keys\nKey parts are ordered lexicographically by their type, and within a given type, they are ordered by their value. The ordering of types is as follows:\n\n1. `Uint8Array`\n2. `string`\n3. `number`\n4. `bigint`\n5. `boolean`\n\nWithin a given type, the ordering is:\n\n- `Uint8Array`: byte ordering of the array\n- `string`: byte ordering of the UTF-8 encoding of the string\n- `number`: -Infinity < -1.0 < -0.5 < -0.0 < 0.0 < 0.5 < 1.0 < Infinity < NaN\n- `bigint`: mathematical ordering, largest negative number first, largest positive number last\n- `boolean`: false < true\n\nThis means that the part `1.0` (a number) is ordered before the part `2.0` (also a number), but is greater than the part `0n` (a bigint), because `1.0` is a number and `0n` is a bigint, and type ordering has precedence over the ordering of values within a type.\n\n## Key Examples\n```highlight notranslate js\n[\"users\", 42, \"profile\"]; // User with ID 42's profile\n[\"posts\", \"2023-04-23\", \"comments\"]; // Comments for all posts on 2023-04-23\n[\"products\", \"electronics\", \"smartphones\", \"apple\"]; // Apple smartphones in the electronics category\n[\"orders\", 1001, \"shipping\", \"tracking\"]; // Tracking information for order ID 1001\n[\"files\", new Uint8Array([1, 2, 3]), \"metadata\"]; // Metadata for a file with Uint8Array identifier\n[\"projects\", \"openai\", \"tasks\", 5]; // Task with ID 5 in the OpenAI project\n[\"events\", \"2023-03-31\", \"location\", \"san_francisco\"]; // Events in San Francisco on 2023-03-31\n[\"invoices\", 2023, \"Q1\", \"summary\"]; // Summary of Q1 invoices for 2023\n[\"teams\", \"engineering\", \"members\", 1n]; // Member with ID 1n in the engineering team\n```\n\n## Universally Unique Lexicographically Sortable Identifiers (ULIDs)\nKey part ordering allows keys consisting of timestamps and ID parts to be listed chronologically. Typically, you can generate a key using the following:\n[`Date.now()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now) and\n[`crypto.randomUUID()`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID):\n\n```highlight notranslate js\nasync function setUser(user) {\n  await kv.set([\"users\", Date.now(), crypto.randomUUID()], user);\n}\n```\n\nRun multiple times sequentially, this produces the following keys:\n\n```highlight notranslate js\n[\"users\", 1691377037923, \"8c72fa25-40ad-42ce-80b0-44f79bc7a09e\"]; // First user\n[\"users\", 1691377037924, \"8063f20c-8c2e-425e-a5ab-d61e7a717765\"]; // Second user\n[\"users\", 1691377037925, \"35310cea-58ba-4101-b09a-86232bf230b2\"]; // Third user\n```\n\nHowever, having the timestamp and ID represented within a single key part may be more straightforward in some cases. You can use a\n[Universally Unique Lexicographically Sortable Identifier (ULID)](https://github.com/ulid/spec)\nto do this. This type of identifier encodes a UTC timestamp, is lexicographically sortable and is cryptographically random by default:\n\n```highlight notranslate js\nimport { ulid } from \"jsr:@std/ulid\";\n\nconst kv = await Deno.openKv();\n\nasync function setUser(user) {\n  await kv.set([\"users\", ulid()], user);\n}\n}\n```\n\n```highlight notranslate js\n[\"users\", \"01H76YTWK3YBV020S6MP69TBEQ\"]; // First user\n[\"users\", \"01H76YTWK4V82VFET9YTYDQ0NY\"]; // Second user\n[\"users\", \"01H76YTWK5DM1G9TFR0Y5SCZQV\"]; // Third user\n```\n\nFurthermore, you can generate ULIDs monotonically increasingly using\n`monotonicUlid` function:\n\n```highlight notranslate js\nimport { monotonicUlid } from \"jsr:@std/ulid\";\n\nasync function setUser(user) {\n  await kv.set([\"users\", monotonicUlid()], user);\n}\n}\n```\n\n```highlight notranslate js\n// Strict ordering for the same timestamp by incrementing the least-significant random bit by 1\n[\"users\", \"01H76YTWK3YBV020S6MP69TBEQ\"]; // First user\n[\"users\", \"01H76YTWK3YBV020S6MP69TBER\"]; // Second user\n[\"users\", \"01H76YTWK3YBV020S6MP69TBES\"]; // Third user\n```\n\n## Values\nValues in Deno KV can be arbitrary JavaScript values that are compatible with\nthe [structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm). This includes:\n\n- `undefined`\n- `null`\n- `boolean`\n- `number`\n- `string`\n- `bigint`\n- `Uint8Array`\n- `Array`\n- `Object`\n- `Map`\n- `Set`\n- `Date`\n- `RegExp`\n\nObjects and arrays can contain any of the above types, including other objects\nand arrays. `Map` s and `Set` s can contain any of the above types, including\nother `Map` s and `Set` s.\n\nCircular references within values are supported.\n\nObjects with a non-primitive prototype are not supported (such as class\ninstances or Web API objects). Functions and symbols can also not be serialized.\n\n## Deno.KvU64 type\nIn addition to structured serializable values, the special value `Deno.KvU64` is\nalso supported as a value. This object represents a 64-bit unsigned integer,\nrepresented as a bigint. It can be used with the `sum`, `min`, and `max` KV\noperations. It can not be stored within an object or array. It must be stored as\na top-level value.\n\nIt can be created with the `Deno.KvU64` constructor:\n\n```highlight notranslate js\nconst u64 = new Deno.KvU64(42n);\n```\n\n## Value Examples\n```highlight notranslate js,ignore\nundefined;\nnull;\ntrue;\nfalse;\n42;\n-42.5;\n42n;\n\"hello\";\nnew Uint8Array([1, 2, 3]);\n[1, 2, 3];\n{ a: 1, b: 2, c: 3 };\nnew Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\nnew Set([1, 2, 3]);\nnew Date(\"2023-04-23\");\n/abc/;\n\n// Circular references are supported\nconst a = {};\nconst b = { a };\na.b = b;\n\n// Deno.KvU64 is supported\nnew Deno.KvU64(42n);\n```\n\n## Versionstamp\nAll data in the Deno KV key-space is versioned. Every time a value is inserted\nor modified, a versionstamp is assigned to it. Versionstamps are monotonically\nincreasing, non-sequential, 12 byte values that represent the time that the\nvalue was modified. Versionstamps do not represent real time, but rather the\norder in which the values were modified.\n\nBecause versionstamps are monotonically increasing, they can be used to\ndetermine whether a given value is newer or older than another value. This can\nbe done by comparing the versionstamps of the two values. If versionstamp A is\ngreater than versionstamp B, then value A was modified more recently than value\nB.\n\n```highlight notranslate js\nversionstampA > versionstampB;\n\"000002fa526aaccb0000\" > \"000002fa526aacc90000\"; // true\n```\n\nAll data modified by a single transaction are assigned the same versionstamp.\nThis means that if two `set` operations are performed in the same atomic\noperation, then the versionstamp of the new values will be the same.\n\nVersionstamps are used to implement optimistic concurrency control. Atomic\noperations can contain checks that ensure that the versionstamp of the data they\nare operating on matches a versionstamp passed to the operation. If the\nversionstamp of the data is not the same as the versionstamp passed to the\noperation, then the transaction will fail and the operation will not be applied.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/key_space", "title": "Key Space", "description": "Deno KV is a key value store. The key space is a flat namespace of key+value+versionstamp pairs. Keys are sequences of key parts, which allow modeling of hierarchical data. Values are arbitrary JavaScript objects. Versionstamps represent when a value was inserted / modified.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 01:36:03", "type": "overview", "page_metadata": {"ogTitle": "Key Space", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Key Space", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Key Space", "ogImage": "/img/og.webp", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "title": "Key Space", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "language": "en", "scrapeId": "a77897ef-b8fb-447b-ae85-a919c44071fa", "sourceURL": "https://docs.deno.com/deploy/kv/manual/key_space", "url": "https://docs.deno.com/deploy/kv/manual/key_space/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Key Space\"?\n\nAssistant: Here are some code examples:\n\n### Key Examples\n```yaml\n[\"users\", 42, \"profile\"]; // User with ID 42's profile\n[\"posts\", \"2023-04-23\", \"comments\"]; // Comments for all posts on 2023-04-23\n[\"products\", \"electronics\", \"smartphones\", \"apple\"]; // Apple smartphones in the electronics category\n[\"orders\", 1001, \"shipping\", \"tracking\"]; // Tracking information for order ID 1001\n[\"files\", new Uint8Array([1, 2, 3]), \"metadata\"]; // Metadata for a file with Uint8Array identifier\n[\"projects\", \"openai\", \"tasks\", 5]; // Task with ID 5 in the OpenAI project\n[\"events\", \"2023-03-31\", \"location\", \"san_francisco\"]; // Events in San Francisco on 2023-03-31\n[\"invoices\", 2023, \"Q1\", \"summary\"]; // Summary of Q1 invoices for 2023\n[\"teams\", \"engineering\", \"members\", 1n]; // Member with ID 1n in the engineering team\n\n```\n\n### ULID Example\n```yaml\nasync function setUser(user) {\n  await kv.set([\"users\", Date.now(), crypto.randomUUID()], user);\n}\n\n```\n\n### Deno.KvU64 Example\n```yaml\nconst u64 = new Deno.KvU64(42n);\n```\n\n### Value Examples\n```yaml\nundefined;\nnull;\ntrue;\nfalse;\n42;\n-42.5;\n42n;\n\"hello\";\nnew Uint8Array([1, 2, 3]);\n[1, 2, 3];\n{ a: 1, b: 2, c: 3 };\nnew Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]);\nnew Set([1, 2, 3]);\nnew Date(\"2023-04-23\");\n/abc/;\n\n// Circular references are supported\nconst a = {};\nconst b = { a };\na.b = b;\n\n// Deno.KvU64 is supported\nnew Deno.KvU64(42n);\n```\n\n### Versionstamp Comparison\n```yaml\nversionstampA > versionstampB;\n\"000002fa526aaccb0000\" > \"000002fa526aacc90000\"; // true\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/key_space", "title": "Key Space", "description": "Deno KV is a key value store. The key space is a flat namespace of key+value+versionstamp pairs. Keys are sequences of key parts, which allow modeling of hierarchical data. Values are arbitrary JavaScript objects. Versionstamps represent when a value was inserted / modified.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 01:36:03", "type": "code_examples", "page_metadata": {"ogTitle": "Key Space", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Key Space", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Key Space", "ogImage": "/img/og.webp", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "title": "Key Space", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "language": "en", "scrapeId": "a77897ef-b8fb-447b-ae85-a919c44071fa", "sourceURL": "https://docs.deno.com/deploy/kv/manual/key_space", "url": "https://docs.deno.com/deploy/kv/manual/key_space/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Key Space\"?\n\nAssistant: Here are the recommended best practices:\n\n• Using a sequence of key parts eliminates the possibility of delimiter injection attacks.\n• Keys are case sensitive and ordered lexicographically by their parts.\n• Use `Deno.KvU64` for 64-bit unsigned integers in KV operations.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/key_space", "title": "Key Space", "description": "Deno KV is a key value store. The key space is a flat namespace of key+value+versionstamp pairs. Keys are sequences of key parts, which allow modeling of hierarchical data. Values are arbitrary JavaScript objects. Versionstamps represent when a value was inserted / modified.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 01:36:03", "type": "best_practices", "page_metadata": {"ogTitle": "Key Space", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Key Space", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "Key Space", "ogImage": "/img/og.webp", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "title": "Key Space", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "language": "en", "scrapeId": "a77897ef-b8fb-447b-ae85-a919c44071fa", "sourceURL": "https://docs.deno.com/deploy/kv/manual/key_space", "url": "https://docs.deno.com/deploy/kv/manual/key_space/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"no-window\"?\n\nAssistant: Disallows the use of the `window` object in Deno.\n\nHere's a detailed explanation:\n\n\n## Overview\nThis rule is part of the `recommended` rule set. The `window` global is no longer available in Deno. Deno does not have a window and `typeof window === \"undefined\"` is often used to tell if the code is running in the browser.\n\n## Enabling the Rule\nEnable full set in `deno.json`:\n\n```json\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\nEnable full set using the Deno CLI:\n\n```bash\ndeno lint --tags=recommended\n```\n\n## Examples\n**Invalid:**\n\n```typescript\nconst a = await window.fetch(\"https://deno.land\");\n\nconst b = window.Deno.metrics();\nconsole.log(window);\n\nwindow.addEventListener(\"load\", () => {\n  console.log(\"Loaded.\");\n});\n```\n\n**Valid:**\n\n```typescript\nconst a1 = await fetch(\"https://deno.land\");\nconst a2 = await globalThis.fetch(\"https://deno.land\");\nconst a3 = await self.fetch(\"https://deno.land\");\n\nconst b1 = Deno.metrics();\nconst b2 = globalThis.Deno.metrics();\nconst b3 = self.Deno.metrics();\nconsole.log(globalThis);\n\naddEventListener(\"load\", () => {\n  console.log(\"Loaded.\");\n});\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-window", "title": "no-window", "description": "Disallows the use of the `window` object in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:36:25", "type": "overview", "page_metadata": {"language": "en", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "ogTitle": "no-window", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "og:title": "no-window", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "no-window", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:title": "no-window", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "0f03922b-4f1d-4de1-bb27-9fc1ba4cdd91", "sourceURL": "https://docs.deno.com/lint/rules/no-window", "url": "https://docs.deno.com/lint/rules/no-window/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"no-window\"?\n\nAssistant: Here are some code examples:\n\n### Enabling in deno.json\n```yaml\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n### Enabling via Deno CLI\n```yaml\ndeno lint --tags=recommended\n```\n\n### Invalid Example\n```yaml\nconst a = await window.fetch(\"https://deno.land\");\n\nconst b = window.Deno.metrics();\nconsole.log(window);\n\nwindow.addEventListener(\"load\", () => {\n  console.log(\"Loaded.\");\n});\n```\n\n### Valid Example\n```yaml\nconst a1 = await fetch(\"https://deno.land\");\nconst a2 = await globalThis.fetch(\"https://deno.land\");\nconst a3 = await self.fetch(\"https://deno.land\");\n\nconst b1 = Deno.metrics();\nconst b2 = globalThis.Deno.metrics();\nconst b3 = self.Deno.metrics();\nconsole.log(globalThis);\n\naddEventListener(\"load\", () => {\n  console.log(\"Loaded.\");\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-window", "title": "no-window", "description": "Disallows the use of the `window` object in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:36:25", "type": "code_examples", "page_metadata": {"language": "en", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "ogTitle": "no-window", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "og:title": "no-window", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "no-window", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:title": "no-window", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "0f03922b-4f1d-4de1-bb27-9fc1ba4cdd91", "sourceURL": "https://docs.deno.com/lint/rules/no-window", "url": "https://docs.deno.com/lint/rules/no-window/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"no-window\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `globalThis` or `self` instead of `window` when accessing global objects in Deno.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-window", "title": "no-window", "description": "Disallows the use of the `window` object in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:36:25", "type": "best_practices", "page_metadata": {"language": "en", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "ogTitle": "no-window", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "og:title": "no-window", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "title": "no-window", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:title": "no-window", "twitter:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "scrapeId": "0f03922b-4f1d-4de1-bb27-9fc1ba4cdd91", "sourceURL": "https://docs.deno.com/lint/rules/no-window", "url": "https://docs.deno.com/lint/rules/no-window/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"WebAssembly\"?\n\nAssistant: This documentation covers the WebAssembly API, including classes, functions, interfaces, and type aliases.\n\nHere's a detailed explanation:\n\n\n## Classes\n- [WebAssembly.CompileError](https://docs.deno.com/api/web/~/WebAssembly.CompileError \"WebAssembly.CompileError\")\n\nThe `WebAssembly.CompileError` object indicates an error during WebAssembly decoding or validation.\n\n- [WebAssembly.Global](https://docs.deno.com/api/web/~/WebAssembly.Global \"WebAssembly.Global\")\n\nA `WebAssembly.Global` object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more `WebAssembly.Module` instances. This allows dynamic linking of multiple modules.\n\n  - [value](https://docs.deno.com/api/web/~/WebAssembly.Global#property_value)\n  - [valueOf](https://docs.deno.com/api/web/~/WebAssembly.Global#method_valueof_0)\n\n- [WebAssembly.Instance](https://docs.deno.com/api/web/~/WebAssembly.Instance \"WebAssembly.Instance\")\n\nA `WebAssembly.Instance` object is a stateful, executable instance of a `WebAssembly.Module`. Instance objects contain all the Exported WebAssembly functions that allow calling into WebAssembly code from JavaScript.\n\n  - [exports](https://docs.deno.com/api/web/~/WebAssembly.Instance#property_exports)\n\n- [WebAssembly.LinkError](https://docs.deno.com/api/web/~/WebAssembly.LinkError \"WebAssembly.LinkError\")\n\nThe `WebAssembly.LinkError` object indicates an error during module instantiation (besides traps from the start function).\n\n- [WebAssembly.Memory](https://docs.deno.com/api/web/~/WebAssembly.Memory \"WebAssembly.Memory\")\n\nThe `WebAssembly.Memory` object is a resizable `ArrayBuffer` or `SharedArrayBuffer` that holds the raw bytes of memory accessed by a WebAssembly Instance.\n\n  - [buffer](https://docs.deno.com/api/web/~/WebAssembly.Memory#property_buffer)\n  - [grow](https://docs.deno.com/api/web/~/WebAssembly.Memory#method_grow_0)\n\n- [WebAssembly.Module](https://docs.deno.com/api/web/~/WebAssembly.Module \"WebAssembly.Module\")\n\nA `WebAssembly.Module` object contains stateless WebAssembly code that has already been compiled by the browser — this can be efficiently shared with Workers, and instantiated multiple times.\n\n  - [customSections](https://docs.deno.com/api/web/~/WebAssembly.Module#method_customsections_0)\n  - [exports](https://docs.deno.com/api/web/~/WebAssembly.Module#method_exports_0)\n  - [imports](https://docs.deno.com/api/web/~/WebAssembly.Module#method_imports_0)\n\n- [WebAssembly.RuntimeError](https://docs.deno.com/api/web/~/WebAssembly.RuntimeError \"WebAssembly.RuntimeError\")\n\nThe `WebAssembly.RuntimeError` object is the error type that is thrown whenever WebAssembly specifies a trap.\n\n- [WebAssembly.Table](https://docs.deno.com/api/web/~/WebAssembly.Table \"WebAssembly.Table\")\n\nThe `WebAssembly.Table()` object is a JavaScript wrapper object — an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.\n\n  - [get](https://docs.deno.com/api/web/~/WebAssembly.Table#method_get_0)\n  - [grow](https://docs.deno.com/api/web/~/WebAssembly.Table#method_grow_0)\n  - [length](https://docs.deno.com/api/web/~/WebAssembly.Table#property_length)\n  - [set](https://docs.deno.com/api/web/~/WebAssembly.Table#method_set_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/WebAssembly", "title": "WebAssembly", "description": "This documentation covers the WebAssembly API, including classes, functions, interfaces, and type aliases.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:36:53", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "WebAssembly - Wasm - Web documentation", "twitter:title": "WebAssembly - Wasm - Web documentation", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "viewport": "width=device-width, initial-scale=1", "ogTitle": "WebAssembly - Wasm - Web documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "title": "WebAssembly - Wasm - Web documentation", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "ogSiteName": "Deno", "scrapeId": "b91d1b91-6101-475d-b1a3-0af17ffe73a4", "sourceURL": "https://docs.deno.com/api/web/~/WebAssembly", "url": "https://docs.deno.com/api/web/~/WebAssembly", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno doc, documentation generator\"?\n\nAssistant: Show documentation for a module.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno doc [OPTIONS] [source_file]...\n``` \nShow documentation for a module.\n\nOutput documentation to standard output:\n\n```\ndeno doc ./path/to/module.ts\n\n```\n\nOutput documentation in HTML format:\n\n```\ndeno doc --html --name=\"My library\" ./path/to/module.ts\n\n```\n\nLint a module for documentation diagnostics:\n\n```\ndeno doc --lint ./path/to/module.ts\n\n```\n\nTarget a specific symbol:\n\n```\ndeno doc ./path/to/module.ts MyClass.someField\n\n```\n\nShow documentation for runtime built-ins:\n\n```\ndeno doc\n\n```\n\n```\ndeno doc --filter Deno.Listener\n\n```\n\n## Dependency management options\n### `--import-map`\nLoad import map file from local file or remote URL.\n\n### `--lock`\nCheck the specified lock file. (If value is not provided, defaults to \"./deno.lock\").\n\n### `--no-lock`\nDisable auto discovery of the lock file.\n\n### `--no-npm`\nDo not resolve npm modules.\n\n### `--no-remote`\nDo not resolve remote modules.\n\n### `--reload`\nShort flag: `-r`\n\nReload source code cache (recompile TypeScript)\nno value Reload everything\njsr:@std/http/file-server,jsr:@std/assert/assert-equals Reloads specific modules\nnpm: Reload all npm modules\nnpm:chalk Reload specific npm module.\n\n## Options\n### `--allow-import`\nShort flag: `-I`\n\nAllow importing from remote hosts. Optionally specify allowed IP addresses and host names, with ports as necessary. Default value: deno.land:443, [jsr.io:443](http://jsr.io:443/), [esm.sh:443](http://esm.sh:443/), [cdn.jsdelivr.net:443](http://cdn.jsdelivr.net:443/), [raw.githubusercontent.com:443](http://raw.githubusercontent.com:443/), [user.githubusercontent.com:443](http://user.githubusercontent.com:443/).\n\n## Documentation options\n### `--category-docs`\nPath to a JSON file keyed by category and an optional value of a markdown doc.\n\n### `--default-symbol-map`\nUses the provided mapping of default name to wanted name for usage blocks.\n\n### `--filter`\nDot separated path to symbol.\n\n### `--html`\nOutput documentation in HTML format.\n\n### `--json`\nOutput documentation in JSON format.\n\n### `--lint`\nOutput documentation diagnostics.\n\n### `--name`\nThe name that will be used in the docs (ie for breadcrumbs).\n\n### `--output`\nDirectory for HTML documentation output.\n\n### `--private`\nOutput private documentation.\n\n### `--strip-trailing-html`\nRemove trailing .html from various links. Will still generate files with a .html extension.\n\n### `--symbol-redirect-map`\nPath to a JSON file keyed by file, with an inner map of symbol to an external link.\n\n## Examples\n`deno doc` followed by a list of one or more source files will print the JSDoc documentation for each of the module's **exported** members.\n\nFor example, given a file `add.ts` with the contents:\n\n```highlight notranslate ts\n/**\n * Adds x and y.\n * @param {number} x\n * @param {number} y\n * @returns {number} Sum of x and y\n */\nexport function add(x: number, y: number): number {\n  return x + y;\n}\n\n```\n\nRunning the Deno `doc` command, prints the function's JSDoc comment to `stdout`:\n\n```highlight notranslate shell\ndeno doc add.ts\nfunction add(x: number, y: number): number\n  Adds x and y. @param {number} x @param {number} y @returns {number} Sum of x and y\n\n```\n\n## Linting\nYou can use `--lint` flag to check for problems in your documentation while it's being generated. `deno doc` will point out three kinds of problems:\n\n1. Error for an exported type from the root module referencing a non-exported type.\n   - Ensures API consumers have access to all the types the API uses. This can be suppressed by exporting the type from a root module (one of the files specified to `deno doc` on the command line) or by marking the type with an `@internal` jsdoc tag.\n2. Error for missing return type or property type on a **public** type.\n   - Ensures `deno doc` displays the return/property type and helps improve type checking performance.\n3. Error for missing JS doc comment on a **public** type.\n   - Ensures the code is documented. Can be suppressed by adding a jsdoc comment, or via an `@ignore` jsdoc tag to exclude it from the documentation. Alternatively, add an `@internal` tag to keep it in the docs, but signify it's internal.\n\nFor example:\n/mod.ts\n\n```highlight notranslate ts\ninterface Person {\n  name: string;\n  // ...\n}\n\nexport function getName(person: Person) {\n  return person.name;\n}\n\n```\n\n```highlight notranslate shell\n$ deno doc --lint mod.ts\nType 'getName' references type 'Person' which is not exported from a root module.\nMissing JS documentation comment.\nMissing return type.\n    at file:///mod.ts:6:1\n\n```\n\nThese lints are meant to help you write better documentation and speed up type-checking in your projects. If any problems are found, the program exits with non-zero exit code and the output is reported to standard error.\n\n## Supported JSDoc features and tags\nDeno implements a large set of JSDoc tags, but does not strictly adhere to the JSDoc standard, but rather align with sensible standards and features provided by widely used tools and ecosystems in the same feature-space, like [TSDoc](https://tsdoc.org/) and [TypeDoc](https://typedoc.org/).\n\nFor any free-form text places, ie the main description of a JSDoc comment, the description of a parameter, etc. accept markdown.\n\n## Supported Tags\nThe following tags are supported, being a selection of tags used and specified by JSDoc, TSDoc and TypeDoc:\n\n- [`constructor`/ `class`](https://jsdoc.app/tags-class): mark a function to be a constructor.\n- [`ignore`](https://jsdoc.app/tags-ignore): ignore a symbol to be included in the output.\n- internal: mark a symbol to be used only for internal. In the HTML generator, the symbol will not get a listed entry, however it will still be generated and can be reached if a non-internal symbol links to it.\n- [`public`](https://jsdoc.app/tags-public): treat a symbol as public API. Equivalent of TypeScript `public` keyword.\n- [`private`](https://jsdoc.app/tags-private): treat a symbol as private API. Equivalent of TypeScript `private` keyword.\n- [`protected`](https://jsdoc.app/tags-protected): treat a property or method as protected API. Equivalent of TypeScript `protected` keyword.\n- [`readonly`](https://jsdoc.app/tags-readonly): mark a symbol to be readonly, meaning that it cannot be overwritten.\n- [`experimental`](https://tsdoc.org/pages/tags/experimental): mark a symbol as experimental, meaning that the API might change or be removed, or behaviour is not well-defined.\n- [`deprecated`](https://jsdoc.app/tags-deprecated): mark a symbol as deprecated, meaning that it is not supported anymore and might be removed in a future version.\n- [`module`](https://jsdoc.app/tags-module): this tag can be defined on a top-level JSDoc comment, which will treat that comment to be for the file instead of the subsequent symbol. A value can be specified, which will use the value as an identifier for the module (ie for default exports).\n- `category`/ `group`: mark a symbol to be of a specific category/group. This is useful for grouping together various symbols together.\n- [`see`](https://jsdoc.app/tags-see): define an external reference related to the symbol.\n- [`example`](https://jsdoc.app/tags-example): define an example for the symbol. Unlike JSDoc, code examples need to be wrapped in triple backtick (markdown-style codeblocks), which aligns more with TSDoc than JSDoc.\n- `tags`: define additional custom labels for a symbol, via a comma separated list.\n- [`since`](https://jsdoc.app/tags-since): define since when the symbol has been available.\n- [`callback`](https://jsdoc.app/tags-callback): define a callback.\n- [`template`/ `typeparam`/ `typeParam`](https://tsdoc.org/pages/tags/typeparam): define a callback.\n- [`prop`/ `property`](https://jsdoc.app/tags-property): define a property on a symbol.\n- [`typedef`](https://jsdoc.app/tags-typedef): define a type.\n- [`param`/ `arg`/ `argument`](https://jsdoc.app/tags-param): define a parameter on a function.\n- [`return`/ `returns`](https://jsdoc.app/tags-returns): define the return type and/or comment of a function.\n- [`throws`/ `exception`](https://jsdoc.app/tags-throws): define what a function throws when called.\n- [`enum`](https://jsdoc.app/tags-enum): define an object to be an enum.\n- [`extends`/ `augments`](https://jsdoc.app/tags-augments): define a type that a function extends on.\n- [`this`](https://jsdoc.app/tags-this): define what the `this` keyword refers to in a function.\n- [`type`](https://jsdoc.app/tags-type): define the type of a symbol.\n- [`default`](https://jsdoc.app/tags-default): define the default value for a variable, property or field.\n\n## Inline Linking\nInline links let you specify links to other parts of the page, other symbols, or modules. Besides just supporting markdown-style links,\n[JSDoc style inline-links](https://jsdoc.app/tags-inline-link) are also supported.\n\nFor example, you can do `{@link https://docs.deno.com}`, which will be rendered as the following ' [https://docs.deno.com](https://docs.deno.com/)'. `{@linkcode https://docs.deno.com}` can also be used, to make it in a monospace font, and will be rendered roughly like this: ' `https://docs.deno.com`'.\n\nYou can also specify a replacement label, via `{@link https://docs.deno.com | Deno Docs}`, which will use the text after `|` as the text to display instead of the link. The previous example would render as ' [Deno Docs](https://docs.deno.com/)'.\n\nYou can add inline links in your descriptions to other symbols via `{@link MySymbol}`.\n\nFor module linking, the same applies, but you use the `{@link [myModule]}` syntax. You can also link to symbols in a different module via `{@link [myModule].mysymbol}`.\n\n## HTML output\nUse the `--html` flag to generate a static site with documentation.\n\n```highlight notranslate console\n$ deno doc --html --name=\"My library\" ./mod.ts\n\n$ deno doc --html --name=\"My library\" --output=./documentation/ ./mod.ts\n\n$ deno doc --html --name=\"My library\" ./sub1/mod.ts ./sub2/mod.ts\n\n```\n\nThe generated documentation is a static site with multiple pages that can be deployed to any static site hosting service.\n\nA client-side search is included in the generated site, but is not available if user's browser has JavaScript disabled.\n\n## JSON output\nUse the `--json` flag to output the documentation in JSON format. This JSON format is consumed by the\n[deno doc website](https://github.com/denoland/docland) and is used to generate module documentation.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/doc", "title": "deno doc, documentation generator", "description": "Show documentation for a module.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 01:39:34", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:title": "`deno doc`, documentation generator", "language": "en", "title": "`deno doc`, documentation generator", "twitter:card": "summary_large_image", "og:type": "article", "ogLocale": "en_US", "og:title": "`deno doc`, documentation generator", "viewport": "width=device-width, initial-scale=1", "ogTitle": "`deno doc`, documentation generator", "ogImage": "/img/og.webp", "scrapeId": "28d4a6a2-ffdf-4ed9-9a4e-f0cfaaeaca66", "sourceURL": "https://docs.deno.com/runtime/reference/cli/doc", "url": "https://docs.deno.com/runtime/reference/cli/doc/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno doc, documentation generator\"?\n\nAssistant: Here are some code examples:\n\n### Basic command usage\n```yaml\ndeno doc [OPTIONS] [source_file]...\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/doc", "title": "deno doc, documentation generator", "description": "Show documentation for a module.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 01:39:34", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:title": "`deno doc`, documentation generator", "language": "en", "title": "`deno doc`, documentation generator", "twitter:card": "summary_large_image", "og:type": "article", "ogLocale": "en_US", "og:title": "`deno doc`, documentation generator", "viewport": "width=device-width, initial-scale=1", "ogTitle": "`deno doc`, documentation generator", "ogImage": "/img/og.webp", "scrapeId": "28d4a6a2-ffdf-4ed9-9a4e-f0cfaaeaca66", "sourceURL": "https://docs.deno.com/runtime/reference/cli/doc", "url": "https://docs.deno.com/runtime/reference/cli/doc/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno doc, documentation generator\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--lint` flag to check for problems in your documentation while it's being generated.\n• Ensure API consumers have access to all the types the API uses by exporting types from a root module or marking them with an `@internal` jsdoc tag.\n• Add return types and property types on public types to improve type checking performance.\n• Document public types with JS doc comments to ensure the code is documented.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/doc", "title": "deno doc, documentation generator", "description": "Show documentation for a module.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-28 01:39:34", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:title": "`deno doc`, documentation generator", "language": "en", "title": "`deno doc`, documentation generator", "twitter:card": "summary_large_image", "og:type": "article", "ogLocale": "en_US", "og:title": "`deno doc`, documentation generator", "viewport": "width=device-width, initial-scale=1", "ogTitle": "`deno doc`, documentation generator", "ogImage": "/img/og.webp", "scrapeId": "28d4a6a2-ffdf-4ed9-9a4e-f0cfaaeaca66", "sourceURL": "https://docs.deno.com/runtime/reference/cli/doc", "url": "https://docs.deno.com/runtime/reference/cli/doc/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"no-unreachable\"?\n\nAssistant: This rule disallows unreachable code after control flow statements such as return, throw, break, and continue.\n\nHere's a detailed explanation:\n\n\n## Enable full set in deno.json\n```json\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n## Enable full set using the Deno CLI\n```bash\ndeno lint --tags=recommended\n```\n\n## Invalid Examples\n**Invalid:**\n\n```typescript\nfunction foo() {\n  return true;\n  console.log(\"done\");\n}\n```\n\n```typescript\nfunction bar() {\n  throw new Error(\"Oops!\");\n  console.log(\"done\");\n}\n```\n\n```typescript\nwhile (value) {\n  break;\n  console.log(\"done\");\n}\n```\n\n```typescript\nthrow new Error(\"Oops!\");\nconsole.log(\"done\");\n```\n\n```typescript\nfunction baz() {\n  if (Math.random() < 0.5) {\n    return;\n  } else {\n    throw new Error();\n  }\n  console.log(\"done\");\n}\n```\n\n```typescript\nfor (;;) {}\nconsole.log(\"done\");\n```\n\n## Valid Example\n**Valid:**\n\n```typescript\nfunction foo() {\n  return bar();\n  function bar() {\n    return 1;\n  }\n}\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-unreachable", "title": "no-unreachable", "description": "This rule disallows unreachable code after control flow statements such as return, throw, break, and continue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:39:57", "type": "overview", "page_metadata": {"og:title": "no-unreachable", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "no-unreachable", "ogTitle": "no-unreachable", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "no-unreachable", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogImage": "/img/og.webp", "og:locale": "en_US", "scrapeId": "70697b0d-f4f5-42dc-8f6c-dbfb9e2adebd", "sourceURL": "https://docs.deno.com/lint/rules/no-unreachable", "url": "https://docs.deno.com/lint/rules/no-unreachable/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"no-unreachable\"?\n\nAssistant: Here are some code examples:\n\n### Enable full set in deno.json\n```yaml\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n### Enable full set using the Deno CLI\n```yaml\ndeno lint --tags=recommended\n```\n\n### Invalid Example 1\n```yaml\nfunction foo() {\n  return true;\n  console.log(\"done\");\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-unreachable", "title": "no-unreachable", "description": "This rule disallows unreachable code after control flow statements such as return, throw, break, and continue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:39:57", "type": "code_examples", "page_metadata": {"og:title": "no-unreachable", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "no-unreachable", "ogTitle": "no-unreachable", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "no-unreachable", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogImage": "/img/og.webp", "og:locale": "en_US", "scrapeId": "70697b0d-f4f5-42dc-8f6c-dbfb9e2adebd", "sourceURL": "https://docs.deno.com/lint/rules/no-unreachable", "url": "https://docs.deno.com/lint/rules/no-unreachable/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"no-unreachable\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that there are no statements after control flow statements like return, throw, break, and continue to avoid unreachable code.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-unreachable", "title": "no-unreachable", "description": "This rule disallows unreachable code after control flow statements such as return, throw, break, and continue.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:39:57", "type": "best_practices", "page_metadata": {"og:title": "no-unreachable", "og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "no-unreachable", "ogTitle": "no-unreachable", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "no-unreachable", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogImage": "/img/og.webp", "og:locale": "en_US", "scrapeId": "70697b0d-f4f5-42dc-8f6c-dbfb9e2adebd", "sourceURL": "https://docs.deno.com/lint/rules/no-unreachable", "url": "https://docs.deno.com/lint/rules/no-unreachable/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Key Expiration (TTL for keys)\"?\n\nAssistant: Since version 1.36.2, Deno KV supports key expiration, allowing developers to control time to live (TTL) for keys in a KV database. This allows an expiration timestamp to be associated with a key, after which the key will be automatically deleted from the database.\n\nHere's a detailed explanation:\n\n\n## Atomic expiration of multiple keys\nIf multiple keys are set in the same atomic operation and have the same `expireIn` value, the expiration of those keys will be atomic.\n\n## Caveats\nThe expire timestamp specifies the _earliest_ time after which the key can be deleted from the database. An implementation is allowed to expire a key at any time after the specified timestamp, but not before. If you need to strictly enforce an expiration time (e.g. for security purposes), please also add it as a field of your value and do a check after retrieving the value from the database.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/key_expiration", "title": "Key Expiration (TTL for keys)", "description": "Since version 1.36.2, Deno KV supports key expiration, allowing developers to control time to live (TTL) for keys in a KV database. This allows an expiration timestamp to be associated with a key, after which the key will be automatically deleted from the database.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:40:09", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "title": "Key Expiration (TTL for keys)", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Key Expiration (TTL for keys)", "twitter:site": "@deno_land", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Key Expiration (TTL for keys)", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:type": "article", "language": "en", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogTitle": "Key Expiration (TTL for keys)", "scrapeId": "47cf6c69-6689-4ad4-a711-e87fde5b6f45", "sourceURL": "https://docs.deno.com/deploy/kv/manual/key_expiration", "url": "https://docs.deno.com/deploy/kv/manual/key_expiration/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Key Expiration (TTL for keys)\"?\n\nAssistant: Here are some code examples:\n\n### Add Session Example\n```yaml\nconst kv = await Deno.openKv();\n\n// `expireIn` is the number of milliseconds after which the key will expire.\nfunction addSession(session: Session, expireIn: number) {\n  await kv.set([\"sessions\", session.id], session, { expireIn });\n}\n```\n\n### Add Unverified User Example\n```yaml\nconst kv = await Deno.openKv();\n\nfunction addUnverifiedUser(\n  user: User,\n  verificationToken: string,\n  expireIn: number,\n) {\n  await kv.atomic()\n    .set([\"users\", user.id], user, { expireIn })\n    .set([\"verificationTokens\", verificationToken], user.id, { expireIn })\n    .commit();\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/key_expiration", "title": "Key Expiration (TTL for keys)", "description": "Since version 1.36.2, Deno KV supports key expiration, allowing developers to control time to live (TTL) for keys in a KV database. This allows an expiration timestamp to be associated with a key, after which the key will be automatically deleted from the database.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:40:09", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "title": "Key Expiration (TTL for keys)", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Key Expiration (TTL for keys)", "twitter:site": "@deno_land", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Key Expiration (TTL for keys)", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:type": "article", "language": "en", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogTitle": "Key Expiration (TTL for keys)", "scrapeId": "47cf6c69-6689-4ad4-a711-e87fde5b6f45", "sourceURL": "https://docs.deno.com/deploy/kv/manual/key_expiration", "url": "https://docs.deno.com/deploy/kv/manual/key_expiration/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Key Expiration (TTL for keys)\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you need to strictly enforce an expiration time (e.g. for security purposes), please also add it as a field of your value and do a check after retrieving the value from the database.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/key_expiration", "title": "Key Expiration (TTL for keys)", "description": "Since version 1.36.2, Deno KV supports key expiration, allowing developers to control time to live (TTL) for keys in a KV database. This allows an expiration timestamp to be associated with a key, after which the key will be automatically deleted from the database.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:40:09", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "title": "Key Expiration (TTL for keys)", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Key Expiration (TTL for keys)", "twitter:site": "@deno_land", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Key Expiration (TTL for keys)", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:type": "article", "language": "en", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "ogTitle": "Key Expiration (TTL for keys)", "scrapeId": "47cf6c69-6689-4ad4-a711-e87fde5b6f45", "sourceURL": "https://docs.deno.com/deploy/kv/manual/key_expiration", "url": "https://docs.deno.com/deploy/kv/manual/key_expiration/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"no-octal\"?\n\nAssistant: This rule disallows expressing octal numbers via numeric literals beginning with `0`.\n\nHere's a detailed explanation:\n\n\n## Overview\nDisallows expressing octal numbers via numeric literals beginning with `0`. Octal numbers can be expressed via numeric literals with leading `0` like `042`, but this expression often confuses programmers. That's why ECMAScript's strict mode throws `SyntaxError` for the expression. Since ES2015, the other prefix `0o` has been introduced as an alternative. This new one is always encouraged to use in today's code.\n\n## Examples\n**Invalid:**\n\n```highlight notranslate typescript\nconst a = 042;\nconst b = 7 + 042;\n```\n\n**Valid:**\n\n```highlight notranslate typescript\nconst a = 0o42;\nconst b = 7 + 0o42;\nconst c = \"042\";\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-octal", "title": "no-octal", "description": "This rule disallows expressing octal numbers via numeric literals beginning with `0`.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:40:21", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "no-octal", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "no-octal", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "title": "no-octal", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:type": "article", "ogImage": "/img/og.webp", "og:title": "no-octal", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "503e19ba-7879-40f8-8666-81b7143fdf6f", "sourceURL": "https://docs.deno.com/lint/rules/no-octal", "url": "https://docs.deno.com/lint/rules/no-octal/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"no-octal\"?\n\nAssistant: Here are some code examples:\n\n### Deno Configuration\n```yaml\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n### Deno CLI Command\n```yaml\ndeno lint --tags=recommended\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-octal", "title": "no-octal", "description": "This rule disallows expressing octal numbers via numeric literals beginning with `0`.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:40:21", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "no-octal", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "no-octal", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "title": "no-octal", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:type": "article", "ogImage": "/img/og.webp", "og:title": "no-octal", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "503e19ba-7879-40f8-8666-81b7143fdf6f", "sourceURL": "https://docs.deno.com/lint/rules/no-octal", "url": "https://docs.deno.com/lint/rules/no-octal/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"no-octal\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always use the `0o` prefix for octal numbers in modern JavaScript code.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-octal", "title": "no-octal", "description": "This rule disallows expressing octal numbers via numeric literals beginning with `0`.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 01:40:21", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:title": "no-octal", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "no-octal", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "title": "no-octal", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:type": "article", "ogImage": "/img/og.webp", "og:title": "no-octal", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "503e19ba-7879-40f8-8666-81b7143fdf6f", "sourceURL": "https://docs.deno.com/lint/rules/no-octal", "url": "https://docs.deno.com/lint/rules/no-octal/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"interfaceDOMException\"?\n\nAssistant: This interface extends the Error class and represents an exception that occurs in the Document Object Model (DOM).\n\nHere's a detailed explanation:\n\n\n## Properties\nThe DOMException interface has several properties that provide information about the exception.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/DOMException", "title": "interfaceDOMException", "description": "This interface extends the Error class and represents an exception that occurs in the Document Object Model (DOM).", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:40:59", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "DOMException - Platform - Web documentation", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:locale": "en_US", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "DOMException - Platform - Web documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:title": "DOMException - Platform - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "og:title": "DOMException - Platform - Web documentation", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "4bcc42e4-3da2-4057-98ad-752b57b7ea78", "sourceURL": "https://docs.deno.com/api/web/~/DOMException", "url": "https://docs.deno.com/api/web/~/DOMException", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Environment variables\"?\n\nAssistant: Environment variables are useful to store values like access tokens of web services. Each deployment has a set of environment variables defined at the moment of creation and accessible from the code via the Deno.env API.\n\nHere's a detailed explanation:\n\n\n## Project environment variables\nYou can define environment variables at the project level. When you create a deployment, it will get the set of environment variables the project has defined _at that particular moment_.\n\nFor convenience, When you change the environment variables of a project, the current production deployment is _redeployed_, creating a new production deployment with the new set of environment variables.\n\nNote\n\nDeployments are immutable, including their environment variables. Changing the environment variables of a project does not change the environment variables of existing deployments.\n\nTo add an environment variable to your project, click on the **Settings** button on the project page and then on **Environment Variables** from the sidebar. Fill in the key/value fields and click on \"Add\" to add an environment variable to your project.\n\n![environment_variable](https://docs.deno.com/deploy/docs-images/fauna2.png)\n\nUpdating an existing environment variable works the same way. Click on the \"Add Variable\" button, enter the same name of the environment variable you wish to update and enter the new value. Click on the \"Save\" button to complete the update.\n\n## Deployment environment variables\nWhen deploying using `deployctl`, you can specify environment variables [using the `--env` or `--env-file` flags](https://docs.deno.com/deploy/manual/deployctl/#environment-variables), complementing the environment variables already defined for the project. You can also pass multiple `--env-file` arguments (e.g., `--env-file=.env.one --env-file=.env.two`) to include variables from multiple files.\n\nNote\n\nWhen multiple declarations for the same environment variable exist within a single `.env` file, the first occurrence is applied. However, if the same variable is defined across multiple `.env` files (using multiple `--env-file` arguments), the value from the last file specified takes precedence. This means that the first occurrence found in the last `.env` file listed will be applied.\n\nThese env variables will be specific for the deployment being created.\n\n## Default environment variables\nEvery deployment has the following environment variables preset, which you can access from your code.\n\n1. `DENO_REGION`\n\nIt holds the region code of the region in which the deployment is running. You can use this variable to serve region-specific content.\n\nYou can refer to the region code from the [regions page](https://docs.deno.com/deploy/manual/regions).\n\n2. `DENO_DEPLOYMENT_ID`\n\nIt holds the ID of the deployment.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/environment-variables", "title": "Environment variables", "description": "Environment variables are useful to store values like access tokens of web services. Each deployment has a set of environment variables defined at the moment of creation and accessible from the code via the Deno.env API.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:41:19", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "og:title": "Environment variables", "og:site_name": "Deno", "og:image": "/img/og.webp", "twitter:title": "Environment variables", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Environment variables", "title": "Environment variables", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "55af71e0-8d13-4dd2-896e-a1847d21bc3d", "sourceURL": "https://docs.deno.com/deploy/manual/environment-variables", "url": "https://docs.deno.com/deploy/manual/environment-variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Environment variables\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deployments are immutable, including their environment variables. Changing the environment variables of a project does not change the environment variables of existing deployments.\n• When multiple declarations for the same environment variable exist within a single .env file, the first occurrence is applied. However, if the same variable is defined across multiple .env files, the value from the last file specified takes precedence.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/environment-variables", "title": "Environment variables", "description": "Environment variables are useful to store values like access tokens of web services. Each deployment has a set of environment variables defined at the moment of creation and accessible from the code via the Deno.env API.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 01:41:19", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "ogLocale": "en_US", "og:title": "Environment variables", "og:site_name": "Deno", "og:image": "/img/og.webp", "twitter:title": "Environment variables", "twitter:site": "@deno_land", "ogSiteName": "Deno", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Environment variables", "title": "Environment variables", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "55af71e0-8d13-4dd2-896e-a1847d21bc3d", "sourceURL": "https://docs.deno.com/deploy/manual/environment-variables", "url": "https://docs.deno.com/deploy/manual/environment-variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"no-namespace\"?\n\nAssistant: Disallows the use of `namespace` and `module` keywords in TypeScript code.\n\nHere's a detailed explanation:\n\n\n## Overview\nThis rule is part of the `recommended` rule set. It disallows the use of `namespace` and `module` keywords in TypeScript code, as they are considered outdated. Instead, it is generally preferable to use ES2015 module syntax (e.g. `import`/ `export`). However, this rule still allows the use of these keywords in specific cases.\n\n## Enabling the Rule\nEnable full set in `deno.json`:\n\n```\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\nEnable full set using the Deno CLI:\n\n```\ndenolint --tags=recommended\n```\n\n## Allowed Usage\nThis rule allows the use of `namespace` and `module` keywords in the following cases:\n\n- They are used for defining \"ambient\" namespaces along with `declare` keywords.\n- They are written in TypeScript's type definition files: `.d.ts`.\n\n## Examples\n**Invalid:**\n\n```typescript\n// foo.ts\nmodule mod {}\nnamespace ns {}\n```\n\n```dts\n// bar.d.ts\n// all usage of `module` and `namespace` keywords are allowed in `.d.ts`\n```\n\n**Valid:**\n\n```typescript\n// foo.ts\ndeclare global {}\ndeclare module mod1 {}\ndeclare module \"mod2\" {}\ndeclare namespace ns {}\n```\n\n```dts\n// bar.d.ts\nmodule mod1 {}\nnamespace ns1 {}\ndeclare global {}\ndeclare module mod2 {}\ndeclare module \"mod3\" {}\ndeclare namespace ns2 {}\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-namespace", "title": "no-namespace", "description": "Disallows the use of `namespace` and `module` keywords in TypeScript code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:41:36", "type": "overview", "page_metadata": {"language": "en", "twitter:site": "@deno_land", "title": "no-namespace", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:card": "summary_large_image", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "no-namespace", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:site_name": "Deno", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "no-namespace", "og:title": "no-namespace", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "scrapeId": "64a8816c-3155-4b19-85ea-89d15b289659", "sourceURL": "https://docs.deno.com/lint/rules/no-namespace", "url": "https://docs.deno.com/lint/rules/no-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"no-namespace\"?\n\nAssistant: Here are some code examples:\n\n### Enable in deno.json\n```yaml\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n### Enable using Deno CLI\n```yaml\ndeno lint --tags=recommended\n```\n\n### Invalid Example\n```yaml\n// foo.ts\nmodule mod {}\nnamespace ns {}\n```\n\n### Valid Example\n```yaml\n// foo.ts\ndeclare global {}\ndeclare module mod1 {}\ndeclare module \"mod2\" {}\ndeclare namespace ns {}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-namespace", "title": "no-namespace", "description": "Disallows the use of `namespace` and `module` keywords in TypeScript code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:41:36", "type": "code_examples", "page_metadata": {"language": "en", "twitter:site": "@deno_land", "title": "no-namespace", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:card": "summary_large_image", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "no-namespace", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:site_name": "Deno", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "no-namespace", "og:title": "no-namespace", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "scrapeId": "64a8816c-3155-4b19-85ea-89d15b289659", "sourceURL": "https://docs.deno.com/lint/rules/no-namespace", "url": "https://docs.deno.com/lint/rules/no-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"no-namespace\"?\n\nAssistant: Here are the recommended best practices:\n\n• Prefer using ES2015 module syntax over `namespace` and `module` keywords.\n• Use `declare` keywords for ambient namespaces.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-namespace", "title": "no-namespace", "description": "Disallows the use of `namespace` and `module` keywords in TypeScript code.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:41:36", "type": "best_practices", "page_metadata": {"language": "en", "twitter:site": "@deno_land", "title": "no-namespace", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "twitter:card": "summary_large_image", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "no-namespace", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:site_name": "Deno", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "no-namespace", "og:title": "no-namespace", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "scrapeId": "64a8816c-3155-4b19-85ea-89d15b289659", "sourceURL": "https://docs.deno.com/lint/rules/no-namespace", "url": "https://docs.deno.com/lint/rules/no-namespace/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"functioncreateImageBitmap\"?\n\nAssistant: Documentation for the createImageBitmap function, including overloads, examples, parameters, return types, and references.\n\nHere's a detailed explanation:\n\n\n## Overload 1\n`#createImageBitmap(\nimage: ImageBitmapSource,\noptions?: ImageBitmapOptions,): Promise<ImageBitmap>`\n\nCreate a new [`ImageBitmap`](https://docs.deno.com/api/web/~/ImageBitmap) object from a given source.\n\n### Examples [#](https://docs.deno.com/api/web/~/createImageBitmap#examples)\n\n[#](https://docs.deno.com/api/web/~/createImageBitmap#example_0)\n\n```highlight notranslate ts\ntry {\n  // Fetch an image\n  const response = await fetch(\"https://example.com/image.png\");\n  const blob = await response.blob();\n\n  // Basic usage\n  const basicBitmap = await createImageBitmap(blob);\n  console.log(\"Basic bitmap size:\", basicBitmap.width, basicBitmap.height);\n\n  // With options\n  const resizedBitmap = await createImageBitmap(blob, {\n    resizeWidth: 100,\n    resizeHeight: 100,\n    resizeQuality: \"high\",\n    imageOrientation: \"flipY\"\n  });\n\n  // Cleanup when done\n  basicBitmap.close();\n  resizedBitmap.close();\n} catch (error) {\n  console.error(\"Failed to create ImageBitmap:\", error);\n}\n```\n\n### Parameters [#](https://docs.deno.com/api/web/~/createImageBitmap#parameters)\n\n`#image: ImageBitmapSource`\n\nThe image to create an [`ImageBitmap`](https://docs.deno.com/api/web/~/ImageBitmap) from.\n\noptional\n\n`#options: ImageBitmapOptions`\n\nThe options for creating the [`ImageBitmap`](https://docs.deno.com/api/web/~/ImageBitmap).\n\n### Return Type [#](https://docs.deno.com/api/web/~/createImageBitmap#return-type)\n\n`Promise<ImageBitmap>`\n\n### See [#](https://docs.deno.com/api/web/~/createImageBitmap#see)\n\n- [https://developer.mozilla.org/en-US/docs/Web/API/createImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/createImageBitmap)\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/createImageBitmap", "title": "functioncreateImageBitmap", "description": "Documentation for the createImageBitmap function, including overloads, examples, parameters, return types, and references.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:42:09", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:title": "createImageBitmap - Canvas\n - Web documentation", "ogTitle": "createImageBitmap - Canvas\n - Web documentation", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:locale": "en_US", "title": "createImageBitmap - Canvas\n - Web documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:title": "createImageBitmap - Canvas\n - Web documentation", "og:type": "article", "language": "en", "scrapeId": "8c578871-5a9b-49c0-9f48-d9f169839648", "sourceURL": "https://docs.deno.com/api/web/~/createImageBitmap", "url": "https://docs.deno.com/api/web/~/createImageBitmap", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"functioncreateImageBitmap\"?\n\nAssistant: Here are some code examples:\n\n### Basic usage of createImageBitmap\n```yaml\ntry {\n  // Fetch an image\n  const response = await fetch(\"https://example.com/image.png\");\n  const blob = await response.blob();\n\n  // Basic usage\n  const basicBitmap = await createImageBitmap(blob);\n  console.log(\"Basic bitmap size:\", basicBitmap.width, basicBitmap.height);\n\n  // With options\n  const resizedBitmap = await createImageBitmap(blob, {\n    resizeWidth: 100,\n    resizeHeight: 100,\n    resizeQuality: \"high\",\n    imageOrientation: \"flipY\"\n  });\n\n  // Cleanup when done\n  basicBitmap.close();\n  resizedBitmap.close();\n} catch (error) {\n  console.error(\"Failed to create ImageBitmap:\", error);\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/createImageBitmap", "title": "functioncreateImageBitmap", "description": "Documentation for the createImageBitmap function, including overloads, examples, parameters, return types, and references.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:42:09", "type": "code_examples", "page_metadata": {"ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:title": "createImageBitmap - Canvas\n - Web documentation", "ogTitle": "createImageBitmap - Canvas\n - Web documentation", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:locale": "en_US", "title": "createImageBitmap - Canvas\n - Web documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:title": "createImageBitmap - Canvas\n - Web documentation", "og:type": "article", "language": "en", "scrapeId": "8c578871-5a9b-49c0-9f48-d9f169839648", "sourceURL": "https://docs.deno.com/api/web/~/createImageBitmap", "url": "https://docs.deno.com/api/web/~/createImageBitmap", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"functioncreateImageBitmap\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always close the ImageBitmap objects when done to free up resources.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/createImageBitmap", "title": "functioncreateImageBitmap", "description": "Documentation for the createImageBitmap function, including overloads, examples, parameters, return types, and references.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 01:42:09", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:title": "createImageBitmap - Canvas\n - Web documentation", "ogTitle": "createImageBitmap - Canvas\n - Web documentation", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:locale": "en_US", "title": "createImageBitmap - Canvas\n - Web documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:title": "createImageBitmap - Canvas\n - Web documentation", "og:type": "article", "language": "en", "scrapeId": "8c578871-5a9b-49c0-9f48-d9f169839648", "sourceURL": "https://docs.deno.com/api/web/~/createImageBitmap", "url": "https://docs.deno.com/api/web/~/createImageBitmap", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"URLPattern API\"?\n\nAssistant: The URLPattern API provides a web platform primitive for matching URLs based on a convenient pattern syntax.\n\nHere's a detailed explanation:\n\n\n## Introduction\nThe URLPattern API provides a web platform primitive for matching URLs based on a convenient pattern syntax. The syntax is based on path-to-regexp. Wildcards, named capture groups, regular groups, and group modifiers are all supported.\n\n## Code Examples\n```highlight notranslate ts\n// Specify the pattern as structured data.\nconst pattern = new URLPattern({ pathname: \"/users/:user\" });\nconst match = pattern.exec(\"https://blog.example.com/users/joe\");\nconsole.log(match.pathname.groups.user); // joe\n```\n\n```highlight notranslate ts\n// Specify a fully qualified string pattern.\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\nconsole.log(pattern.test(\"https://example.com/books/123\")); // true\nconsole.log(pattern.test(\"https://deno.land/books/123\")); // false\n```\n\n```highlight notranslate ts\n// Specify a relative string pattern with a base URL.\nconst pattern = new URLPattern(\"/article/:id\", \"https://blog.example.com\");\nconsole.log(pattern.test(\"https://blog.example.com/article\")); // false\nconsole.log(pattern.test(\"https://blog.example.com/article/123\")); // true\n```\n\n## Properties\n### Properties\n\nreadonly\n\n`#protocol: string`\n\nThe pattern string for the `protocol`.\n\nreadonly\n\n`#username: string`\n\nThe pattern string for the `username`.\n\nreadonly\n\n`#password: string`\n\nThe pattern string for the `password`.\n\nreadonly\n\n`#hostname: string`\n\nThe pattern string for the `hostname`.\n\nreadonly\n\n`#port: string`\n\nThe pattern string for the `port`.\n\nreadonly\n\n`#pathname: string`\n\nThe pattern string for the `pathname`.\n\nreadonly\n\n`#search: string`\n\nThe pattern string for the `search`.\n\nreadonly\n\n`#hash: string`\n\nThe pattern string for the `hash`.\n\nreadonly\n\n`#hasRegExpGroups: boolean`\n\nWhether or not any of the specified groups use regexp groups.\n\n## Methods\n### Methods\n\n`#test(\ninput: URLPatternInput,\nbaseURL?: string,): boolean`\n\nTest if the given input matches the stored pattern.\n\nThe input can either be provided as an absolute URL string with an optional base, relative URL string with a required base, or as individual components in the form of an `URLPatternInit` object.\n\n```highlight notranslate ts\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\n\n// Test an absolute url string.\nconsole.log(pattern.test(\"https://example.com/books/123\")); // true\n\n// Test a relative url with a base.\nconsole.log(pattern.test(\"/books/123\", \"https://example.com\")); // true\n\n// Test an object of url components.\nconsole.log(pattern.test({ pathname: \"/books/123\" })); // true\n```\n\n`#exec(\ninput: URLPatternInput,\nbaseURL?: string,): URLPatternResult | null`\n\nMatch the given input against the stored pattern.\n\nThe input can either be provided as an absolute URL string with an optional base, relative URL string with a required base, or as individual components in the form of an `URLPatternInit` object.\n\n```highlight notranslate ts\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\n\n// Match an absolute url string.\nlet match = pattern.exec(\"https://example.com/books/123\");\nconsole.log(match.pathname.groups.id); // 123\n\n// Match a relative url with a base.\nmatch = pattern.exec(\"/books/123\", \"https://example.com\");\nconsole.log(match.pathname.groups.id); // 123\n\n// Match an object of url components.\nmatch = pattern.exec({ pathname: \"/books/123\" });\nconsole.log(match.pathname.groups.id); // 123\n```\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/URLPattern", "title": "URLPattern API", "description": "The URLPattern API provides a web platform primitive for matching URLs based on a convenient pattern syntax.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:43:44", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "og:locale": "en_US", "og:title": "URLPattern - URL - Web documentation", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "URLPattern - URL - Web documentation", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "twitter:title": "URLPattern - URL - Web documentation", "ogTitle": "URLPattern - URL - Web documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "0e88e80f-c0bd-4cc2-95ac-43bdc2ace123", "sourceURL": "https://docs.deno.com/api/web/~/URLPattern", "url": "https://docs.deno.com/api/web/~/URLPattern", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"URLPattern API\"?\n\nAssistant: Here are some code examples:\n\n### Structured Data Pattern\n```yaml\nconst pattern = new URLPattern({ pathname: \"/users/:user\" });\nconst match = pattern.exec(\"https://blog.example.com/users/joe\");\nconsole.log(match.pathname.groups.user); // joe\n```\n\n### Fully Qualified String Pattern\n```yaml\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\nconsole.log(pattern.test(\"https://example.com/books/123\")); // true\nconsole.log(pattern.test(\"https://deno.land/books/123\")); // false\n```\n\n### Relative String Pattern with Base URL\n```yaml\nconst pattern = new URLPattern(\"/article/:id\", \"https://blog.example.com\");\nconsole.log(pattern.test(\"https://blog.example.com/article\")); // false\nconsole.log(pattern.test(\"https://blog.example.com/article/123\")); // true\n```\n\n### Test Method Example\n```yaml\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\nconsole.log(pattern.test(\"https://example.com/books/123\")); // true\nconsole.log(pattern.test(\"/books/123\", \"https://example.com\")); // true\nconsole.log(pattern.test({ pathname: \"/books/123\" })); // true\n```\n\n### Exec Method Example\n```yaml\nconst pattern = new URLPattern(\"https://example.com/books/:id\");\nlet match = pattern.exec(\"https://example.com/books/123\");\nconsole.log(match.pathname.groups.id); // 123\nmatch = pattern.exec(\"/books/123\", \"https://example.com\");\nconsole.log(match.pathname.groups.id); // 123\nmatch = pattern.exec({ pathname: \"/books/123\" });\nconsole.log(match.pathname.groups.id); // 123\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/URLPattern", "title": "URLPattern API", "description": "The URLPattern API provides a web platform primitive for matching URLs based on a convenient pattern syntax.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:43:44", "type": "code_examples", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "og:locale": "en_US", "og:title": "URLPattern - URL - Web documentation", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "URLPattern - URL - Web documentation", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "twitter:title": "URLPattern - URL - Web documentation", "ogTitle": "URLPattern - URL - Web documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "0e88e80f-c0bd-4cc2-95ac-43bdc2ace123", "sourceURL": "https://docs.deno.com/api/web/~/URLPattern", "url": "https://docs.deno.com/api/web/~/URLPattern", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"URLPattern API\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use structured data for defining patterns for better readability.\n• Test patterns with both absolute and relative URLs to ensure they work as expected.\n• Utilize named capture groups for easier access to matched segments.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/URLPattern", "title": "URLPattern API", "description": "The URLPattern API provides a web platform primitive for matching URLs based on a convenient pattern syntax.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 01:43:44", "type": "best_practices", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:type": "article", "og:site_name": "Deno", "og:locale": "en_US", "og:title": "URLPattern - URL - Web documentation", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "URLPattern - URL - Web documentation", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "twitter:title": "URLPattern - URL - Web documentation", "ogTitle": "URLPattern - URL - Web documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "0e88e80f-c0bd-4cc2-95ac-43bdc2ace123", "sourceURL": "https://docs.deno.com/api/web/~/URLPattern", "url": "https://docs.deno.com/api/web/~/URLPattern", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing Module\n```yaml\nimport * as mod from \"node:util/types\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/util/types", "title": "Usage in Deno", "description": "", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 01:44:36", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:site_name": "Deno", "ogTitle": "util/types - Node documentation", "og:image": "/img/og.webp", "twitter:site": "@deno_land", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:card": "summary_large_image", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogImage": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "util/types - Node documentation", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:title": "util/types - Node documentation", "twitter:title": "util/types - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:locale": "en_US", "scrapeId": "4a2a35e0-02db-494a-95a7-d063187e8bad", "sourceURL": "https://docs.deno.com/api/node/util/types", "url": "https://docs.deno.com/api/node/util/types/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno lint, linter\"?\n\nAssistant: Lint JavaScript/TypeScript source code.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno lint [OPTIONS] [files]...\n```\n\nLint JavaScript/TypeScript source code.\n\n```\ndeno lint\n```\n\n```\ndeno lint myfile1.ts myfile2.js\n```\n\nPrint result as JSON:\n\n```\ndeno lint --json\n```\n\nRead from stdin:\n\n```\ncat file.ts | deno lint -\n```\n\n```\ncat file.ts | deno lint --json -\n```\n\nList available rules:\n\n```\ndeno lint --rules\n```\n\nTo ignore specific diagnostics, you can write an ignore comment on the preceding line with a rule name (or multiple):\n\n```javascript\n// deno-lint-ignore no-explicit-any\n```\n\n```javascript\n// deno-lint-ignore require-await no-empty\n```\n\nTo ignore linting on an entire file, you can add an ignore comment at the top of the file:\n\n```javascript\n// deno-lint-ignore-file\n```\n\n## Linting options\n### `--compact`\nOutput lint result in compact format.\n\n### `--fix`\nFix any linting errors for rules that support it.\n\n### `--ignore`\nIgnore linting particular source files.\n\n### `--json`\nOutput lint result in JSON format.\n\n### `--rules`\nList available rules.\n\n### `--rules-exclude`\nExclude lint rules.\n\n### `--rules-include`\nInclude lint rules.\n\n### `--rules-tags`\nUse set of rules with a tag.\n\n## Options\n### `--allow-import`\nShort flag: `-I`\n\nAllow importing from remote hosts. Optionally specify allowed IP addresses and host names, with ports as necessary. Default value: deno.land:443, [jsr.io:443](http://jsr.io:443/), [esm.sh:443](http://esm.sh:443/), [cdn.jsdelivr.net:443](http://cdn.jsdelivr.net:443/), [raw.githubusercontent.com:443](http://raw.githubusercontent.com:443/), [user.githubusercontent.com:443](http://user.githubusercontent.com:443/).\n\n### `--config`\nShort flag: `-c`\n\nConfigure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary.\n\n### `--ext`\nSpecify the file extension to lint when reading from stdin. For example, use `jsx` to lint JSX files or `tsx` for TSX files. This argument is necessary because stdin input does not automatically infer the file type. Example usage: `cat file.jsx | deno lint - --ext=jsx`.\n\n### `--no-config`\nDisable automatic loading of the configuration file.\n\n## File watching options\n### `--no-clear-screen`\nDo not clear terminal screen when under watch mode.\n\n### `--watch`\nWatch for file changes and restart process automatically. Only local files from entry point module graph are watched.\n\n### `--watch-exclude`\nExclude provided files/patterns from watch mode.\n\n## Available rules\nFor a complete list of supported rules, visit [List of rules](https://docs.deno.com/lint/) documentation page.\n\n## Ignore directives\n### File level\nTo ignore a whole file use `// deno-lint-ignore-file` at the top of the file:\n\n```javascript\n// deno-lint-ignore-file\n\nfunction foo(): any {\n  // ...\n}\n```\n\nYou can also specify the reason for ignoring the file:\n\n```javascript\n// deno-lint-ignore-file -- reason for ignoring\n\nfunction foo(): any {\n  // ...\n}\n```\n\nThe ignore directive must be placed before the first statement or declaration:\n\n```javascript\n// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n\n/**\n * Some JS doc\n */\n\n// deno-lint-ignore-file\n\nimport { bar } from \"./bar.js\";\n\nfunction foo(): any {\n  // ...\n}\n```\n\nYou can also ignore certain diagnostics in the whole file:\n\n```javascript\n// deno-lint-ignore-file no-explicit-any no-empty\n\nfunction foo(): any {\n  // ...\n}\n```\n\nIf there are multiple `// deno-lint-ignore-file` directives, all but the first one are ignored:\n\n```javascript\n// This is effective\n// deno-lint-ignore-file no-explicit-any no-empty\n\n// But this is NOT effective\n// deno-lint-ignore-file no-debugger\n\nfunction foo(): any {\n  debugger; // not ignored!\n}\n```\n\n### Line level\nTo ignore specific diagnostics use `// deno-lint-ignore <codes...>` on the preceding line of the offending line.\n\n```javascript\n// deno-lint-ignore no-explicit-any\nfunction foo(): any {\n  // ...\n}\n\n// deno-lint-ignore no-explicit-any explicit-function-return-type\nfunction bar(a: any) {\n  // ...\n}\n```\n\nYou must specify the names of the rules to be ignored.\n\nYou can also specify the reason for ignoring the diagnostic:\n\n```javascript\n// deno-lint-ignore no-explicit-any -- reason for ignoring\nfunction foo(): any {\n  // ...\n}\n```\n\n## Ignore ban-unused-ignore itself\n`deno lint` provides [`ban-unused-ignore`](https://docs.deno.com/lint/rules/ban-unused-ignore/) rule, which will detect ignore directives that don't ever suppress certain diagnostics. This is useful when you want to discover ignore directives that are no longer necessary after refactoring the code.\n\nIn a few cases, however, you might want to ignore `ban-unused-ignore` rule itself. One of the typical cases would be when working with auto-generated files; it makes sense to add file-level ignore directives for some rules, and there's almost no need for detecting unused directives via `ban-unused-ignore` in this case.\n\nYou can use `// deno-lint-ignore-file ban-unused-ignore` as always if you want to suppress the rule for a whole file:\n\n```javascript\n// deno-lint-ignore-file ban-unused-ignore no-explicit-any\n\n// `no-explicit-any` isn't used but you'll get no diagnostics because of ignoring\n// `ban-unused-ignore`\nconsole.log(42);\n```\n\nDo note that ignoring `ban-unused-ignore` itself only works via file-level ignore directives. This means that per line directives, like `// deno-lint-ignore ban-unused-ignore`, don't work at all. If you want to ignore `ban-unused-ignore` for some special reasons, make sure to add it as a file-level ignore directive.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/lint", "title": "deno lint, linter", "description": "Lint JavaScript/TypeScript source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:00:12", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "`deno lint`, linter", "og:locale": "en_US", "twitter:title": "`deno lint`, linter", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "title": "`deno lint`, linter", "language": "en", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "`deno lint`, linter", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "de2a3589-2574-48c1-bb10-a402d75db29c", "sourceURL": "https://docs.deno.com/runtime/reference/cli/lint", "url": "https://docs.deno.com/runtime/reference/cli/lint/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno lint, linter\"?\n\nAssistant: Here are some code examples:\n\n### Command line usage examples\n```yaml\n```\ndeno lint [OPTIONS] [files]...\n```\n\n```\ndeno lint\n```\n\n```\ndeno lint myfile1.ts myfile2.js\n```\n\nPrint result as JSON:\n\n```\ndeno lint --json\n```\n\nRead from stdin:\n\n```\ncat file.ts | deno lint -\n```\n\n```\ncat file.ts | deno lint --json -\n```\n\nList available rules:\n\n```\ndeno lint --rules\n```\n```\n\n### Ignore specific diagnostics\n```yaml\n```javascript\n// deno-lint-ignore no-explicit-any\n```\n\n```javascript\n// deno-lint-ignore require-await no-empty\n```\n```\n\n### Ignore linting on an entire file\n```yaml\n```javascript\n// deno-lint-ignore-file\n```\n```\n\n### Linting options examples\n```yaml\n### `--compact`\nOutput lint result in compact format.\n\n### `--fix`\nFix any linting errors for rules that support it.\n\n### `--ignore`\nIgnore linting particular source files.\n\n### `--json`\nOutput lint result in JSON format.\n\n### `--rules`\nList available rules.\n\n### `--rules-exclude`\nExclude lint rules.\n\n### `--rules-include`\nInclude lint rules.\n\n### `--rules-tags`\nUse set of rules with a tag.\n```\n\n### File level ignore example\n```yaml\n```javascript\n// deno-lint-ignore-file\n\nfunction foo(): any {\n  // ...\n}\n```\n```\n\n### Line level ignore example\n```yaml\n```javascript\n// deno-lint-ignore no-explicit-any\nfunction foo(): any {\n  // ...\n}\n```\n```\n\n### Ignore ban-unused-ignore example\n```yaml\n```javascript\n// deno-lint-ignore-file ban-unused-ignore no-explicit-any\n\n// `no-explicit-any` isn't used but you'll get no diagnostics because of ignoring\n// `ban-unused-ignore`\nconsole.log(42);\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/lint", "title": "deno lint, linter", "description": "Lint JavaScript/TypeScript source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:00:12", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "`deno lint`, linter", "og:locale": "en_US", "twitter:title": "`deno lint`, linter", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "title": "`deno lint`, linter", "language": "en", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "`deno lint`, linter", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "de2a3589-2574-48c1-bb10-a402d75db29c", "sourceURL": "https://docs.deno.com/runtime/reference/cli/lint", "url": "https://docs.deno.com/runtime/reference/cli/lint/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno lint, linter\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `// deno-lint-ignore` to ignore specific diagnostics on the preceding line.\n• Use `// deno-lint-ignore-file` to ignore linting for an entire file.\n• Specify reasons for ignoring rules to maintain clarity in your code.\n• Use the `--json` option to get lint results in JSON format for easier parsing.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/lint", "title": "deno lint, linter", "description": "Lint JavaScript/TypeScript source code.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:00:12", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "og:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "`deno lint`, linter", "og:locale": "en_US", "twitter:title": "`deno lint`, linter", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "title": "`deno lint`, linter", "language": "en", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "`deno lint`, linter", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "de2a3589-2574-48c1-bb10-a402d75db29c", "sourceURL": "https://docs.deno.com/runtime/reference/cli/lint", "url": "https://docs.deno.com/runtime/reference/cli/lint/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"SubtleCrypto Interface\"?\n\nAssistant: This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via globalThis.crypto).\n\nHere's a detailed explanation:\n\n\n## Methods\n### Methods\n\n`#generateKey(\nalgorithm: RsaHashedKeyGenParams | EcKeyGenParams,\nextractable: boolean,\nkeyUsages: KeyUsage[],): Promise<CryptoKeyPair>`\n\nGenerates an asymmetric cryptographic key pair for encryption, signing, or key exchange.\n\nThis overload is used for generating key pairs with RSA or elliptic curve algorithms.\n\n`#generateKey(\nalgorithm: AesKeyGenParams | HmacKeyGenParams,\nextractable: boolean,\nkeyUsages: KeyUsage[],): Promise<CryptoKey>`\n\nGenerates a symmetric cryptographic key for encryption, authentication, or hashing.\n\nThis overload is used for algorithms such as AES and HMAC.\n\n`#generateKey(\nalgorithm: AlgorithmIdentifier,\nextractable: boolean,\nkeyUsages: KeyUsage[],): Promise<CryptoKeyPair | CryptoKey>`\n\nGenerates a cryptographic key or key pair for a given algorithm.\n\nThis generic overload handles any key generation request, returning either a symmetric key or an asymmetric key pair based on the provided algorithm.\n\n`#importKey(\nformat: \"jwk\",\nkeyData: JsonWebKey,\nalgorithm:\nAlgorithmIdentifier\n| HmacImportParams\n| RsaHashedImportParams\n| EcKeyImportParams,\nextractable: boolean,\nkeyUsages: KeyUsage[],): Promise<CryptoKey>`\n\nImports a cryptographic key in JSON Web Key (JWK) format.\n\nThis method is used to import an asymmetric key (e.g., RSA or ECDSA) from a JWK object.\nJWK allows structured representation of keys, making them portable across different systems.\n\n`#importKey(\nformat: Exclude<KeyFormat, \"jwk\">,\nkeyData: BufferSource,\nalgorithm:\nAlgorithmIdentifier\n| HmacImportParams\n| RsaHashedImportParams\n| EcKeyImportParams,\nextractable: boolean,\nkeyUsages: KeyUsage[],): Promise<CryptoKey>`\n\nImports a cryptographic key in raw, PKCS8, or SPKI format.\n\nThis method is used to import symmetric keys (e.g., AES), private keys (PKCS8), or public keys (SPKI).\n\n`#exportKey(\nformat: \"jwk\",\nkey: CryptoKey,): Promise<JsonWebKey>`\n\nExports a cryptographic key in JSON Web Key (JWK) format.\n\nThis method allows exporting an asymmetric key (e.g., RSA, ECDSA) into a JSON-based representation,\nmaking it easy to store and transfer across systems.\n\n`#exportKey(\nformat: Exclude<KeyFormat, \"jwk\">,\nkey: CryptoKey,): Promise<ArrayBuffer>`\n\nExports a cryptographic key in raw, PKCS8, or SPKI format.\n\nThis method is used to export symmetric keys (AES), private keys (PKCS8), or public keys (SPKI) in binary form.\n\n`#sign(\nalgorithm:\nAlgorithmIdentifier\n| RsaPssParams\n| EcdsaParams,\nkey: CryptoKey,\ndata: BufferSource,): Promise<ArrayBuffer>`\n\nGenerates a digital signature using a private cryptographic key.\n\nThis method is used to sign data with an asymmetric key (e.g., RSA-PSS, ECDSA).\n\n`#verify(\nalgorithm:\nAlgorithmIdentifier\n| RsaPssParams\n| EcdsaParams,\nkey: CryptoKey,\nsignature: BufferSource,\ndata: BufferSource,): Promise<boolean>`\n\nVerifies a digital signature using a public cryptographic key.\n\nThis method checks whether a signature is valid for the given data.\n\n`#digest(\nalgorithm: AlgorithmIdentifier,\ndata: BufferSource,): Promise<ArrayBuffer>`\n\nComputes a cryptographic hash (digest) of the given data.\n\nThis method is commonly used for verifying data integrity.\n\n`#encrypt(\nalgorithm:\nAlgorithmIdentifier\n| RsaOaepParams\n| AesCbcParams\n| AesGcmParams\n| AesCtrParams,\nkey: CryptoKey,\ndata: BufferSource,): Promise<ArrayBuffer>`\n\nEncrypts data using a cryptographic key.\n\nThis method is used with both symmetric (AES) and asymmetric (RSA) encryption.\n\n`#decrypt(\nalgorithm:\nAlgorithmIdentifier\n| RsaOaepParams\n| AesCbcParams\n| AesGcmParams\n| AesCtrParams,\nkey: CryptoKey,\ndata: BufferSource,): Promise<ArrayBuffer>`\n\nDecrypts previously encrypted data using a cryptographic key.\n\n`#deriveBits(\nalgorithm:\nAlgorithmIdentifier\n| HkdfParams\n| Pbkdf2Params\n| EcdhKeyDeriveParams,\nbaseKey: CryptoKey,\nlength: number,): Promise<ArrayBuffer>`\n\nThis method is used to derive a key from a base key using a cryptographic algorithm.\n\n`#deriveKey(\nalgorithm:\nAlgorithmIdentifier\n| HkdfParams\n| Pbkdf2Params\n| EcdhKeyDeriveParams,\nbaseKey: CryptoKey,\nderivedKeyType:\nAlgorithmIdentifier\n| AesDerivedKeyParams\n| HmacImportParams\n| HkdfParams\n| Pbkdf2Params,\nextractable: boolean,\nkeyUsages: KeyUsage[],): Promise<CryptoKey>`\n\nThis method is used to derive a secret key from a base or master key using a cryptographic algorithm.\nIt returns a Promise which fulfils with an object of the new key.\n\n`#wrapKey(\nformat: KeyFormat,\nkey: CryptoKey,\nwrappingKey: CryptoKey,\nwrapAlgorithm:\nAlgorithmIdentifier\n| RsaOaepParams\n| AesCbcParams\n| AesCtrParams,): Promise<ArrayBuffer>`\n\nWraps (encrypts) a cryptographic key for secure storage or transmission\n\n`#unwrapKey(\nformat: KeyFormat,\nwrappedKey: BufferSource,\nunwrappingKey: CryptoKey,\nunwrapAlgorithm:\nAlgorithmIdentifier\n| RsaOaepParams\n| AesCbcParams\n| AesCtrParams,\nunwrappedKeyAlgorithm:\nAlgorithmIdentifier\n| HmacImportParams\n| RsaHashedImportParams\n| EcKeyImportParams,\nextractable: boolean,\nkeyUsages: KeyUsage[],): Promise<CryptoKey>`\n\nUnwraps (decrypts) a previously wrapped key.\n\n## Properties\n### Properties\n\nreadonly\n\n`#prototype: SubtleCrypto`\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/SubtleCrypto", "title": "SubtleCrypto Interface", "description": "This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via globalThis.crypto).", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 02:00:49", "type": "overview", "page_metadata": {"language": "en", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "SubtleCrypto - Crypto - Web documentation", "og:type": "article", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "title": "SubtleCrypto - Crypto - Web documentation", "og:title": "SubtleCrypto - Crypto - Web documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogTitle": "SubtleCrypto - Crypto - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "scrapeId": "eb273bf6-e86d-41b8-8aab-2de2b2639ff3", "sourceURL": "https://docs.deno.com/api/web/~/SubtleCrypto", "url": "https://docs.deno.com/api/web/~/SubtleCrypto", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"interfacePerformance\"?\n\nAssistant: Deno supports User Timing Level 3 which is not widely supported yet in other runtimes. Check out the Performance API documentation on MDN for further information about how to use the API.\n\nHere's a detailed explanation:\n\n\n## Methods\n`#mark(\nmarkName: string,\noptions?: PerformanceMarkOptions,): PerformanceMark`\n\nStores a timestamp with the associated name (a \"mark\").\n\n`#measure(\nmeasureName: string,\noptions?: PerformanceMeasureOptions,): PerformanceMeasure`\n\nStores the `DOMHighResTimeStamp` duration between two marks along with the associated name (a \"measure\").\n\n## Properties\nreadonly\n\n`#timeOrigin: number`\n\nReturns a timestamp representing the start of the performance measurement.\n\n## Methods\n`#clearMarks(markName?: string): void`\n\nRemoves the stored timestamp with the associated name.\n\n`#clearMeasures(measureName?: string): void`\n\nRemoves stored timestamp with the associated name.\n\n`#getEntries(): PerformanceEntryList`\n\n`#getEntriesByName(\nname: string,\ntype?: string,): PerformanceEntryList`\n\n`#getEntriesByType(type: string): PerformanceEntryList`\n\n`#mark(\nmarkName: string,\noptions?: PerformanceMarkOptions,): PerformanceMark`\n\nStores a timestamp with the associated name (a \"mark\").\n\n`#measure(\nmeasureName: string,\noptions?: PerformanceMeasureOptions,): PerformanceMeasure`\n\nStores the `DOMHighResTimeStamp` duration between two marks along with the associated name (a \"measure\").\n\n`#measure(\nmeasureName: string,\nstartMark?: string,\nendMark?: string,): PerformanceMeasure`\n\nStores the `DOMHighResTimeStamp` duration between two marks along with the associated name (a \"measure\").\n\n`#now(): number`\n\nReturns a current time from Deno's start in fractional milliseconds.\n\n```highlight notranslate ts\nconst t = performance.now();\nconsole.log(`${t} ms since start!`);\n\n``` \n\n`#toJSON(): any`\n\nReturns a JSON representation of the performance object.\n\n## variablePerformance\n### Properties\n\nreadonly\n\n`#prototype: Performance`\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/Performance", "title": "interfacePerformance", "description": "Deno supports User Timing Level 3 which is not widely supported yet in other runtimes. Check out the Performance API documentation on MDN for further information about how to use the API.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:01:16", "type": "overview", "page_metadata": {"ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogSiteName": "Deno", "title": "Performance - Performance - Web documentation", "ogTitle": "Performance - Performance - Web documentation", "twitter:title": "Performance - Performance - Web documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:title": "Performance - Performance - Web documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "0eb3eee4-c1ac-4809-8cb2-41f76cc7b10a", "sourceURL": "https://docs.deno.com/api/web/~/Performance", "url": "https://docs.deno.com/api/web/~/Performance", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"interfacePerformance\"?\n\nAssistant: Here are some code examples:\n\n### Performance.now() Example\n```yaml\nconst t = performance.now();\nconsole.log(`${t} ms since start!`);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/Performance", "title": "interfacePerformance", "description": "Deno supports User Timing Level 3 which is not widely supported yet in other runtimes. Check out the Performance API documentation on MDN for further information about how to use the API.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:01:16", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogSiteName": "Deno", "title": "Performance - Performance - Web documentation", "ogTitle": "Performance - Performance - Web documentation", "twitter:title": "Performance - Performance - Web documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:title": "Performance - Performance - Web documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "0eb3eee4-c1ac-4809-8cb2-41f76cc7b10a", "sourceURL": "https://docs.deno.com/api/web/~/Performance", "url": "https://docs.deno.com/api/web/~/Performance", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"interfacePerformance\"?\n\nAssistant: Here are the recommended best practices:\n\n• Check out the Performance API documentation on MDN for further information about how to use the API.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/Performance", "title": "interfacePerformance", "description": "Deno supports User Timing Level 3 which is not widely supported yet in other runtimes. Check out the Performance API documentation on MDN for further information about how to use the API.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:01:16", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "ogSiteName": "Deno", "title": "Performance - Performance - Web documentation", "ogTitle": "Performance - Performance - Web documentation", "twitter:title": "Performance - Performance - Web documentation", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image": "/img/og.webp", "og:title": "Performance - Performance - Web documentation", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "0eb3eee4-c1ac-4809-8cb2-41f76cc7b10a", "sourceURL": "https://docs.deno.com/api/web/~/Performance", "url": "https://docs.deno.com/api/web/~/Performance", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"no-redeclare\"?\n\nAssistant: Disallows redeclaration of variables, functions, parameters with the same name.\n\nHere's a detailed explanation:\n\n\n## Enabling the Rule\nEnable full set in `deno.json`:\n\n```\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\nEnable full set using the Deno CLI:\n\n```\ndeno lint --tags=recommended\n```\n\n## Overview\nJavaScript allows us to redeclare variables with the same name using `var`, but redeclaration should not be used since it can make variables hard to trace.\n\nIn addition, this lint rule disallows redeclaration using `let` or `const` as well, although ESLint allows. This is useful because we can notice a syntax error before actually running the code.\n\nAs for functions and parameters, JavaScript just treats these as runtime errors, throwing `SyntaxError` when being run. It's also beneficial to detect this sort of errors statically.\n\n## Examples\n**Invalid:**\n\n```highlight notranslate typescript\nvar a = 3;\nvar a = 10;\n\nlet b = 3;\nlet b = 10;\n\nconst c = 3;\nconst c = 10;\n\nfunction d() {}\nfunction d() {}\n\nfunction e(arg: number) {\n  var arg: number;\n}\n\nfunction f(arg: number, arg: string) {}\n```\n\n**Valid:**\n\n```highlight notranslate typescript\nvar a = 3;\nfunction f() {\n  var a = 10;\n}\n\nif (foo) {\n  let b = 2;\n} else {\n  let b = 3;\n}\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-redeclare", "title": "no-redeclare", "description": "Disallows redeclaration of variables, functions, parameters with the same name.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:01:36", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "language": "en", "ogLocale": "en_US", "ogTitle": "no-redeclare", "title": "no-redeclare", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "og:type": "article", "twitter:title": "no-redeclare", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:title": "no-redeclare", "scrapeId": "f5ab4fb8-02e2-4864-aece-4679008e1b67", "sourceURL": "https://docs.deno.com/lint/rules/no-redeclare", "url": "https://docs.deno.com/lint/rules/no-redeclare/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"no-redeclare\"?\n\nAssistant: Here are some code examples:\n\n### Invalid Redeclarations\n```yaml\n```highlight notranslate typescript\nvar a = 3;\nvar a = 10;\n\nlet b = 3;\nlet b = 10;\n\nconst c = 3;\nconst c = 10;\n\nfunction d() {}\nfunction d() {}\n\nfunction e(arg: number) {\n  var arg: number;\n}\n\nfunction f(arg: number, arg: string) {}\n```\n```\n\n### Valid Redeclarations\n```yaml\n```highlight notranslate typescript\nvar a = 3;\nfunction f() {\n  var a = 10;\n}\n\nif (foo) {\n  let b = 2;\n} else {\n  let b = 3;\n}\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-redeclare", "title": "no-redeclare", "description": "Disallows redeclaration of variables, functions, parameters with the same name.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:01:36", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "language": "en", "ogLocale": "en_US", "ogTitle": "no-redeclare", "title": "no-redeclare", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "og:type": "article", "twitter:title": "no-redeclare", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:title": "no-redeclare", "scrapeId": "f5ab4fb8-02e2-4864-aece-4679008e1b67", "sourceURL": "https://docs.deno.com/lint/rules/no-redeclare", "url": "https://docs.deno.com/lint/rules/no-redeclare/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"no-redeclare\"?\n\nAssistant: Here are the recommended best practices:\n\n• Avoid redeclaring variables, functions, and parameters with the same name to prevent confusion and potential errors.\n• Use `let` and `const` for variable declarations to take advantage of block scope and prevent redeclaration.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/no-redeclare", "title": "no-redeclare", "description": "Disallows redeclaration of variables, functions, parameters with the same name.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:01:36", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "twitter:site": "@deno_land", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "language": "en", "ogLocale": "en_US", "ogTitle": "no-redeclare", "title": "no-redeclare", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "og:type": "article", "twitter:title": "no-redeclare", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "viewport": "width=device-width, initial-scale=1", "og:title": "no-redeclare", "scrapeId": "f5ab4fb8-02e2-4864-aece-4679008e1b67", "sourceURL": "https://docs.deno.com/lint/rules/no-redeclare", "url": "https://docs.deno.com/lint/rules/no-redeclare/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Discord Slash Command\"?\n\nAssistant: This page covers how to create and deploy a hello world Slash Command using Deno Deploy.\n\nHere's a detailed explanation:\n\n\n## Step 1: Create an application on Discord Developer Portal\n1. Go to [https://discord.com/developers/applications](https://discord.com/developers/applications) (login using your discord account if required).\n2. Click on **New Application** button available at left side of your profile picture.\n3. Name your application and click on **Create**.\n4. Go to **Bot** section, click on **Add Bot**, and finally on **Yes, do it!** to confirm.\n\nThat's it. A new application is created which will hold our Slash Command. Don't close the tab as we need information from this application page throughout our development.\n\n## Step 2: Register Slash command with Discord app\nBefore we can write some code, we need to curl a Discord endpoint to register a Slash Command in our app.\n\nFill `BOT_TOKEN` with the token available in the **Bot** section and `CLIENT_ID` with the ID available on the **General Information** section of the page and run the command on your terminal.\n\n```highlight notranslate sh\nBOT_TOKEN='replace_me_with_bot_token'\nCLIENT_ID='replace_me_with_client_id'\ncurl -X POST \\\n-H 'Content-Type: application/json' \\\n-H \"Authorization: Bot $BOT_TOKEN\" \\\n-d '{\"name\":\"hello\",\"description\":\"Greet a person\",\"options\":[{\"name\":\"name\",\"description\":\"The name of the person\",\"type\":3,\"required\":true}]}' \\\n\"https://discord.com/api/v8/applications/$CLIENT_ID/commands\"\n```\n\nThis will register a Slash Command named `hello` that accepts a parameter named `name` of type string.\n\n## Step 3: Create and deploy the hello world Slash Command on Deno Deploy\nNext, we need to create a server to respond to Discord when it makes a POST request with someone's slash command.\n\n1. Navigate to [https://dash.deno.com/new](https://dash.deno.com/new) and click **Play** under the **Playground** card.\n\n2. On the next page, in the editor, click the **Settings** icon on the top menu. In the modal that pops up, select **\\+ Add Variable**.\n\n3. Input `DISCORD_PUBLIC_KEY` as KEY. The VALUE should be the public key available in **General Information** section in the Discord application page.\n\n4. Copy and paste the following code into the editor:\n\n```highlight notranslate ts\n// Sift is a small routing library that abstracts away details like starting a\n// listener on a port, and provides a simple function (serve) that has an API\n// to invoke a function for a specific path.\nimport {\n     json,\n     serve,\n     validateRequest,\n} from \"https://deno.land/x/sift@0.6.0/mod.ts\";\n// TweetNaCl is a cryptography library that we use to verify requests\n// from Discord.\nimport nacl from \"https://esm.sh/tweetnacl@v1.0.3?dts\";\n\n// For all requests to \"/\" endpoint, we want to invoke home() handler.\nserve({\n     \"/\": home,\n});\n\n// The main logic of the Discord Slash Command is defined in this function.\nasync function home(request: Request) {\n     // validateRequest() ensures that a request is of POST method and\n     // has the following headers.\n     const { error } = await validateRequest(request, {\n       POST: {\n         headers: [\"X-Signature-Ed25519\", \"X-Signature-Timestamp\"],\n       },\n     });\n     if (error) {\n       return json({ error: error.message }, { status: error.status });\n     }\n\n     // verifySignature() verifies if the request is coming from Discord.\n     // When the request's signature is not valid, we return a 401 and this is\n     // important as Discord sends invalid requests to test our verification.\n     const { valid, body } = await verifySignature(request);\n     if (!valid) {\n       return json(\n         { error: \"Invalid request\" },\n         {\n           status: 401,\n         },\n       );\n     }\n\n     const { type = 0, data = { options: [] } } = JSON.parse(body);\n     // Discord performs Ping interactions to test our application.\n     // Type 1 in a request implies a Ping interaction.\n     if (type === 1) {\n       return json({\n         type: 1, // Type 1 in a response is a Pong interaction response type.\n       });\n     }\n\n     // Type 2 in a request is an ApplicationCommand interaction.\n     // It implies that a user has issued a command.\n     if (type === 2) {\n       const { value } = data.options.find((option) => option.name === \"name\");\n       return json({\n         // Type 4 responds with the below message retaining the user's\n         // input at the top.\n         type: 4,\n         data: {\n           content: `Hello, ${value}!`,\n         },\n       });\n     }\n\n     // We will return a bad request error as a valid Discord request\n     // shouldn't reach here.\n     return json({ error: \"bad request\" }, { status: 400 });\n}\n\n/** Verify whether the request is coming from Discord. */\nasync function verifySignature(\n     request: Request,\n): Promise<{ valid: boolean; body: string }> {\n     const PUBLIC_KEY = Deno.env.get(\"DISCORD_PUBLIC_KEY\")!;\n     // Discord sends these headers with every request.\n     const signature = request.headers.get(\"X-Signature-Ed25519\")!;\n     const timestamp = request.headers.get(\"X-Signature-Timestamp\")!;\n     const body = await request.text();\n     const valid = nacl.sign.detached.verify(\n       new TextEncoder().encode(timestamp + body),\n       hexToUint8Array(signature),\n       hexToUint8Array(PUBLIC_KEY),\n     );\n\n     return { valid, body };\n}\n\n/** Converts a hexadecimal string to Uint8Array. */\nfunction hexToUint8Array(hex: string) {\n     return new Uint8Array(\n       hex.match(/.{1,2}/g)!.map((val) => parseInt(val, 16)),\n     );\n}\n```\n\n5. Click **Save & Deploy** to deploy the server\n\n6. Note the project URL once the file has been deployed. It will be on the upper right hand side of the editor, and end in `.deno.dev`.\n\n## Step 3: Configure Discord application to use our URL as interactions endpoint URL\n1. Go back to your application (Greeter) page on Discord Developer Portal\n2. Fill **INTERACTIONS ENDPOINT URL** field with the Deno Deploy project URL from above and click on **Save Changes**.\n\nThe application is now ready. Let's proceed to the next section to install it.\n\n## Step 4: Install the Slash Command on your Discord server\nSo to use the `hello` Slash Command, we need to install our Greeter application on our Discord server. Here are the steps:\n\n1. Go to **OAuth2** section of the Discord application page on Discord Developer Portal\n2. Select `applications.commands` scope and click on the **Copy** button below.\n3. Now paste and visit the URL on your browser. Select your server and click on **Authorize**.\n\nOpen Discord, type `/hello Deno Deploy` and press **Enter**. The output will look something like below.\n\n![Hello, Deno Deploy!](https://docs.deno.com/deploy/docs-images/discord-slash-command.png)\n\nCongratulations for completing the tutorial! Go ahead and build some awesome Discord Slash Commands! And do share them with us on **deploy** channel of [the Deno Discord server](https://discord.gg/deno).\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/discord-slash", "title": "Discord Slash Command", "description": "This page covers how to create and deploy a hello world Slash Command using Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:02:32", "type": "overview", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Discord Slash Command", "og:type": "article", "twitter:title": "Discord Slash Command", "title": "Discord Slash Command", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "ogImage": "/img/og.webp", "og:title": "Discord Slash Command", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "4aa66924-2749-4d45-b240-6b377de04856", "sourceURL": "https://docs.deno.com/deploy/tutorials/discord-slash", "url": "https://docs.deno.com/deploy/tutorials/discord-slash/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Discord Slash Command\"?\n\nAssistant: Here are some code examples:\n\n### Register Slash Command with Discord app\n```yaml\nBOT_TOKEN='replace_me_with_bot_token'\nCLIENT_ID='replace_me_with_client_id'\ncurl -X POST \\\n-H 'Content-Type: application/json' \\\n-H \"Authorization: Bot $BOT_TOKEN\" \\\n-d '{\"name\":\"hello\",\"description\":\"Greet a person\",\"options\":[{\"name\":\"name\",\"description\":\"The name of the person\",\"type\":3,\"required\":true}]}' \\\n\"https://discord.com/api/v8/applications/$CLIENT_ID/commands\"\n```\n\n### Create and deploy the hello world Slash Command on Deno Deploy\n```yaml\n// Sift is a small routing library that abstracts away details like starting a\n// listener on a port, and provides a simple function (serve) that has an API\n// to invoke a function for a specific path.\nimport {\n     json,\n     serve,\n     validateRequest,\n} from \"https://deno.land/x/sift@0.6.0/mod.ts\";\n// TweetNaCl is a cryptography library that we use to verify requests\n// from Discord.\nimport nacl from \"https://esm.sh/tweetnacl@v1.0.3?dts\";\n\n// For all requests to \"/\" endpoint, we want to invoke home() handler.\nserve({\n     \"/\": home,\n});\n\n// The main logic of the Discord Slash Command is defined in this function.\nasync function home(request: Request) {\n     // validateRequest() ensures that a request is of POST method and\n     // has the following headers.\n     const { error } = await validateRequest(request, {\n       POST: {\n         headers: [\"X-Signature-Ed25519\", \"X-Signature-Timestamp\"],\n       },\n     });\n     if (error) {\n       return json({ error: error.message }, { status: error.status });\n     }\n\n     // verifySignature() verifies if the request is coming from Discord.\n     // When the request's signature is not valid, we return a 401 and this is\n     // important as Discord sends invalid requests to test our verification.\n     const { valid, body } = await verifySignature(request);\n     if (!valid) {\n       return json(\n         { error: \"Invalid request\" },\n         {\n           status: 401,\n         },\n       );\n     }\n\n     const { type = 0, data = { options: [] } } = JSON.parse(body);\n     // Discord performs Ping interactions to test our application.\n     // Type 1 in a request implies a Ping interaction.\n     if (type === 1) {\n       return json({\n         type: 1, // Type 1 in a response is a Pong interaction response type.\n       });\n     }\n\n     // Type 2 in a request is an ApplicationCommand interaction.\n     // It implies that a user has issued a command.\n     if (type === 2) {\n       const { value } = data.options.find((option) => option.name === \"name\");\n       return json({\n         // Type 4 responds with the below message retaining the user's\n         // input at the top.\n         type: 4,\n         data: {\n           content: `Hello, ${value}!`,\n         },\n       });\n     }\n\n     // We will return a bad request error as a valid Discord request\n     // shouldn't reach here.\n     return json({ error: \"bad request\" }, { status: 400 });\n}\n\n/** Verify whether the request is coming from Discord. */\nasync function verifySignature(\n     request: Request,\n): Promise<{ valid: boolean; body: string }> {\n     const PUBLIC_KEY = Deno.env.get(\"DISCORD_PUBLIC_KEY\")!;\n     // Discord sends these headers with every request.\n     const signature = request.headers.get(\"X-Signature-Ed25519\")!;\n     const timestamp = request.headers.get(\"X-Signature-Timestamp\")!;\n     const body = await request.text();\n     const valid = nacl.sign.detached.verify(\n       new TextEncoder().encode(timestamp + body),\n       hexToUint8Array(signature),\n       hexToUint8Array(PUBLIC_KEY),\n     );\n\n     return { valid, body };\n}\n\n/** Converts a hexadecimal string to Uint8Array. */\nfunction hexToUint8Array(hex: string) {\n     return new Uint8Array(\n       hex.match(/.{1,2}/g)!.map((val) => parseInt(val, 16)),\n     );\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/discord-slash", "title": "Discord Slash Command", "description": "This page covers how to create and deploy a hello world Slash Command using Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:02:32", "type": "code_examples", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Discord Slash Command", "og:type": "article", "twitter:title": "Discord Slash Command", "title": "Discord Slash Command", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "ogImage": "/img/og.webp", "og:title": "Discord Slash Command", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "4aa66924-2749-4d45-b240-6b377de04856", "sourceURL": "https://docs.deno.com/deploy/tutorials/discord-slash", "url": "https://docs.deno.com/deploy/tutorials/discord-slash/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Discord Slash Command\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to keep your Discord application page open during development to reference necessary information.\n• When deploying, ensure that the Deno Deploy project URL is correctly set in the Discord application settings.\n• Test your Slash Command thoroughly to ensure it responds correctly to user inputs.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/discord-slash", "title": "Discord Slash Command", "description": "This page covers how to create and deploy a hello world Slash Command using Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:02:32", "type": "best_practices", "page_metadata": {"og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Discord Slash Command", "og:type": "article", "twitter:title": "Discord Slash Command", "title": "Discord Slash Command", "og:locale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "ogImage": "/img/og.webp", "og:title": "Discord Slash Command", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "ogSiteName": "Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "4aa66924-2749-4d45-b240-6b377de04856", "sourceURL": "https://docs.deno.com/deploy/tutorials/discord-slash", "url": "https://docs.deno.com/deploy/tutorials/discord-slash/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Transactions\"?\n\nAssistant: The Deno KV store utilizes optimistic concurrency control transactions rather than interactive transactions like many SQL systems. This approach employs versionstamps to manage concurrent access to shared resources without using locks.\n\nHere's a detailed explanation:\n\n\n## Transactions Overview\nThe Deno KV store utilizes _optimistic concurrency control transactions_ rather than _interactive transactions_ like many SQL systems like PostgreSQL or MySQL. This approach employs versionstamps, which represent the current version of a value for a given key, to manage concurrent access to shared resources without using locks. When a read operation occurs, the system returns a versionstamp for the associated key in addition to the value.\n\nTo execute a transaction, one performs an atomic operations that can consist of multiple mutation actions (like set or delete). Along with these actions, key+versionstamp pairs are provided as a condition for the transaction's success. The optimistic concurrency control transaction will only commit if the specified versionstamps match the current version for the values in the database for the corresponding keys. This transaction model ensures data consistency and integrity while allowing concurrent interactions within the Deno KV store.\n\nBecause OCC transactions are optimistic, they can fail on commit because the version constraints specified in the atomic operation were violated. This occurs when an agent updates a key used within the transaction between read and commit. When this happens, the agent performing the transaction must retry the transaction.\n\n## Example: transferFunds Function\nTo illustrate how to use OCC transactions with Deno KV, this example shows how to implement a `transferFunds(from: string, to: string, amount: number)` function for an account ledger. The account ledger stores the balance for each account in the key-value store. The keys are prefixed by \"account\", followed by the account identifier: [\"account\", \"alice\"]. The value stored for each key is a number that represents the account balance.\n\nHere's a step-by-step example of implementing this `transferFunds` function:\n\n```highlight notranslate ts\nasync function transferFunds(sender: string, receiver: string, amount: number) {\n  if (amount <= 0) throw new Error(\"Amount must be positive\");\n\n  // Construct the KV keys for the sender and receiver accounts.\n  const senderKey = [\"account\", sender];\n  const receiverKey = [\"account\", receiver];\n\n  // Retry the transaction until it succeeds.\n  let res = { ok: false };\n  while (!res.ok) {\n    // Read the current balance of both accounts.\n    const [senderRes, receiverRes] = await kv.getMany([senderKey, receiverKey]);\n    if (senderRes.value === null) {\n      throw new Error(`Account ${sender} not found`);\n    }\n    if (receiverRes.value === null) {\n      throw new Error(`Account ${receiver} not found`);\n    }\n\n    const senderBalance = senderRes.value;\n    const receiverBalance = receiverRes.value;\n\n    // Ensure the sender has a sufficient balance to complete the transfer.\n    if (senderBalance < amount) {\n      throw new Error(\n        `Insufficient funds to transfer ${amount} from ${sender}`,\n      );\n    }\n\n    // Perform the transfer.\n    const newSenderBalance = senderBalance - amount;\n    const newReceiverBalance = receiverBalance + amount;\n\n    // Attempt to commit the transaction. `res` returns an object with\n    // `ok: false` if the transaction fails to commit due to a check failure\n    // (i.e. the versionstamp for a key has changed)\n    res = await kv.atomic()\n      .check(senderRes) // Ensure the sender's balance hasn't changed.\n      .check(receiverRes) // Ensure the receiver's balance hasn't changed.\n      .set(senderKey, newSenderBalance) // Update the sender's balance.\n      .set(receiverKey, newReceiverBalance) // Update the receiver's balance.\n      .commit();\n  }\n}\n```\n\nIn this example, the `transferFunds` function reads the balances and versionstamps of both accounts, calculates the new balances after the transfer, and checks if there are sufficient funds in account A. It then performs an atomic operation, setting the new balances with the versionstamp constraints. If the transaction is successful, the loop exits. If the version constraints are violated, the transaction fails, and the loop retries the transaction until it succeeds.\n\n## Limits\nIn addition to a max key size of 2 KiB and max value size of 64 KiB, there are certain limits with the Deno KV transaction API:\n\n- **Max keys per `kv.getMany()`**: 10\n- **Max batch size per `kv.list()`**: 1000\n- **Max checks in an atomic operation**: 100\n- **Max mutations in an atomic operation**: 1000\n- **Max total size of an atomic operation**: 800 KiB. This includes all keys and values in checks and mutations, and encoding overhead counts toward this limit as well.\n- **Max total size of keys**: 90 KiB. This includes all keys in checks and mutations, and encoding overhead counts toward this limit as well.\n- **Max watched keys per `kv.watch()`**: 10\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/transactions", "title": "Transactions", "description": "The Deno KV store utilizes optimistic concurrency control transactions rather than interactive transactions like many SQL systems. This approach employs versionstamps to manage concurrent access to shared resources without using locks.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:03:20", "type": "overview", "page_metadata": {"ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Transactions", "twitter:image": "/img/og.webp", "twitter:title": "Transactions", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "title": "Transactions", "og:locale": "en_US", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "language": "en", "twitter:card": "summary_large_image", "og:title": "Transactions", "ogImage": "/img/og.webp", "scrapeId": "a05fc5d5-1e04-479a-83de-a1ac00065ff6", "sourceURL": "https://docs.deno.com/deploy/kv/manual/transactions", "url": "https://docs.deno.com/deploy/kv/manual/transactions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Transactions\"?\n\nAssistant: Here are some code examples:\n\n### transferFunds Function Example\n```yaml\nasync function transferFunds(sender: string, receiver: string, amount: number) {\n  if (amount <= 0) throw new Error(\"Amount must be positive\");\n\n  const senderKey = [\"account\", sender];\n  const receiverKey = [\"account\", receiver];\n\n  let res = { ok: false };\n  while (!res.ok) {\n    const [senderRes, receiverRes] = await kv.getMany([senderKey, receiverKey]);\n    if (senderRes.value === null) {\n      throw new Error(`Account ${sender} not found`);\n    }\n    if (receiverRes.value === null) {\n      throw new Error(`Account ${receiver} not found`);\n    }\n\n    const senderBalance = senderRes.value;\n    const receiverBalance = receiverRes.value;\n\n    if (senderBalance < amount) {\n      throw new Error(`Insufficient funds to transfer ${amount} from ${sender}`);\n    }\n\n    const newSenderBalance = senderBalance - amount;\n    const newReceiverBalance = receiverBalance + amount;\n\n    res = await kv.atomic()\n      .check(senderRes)\n      .check(receiverRes)\n      .set(senderKey, newSenderBalance)\n      .set(receiverKey, newReceiverBalance)\n      .commit();\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/transactions", "title": "Transactions", "description": "The Deno KV store utilizes optimistic concurrency control transactions rather than interactive transactions like many SQL systems. This approach employs versionstamps to manage concurrent access to shared resources without using locks.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:03:20", "type": "code_examples", "page_metadata": {"ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Transactions", "twitter:image": "/img/og.webp", "twitter:title": "Transactions", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "title": "Transactions", "og:locale": "en_US", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "language": "en", "twitter:card": "summary_large_image", "og:title": "Transactions", "ogImage": "/img/og.webp", "scrapeId": "a05fc5d5-1e04-479a-83de-a1ac00065ff6", "sourceURL": "https://docs.deno.com/deploy/kv/manual/transactions", "url": "https://docs.deno.com/deploy/kv/manual/transactions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Transactions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure the amount to be transferred is positive before proceeding with the transaction.\n• Always check for sufficient funds in the sender's account before performing a transfer.\n• Handle potential errors gracefully, such as account not found or insufficient funds.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/transactions", "title": "Transactions", "description": "The Deno KV store utilizes optimistic concurrency control transactions rather than interactive transactions like many SQL systems. This approach employs versionstamps to manage concurrent access to shared resources without using locks.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:03:20", "type": "best_practices", "page_metadata": {"ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Transactions", "twitter:image": "/img/og.webp", "twitter:title": "Transactions", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "title": "Transactions", "og:locale": "en_US", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "og:type": "article", "favicon": "https://docs.deno.com/favicon.ico", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "language": "en", "twitter:card": "summary_large_image", "og:title": "Transactions", "ogImage": "/img/og.webp", "scrapeId": "a05fc5d5-1e04-479a-83de-a1ac00065ff6", "sourceURL": "https://docs.deno.com/deploy/kv/manual/transactions", "url": "https://docs.deno.com/deploy/kv/manual/transactions/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno repl, interactive scripting prompt\"?\n\nAssistant: This page covers the command line usage and options for the Deno REPL (Read-Eval-Print Loop), including various flags, special variables, functions, and keyboard shortcuts.\n\nHere's a detailed explanation:\n\n\n## Command line usage\nStarts a read-eval-print-loop, which lets you interactively build up program state in the global context. It is especially useful for quick prototyping and checking snippets of code.\n\nTypeScript is supported, however it is not type-checked, only transpiled.\n\n## Options\n### `--cert`\nLoad certificate authority from PEM encoded file.\n\n### `--config`\nShort flag: `-c`\n\nConfigure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary.\n\n### `--env-file`\nLoad environment variables from local file. Only the first environment variable with a given key is used. Existing process environment variables are not overwritten, so if variables with the same names already exist in the environment, their values will be preserved. Where multiple declarations for the same environment variable exist in your .env file, the first one encountered is applied. This is determined by the order of the files you pass as arguments.\n\n### `--eval`\nEvaluates the provided code when the REPL starts.\n\n### `--eval-file`\nEvaluates the provided file(s) as scripts when the REPL starts. Accepts file paths and URLs.\n\n### `--location`\nValue of globalThis.location used by some web APIs.\n\n### `--no-config`\nDisable automatic loading of the configuration file.\n\n### `--seed`\nSet the random number generator seed.\n\n### `--v8-flags`\nTo see a list of all available flags use ` --v8-flags=--help`. Flags can also be set via the DENO_V8_FLAGS environment variable. Any flags set with this flag are appended after the DENO_V8_FLAGS environment variable.\n\n## Dependency management options\n### `--cached-only`\nRequire that remote dependencies are already cached.\n\n### `--frozen`\nError out if lockfile is out of date.\n\n### `--import-map`\nLoad import map file from local file or remote URL.\n\n### `--lock`\nCheck the specified lock file. (If value is not provided, defaults to \"./deno.lock\").\n\n### `--no-lock`\nDisable auto discovery of the lock file.\n\n### `--no-npm`\nDo not resolve npm modules.\n\n### `--no-remote`\nDo not resolve remote modules.\n\n### `--node-modules-dir`\nSets the node modules management mode for npm packages.\n\n### `--reload`\nShort flag: `-r`\n\nReload source code cache (recompile TypeScript)\nno value Reload everything\njsr:@std/http/file-server,jsr:@std/assert/assert-equals Reloads specific modules\nnpm: Reload all npm modules\nnpm:chalk Reload specific npm module.\n\n### `--vendor`\nToggles local vendor folder usage for remote modules and a node_modules folder for npm packages.\n\n## Debugging options\n### `--inspect`\nActivate inspector on host:port [default: 127.0.0.1:9229]\n\n### `--inspect-brk`\nActivate inspector on host:port, wait for debugger to connect and break at the start of user script.\n\n### `--inspect-wait`\nActivate inspector on host:port and wait for debugger to connect before running user code.\n\n## Special variables\nThe REPL provides a couple of special variables, that are always available:\n\n| Identifier | Description |\n| --- | --- |\n| _ | Yields the last evaluated expression |\n| _error | Yields the last thrown error |\n\n## Special functions\nThe REPL provides several functions in the global scope:\n\n| Function | Description |\n| --- | --- |\n| clear() | Clears the entire terminal screen |\n| close() | Close the current REPL session |\n\n## `--eval` flag\n`--eval` flag allows you to run some code in the runtime before you are dropped into the REPL. This is useful for importing some code you commonly use in the REPL, or modifying the runtime in some way.\n\n## `--eval-file` flag\n`--eval-file` flag allows you to run code from specified files before you are dropped into the REPL. Like the `--eval` flag, this is useful for importing code you commonly use in the REPL, or modifying the runtime in some way.\n\n## Relative Import Path Resolution\nIf `--eval-file` specifies a code file that contains relative imports, then the runtime will try to resolve the imports relative to the current working directory. It will not try to resolve them relative to the code file's location. This can cause \"Module not found\" errors when `--eval-file` is used with module files.\n\n## Tab completions\nTab completions are crucial feature for quick navigation in REPL. After hitting `tab` key, Deno will now show a list of all possible completions.\n\n## Keyboard shortcuts\n| Keystroke | Action |\n| --- | --- |\n| Ctrl-A, Home | Move cursor to the beginning of line |\n| Ctrl-B, Left | Move cursor one character left |\n| Ctrl-C | Interrupt and cancel the current edit |\n| Ctrl-D | If line _is_ empty, signal end of line |\n| Ctrl-D, Del | If line is _not_ empty, delete character under cursor |\n| Ctrl-E, End | Move cursor to end of line |\n| Ctrl-F, Right | Move cursor one character right |\n| Ctrl-H, Backspace | Delete character before cursor |\n| Ctrl-I, Tab | Next completion |\n| Ctrl-J, Ctrl-M, Enter | Finish the line entry |\n| Ctrl-K | Delete from cursor to end of line |\n| Ctrl-L | Clear screen |\n| Ctrl-N, Down | Next match from history |\n| Ctrl-P, Up | Previous match from history |\n| Ctrl-R | Reverse Search history (Ctrl-S forward, Ctrl-G cancel) |\n| Ctrl-T | Transpose previous character with current character |\n| Ctrl-U | Delete from start of line to cursor |\n| Ctrl-V | Insert any special character without performing its associated action |\n| Ctrl-W | Delete word leading up to cursor (using white space as a word boundary) |\n| Ctrl-X Ctrl-U | Undo |\n| Ctrl-Y | Paste from Yank buffer |\n| Ctrl-Y | Paste from Yank buffer (Meta-Y to paste next yank instead) |\n| Ctrl-Z | Suspend (Unix only) |\n| Ctrl-_ | Undo |\n| Meta-0, 1, ..., - | Specify the digit to the argument. `–` starts a negative argument. |\n| Meta < | Move to first entry in history |\n| Meta > | Move to last entry in history |\n| Meta-B, Alt-Left | Move cursor to previous word |\n| Meta-Backspace | Kill from the start of the current word, or, if between words, to the start of the previous word |\n| Meta-C | Capitalize the current word |\n| Meta-D | Delete forwards one word |\n| Meta-F, Alt-Right | Move cursor to next word |\n| Meta-L | Lower-case the next word |\n| Meta-T | Transpose words |\n| Meta-U | Upper-case the next word |\n| Meta-Y | See Ctrl-Y |\n| Ctrl-S | Insert a new line |\n\n## `DENO_REPL_HISTORY`\nYou can use `DENO_REPL_HISTORY` environmental variable to control where Deno stores the REPL history file. You can set it to an empty value, Deno will not store the history file.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/repl", "title": "deno repl, interactive scripting prompt", "description": "This page covers the command line usage and options for the Deno REPL (Read-Eval-Print Loop), including various flags, special variables, functions, and keyboard shortcuts.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 02:03:51", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "`deno repl`, interactive scripting prompt", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "title": "`deno repl`, interactive scripting prompt", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "language": "en", "og:image": "/img/og.webp", "ogLocale": "en_US", "og:title": "`deno repl`, interactive scripting prompt", "twitter:title": "`deno repl`, interactive scripting prompt", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "30235590-3d2a-4075-86a2-81f29aea2209", "sourceURL": "https://docs.deno.com/runtime/reference/cli/repl", "url": "https://docs.deno.com/runtime/reference/cli/repl/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno repl, interactive scripting prompt\"?\n\nAssistant: Here are some code examples:\n\n### Command line usage example\n```yaml\ndeno repl [OPTIONS] [-- [ARGS]...]\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/repl", "title": "deno repl, interactive scripting prompt", "description": "This page covers the command line usage and options for the Deno REPL (Read-Eval-Print Loop), including various flags, special variables, functions, and keyboard shortcuts.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 02:03:51", "type": "code_examples", "page_metadata": {"ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "`deno repl`, interactive scripting prompt", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "title": "`deno repl`, interactive scripting prompt", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "language": "en", "og:image": "/img/og.webp", "ogLocale": "en_US", "og:title": "`deno repl`, interactive scripting prompt", "twitter:title": "`deno repl`, interactive scripting prompt", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "30235590-3d2a-4075-86a2-81f29aea2209", "sourceURL": "https://docs.deno.com/runtime/reference/cli/repl", "url": "https://docs.deno.com/runtime/reference/cli/repl/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno repl, interactive scripting prompt\"?\n\nAssistant: Here are the recommended best practices:\n\n• TypeScript is supported, however it is not type-checked, only transpiled.\n• Use the `--eval` flag to run code before entering the REPL for common imports.\n• Use the `--eval-file` flag to run code from files before entering the REPL.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/repl", "title": "deno repl, interactive scripting prompt", "description": "This page covers the command line usage and options for the Deno REPL (Read-Eval-Print Loop), including various flags, special variables, functions, and keyboard shortcuts.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-28 02:03:51", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "`deno repl`, interactive scripting prompt", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "title": "`deno repl`, interactive scripting prompt", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "language": "en", "og:image": "/img/og.webp", "ogLocale": "en_US", "og:title": "`deno repl`, interactive scripting prompt", "twitter:title": "`deno repl`, interactive scripting prompt", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "30235590-3d2a-4075-86a2-81f29aea2209", "sourceURL": "https://docs.deno.com/runtime/reference/cli/repl", "url": "https://docs.deno.com/runtime/reference/cli/repl/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"getter-return\"?\n\nAssistant: Requires all property getter functions to return a value.\n\nHere's a detailed explanation:\n\n\n## Enabling the Rule\nEnable full set in `deno.json`:\n\n```\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\nEnable full set using the Deno CLI:\n\n```\ndeno lint --tags=recommended\n```\n\n## Rule Explanation\nGetter functions return the value of a property. If the function returns no value then this contract is broken.\n\n## Examples\n**Invalid:**\n\n```highlight notranslate typescript\nlet foo = {\n  get bar() {},\n};\n\nclass Person {\n  get name() {}\n}\n```\n\n**Valid:**\n\n```highlight notranslate typescript\nlet foo = {\n  get bar() {\n    return true;\n  },\n};\n\nclass Person {\n  get name() {\n    return \"alice\";\n  }\n}\n```\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/getter-return", "title": "getter-return", "description": "Requires all property getter functions to return a value.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:04:06", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:title": "getter-return", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "getter-return", "language": "en", "ogTitle": "getter-return", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "getter-return", "og:site_name": "Deno", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:type": "article", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "1d665129-c8f6-4ba2-a892-f0e1330631f1", "sourceURL": "https://docs.deno.com/lint/rules/getter-return", "url": "https://docs.deno.com/lint/rules/getter-return/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"getter-return\"?\n\nAssistant: Here are some code examples:\n\n### Enabling in deno.json\n```yaml\n{\n  \"lint\": {\n    \"tags\": [\"recommended\"]\n  }\n}\n```\n\n### Enabling via Deno CLI\n```yaml\ndeno lint --tags=recommended\n```\n\n### Invalid Getter Example\n```yaml\nlet foo = {\n  get bar() {},\n};\n\nclass Person {\n  get name() {}\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/getter-return", "title": "getter-return", "description": "Requires all property getter functions to return a value.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:04:06", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:title": "getter-return", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "getter-return", "language": "en", "ogTitle": "getter-return", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "getter-return", "og:site_name": "Deno", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:type": "article", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "1d665129-c8f6-4ba2-a892-f0e1330631f1", "sourceURL": "https://docs.deno.com/lint/rules/getter-return", "url": "https://docs.deno.com/lint/rules/getter-return/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"getter-return\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure all getter functions return a value to comply with the rule.\n", "metadata": {"source_url": "https://docs.deno.com/lint/rules/getter-return", "title": "getter-return", "description": "Requires all property getter functions to return a value.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:04:06", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:title": "getter-return", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "getter-return", "language": "en", "ogTitle": "getter-return", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "getter-return", "og:site_name": "Deno", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:type": "article", "twitter:site": "@deno_land", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "1d665129-c8f6-4ba2-a892-f0e1330631f1", "sourceURL": "https://docs.deno.com/lint/rules/getter-return", "url": "https://docs.deno.com/lint/rules/getter-return/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Backups\"?\n\nAssistant: KV databases hosted on Deno Deploy can be continuously backed up to your own S3-compatible storage buckets. This is in addition to the replication and backups that we internally perform for all data stored in hosted Deno KV databases to ensure high availability and data durability.\n\nHere's a detailed explanation:\n\n\n## Backups\nKV databases hosted on Deno Deploy can be continuously backed up to your own S3-compatible storage buckets. This is in addition to the replication and backups that we internally perform for all data stored in hosted Deno KV databases to ensure high availability and data durability.\n\nThis backup happens continuously with very little lag, enabling _[point-in-time-recovery](https://en.wikipedia.org/wiki/Point-in-time_recovery)_ and live replication. Enabling backup for KV databases unlocks various interesting use-cases:\n\n- Retrieving a consistent snapshot of your data at any point in time in the past\n- Running a read-only data replica independent of Deno Deploy\n- Pushing data into your favorite data pipeline by piping mutations into streaming platforms and analytical databases like Kafka, BigQuery and ClickHouse\n\n## Configuring backup to Amazon S3\nFirst you must create a bucket on AWS:\n\n- AWS Console\n- AWS CLI\n\n1. Go to the [AWS S3 console](https://s3.console.aws.amazon.com/s3/home)\n2. Click \"Create bucket\"\n3. Enter a bucket name and choose a AWS region, then scroll down and click \"Next\"\n\n1. Install the [AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)\n2. Run `aws s3api create-bucket --bucket <bucket-name> --region <region> --create-bucket-configuration LocationConstraint=<region>` (replace `<bucket-name>` and `<region>` with your own values)\n\nThen, create an IAM policy with `PutObject` access to the bucket, attach it to an IAM user, and create access keys for that user:\n\n- AWS Console\n- AWS CLI\n\n01. Go to the [AWS IAM console](https://console.aws.amazon.com/iam/home)\n02. Click \"Policies\" in the left sidebar\n03. Click on \"Create policy\"\n04. Select the \"JSON\" the policy editor and paste the following policy:\n\n```highlight notranslate json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\\\n    {\\\n      \"Sid\": \"KVBackup\",\\\n      \"Effect\": \"Allow\",\\\n      \"Action\": \"s3:PutObject\",\\\n      \"Resource\": \"arn:aws:s3:::<bucket-name>/*\"\\\n    }\\\n  ]\n}\n```\n\nReplace `<bucket-name>` with the name of the bucket you created earlier.\n05. Click \"Review policy\"\n06. Enter a name for the policy and click \"Create policy\"\n07. Click \"Users\" in the left sidebar\n08. Click \"Add user\"\n09. Enter a name for the user and click \"Next\"\n10. Click \"Attach policies directly\"\n11. Search for the policy you created earlier and click the checkbox next to it\n12. Click \"Next\"\n13. Click \"Create user\"\n14. Click on the user you just created\n15. Click \"Security credentials\" and then \"Create access key\"\n16. Select \"Other\", then click \"Next\"\n17. Enter a description for the access key and click \"Create access key\"\n18. Copy the access key ID and secret access key and save them somewhere safe. You will need them later, and you will not be able to retrieve them again.\n\n1. Copy the following command to your terminal, and replace `<bucket-name>` with the name of the bucket you created earlier, then run it:\n\n```\naws iam create-policy --policy-name  --policy-document '{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"KVBackup\",\"Effect\":\"Allow\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::/*\"}]}'\n```\n\n2. Copy the following command to your terminal, and replace `<user-name>` with a name for the user you are creating, then run it:\n\n```\naws iam create-user --user-name\n```\n\n3. Copy the following command to your terminal, and replace `<policy-arn>` with the ARN of the policy you created in step 1, and `<user-name>` with the name of the user you created in the previous step, then run it:\n\n```\naws iam attach-user-policy --policy-arn  --user-name\n```\n\n4. Copy the following command to your terminal, and replace `<user-name>` with the name of the user you created in step 2, then run it:\n\n```\naws iam create-access-key --user-name\n```\n\n5. Copy the access key ID and secret access key and save them somewhere safe. You will need them later, and you will not be able to retrieve them again.\n\nNow visit the [Deno Deploy dashboard](https://dash.deno.com/), and click on the \"KV\" tab in your project. Scroll to the \"Backup\" section, and click on \"AWS S3\". Enter the bucket name, access key ID, and secret access key you created earlier, and the region the bucket is in. Then click \"Save\".\n\n![add backup to dashboard](https://docs.deno.com/deploy/kv/manual/images/backup-add-bucket-to-dash.png)\n\nThe backup will start immediately. Once the data has been backed up, and continuous backup is active, you will see the status change to \"Active\".\n\n## Configuring backup to Google Cloud Storage\nGoogle Cloud Storage (GCS) is compatible with the S3 protocol, and can also be used as a backup target.\n\nFirst you must create a bucket on GCP:\n\n- GCP Console\n- gcloud CLI\n\n1. Go to the [GCP Cloud Storage console](https://console.cloud.google.com/storage/browser)\n2. Click on \"Create\" in the top bar\n3. Enter a bucket name, choose a location, and click \"Create\"\n\n1. Install the [gcloud CLI](https://cloud.google.com/sdk/docs/install)\n2. Run `gcloud storage buckets create <bucket-name> --location <location>` (replace `<bucket-name>` and `<location>` with your own values)\n\nThen, create a service account with `Storage Object Admin` access to the bucket, and create an HMAC access key for the service account:\n\n- GCP Console\n- gcloud CLI\n\n01. Go to the [GCP IAM console](https://console.cloud.google.com/iam-admin/iam)\n02. Click on \"Service accounts\" in the left sidebar\n03. Click on \"Create service account\"\n04. Enter a name for the service account and click \"Done\"\n05. Copy the email for the service account you just created. You will need it later.\n06. Go to the [GCP Cloud Storage console](https://console.cloud.google.com/storage/browser)\n07. Click on the bucket you created earlier\n08. Click on \"Permissions\" in the toolbar\n09. Click \"Grant access\"\n10. Paste the email for the service account you copied earlier into the \"New principals\" field\n11. Select \"Storage Object Admin\" from the \"Select a role\" dropdown\n12. Click \"Save\"\n13. Click on \"Settings\" in the left sidebar (still in the Cloud Storage console)\n14. Click on the \"Interoperability\" tab\n15. Click on \"Create a key for a service account\"\n16. Select the service account you created earlier\n17. Click \"Create key\"\n18. Copy the access key and secret access key and save them somewhere safe. You will need them later, and you will not be able to retrieve them again.\n\n1. Run the following command, replacing `<service-account-name>` with a name for the service account you are creating:\n\n```\ngcloud iam service-accounts create\n```\n\n2. Run the following command, replacing `<bucket-name>` with the name of the bucket you created earlier, and `<service-account-email>` with the email of the service account you created in the previous step:\n\n```\ngsutil iam ch serviceAccount::objectAdmin gs://\n```\n\n3. Run the following command, replacing `<service-account-email>` with the email of the service account you created in the previous step:\n\n```\ngcloud storage hmac create\n```\n\n4. Copy the `accessId` and `secret` and save them somewhere safe. You will need them later, and you will not be able to retrieve them again.\n\nNow visit the [Deno Deploy dashboard](https://dash.deno.com/), and click on the \"KV\" tab in your project. Scroll to the \"Backup\" section, and click on \"Google Cloud Storage\". Enter the bucket name, access key ID, and secret access key you created earlier, and the region the bucket is in. Then click \"Save\".\n\nThe backup will start immediately. Once the data has been backed up, and continuous backup is active, you will see the status change to \"Active\".\n\n## Using backups\nS3 backups can be used with the `denokv` tool. Please refer to the [documentation](https://github.com/denoland/denokv) for more details.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/backup", "title": "Backups", "description": "KV databases hosted on Deno Deploy can be continuously backed up to your own S3-compatible storage buckets. This is in addition to the replication and backups that we internally perform for all data stored in hosted Deno KV databases to ensure high availability and data durability.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:06:02", "type": "overview", "page_metadata": {"ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:card": "summary_large_image", "title": "Backups", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Backups", "og:title": "Backups", "twitter:image": "/img/og.webp", "twitter:title": "Backups", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "d1e2245f-d566-46ed-aaa1-475538e2e69f", "sourceURL": "https://docs.deno.com/deploy/kv/manual/backup", "url": "https://docs.deno.com/deploy/kv/manual/backup/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Backups\"?\n\nAssistant: Here are some code examples:\n\n### Create S3 Bucket\n```yaml\naws s3api create-bucket --bucket <bucket-name> --region <region> --create-bucket-configuration LocationConstraint=<region>\n```\n\n### Create IAM Policy\n```yaml\naws iam create-policy --policy-name  --policy-document '{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"KVBackup\",\"Effect\":\"Allow\",\"Action\":\"s3:PutObject\",\"Resource\":\"arn:aws:s3:::/*\"}]}'\n```\n\n### Create IAM User\n```yaml\naws iam create-user --user-name\n```\n\n### Attach IAM Policy to User\n```yaml\naws iam attach-user-policy --policy-arn  --user-name\n```\n\n### Create Access Key for User\n```yaml\naws iam create-access-key --user-name\n```\n\n### Create GCS Bucket\n```yaml\ngcloud storage buckets create <bucket-name> --location <location>\n```\n\n### Create Service Account\n```yaml\ngcloud iam service-accounts create\n```\n\n### Change IAM Permissions for GCS Bucket\n```yaml\ngsutil iam ch serviceAccount::objectAdmin gs://\n```\n\n### Create HMAC Key for Service Account\n```yaml\ngcloud storage hmac create\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/backup", "title": "Backups", "description": "KV databases hosted on Deno Deploy can be continuously backed up to your own S3-compatible storage buckets. This is in addition to the replication and backups that we internally perform for all data stored in hosted Deno KV databases to ensure high availability and data durability.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:06:02", "type": "code_examples", "page_metadata": {"ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:card": "summary_large_image", "title": "Backups", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Backups", "og:title": "Backups", "twitter:image": "/img/og.webp", "twitter:title": "Backups", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "d1e2245f-d566-46ed-aaa1-475538e2e69f", "sourceURL": "https://docs.deno.com/deploy/kv/manual/backup", "url": "https://docs.deno.com/deploy/kv/manual/backup/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Backups\"?\n\nAssistant: Here are the recommended best practices:\n\n• Save your access key ID and secret access key somewhere safe, as you will not be able to retrieve them again after creation.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/manual/backup", "title": "Backups", "description": "KV databases hosted on Deno Deploy can be continuously backed up to your own S3-compatible storage buckets. This is in addition to the replication and backups that we internally perform for all data stored in hosted Deno KV databases to ensure high availability and data durability.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:06:02", "type": "best_practices", "page_metadata": {"ogImage": "/img/og.webp", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:type": "article", "twitter:card": "summary_large_image", "title": "Backups", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Backups", "og:title": "Backups", "twitter:image": "/img/og.webp", "twitter:title": "Backups", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "d1e2245f-d566-46ed-aaa1-475538e2e69f", "sourceURL": "https://docs.deno.com/deploy/kv/manual/backup", "url": "https://docs.deno.com/deploy/kv/manual/backup/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Edge Cache\"?\n\nAssistant: The Web Cache API is supported on Deno Deploy. The cache is designed to provide microsecond-level read latency, multi-GB/s write throughput and unbounded storage, with the tradeoff of best-effort consistency and durability.\n\nHere's a detailed explanation:\n\n\n## Expiration\nBy default, cached data is persisted for an indefinite period of time. While we periodically scan and delete inactive objects, an object is usually kept in cache for at least 30 days.\n\nEdge Cache understands standard HTTP response headers `Expires` and `Cache-Control`. You can use them to specify an expiration time for every cached object, for example:\n\n```\nExpires: Thu, 22 Aug 2024 01:22:31 GMT\n```\n\nor:\n\n```\nCache-Control: max-age=86400\n```\n\n## Limitations\n- If a response is not constructed from a `Uint8Array` or `string` body, the `Content-Length` header needs to be manually set.\n- Deletion is not yet supported.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/edge-cache", "title": "Edge Cache", "description": "The Web Cache API is supported on Deno Deploy. The cache is designed to provide microsecond-level read latency, multi-GB/s write throughput and unbounded storage, with the tradeoff of best-effort consistency and durability.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:06:18", "type": "overview", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Edge Cache", "ogTitle": "Edge Cache", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:title": "Edge Cache", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:title": "Edge Cache", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7494a31c-68b7-4d43-aaa3-e6e863195b04", "sourceURL": "https://docs.deno.com/deploy/manual/edge-cache", "url": "https://docs.deno.com/deploy/manual/edge-cache/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Edge Cache\"?\n\nAssistant: Here are some code examples:\n\n### Cache Example\n```yaml\nconst cache = await caches.open(\"my-cache\");\n\nDeno.serve(async (req) => {\n  const cached = await cache.match(req);\n  if (cached) {\n    return cached;\n  }\n\n  const res = new Response(\"cached at \" + new Date().toISOString());\n  await cache.put(req, res.clone());\n  return res;\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/edge-cache", "title": "Edge Cache", "description": "The Web Cache API is supported on Deno Deploy. The cache is designed to provide microsecond-level read latency, multi-GB/s write throughput and unbounded storage, with the tradeoff of best-effort consistency and durability.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:06:18", "type": "code_examples", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Edge Cache", "ogTitle": "Edge Cache", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:title": "Edge Cache", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:title": "Edge Cache", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7494a31c-68b7-4d43-aaa3-e6e863195b04", "sourceURL": "https://docs.deno.com/deploy/manual/edge-cache", "url": "https://docs.deno.com/deploy/manual/edge-cache/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Edge Cache\"?\n\nAssistant: Here are the recommended best practices:\n\n• Cached data is stored in the same Deno Deploy region that runs your code.\n• Usually your isolate observes read-after-write (RAW) and write-after-write (WAW) consistency within the same region; however, in rare cases recent writes can be lost, out-of-order or temporarily invisible.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/edge-cache", "title": "Edge Cache", "description": "The Web Cache API is supported on Deno Deploy. The cache is designed to provide microsecond-level read latency, multi-GB/s write throughput and unbounded storage, with the tradeoff of best-effort consistency and durability.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:06:18", "type": "best_practices", "page_metadata": {"og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "title": "Edge Cache", "ogTitle": "Edge Cache", "twitter:card": "summary_large_image", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:title": "Edge Cache", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:title": "Edge Cache", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7494a31c-68b7-4d43-aaa3-e6e863195b04", "sourceURL": "https://docs.deno.com/deploy/manual/edge-cache", "url": "https://docs.deno.com/deploy/manual/edge-cache/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"interfaceImportMeta\"?\n\nAssistant: Deno provides extra properties on `import.meta`. These are included here to ensure that these are still available when using the Deno namespace in conjunction with other type libs, like `dom`.\n\nHere's a detailed explanation:\n\n\n## Properties\n`#url: string`\n\nA string representation of the fully qualified module URL. When the module is loaded locally, the value will be a file URL (e.g. `file:///path/module.ts`).\n\nYou can also parse the string as a URL to determine more information about how the current module was loaded. For example to determine if a module was local or not:\n\n```highlight notranslate ts\nconst url = new URL(import.meta.url);\nif (url.protocol === \"file:\") {\n  console.log(\"this module was loaded locally\");\n}\n```\n\noptional\n\n`#filename: string`\n\nThe absolute path of the current module.\n\nThis property is only provided for local modules (ie. using `file://` URLs).\n\nExample:\n\n```javascript\n// Unix\nconsole.log(import.meta.filename); // /home/alice/my_module.ts\n\n// Windows\nconsole.log(import.meta.filename); // C:\\alice\\my_module.ts\n```\n\noptional\n\n`#dirname: string`\n\nThe absolute path of the directory containing the current module.\n\nThis property is only provided for local modules (ie. using `file://` URLs).\n\n- Example:\n\n```javascript\n// Unix\nconsole.log(import.meta.dirname); // /home/alice\n\n// Windows\nconsole.log(import.meta.dirname); // C:\\alice\n```\n\n`#main: boolean`\n\nA flag that indicates if the current module is the main module that was called when starting the program under Deno.\n\n```highlight notranslate ts\nif (import.meta.main) {\n  // this was loaded as the main module, maybe do some bootstrapping\n}\n```\n\n## Methods\n`#resolve(specifier: string): string`\n\nA function that returns resolved specifier as if it would be imported using `import(specifier)`.\n\n```highlight notranslate ts\nconsole.log(import.meta.resolve(\"./foo.js\"));\n// file:///dev/foo.js\n```\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/ImportMeta", "title": "interfaceImportMeta", "description": "Deno provides extra properties on `import.meta`. These are included here to ensure that these are still available when using the Deno namespace in conjunction with other type libs, like `dom`.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:06:36", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "ImportMeta - Platform - Web documentation", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "twitter:title": "ImportMeta - Platform - Web documentation", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:title": "ImportMeta - Platform - Web documentation", "title": "ImportMeta - Platform - Web documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "scrapeId": "50930eb3-cdb8-4fd3-9a63-0c6996288c9c", "sourceURL": "https://docs.deno.com/api/web/~/ImportMeta", "url": "https://docs.deno.com/api/web/~/ImportMeta", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"interfaceImportMeta\"?\n\nAssistant: Here are some code examples:\n\n### Check if module was loaded locally\n```yaml\nconst url = new URL(import.meta.url);\nif (url.protocol === \"file:\") {\n  console.log(\"this module was loaded locally\");\n}\n```\n\n### Get filename on Unix\n```yaml\nconsole.log(import.meta.filename); // /home/alice/my_module.ts\n```\n\n### Get filename on Windows\n```yaml\nconsole.log(import.meta.filename); // C:\\alice\\my_module.ts\n```\n\n### Get dirname on Unix\n```yaml\nconsole.log(import.meta.dirname); // /home/alice\n```\n\n### Get dirname on Windows\n```yaml\nconsole.log(import.meta.dirname); // C:\\alice\n```\n\n### Check if module is main\n```yaml\nif (import.meta.main) {\n  // this was loaded as the main module, maybe do some bootstrapping\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/ImportMeta", "title": "interfaceImportMeta", "description": "Deno provides extra properties on `import.meta`. These are included here to ensure that these are still available when using the Deno namespace in conjunction with other type libs, like `dom`.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:06:36", "type": "code_examples", "page_metadata": {"twitter:site": "@deno_land", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "ImportMeta - Platform - Web documentation", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "twitter:title": "ImportMeta - Platform - Web documentation", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:title": "ImportMeta - Platform - Web documentation", "title": "ImportMeta - Platform - Web documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "scrapeId": "50930eb3-cdb8-4fd3-9a63-0c6996288c9c", "sourceURL": "https://docs.deno.com/api/web/~/ImportMeta", "url": "https://docs.deno.com/api/web/~/ImportMeta", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"interfaceImportMeta\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `import.meta.url` to determine how the current module was loaded.\n• Utilize `import.meta.filename` and `import.meta.dirname` for local module path information.\n• Check `import.meta.main` to conditionally execute code for the main module.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/ImportMeta", "title": "interfaceImportMeta", "description": "Deno provides extra properties on `import.meta`. These are included here to ensure that these are still available when using the Deno namespace in conjunction with other type libs, like `dom`.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:06:36", "type": "best_practices", "page_metadata": {"twitter:site": "@deno_land", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "ogTitle": "ImportMeta - Platform - Web documentation", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "twitter:title": "ImportMeta - Platform - Web documentation", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:title": "ImportMeta - Platform - Web documentation", "title": "ImportMeta - Platform - Web documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "scrapeId": "50930eb3-cdb8-4fd3-9a63-0c6996288c9c", "sourceURL": "https://docs.deno.com/api/web/~/ImportMeta", "url": "https://docs.deno.com/api/web/~/ImportMeta", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HTTP Headers\"?\n\nAssistant: The Headers interface is part of the Fetch API. It allows you create and manipulate the HTTP headers of request and response resources of fetch().\n\nHere's a detailed explanation:\n\n\n## Constructor\nThe Header() constructor creates a new `Header` instance.\n\n```highlight notranslate ts\nlet headers = new Headers(init);\n```\n\n#### Parameters\n\n| name | type | optional | description |\n| --- | --- | --- | --- |\n| init | `Headers` / `{ [key: string]: string }` | `true` | The init option lets you initialize the headers object with an existing `Headers` or an object literal. |\n\nThe return type of the constructor is a `Headers` instance.\n\n## Methods\n| name | description |\n| --- | --- |\n| `append(name: string, value: string)` | Appends a header (overwrites existing one) to the Headers object. |\n| `delete(name: string)` | Deletes a header from the Headers object. |\n| `set(name: string, value: string)` | Create a new header in the Headers object. |\n| `get(name: string)` | Get the value of the header in the Headers object. |\n| `has(name: string)` | Check if the header exists in the Headers objects. |\n| `entries()` | Get the headers as key-value pair. The result is iterable. |\n| `keys()` | Get all the keys of the Headers object. The result is iterable.\n\n## Example\n```highlight notranslate ts\n// Create a new headers object from an object literal.\nconst myHeaders = new Headers({\n  accept: \"application/json\",\n});\n\n// Append a header to the headers object.\nmyHeaders.append(\"user-agent\", \"Deno Deploy\");\n\n// Print the headers of the headers object.\nfor (const [key, value] of myHeaders.entries()) {\n  console.log(key, value);\n}\n\n// You can pass the headers instance to Response or Request constructors.\nconst request = new Request(\"https://api.github.com/users/denoland\", {\n  method: \"POST\",\n  headers: myHeaders,\n});\n```\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-headers", "title": "HTTP Headers", "description": "The Headers interface is part of the Fetch API. It allows you create and manipulate the HTTP headers of request and response resources of fetch().", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 02:06:58", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogTitle": "HTTP Headers", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "twitter:title": "HTTP Headers", "og:image": "/img/og.webp", "og:title": "HTTP Headers", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "HTTP Headers", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "00cd56e5-e635-4df3-bedb-dadea567dddf", "sourceURL": "https://docs.deno.com/deploy/api/runtime-headers", "url": "https://docs.deno.com/deploy/api/runtime-headers/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HTTP Headers\"?\n\nAssistant: Here are some code examples:\n\n### Constructor Example\n```yaml\nlet headers = new Headers(init);\n```\n\n### Example Usage\n```yaml\n// Create a new headers object from an object literal.\nconst myHeaders = new Headers({\n  accept: \"application/json\",\n});\n\n// Append a header to the headers object.\nmyHeaders.append(\"user-agent\", \"Deno Deploy\");\n\n// Print the headers of the headers object.\nfor (const [key, value] of myHeaders.entries()) {\n  console.log(key, value);\n}\n\n// You can pass the headers instance to Response or Request constructors.\nconst request = new Request(\"https://api.github.com/users/denoland\", {\n  method: \"POST\",\n  headers: myHeaders,\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-headers", "title": "HTTP Headers", "description": "The Headers interface is part of the Fetch API. It allows you create and manipulate the HTTP headers of request and response resources of fetch().", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 02:06:58", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogTitle": "HTTP Headers", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "viewport": "width=device-width, initial-scale=1", "twitter:title": "HTTP Headers", "og:image": "/img/og.webp", "og:title": "HTTP Headers", "ogSiteName": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "HTTP Headers", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "00cd56e5-e635-4df3-bedb-dadea567dddf", "sourceURL": "https://docs.deno.com/deploy/api/runtime-headers", "url": "https://docs.deno.com/deploy/api/runtime-headers/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno File System APIs\"?\n\nAssistant: Deno Deploy supports a limited set of the file system APIs available in Deno. These file system APIs can access static files from your deployments.\n\nHere's a detailed explanation:\n\n\n## File system APIs\nDeno Deploy supports a limited set of the file system APIs available in Deno. These file system APIs can access static files from your deployments. Static files are for example:\n\n- The files in your GitHub repository, if you deploy via the GitHub integration.\n- The entrypoint file in a playground deployment.\n\nThe APIs that are available are:\n\n- [Deno.cwd](https://docs.deno.com/deploy/api/runtime-fs/#deno.cwd)\n- [Deno.readDir](https://docs.deno.com/deploy/api/runtime-fs/#deno.readdir)\n- [Deno.readFile](https://docs.deno.com/deploy/api/runtime-fs/#deno.readfile)\n- [Deno.readTextFile](https://docs.deno.com/deploy/api/runtime-fs/#deno.readtextfile)\n- [Deno.open](https://docs.deno.com/deploy/api/runtime-fs/#deno.open)\n- [Deno.stat](https://docs.deno.com/deploy/api/runtime-fs/#deno.stat)\n- [Deno.lstat](https://docs.deno.com/deploy/api/runtime-fs/#deno.lstat)\n- [Deno.realPath](https://docs.deno.com/deploy/api/runtime-fs/#deno.realpath)\n- [Deno.readLink](https://docs.deno.com/deploy/api/runtime-fs/#deno.readlink)\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-fs", "title": "Deno File System APIs", "description": "Deno Deploy supports a limited set of the file system APIs available in Deno. These file system APIs can access static files from your deployments.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:07:50", "type": "overview", "page_metadata": {"ogTitle": "File system APIs", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "title": "File system APIs", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "og:title": "File system APIs", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "language": "en", "twitter:title": "File system APIs", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "dc9e5329-94a2-4cc3-a437-964571464380", "sourceURL": "https://docs.deno.com/deploy/api/runtime-fs", "url": "https://docs.deno.com/deploy/api/runtime-fs/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno File System APIs\"?\n\nAssistant: Here are some code examples:\n\n### Deno.cwd\n```yaml\n`Deno.cwd()` returns the current working directory of your deployment. It is located at the root of your deployment's root directory. For example, if you deployed via the GitHub integration, the current working directory is the root of your GitHub repository.\n```\n\n### Deno.readDir\n```yaml\n```highlight notranslate ts\nfunction Deno.readDir(path: string | URL): AsyncIterable<DirEntry>\n```\n\nThe path can be a relative or absolute. It can also be a `file:` URL.\n```\n\n### Example for Deno.readDir\n```yaml\n```highlight notranslate js\nasync function handler(_req) {\n  // List the posts in the `blog` directory located at the root\n  // of the repository.\n  const posts = [];\n  for await (const post of Deno.readDir(`./blog`)) {\n    posts.push(post);\n  }\n\n  // Return JSON.\n  return new Response(JSON.stringify(posts, null, 2), {\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n  });\n}\n\nDeno.serve(handler);\n```\n```\n\n### Deno.readFile\n```yaml\n```highlight notranslate ts\nfunction Deno.readFile(path: string | URL): Promise<Uint8Array>\n```\n\nThe path can be a relative or absolute. It can also be a `file:` URL.\n```\n\n### Example for Deno.readFile\n```yaml\n```highlight notranslate js\nasync function handler(_req) {\n  // Let's read the README.md file available at the root\n  // of the repository to explore the available methods.\n\n  // Relative paths are relative to the root of the repository\n  const readmeRelative = await Deno.readFile(\"./README.md\");\n  // Absolute paths.\n  // The content of the repository is available under at Deno.cwd().\n  const readmeAbsolute = await Deno.readFile(`${Deno.cwd()}/README.md`);\n  // File URLs are also supported.\n  const readmeFileUrl = await Deno.readFile(\n    new URL(`file://${Deno.cwd()}/README.md`),\n  );\n\n  // Decode the Uint8Array as string.\n  const readme = new TextDecoder().decode(readmeRelative);\n  return new Response(readme);\n}\n\nDeno.serve(handler);\n```\n```\n\n### Deno.readTextFile\n```yaml\n```highlight notranslate ts\nfunction Deno.readTextFile(path: string | URL): Promise<string>\n```\n```\n\n### Example for Deno.readTextFile\n```yaml\n```highlight notranslate js\nasync function handler(_req) {\n  const readme = await Deno.readTextFile(\"./README.md\");\n  return new Response(readme);\n}\n\nDeno.serve(handler);\n```\n```\n\n### Deno.open\n```yaml\n```highlight notranslate ts\nfunction Deno.open(path: string | URL): Promise<Deno.File>\n```\n```\n\n### Example for Deno.open\n```yaml\n```highlight notranslate js\nasync function handler(_req) {\n  // Open the README.md file available at the root of the repository.\n  const file = await Deno.open(\"./README.md\");\n\n  // Use the `readable` property, which is a `ReadableStream`. This will\n  // automatically close the file handle when the response is done sending.\n  return new Response(file.readable);\n}\n\nDeno.serve(handler);\n```\n```\n\n### Deno.stat\n```yaml\n```highlight notranslate ts\nfunction Deno.stat(path: string | URL): Promise<Deno.FileInfo>\n```\n```\n\n### Example for Deno.stat\n```yaml\n```highlight notranslate js\nasync function handler(_req) {\n  // Get file info of the README.md at the root of the repository.\n  const info = await Deno.stat(\"./README.md\");\n\n  // Get the size of the file in bytes.\n  const size = info.size;\n\n  return new Response(`README.md is ${size} bytes large`);\n}\n\nDeno.serve(handler);\n```\n```\n\n### Deno.lstat\n```yaml\n```highlight notranslate ts\nfunction Deno.lstat(path: string | URL): Promise<Deno.FileInfo>\n```\n```\n\n### Deno.realPath\n```yaml\n```highlight notranslate ts\nfunction Deno.realPath(path: string | URL): Promise<string>\n```\n```\n\n### Example for Deno.realPath\n```yaml\n```highlight notranslate js\nasync function handler(_req) {\n  const path = await Deno.realPath(\"./README.md\");\n\n  return new Response(`The fully resolved path for ./README.md is ${path}`);\n}\n\nDeno.serve(handler);\n```\n```\n\n### Deno.readLink\n```yaml\n```highlight notranslate ts\nfunction Deno.readLink(path: string | URL): Promise<string>\n```\n```\n\n### Example for Deno.readLink\n```yaml\n```highlight notranslate js\nasync function handler(_req) {\n  const path = await Deno.readLink(\"./my_symlink\");\n\n  return new Response(`The target path for ./my_symlink is ${path}`);\n}\n\nDeno.serve(handler);\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-fs", "title": "Deno File System APIs", "description": "Deno Deploy supports a limited set of the file system APIs available in Deno. These file system APIs can access static files from your deployments.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:07:50", "type": "code_examples", "page_metadata": {"ogTitle": "File system APIs", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "title": "File system APIs", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "og:title": "File system APIs", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "language": "en", "twitter:title": "File system APIs", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "dc9e5329-94a2-4cc3-a437-964571464380", "sourceURL": "https://docs.deno.com/deploy/api/runtime-fs", "url": "https://docs.deno.com/deploy/api/runtime-fs/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno File System APIs\"?\n\nAssistant: Here are the recommended best practices:\n\n• To use the Deno.readFile feature, you must link a GitHub repository to your project.\n• The path provided to the Deno.readFile API is relative to the root of the repository. You can also specify absolute paths, if they are inside Deno.cwd.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-fs", "title": "Deno File System APIs", "description": "Deno Deploy supports a limited set of the file system APIs available in Deno. These file system APIs can access static files from your deployments.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:07:50", "type": "best_practices", "page_metadata": {"ogTitle": "File system APIs", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "ogSiteName": "Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "title": "File system APIs", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:site_name": "Deno", "og:title": "File system APIs", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "language": "en", "twitter:title": "File system APIs", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "dc9e5329-94a2-4cc3-a437-964571464380", "sourceURL": "https://docs.deno.com/deploy/api/runtime-fs", "url": "https://docs.deno.com/deploy/api/runtime-fs/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connect to Neon Postgres\"?\n\nAssistant: This tutorial covers how to connect to a Neon Postgres database from an application deployed on Deno Deploy.\n\nHere's a detailed explanation:\n\n\n## Setup Postgres\nTo get started, we need to create a new Postgres instance for us to connect to. For this tutorial, we will be using Neon Postgres as they provide free, managed Postgres instances. If you like to host your database somewhere else, you can do that too.\n\n1. Visit https://neon.tech/ and click **Sign up** to sign up with an email, Github, Google, or partner account. After signing up, you are directed to the Neon Console to create your first project.\n\n2. Enter a name for your project, select a Postgres version, provide a database name, and select a region. Generally, you'll want to select the region closest to your application. When you're finished, click **Create project**.\n\n3. You are presented with the connection string for your new project, which you can use to connect to your database. Save the connection string, which looks something like this:\n\n```highlight notranslate sh\npostgres://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require\n``` \n\nYou will need the connection string in the next step.\n\n## Create a project in Deno Deploy\nNext, let's create a project in Deno Deploy and set it up with the requisite environment variables:\n\n1. Go to https://dash.deno.com/new (Sign in with GitHub if you didn't already) and click on **Create an empty project** under **Deploy your own code**.\n2. Now click on the **Settings** button available on the project page.\n3. Navigate to **Environment Variables** Section and add the following secret.\n\n- `DATABASE_URL` - The value should be set to the connection string you saved in the last step.\n\n## Write code that connects to Postgres\nTo read/write to Postgres using the Neon serverless driver, first install it using the `deno add` command:\n\n```highlight notranslate sh\ndeno add jsr:@neon/serverless\n```\n\nThis will create or update your `deno.json` file with the dependency:\n\n```highlight notranslate json\n{\n  \"imports\": {\n    \"@neon/serverless\": \"jsr:@neon/serverless@^0.10.1\"\n  }\n}\n```\n\nNow you can use the driver in your code:\n\n```highlight notranslate ts\nimport { neon } from \"@neon/serverless\";\n\n// Get the connection string from the environment variable \"DATABASE_URL\"\nconst databaseUrl = Deno.env.get(\"DATABASE_URL\")!;\n\n// Create a SQL query executor\nconst sql = neon(databaseUrl);\n\ntry {\n  // Create the table\n  await sql`\n    CREATE TABLE IF NOT EXISTS todos (\n      id SERIAL PRIMARY KEY,\n      title TEXT NOT NULL\n    )\n  `;\n} catch (error) {\n  console.error(error);\n}\n```\n\n## Deploy application to Deno Deploy\nOnce you have finished writing your application, you can deploy it on Deno Deploy.\n\nTo do this, go back to your project page at https://dash.deno.com/projects/<project-name>.\n\nYou should see a couple of options to deploy:\n\n- [Github integration](https://docs.deno.com/deploy/manual/ci_github)\n- [`deployctl`](https://docs.deno.com/deploy/manual/deployctl/)\n\n```highlight notranslate sh\ndeployctl deploy --project=<project-name> <application-file-name>\n```\n\nUnless you want to add a build step, we recommend that you select the GitHub integration.\n\nFor more details on the different ways to deploy on Deno Deploy and the different configuration options, read [here](https://docs.deno.com/deploy/manual/how-to-deploy).\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/neon-postgres", "title": "Connect to Neon Postgres", "description": "This tutorial covers how to connect to a Neon Postgres database from an application deployed on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:08:14", "type": "overview", "page_metadata": {"og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "title": "Connect to Neon Postgres", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogLocale": "en_US", "language": "en", "twitter:title": "Connect to Neon Postgres", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "ogTitle": "Connect to Neon Postgres", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Connect to Neon Postgres", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "08e15ad9-c876-4ae6-a5be-6506e9cb0402", "sourceURL": "https://docs.deno.com/deploy/manual/neon-postgres", "url": "https://docs.deno.com/deploy/manual/neon-postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connect to Neon Postgres\"?\n\nAssistant: Here are some code examples:\n\n### Postgres Connection String Example\n```yaml\npostgres://alex:AbC123dEf@ep-cool-darkness-123456.us-east-2.aws.neon.tech/dbname?sslmode=require\n```\n\n### Deno Add Command\n```yaml\ndeno add jsr:@neon/serverless\n```\n\n### Deno JSON Configuration\n```yaml\n{\n  \"imports\": {\n    \"@neon/serverless\": \"jsr:@neon/serverless@^0.10.1\"\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/neon-postgres", "title": "Connect to Neon Postgres", "description": "This tutorial covers how to connect to a Neon Postgres database from an application deployed on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:08:14", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "title": "Connect to Neon Postgres", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogLocale": "en_US", "language": "en", "twitter:title": "Connect to Neon Postgres", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "ogTitle": "Connect to Neon Postgres", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Connect to Neon Postgres", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "08e15ad9-c876-4ae6-a5be-6506e9cb0402", "sourceURL": "https://docs.deno.com/deploy/manual/neon-postgres", "url": "https://docs.deno.com/deploy/manual/neon-postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connect to Neon Postgres\"?\n\nAssistant: Here are the recommended best practices:\n\n• Select the region closest to your application when creating a Postgres instance.\n• Use GitHub integration for deploying unless a build step is needed.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/neon-postgres", "title": "Connect to Neon Postgres", "description": "This tutorial covers how to connect to a Neon Postgres database from an application deployed on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:08:14", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "title": "Connect to Neon Postgres", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "ogLocale": "en_US", "language": "en", "twitter:title": "Connect to Neon Postgres", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "ogTitle": "Connect to Neon Postgres", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Connect to Neon Postgres", "favicon": "https://docs.deno.com/favicon.ico", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:type": "article", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "08e15ad9-c876-4ae6-a5be-6506e9cb0402", "sourceURL": "https://docs.deno.com/deploy/manual/neon-postgres", "url": "https://docs.deno.com/deploy/manual/neon-postgres/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: The `node:inspector/promises` module provides an API for interacting with the V8 inspector.\n\nHere's a detailed explanation:\n\n\n## Classes\nThe `inspector.Session` is used for dispatching messages to the V8 inspector back-end and receiving message responses and notifications.\n\n- [addListener](https://docs.deno.com/api/node/inspector/promises/~/Session#method_addlistener_0)\n- [connect](https://docs.deno.com/api/node/inspector/promises/~/Session#method_connect_0)\n- [connectToMainThread](https://docs.deno.com/api/node/inspector/promises/~/Session#method_connecttomainthread_0)\n- [disconnect](https://docs.deno.com/api/node/inspector/promises/~/Session#method_disconnect_0)\n- [emit](https://docs.deno.com/api/node/inspector/promises/~/Session#method_emit_0)\n- [on](https://docs.deno.com/api/node/inspector/promises/~/Session#method_on_0)\n- [once](https://docs.deno.com/api/node/inspector/promises/~/Session#method_once_0)\n- [post](https://docs.deno.com/api/node/inspector/promises/~/Session#method_post_0)\n- [prependListener](https://docs.deno.com/api/node/inspector/promises/~/Session#method_prependlistener_0)\n- [prependOnceListener](https://docs.deno.com/api/node/inspector/promises/~/Session#method_prependoncelistener_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/node/inspector/promises", "title": "Usage in Deno", "description": "The `node:inspector/promises` module provides an API for interacting with the V8 inspector.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:09:05", "type": "overview", "page_metadata": {"twitter:site": "@deno_land", "ogTitle": "inspector/promises - Node documentation", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "inspector/promises - Node documentation", "twitter:title": "inspector/promises - Node documentation", "og:type": "article", "twitter:card": "summary_large_image", "title": "inspector/promises - Node documentation", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "scrapeId": "89abf8f5-84f2-4b7a-ab50-78fe56561212", "sourceURL": "https://docs.deno.com/api/node/inspector/promises", "url": "https://docs.deno.com/api/node/inspector/promises/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the Module\n```yaml\nimport * as mod from \"node:inspector/promises\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/inspector/promises", "title": "Usage in Deno", "description": "The `node:inspector/promises` module provides an API for interacting with the V8 inspector.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:09:05", "type": "code_examples", "page_metadata": {"twitter:site": "@deno_land", "ogTitle": "inspector/promises - Node documentation", "viewport": "width=device-width, initial-scale=1", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "inspector/promises - Node documentation", "twitter:title": "inspector/promises - Node documentation", "og:type": "article", "twitter:card": "summary_large_image", "title": "inspector/promises - Node documentation", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "scrapeId": "89abf8f5-84f2-4b7a-ab50-78fe56561212", "sourceURL": "https://docs.deno.com/api/node/inspector/promises", "url": "https://docs.deno.com/api/node/inspector/promises/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Custom domains\"?\n\nAssistant: Instructions on how to add and configure custom domains in Deno Deploy.\n\nHere's a detailed explanation:\n\n\n## Step 1: Add your custom domain in the Deno Deploy dashboard\n1. Click the \"Settings\" button on the project page, then select \"Domains\" from the sidebar.\n\n2. Enter the domain name you wish to add to the project and press \"Add.\" Note that you must own the domain that you want to add to a project. If you do not own a domain yet, you can register one at a domain registrar like Google Domains, Namecheap, or gandi.net.\n\n3. The domain is added to the domains list and will have a \"setup\" badge.\n\n4. Click on the \"setup\" badge to visit the domain setup page, which will display the list of DNS records that need to be created/updated for your domain.\n\n## Step 2: Update your custom domain's DNS records\nGo to the DNS configuration panel of your domain registrar (or the service you're using to manage DNS) and enter the records as described on the domain setup page.\n\n## Step 3: Validate that the DNS records have been updated\nGo back to the Deno Deploy dashboard and click the **Validate** button on the domain setup page. It will check if the DNS records are correctly set and if so, update the status to \"Validated, awaiting certificate provisioning.\"\n\n## Step 4: Provision a certificate for your custom domain\nAt this point you have two options. 99% of the time, you should choose the first option.\n\n1. Let us automatically provision a certificate using Let's Encrypt.\n\nTo do this, press the **Get automatic certificates** button. Provisioning a TLS certificate can take up to a minute. It is possible that the provisioning fails if your domain specifies a CAA record that prevents Let's Encrypt from provisioning certificates. Certificates will be automatically renewed around 30 days before the certificate expires. When you have been issued certificates successfully, you will see a green checkmark like this:\n\n2. Manually upload a certificate and private key.\n\nTo manually upload a certificate chain and private key, press the **Upload your own certificates** button. You will be prompted to upload a certificate chain and private key. The certificate chain needs to be complete and valid, and your leaf certificate needs to be at the top of the chain.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/custom-domains", "title": "Custom domains", "description": "Instructions on how to add and configure custom domains in Deno Deploy.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:09:21", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://docs.deno.com/favicon.ico", "og:title": "Custom domains", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "title": "Custom domains", "ogLocale": "en_US", "twitter:title": "Custom domains", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogTitle": "Custom domains", "scrapeId": "e40561a9-531a-4c38-b0e4-6d871fcf4cdf", "sourceURL": "https://docs.deno.com/deploy/manual/custom-domains", "url": "https://docs.deno.com/deploy/manual/custom-domains/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Custom domains\"?\n\nAssistant: Here are the recommended best practices:\n\n• You must own the domain that you want to add to a project.\n• Provisioning a TLS certificate can take up to a minute.\n• Certificates will be automatically renewed around 30 days before the certificate expires.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/manual/custom-domains", "title": "Custom domains", "description": "Instructions on how to add and configure custom domains in Deno Deploy.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:09:21", "type": "best_practices", "page_metadata": {"language": "en", "favicon": "https://docs.deno.com/favicon.ico", "og:title": "Custom domains", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "title": "Custom domains", "ogLocale": "en_US", "twitter:title": "Custom domains", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:site_name": "Deno", "ogTitle": "Custom domains", "scrapeId": "e40561a9-531a-4c38-b0e4-6d871fcf4cdf", "sourceURL": "https://docs.deno.com/deploy/manual/custom-domains", "url": "https://docs.deno.com/deploy/manual/custom-domains/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HTTP requests (fetch)\"?\n\nAssistant: The Fetch API allows you to make outbound HTTP requests in Deno Deploy. It is a web standard and has the following interfaces: fetch(), Request, Response, and Headers.\n\nHere's a detailed explanation:\n\n\n## fetch()\nThe fetch() method initiates a network request to the provided resource and returns a promise that resolves after the response is available.\n\n```highlight notranslate ts\nfunction fetch(\n  resource: Request | string,\n  init?: RequestInit,\n): Promise<Response>;\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-fetch", "title": "HTTP requests (fetch)", "description": "The Fetch API allows you to make outbound HTTP requests in Deno Deploy. It is a web standard and has the following interfaces: fetch(), Request, Response, and Headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:09:40", "type": "overview", "page_metadata": {"title": "HTTP requests (fetch)", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "HTTP requests (fetch)", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:title": "HTTP requests (fetch)", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:title": "HTTP requests (fetch)", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "scrapeId": "384358a3-f063-4cf4-be31-e79f394cf03d", "sourceURL": "https://docs.deno.com/deploy/api/runtime-fetch", "url": "https://docs.deno.com/deploy/api/runtime-fetch/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HTTP requests (fetch)\"?\n\nAssistant: Here are some code examples:\n\n### Fetch Example\n```yaml\nasync function handler(req: Request): Promise<Response> {\n  const resp = await fetch(\"https://api.github.com/users/denoland\", {\n    // The init object here has an headers object containing a\n    // header that indicates what type of response we accept.\n    // We're not specifying the method field since by default\n    // fetch makes a GET request.\n    headers: {\n      accept: \"application/json\",\n    },\n  });\n  return new Response(resp.body, {\n    status: resp.status,\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n  });\n}\n\nDeno.serve(handler);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-fetch", "title": "HTTP requests (fetch)", "description": "The Fetch API allows you to make outbound HTTP requests in Deno Deploy. It is a web standard and has the following interfaces: fetch(), Request, Response, and Headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:09:40", "type": "code_examples", "page_metadata": {"title": "HTTP requests (fetch)", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "HTTP requests (fetch)", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:title": "HTTP requests (fetch)", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:title": "HTTP requests (fetch)", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "scrapeId": "384358a3-f063-4cf4-be31-e79f394cf03d", "sourceURL": "https://docs.deno.com/deploy/api/runtime-fetch", "url": "https://docs.deno.com/deploy/api/runtime-fetch/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"HTTP requests (fetch)\"?\n\nAssistant: Here are the recommended best practices:\n\n• Fetch supports fetching from file URLs to retrieve static files. For more info on static files, see the filesystem API documentation.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-fetch", "title": "HTTP requests (fetch)", "description": "The Fetch API allows you to make outbound HTTP requests in Deno Deploy. It is a web standard and has the following interfaces: fetch(), Request, Response, and Headers.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:09:40", "type": "best_practices", "page_metadata": {"title": "HTTP requests (fetch)", "favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "HTTP requests (fetch)", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "twitter:title": "HTTP requests (fetch)", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:site_name": "Deno", "og:title": "HTTP requests (fetch)", "ogLocale": "en_US", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "scrapeId": "384358a3-f063-4cf4-be31-e79f394cf03d", "sourceURL": "https://docs.deno.com/deploy/api/runtime-fetch", "url": "https://docs.deno.com/deploy/api/runtime-fetch/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"interfaceRequestInit\"?\n\nAssistant: This interface defines the properties for initializing a request in web APIs.\n\nHere's a detailed explanation:\n\n\n## Properties\nThe following properties can be used to configure a request:\n\n- **body**: A BodyInit object or null to set request's body.\n- **cache**: A string indicating how the request will interact with the browser's cache to set request's cache.\n- **credentials**: A string indicating whether credentials will be sent with the request (always, never, or only when sent to a same-origin URL). Sets request's credentials.\n- **headers**: A Headers object, an object literal, or an array of two-item arrays to set request's headers.\n- **integrity**: A cryptographic hash of the resource to be fetched by request. Sets request's integrity.\n- **keepalive**: A boolean to set request's keepalive.\n- **method**: A string to set request's method.\n- **mode**: A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.\n- **redirect**: A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\n- **referrer**: A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer.\n- **referrerPolicy**: A referrer policy to set request's referrerPolicy.\n- **signal**: An AbortSignal to set request's signal.\n- **window**: Can only be null. Used to disassociate request from any Window.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/RequestInit", "title": "interfaceRequestInit", "description": "This interface defines the properties for initializing a request in web APIs.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:10:04", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "title": "RequestInit - Fetch - Web documentation", "language": "en", "twitter:title": "RequestInit - Fetch - Web documentation", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "og:type": "article", "twitter:site": "@deno_land", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "RequestInit - Fetch - Web documentation", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "RequestInit - Fetch - Web documentation", "scrapeId": "bf09f0cc-d5a3-4c1f-b87f-f59ecf1eb647", "sourceURL": "https://docs.deno.com/api/web/~/RequestInit", "url": "https://docs.deno.com/api/web/~/RequestInit", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"interfaceURLSearchParams\"?\n\nAssistant: This documentation covers the properties and methods of the URLSearchParams interface, which is used to work with the query string of a URL.\n\nHere's a detailed explanation:\n\n\n## Properties\n### Properties\n\n- `#size: number`\n\nContains the number of search parameters.\n\n## Methods\n### Methods\n\n- `#append(name: string, value: string): void`\n\nAppends a specified key/value pair as a new search parameter.\n\n```typescript\nlet searchParams = new URLSearchParams();\nsearchParams.append('name', 'first');\nsearchParams.append('name', 'second');\n```\n\n- `#delete(name: string, value?: string): void`\n\nDeletes search parameters that match a name, and optional value, from the list of all search parameters.\n\n```typescript\nlet searchParams = new URLSearchParams([['name', 'value']]);\nsearchParams.delete('name');\nsearchParams.delete('name', 'value');\n```\n\n- `#getAll(name: string): string[]`\n\nReturns all the values associated with a given search parameter as an array.\n\n```typescript\nsearchParams.getAll('name');\n```\n\n- `#get(name: string): string | null`\n\nReturns the first value associated to the given search parameter.\n\n```typescript\nsearchParams.get('name');\n```\n\n- `#has(name: string, value?: string): boolean`\n\nReturns a boolean value indicating if a given parameter, or parameter and value pair, exists.\n\n```typescript\nsearchParams.has('name');\nsearchParams.has('name', 'value');\n```\n\n- `#set(name: string, value: string): void`\n\nSets the value associated with a given search parameter to the given value. If there were several matching values, this method deletes the others. If the search parameter doesn't exist, this method creates it.\n\n```typescript\nsearchParams.set('name', 'value');\n```\n\n- `#sort(): void`\n\nSort all key/value pairs contained in this object in place and return undefined. The sort order is according to Unicode code points of the keys.\n\n```typescript\nsearchParams.sort();\n```\n\n- `#forEach(callbackfn: (value: string, key: string, parent: this) => void, thisArg?: any): void`\n\nCalls a function for each element contained in this object in place and return undefined. Optionally accepts an object to use as this when executing callback as second argument.\n\n```typescript\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nparams.forEach((value, key, parent) => {\n  console.log(value, key, parent);\n});\n```\n\n- `#keys(): URLSearchParamsIterator<string>`\n\nReturns an iterator allowing to go through all keys contained in this object.\n\n```typescript\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nfor (const key of params.keys()) {\n  console.log(key);\n}\n```\n\n- `#values(): URLSearchParamsIterator<string>`\n\nReturns an iterator allowing to go through all values contained in this object.\n\n```typescript\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nfor (const value of params.values()) {\n  console.log(value);\n}\n```\n\n- `#entries(): URLSearchParamsIterator<[string, string]>`\n\nReturns an iterator allowing to go through all key/value pairs contained in this object.\n\n```typescript\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nfor (const [key, value] of params.entries()) {\n  console.log(key, value);\n}\n```\n\n- `#[[Symbol.iterator]](): URLSearchParamsIterator<[string, string]>`\n\nReturns an iterator allowing to go through all key/value pairs contained in this object.\n\n```typescript\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nfor (const [key, value] of params) {\n  console.log(key, value);\n}\n```\n\n- `#toString(): string`\n\nReturns a query string suitable for use in a URL.\n\n```typescript\nsearchParams.toString();\n```\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/URLSearchParams", "title": "interfaceURLSearchParams", "description": "This documentation covers the properties and methods of the URLSearchParams interface, which is used to work with the query string of a URL.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:10:32", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "URLSearchParams - URL - Web documentation", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "URLSearchParams - URL - Web documentation", "twitter:title": "URLSearchParams - URL - Web documentation", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image": "/img/og.webp", "language": "en", "og:site_name": "Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:title": "URLSearchParams - URL - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "ca0fe8d8-903d-40e7-b8bf-11969dbbc218", "sourceURL": "https://docs.deno.com/api/web/~/URLSearchParams", "url": "https://docs.deno.com/api/web/~/URLSearchParams", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"interfaceURLSearchParams\"?\n\nAssistant: Here are some code examples:\n\n### Append Method Example\n```yaml\nlet searchParams = new URLSearchParams();\nsearchParams.append('name', 'first');\nsearchParams.append('name', 'second');\n```\n\n### Delete Method Example\n```yaml\nlet searchParams = new URLSearchParams([['name', 'value']]);\nsearchParams.delete('name');\nsearchParams.delete('name', 'value');\n```\n\n### Get All Method Example\n```yaml\nsearchParams.getAll('name');\n```\n\n### Get Method Example\n```yaml\nsearchParams.get('name');\n```\n\n### Has Method Example\n```yaml\nsearchParams.has('name');\nsearchParams.has('name', 'value');\n```\n\n### Set Method Example\n```yaml\nsearchParams.set('name', 'value');\n```\n\n### Sort Method Example\n```yaml\nsearchParams.sort();\n```\n\n### ForEach Method Example\n```yaml\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nparams.forEach((value, key, parent) => {\n  console.log(value, key, parent);\n});\n```\n\n### Keys Method Example\n```yaml\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nfor (const key of params.keys()) {\n  console.log(key);\n}\n```\n\n### Values Method Example\n```yaml\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nfor (const value of params.values()) {\n  console.log(value);\n}\n```\n\n### Entries Method Example\n```yaml\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nfor (const [key, value] of params.entries()) {\n  console.log(key, value);\n}\n```\n\n### Symbol Iterator Method Example\n```yaml\nconst params = new URLSearchParams([['a', 'b'], ['c', 'd']]);\nfor (const [key, value] of params) {\n  console.log(key, value);\n}\n```\n\n### ToString Method Example\n```yaml\nsearchParams.toString();\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/URLSearchParams", "title": "interfaceURLSearchParams", "description": "This documentation covers the properties and methods of the URLSearchParams interface, which is used to work with the query string of a URL.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:10:32", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "URLSearchParams - URL - Web documentation", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "URLSearchParams - URL - Web documentation", "twitter:title": "URLSearchParams - URL - Web documentation", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image": "/img/og.webp", "language": "en", "og:site_name": "Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:title": "URLSearchParams - URL - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "ca0fe8d8-903d-40e7-b8bf-11969dbbc218", "sourceURL": "https://docs.deno.com/api/web/~/URLSearchParams", "url": "https://docs.deno.com/api/web/~/URLSearchParams", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"interfaceURLSearchParams\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `append` method to add multiple values for the same key.\n• Always check if a parameter exists using the `has` method before trying to retrieve it.\n• Use `set` to ensure only one value exists for a key, as it will overwrite existing values.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/URLSearchParams", "title": "interfaceURLSearchParams", "description": "This documentation covers the properties and methods of the URLSearchParams interface, which is used to work with the query string of a URL.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 02:10:32", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "URLSearchParams - URL - Web documentation", "twitter:card": "summary_large_image", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "URLSearchParams - URL - Web documentation", "twitter:title": "URLSearchParams - URL - Web documentation", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:image": "/img/og.webp", "language": "en", "og:site_name": "Deno", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "og:title": "URLSearchParams - URL - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "ca0fe8d8-903d-40e7-b8bf-11969dbbc218", "sourceURL": "https://docs.deno.com/api/web/~/URLSearchParams", "url": "https://docs.deno.com/api/web/~/URLSearchParams", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Offload webhook processing to a queue\"?\n\nAssistant: This page explains how to offload processing of async tasks in web applications to a queue, specifically when handling webhook requests for a GitHub repository.\n\nHere's a detailed explanation:\n\n\n## Try in a playground\n✏️ Check out the this playground, which implements a GitHub repo webhook handler. Using Deno Deploy playgrounds, you can instantly deploy your own GitHub webhook handler that uses both queues and Deno KV. We'll walk through what this code does in a moment.\n\n## Configuring GitHub webhooks for a repository\nTo try out the webhook you just launched in a playground, set up a new webhook configuration for a GitHub repository you control. You can find webhook configuration under \"Settings\" for your repository. ![configure a github webhook](https://docs.deno.com/deploy/kv/tutorials/images/github_webhook.png)\n\n## Code walkthrough\nOur webhook handler function is relatively simple - without comments, it's only 23 lines of code total. It connects to a Deno KV database, sets up a queue listener to process incoming messages, and sets up a simple server with Deno.serve which responds to incoming webhook requests. Read along with the comments below to see what's happening at each step.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/tutorials/webhook_processor", "title": "Offload webhook processing to a queue", "description": "This page explains how to offload processing of async tasks in web applications to a queue, specifically when handling webhook requests for a GitHub repository.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:10:56", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Offload webhook processing to a queue", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "Offload webhook processing to a queue", "twitter:site": "@deno_land", "ogTitle": "Offload webhook processing to a queue", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:title": "Offload webhook processing to a queue", "ogLocale": "en_US", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "f872b24d-fe97-451d-a9c6-da4b282d6f5c", "sourceURL": "https://docs.deno.com/deploy/kv/tutorials/webhook_processor", "url": "https://docs.deno.com/deploy/kv/tutorials/webhook_processor/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Offload webhook processing to a queue\"?\n\nAssistant: Here are some code examples:\n\n### Webhook Handler Code\n```yaml\n// Get a handle for a Deno KV database instance. KV is built in to the Deno\n// runtime, and is available with zero config both locally and on Deno Deploy\nconst kv = await Deno.openKv();\n\n// Set up a listener that will handle work that is offloaded from our server.\n// In this case, it's just going to add incoming webhook payloads to a KV\n// database, with a timestamp.\nkv.listenQueue(async (message) => {\n  await kv.set([\"github\", Date.now()], message);\n});\n\n// This is a simple HTTP server that will handle incoming POST requests from\n// GitHub webhooks.\nDeno.serve(async (req: Request) => {\n  if (req.method === \"POST\") {\n    // GitHub sends webhook requests as POST requests to your server. You can\n    // configure GitHub to send JSON in the POST body, which you can then parse\n    // from the request object.\n    const payload = await req.json();\n    await kv.enqueue(payload);\n    return new Response(\"\", { status: 200 });\n  } else {\n    // If the server is handling a GET request, this will just list out all the\n    // webhook events that have been recorded in our KV database.\n    const iter = kv.list<string>({ prefix: [\"github\"] });\n    const github = [];\n    for await (const res of iter) {\n      github.push({\n        timestamp: res.key[1],\n        payload: res.value,\n      });\n    }\n    return new Response(JSON.stringify(github, null, 2));\n  }\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/tutorials/webhook_processor", "title": "Offload webhook processing to a queue", "description": "This page explains how to offload processing of async tasks in web applications to a queue, specifically when handling webhook requests for a GitHub repository.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:10:56", "type": "code_examples", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Offload webhook processing to a queue", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "Offload webhook processing to a queue", "twitter:site": "@deno_land", "ogTitle": "Offload webhook processing to a queue", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:title": "Offload webhook processing to a queue", "ogLocale": "en_US", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "f872b24d-fe97-451d-a9c6-da4b282d6f5c", "sourceURL": "https://docs.deno.com/deploy/kv/tutorials/webhook_processor", "url": "https://docs.deno.com/deploy/kv/tutorials/webhook_processor/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Offload webhook processing to a queue\"?\n\nAssistant: Here are the recommended best practices:\n\n• Offload processing of async tasks to a queue to keep your web app fast and responsive.\n• Configure GitHub webhooks under the repository settings to test the webhook handler.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/tutorials/webhook_processor", "title": "Offload webhook processing to a queue", "description": "This page explains how to offload processing of async tasks in web applications to a queue, specifically when handling webhook requests for a GitHub repository.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:10:56", "type": "best_practices", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Offload webhook processing to a queue", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "Offload webhook processing to a queue", "twitter:site": "@deno_land", "ogTitle": "Offload webhook processing to a queue", "viewport": "width=device-width, initial-scale=1", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:title": "Offload webhook processing to a queue", "ogLocale": "en_US", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "f872b24d-fe97-451d-a9c6-da4b282d6f5c", "sourceURL": "https://docs.deno.com/deploy/kv/tutorials/webhook_processor", "url": "https://docs.deno.com/deploy/kv/tutorials/webhook_processor/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"API server with FaunaDB\"?\n\nAssistant: FaunaDB calls itself \"The data API for modern applications\". It's a database with a GraphQL interface that enables you to use GraphQL to interact with it. Since we communicate with it using HTTP requests, we don't need to manage connections which suits very well for serverless applications. The tutorial assumes that you have FaunaDB and Deno Deploy accounts, Deno Deploy CLI installed, and some basic knowledge of GraphQL.\n\nHere's a detailed explanation:\n\n\n## Overview\nIn this tutorial, let's build a small quotes API with endpoints to insert and retrieve quotes. And later use FaunaDB to persist the quotes. Let's start by defining the API endpoints.\n\n## Build the API Endpoints\nFirst, create a file named `quotes.ts` and paste the following content. Read through the comments in the code to understand what's happening.\n\n## Use FaunaDB for Persistence\nLet's define our database schema using GraphQL Schema. Fauna has a graphql endpoint for its database, and it generates essential mutations like create, update, delete for a data type defined in the schema. For example, fauna will generate a mutation named `createQuote` to create a new quote in the database for the data type `Quote`. And we're additionally defining a query field named `allQuotes` that returns all the quotes in the database.\n\n## Deploy the API\nNow that we have everything in place, let's deploy your new API! In your browser, visit Deno Deploy and link your GitHub account. Select the repository which contains your new API. You can give your project a name or allow Deno to generate one for you. Select `index.ts` in the Entrypoint dropdown. Click **Deploy Project**.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-faunadb", "title": "API server with FaunaDB", "description": "FaunaDB calls itself \"The data API for modern applications\". It's a database with a GraphQL interface that enables you to use GraphQL to interact with it. Since we communicate with it using HTTP requests, we don't need to manage connections which suits very well for serverless applications. The tutorial assumes that you have FaunaDB and Deno Deploy accounts, Deno Deploy CLI installed, and some basic knowledge of GraphQL.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:11:33", "type": "overview", "page_metadata": {"title": "API server with FaunaDB", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:title": "API server with FaunaDB", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "API server with FaunaDB", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "language": "en", "ogSiteName": "Deno", "twitter:title": "API server with FaunaDB", "scrapeId": "9d3e68ce-19a3-4fa0-9823-a13f9a0963b1", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-faunadb", "url": "https://docs.deno.com/deploy/tutorials/tutorial-faunadb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"API server with FaunaDB\"?\n\nAssistant: Here are some code examples:\n\n### API Endpoints Definition\n```yaml\n# A POST request to the endpoint should insert the quote to the list.\nPOST /quotes/\n# Body of the request.\n{\n  \"quote\": \"Don't judge each day by the harvest you reap but by the seeds that you plant.\",\n  \"author\": \"Robert Louis Stevenson\"\n}\n\n# A GET request to the endpoint should return all the quotes from the database.\nGET /quotes/\n# Response of the request.\n{\n  \"quotes\": [\\\n    {\\\n      \"quote\": \"Don't judge each day by the harvest you reap but by the seeds that you plant.\",\\\n      \"author\": \"Robert Louis Stevenson\"\\\n    }\\\n  ]\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-faunadb", "title": "API server with FaunaDB", "description": "FaunaDB calls itself \"The data API for modern applications\". It's a database with a GraphQL interface that enables you to use GraphQL to interact with it. Since we communicate with it using HTTP requests, we don't need to manage connections which suits very well for serverless applications. The tutorial assumes that you have FaunaDB and Deno Deploy accounts, Deno Deploy CLI installed, and some basic knowledge of GraphQL.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:11:33", "type": "code_examples", "page_metadata": {"title": "API server with FaunaDB", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:title": "API server with FaunaDB", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "API server with FaunaDB", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "language": "en", "ogSiteName": "Deno", "twitter:title": "API server with FaunaDB", "scrapeId": "9d3e68ce-19a3-4fa0-9823-a13f9a0963b1", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-faunadb", "url": "https://docs.deno.com/deploy/tutorials/tutorial-faunadb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"API server with FaunaDB\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to validate requests to ensure they meet the expected schema.\n• Use environment variables to store sensitive information like database secrets.\n• Test your API endpoints using tools like curl to ensure they are functioning as expected.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-faunadb", "title": "API server with FaunaDB", "description": "FaunaDB calls itself \"The data API for modern applications\". It's a database with a GraphQL interface that enables you to use GraphQL to interact with it. Since we communicate with it using HTTP requests, we don't need to manage connections which suits very well for serverless applications. The tutorial assumes that you have FaunaDB and Deno Deploy accounts, Deno Deploy CLI installed, and some basic knowledge of GraphQL.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:11:33", "type": "best_practices", "page_metadata": {"title": "API server with FaunaDB", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:title": "API server with FaunaDB", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "API server with FaunaDB", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "language": "en", "ogSiteName": "Deno", "twitter:title": "API server with FaunaDB", "scrapeId": "9d3e68ce-19a3-4fa0-9823-a13f9a0963b1", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-faunadb", "url": "https://docs.deno.com/deploy/tutorials/tutorial-faunadb/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno outdated\"?\n\nAssistant: Find and update outdated dependencies in Deno.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno outdated [OPTIONS] [filters]...\n```\n\nFind and update outdated dependencies.\nBy default, outdated dependencies are only displayed.\n\nDisplay outdated dependencies:\n\n```\ndeno outdated\n```\n\n```\ndeno outdated --compatible\n```\n\nUpdate dependencies to latest semver compatible versions:\n\n```\ndeno outdated --update\n```\n\nUpdate dependencies to latest versions, ignoring semver requirements:\n\n```\ndeno outdated --update --latest\n```\n\nFilters can be used to select which packages to act on. Filters can include wildcards (*) to match multiple packages.\n\n```\ndeno outdated --update --latest \"@std/*\"\n```\n\n```\ndeno outdated --update --latest \"react*\"\n```\n\nNote that filters act on their aliases configured in deno.json / package.json, not the actual package names:\nGiven \"foobar\": \"npm:react@17.0.0\" in deno.json or package.json, the filter \"foobar\" would update npm:react to the latest version.\n\n```\ndeno outdated --update --latest foobar\n```\n\nFilters can be combined, and negative filters can be used to exclude results:\n\n```\ndeno outdated --update --latest \"@std/*\" \"!@std/fmt*\"\n```\n\nSpecific version requirements to update to can be specified:\n\n```\ndeno outdated --update @std/fmt@^1.0.2\n``\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/outdated", "title": "deno outdated", "description": "Find and update outdated dependencies in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:11:55", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogSiteName": "Deno", "ogTitle": "deno outdated", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:title": "deno outdated", "og:image": "/img/og.webp", "title": "deno outdated", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "deno outdated", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "922c19a4-d182-4775-9fec-23b177d08fe7", "sourceURL": "https://docs.deno.com/runtime/reference/cli/outdated", "url": "https://docs.deno.com/runtime/reference/cli/outdated/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno outdated\"?\n\nAssistant: Here are some code examples:\n\n### Display outdated dependencies\n```yaml\ndeno outdated\n```\n\n### Display outdated dependencies with compatible flag\n```yaml\ndeno outdated --compatible\n```\n\n### Update dependencies to latest semver compatible versions\n```yaml\ndeno outdated --update\n```\n\n### Update dependencies to latest versions, ignoring semver requirements\n```yaml\ndeno outdated --update --latest\n```\n\n### Update specific packages with filters\n```yaml\ndeno outdated --update --latest \"@std/*\"\n```\n\n### Update specific packages with filters\n```yaml\ndeno outdated --update --latest \"react*\"\n```\n\n### Update specific package by alias\n```yaml\ndeno outdated --update --latest foobar\n```\n\n### Combine filters and exclude results\n```yaml\ndeno outdated --update --latest \"@std/*\" \"!@std/fmt*\"\n```\n\n### Update to specific version\n```yaml\ndeno outdated --update @std/fmt@^1.0.2\n```\n\n### Check for outdated dependencies\n```yaml\ndeno outdated\n```\n\n### Check for outdated dependencies with compatible flag\n```yaml\ndeno outdated --compatible\n```\n\n### Update dependencies\n```yaml\ndeno outdated --update\n```\n\n### Update to latest versions\n```yaml\ndeno outdated --update --latest\n```\n\n### Select specific package to update\n```yaml\ndeno outdated --update --latest chalk\n```\n\n### Update all packages with scope except one\n```yaml\ndeno outdated --update --latest \"@std/*\" \"!@std/fmt\"\n```\n\n### Update specific versions of packages\n```yaml\ndeno outdated --update chalk@5.2 @std/async@1.0.6\n```\n\n### Check outdated dependencies in workspace\n```yaml\ndeno outdated\n```\n\n### Include all workspace members\n```yaml\ndeno outdated --recursive\n```\n\n### Update all workspace members\n```yaml\ndeno outdated --update --latest -r\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/outdated", "title": "deno outdated", "description": "Find and update outdated dependencies in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:11:55", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogSiteName": "Deno", "ogTitle": "deno outdated", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:title": "deno outdated", "og:image": "/img/og.webp", "title": "deno outdated", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "deno outdated", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "922c19a4-d182-4775-9fec-23b177d08fe7", "sourceURL": "https://docs.deno.com/runtime/reference/cli/outdated", "url": "https://docs.deno.com/runtime/reference/cli/outdated/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno outdated\"?\n\nAssistant: Here are the recommended best practices:\n\n• Filters can include wildcards (*) to match multiple packages.\n• When using wildcards, surround the argument in quotes to prevent shell expansion.\n• Filters act on their aliases configured in deno.json / package.json, not the actual package names.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/outdated", "title": "deno outdated", "description": "Find and update outdated dependencies in Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:11:55", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogSiteName": "Deno", "ogTitle": "deno outdated", "viewport": "width=device-width, initial-scale=1", "favicon": "https://docs.deno.com/favicon.ico", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "twitter:title": "deno outdated", "og:image": "/img/og.webp", "title": "deno outdated", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "deno outdated", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogLocale": "en_US", "twitter:card": "summary_large_image", "scrapeId": "922c19a4-d182-4775-9fec-23b177d08fe7", "sourceURL": "https://docs.deno.com/runtime/reference/cli/outdated", "url": "https://docs.deno.com/runtime/reference/cli/outdated/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deploy a static site\"?\n\nAssistant: This tutorial will cover how to deploy a static site (no JavaScript) on Deno Deploy.\n\nHere's a detailed explanation:\n\n\n## Step 1: Create the static site\n```highlight notranslate sh\nmkdir static-site\ncd static-site\ntouch index.html\n```\n\nInside your `index.html`, paste the following html:\n\n```highlight notranslate html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello</title>\n  </head>\n  <body>\n    <h1>Hello</h1>\n    <img src=\"image.png\" alt=\"image\" />\n  </body>\n</html>\n```\n\nMake sure that there a `image.png` inside `static-site`.\n\nYou have now a html page that says \"Hello\" and has a logo.\n\n## Step 2: Deploy the static site using `deployctl`\nTo deploy this repo on Deno Deploy, from the `static-site` repository, run:\n\n```highlight notranslate console\ndeployctl deploy --project= --entrypoint=jsr:@std/http/file-server\n```\n\nTo give a little more explanation of these commands: Because this is a static site, there is no JavaScript to execute. Instead of giving Deno Deploy a particular JavaScript or TypeScript file to run as the entrypoint file, you give it this external `file_server.ts` program, which simply uploads all the static files in the `static-site` repo, including the image and the html page, to Deno Deploy. These static assets are then served up.\n\n## Step 3: Voila!\nYour static site should now be live! Its url will be output in the terminal, or you can manage your new static site project in your [Deno dashboard](https://dash.deno.com/projects/). If you click through to your new project you will be able to view the site, configure its name, environment variables, custom domains and more.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/static-site", "title": "Deploy a static site", "description": "This tutorial will cover how to deploy a static site (no JavaScript) on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:12:07", "type": "overview", "page_metadata": {"og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Deploy a static site", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogTitle": "Deploy a static site", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:title": "Deploy a static site", "twitter:image": "/img/og.webp", "og:title": "Deploy a static site", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "scrapeId": "398ca9e8-06aa-4b00-9183-125842d3fc37", "sourceURL": "https://docs.deno.com/deploy/tutorials/static-site", "url": "https://docs.deno.com/deploy/tutorials/static-site/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deploy a static site\"?\n\nAssistant: Here are some code examples:\n\n### Create the static site\n```yaml\n```highlight notranslate sh\nmkdir static-site\ncd static-site\ntouch index.html\n```\n```\n\n### HTML content for index.html\n```yaml\n```highlight notranslate html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello</title>\n  </head>\n  <body>\n    <h1>Hello</h1>\n    <img src=\"image.png\" alt=\"image\" />\n  </body>\n</html>\n```\n```\n\n### Deploy the static site using deployctl\n```yaml\n```highlight notranslate console\ndeployctl deploy --project= --entrypoint=jsr:@std/http/file-server\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/static-site", "title": "Deploy a static site", "description": "This tutorial will cover how to deploy a static site (no JavaScript) on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:12:07", "type": "code_examples", "page_metadata": {"og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Deploy a static site", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogTitle": "Deploy a static site", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:title": "Deploy a static site", "twitter:image": "/img/og.webp", "og:title": "Deploy a static site", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "scrapeId": "398ca9e8-06aa-4b00-9183-125842d3fc37", "sourceURL": "https://docs.deno.com/deploy/tutorials/static-site", "url": "https://docs.deno.com/deploy/tutorials/static-site/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deploy a static site\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure that there is an image.png inside the static-site directory.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/static-site", "title": "Deploy a static site", "description": "This tutorial will cover how to deploy a static site (no JavaScript) on Deno Deploy.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:12:07", "type": "best_practices", "page_metadata": {"og:type": "article", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "title": "Deploy a static site", "og:site_name": "Deno", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogTitle": "Deploy a static site", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "twitter:title": "Deploy a static site", "twitter:image": "/img/og.webp", "og:title": "Deploy a static site", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "scrapeId": "398ca9e8-06aa-4b00-9183-125842d3fc37", "sourceURL": "https://docs.deno.com/deploy/tutorials/static-site", "url": "https://docs.deno.com/deploy/tutorials/static-site/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"interfaceStorage\"?\n\nAssistant: This Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.\n\nHere's a detailed explanation:\n\n\n## Index Signatures\n[name: string]: any\n\n## Properties\nreadonly\n\n#length: number\n\nReturns the number of key/value pairs currently present in the list associated with the object.\n\n## Methods\n#clear(): void\n\nEmpties the list associated with the object of all key/value pairs, if there are any.\n\n#getItem(key: string): string | null\n\nReturns the current value associated with the given key, or null if the given key does not exist in the list associated with the object.\n\n#key(index: number): string | null\n\nReturns the name of the nth key in the list, or null if n is greater than or equal to the number of key/value pairs in the object.\n\n#removeItem(key: string): void\n\nRemoves the key/value pair with the given key from the list associated with the object, if a key/value pair with the given key exists.\n\n#setItem(key: string, value: string): void\n\nSets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n\nThrows a \"QuotaExceededError\" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/Storage", "title": "interfaceStorage", "description": "This Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:13:14", "type": "overview", "page_metadata": {"ogSiteName": "Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "twitter:title": "Storage - Storage - Web documentation", "og:site_name": "Deno", "title": "Storage - Storage - Web documentation", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Storage - Storage - Web documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:title": "Storage - Storage - Web documentation", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "02422cfb-aeb6-4bd8-be85-20a8b62b27dd", "sourceURL": "https://docs.deno.com/api/web/~/Storage", "url": "https://docs.deno.com/api/web/~/Storage", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"interfaceStorage\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to handle exceptions such as QuotaExceededError when setting items in storage.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/~/Storage", "title": "interfaceStorage", "description": "This Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-28 02:13:14", "type": "best_practices", "page_metadata": {"ogSiteName": "Deno", "twitter:site": "@deno_land", "ogLocale": "en_US", "twitter:title": "Storage - Storage - Web documentation", "og:site_name": "Deno", "title": "Storage - Storage - Web documentation", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Storage - Storage - Web documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:locale": "en_US", "og:title": "Storage - Storage - Web documentation", "og:type": "article", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "02422cfb-aeb6-4bd8-be85-20a8b62b27dd", "sourceURL": "https://docs.deno.com/api/web/~/Storage", "url": "https://docs.deno.com/api/web/~/Storage", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"HTTP Request\"?\n\nAssistant: The Request interface is part of the Fetch API and represents the request of fetch().\n\nHere's a detailed explanation:\n\n\n## Constructor\nThe Request() constructor creates a new Request instance.\n\n```highlight notranslate ts\nlet request = new Request(resource, init);\n```\n\n\n## Parameters\n| name | type | optional | description |\n| --- | --- | --- | --- |\n| resource | `Request` or `USVString` | `false` | The resource can either be a request object or a URL string. |\n| init | [`RequestInit`](https://docs.deno.com/deploy/api/runtime-request/#requestinit) | `true` | The init object lets you set optional parameters to apply to the request. |\n\nThe return type is a `Request` instance.\n\n## RequestInit\n| name | type | default | description |\n| --- | --- | --- | --- |\n| [`method`](https://developer.mozilla.org/en-US/docs/Web/API/Request/method) | `string` | `GET` | The method of the request. |\n| [`headers`](https://developer.mozilla.org/en-US/docs/Web/API/Request/headers) | `Headers` or `{ [key: string]: string }` | none | The Headers for the request. |\n| [`body`](https://developer.mozilla.org/en-US/docs/Web/API/Body/body) | `Blob`, `BufferSource`, `FormData`, `URLSearchParams`, `USVString`, or `ReadableStream` | none | The body of the request. |\n| [`cache`](https://developer.mozilla.org/en-US/docs/Web/API/Request/cache) | `string` | none | The cache mode of the request. |\n| [`credentials`](https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials) | `string` | `same-origin` | The credentials mode of the request. |\n| [`integrity`](https://developer.mozilla.org/en-US/docs/Web/API/Request/integrity) | `string` | none | The cryptographic hash of the request's body. |\n| [`mode`](https://developer.mozilla.org/en-US/docs/Web/API/Request/mode) | `string` | `cors` | The request mode you want to use. |\n| [`redirect`](https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect) | `string` | `follow` | The mode of how redirects are handled. |\n| [`referrer`](https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer) | `string` | `about:client` | A `USVString` specifying `no-referrer`, `client` or a URL. |\n\n## Properties\n| name | type | description |\n| --- | --- | --- |\n| [`cache`](https://developer.mozilla.org/en-US/docs/Web/API/Request/cache) | `string` | The cache mode indicates how the ( `default`, `no-cache`, etc) request should be cached by browser. |\n| [`credentials`](https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials) | `string` | The credentials ( `omit`, `same-origin`, etc) indicate whether user agent should send cookies in case of CORs of the request. |\n| [`destination`](https://developer.mozilla.org/en-us/docs/web/api/request/destination) | [`RequestDestination`](https://developer.mozilla.org/en-US/docs/Web/API/RequestDestination) | The string indicates the type of content being requested. |\n| [`body`](https://developer.mozilla.org/en-US/docs/Web/API/Body/body) | [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) | The getter exposes a `ReadableStream` of the body contents. |\n| [`bodyUsed`](https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed) | `boolean` | Indicates whether the body content is read. |\n| [`url`](https://developer.mozilla.org/en-US/docs/Web/API/Request/url) | `USVString` | The URL of the request. |\n| [`headers`](https://developer.mozilla.org/en-US/docs/Web/API/Request/headers) | [`Headers`](https://docs.deno.com/deploy/api/runtime-headers) | The headers associated with the request. |\n| [`integrity`](https://developer.mozilla.org/en-US/docs/Web/API/Request/integrity) | `string` | The cryptographic hash of the request's body. |\n| [`method`](https://developer.mozilla.org/en-US/docs/Web/API/Request/method) | `string` | The request's method ( `POST`, `GET`, etc). |\n| [`mode`](https://developer.mozilla.org/en-US/docs/Web/API/Request/mode) | `string` | Indicates the mode of the request (e.g. `cors` ). |\n| [`redirect`](https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect) | `string` | The mode of how redirects are handled. |\n| [`referrer`](https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer) | `string` | The referrer of the request. |\n| [`referrerPolicy`](https://developer.mozilla.org/en-US/docs/Web/API/Request/referrerpolicy) | `string` | The referrer policy of the request |\n\nAll the above properties are read only.\n\n## Methods\n| name | description |\n| --- | --- |\n| [`arrayBuffer()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer) | Reads the body stream to its completion and returns an `ArrayBuffer` object. |\n| [`blob()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/blob) | Reads the body stream to its completion and returns a `Blob` object. |\n| [`formData()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/formdata) | Reads the body stream to its completion and returns a `FormData` object. |\n| [`json()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/json) | Reads the body stream to its completion, parses it as JSON and returns a JavaScript object. |\n| [`text()`](https://developer.mozilla.org/en-US/docs/Web/API/Body/text) | Reads the body stream to its completion and returns a USVString object (text). |\n| [`clone()`](https://developer.mozilla.org/en-US/docs/Web/API/Request/clone) | Clones the Request object.\n\n## Example\n```highlight notranslate ts\nfunction handler(_req) {\n  // Create a post request\n  const request = new Request(\"https://post.deno.dev\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      message: \"Hello world!\",\n    }),\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n  });\n\n  console.log(request.method); // POST\n  console.log(request.headers.get(\"content-type\")); // application/json\n\n  return fetch(request);\n}\n\nDeno.serve(handler);\n```\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-request", "title": "HTTP Request", "description": "The Request interface is part of the Fetch API and represents the request of fetch().", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-02-28 02:13:47", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:title": "HTTP Request", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogLocale": "en_US", "ogTitle": "HTTP Request", "og:type": "article", "twitter:title": "HTTP Request", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "HTTP Request", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "247d46bf-089a-4a0b-b695-848113159f0e", "sourceURL": "https://docs.deno.com/deploy/api/runtime-request", "url": "https://docs.deno.com/deploy/api/runtime-request/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"HTTP Request\"?\n\nAssistant: Here are some code examples:\n\n### Constructor Example\n```yaml\nlet request = new Request(resource, init);\n```\n\n### Example of Creating a POST Request\n```yaml\nfunction handler(_req) {\n  // Create a post request\n  const request = new Request(\"https://post.deno.dev\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      message: \"Hello world!\",\n    }),\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n  });\n\n  console.log(request.method); // POST\n  console.log(request.headers.get(\"content-type\")); // application/json\n\n  return fetch(request);\n}\n\nDeno.serve(handler);\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/api/runtime-request", "title": "HTTP Request", "description": "The Request interface is part of the Fetch API and represents the request of fetch().", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-02-28 02:13:47", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "og:title": "HTTP Request", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogLocale": "en_US", "ogTitle": "HTTP Request", "og:type": "article", "twitter:title": "HTTP Request", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "HTTP Request", "ogImage": "/img/og.webp", "twitter:image": "/img/og.webp", "scrapeId": "247d46bf-089a-4a0b-b695-848113159f0e", "sourceURL": "https://docs.deno.com/deploy/api/runtime-request", "url": "https://docs.deno.com/deploy/api/runtime-request/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Jupyter Kernel for Deno\"?\n\nAssistant: Deno ships with a built-in Jupyter kernel that allows you to write JavaScript and TypeScript; use Web and Deno APIs and import `npm` packages straight in your interactive notebooks.\n\nHere's a detailed explanation:\n\n\n## Quickstart\nRun `deno jupyter --unstable` and follow the instructions.\n\nYou can run `deno jupyter --unstable --install` to force installation of the kernel. Deno assumes that `jupyter` command is available in your `PATH`.\n\nAfter completing the installation process, the Deno kernel will be available in the notebook creation dialog in JupyterLab and the classic notebook:\n\n![Jupyter notebook kernel selection](https://docs.deno.com/runtime/reference/images/jupyter_notebook.png)\n\nYou can use the Deno Jupyter kernel in any editor that supports Jupyter notebooks.\n\n## VS Code\n- Install the [VSCode Jupyter extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter)\n- Open or create a notebook file by opening the Command Palette (Ctrl+Shift+P) and selecting \"Create: New Jupyter Notebook\". This can be done manually by creating a file with the \".ipynb\" file extension.\n- When on a new or existing Notebook, click creating a new Jupyter Notebook select \"Jupyter kernels\" and then select Deno\n\n![Selecting Deno in VS Code](https://github.com/denoland/deno-docs/assets/836375/32f0ccc3-35f7-47e5-84f4-17c20a5b5732)\n\n## JetBrains IDEs\nJupyter Notebooks are available right out of the box.\n\n## Rich content output\n`Deno.jupyter` namespaces provides helper function for displaying rich content in your notebooks [using MIME types that Jupyter supports](https://docs.jupyter.org/en/latest/reference/mimetype.html).\n\n* * *\n\nThe easiest way to provide a rich output is to return an object that that has a `[Symbol.for(\"Jupyter.display\")]` method.\n\nThis method should return a dictionary mapping a MIME type to a value that should be displayed.\n\n```highlight notranslate ts\n{\n  [Symbol.for(\"Jupyter.display\")]() {\n    return {\n      // Plain text content\n      \"text/plain\": \"Hello world!\",\n\n      // HTML output\n      \"text/html\": \"<h1>Hello world!</h1>\",\n    }\n  }\n}\n```\n\n_Example of an object that returns plain text and HTML output._\n\nInfo\n\nYou can also use `Deno.jupyter.$display` instead of typing `Symbol.for(\"Jupyter.display\")`\n\nThis is a regular function, so you you can use any library you want to format the output - eg. use `@std/fmt/colors` to provide a colorful output:\n\n```highlight notranslate ts\nimport * as colors from \"jsr:@std/fmt/colors\";\n\n{\n  [Deno.jupyter.$display]() {\n    return {\n      \"text/plain\": colors.green(\"Hello world\"),\n    }\n  }\n}\n```\n\nYou can also use `Deno.jupyter.display` function to directly display the MIME bundle:\n\n```highlight notranslate js\nawait Deno.jupyter.display({\n  \"text/plain\": \"Hello, world!\",\n  \"text/html\": \"<h1>Hello, world!</h1>\",\n  \"text/markdown\": \"# Hello, world!\",\n}, { raw: true });\n```\n\n![ API example](https://docs.deno.com/runtime/reference/images/jupyter-display.png)\n\nYour notebook frontend will automatically select the \"richest\" MIME type to display based on its capabilities.\n\n* * *\n\n`Deno.jupyter` provides several helper methods for rich output of common media types.\n\n`Deno.jupyter.html` is a tagged template that will render the provided string as an HTML in the notebook.\n\n```highlight notranslate js\nDeno.jupyter.html`<h1>Hello, world!</h1>\n<h2>From Deno kernel</h2>\n<p>Lorem ipsum <i>dolor</i> <b>sit</b> <u>amet</u></p>`;\n```\n\n![ API example](https://docs.deno.com/runtime/reference/images/jupyter-html.png)\n\n`Deno.jupyter.md` is a tagged template that will render provided string as a Markdown document in the notebook.\n\n```highlight notranslate js\nDeno.jupyter\n  .md`# Notebooks in TypeScript via Deno ![Deno logo](https://github.com/denoland.png?size=32)\n\n**Interactive compute with Jupyter _built into Deno_!**`;\n```\n\n![ API example](https://docs.deno.com/runtime/reference/images/jupyter-md.png)\n\n`Deno.jupyter.svg` is a tagged template that will render provided string as an SVG figure in the notebook.\n\n```highlight notranslate js\nDeno.jupyter.svg`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n      <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n    </svg>`;\n```\n\n![ API example](https://docs.deno.com/runtime/reference/images/jupyter-svg.png)\n\n`Deno.jupyter.image` is function that will render a JPG or PNG image. You can pass a filepath, or already read bytes:\n\n```highlight notranslate js\nDeno.jupyter.image(\"./cat.jpg\");\n\nconst data = Deno.readFileSync(\"./dog.png\");\nDeno.jupyter.image(data);\n```\n\n## prompt and confirm APIs\nYou can use `prompt` and `confirm` Web APIs to wait for user input in your notebook.\n\nconfirm and prompt APIs example\n\n## IO pub channel broadcasting\n`Deno.jupyter.broadcast` allows to publish messages to the IO pub channel allowing to provide live updates as the cell is evaluated.\n\nConsider this example that prints a message before we start a computation and another when the computation is finished:\n\n```highlight notranslate js\nawait Deno.jupyter.broadcast(\"display_data\", {\n  data: { \"text/html\": \"<b>Processing...</b>\" },\n  metadata: {},\n  transient: { display_id: \"progress\" },\n});\n\n// Pretend we're doing an expensive compute\nawait new Promise((resolve) => setTimeout(resolve, 1500));\n\nawait Deno.jupyter.broadcast(\"update_display_data\", {\n  data: { \"text/html\": \"<b>Done</b>\" },\n  metadata: {},\n  transient: { display_id: \"progress\" },\n});\n```\n\n## Examples\nHere's an example of using `@observablehq/plot` to generate a chart:\n\n```highlight notranslate ts\nimport { document, penguins } from \"jsr:@ry/jupyter-helper\";\nimport * as Plot from \"npm:@observablehq/plot\";\n\nlet p = await penguins();\n\nPlot.plot({\n  marks: [\\\n    Plot.dot(p.toRecords(), {\\\n      x: \"culmen_depth_mm\",\\\n      y: \"culmen_length_mm\",\\\n      fill: \"species\",\\\n    }),\\\n  ],\n  document,\n});\n```\n\n![Example plot generated using  library](https://docs.deno.com/runtime/reference/images/jupyter-plot.png)\n\nSee [https://github.com/rgbkrk/denotebooks](https://github.com/rgbkrk/denotebooks) for more advanced examples leveraging data analysis and visualisation libraries like Polars, Observable and d3.\n\n## jupyter console integration\nYou can also use Deno Jupyter kernel in the `jupyter console` REPL. To do that, you should launch your console with `jupyter console --kernel deno`.\n\n![Using the Deno kernel in a CLI](https://docs.deno.com/runtime/reference/images/jupyter-cli.gif)\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/jupyter", "title": "Jupyter Kernel for Deno", "description": "Deno ships with a built-in Jupyter kernel that allows you to write JavaScript and TypeScript; use Web and Deno APIs and import `npm` packages straight in your interactive notebooks.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 02:14:29", "type": "overview", "page_metadata": {"ogTitle": "Jupyter Kernel for Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "og:title": "Jupyter Kernel for Deno", "twitter:image": "/img/og.webp", "twitter:title": "Jupyter Kernel for Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "title": "Jupyter Kernel for Deno", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "b559008f-a43f-4244-839d-83dce8a0b509", "sourceURL": "https://docs.deno.com/runtime/reference/cli/jupyter", "url": "https://docs.deno.com/runtime/reference/cli/jupyter/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Jupyter Kernel for Deno\"?\n\nAssistant: Here are some code examples:\n\n### Rich content output example\n```yaml\n```highlight notranslate ts\n{\n  [Symbol.for(\"Jupyter.display\")]() {\n    return {\n      \"text/plain\": \"Hello world!\",\n      \"text/html\": \"<h1>Hello world!</h1>\",\n    }\n  }\n}\n```\n```\n\n### Colorful output example\n```yaml\n```highlight notranslate ts\nimport * as colors from \"jsr:@std/fmt/colors\";\n\n{\n  [Deno.jupyter.$display]() {\n    return {\n      \"text/plain\": colors.green(\"Hello world\"),\n    }\n  }\n}\n```\n```\n\n### Direct display example\n```yaml\n```highlight notranslate js\nawait Deno.jupyter.display({\n  \"text/plain\": \"Hello, world!\",\n  \"text/html\": \"<h1>Hello, world!</h1>\",\n  \"text/markdown\": \"# Hello, world!\",\n}, { raw: true });\n```\n```\n\n### HTML output example\n```yaml\n```highlight notranslate js\nDeno.jupyter.html`<h1>Hello, world!</h1>\n<h2>From Deno kernel</h2>\n<p>Lorem ipsum <i>dolor</i> <b>sit</b> <u>amet</u></p>`;\n```\n```\n\n### Markdown output example\n```yaml\n```highlight notranslate js\nDeno.jupyter\n  .md`# Notebooks in TypeScript via Deno ![Deno logo](https://github.com/denoland.png?size=32)\n\n**Interactive compute with Jupyter _built into Deno_!**`;\n```\n```\n\n### SVG output example\n```yaml\n```highlight notranslate js\nDeno.jupyter.svg`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n      <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n    </svg>`;\n```\n```\n\n### Image rendering example\n```yaml\n```highlight notranslate js\nDeno.jupyter.image(\"./cat.jpg\");\n\nconst data = Deno.readFileSync(\"./dog.png\");\nDeno.jupyter.image(data);\n```\n```\n\n### Broadcast example\n```yaml\n```highlight notranslate js\nawait Deno.jupyter.broadcast(\"display_data\", {\n  data: { \"text/html\": \"<b>Processing...</b>\" },\n  metadata: {},\n  transient: { display_id: \"progress\" },\n});\n\n// Pretend we're doing an expensive compute\nawait new Promise((resolve) => setTimeout(resolve, 1500));\n\nawait Deno.jupyter.broadcast(\"update_display_data\", {\n  data: { \"text/html\": \"<b>Done</b>\" },\n  metadata: {},\n  transient: { display_id: \"progress\" },\n});\n```\n```\n\n### Chart generation example\n```yaml\n```highlight notranslate ts\nimport { document, penguins } from \"jsr:@ry/jupyter-helper\";\nimport * as Plot from \"npm:@observablehq/plot\";\n\nlet p = await penguins();\n\nPlot.plot({\n  marks: [\\\n    Plot.dot(p.toRecords(), {\\\n      x: \"culmen_depth_mm\",\\\n      y: \"culmen_length_mm\",\\\n      fill: \"species\",\\\n    }),\\\n  ],\n  document,\n});\n```\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/jupyter", "title": "Jupyter Kernel for Deno", "description": "Deno ships with a built-in Jupyter kernel that allows you to write JavaScript and TypeScript; use Web and Deno APIs and import `npm` packages straight in your interactive notebooks.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 02:14:29", "type": "code_examples", "page_metadata": {"ogTitle": "Jupyter Kernel for Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "og:title": "Jupyter Kernel for Deno", "twitter:image": "/img/og.webp", "twitter:title": "Jupyter Kernel for Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "title": "Jupyter Kernel for Deno", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "b559008f-a43f-4244-839d-83dce8a0b509", "sourceURL": "https://docs.deno.com/runtime/reference/cli/jupyter", "url": "https://docs.deno.com/runtime/reference/cli/jupyter/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Jupyter Kernel for Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno Jupyter kernel runs with `--allow-all` flag, which is a temporary limitation.\n• Ensure that the `jupyter` command is available in your `PATH` for installation.\n• Use `Deno.jupyter.$display` for easier output formatting.\n• Utilize tagged templates like `Deno.jupyter.html`, `Deno.jupyter.md`, and `Deno.jupyter.svg` for rich content display.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/jupyter", "title": "Jupyter Kernel for Deno", "description": "Deno ships with a built-in Jupyter kernel that allows you to write JavaScript and TypeScript; use Web and Deno APIs and import `npm` packages straight in your interactive notebooks.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 02:14:29", "type": "best_practices", "page_metadata": {"ogTitle": "Jupyter Kernel for Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "og:title": "Jupyter Kernel for Deno", "twitter:image": "/img/og.webp", "twitter:title": "Jupyter Kernel for Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:type": "article", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "title": "Jupyter Kernel for Deno", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "og:site_name": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "scrapeId": "b559008f-a43f-4244-839d-83dce8a0b509", "sourceURL": "https://docs.deno.com/runtime/reference/cli/jupyter", "url": "https://docs.deno.com/runtime/reference/cli/jupyter/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno compile, standalone executables\"?\n\nAssistant: This page covers the usage of the deno compile command to create standalone executables from Deno scripts, including various options and flags for type checking, dependency management, and more.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno compile [OPTIONS] [SCRIPT_ARG]...\n```\n\nCompiles the given script into a self contained executable.\n\n```\ndeno compile --allow-read --allow-net jsr:@std/http/file-server\n\n```\n\n```\ndeno compile --output file_server jsr:@std/http/file-server\n\n```\n\nAny flags specified which affect runtime behavior will be applied to the resulting binary.\nThis allows distribution of a Deno application to systems that do not have Deno installed.\nUnder the hood, it bundles a slimmed down version of the Deno runtime along with your\nJavaScript or TypeScript code.\n\nCross-compiling to different target architectures is supported using the `--target` flag.\nOn the first invocation with deno will download the proper binary and cache it in `$DENO_DIR`.\n\n## Type checking options\n### `--check`\nSet type-checking behavior. This subcommand type-checks local modules by default, so adding ` --check` is redundant.\nIf the value of \"all\" is supplied, remote modules will be included.\nAlternatively, the 'deno check' subcommand can be used.\n\n### `--no-check`\nSkip type-checking. If the value of \"remote\" is supplied, diagnostic errors from remote modules will be ignored.\n\n## Dependency management options\n### `--cached-only`\nRequire that remote dependencies are already cached.\n\n### `--frozen`\nError out if lockfile is out of date.\n\n### `--import-map`\nLoad import map file from local file or remote URL.\n\n### `--lock`\nCheck the specified lock file. (If value is not provided, defaults to \"./deno.lock\").\n\n### `--no-lock`\nDisable auto discovery of the lock file.\n\n### `--no-npm`\nDo not resolve npm modules.\n\n### `--no-remote`\nDo not resolve remote modules.\n\n### `--node-modules-dir`\nSets the node modules management mode for npm packages.\n\n### `--reload`\nShort flag: `-r`\nReload source code cache (recompile TypeScript)\nno value Reload everything\njsr:@std/http/file-server,jsr:@std/assert/assert-equals Reloads specific modules\nnpm: Reload all npm modules\nnpm:chalk Reload specific npm module.\n\n### `--vendor`\nToggles local vendor folder usage for remote modules and a node_modules folder for npm packages.\n\n## Options\n### `--allow-scripts`\nAllow running npm lifecycle scripts for the given packages.\nNote: Scripts will only be executed when using a node_modules directory ( `--node-modules-dir`).\n\n### `--cert`\nLoad certificate authority from PEM encoded file.\n\n### `--config`\nShort flag: `-c`\nConfigure different aspects of deno including TypeScript, linting, and code formatting.\nTypically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary.\n\n### `--env-file`\nLoad environment variables from local file.\nOnly the first environment variable with a given key is used.\nExisting process environment variables are not overwritten, so if variables with the same names already exist in the environment, their values will be preserved.\nWhere multiple declarations for the same environment variable exist in your .env file, the first one encountered is applied. This is determined by the order of the files you pass as arguments.\n\n### `--ext`\nSet content type of the supplied file.\n\n### `--location`\nValue of globalThis.location used by some web APIs.\n\n### `--no-code-cache`\nDisable V8 code cache feature.\n\n### `--no-config`\nDisable automatic loading of the configuration file.\n\n### `--seed`\nSet the random number generator seed.\n\n### `--v8-flags`\nTo see a list of all available flags use ` --v8-flags=--help`\nFlags can also be set via the DENO_V8_FLAGS environment variable.\nAny flags set with this flag are appended after the DENO_V8_FLAGS environment variable.\n\n## Compile options\n### `--icon`\nSet the icon of the executable on Windows (.ico).\n\n### `--include`\nIncludes an additional module or file/directory in the compiled executable.\nUse this flag if a dynamically imported module or a web worker main module fails to load in the executable or to embed a file or directory in the executable.\nThis flag can be passed multiple times, to include multiple additional modules.\n\n### `--no-terminal`\nHide terminal on Windows.\n\n### `--output`\nShort flag: `-o`\nOutput file (defaults to $PWD/).\n\n### `--target`\nTarget OS architecture.\n\n## Flags\nAs with [`deno install`](https://docs.deno.com/runtime/reference/cli/install/), the runtime flags\nused to execute the script must be specified at compilation time. This includes\npermission flags.\n\n```highlight notranslate sh\ndeno compile --allow-read --allow-net jsr:@std/http/file-server\n```\n\n[Script arguments](https://docs.deno.com/runtime/getting_started/command_line_interface/#passing-script-arguments)\ncan be partially embedded.\n\n```highlight notranslate console\ndeno compile --allow-read --allow-net jsr:@std/http/file-server -p 8080\n\n./file_server --help\n```\n\n## Cross Compilation\nYou can cross-compile binaries for other platforms by using the `--target` flag.\n\n```\n# Cross compile for Apple Silicon\ndeno compile --target aarch64-apple-darwin main.ts\n\n# Cross compile for Windows with an icon\ndeno compile --target x86_64-pc-windows-msvc --icon ./icon.ico main.ts\n```\n\n### Supported Targets\nDeno supports cross compiling to all targets regardless of the host platform.\n\n| OS | Architecture | Target |\n| --- | --- | --- |\n| Windows | x86_64 | `x86_64-pc-windows-msvc` |\n| macOS | x86_64 | `x86_64-apple-darwin` |\n| macOS | ARM64 | `aarch64-apple-darwin` |\n| Linux | x86_64 | `x86_64-unknown-linux-gnu` |\n| Linux | ARM64 | `aarch64-unknown-linux-gnu` |\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/compile", "title": "deno compile, standalone executables", "description": "This page covers the usage of the deno compile command to create standalone executables from Deno scripts, including various options and flags for type checking, dependency management, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:14:54", "type": "overview", "page_metadata": {"twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:title": "`deno compile`, standalone executables", "twitter:title": "`deno compile`, standalone executables", "title": "`deno compile`, standalone executables", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:site": "@deno_land", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "`deno compile`, standalone executables", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "023f9d4b-04cf-4216-be17-1e4a42756c86", "sourceURL": "https://docs.deno.com/runtime/reference/cli/compile", "url": "https://docs.deno.com/runtime/reference/cli/compile/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno compile, standalone executables\"?\n\nAssistant: Here are some code examples:\n\n### Basic compile command\n```yaml\ndeno compile --allow-read --allow-net jsr:@std/http/file-server\n```\n\n### Compile with output file\n```yaml\ndeno compile --output file_server jsr:@std/http/file-server\n```\n\n### Cross compile for Apple Silicon\n```yaml\ndeno compile --target aarch64-apple-darwin main.ts\n```\n\n### Cross compile for Windows with an icon\n```yaml\ndeno compile --target x86_64-pc-windows-msvc --icon ./icon.ico main.ts\n```\n\n### Including additional modules\n```yaml\ndeno compile --include calc.ts --include better_calc.ts main.ts\n```\n\n### Including data files\n```yaml\ndeno compile --include names.csv --include data main.ts\n```\n\n### Code signing on macOS\n```yaml\ncodesign -s \"Developer ID Application: Your Name\" ./main\n```\n\n### Code signing on Windows\n```yaml\nsigntool sign /fd SHA256 main.exe\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/compile", "title": "deno compile, standalone executables", "description": "This page covers the usage of the deno compile command to create standalone executables from Deno scripts, including various options and flags for type checking, dependency management, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:14:54", "type": "code_examples", "page_metadata": {"twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:title": "`deno compile`, standalone executables", "twitter:title": "`deno compile`, standalone executables", "title": "`deno compile`, standalone executables", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:site": "@deno_land", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "`deno compile`, standalone executables", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "023f9d4b-04cf-4216-be17-1e4a42756c86", "sourceURL": "https://docs.deno.com/runtime/reference/cli/compile", "url": "https://docs.deno.com/runtime/reference/cli/compile/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno compile, standalone executables\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--check` flag to ensure type-checking is performed on local modules.\n• Utilize the `--include` flag to include dynamically imported modules or web workers in the executable.\n• For cross-compilation, always specify the target architecture using the `--target` flag.\n• When including data files, read them relative to the directory path of the current module using `import.meta.dirname`.\n• On macOS, use ad-hoc signing for executables by default, or specify a signing identity for distribution.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/compile", "title": "deno compile, standalone executables", "description": "This page covers the usage of the deno compile command to create standalone executables from Deno scripts, including various options and flags for type checking, dependency management, and more.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 02:14:54", "type": "best_practices", "page_metadata": {"twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "favicon": "https://docs.deno.com/favicon.ico", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:title": "`deno compile`, standalone executables", "twitter:title": "`deno compile`, standalone executables", "title": "`deno compile`, standalone executables", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogLocale": "en_US", "ogSiteName": "Deno", "twitter:site": "@deno_land", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "og:image": "/img/og.webp", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "`deno compile`, standalone executables", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "023f9d4b-04cf-4216-be17-1e4a42756c86", "sourceURL": "https://docs.deno.com/runtime/reference/cli/compile", "url": "https://docs.deno.com/runtime/reference/cli/compile/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno.DatagramConn.joinMulticastV6\"?\n\nAssistant: Joins an IPv6 multicast group.\n\nHere's a detailed explanation:\n\n\n## Parameters\n- **address**: string\n- **networkInterface**: number\n\n## Return Type\nPromise<MulticastV6Membership>\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/~/Deno.DatagramConn.joinMulticastV6", "title": "Deno.DatagramConn.joinMulticastV6", "description": "Joins an IPv6 multicast group.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-28 02:15:03", "type": "overview", "page_metadata": {"og:locale": "en_US", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogSiteName": "Deno", "og:title": "Deno.DatagramConn.joinMulticastV6 - Deno documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogLocale": "en_US", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Deno.DatagramConn.joinMulticastV6 - Deno documentation", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Deno.DatagramConn.joinMulticastV6 - Deno documentation", "title": "Deno.DatagramConn.joinMulticastV6 - Deno documentation", "og:type": "article", "scrapeId": "5ec2a190-6c3a-44dc-96a9-303ad3531790", "sourceURL": "https://docs.deno.com/api/deno/~/Deno.DatagramConn.joinMulticastV6", "url": "https://docs.deno.com/api/deno/~/Deno.DatagramConn.joinMulticastV6", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"propertyStringifyOptions.encodeURIComponent\"?\n\nAssistant: The function to use when converting URL-unsafe characters to percent-encoding in the query string.\n\nHere's a detailed explanation:\n\n\n## Type\n`((str: string) => string) | undefined`\n", "metadata": {"source_url": "https://docs.deno.com/api/node/querystring/~/StringifyOptions.encodeURIComponent", "title": "propertyStringifyOptions.encodeURIComponent", "description": "The function to use when converting URL-unsafe characters to percent-encoding in the query string.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 02:15:17", "type": "overview", "page_metadata": {"ogLocale": "en_US", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:card": "summary_large_image", "og:locale": "en_US", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "StringifyOptions.encodeURIComponent - querystring - Node documentation", "twitter:title": "StringifyOptions.encodeURIComponent - querystring - Node documentation", "og:title": "StringifyOptions.encodeURIComponent - querystring - Node documentation", "favicon": "https://docs.deno.com/favicon.ico", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "og:site_name": "Deno", "ogTitle": "StringifyOptions.encodeURIComponent - querystring - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "scrapeId": "f203e368-0941-404f-9690-0a05e3528a59", "sourceURL": "https://docs.deno.com/api/node/querystring/~/StringifyOptions.encodeURIComponent", "url": "https://docs.deno.com/api/node/querystring/~/StringifyOptions.encodeURIComponent", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"methodReadStream.prototype.once\"?\n\nAssistant: This documentation covers the 'once' method of the ReadStream prototype, detailing its overloads, parameters, and return types.\n\nHere's a detailed explanation:\n\n\n## Overload 1\n`#ReadStream.prototype.once(\n    event: \"close\",\n    listener: () => void,\n): this`  \n### Parameters  \n`#event: \"close\"`  \n`#listener: () => void`  \n### Return Type  \n`this`\n\n## Overload 2\n`#ReadStream.prototype.once(\n    event: \"data\",\n    listener: (chunk: Buffer | string) => void,\n): this`  \n### Parameters  \n`#event: \"data\"`  \n`#listener: (chunk: Buffer | string) => void`  \n### Return Type  \n`this`\n\n## Overload 3\n`#ReadStream.prototype.once(\n    event: \"end\",\n    listener: () => void,\n): this`  \n### Parameters  \n`#event: \"end\"`  \n`#listener: () => void`  \n### Return Type  \n`this`\n\n## Overload 4\n`#ReadStream.prototype.once(\n    event: \"error\",\n    listener: (err: Error) => void,\n): this`  \n### Parameters  \n`#event: \"error\"`  \n`#listener: (err: Error) => void`  \n### Return Type  \n`this`\n\n## Overload 5\n`#ReadStream.prototype.once(\n    event: \"open\",\n    listener: (fd: number) => void,\n): this`  \n### Parameters  \n`#event: \"open\"`  \n`#listener: (fd: number) => void`  \n### Return Type  \n`this`\n\n## Overload 6\n`#ReadStream.prototype.once(\n    event: \"pause\",\n    listener: () => void,\n): this`  \n### Parameters  \n`#event: \"pause\"`  \n`#listener: () => void`  \n### Return Type  \n`this`\n\n## Overload 7\n`#ReadStream.prototype.once(\n    event: \"readable\",\n    listener: () => void,\n): this`  \n### Parameters  \n`#event: \"readable\"`  \n`#listener: () => void`  \n### Return Type  \n`this`\n\n## Overload 8\n`#ReadStream.prototype.once(\n    event: \"ready\",\n    listener: () => void,\n): this`  \n### Parameters  \n`#event: \"ready\"`  \n`#listener: () => void`  \n### Return Type  \n`this`\n\n## Overload 9\n`#ReadStream.prototype.once(\n    event: \"resume\",\n    listener: () => void,\n): this`  \n### Parameters  \n`#event: \"resume\"`  \n`#listener: () => void`  \n### Return Type  \n`this`\n\n## Overload 10\n`#ReadStream.prototype.once(\n    event: string | symbol,\n    listener: (...args: any[]) => void,\n): this`  \n### Parameters  \n`#event: string | symbol`  \n`#listener: (...args: any[]) => void`  \n### Return Type  \n`this`\n", "metadata": {"source_url": "https://docs.deno.com/api/node/fs/~/ReadStream.prototype.once", "title": "methodReadStream.prototype.once", "description": "This documentation covers the 'once' method of the ReadStream prototype, detailing its overloads, parameters, and return types.", "has_code_examples": false, "has_best_practices": false, "section_count": 10, "timestamp": "2025-02-28 02:15:54", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogTitle": "ReadStream.prototype.once - fs - Node documentation", "twitter:title": "ReadStream.prototype.once - fs - Node documentation", "twitter:image": "/img/og.webp", "ogLocale": "en_US", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:title": "ReadStream.prototype.once - fs - Node documentation", "title": "ReadStream.prototype.once - fs - Node documentation", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "language": "en", "favicon": "https://docs.deno.com/favicon.ico", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "twitter:card": "summary_large_image", "scrapeId": "997db5f7-95b0-40c3-aaad-eea5d1043cdd", "sourceURL": "https://docs.deno.com/api/node/fs/~/ReadStream.prototype.once", "url": "https://docs.deno.com/api/node/fs/~/ReadStream.prototype.once", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build a Vue app\"?\n\nAssistant: This page provides resources and links to videos related to building a Vue application.\n\nHere's a detailed explanation:\n\n\n## Video Resources\nFind more videos in the [Examples page](https://docs.deno.com/examples/) and on our [YouTube channel](https://www.youtube.com/@deno_land).\n", "metadata": {"source_url": "https://docs.deno.com/examples/vue_app_video", "title": "Build a Vue app", "description": "This page provides resources and links to videos related to building a Vue application.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:16:16", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Build a Vue app", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:title": "Build a Vue app", "ogImage": "/img/og.webp", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:title": "Build a Vue app", "og:site_name": "Deno", "og:locale": "en_US", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "title": "Build a Vue app", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogLocale": "en_US", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7334c8ce-cd20-4cfb-9d50-fc4e66e5239d", "sourceURL": "https://docs.deno.com/examples/vue_app_video", "url": "https://docs.deno.com/examples/vue_app_video/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Build a Vue app\"?\n\nAssistant: Here are the recommended best practices:\n\n• Provide feedback on the documentation if you have suggestions or comments.\n", "metadata": {"source_url": "https://docs.deno.com/examples/vue_app_video", "title": "Build a Vue app", "description": "This page provides resources and links to videos related to building a Vue application.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-28 02:16:16", "type": "best_practices", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogTitle": "Build a Vue app", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "og:title": "Build a Vue app", "ogImage": "/img/og.webp", "og:type": "article", "twitter:image": "/img/og.webp", "twitter:title": "Build a Vue app", "og:site_name": "Deno", "og:locale": "en_US", "og:image": "/img/og.webp", "twitter:card": "summary_large_image", "title": "Build a Vue app", "favicon": "https://docs.deno.com/favicon.ico", "language": "en", "ogLocale": "en_US", "ogSiteName": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "7334c8ce-cd20-4cfb-9d50-fc4e66e5239d", "sourceURL": "https://docs.deno.com/examples/vue_app_video", "url": "https://docs.deno.com/examples/vue_app_video/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Connecting to databases\"?\n\nAssistant: It is common for applications to store and retrieve data from databases. Deno supports connecting to many database management systems.\n\nHere's a detailed explanation:\n\n\n## MySQL\n[deno_mysql](https://deno.land/x/mysql) is a MySQL and MariaDB database driver for Deno.\n\n### Connect to MySQL with deno_mysql\n\nFirst import the `mysql` module and create a new client instance. Then connect to the database passing an object with the connection details:\n\nmain.js\n\n```highlight notranslate ts\nimport { Client } from \"https://deno.land/x/mysql/mod.ts\";\n\nconst client = await new Client().connect({\n  hostname: \"127.0.0.1\",\n  username: \"root\",\n  db: \"dbname\",\n  password: \"password\",\n});\n```\n\nOnce connected, you can execute queries, insert data and retrieve information.\n\n## Postgres\n[deno-postgres](https://deno.land/x/postgres) is a lightweight PostgreSQL driver for Deno focused on developer experience.\n\n### Connect to Postgres with deno-postgres\n\nFirst, import the `Client` class from the `deno-postgres` module and create a new client instance. Then connect to the database passing an object with the connection details:\n\n```highlight notranslate ts\nimport { Client } from \"https://deno.land/x/postgres/mod.ts\";\n\nconst client = new Client({\n  user: \"user\",\n  database: \"dbname\",\n  hostname: \"127.0.0.1\",\n  port: 5432,\n  password: \"password\",\n});\nawait client.connect();\n```\n\n### Connect to Postgres with postgresjs\n\n[postgresjs](https://deno.land/x/postgresjs) is a full-featured Postgres client for Node.js and Deno.\n\nImport the `postgres` module and create a new client instance. Then connect to the database passing a connection string as an argument:\n\n```highlight notranslate js\nimport postgres from \"https://deno.land/x/postgresjs/mod.js\";\n\nconst sql = postgres(\"postgres://username:password@host:port/database\");\n```\n\n## MongoDB\nWe suggest using [npm specifiers](https://docs.deno.com/runtime/fundamentals/node/#using-npm-packages) to work with the official [MongoDB driver on npm](https://www.npmjs.com/package/mongodb). You can learn more about how to work with the driver [in the official docs](https://www.mongodb.com/docs/drivers/node/current/). The only difference using this module in the context of Deno will be how you import the module using an `npm:` specifier.\n\nImport the MongoDB driver, set up connection configuration then connect to a MongoDB instance. You can then perform operations like inserting documents into a collection before closing the connection:\n\nmain.js\n\n```highlight notranslate ts\nimport { MongoClient } from \"npm:mongodb@6\";\n\nconst url = \"mongodb://localhost:27017\";\nconst client = new MongoClient(url);\nconst dbName = \"myProject\";\n\nawait client.connect();\nconsole.log(\"Connected successfully to server\");\n\n// Get a reference to a collection\nconst db = client.db(dbName);\nconst collection = db.collection(\"documents\");\n\n// Execute an insert operation\nconst insertResult = await collection.insertMany([{ a: 1 }, { a: 2 }]);\nconsole.log(\"Inserted documents =>\", insertResult);\n\nclient.close();\n```\n\n## SQLite\nThere are multiple solutions to connect to SQLite in Deno:\n\n### Connect to SQLite using the `node:sqlite` module\n\n_`node:sqlite` module has been added in Deno v2.2._\n\n```highlight notranslate ts\nimport { DatabaseSync } from \"node:sqlite\";\nconst database = new DatabaseSync(\"test.db\");\n\nconst result = database.prepare(\"select sqlite_version()\").get();\nconsole.log(result);\n\ndatabase.close();\n```\n\n### Connect to SQLite with the FFI Module\n\n[@db/sqlite](https://jsr.io/@db/sqlite) provides JavaScript bindings to the SQLite3 C API, using [Deno FFI](https://docs.deno.com/runtime/reference/deno_namespace_apis/#ffi).\n\n```highlight notranslate ts\nimport { Database } from \"jsr:@db/sqlite@0.12\";\n\nconst db = new Database(\"test.db\");\n\nconst [version] = db.prepare(\"select sqlite_version()\").value<[string]>()!;\nconsole.log(version);\n\ndb.close();\n```\n\n### Connect to SQLite with the Wasm-Optimized Module\n\n[sqlite](https://deno.land/x/sqlite) is a SQLite module for JavaScript and TypeScript. The wrapper made specifically for Deno and uses a version of SQLite3 compiled to WebAssembly (Wasm).\n\n```highlight notranslate ts\nimport { DB } from \"https://deno.land/x/sqlite/mod.ts\";\n\nconst db = new DB(\"test.db\");\n\ndb.close();\n```\n\n## Firebase\nTo connect to Firebase with Deno, import the [firestore npm module](https://firebase.google.com/docs/firestore/quickstart) with the [ESM CDN](https://esm.sh/). To learn more about using npm modules in Deno with a CDN, see [Using npm packages with CDNs](https://docs.deno.com/runtime/fundamentals/modules/#https-imports).\n\n### Connect to Firebase with the firestore npm module\n\n```highlight notranslate js\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/9.8.1/firebase-app.js\";\n\nimport {\n  addDoc,\n  collection,\n  connectFirestoreEmulator,\n  deleteDoc,\n  doc,\n  Firestore,\n  getDoc,\n  getDocs,\n  getFirestore,\n  query,\n  QuerySnapshot,\n  setDoc,\n  where,\n} from \"https://www.gstatic.com/firebasejs/9.8.1/firebase-firestore.js\";\n\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/9.8.1/firebase-auth.js\";\n\nconst app = initializeApp({\n  apiKey: Deno.env.get(\"FIREBASE_API_KEY\"),\n  authDomain: Deno.env.get(\"FIREBASE_AUTH_DOMAIN\"),\n  projectId: Deno.env.get(\"FIREBASE_PROJECT_ID\"),\n  storageBucket: Deno.env.get(\"FIREBASE_STORAGE_BUCKET\"),\n  messagingSenderId: Deno.env.get(\"FIREBASE_MESSING_SENDER_ID\"),\n  appId: Deno.env.get(\"FIREBASE_APP_ID\"),\n  measurementId: Deno.env.get(\"FIREBASE_MEASUREMENT_ID\"),\n});\nconst db = getFirestore(app);\nconst auth = getAuth(app);\n```\n\n## Supabase\nTo connect to Supabase with Deno, import the [supabase-js npm module](https://supabase.com/docs/reference/javascript) with the [esm.sh CDN](https://esm.sh/). To learn more about using npm modules in Deno with a CDN, see [Using npm packages with CDNs](https://docs.deno.com/runtime/fundamentals/modules/#https-imports).\n\n### Connect to Supabase with the supabase-js npm module\n\n```highlight notranslate js\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js\";\n\nconst options = {\n  schema: \"public\",\n  headers: { \"x-my-custom-header\": \"my-app-name\" },\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n};\n\nconst supabase = createClient(\n  \"https://xyzcompany.supabase.co\",\n  \"public-anon-key\",\n  options,\n);\n```\n\n## ORMs\nObject-Relational Mappings (ORM) define your data models as classes that you can persist to a database. You can read and write data in your database through instances of these classes.\n\nDeno supports multiple ORMs, including Prisma and DenoDB.\n\n### DenoDB\n\n[DenoDB](https://deno.land/x/denodb) is a Deno-specific ORM.\n\n#### Connect to DenoDB\n\n```highlight notranslate ts\nimport {\n  Database,\n  DataTypes,\n  Model,\n  PostgresConnector,\n} from \"https://deno.land/x/denodb/mod.ts\";\n\nconst connection = new PostgresConnector({\n  host: \"...\",\n  username: \"user\",\n  password: \"password\",\n  database: \"airlines\",\n});\n\nconst db = new Database(connection);\n```\n\n## GraphQL\nGraphQL is an API query language often used to compose disparate data sources into client-centric APIs. To set up a GraphQL API, you should first set up a GraphQL server. This server exposes your data as a GraphQL API that your client applications can query for data.\n\n### Server\n\nYou can use [gql](https://deno.land/x/gql), an universal GraphQL HTTP middleware for Deno, to run a GraphQL API server in Deno.\n\n#### Run a GraphQL API server with gql\n\n```highlight notranslate ts\nimport { GraphQLHTTP } from \"https://deno.land/x/gql/mod.ts\";\nimport { makeExecutableSchema } from \"https://deno.land/x/graphql_tools@0.0.2/mod.ts\";\nimport { gql } from \"https://deno.land/x/graphql_tag@0.0.1/mod.ts\";\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: () => `Hello World!`,\n  },\n};\n\nconst schema = makeExecutableSchema({ resolvers, typeDefs });\n\nDeno.serve({ port: 3000 }, async (req) => {\n  const { pathname } = new URL(req.url);\n\n  return pathname === \"/graphql\"\n    ? await GraphQLHTTP<Request>({\n      schema,\n      graphiql: true,\n    })(req)\n    : new Response(\"Not Found\", { status: 404 });\n});\n```\n\n## Client\nTo make GraphQL client calls in Deno, import the [graphql npm module](https://www.npmjs.com/package/graphql) with the [esm CDN](https://esm.sh/). To learn more about using npm modules in Deno via CDN read [here](https://docs.deno.com/runtime/fundamentals/modules/#https-imports).\n\n#### Make GraphQL client calls with the graphql npm module\n\n```highlight notranslate js\nimport { buildSchema, graphql } from \"https://esm.sh/graphql\";\n\nconst schema = buildSchema(`\ntype Query {\n  hello: String\n}\n`);\n\nconst rootValue = {\n  hello: () => {\n    return \"Hello world!\";\n  },\n};\n\nconst response = await graphql({\n  schema,\n  source: \"{ hello }\",\n  rootValue,\n});\n\nconsole.log(response);\n```\n", "metadata": {"source_url": "https://docs.deno.com/examples/connecting_to_databases_tutorial", "title": "Connecting to databases", "description": "It is common for applications to store and retrieve data from databases. Deno supports connecting to many database management systems.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 02:18:13", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:title": "Connecting to databases", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "Connecting to databases", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogSiteName": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Connecting to databases", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "title": "Connecting to databases", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32a5cd87-4845-4eae-b110-06532d98199a", "sourceURL": "https://docs.deno.com/examples/connecting_to_databases_tutorial", "url": "https://docs.deno.com/examples/connecting_to_databases_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Connecting to databases\"?\n\nAssistant: Here are some code examples:\n\n### Connect to MySQL with deno_mysql\n```yaml\nimport { Client } from \"https://deno.land/x/mysql/mod.ts\";\n\nconst client = await new Client().connect({\n  hostname: \"127.0.0.1\",\n  username: \"root\",\n  db: \"dbname\",\n  password: \"password\",\n});\n```\n\n### Connect to Postgres with deno-postgres\n```yaml\nimport { Client } from \"https://deno.land/x/postgres/mod.ts\";\n\nconst client = new Client({\n  user: \"user\",\n  database: \"dbname\",\n  hostname: \"127.0.0.1\",\n  port: 5432,\n  password: \"password\",\n});\nawait client.connect();\n```\n\n### Connect to Postgres with postgresjs\n```yaml\nimport postgres from \"https://deno.land/x/postgresjs/mod.js\";\n\nconst sql = postgres(\"postgres://username:password@host:port/database\");\n```\n\n### MongoDB Connection Example\n```yaml\nimport { MongoClient } from \"npm:mongodb@6\";\n\nconst url = \"mongodb://localhost:27017\";\nconst client = new MongoClient(url);\nconst dbName = \"myProject\";\n\nawait client.connect();\nconsole.log(\"Connected successfully to server\");\n\nconst db = client.db(dbName);\nconst collection = db.collection(\"documents\");\n\nconst insertResult = await collection.insertMany([{ a: 1 }, { a: 2 }]);\nconsole.log(\"Inserted documents =>\", insertResult);\n\nclient.close();\n```\n\n### Connect to SQLite using the node:sqlite module\n```yaml\nimport { DatabaseSync } from \"node:sqlite\";\nconst database = new DatabaseSync(\"test.db\");\n\nconst result = database.prepare(\"select sqlite_version()\").get();\nconsole.log(result);\n\ndatabase.close();\n```\n\n### Connect to SQLite with the FFI Module\n```yaml\nimport { Database } from \"jsr:@db/sqlite@0.12\";\n\nconst db = new Database(\"test.db\");\n\nconst [version] = db.prepare(\"select sqlite_version()\").value<[string]>()!;\nconsole.log(version);\n\ndb.close();\n```\n\n### Connect to SQLite with the Wasm-Optimized Module\n```yaml\nimport { DB } from \"https://deno.land/x/sqlite/mod.ts\";\n\nconst db = new DB(\"test.db\");\n\ndb.close();\n```\n\n### Connect to Firebase with the firestore npm module\n```yaml\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/9.8.1/firebase-app.js\";\n\nimport {\n  addDoc,\n  collection,\n  connectFirestoreEmulator,\n  deleteDoc,\n  doc,\n  Firestore,\n  getDoc,\n  getDocs,\n  getFirestore,\n  query,\n  QuerySnapshot,\n  setDoc,\n  where,\n} from \"https://www.gstatic.com/firebasejs/9.8.1/firebase-firestore.js\";\n\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/9.8.1/firebase-auth.js\";\n\nconst app = initializeApp({\n  apiKey: Deno.env.get(\"FIREBASE_API_KEY\"),\n  authDomain: Deno.env.get(\"FIREBASE_AUTH_DOMAIN\"),\n  projectId: Deno.env.get(\"FIREBASE_PROJECT_ID\"),\n  storageBucket: Deno.env.get(\"FIREBASE_STORAGE_BUCKET\"),\n  messagingSenderId: Deno.env.get(\"FIREBASE_MESSING_SENDER_ID\"),\n  appId: Deno.env.get(\"FIREBASE_APP_ID\"),\n  measurementId: Deno.env.get(\"FIREBASE_MEASUREMENT_ID\"),\n});\nconst db = getFirestore(app);\nconst auth = getAuth(app);\n```\n\n### Connect to Supabase with the supabase-js npm module\n```yaml\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js\";\n\nconst options = {\n  schema: \"public\",\n  headers: { \"x-my-custom-header\": \"my-app-name\" },\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n};\n\nconst supabase = createClient(\n  \"https://xyzcompany.supabase.co\",\n  \"public-anon-key\",\n  options,\n);\n```\n\n### Connect to DenoDB\n```yaml\nimport {\n  Database,\n  DataTypes,\n  Model,\n  PostgresConnector,\n} from \"https://deno.land/x/denodb/mod.ts\";\n\nconst connection = new PostgresConnector({\n  host: \"...\",\n  username: \"user\",\n  password: \"password\",\n  database: \"airlines\",\n});\n\nconst db = new Database(connection);\n\n```\n\n### Run a GraphQL API server with gql\n```yaml\nimport { GraphQLHTTP } from \"https://deno.land/x/gql/mod.ts\";\nimport { makeExecutableSchema } from \"https://deno.land/x/graphql_tools@0.0.2/mod.ts\";\nimport { gql } from \"https://deno.land/x/graphql_tag@0.0.1/mod.ts\";\n\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    hello: () => `Hello World!`,\n  },\n};\n\nconst schema = makeExecutableSchema({ resolvers, typeDefs });\n\nDeno.serve({ port: 3000 }, async (req) => {\n  const { pathname } = new URL(req.url);\n\n  return pathname === \"/graphql\"\n    ? await GraphQLHTTP<Request>({\n      schema,\n      graphiql: true,\n    })(req)\n    : new Response(\"Not Found\", { status: 404 });\n});\n```\n\n### Make GraphQL client calls with the graphql npm module\n```yaml\nimport { buildSchema, graphql } from \"https://esm.sh/graphql\";\n\nconst schema = buildSchema(`\ntype Query {\n  hello: String\n}\n`);\n\nconst rootValue = {\n  hello: () => {\n    return \"Hello world!\";\n  },\n};\n\nconst response = await graphql({\n  schema,\n  source: \"{ hello }\",\n  rootValue,\n});\n\nconsole.log(response);\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/connecting_to_databases_tutorial", "title": "Connecting to databases", "description": "It is common for applications to store and retrieve data from databases. Deno supports connecting to many database management systems.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 02:18:13", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:title": "Connecting to databases", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "Connecting to databases", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogSiteName": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Connecting to databases", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "title": "Connecting to databases", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32a5cd87-4845-4eae-b110-06532d98199a", "sourceURL": "https://docs.deno.com/examples/connecting_to_databases_tutorial", "url": "https://docs.deno.com/examples/connecting_to_databases_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Connecting to databases\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use npm specifiers to work with the official MongoDB driver on npm.\n• When connecting to Firebase, ensure to use the ESM CDN for importing modules.\n• For SQLite, consider using the `node:sqlite` module for synchronous operations.\n", "metadata": {"source_url": "https://docs.deno.com/examples/connecting_to_databases_tutorial", "title": "Connecting to databases", "description": "It is common for applications to store and retrieve data from databases. Deno supports connecting to many database management systems.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-28 02:18:13", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:image": "/img/og.webp", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "og:title": "Connecting to databases", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "language": "en", "ogTitle": "Connecting to databases", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "ogImage": "/img/og.webp", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:site_name": "Deno", "ogSiteName": "Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:title": "Connecting to databases", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:site": "@deno_land", "title": "Connecting to databases", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "32a5cd87-4845-4eae-b110-06532d98199a", "sourceURL": "https://docs.deno.com/examples/connecting_to_databases_tutorial", "url": "https://docs.deno.com/examples/connecting_to_databases_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of various interfaces and type aliases in Deno related to the process module.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:process\";\n```\n\n## Interfaces\nThis section lists various interfaces available in the Deno process module, along with their properties and methods.\n\n## Type Aliases\nThis section lists various type aliases available in the Deno process module.\n\n## Variables\nThis section lists the variables available in the Deno process module.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/process", "title": "Usage in Deno", "description": "This page covers the usage of various interfaces and type aliases in Deno related to the process module.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:24:48", "type": "overview", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "process - Node documentation", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "process - Node documentation", "og:type": "article", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "process - Node documentation", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogTitle": "process - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "dcec8cc6-825d-48eb-9053-58c99a21e7af", "sourceURL": "https://docs.deno.com/api/node/process", "url": "https://docs.deno.com/api/node/process/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing the Process Module\n```yaml\nimport * as mod from \"node:process\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/process", "title": "Usage in Deno", "description": "This page covers the usage of various interfaces and type aliases in Deno related to the process module.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:24:48", "type": "code_examples", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "process - Node documentation", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "process - Node documentation", "og:type": "article", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "process - Node documentation", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogTitle": "process - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "dcec8cc6-825d-48eb-9053-58c99a21e7af", "sourceURL": "https://docs.deno.com/api/node/process", "url": "https://docs.deno.com/api/node/process/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Usage in Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• Most of the time the unhandledRejection will be an Error, but this should not be relied upon as anything can be thrown/rejected, it is therefore unsafe to assume that the value is an Error.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/process", "title": "Usage in Deno", "description": "This page covers the usage of various interfaces and type aliases in Deno related to the process module.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-28 02:24:48", "type": "best_practices", "page_metadata": {"keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "process - Node documentation", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:title": "process - Node documentation", "og:type": "article", "ogImage": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "og:title": "process - Node documentation", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogTitle": "process - Node documentation", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "dcec8cc6-825d-48eb-9053-58c99a21e7af", "sourceURL": "https://docs.deno.com/api/node/process", "url": "https://docs.deno.com/api/node/process/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Usage in Deno\"?\n\nAssistant: This page covers the usage of the Streams API in Deno, including various interfaces and type aliases.\n\nHere's a detailed explanation:\n\n\n## Usage in Deno\n```highlight notranslate typescript\nimport * as mod from \"node:stream/web\";\n```\n\n## Interfaces\nThis section lists various interfaces available in the Streams API.\n\n## Type Aliases\nThis section lists various type aliases available in the Streams API.\n", "metadata": {"source_url": "https://docs.deno.com/api/node/stream/web", "title": "Usage in Deno", "description": "This page covers the usage of the Streams API in Deno, including various interfaces and type aliases.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 02:39:36", "type": "overview", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "stream/web - Node documentation", "title": "stream/web - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "stream/web - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogSiteName": "Deno", "twitter:title": "stream/web - Node documentation", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "a20b8037-0acc-4bf0-97fa-af68de860d31", "sourceURL": "https://docs.deno.com/api/node/stream/web", "url": "https://docs.deno.com/api/node/stream/web/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Usage in Deno\"?\n\nAssistant: Here are some code examples:\n\n### Importing Stream Module\n```yaml\nimport * as mod from \"node:stream/web\";\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/api/node/stream/web", "title": "Usage in Deno", "description": "This page covers the usage of the Streams API in Deno, including various interfaces and type aliases.", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-28 02:39:36", "type": "code_examples", "page_metadata": {"ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "stream/web - Node documentation", "title": "stream/web - Node documentation", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:site": "@deno_land", "og:image": "/img/og.webp", "og:site_name": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogLocale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogTitle": "stream/web - Node documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "ogSiteName": "Deno", "twitter:title": "stream/web - Node documentation", "ogImage": "/img/og.webp", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "a20b8037-0acc-4bf0-97fa-af68de860d31", "sourceURL": "https://docs.deno.com/api/node/stream/web", "url": "https://docs.deno.com/api/node/stream/web/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"API server with Firestore (Firebase)\"?\n\nAssistant: Firebase is a platform developed by Google for creating mobile and web applications. You can persist data on the platform using Firestore. In this tutorial let's take a look at how we can use it to build a small API that has endpoints to insert and retrieve information.\n\nHere's a detailed explanation:\n\n\n## Overview\nWe are going to build an API with a single endpoint that accepts `GET` and `POST` requests and returns a JSON payload of information:\n\n```highlight notranslate sh\n# A GET request to the endpoint without any sub-path should return the details\n# of all songs in the store:\nGET /songs\n# response\n[\\\n  {\\\n    title: \"Song Title\",\\\n    artist: \"Someone\",\\\n    album: \"Something\",\\\n    released: \"1970\",\\\n    genres: \"country rap\",\\\n  }\\\n]\n\n# A GET request to the endpoint with a sub-path to the title should return the\n# details of the song based on its title.\nGET /songs/Song%20Title # '%20' == space\n# response\n{\n  title: \"Song Title\"\n  artist: \"Someone\"\n  album: \"Something\",\n  released: \"1970\",\n  genres: \"country rap\",\n}\n\n# A POST request to the endpoint should insert the song details.\nPOST /songs\n# post request body\n{\n  title: \"A New Title\"\n  artist: \"Someone New\"\n  album: \"Something New\",\n  released: \"2020\",\n  genres: \"country rap\",\n}\n```\n\nIn this tutorial, we will be:\n\n- Creating and setting up a [Firebase Project](https://console.firebase.google.com/).\n- Using a text editor to create our application.\n- Creating a [gist](https://gist.github.com/) to \"host\" our application.\n- Deploying our application on [Deno Deploy](https://dash.deno.com/).\n- Testing our application using [cURL](https://curl.se/).\n\n## Concepts\nThere are a few concepts that help in understanding why we take a particular approach in the rest of the tutorial, and can help in extending the application. You can skip ahead to [Setup Firebase](https://docs.deno.com/deploy/tutorials/tutorial-firebase/#setup-firebase) if you want.\n\n### Deploy is browser-like\nEven though Deploy runs in the cloud, in many aspects the APIs it provides are based on web standards. So when using Firebase, the Firebase APIs are more compatible with the web than those that are designed for server run times. That means we will be using the Firebase web libraries in this tutorial.\n\n### Firebase uses XHR\nFirebase uses a wrapper around Closure's [WebChannel](https://google.github.io/closure-library/api/goog.net.WebChannel.html) and WebChannel was originally built around [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest). While WebChannel supports the more modern `fetch()` API, current versions of Firebase for the web do not uniformly instantiate WebChannel with `fetch()` support, and instead use `XMLHttpRequest`.\n\nWhile Deploy is browser-like, it does not support `XMLHttpRequest`. `XMLHttpRequest` is a \"legacy\" browser API that has several limitations and features that would be difficult to implement in Deploy, which means it is unlikely that Deploy will ever implement that API.\n\nSo, in this tutorial we will be using a limited _polyfill_ that provides enough of the `XMLHttpRequest` feature set to allow Firebase/WebChannel to communicate with the server.\n\n### Firebase auth\nFirebase offers quite [a few options](https://firebase.google.com/docs/auth) around authentication. In this tutorial we are going to be using email and password authentication.\n\nWhen a user is logged in, Firebase can persist that authentication. Because we are using the web libraries for Firebase, persisting the authentication allows a user to navigate away from a page and not need to re-log in when returning. Firebase allows authentication to be persisted in local storage, session storage or none.\n\nIn a Deploy context, it is a little different. A Deploy deployment will remain \"active\" meaning that in-memory state will be present from request to request on some requests, but under various conditions a new deployment can be started up or shutdown. Currently, Deploy doesn't offer any persistence outside of in-memory allocation. In addition it doesn't currently offer the global `localStorage` or `sessionStorage`, which is what is used by Firebase to store the authentication information.\n\nIn order to reduce the need to re-authenticate but also ensure that we can support multiple-users with a single deployment, we are going to use a polyfill that will allow us to provide a `localStorage` interface to Firebase, but store the information as a cookie in the client.\n\n## Setup Firebase\n[Firebase](https://firebase.google.com/) is a feature rich platform. All the details of Firebase administration are beyond the scope of this tutorial. We will cover what it needed for this tutorial.\n\n1. Create a new project under the [Firebase console](https://console.firebase.google.com/).\n\n2. Add a web application to your project. Make note of the `firebaseConfig` provided in the setup wizard. It should look something like the below. We will use this later:\n\n\nfirebase.js\n\n```highlight notranslate js\nvar firebaseConfig = {\n     apiKey: \"APIKEY\",\n     authDomain: \"example-12345.firebaseapp.com\",\n     projectId: \"example-12345\",\n     storageBucket: \"example-12345.appspot.com\",\n     messagingSenderId: \"1234567890\",\n     appId: \"APPID\",\n};\n```\n\n3. Under `Authentication` in the administration console for, you will want to enable the `Email/Password` sign-in method.\n\n4. You will want to add a user and password under `Authentication` and then `Users` section, making note of the values used for later.\n\n5. Add `Firestore Database` to your project. The console will allow you to setup in _production mode_ or _test mode_. It is up to you how you configure this, but _production mode_ will require you to setup further security rules.\n\n6. Add a collection to the database named `songs`. This will require you to add at least one document. Just set the document with an _Auto ID_.\n\n_Note_ depending on the status of your Google account, there maybe other setup and administration steps that need to occur.\n\n## Write the application\nWe want to create our application as a JavaScript file in our favorite editor.\n\nThe first thing we will do is import the `XMLHttpRequest` polyfill that Firebase needs to work under Deploy as well as a polyfill for `localStorage` to allow the Firebase auth to persist logged in users:\n\nfirebase.js\n\n```highlight notranslate js\nimport \"https://deno.land/x/xhr@0.1.1/mod.ts\";\nimport { installGlobals } from \"https://deno.land/x/virtualstorage@0.1.0/mod.ts\";\ninstallGlobals();\n```\n\n> ℹ️ we are using the current version of packages at the time of the writing of this tutorial. They may not be up-to-date and you may want to double check current versions.\n\nBecause Deploy has a lot of the web standard APIs, it is best to use the web libraries for Firebase under deploy. Currently v9 is in still in beta for Firebase, so we will use v8 in this tutorial:\n\nfirebase.js\n\n```highlight notranslate js\nimport firebase from \"https://esm.sh/firebase@8.7.0/app\";\nimport \"https://esm.sh/firebase@8.7.0/auth\";\nimport \"https://esm.sh/firebase@8.7.0/firestore\";\n```\n\nWe are also going to use [oak](https://deno.land/x/oak) as the middleware framework for creating the APIs, including middleware that will take the `localStorage` values and set them as client cookies:\n\nfirebase.js\n\n```highlight notranslate js\nimport {\n  Application,\n  Router,\n  Status,\n} from \"https://deno.land/x/oak@v7.7.0/mod.ts\";\nimport { virtualStorage } from \"https://deno.land/x/virtualstorage@0.1.0/middleware.ts\";\n```\n\nNow we need to setup our Firebase application. We will be getting the configuration from environment variables we will setup later under the key `FIREBASE_CONFIG` and get references to the parts of Firebase we are going to use:\n\nfirebase.js\n\n```highlight notranslate js\nconst firebaseConfig = JSON.parse(Deno.env.get(\"FIREBASE_CONFIG\"));\nconst firebaseApp = firebase.initializeApp(firebaseConfig, \"example\");\nconst auth = firebase.auth(firebaseApp);\nconst db = firebase.firestore(firebaseApp);\n```\n\nWe are also going to setup the application to handle signed in users per request. So we will create a map of users that we have previously signed in in this deployment. While in this tutorial we will only ever have one signed in user, the code can easily be adapted to allow clients to sign-in individually:\n\nfirebase.js\n\n```highlight notranslate js\nconst users = new Map();\n```\n\nLet's create our middleware router and create three different middleware handlers to support `GET` and `POST` of `/songs` and a `GET` of a specific song on `/songs/{title}`:\n\nfirebase.js\n\n```highlight notranslate js\nconst router = new Router();\n\n// Returns any songs in the collection\nrouter.get(\"/songs\", async (ctx) => {\n  const querySnapshot = await db.collection(\"songs\").get();\n  ctx.response.body = querySnapshot.docs.map((doc) => doc.data());\n  ctx.response.type = \"json\";\n});\n\n// Returns the first document that matches the title\nrouter.get(\"/songs/:title\", async (ctx) => {\n  const { title } = ctx.params;\n  const querySnapshot = await db.collection(\"songs\").where(\"title\", \"==\", title)\n    .get();\n  const song = querySnapshot.docs.map((doc) => doc.data())[0];\n  if (!song) {\n    ctx.response.status = 404;\n    ctx.response.body = `The song titled \"${ctx.params.title}\" was not found.`;\n    ctx.response.type = \"text\";\n  } else {\n    ctx.response.body = querySnapshot.docs.map((doc) => doc.data())[0];\n    ctx.response.type = \"json\";\n  }\n});\n\nfunction isSong(value) {\n  return typeof value === \"object\" && value !== null && \"title\" in value;\n}\n\n// Removes any songs with the same title and adds the new song\nrouter.post(\"/songs\", async (ctx) => {\n  const body = ctx.request.body();\n  if (body.type !== \"json\") {\n    ctx.throw(Status.BadRequest, \"Must be a JSON document\");\n  }\n  const song = await body.value;\n  if (!isSong(song)) {\n    ctx.throw(Status.BadRequest, \"Payload was not well formed\");\n  }\n  const querySnapshot = await db\n    .collection(\"songs\")\n    .where(\"title\", \"==\", song.title)\n    .get();\n  await Promise.all(querySnapshot.docs.map((doc) => doc.ref.delete()));\n  const songsRef = db.collection(\"songs\");\n  await songsRef.add(song);\n  ctx.response.status = Status.NoContent;\n});\n```\n\nOk, we are almost done. We just need to create our middleware application, and add the `localStorage` middleware we imported:\n\nfirebase.js\n\n```highlight notranslate js\nconst app = new Application();\napp.use(virtualStorage());\n```\n\nAnd then we need to add middleware to authenticate the user. In this tutorial we are simply grabbing the username and password from the environment variables we will be setting up, but this could easily be adapted to redirect a user to a sign-in page if they are not logged in:\n\nfirebase.js\n\n```highlight notranslate js\napp.use(async (ctx, next) => {\n  const signedInUid = ctx.cookies.get(\"LOGGED_IN_UID\");\n  const signedInUser = signedInUid != null ? users.get(signedInUid) : undefined;\n  if (!signedInUid || !signedInUser || !auth.currentUser) {\n    const creds = await auth.signInWithEmailAndPassword(\n      Deno.env.get(\"FIREBASE_USERNAME\"),\n      Deno.env.get(\"FIREBASE_PASSWORD\"),\n    );\n    const { user } = creds;\n    if (user) {\n      users.set(user.uid, user);\n      ctx.cookies.set(\"LOGGED_IN_UID\", user.uid);\n    } else if (signedInUser && signedInUid.uid !== auth.currentUser?.uid) {\n      await auth.updateCurrentUser(signedInUser);\n    }\n  }\n  return next();\n});\n```\n\nNow let's add our router to the middleware application and set the application to listen on port 8000:\n\nfirebase.js\n\n```highlight notranslate js\napp.use(router.routes());\napp.use(router.allowedMethods());\nawait app.listen({ port: 8000 });\n```\n\nNow we have an application that should serve up our APIs.\n\n## Deploy the Application\nNow that we have everything in place, let's deploy your new application!\n\n1. In your browser, visit [Deno Deploy](https://dash.deno.com/new_project) and link your GitHub account.\n2. Select the repository which contains your new application.\n3. You can give your project a name or allow Deno to generate one for you\n4. Select `firebase.js` in the Entrypoint dropdown\n5. Click **Deploy Project**\n\nIn order for your Application to work, we will need to configure its environment variables.\n\nOn your project's success page, or in your project dashboard, click on **Add** **environmental variables**. Under Environment Variables, click **\\+ Add** **Variable**. Create the following variables:\n\n1. `FIREBASE_USERNAME` \\- The Firebase user (email address) that was added above\n2. `FIREBASE_PASSWORD` \\- The Firebase user password that was added above\n3. `FIREBASE_CONFIG` \\- The configuration of the Firebase application as a string of JSON\n\nThe configuration needs to be a valid JSON string to be readable by the application. If the code snippet given when setting up looked like this:\n\n```highlight notranslate js\nvar firebaseConfig = {\n  apiKey: \"APIKEY\",\n  authDomain: \"example-12345.firebaseapp.com\",\n  projectId: \"example-12345\",\n  storageBucket: \"example-12345.appspot.com\",\n  messagingSenderId: \"1234567890\",\n  appId: \"APPID\",\n};\n```\n\nYou would need to set the value of the string to this (noting that spacing and new lines are not required):\n\n```highlight notranslate json\n{\n  \"apiKey\": \"APIKEY\",\n  \"authDomain\": \"example-12345.firebaseapp.com\",\n  \"projectId\": \"example-12345\",\n  \"storageBucket\": \"example-12345.appspot.com\",\n  \"messagingSenderId\": \"1234567890\",\n  \"appId\": \"APPID\"\n}\n```\n\nClick to save the variables.\n\nNow let's take our API for a spin.\n\nWe can create a new song:\n\n```highlight notranslate sh\ncurl --request POST \\\n  --header \"Content-Type: application/json\" \\\n  --data '{\"title\": \"Old Town Road\", \"artist\": \"Lil Nas X\", \"album\": \"7\", \"released\": \"2019\", \"genres\": \"Country rap, Pop\"}' \\\n  --dump-header \\\n  - https://<project_name>.deno.dev/songs\n```\n\nAnd we can get all the songs in our collection:\n\n```highlight notranslate sh\ncurl https://<project_name>.deno.dev/songs\n```\n\nAnd we get specific information about a title we created:\n\n```highlight notranslate sh\ncurl https://<project_name>.deno.dev/songs/Old%20Town%20Road\n```\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-firebase", "title": "API server with Firestore (Firebase)", "description": "Firebase is a platform developed by Google for creating mobile and web applications. You can persist data on the platform using Firestore. In this tutorial let's take a look at how we can use it to build a small API that has endpoints to insert and retrieve information.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:44:40", "type": "overview", "page_metadata": {"og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "title": "API server with Firestore (Firebase)", "og:site_name": "Deno", "og:image": "/img/og.webp", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "API server with Firestore (Firebase)", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "API server with Firestore (Firebase)", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "API server with Firestore (Firebase)", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "ogSiteName": "Deno", "og:type": "article", "scrapeId": "3a4583e3-b18e-480d-a9f8-05dd62c29005", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-firebase", "url": "https://docs.deno.com/deploy/tutorials/tutorial-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"API server with Firestore (Firebase)\"?\n\nAssistant: Here are some code examples:\n\n### GET all songs\n```yaml\nGET /songs\n# response\n[\\\n  {\\\n    title: \"Song Title\",\\\n    artist: \"Someone\",\\\n    album: \"Something\",\\\n    released: \"1970\",\\\n    genres: \"country rap\",\\\n  }\\\n]\n```\n\n### GET specific song\n```yaml\nGET /songs/Song%20Title # '%20' == space\n# response\n{\n  title: \"Song Title\"\n  artist: \"Someone\"\n  album: \"Something\",\n  released: \"1970\",\n  genres: \"country rap\",\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-firebase", "title": "API server with Firestore (Firebase)", "description": "Firebase is a platform developed by Google for creating mobile and web applications. You can persist data on the platform using Firestore. In this tutorial let's take a look at how we can use it to build a small API that has endpoints to insert and retrieve information.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:44:40", "type": "code_examples", "page_metadata": {"og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "title": "API server with Firestore (Firebase)", "og:site_name": "Deno", "og:image": "/img/og.webp", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "API server with Firestore (Firebase)", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "API server with Firestore (Firebase)", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "API server with Firestore (Firebase)", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "ogSiteName": "Deno", "og:type": "article", "scrapeId": "3a4583e3-b18e-480d-a9f8-05dd62c29005", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-firebase", "url": "https://docs.deno.com/deploy/tutorials/tutorial-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"API server with Firestore (Firebase)\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the web libraries for Firebase under deploy as it is more compatible with web standards.\n• Check the current versions of packages as they may not be up-to-date.\n• Ensure the Firebase configuration is a valid JSON string when setting environment variables.\n", "metadata": {"source_url": "https://docs.deno.com/deploy/tutorials/tutorial-firebase", "title": "API server with Firestore (Firebase)", "description": "Firebase is a platform developed by Google for creating mobile and web applications. You can persist data on the platform using Firestore. In this tutorial let's take a look at how we can use it to build a small API that has endpoints to insert and retrieve information.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 02:44:40", "type": "best_practices", "page_metadata": {"og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:image": "/img/og.webp", "title": "API server with Firestore (Firebase)", "og:site_name": "Deno", "og:image": "/img/og.webp", "language": "en", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "API server with Firestore (Firebase)", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "API server with Firestore (Firebase)", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "API server with Firestore (Firebase)", "ogImage": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "ogSiteName": "Deno", "og:type": "article", "scrapeId": "3a4583e3-b18e-480d-a9f8-05dd62c29005", "sourceURL": "https://docs.deno.com/deploy/tutorials/tutorial-firebase", "url": "https://docs.deno.com/deploy/tutorials/tutorial-firebase/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Unstable feature flags\"?\n\nAssistant: New features of the Deno runtime are often released behind feature flags, so users can try out new APIs and features before they are finalized. Current unstable feature flags are listed on this page, and can also be found in the CLI help text by running:\n\nHere's a detailed explanation:\n\n\n## Using flags at the command line\nYou can enable a feature flag when you run a Deno program from the command line by passing in the flag as an option to the CLI. Here's an example of running a program with the `--unstable-node-globals` flag enabled:\n\n```highlight notranslate sh\ndeno run --unstable-node-globals main.ts\n```\n\n\n## Configuring flags in `deno.json`\nYou can specify which unstable features you'd like to enable for your project using a [configuration option in `deno.json`](https://docs.deno.com/runtime/fundamentals/configuration/).\n\ndeno.json\n\n```highlight notranslate json\n{\n  \"unstable\": [\"bare-node-builtins\", \"webgpu\"]\n}\n```\n\nThe possible values in the `unstable` array are the flag names with the `--unstable-` prefix removed.\n\n## Configuration via environment variables\nSome flags can be enabled by setting a value (any value) for an environment variable of a given name, rather than being passed as a flag or `deno.json` configuration option. Flags that are settable via environment variables will be noted below.\n\nHere's an example of setting the `--unstable-bare-node-builtins` flag via environment variable:\n\n```highlight notranslate sh\nexport DENO_UNSTABLE_BARE_NODE_BUILTINS=true\n```\n\n## --unstable-bare-node-builtins\n**Environment variable:** `DENO_UNSTABLE_BARE_NODE_BUILTINS`\n\nThis flag enables you to [import Node.js built-in modules](https://docs.deno.com/runtime/fundamentals/node/#node-built-in-modules) without a `node:` specifier, as in the example below. You can also use this flag to enable npm packages without an `npm:` specifier if you are manually managing your Node.js dependencies ( [see `byonm` flag](https://docs.deno.com/runtime/reference/cli/unstable_flags/#--unstable-byonm)).\n\nexample.ts\n\n```highlight notranslate ts\nimport { readFileSync } from \"fs\";\n\nconsole.log(readFileSync(\"deno.json\", { encoding: \"utf8\" }));\n```\n\n## --unstable-detect-cjs\n**Environment variable:** `DENO_UNSTABLE_DETECT_CJS`\n\nLoads `.js`, `.jsx`, `.ts`, and `.tsx` modules as possibly being CommonJS in the following additional scenarios:\n\n1. The _package.json_ has no `\"type\"` field.\n2. No _package.json_ exists.\n\nBy default, Deno only loads these modules as being possibly CommonJS when you're in a project with a _package.json_ and the closest _package.json_ has `{ \"type\": \"commonjs\" }`.\n\nRequires Deno >= 2.1.2\n\n## --unstable-node-globals\nThis flags injects Node specific globals into the global scope. The injected globals are:\n\n- `Buffer`\n- `global`\n- `setImmediate`\n- `clearImmediate`\n\nNote, that `process` is already available as a global starting with Deno 2.0.\n\nRequires Deno >= 2.1.0\n\n## --unstable-sloppy-imports\n**Environment variable:** `DENO_UNSTABLE_SLOPPY_IMPORTS`\n\nThis flag enables behavior which will infer file extensions from imports that do not include them. Normally, the import statement below would produce an error:\n\nfoo.ts\n\n```highlight notranslate ts\nimport { Example } from \"./bar\";\nconsole.log(Example);\n```\n\nbar.ts\n\n```highlight notranslate ts\nexport const Example = \"Example\";\n```\n\nExecuting the script with sloppy imports enabled will remove the error, but provide guidance that a more performant syntax should be used.\n\nSloppy imports will allow (but print warnings for) the following:\n\n- Omit file extensions from imports\n- Use incorrect file extensions (e.g. importing with a `.js` extension when the actual file is `.ts`)\n- Import a directory path, and automatically use `index.js` or `index.ts` as the import for that directory\n\n[`deno compile`](https://docs.deno.com/runtime/reference/cli/compile/) does not support sloppy imports.\n\n## --unstable-unsafe-proto\nDeno made a conscious decision to not support `Object.prototype.__proto__` for security reasons. However there are still many npm packages that rely on this property to work correctly.\n\nThis flag enables this property. Note that it is not recommended to use this, but if you really need to use a package that relies on it, the escape hatch is now available to you.\n\n## --unstable-webgpu\nEnable the [`WebGPU` API](https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API) in the global scope, as in the browser. Below is a simple example to get basic information about the GPU using this API:\n\n```highlight notranslate ts\n// Try to get an adapter from the user agent.\nconst adapter = await navigator.gpu.requestAdapter();\nif (adapter) {\n  // Print out some basic details about the adapter.\n  const adapterInfo = await adapter.requestAdapterInfo();\n\n  // On some systems this will be blank...\n  console.log(`Found adapter: ${adapterInfo.device}`);\n\n  // Print GPU feature list\n  const features = [...adapter.features.values()];\n  console.log(`Supported features: ${features.join(\", \")}`);\n} else {\n  console.error(\"No adapter found\");\n}\n``` \n\nCheck out [this repository](https://github.com/denoland/webgpu-examples) for more examples using WebGPU.\n\n## --unstable-broadcast-channel\nEnabling this flag makes the [`BroadcastChannel`](https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel) web API available for use in the global scope, as in the browser.\n\n## --unstable-worker-options\nEnable unstable [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers) API options. Specifically, it enables you to specify permissions available to workers:\n\n```highlight notranslate ts\nnew Worker(`data:application/javascript;base64,${btoa(`postMessage(\"ok\");`)}`, {\n  type: \"module\",\n  deno: {\n    permissions: {\n      read: true,\n    },\n  },\n}).onmessage = ({ data }) => {\n  console.log(data);\n};\n```\n\n## --unstable-cron\nEnabling this flag makes the [`Deno.cron`](https://docs.deno.com/deploy/kv/manual/cron) API available on the `Deno` namespace.\n\n## --unstable-kv\nEnabling this flag makes [Deno KV](https://docs.deno.com/deploy/kv/manual) APIs available in the `Deno` namespace.\n\n## --unstable-net\nEnable unstable net APIs in the `Deno` namespace. These APIs include:\n\n- [`Deno.DatagramConn`](https://docs.deno.com/api/deno/~/Deno.DatagramConn) \n\n## --unstable-otel\nEnable the [OpenTelemetry integration for Deno](https://docs.deno.com/runtime/fundamentals/open_telemetry).\n\n## --unstable\n--unstable is deprecated - use granular flags instead\n\nThe `--unstable` flag is no longer being used for new features, and will be removed in a future release. All unstable features that were available using this flag are now available as granular unstable flags, notably:\n\n- `--unstable-kv`\n- `--unstable-cron`\n\nPlease use these feature flags instead moving forward.\n\nBefore more recent Deno versions (1.38+), unstable APIs were made available all at once using the `--unstable` flag. Notably, [Deno KV](https://docs.deno.com/deploy/kv/manual) and other cloud primitive APIs are available behind this flag. To run a program with access to these unstable features, you would run your script with:\n\n```highlight notranslate sh\ndeno run --unstable your_script.ts\n```\n\nIt is recommended that you use the granular unstable flags instead of this, the `--unstable` flag is now deprecated and will be removed in Deno 2.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/unstable_flags", "title": "Unstable feature flags", "description": "New features of the Deno runtime are often released behind feature flags, so users can try out new APIs and features before they are finalized. Current unstable feature flags are listed on this page, and can also be found in the CLI help text by running:", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 02:55:00", "type": "overview", "page_metadata": {"og:title": "Unstable feature flags", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "title": "Unstable feature flags", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Unstable feature flags", "ogLocale": "en_US", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:type": "article", "twitter:title": "Unstable feature flags", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "836ad4cb-5d7a-41dc-9379-9e7a01da29fc", "sourceURL": "https://docs.deno.com/runtime/reference/cli/unstable_flags", "url": "https://docs.deno.com/runtime/reference/cli/unstable_flags/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Unstable feature flags\"?\n\nAssistant: Here are some code examples:\n\n### Using flags at the command line example\n```yaml\ndeno run --unstable-node-globals main.ts\n```\n\n### Configuring flags in deno.json example\n```yaml\n{\n  \"unstable\": [\"bare-node-builtins\", \"webgpu\"]\n} \n```\n\n### Setting environment variable example\n```yaml\nexport DENO_UNSTABLE_BARE_NODE_BUILTINS=true\n```\n\n### --unstable-bare-node-builtins example\n```yaml\nimport { readFileSync } from \"fs\";\n\nconsole.log(readFileSync(\"deno.json\", { encoding: \"utf8\" }));\n```\n\n### --unstable-sloppy-imports example\n```yaml\nimport { Example } from \"./bar\";\nconsole.log(Example);\n```\n\n### --unstable-worker-options example\n```yaml\nnew Worker(`data:application/javascript;base64,${btoa(`postMessage(\"ok\");`)}`, {\n  type: \"module\",\n  deno: {\n    permissions: {\n      read: true,\n    },\n  },\n}).onmessage = ({ data }) => {\n  console.log(data);\n};\n```\n\n### --unstable-webgpu example\n```yaml\nconst adapter = await navigator.gpu.requestAdapter();\nif (adapter) {\n  const adapterInfo = await adapter.requestAdapterInfo();\n  console.log(`Found adapter: ${adapterInfo.device}`);\n  const features = [...adapter.features.values()];\n  console.log(`Supported features: ${features.join(\", \")}`);\n} else {\n  console.error(\"No adapter found\");\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/unstable_flags", "title": "Unstable feature flags", "description": "New features of the Deno runtime are often released behind feature flags, so users can try out new APIs and features before they are finalized. Current unstable feature flags are listed on this page, and can also be found in the CLI help text by running:", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 02:55:00", "type": "code_examples", "page_metadata": {"og:title": "Unstable feature flags", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "title": "Unstable feature flags", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Unstable feature flags", "ogLocale": "en_US", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:type": "article", "twitter:title": "Unstable feature flags", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "836ad4cb-5d7a-41dc-9379-9e7a01da29fc", "sourceURL": "https://docs.deno.com/runtime/reference/cli/unstable_flags", "url": "https://docs.deno.com/runtime/reference/cli/unstable_flags/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Unstable feature flags\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use granular unstable flags instead of the deprecated --unstable flag.\n• Check the CLI help text for a list of available feature flags.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/unstable_flags", "title": "Unstable feature flags", "description": "New features of the Deno runtime are often released behind feature flags, so users can try out new APIs and features before they are finalized. Current unstable feature flags are listed on this page, and can also be found in the CLI help text by running:", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-28 02:55:00", "type": "best_practices", "page_metadata": {"og:title": "Unstable feature flags", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "title": "Unstable feature flags", "favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:image": "/img/og.webp", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogTitle": "Unstable feature flags", "ogLocale": "en_US", "language": "en", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "ogImage": "/img/og.webp", "ogSiteName": "Deno", "og:type": "article", "twitter:title": "Unstable feature flags", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "scrapeId": "836ad4cb-5d7a-41dc-9379-9e7a01da29fc", "sourceURL": "https://docs.deno.com/runtime/reference/cli/unstable_flags", "url": "https://docs.deno.com/runtime/reference/cli/unstable_flags/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Deno Style Guide\"?\n\nAssistant: This is the style guide for internal runtime code in the Deno runtime, and in the Deno Standard Library. This is not meant as a general style guide for users of Deno.\n\nHere's a detailed explanation:\n\n\n## Copyright Headers\nMost modules in the repository should have the following copyright header:\n\n```highlight notranslate ts\n// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n```\n\nIf the code originates elsewhere, ensure that the file has the proper copyright headers. We only allow MIT, BSD, and Apache licensed code.\n\n## Use underscores, not dashes in filenames\nExample: Use `file_server.ts` instead of `file-server.ts`.\n\n## Add tests for new features\nEach module should contain or be accompanied by tests for its public functionality.\n\n## TODO Comments\nTODO comments should usually include an issue or the author's github username in parentheses. Example:\n\n```highlight notranslate ts\n// TODO(ry): Add tests.\n// TODO(#123): Support Windows.\n// FIXME(#349): Sometimes panics.\n```\n\n## Meta-programming is discouraged. Including the use of Proxy\nBe explicit, even when it means more code.\n\nThere are some situations where it may make sense to use such techniques, but in the vast majority of cases it does not.\n\n## Inclusive code\nPlease follow the guidelines for inclusive code outlined at [https://chromium.googlesource.com/chromium/src/+/HEAD/styleguide/inclusive_code.md](https://chromium.googlesource.com/chromium/src/+/HEAD/styleguide/inclusive_code.md).\n\n## Rust\nFollow Rust conventions and be consistent with existing code.\n\n## TypeScript\nThe TypeScript portion of the code base is the standard library `std`.\n\n## Use TypeScript instead of JavaScript\n\n\n## Do not use the filename index.ts/index.js\nDeno does not treat \"index.js\" or \"index.ts\" in a special way. By using these filenames, it suggests that they can be left out of the module specifier when they cannot. This is confusing.\n\nIf a directory of code needs a default entry point, use the filename `mod.ts`. The filename `mod.ts` follows Rust's convention, is shorter than `index.ts`, and doesn't come with any preconceived notions about how it might work.\n\n## Exported functions: max 2 args, put the rest into an options object\nWhen designing function interfaces, stick to the following rules.\n\n1. A function that is part of the public API takes 0-2 required arguments, plus (if necessary) an options object (so max 3 total).\n\n2. Optional parameters should generally go into the options object.\n\nAn optional parameter that's not in an options object might be acceptable if there is only one, and it seems inconceivable that we would add more optional parameters in the future.\n\n3. The 'options' argument is the only argument that is a regular 'Object'.\n\nOther arguments can be objects, but they must be distinguishable from a 'plain' Object runtime, by having either:\n\n   - a distinguishing prototype (e.g. `Array`, `Map`, `Date`, `class MyThing`).\n   - a well-known symbol property (e.g. an iterable with `Symbol.iterator`).\n\nThis allows the API to evolve in a backwards compatible way, even when the position of the options object changes.\n\n```highlight notranslate ts\n// BAD: optional parameters not part of options object. (#2)\nexport function resolve(\n  hostname: string,\n  family?: \"ipv4\" | \"ipv6\",\n  timeout?: number,\n): IPAddress[] {}\n```\n\n```highlight notranslate ts\n// GOOD.\nexport interface ResolveOptions {\n  family?: \"ipv4\" | \"ipv6\";\n  timeout?: number;\n}\nexport function resolve(\n  hostname: string,\n  options: ResolveOptions = {},\n): IPAddress[] {}\n```\n\n```highlight notranslate ts\nexport interface Environment {\n  [key: string]: string;\n}\n\n// BAD: `env` could be a regular Object and is therefore indistinguishable\n// from an options object. (#3)\nexport function runShellWithEnv(cmdline: string, env: Environment): string {}\n\n// GOOD.\nexport interface RunShellOptions {\n  env: Environment;\n}\nexport function runShellWithEnv(\n  cmdline: string,\n  options: RunShellOptions,\n): string {}\n```\n\n```highlight notranslate ts\n// BAD: more than 3 arguments (#1), multiple optional parameters (#2).\nexport function renameSync(\n  oldname: string,\n  newname: string,\n  replaceExisting?: boolean,\n  followLinks?: boolean,\n) {}\n```\n\n```highlight notranslate ts\n// GOOD.\ninterface RenameOptions {\n  replaceExisting?: boolean;\n  followLinks?: boolean;\n}\nexport function renameSync(\n  oldname: string,\n  newname: string,\n  options: RenameOptions = {},\n) {}\n```\n\n```highlight notranslate ts\n// BAD: too many arguments. (#1)\nexport function pwrite(\n  fd: number,\n  buffer: ArrayBuffer,\n  offset: number,\n  length: number,\n  position: number,\n) {}\n```\n\n```highlight notranslate ts\n// BETTER.\nexport interface PWrite {\n  fd: number;\n  buffer: ArrayBuffer;\n  offset: number;\n  length: number;\n  position: number;\n}\nexport function pwrite(options: PWrite) {}\n```\n\nNote: When one of the arguments is a function, you can adjust the order flexibly. See examples like\n[Deno.serve](https://docs.deno.com/api/deno/~/Deno.serve),\n[Deno.test](https://docs.deno.com/api/deno/~/Deno.test),\n[Deno.addSignalListener](https://docs.deno.com/api/deno/~/Deno.addSignalListener). See also\n[this post](https://twitter.com/jaffathecake/status/1646798390355697664).\n\n## Export all interfaces that are used as parameters to an exported member\nWhenever you are using interfaces that are included in the parameters or return type of an exported member, you should export the interface that is used. Here is an example:\n\n```highlight notranslate ts\n// my_file.ts\nexport interface Person {\n  name: string;\n  age: number;\n}\n\nexport function createPerson(name: string, age: number): Person {\n  return { name, age };\n}\n\n// mod.ts\nexport { createPerson } from \"./my_file.ts\";\nexport type { Person } from \"./my_file.ts\";\n```\n\n## Minimize dependencies; do not make circular imports\nAlthough `std` has no external dependencies, we must still be careful to keep internal dependencies simple and manageable. In particular, be careful not to introduce circular imports.\n\n## If a filename starts with an underscore: _foo.ts, do not link to it\nThere may be situations where an internal module is necessary but its API is not meant to be stable or linked to. In this case prefix it with an underscore. By convention, only files in its own directory should import it.\n\n## Use JSDoc for exported symbols\nWe strive for complete documentation. Every exported symbol ideally should have a documentation line.\n\nIf possible, use a single line for the JSDoc. Example:\n\n```highlight notranslate ts\n/** foo does bar. */\nexport function foo() {\n  // ...\n}\n```\n\nIt is important that documentation is easily human-readable, but there is also a need to provide additional styling information to ensure generated documentation is more rich text. Therefore JSDoc should generally follow markdown markup to enrich the text.\n\nWhile markdown supports HTML tags, it is forbidden in JSDoc blocks.\n\nCode string literals should be braced with the back-tick (`) instead of quotes. For example:\n\n```highlight notranslate ts\n/** Import something from the `deno` module. */\n```\n\nDo not document function arguments unless they are non-obvious of their intent (though if they are non-obvious intent, the API should be considered anyways). Therefore `@param` should generally not be used. If `@param` is used, it should not include the `type` as TypeScript is already strongly-typed.\n\n```highlight notranslate ts\n/**\n * Function with non-obvious param.\n * @param foo Description of non-obvious parameter.\n */\n```\n\nVertical spacing should be minimized whenever possible. Therefore, single-line comments should be written as:\n\n```highlight notranslate ts\n/** This is a good single-line JSDoc. */\n```\n\nAnd not:\n\n```highlight notranslate ts\n/**\n * This is a bad single-line JSDoc.\n */\n```\n\nCode examples should utilize markdown format, like so:\n````highlight notranslate ts\n/** A straightforward comment and an example:\n * ```ts\n * import { foo } from \"deno\";\n * foo(\"bar\");\n * ```\n */\n````\n\nCode examples should not contain additional comments and must not be indented. It is already inside a comment. If it needs further comments, it is not a good example.\n\n## Resolve linting problems using directives\nCurrently, the building process uses `dlint` to validate linting problems in the code. If the task requires code that is non-conformant to linter use `deno-lint-ignore <code>` directive to suppress the warning.\n\n```highlight notranslate typescript\n// deno-lint-ignore no-explicit-any\nlet x: any;\n```\n\nThis ensures the continuous integration process doesn't fail due to linting problems, but it should be used scarcely.\n\n## Each module should come with a test module\nEvery module with public functionality `foo.ts` should come with a test module `foo_test.ts`. A test for a `std` module should go in `std/tests` due to their different contexts; otherwise, it should just be a sibling to the tested module.\n\n## Unit Tests should be explicit\nFor a better understanding of the tests, function should be correctly named as it's prompted throughout the test command. Like:\n\n```highlight notranslate console\nfoo() returns bar object ... ok\n```\n\nExample of test:\n\n```highlight notranslate ts\nimport { assertEquals } from \"@std/assert\";\nimport { foo } from \"./mod.ts\";\n\nDeno.test(\"foo() returns bar object\", function () {\n  assertEquals(foo(), { bar: \"bar\" });\n});\n```\n\nNote: See [tracking issue](https://github.com/denoland/deno_std/issues/3754) for more information.\n\n## Top-level functions should not use arrow syntax\nTop-level functions should use the `function` keyword. Arrow syntax should be limited to closures.\n\nBad:\n\n```highlight notranslate ts\nexport const foo = (): string => {\n  return \"bar\";\n};\n```\n\nGood:\n\n```highlight notranslate ts\nexport function foo(): string {\n  return \"bar\";\n}\n```\n\n## Error Messages\nUser-facing error messages raised from JavaScript / TypeScript should be clear, concise, and consistent. Error messages should be in sentence case but should not end with a period. Error messages should be free of grammatical errors and typos and written in American English.\n\nNote\n\nNote that the error message style guide is a work in progress, and not all the error messages have been updated to conform to the current styles.\n\nError message styles that should be followed:\n\n1. Messages should start with an upper case:\n\n```highlight notranslate sh\nBad: cannot parse input\nGood: Cannot parse input\n```\n\n2. Messages should not end with a period:\n\n```highlight notranslate sh\nBad: Cannot parse input.\nGood: Cannot parse input\n```\n\n3. Message should use quotes for values for strings:\n\n```highlight notranslate sh\nBad: Cannot parse input hello, world\nGood: Cannot parse input \"hello, world\"\n```\n\n4. Message should state the action that lead to the error:\n\n```highlight notranslate sh\nBad: Invalid input x\nGood: Cannot parse input x\n```\n\n5. Active voice should be used:\n\n```highlight notranslate sh\nBad: Input x cannot be parsed\nGood: Cannot parse input x\n```\n\n6. Messages should not use contractions:\n\n```highlight notranslate sh\nBad: Can't parse input x\nGood: Cannot parse input x\n```\n\n7. Messages should use a colon when providing additional information. Periods should never be used. Other punctuation may be used as needed:\n\n```highlight notranslate sh\nBad: Cannot parse input x. value is empty\nGood: Cannot parse input x: value is empty\n```\n\n8. Additional information should describe the current state, if possible, it should also describe the desired state in an affirmative voice:\n\n```highlight notranslate sh\nBad: Cannot compute the square root for x: value must not be negative\nGood: Cannot compute the square root for x: current value is ${x}\nBetter: Cannot compute the square root for x as x must be >= 0: current value is ${x}\n```\n\n## std\n\n\n## Do not depend on external code.\n`https://jsr.io/@std` is intended to be baseline functionality that all Deno programs can rely on. We want to guarantee to users that this code does not include potentially unreviewed third-party code.\n\n## Document and maintain browser compatibility.\nIf a module is browser-compatible, include the following in the JSDoc at the top of the module:\n\n```highlight notranslate ts\n// This module is browser-compatible.\n```\n\nMaintain browser compatibility for such a module by either not using the global `Deno` namespace or feature-testing for it. Make sure any new dependencies are also browser compatible.\n\n## Prefer # over private keyword\nWe prefer the private fields ( `#`) syntax over `private` keyword of TypeScript in the standard modules codebase. The private fields make the properties and methods private even at runtime. On the other hand, `private` keyword of TypeScript guarantee it private only at compile time and the fields are publicly accessible at runtime.\n\nGood:\n\n```highlight notranslate ts\nclass MyClass {\n  #foo = 1;\n  #bar() {}\n}\n```\n\nBad:\n\n```highlight notranslate ts\nclass MyClass {\n  private foo = 1;\n  private bar() {}\n}\n```\n\n## Naming convention\nUse `camelCase` for functions, methods, fields, and local variables. Use `PascalCase` for classes, types, interfaces, and enums. Use `UPPER_SNAKE_CASE` for static top-level items, such as `string`, `number`, `bigint`, `boolean`, `RegExp`, arrays of static items, records of static keys and values, etc.\n\nGood:\n\n```highlight notranslate ts\nfunction generateKey() {}\n\nlet currentValue = 0;\n\nclass KeyObject {}\n\ntype SharedKey = {};\n\nenum KeyType {\n  PublicKey,\n  PrivateKey,\n}\n\nconst KEY_VERSION = \"1.0.0\";\n\nconst KEY_MAX_LENGTH = 4294967295;\n\nconst KEY_PATTERN = /^[0-9a-f]+$/;\n```\n\nBad:\n\n```highlight notranslate ts\nfunction generate_key() {}\n\nlet current_value = 0;\n\nfunction GenerateKey() {}\n\nclass keyObject {}\n\ntype sharedKey = {};\n\nenum keyType {\n  publicKey,\n  privateKey,\n}\n\nconst key_version = \"1.0.0\";\n\nconst key_maxLength = 4294967295;\n\nconst KeyPattern = /^[0-9a-f]+$/;\n```\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/style_guide", "title": "Deno Style Guide", "description": "This is the style guide for internal runtime code in the Deno runtime, and in the Deno Standard Library. This is not meant as a general style guide for users of Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 25, "timestamp": "2025-02-28 03:01:14", "type": "overview", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogLocale": "en_US", "twitter:title": "Deno Style Guide", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:site_name": "Deno", "og:type": "article", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Deno Style Guide", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Deno Style Guide", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "Deno Style Guide", "scrapeId": "e8ae7590-0946-40ca-952f-1db5a5cb14fc", "sourceURL": "https://docs.deno.com/runtime/contributing/style_guide", "url": "https://docs.deno.com/runtime/contributing/style_guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Deno Style Guide\"?\n\nAssistant: Here are some code examples:\n\n### Copyright Header Example\n```yaml\n// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n```\n\n### TODO Comments Example\n```yaml\n// TODO(ry): Add tests.\n// TODO(#123): Support Windows.\n// FIXME(#349): Sometimes panics.\n```\n\n### Use underscores, not dashes in filenames Example\n```yaml\nUse `file_server.ts` instead of `file-server.ts`.\n```\n\n### Exported functions Example\n```yaml\n// BAD: optional parameters not part of options object. (#2)\nexport function resolve(\n  hostname: string,\n  family?: \"ipv4\" | \"ipv6\",\n  timeout?: number,\n): IPAddress[] {}\n\n// GOOD.\nexport interface ResolveOptions {\n  family?: \"ipv4\" | \"ipv6\";\n  timeout?: number;\n}\nexport function resolve(\n  hostname: string,\n  options: ResolveOptions = {},\n): IPAddress[] {}\n\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/style_guide", "title": "Deno Style Guide", "description": "This is the style guide for internal runtime code in the Deno runtime, and in the Deno Standard Library. This is not meant as a general style guide for users of Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 25, "timestamp": "2025-02-28 03:01:14", "type": "code_examples", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogLocale": "en_US", "twitter:title": "Deno Style Guide", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:site_name": "Deno", "og:type": "article", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Deno Style Guide", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Deno Style Guide", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "Deno Style Guide", "scrapeId": "e8ae7590-0946-40ca-952f-1db5a5cb14fc", "sourceURL": "https://docs.deno.com/runtime/contributing/style_guide", "url": "https://docs.deno.com/runtime/contributing/style_guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Deno Style Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use underscores, not dashes in filenames.\n• Add tests for new features.\n• Use JSDoc for exported symbols.\n• Minimize dependencies; do not make circular imports.\n• Each module should come with a test module.\n• Unit Tests should be explicit.\n• Top-level functions should not use arrow syntax.\n• User-facing error messages should be clear, concise, and consistent.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/contributing/style_guide", "title": "Deno Style Guide", "description": "This is the style guide for internal runtime code in the Deno runtime, and in the Deno Standard Library. This is not meant as a general style guide for users of Deno.", "has_code_examples": true, "has_best_practices": true, "section_count": 25, "timestamp": "2025-02-28 03:01:14", "type": "best_practices", "page_metadata": {"twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image": "/img/og.webp", "ogLocale": "en_US", "twitter:title": "Deno Style Guide", "twitter:card": "summary_large_image", "twitter:site": "@deno_land", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "og:site_name": "Deno", "og:type": "article", "twitter:image": "/img/og.webp", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Deno Style Guide", "ogImage": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogTitle": "Deno Style Guide", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "title": "Deno Style Guide", "scrapeId": "e8ae7590-0946-40ca-952f-1db5a5cb14fc", "sourceURL": "https://docs.deno.com/runtime/contributing/style_guide", "url": "https://docs.deno.com/runtime/contributing/style_guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Build an app with Tanstack and Deno\"?\n\nAssistant: This tutorial covers building a simple app using Tanstack Query and Tanstack Router to display a list of dinosaurs and their details.\n\nHere's a detailed explanation:\n\n\n## Start with the backend API\nWithin our main directory, let's setup an `api/` directory and create our dinosaur data file, `api/data.json`:\n\n```highlight notranslate jsonc\n// api/data.json\n\n[\\\n  {\\\n    \"name\": \"Aardonyx\",\\\n    \"description\": \"An early stage in the evolution of sauropods.\"\\\n  },\\\n  {\\\n    \"name\": \"Abelisaurus\",\\\n    \"description\": \"\\\"Abel's lizard\\\" has been reconstructed from a single skull.\"\\\n  },\\\n  {\\\n    \"name\": \"Abrictosaurus\",\\\n    \"description\": \"An early relative of Heterodontosaurus.\"\\\n  },\\\n  ...\\\n]\n```\n\nThis is where our data will be pulled from. In a full application, this data would come from a database.\n\n> ⚠️️ In this tutorial we hard code the data. But you can connect to [a variety of databases](https://docs.deno.com/runtime/tutorials/connecting_to_databases/) and [even use ORMs like Prisma](https://docs.deno.com/runtime/tutorials/how_to_with_npm/prisma/) with Deno.\n\nSecondly, let's create our [Hono](https://hono.dev/) server. We start by installing Hono from [JSR](https://jsr.io/) with `deno add`:\n\n```highlight notranslate shell\ndeno add jsr:@hono/hono\n```\n\nNext, let's create an `api/main.ts` file and populate it with the below. Note we'll need to import [`@hono/hono/cors`](https://hono.dev/docs/middleware/builtin/cors) and define key attributes to allow the frontend to access the API routes.\n\n```highlight notranslate ts\n// api/main.ts\n\nimport { Hono } from \"@hono/hono\";\nimport { cors } from \"@hono/hono/cors\";\nimport data from \"./data.json\" with { type: \"json\" };\n\nconst app = new Hono();\n\napp.use(\n  \"/api/*\",\n  cors({\n    origin: \"http://localhost:5173\",\n    allowMethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allowHeaders: [\"Content-Type\", \"Authorization\"],\n    exposeHeaders: [\"Content-Type\", \"Authorization\"],\n    credentials: true,\n    maxAge: 600,\n  }),\n);\n\napp.get(\"/\", (c) => {\n  return c.text(\"Welcome to the dinosaur API!\");\n});\n\napp.get(\"/api/dinosaurs\", (c) => {\n  return c.json(data);\n});\n\napp.get(\"/api/dinosaurs/:dinosaur\", (c) => {\n  if (!c.req.param(\"dinosaur\")) {\n    return c.text(\"No dinosaur name provided.\");\n  }\n\n  const dinosaur = data.find((item) =>\n    item.name.toLowerCase() === c.req.param(\"dinosaur\").toLowerCase()\n  );\n\n  if (dinosaur) {\n    return c.json(dinosaur);\n  } else {\n    return c.notFound();\n  }\n});\n\nDeno.serve(app.fetch);\n```\n\nThe Hono server provides two API endpoints:\n\n- `GET /api/dinosaurs` to fetch all dinosaurs, and\n- `GET /api/dinosaurs/:dinosaur` to fetch a specific dinosaur by name\n\nBefore we start working on the frontend, let's update our `deno tasks` in our `deno.json` file. Yours should look something like this:\n\n```highlight notranslate jsonc\n{\n  \"tasks\": {\n    \"dev\": \"deno --allow-env --allow-net api/main.ts\"\n  }\n  // ...\n}\n```\n\nNow, the backend server will be started on `localhost:8000` when we run `deno task dev`.\n\n## Create Tanstack-driven frontend\nLet's create the frontend that will use this data. First, we'll quickly scaffold a new React app with Vite using the TypeScript template in the current directory:\n\n```highlight notranslate shell\ndeno init --npm vite@latest --template react-ts ./\n```\n\nThen, we'll install our Tanstack-specific dependencies:\n\n```highlight notranslate shell\ndeno install npm:@tanstack/react-query npm:@tanstack/react-router\n```\n\nLet's update our `deno tasks` in our `deno.json` to add a command to start the Vite server:\n\n```highlight notranslate jsonc\n// deno.json\n{\n  \"tasks\": {\n    \"dev\": \"deno task dev:api & deno task dev:vite\",\n    \"dev:api\": \"deno --allow-env --allow-net api/main.ts\",\n    \"dev:vite\": \"deno -A npm:vite\"\n  }\n  // ...\n}\n```\n\nWe can move onto building our components. We'll need two main pages for our app:\n\n- `DinosaurList.tsx`: the index page, which will list out all the dinosaurs, and\n- `Dinosaur.tsx`: the leaf page, which displays information about a single dinosaur\n\nLet's create a new `./src/components` directory and, within that, the file `DinosaurList.tsx`:\n\n```highlight notranslate ts\n// ./src/components/DinosaurList.tsx\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"@tanstack/react-router\";\n\nasync function fetchDinosaurs() {\n  const response = await fetch(\"http://localhost:8000/api/dinosaurs/\");\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch dinosaurs\");\n  }\n  return response.json();\n}\n\nexport function DinosaurList() {\n  const {\n    data: dinosaurs,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"dinosaurs\"],\n    queryFn: fetchDinosaurs,\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error instanceof Error) {\n    return <div>An error occurred: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h2 className=\"text-xl font-semibold mb-4\">Dinosaur List</h2>\n      <ul className=\"space-y-2\">\n        {dinosaurs?.map((dino: { name: string; description: string }) => (\n          <li key={dino.name}>\n            <Link\n              to=\"/dinosaur/$name\"\n              params={{ name: dino.name }}\n              className=\"text-blue-500 hover:underline\"\n            >\n              {dino.name}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\nThis uses [`useQuery`](https://tanstack.com/query/v4/docs/framework/react/guides/queries) from **Tanstack Query** to fetch and cache the dinosaur data automatically, with built-in loading and error states. Then it uses [`Link`](https://tanstack.com/router/v1/docs/framework/react/api/router/linkComponent) from **Tanstack Router** to create client-side navigation links with type-safe routing parameters.\n\nNext, let's create the `DinosaurDetail.tsx` component in the `./src/components/` folder, which will show details about a single dinosaur:\n\n```highlight notranslate ts\n// ./src/components/DinosaurDetail.tsx\n\nimport { useParams } from \"@tanstack/react-router\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nasync function fetchDinosaurDetail(name: string) {\n  const response = await fetch(`http://localhost:8000/api/dinosaurs/${name}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch dinosaur detail\");\n  }\n  return response.json();\n}\n\nexport function DinosaurDetail() {\n  const { name } = useParams({ from: \"/dinosaur/$name\" });\n  const {\n    data: dinosaur,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"dinosaur\", name],\n    queryFn: () => fetchDinosaurDetail(name),\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error instanceof Error) {\n    return <div>An error occurred: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h2 className=\"text-xl font-semibold mb-4\">{name}</h2>\n      <p>{dinosaur?.description}</p>\n    </div>\n  );\n}\n```\n\nAgain, this uses `useQuery` from **Tanstack Query** to fetch and cache individual dinosaur details, with [`queryKey`](https://tanstack.com/query/latest/docs/framework/react/guides/query-keys) including the dinosaur name to ensure proper caching. Additionally, we use [`useParams`](https://tanstack.com/router/v1/docs/framework/react/api/router/useParamsHook) from **Tanstack Router** to safely extract and type the URL parameters defined in our route configuration.\n\nBefore we can run this, we need to encapsulate these components into a layout. Let's create another file in the `./src/components/` folder called `Layout.tsx`:\n\n```highlight notranslate ts\n// ./src/components/Layout.tsx\n\nexport function Layout() {\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Dinosaur Encyclopedia</h1>\n      <nav className=\"mb-4\">\n        <Link to=\"/\" className=\"text-blue-500 hover:underline\">\n          Home\n        </Link>\n      </nav>\n      <Outlet />\n    </div>\n  );\n}\n```\n\nYou may notice the [`Outlet`](https://tanstack.com/router/v1/docs/framework/react/guide/outlets) component towards the bottom of our newly created layout. This component is from **Tanstack Router** and renders the child route's content, allowing for nested routing while maintaining a consistent layout structure.\n\nNext, we'll have to wire up this layout with `./src/main.tsx`, which an important file that sets up the Tanstack Query client for managing server state and the Tanstack Router for handling navigation:\n\n```highlight notranslate ts\n// ./src/main.tsx\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { createRouter, RouterProvider } from \"@tanstack/react-router\";\nimport { routeTree } from \"./routeTree\";\n\nconst queryClient = new QueryClient();\n\nconst router = createRouter({ routeTree });\n\ndeclare module \"@tanstack/react-router\" {\n  interface Register {\n    router: typeof router;\n  }\n}\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <RouterProvider router={router} />\n    </QueryClientProvider>\n  </React.StrictMode>,\n);\n```\n\nYou'll notice we import [`QueryClientProvider`](https://tanstack.com/query/latest/docs/framework/react/reference/QueryClientProvider), which wraps the entire application to allow for query caching and state management. We also import `RouterProvider`, which connects our defined routes to React's rendering system.\n\nFinally, we'll need to define a [`routeTree.tsx`](https://tanstack.com/router/v1/docs/framework/react/guide/route-trees) file in our `./src/` directory. This file defines our application's routing structure using Tanstack Router's type-safe route definitions:\n\n```highlight notranslate ts\n// ./src/routeTree.tsx\n\nimport { RootRoute, Route } from \"@tanstack/react-router\";\nimport { DinosaurList } from \"./components/DinosaurList\";\nimport { DinosaurDetail } from \"./components/DinosaurDetail\";\nimport { Layout } from \"./components/Layout\";\n\nconst rootRoute = new RootRoute({\n  component: Layout,\n});\n\nconst indexRoute = new Route({\n  getParentRoute: () => rootRoute,\n  path: \"/\",\n  component: DinosaurList,\n});\n\nconst dinosaurRoute = new Route({\n  getParentRoute: () => rootRoute,\n  path: \"dinosaur/$name\",\n  component: DinosaurDetail,\n});\n\nexport const routeTree = rootRoute.addChildren([indexRoute, dinosaurRoute]);\n```\n\nIn `./src/routeTree.tsx`, we create a hierarchy of routes with `Layout` as the root component. Then we set two child routes, their paths and components — one for the dinosaur list, `DinosaurList`, and the other for the individual dinosaur details with a dynamic parameter, `DinosaurDetail.\n\nWith all that complete, we can run this project:\n\n```highlight notranslate shell\ndeno task dev\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/tanstack_tutorial", "title": "Build an app with Tanstack and Deno", "description": "This tutorial covers building a simple app using Tanstack Query and Tanstack Router to display a list of dinosaurs and their details.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 03:26:59", "type": "overview", "page_metadata": {"ogTitle": "Build an app with Tanstack and Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "og:type": "article", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Build an app with Tanstack and Deno", "viewport": "width=device-width, initial-scale=1", "title": "Build an app with Tanstack and Deno", "og:title": "Build an app with Tanstack and Deno", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "067fb762-d330-4ee8-abba-4b4c785a2ad0", "sourceURL": "https://docs.deno.com/examples/tanstack_tutorial", "url": "https://docs.deno.com/examples/tanstack_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Build an app with Tanstack and Deno\"?\n\nAssistant: Here are some code examples:\n\n### Dinosaur Data File\n```yaml\n// api/data.json\n\n[\\\n  {\\\n    \"name\": \"Aardonyx\",\\\n    \"description\": \"An early stage in the evolution of sauropods.\"\\\n  },\\\n  {\\\n    \"name\": \"Abelisaurus\",\\\n    \"description\": \"\\\"Abel's lizard\\\" has been reconstructed from a single skull.\"\\\n  },\\\n  {\\\n    \"name\": \"Abrictosaurus\",\\\n    \"description\": \"An early relative of Heterodontosaurus.\"\\\n  },\\\n  ...\\\n]\n```\n\n### Hono Server Setup\n```yaml\n// api/main.ts\n\nimport { Hono } from \"@hono/hono\";\nimport { cors } from \"@hono/hono/cors\";\nimport data from \"./data.json\" with { type: \"json\" };\n\nconst app = new Hono();\n\napp.use(\n  \"/api/*\",\n  cors({\n    origin: \"http://localhost:5173\",\n    allowMethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allowHeaders: [\"Content-Type\", \"Authorization\"],\n    exposeHeaders: [\"Content-Type\", \"Authorization\"],\n    credentials: true,\n    maxAge: 600,\n  }),\n);\n\napp.get(\"/\", (c) => {\n  return c.text(\"Welcome to the dinosaur API!\");\n});\n\napp.get(\"/api/dinosaurs\", (c) => {\n  return c.json(data);\n});\n\napp.get(\"/api/dinosaurs/:dinosaur\", (c) => {\n  if (!c.req.param(\"dinosaur\")) {\n    return c.text(\"No dinosaur name provided.\");\n  }\n\n  const dinosaur = data.find((item) =>\n    item.name.toLowerCase() === c.req.param(\"dinosaur\").toLowerCase()\n  );\n\n  if (dinosaur) {\n    return c.json(dinosaur);\n  } else {\n    return c.notFound();\n  }\n});\n\nDeno.serve(app.fetch);\n```\n\n### Dinosaur List Component\n```yaml\n// ./src/components/DinosaurList.tsx\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"@tanstack/react-router\";\n\nasync function fetchDinosaurs() {\n  const response = await fetch(\"http://localhost:8000/api/dinosaurs/\");\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch dinosaurs\");\n  }\n  return response.json();\n}\n\nexport function DinosaurList() {\n  const {\n    data: dinosaurs,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"dinosaurs\"],\n    queryFn: fetchDinosaurs,\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error instanceof Error) {\n    return <div>An error occurred: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h2 className=\"text-xl font-semibold mb-4\">Dinosaur List</h2>\n      <ul className=\"space-y-2\">\n        {dinosaurs?.map((dino: { name: string; description: string }) => (\n          <li key={dino.name}>\n            <Link\n              to=\"/dinosaur/$name\"\n              params={{ name: dino.name }}\n              className=\"text-blue-500 hover:underline\"\n            >\n              {dino.name}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/examples/tanstack_tutorial", "title": "Build an app with Tanstack and Deno", "description": "This tutorial covers building a simple app using Tanstack Query and Tanstack Router to display a list of dinosaurs and their details.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 03:26:59", "type": "code_examples", "page_metadata": {"ogTitle": "Build an app with Tanstack and Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "og:type": "article", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Build an app with Tanstack and Deno", "viewport": "width=device-width, initial-scale=1", "title": "Build an app with Tanstack and Deno", "og:title": "Build an app with Tanstack and Deno", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "067fb762-d330-4ee8-abba-4b4c785a2ad0", "sourceURL": "https://docs.deno.com/examples/tanstack_tutorial", "url": "https://docs.deno.com/examples/tanstack_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Build an app with Tanstack and Deno\"?\n\nAssistant: Here are the recommended best practices:\n\n• In this tutorial we hard code the data. But you can connect to a variety of databases and even use ORMs like Prisma with Deno.\n• Use Tanstack Query for efficient data fetching and caching.\n• Utilize Tanstack Router for type-safe routing and navigation.\n", "metadata": {"source_url": "https://docs.deno.com/examples/tanstack_tutorial", "title": "Build an app with Tanstack and Deno", "description": "This tutorial covers building a simple app using Tanstack Query and Tanstack Router to display a list of dinosaurs and their details.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-28 03:26:59", "type": "best_practices", "page_metadata": {"ogTitle": "Build an app with Tanstack and Deno", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "og:image": "/img/og.webp", "og:type": "article", "ogLocale": "en_US", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image": "/img/og.webp", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "Build an app with Tanstack and Deno", "viewport": "width=device-width, initial-scale=1", "title": "Build an app with Tanstack and Deno", "og:title": "Build an app with Tanstack and Deno", "og:site_name": "Deno", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "language": "en", "twitter:site": "@deno_land", "ogImage": "/img/og.webp", "favicon": "https://docs.deno.com/favicon.ico", "scrapeId": "067fb762-d330-4ee8-abba-4b4c785a2ad0", "sourceURL": "https://docs.deno.com/examples/tanstack_tutorial", "url": "https://docs.deno.com/examples/tanstack_tutorial/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Workspaces and monorepos\"?\n\nAssistant: Deno supports workspaces, also known as 'monorepos', which allow you to manage multiple related and interdependent packages simultaneously.\n\nHere's a detailed explanation:\n\n\n## Workspaces and monorepos\nDeno supports workspaces, also known as \"monorepos\", which allow you to manage multiple related and interdependent packages simultaneously.\n\nA \"workspace\" is a collection of folders containing `deno.json` or `package.json` configuration files. The root `deno.json` file defines the workspace:\n\ndeno.json\n\n```json\n{\n  \"workspace\": [\"./add\", \"./subtract\"]\n}\n```\n\nThis configures a workspace with `add` and `subtract` members, which are directories expected to have `deno.json(c)` and/or `package.json` files.\n\nNaming\n\nDeno uses `workspace` rather than npm's `workspaces` to represent a singular workspace with multiple members.\n\n## Example\nLet's expand on the `deno.json` workspace example and see its functionality. The file hierarchy looks like this:\n\n```sh\n/\n├── deno.json\n├── main.ts\n├── add/\n│     ├── deno.json\n│     └── mod.ts\n└── subtract/\n      ├── deno.json\n      └── mod.ts\n```\n\nThere are two workspace members (add and subtract), each with `mod.ts` files. There is also a root `deno.json` and a `main.ts`.\n\nThe top-level `deno.json` configuration file defines the workspace and a top-level import map applied to all members:\n\ndeno.json\n\n```json\n{\n  \"workspace\": [\"./add\", \"./subtract\"],\n  \"imports\": {\n    \"chalk\": \"npm:chalk@5\"\n  }\n}\n```\n\nThe root `main.ts` file uses the `chalk` bare specifier from the import map and imports the `add` and `subtract` functions from the workspace members. Note that it imports them using `@scope/add` and `@scope/subtract`, even though these are not proper URLs and aren't in the import map. How are they resolved?\n\nmain.ts\n\n```ts\nimport chalk from \"chalk\";\nimport { add } from \"@scope/add\";\nimport { subtract } from \"@scope/subtract\";\n\nconsole.log(\"1 + 2 =\", chalk.green(add(1, 2)));\nconsole.log(\"2 - 4 =\", chalk.red(subtract(2, 4)));\n```\n\nIn the `add/` subdirectory, we define a `deno.json` with a \"name\" field, which is important for referencing the workspace member. The `deno.json` file also contains example configurations, like turning off semicolons when using `deno fmt`.\n\nadd/deno.json\n\n```json\n{\n  \"name\": \"@scope/add\",\n  \"version\": \"0.1.0\",\n  \"exports\": \"./mod.ts\",\n  \"fmt\": {\n    \"semiColons\": false\n  }\n}\n```\n\nadd/mod.ts\n\n```ts\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n```\n\nThe `subtract/` subdirectory is similar but does not have the same `deno fmt` configuration.\n\nsubtract/deno.json\n\n```json\n{\n  \"name\": \"@scope/subtract\",\n  \"version\": \"0.3.0\",\n  \"exports\": \"./mod.ts\"\n}\n```\n\nsubtract/mod.ts\n\n```ts\nimport { add } from \"@scope/add\";\n\nexport function subtract(a: number, b: number): number {\n  return add(a, b * -1);\n}\n```\n\nLet's run it:\n\n```sh\n> deno run main.ts\n1 + 2 = 3\n2 - 4 = -2\n```\n\nThere's a lot to unpack here, showcasing some of the Deno workspace features:\n\n1. This monorepo consists of two packages, placed in `./add` and `./subtract` directories.\n\n2. By using `name` and `version` options in members' `deno.json` files, it's possible to refer to them using \"bare specifiers\" across the whole workspace. In this case, the packages are named `@scope/add` and `@scope/subtract`, where `scope` is the \"scope\" name you can choose. With these two options, it's not necessary to use long and relative file paths in import statements.\n\n3. `npm:chalk@5` package is a shared dependency in the entire workspace. Workspace members \"inherit\" `imports` of the workspace root, allowing to easily manage a single version of a dependency across the codebase.\n\n4. `add` subdirectory specifies in its `deno.json` that `deno fmt` should not apply semicolons when formatting the code. This makes for a much smoother transition for existing projects, without a need to change tens or hundreds of files in one go.\n\n## How Deno Resolves Workspace Dependencies\nWhen running a project in a workspace that imports from another workspace member, Deno follows these steps to resolve the dependencies:\n\n1. Deno starts in the directory of the executing project (e.g., project A)\n2. It looks up in the parent directory for a root `deno.json` file\n3. If found, it checks for the `workspace` property in that file\n4. For each import statement in project A, Deno checks if the import matches a package name defined in any workspace member's `deno.json`\n5. If a matching package name is found, Deno verifies that the containing directory is listed in the root workspace configuration\n6. The import is then resolved to the correct file using the `exports` field in the workspace member's `deno.json`\n\nFor example, given this structure:\n\n```sh\n/\n├── deno.json         # workspace: [\"./project-a\", \"./project-b\"]\n├── project-a/\n│   ├── deno.json     # name: \"@scope/project-a\"\n│   └── mod.ts        # imports from \"@scope/project-b\"\n└── project-b/\n    ├── deno.json     # name: \"@scope/project-b\"\n    └── mod.ts\n```\n\nWhen `project-a/mod.ts` imports from \"@scope/project-b\", Deno:\n\n1. Sees the import statement\n2. Checks parent directory's `deno.json`\n3. Finds `project-b` in the workspace array\n4. Verifies `project-b/deno.json` exists and has matching package name\n5. Resolves the import using `project-b`'s exports.\n\n## Important Note for Containerization\nWhen containerizing a workspace member that depends on other workspace members, you must include:\n\n1. The root `deno.json` file\n2. All dependent workspace packages\n3. The same directory structure as your development environment\n\nFor example, if dockerizing `project-a` above, your Dockerfile should:\n\n```dockerfile\nCOPY deno.json /app/deno.json\nCOPY project-a/ /app/project-a/\nCOPY project-b/ /app/project-b/\n```\n\nThis preserves the workspace resolution mechanism that Deno uses to find and import workspace dependencies.\n\n## Multiple package entries\nSo far, our package only has a single entry. This is fine for simple packages, but often you'll want to have multiple entries that group relevant aspects of your package. This can be done by passing an `object` instead of a `string` to `exports`:\n\nmy-package/deno.json\n\n```json\n{\n  \"name\": \"@scope/my-package\",\n  \"version\": \"0.3.0\",\n  \"exports\": {\n    \".\": \"./mod.ts\",\n    \"./foo\": \"./foo.ts\",\n    \"./other\": \"./dir/other.ts\"\n  }\n}\n```\n\nThe \".\" entry is the default entry that's picked when importing `@scope/my-package`. Therefore, the above `deno.json` example provides the following entries:\n\n- `@scope/my-package`\n- `@scope/my-package/foo`\n- `@scope/my-package/other`.\n\n## Migrating from npm workspaces\nDeno workspaces support using a Deno-first package from an existing npm package. In this example, we mix and match a Deno library called `@deno/hi`, with a Node.js library called `@deno/log` that we developed a couple years back.\n\nWe'll need to include a `deno.json` configuration file in the root:\n\ndeno.json\n\n```json\n{\n  \"workspace\": {\n    \"members\": [\"hi\"]\n  }\n}\n```\n\nAlongside our existing package.json workspace:\n\npackage.json\n\n```json\n{\n  \"workspaces\": [\"log\"]\n}\n```\n\nThe workspace currently has a log npm package:\n\nlog/package.json\n\n```json\n{\n  \"name\": \"@deno/log\",\n  \"version\": \"0.5.0\",\n  \"type\": \"module\",\n  \"main\": \"index.js\"\n}\n```\n\nlog/index.js\n\n```js\nexport function log(output) {\n  console.log(output);\n}\n```\n\nLet's create an `@deno/hi` Deno-first package that imports `@deno/log`:\n\nhi/deno.json\n\n```json\n{\n  \"name\": \"@deno/hi\",\n  \"version\": \"0.2.0\",\n  \"exports\": \"./mod.ts\",\n  \"imports\": {\n    \"log\": \"npm:@deno/log@^0.5\"\n  }\n}\n```\n\nhi/mod.ts\n\n```ts\nimport { log } from \"log\";\n\nexport function sayHiTo(name: string) {\n  log(`Hi, ${name}!`);\n}\n```\n\nNow, we can write a `main.ts` file that imports and calls `hi`:\n\nmain.ts\n\n```ts\nimport { sayHiTo } from \"@deno/hi\";\n\nsayHiTo(\"friend\");\n```\n\n```sh\n$ deno run main.ts\nHi, friend!\n```\n\nYou can even have both `deno.json` and `package.json` in your existing Node.js package. Additionally, you could remove the package.json in the root and specify the npm package in the deno.json workspace members. That allows you to gradually migrate to Deno, without putting a lot of upfront work.\n\nFor example, you can add `log/deno.json` like to to configure Deno's linter and formatter:\n\n```jsonc\n{\n  \"fmt\": {\n    \"semiColons\": false\n  },\n  \"lint\": {\n    \"rules\": {\n      \"exclude\": [\"no-unused-vars\"]\n    }\n  }\n}\n```\n\nRunning `deno fmt` in the workspace, will format the `log` package to not have any semicolons, and `deno lint` won't complain if you leave an unused var in one of the source files.\n\n## Configuring built-in Deno tools\nSome configuration options only make sense at the root of the workspace, eg. specifying `nodeModulesDir` option in one of the members is not available and Deno will warn if an option needs to be applied at the workspace root.\n\nHere's a full matrix of various `deno.json` options available at the workspace root and its members:\n\n| Option | Workspace | Package | Notes |\n| --- | --- | --- | --- |\n| compilerOptions | ✅ | ❌ | For now we only allow one set of compilerOptions per workspace. This is because multiple changes to both deno_graph and the TSC integration are required to allow more than one set. Also we’d have to determine what compilerOptions apply to remote dependencies. We can revisit this in the future. |\n| importMap | ✅ | ❌ | Exclusive with imports and scopes per config file. Additionally, it is not supported to have importMap in the workspace config, and imports in the package config. |\n| imports | ✅ | ✅ | Exclusive with importMap per config file. |\n| scopes | ✅ | ❌ | Exclusive with importMap per config file. |\n| exclude | ✅ | ✅ |  |\n| lint.include | ✅ | ✅ |  |\n| lint.exclude | ✅ | ✅ |  |\n| lint.files | ⚠️ | ❌ | Deprecated |\n| lint.rules.tags | ✅ | ✅ | Tags are merged by appending package to workspace list. Duplicates are ignored. |\n| lint.rules.include |  |  |  |\n| lint.rules.exclude | ✅ | ✅ | Rules are merged per package, with package taking priority over workspace (package include is stronger than workspace exclude). |\n| lint.report | ✅ | ❌ | Only one reporter can be active at a time, so allowing different reporters per workspace would not work in the case where you lint files spanning multiple packages. |\n| fmt.include | ✅ | ✅ |  |\n| fmt.exclude | ✅ | ✅ |  |\n| fmt.files | ⚠️ | ❌ | Deprecated |\n| fmt.useTabs | ✅ | ✅ | Package takes priority over workspace. |\n| fmt.indentWidth | ✅ | ✅ | Package takes priority over workspace. |\n| fmt.singleQuote | ✅ | ✅ | Package takes priority over workspace. |\n| fmt.proseWrap | ✅ | ✅ | Package takes priority over workspace. |\n| fmt.semiColons | ✅ | ✅ | Package takes priority over workspace. |\n| fmt.options.* | ⚠️ | ❌ | Deprecated |\n| nodeModulesDir | ✅ | ❌ | Resolution behaviour must be the same in the entire workspace. |\n| vendor | ✅ | ❌ | Resolution behaviour must be the same in the entire workspace. |\n| tasks | ✅ | ✅ | Package tasks take priority over workspace. cwd used is the cwd of the config file that the task was inside of. |\n| test.include | ✅ | ✅ |  |\n| test.exclude | ✅ | ✅ |  |\n| test.files | ⚠️ | ❌ | Deprecated |\n| publish.include | ✅ | ✅ |  |\n| publish.exclude | ✅ | ✅ |  |\n| bench.include | ✅ | ✅ |  |\n| bench.exclude | ✅ | ✅ |  |\n| bench.files | ⚠️ | ❌ | Deprecated |\n| lock | ✅ | ❌ | Only a single lock file may exist per resolver, and only resolver may exist per workspace, so conditional enablement of the lockfile per package does not make sense. |\n| unstable | ✅ | ❌ | For simplicities sake, we do not allow unstable flags, because a lot of the CLI assumes that unstable flags are immutable and global to the entire process. Also weird interaction with DENO_UNSTABLE_* flags. |\n| name | ❌ | ✅ |  |\n| version | ❌ | ✅ |  |\n| exports | ❌ | ✅ |  |\n| workspace | ✅ | ❌ | Nested workspaces are not supported.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/workspaces", "title": "Workspaces and monorepos", "description": "Deno supports workspaces, also known as 'monorepos', which allow you to manage multiple related and interdependent packages simultaneously.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 03:35:02", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogTitle": "Workspaces and monorepos", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:title": "Workspaces and monorepos", "og:image": "/img/og.webp", "ogLocale": "en_US", "title": "Workspaces and monorepos", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:title": "Workspaces and monorepos", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "scrapeId": "7cd1675e-7b71-4255-9012-ad74ec4292e6", "sourceURL": "https://docs.deno.com/runtime/fundamentals/workspaces", "url": "https://docs.deno.com/runtime/fundamentals/workspaces/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Workspaces and monorepos\"?\n\nAssistant: Here are some code examples:\n\n### Root deno.json configuration\n```yaml\n{\n  \"workspace\": [\"./add\", \"./subtract\"]\n}\n```\n\n### Root deno.json with imports\n```yaml\n{\n  \"workspace\": [\"./add\", \"./subtract\"],\n  \"imports\": {\n    \"chalk\": \"npm:chalk@5\"\n  }\n}\n```\n\n### Root main.ts file\n```yaml\nimport chalk from \"chalk\";\nimport { add } from \"@scope/add\";\nimport { subtract } from \"@scope/subtract\";\n\nconsole.log(\"1 + 2 =\", chalk.green(add(1, 2)));\nconsole.log(\"2 - 4 =\", chalk.red(subtract(2, 4)));\n```\n\n### Add deno.json configuration\n```yaml\n{\n  \"name\": \"@scope/add\",\n  \"version\": \"0.1.0\",\n  \"exports\": \"./mod.ts\",\n  \"fmt\": {\n    \"semiColons\": false\n  }\n}\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/workspaces", "title": "Workspaces and monorepos", "description": "Deno supports workspaces, also known as 'monorepos', which allow you to manage multiple related and interdependent packages simultaneously.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 03:35:02", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogTitle": "Workspaces and monorepos", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:title": "Workspaces and monorepos", "og:image": "/img/og.webp", "ogLocale": "en_US", "title": "Workspaces and monorepos", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:title": "Workspaces and monorepos", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "scrapeId": "7cd1675e-7b71-4255-9012-ad74ec4292e6", "sourceURL": "https://docs.deno.com/runtime/fundamentals/workspaces", "url": "https://docs.deno.com/runtime/fundamentals/workspaces/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"Workspaces and monorepos\"?\n\nAssistant: Here are the recommended best practices:\n\n• Deno workspaces are flexible and can work with Node packages.\n• When containerizing a workspace member, include the root deno.json file and all dependent workspace packages.\n• Use the name and version options in members' deno.json files to refer to them using bare specifiers across the whole workspace.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/workspaces", "title": "Workspaces and monorepos", "description": "Deno supports workspaces, also known as 'monorepos', which allow you to manage multiple related and interdependent packages simultaneously.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-28 03:35:02", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "twitter:card": "summary_large_image", "ogTitle": "Workspaces and monorepos", "viewport": "width=device-width, initial-scale=1", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "og:title": "Workspaces and monorepos", "og:image": "/img/og.webp", "ogLocale": "en_US", "title": "Workspaces and monorepos", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "twitter:title": "Workspaces and monorepos", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "language": "en", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "og:type": "article", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:site": "@deno_land", "twitter:image": "/img/og.webp", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:locale": "en_US", "scrapeId": "7cd1675e-7b71-4255-9012-ad74ec4292e6", "sourceURL": "https://docs.deno.com/runtime/fundamentals/workspaces", "url": "https://docs.deno.com/runtime/fundamentals/workspaces/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"namespaceDeno\"?\n\nAssistant: The global namespace where Deno specific, non-standard APIs are located.\n\nHere's a detailed explanation:\n\n\n## Classes\nc\n\n[Deno.AtomicOperation](https://docs.deno.com/api/deno/~/Deno.AtomicOperation \"Deno.AtomicOperation\")\n\nAn operation on a [`Deno.Kv`](https://docs.deno.com/api/deno/~/Deno.Kv) that can be performed\natomically. Atomic operations do not auto-commit, and must be committed\nexplicitly by calling the `commit` method.\n\n- [check](https://docs.deno.com/api/deno/~/Deno.AtomicOperation#method_check_0)\n- [commit](https://docs.deno.com/api/deno/~/Deno.AtomicOperation#method_commit_0)\n- [delete](https://docs.deno.com/api/deno/~/Deno.AtomicOperation#method_delete_0)\n- [enqueue](https://docs.deno.com/api/deno/~/Deno.AtomicOperation#method_enqueue_0)\n- [max](https://docs.deno.com/api/deno/~/Deno.AtomicOperation#method_max_0)\n- [min](https://docs.deno.com/api/deno/~/Deno.AtomicOperation#method_min_0)\n- [mutate](https://docs.deno.com/api/deno/~/Deno.AtomicOperation#method_mutate_0)\n- [set](https://docs.deno.com/api/deno/~/Deno.AtomicOperation#method_set_0)\n- [sum](https://docs.deno.com/api/deno/~/Deno.AtomicOperation#method_sum_0)\n\nc\n\n[Deno.ChildProcess](https://docs.deno.com/api/deno/~/Deno.ChildProcess \"Deno.ChildProcess\")\n\nThe interface for handling a child process returned from\n`Deno.Command.spawn`.\n\n- [kill](https://docs.deno.com/api/deno/~/Deno.ChildProcess#method_kill_0)\n- [output](https://docs.deno.com/api/deno/~/Deno.ChildProcess#method_output_0)\n- [pid](https://docs.deno.com/api/deno/~/Deno.ChildProcess#property_pid)\n- [ref](https://docs.deno.com/api/deno/~/Deno.ChildProcess#method_ref_0)\n- [status](https://docs.deno.com/api/deno/~/Deno.ChildProcess#property_status)\n- [stderr](https://docs.deno.com/api/deno/~/Deno.ChildProcess#accessor_stderr)\n- [stdin](https://docs.deno.com/api/deno/~/Deno.ChildProcess#accessor_stdin)\n- [stdout](https://docs.deno.com/api/deno/~/Deno.ChildProcess#accessor_stdout)\n- [unref](https://docs.deno.com/api/deno/~/Deno.ChildProcess#method_unref_0)\n\nc\n\n[Deno.Command](https://docs.deno.com/api/deno/~/Deno.Command \"Deno.Command\")\n\nCreate a child process.\n\n- [output](https://docs.deno.com/api/deno/~/Deno.Command#method_output_0)\n- [outputSync](https://docs.deno.com/api/deno/~/Deno.Command#method_outputsync_0)\n- [spawn](https://docs.deno.com/api/deno/~/Deno.Command#method_spawn_0)\n\nc\n\n[Deno.FsFile](https://docs.deno.com/api/deno/~/Deno.FsFile \"Deno.FsFile\")\n\nThe Deno abstraction for reading and writing files.\n\n- [close](https://docs.deno.com/api/deno/~/Deno.FsFile#method_close_0)\n- [isTerminal](https://docs.deno.com/api/deno/~/Deno.FsFile#method_isterminal_0)\n- [lock](https://docs.deno.com/api/deno/~/Deno.FsFile#method_lock_0)\n- [lockSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_locksync_0)\n- [read](https://docs.deno.com/api/deno/~/Deno.FsFile#method_read_0)\n- [readSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_readsync_0)\n- [readable](https://docs.deno.com/api/deno/~/Deno.FsFile#property_readable)\n- [seek](https://docs.deno.com/api/deno/~/Deno.FsFile#method_seek_0)\n- [seekSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_seeksync_0)\n- [setRaw](https://docs.deno.com/api/deno/~/Deno.FsFile#method_setraw_0)\n- [stat](https://docs.deno.com/api/deno/~/Deno.FsFile#method_stat_0)\n- [statSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_statsync_0)\n- [sync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_sync_0)\n- [syncData](https://docs.deno.com/api/deno/~/Deno.FsFile#method_syncdata_0)\n- [syncDataSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_syncdatasync_0)\n- [syncSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_syncsync_0)\n- [truncate](https://docs.deno.com/api/deno/~/Deno.FsFile#method_truncate_0)\n- [truncateSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_truncatesync_0)\n- [unlock](https://docs.deno.com/api/deno/~/Deno.FsFile#method_unlock_0)\n- [unlockSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_unlocksync_0)\n- [utime](https://docs.deno.com/api/deno/~/Deno.FsFile#method_utime_0)\n- [utimeSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_utimesync_0)\n- [writable](https://docs.deno.com/api/deno/~/Deno.FsFile#property_writable)\n- [write](https://docs.deno.com/api/deno/~/Deno.FsFile#method_write_0)\n- [writeSync](https://docs.deno.com/api/deno/~/Deno.FsFile#method_writesync_0)\n\nc\n\n[Deno.HttpClient](https://docs.deno.com/api/deno/~/Deno.HttpClient \"Deno.HttpClient\")\n\nA custom `HttpClient` for use with `fetch` function. This is\ndesigned to allow custom certificates or proxies to be used with `fetch()`.\n\n- [close](https://docs.deno.com/api/deno/~/Deno.HttpClient#method_close_0)\n\nc\n\n[Deno.Kv](https://docs.deno.com/api/deno/~/Deno.Kv \"Deno.Kv\")\n\nA key-value database that can be used to store and retrieve data.\n\n- [atomic](https://docs.deno.com/api/deno/~/Deno.Kv#method_atomic_0)\n- [close](https://docs.deno.com/api/deno/~/Deno.Kv#method_close_0)\n- [commitVersionstamp](https://docs.deno.com/api/deno/~/Deno.Kv#method_commitversionstamp_0)\n- [delete](https://docs.deno.com/api/deno/~/Deno.Kv#method_delete_0)\n- [enqueue](https://docs.deno.com/api/deno/~/Deno.Kv#method_enqueue_0)\n- [get](https://docs.deno.com/api/deno/~/Deno.Kv#method_get_0)\n- [getMany](https://docs.deno.com/api/deno/~/Deno.Kv#method_getmany_0)\n- [list](https://docs.deno.com/api/deno/~/Deno.Kv#method_list_0)\n- [listenQueue](https://docs.deno.com/api/deno/~/Deno.Kv#method_listenqueue_0)\n- [set](https://docs.deno.com/api/deno/~/Deno.Kv#method_set_0)\n- [watch](https://docs.deno.com/api/deno/~/Deno.Kv#method_watch_0)\n\nc\n\n[Deno.KvListIterator](https://docs.deno.com/api/deno/~/Deno.KvListIterator \"Deno.KvListIterator\")\n\nAn iterator over a range of data entries in a [`Deno.Kv`](https://docs.deno.com/api/deno/~/Deno.Kv).\n\n- [cursor](https://docs.deno.com/api/deno/~/Deno.KvListIterator#accessor_cursor)\n- [next](https://docs.deno.com/api/deno/~/Deno.KvListIterator#method_next_0)\n\nc\n\n[Deno.KvU64](https://docs.deno.com/api/deno/~/Deno.KvU64 \"Deno.KvU64\")\n\nWrapper type for 64-bit unsigned integers for use as values in a\n[`Deno.Kv`](https://docs.deno.com/api/deno/~/Deno.Kv).\n\n- [value](https://docs.deno.com/api/deno/~/Deno.KvU64#property_value)\n\nc\n\n[Deno.Permissions](https://docs.deno.com/api/deno/~/Deno.Permissions \"Deno.Permissions\")\n\nDeno's permission management API.\n\n- [query](https://docs.deno.com/api/deno/~/Deno.Permissions#method_query_0)\n- [querySync](https://docs.deno.com/api/deno/~/Deno.Permissions#method_querysync_0)\n- [request](https://docs.deno.com/api/deno/~/Deno.Permissions#method_request_0)\n- [requestSync](https://docs.deno.com/api/deno/~/Deno.Permissions#method_requestsync_0)\n- [revoke](https://docs.deno.com/api/deno/~/Deno.Permissions#method_revoke_0)\n- [revokeSync](https://docs.deno.com/api/deno/~/Deno.Permissions#method_revokesync_0)\n\nc\n\n[Deno.PermissionStatus](https://docs.deno.com/api/deno/~/Deno.PermissionStatus \"Deno.PermissionStatus\")\n\nAn `EventTarget` returned from the [`Deno.permissions`](https://docs.deno.com/api/deno/~/Deno.permissions)\nAPI which can provide updates to any state changes of the permission.\n\n- [addEventListener](https://docs.deno.com/api/deno/~/Deno.PermissionStatus#method_addeventlistener_0)\n- [onchange](https://docs.deno.com/api/deno/~/Deno.PermissionStatus#property_onchange)\n- [partial](https://docs.deno.com/api/deno/~/Deno.PermissionStatus#property_partial)\n- [removeEventListener](https://docs.deno.com/api/deno/~/Deno.PermissionStatus#method_removeeventlistener_0)\n- [state](https://docs.deno.com/api/deno/~/Deno.PermissionStatus#property_state)\n\nc\n\n[Deno.QuicEndpoint](https://docs.deno.com/api/deno/~/Deno.QuicEndpoint \"Deno.QuicEndpoint\")\n\nNo documentation available\n\n- [addr](https://docs.deno.com/api/deno/~/Deno.QuicEndpoint#property_addr)\n- [close](https://docs.deno.com/api/deno/~/Deno.QuicEndpoint#method_close_0)\n- [listen](https://docs.deno.com/api/deno/~/Deno.QuicEndpoint#method_listen_0)\n\nc\n\n[Deno.UnsafeCallback](https://docs.deno.com/api/deno/~/Deno.UnsafeCallback \"Deno.UnsafeCallback\")\n\nAn unsafe function pointer for passing JavaScript functions as C function\npointers to foreign function calls.\n\n- [callback](https://docs.deno.com/api/deno/~/Deno.UnsafeCallback#property_callback)\n- [close](https://docs.deno.com/api/deno/~/Deno.UnsafeCallback#method_close_0)\n- [definition](https://docs.deno.com/api/deno/~/Deno.UnsafeCallback#property_definition)\n- [pointer](https://docs.deno.com/api/deno/~/Deno.UnsafeCallback#property_pointer)\n- [ref](https://docs.deno.com/api/deno/~/Deno.UnsafeCallback#method_ref_0)\n- [threadSafe](https://docs.deno.com/api/deno/~/Deno.UnsafeCallback#method_threadsafe_0)\n- [unref](https://docs.deno.com/api/deno/~/Deno.UnsafeCallback#method_unref_0)\n\nc\n\n[Deno.UnsafeFnPointer](https://docs.deno.com/api/deno/~/Deno.UnsafeFnPointer \"Deno.UnsafeFnPointer\")\n\nAn unsafe pointer to a function, for calling functions that are not present\nas symbols.\n\n- [call](https://docs.deno.com/api/deno/~/Deno.UnsafeFnPointer#property_call)\n- [definition](https://docs.deno.com/api/deno/~/Deno.UnsafeFnPointer#property_definition)\n- [pointer](https://docs.deno.com/api/deno/~/Deno.UnsafeFnPointer#property_pointer)\n\nc\n\n[Deno.UnsafePointer](https://docs.deno.com/api/deno/~/Deno.UnsafePointer \"Deno.UnsafePointer\")\n\nA collection of static functions for interacting with pointer objects.\n\n- [create](https://docs.deno.com/api/deno/~/Deno.UnsafePointer#method_create_0)\n- [equals](https://docs.deno.com/api/deno/~/Deno.UnsafePointer#method_equals_0)\n- [of](https://docs.deno.com/api/deno/~/Deno.UnsafePointer#method_of_0)\n- [offset](https://docs.deno.com/api/deno/~/Deno.UnsafePointer#method_offset_0)\n- [value](https://docs.deno.com/api/deno/~/Deno.UnsafePointer#method_value_0)\n\nc\n\n[Deno.UnsafePointerView](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView \"Deno.UnsafePointerView\")\n\nAn unsafe pointer view to a memory location as specified by the `pointer`\nvalue. The `UnsafePointerView` API follows the standard built in interface\n`DataView` for accessing the underlying types at an memory\nlocation (numbers, strings and raw bytes).\n\n- [copyInto](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_copyinto_0)\n- [getArrayBuffer](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getarraybuffer_0)\n- [getBigInt64](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getbigint64_0)\n- [getBigUint64](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getbiguint64_0)\n- [getBool](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getbool_0)\n- [getCString](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getcstring_0)\n- [getFloat32](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getfloat32_0)\n- [getFloat64](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getfloat64_0)\n- [getInt16](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getint16_0)\n- [getInt32](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getint32_0)\n- [getInt8](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getint8_0)\n- [getPointer](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getpointer_0)\n- [getUint16](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getuint16_0)\n- [getUint32](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getuint32_0)\n- [getUint8](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#method_getuint8_0)\n- [pointer](https://docs.deno.com/api/deno/~/Deno.UnsafePointerView#property_pointer)\n\nc\n\n[Deno.UnsafeWindowSurface](https://docs.deno.com/api/deno/~/Deno.UnsafeWindowSurface \"Deno.UnsafeWindowSurface\")\n\nCreates a presentable WebGPU surface from given window and\ndisplay handles.\n\n- [getContext](https://docs.deno.com/api/deno/~/Deno.UnsafeWindowSurface#method_getcontext_0)\n- [present](https://docs.deno.com/api/deno/~/Deno.UnsafeWindowSurface#method_present_0)\n", "metadata": {"source_url": "https://docs.deno.com/api/deno/~/Deno", "title": "namespaceDeno", "description": "The global namespace where Deno specific, non-standard APIs are located.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-28 03:44:01", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "og:locale": "en_US", "ogSiteName": "Deno", "title": "Deno - Deno documentation", "language": "en", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "ogLocale": "en_US", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "ogTitle": "Deno - Deno documentation", "twitter:image": "/img/og.webp", "og:site_name": "Deno", "twitter:title": "Deno - Deno documentation", "twitter:site": "@deno_land", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image": "/img/og.webp", "og:title": "Deno - Deno documentation", "viewport": "width=device-width, initial-scale=1", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "scrapeId": "ce01f5ce-235e-4266-8d3d-0e030a9ac76e", "sourceURL": "https://docs.deno.com/api/deno/~/Deno", "url": "https://docs.deno.com/api/deno/~/Deno", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"deno info, dependency inspector\"?\n\nAssistant: Show information about a module or the cache directories.\n\nHere's a detailed explanation:\n\n\n## Command line usage\n```\ndeno info [OPTIONS] [file]\n```\n\nShow information about a module or the cache directories.\n\nGet information about a module:\n\n```\ndeno info jsr:@std/http/file-server\n\n```\n\nThe following information is shown:\nlocal: Local path of the file\ntype: JavaScript, TypeScript, or JSON\nemit: Local path of compiled source code (TypeScript only)\ndependencies: Dependency tree of the source file\n\n## Options\n### `--allow-import`\n\nShort flag: `-I`\n\nAllow importing from remote hosts. Optionally specify allowed IP addresses and host names, with ports as necessary. Default value: deno.land:443, [jsr.io:443](http://jsr.io:443/), [esm.sh:443](http://esm.sh:443/), [cdn.jsdelivr.net:443](http://cdn.jsdelivr.net:443/), [raw.githubusercontent.com:443](http://raw.githubusercontent.com:443/), [user.githubusercontent.com:443](http://user.githubusercontent.com:443/).\n\n### `--cert`\n\nLoad certificate authority from PEM encoded file.\n\n### `--config`\n\nShort flag: `-c`\n\nConfigure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary.\n\n### `--json`\n\nUNSTABLE: Outputs the information in JSON format.\n\n### `--location`\n\nShow files used for origin bound APIs like the Web Storage API when running a script with ` --location=<HREF>`.\n\n### `--no-config`\n\nDisable automatic loading of the configuration file.\n\n## Dependency management options\n### `--import-map`\n\nLoad import map file from local file or remote URL.\n\n### `--lock`\n\nCheck the specified lock file. (If value is not provided, defaults to \"./deno.lock\").\n\n### `--no-lock`\n\nDisable auto discovery of the lock file.\n\n### `--no-npm`\n\nDo not resolve npm modules.\n\n### `--no-remote`\n\nDo not resolve remote modules.\n\n### `--node-modules-dir`\n\nSets the node modules management mode for npm packages.\n\n### `--reload`\n\nShort flag: `-r`\n\nReload source code cache (recompile TypeScript)\nno value Reload everything\njsr:@std/http/file-server,jsr:@std/assert/assert-equals Reloads specific modules\nnpm: Reload all npm modules\nnpm:chalk Reload specific npm module.\n\n### `--vendor`\n\nToggles local vendor folder usage for remote modules and a node_modules folder for npm packages.\n\n## Example\n```highlight notranslate shell\n$ deno info jsr:@std/http@1.0.0-rc.5/file-server\nlocal: /home/lucacasonato/.cache/deno/deps/https/jsr.io/3a0e5ef03d2090c75c81daf771ed9a73009518adfe688c333dc11d8006dc3598\nemit: /home/lucacasonato/.cache/deno/gen/https/jsr.io/3a0e5ef03d2090c75c81daf771ed9a73009518adfe688c333dc11d8006dc3598.js\ntype: TypeScript\ndependencies: 40 unique\nsize: 326.42KB\n\nhttps://jsr.io/@std/http/1.0.0-rc.5/file_server.ts (24.74KB)\n├─┬ https://jsr.io/@std/path/1.0.1/posix/join.ts (862B)\n│ ├── https://jsr.io/@std/path/1.0.1/_common/assert_path.ts (307B)\n│ └─┬ https://jsr.io/@std/path/1.0.1/posix/normalize.ts (1.31KB)\n│   ├─┬ https://jsr.io/@std/path/1.0.1/_common/normalize.ts (263B)\n│   │ └── https://jsr.io/@std/path/1.0.1/_common/assert_path.ts *\n│   ├─┬ https://jsr.io/@std/path/1.0.1/_common/normalize_string.ts (2.25KB)\n│   │ └── https://jsr.io/@std/path/1.0.1/_common/constants.ts (1.97KB)\n│   └─┬ https://jsr.io/@std/path/1.0.1/posix/_util.ts (391B)\n│     └── https://jsr.io/@std/path/1.0.1/_common/constants.ts *\n├── https://jsr.io/@std/path/1.0.1/posix/normalize.ts *\n├─┬ https://jsr.io/@std/path/1.0.1/extname.ts (906B)\n│ ├── https://jsr.io/@std/path/1.0.1/_os.ts (736B)\n│ ├─┬ https://jsr.io/@std/path/1.0.1/posix/extname.ts (2.28KB)\n│ │ ├── https://jsr.io/@std/path/1.0.1/_common/constants.ts *\n│ │ ├── https://jsr.io/@std/path/1.0.1/_common/assert_path.ts *\n│ │ └── https://jsr.io/@std/path/1.0.1/posix/_util.ts *\n│ └─┬ https://jsr.io/@std/path/1.0.1/windows/extname.ts (2.5KB)\n│   ├── https://jsr.io/@std/path/1.0.1/_common/constants.ts *\n│   ├── https://jsr.io/@std/path/1.0.1/_common/assert_path.ts *\n│   └─┬ httpsjsr.io/@std/path/1.0.1/windows/_util.ts (828B)\n│     └── https://jsr.io/@std/path/1.0.1/_common/constants.ts *\n├─┬ https://jsr.io/@std/path/1.0.1/join.ts (926B)\n│ ├── https://jsr.io/@std/path/1.0.1/_os.ts *\n│ ├── https://jsr.io/@std/path/1.0.1/posix/join.ts *\n│ └─┬ https://jsr.io/@std/path/1.0.1/windows/join.ts (2.41KB)\n│   ├── https://jsr.io/@std/path/1.0.1/_common/assert_path.ts *\n│   ├── https://jsr.io/@std/path/1.0.1/windows/_util.ts *\n│   └─┬ https://jsr.io/@std/path/1.0.1/windows/normalize.ts (3.84KB)\n│     ├── https://jsr.io/@std/path/1.0.1/_common/normalize.ts *\n│     ├── https://jsr.io/@std/path/1.0.1/_common/constants.ts *\n│     ├── https://jsr.io/@std/path/1.0.1/_common/normalize_string.ts *\n│     └── https://jsr.io/@std/path/1.0.1/windows/_util.ts *\n├─┬ https://jsr.io/@std/path/1.0.1/relative.ts (1.08KB)\n│ ├── https://jsr.io/@std/path/1.0.1/_os.ts *\n│ ├─┬ https://jsr.io/@std/path/1.0.1/posix/relative.ts (3.25KB)\n│ │ ├── https://jsr.io/@std/path/1.0.1/posix/_util.ts *\n│ │ ├─┬ https://jsr.io/@std/path/1.0.1/posix/resolve.ts (1.84KB)\n│ │ │ ├── https://jsr.io/@std/path/1.0.1/_common/normalize_string.ts *\n│ │ │ ├── https://jsr.io/@std/path/1.0.1/_common/assert_path.ts *\n│ │ │ └── https://jsr.io/@std/path/1.0.1/posix/_util.ts *\n│ │ └─┬ https://jsr.io/@std/path/1.0.1/_common/relative.ts (287B)\n│ │   └── https://jsr.io/@std/path/1.0.1/_common/assert_path.ts *\n│ └─┬ https://jsr.io/@std/path/1.0.1/windows/relative.ts (4.24KB)\n│   ├── https://jsr.io/@std/path/1.0.1/_common/constants.ts *\n│   ├─┬ https://jsr.io/@std/path/1.0.1/windows/resolve.ts (5.02KB)\n│   │ ├── https://jsr.io/@std/path/1.0.1/_common/constants.ts *\n│   │ ├── https://jsr.io/@std/path/1.0.1/_common/normalize_string.ts *\n│   │ ├── https://jsr.io/@std/path/1.0.1/_common/assert_path.ts *\n│   │ └── https://jsr.io/@std/path/1.0.1/windows/_util.ts *\n│   └── https://jsr.io/@std/path/1.0.1/_common/relative.ts *\n├─┬ https://jsr.io/@std/path/1.0.1/resolve.ts (1.02KB)\n│ ├── https://jsr.io/@std/path/1.0.1/_os.ts *\n│ ├── https://jsr.io/@std/path/1.0.1/posix/resolve.ts *\n│ └── https://jsr.io/@std/path/1.0.1/windows/resolve.ts *\n├─┬ https://jsr.io/@std/path/1.0.1/constants.ts (705B)\n│ └── https://jsr.io/@std/path/1.0.1/_os.ts *\n├─┬ https://jsr.io/@std/media-types/1.0.2/content_type.ts (3.09KB)\n│ ├─┬ https://jsr.io/@std/media-types/1.0.2/parse_media_type.ts (3.54KB)\n│ │ └── https://jsr.io/@std/media-types/1.0.2/_util.ts (3.18KB)\n│ ├─┬ https://jsr.io/@std/media-types/1.0.2/get_charset.ts (1.45KB)\n│ │ ├── https://jsr.io/@std/media-types/1.0.2/parse_media_type.ts *\n│ │ ├── https://jsr.io/@std/media-types/1.0.2/_util.ts *\n│ │ └─┬ https://jsr.io/@std/media-types/1.0.2/_db.ts (1.34KB)\n│ │   ├── https://jsr.io/@std/media-types/1.0.2/vendor/db.ts (190.69KB)\n│ │   └── https://jsr.io/@std/media-types/1.0.2/_util.ts *\n│ ├─┬ https://jsr.io/@std/media-types/1.0.2/format_media_type.ts (2.45KB)\n│ │ └── https://jsr.io/@std/media-types/1.0.2/_util.ts *\n│ ├── https://jsr.io/@std/media-types/1.0.2/_db.ts *\n│ └─┬ https://jsr.io/@std/media-types/1.0.2/type_by_extension.ts (1.15KB)\n│   └── https://jsr.io/@std/media-types/1.0.2/_db.ts *\n├─┬ https://jsr.io/@std/http/1.0.0-rc.5/etag.ts (6.46KB)\n│ └─┬ https://jsr.io/@std/encoding/1.0.1/base64.ts (3.18KB)\n│   └── https://jsr.io/@std/encoding/1.0.1/_validate_binary_like.ts (798B)\n├── https://jsr.io/@std/http/1.0.0-rc.5/status.ts (13.39KB)\n├── https://jsr.io/@std/streams/1.0.0-rc.4/byte_slice_stream.ts (2.57KB)\n├── https://jsr.io/@std/cli/1.0.0/parse_args.ts (21.94KB)\n├── https://jsr.io/@std/http/1.0.0-rc.5/deno.json (415B)\n├── https://jsr.io/@std/fmt/1.0.0-rc.1/bytes.ts (5.3KB)\n└── https://jsr.io/@std/net/1.0.0-rc.2/get_network_address.ts (1.68KB)\n\n```\n\n## Cache location\n`deno info` can be used to display information about cache location:\n\n```highlight notranslate shell\ndeno info\nDENO_DIR location: \"/Users/deno/Library/Caches/deno\"\nRemote modules cache: \"/Users/deno/Library/Caches/deno/deps\"\nTypeScript compiler cache: \"/Users/deno/Library/Caches/deno/gen\"\n```\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/info", "title": "deno info, dependency inspector", "description": "Show information about a module or the cache directories.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 05:46:51", "type": "overview", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "title": "`deno info`, dependency inspector", "twitter:site": "@deno_land", "ogTitle": "`deno info`, dependency inspector", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:type": "article", "og:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogImage": "/img/og.webp", "og:title": "`deno info`, dependency inspector", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "`deno info`, dependency inspector", "scrapeId": "18883a60-2b4d-44d6-8198-47434acf41a3", "sourceURL": "https://docs.deno.com/runtime/reference/cli/info", "url": "https://docs.deno.com/runtime/reference/cli/info/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"deno info, dependency inspector\"?\n\nAssistant: Here are some code examples:\n\n### Command line usage example\n```yaml\ndeno info jsr:@std/http/file-server\n```\n\n### Cache location example\n```yaml\ndeno info\nDENO_DIR location: \"/Users/deno/Library/Caches/deno\"\nRemote modules cache: \"/Users/deno/Library/Caches/deno/deps\"\nTypeScript compiler cache: \"/Users/deno/Library/Caches/deno/gen\"\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/info", "title": "deno info, dependency inspector", "description": "Show information about a module or the cache directories.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 05:46:51", "type": "code_examples", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "title": "`deno info`, dependency inspector", "twitter:site": "@deno_land", "ogTitle": "`deno info`, dependency inspector", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:type": "article", "og:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogImage": "/img/og.webp", "og:title": "`deno info`, dependency inspector", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "`deno info`, dependency inspector", "scrapeId": "18883a60-2b4d-44d6-8198-47434acf41a3", "sourceURL": "https://docs.deno.com/runtime/reference/cli/info", "url": "https://docs.deno.com/runtime/reference/cli/info/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"deno info, dependency inspector\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `--allow-import` option to allow importing from remote hosts when necessary.\n• Utilize the `--config` option to manage TypeScript, linting, and code formatting settings effectively.\n• Consider using the `--json` option for outputting information in a structured JSON format.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/reference/cli/info", "title": "deno info, dependency inspector", "description": "Show information about a module or the cache directories.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-28 05:46:51", "type": "best_practices", "page_metadata": {"favicon": "https://docs.deno.com/favicon.ico", "title": "`deno info`, dependency inspector", "twitter:site": "@deno_land", "ogTitle": "`deno info`, dependency inspector", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogLocale": "en_US", "twitter:image": "/img/og.webp", "og:type": "article", "og:image": "/img/og.webp", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:locale": "en_US", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "Deno", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "ogImage": "/img/og.webp", "og:title": "`deno info`, dependency inspector", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:title": "`deno info`, dependency inspector", "scrapeId": "18883a60-2b4d-44d6-8198-47434acf41a3", "sourceURL": "https://docs.deno.com/runtime/reference/cli/info", "url": "https://docs.deno.com/runtime/reference/cli/info/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Classes, Interfaces, Namespaces, Type Aliases, and Variables in Temporal API\"?\n\nAssistant: This documentation covers the various classes, interfaces, namespaces, type aliases, and variables available in the Temporal API.\n\nHere's a detailed explanation:\n\n\n## Classes\nThe Temporal API includes several classes that represent different aspects of time and date manipulation. Each class has its own methods and properties.\n\n## Interfaces\nThe Temporal API defines several interfaces that provide additional functionality and options for working with temporal data.\n\n## Namespaces\nThe Temporal API includes a namespace that groups related functionalities and types.\n\n## Type Aliases\nThe Temporal API defines several type aliases that simplify the usage of complex types.\n\n## Variables\nThe Temporal API includes variables that provide access to current date and time information.\n", "metadata": {"source_url": "https://docs.deno.com/api/web/temporal", "title": "Classes, Interfaces, Namespaces, Type Aliases, and Variables in Temporal API", "description": "This documentation covers the various classes, interfaces, namespaces, type aliases, and variables available in the Temporal API.", "has_code_examples": false, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-28 06:13:54", "type": "overview", "page_metadata": {"twitter:title": "Temporal - Web documentation", "twitter:site": "@deno_land", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:title": "Temporal - Web documentation", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "Temporal - Web documentation", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:site_name": "Deno", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "twitter:card": "summary_large_image", "twitter:image": "/img/og.webp", "language": "en", "viewport": "width=device-width, initial-scale=1", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogImage": "/img/og.webp", "title": "Temporal - Web documentation", "ogLocale": "en_US", "og:image": "/img/og.webp", "og:type": "article", "ogSiteName": "Deno", "scrapeId": "dba2f249-ae58-411a-b5fa-826cd1dd6428", "sourceURL": "https://docs.deno.com/api/web/temporal", "url": "https://docs.deno.com/api/web/temporal", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"Schedule a notification for a future date\"?\n\nAssistant: A common use case for queues is scheduling work to be completed at some point in the future. This page demonstrates how to schedule notification messages sent through the Courier API using a sample application that runs on Deno Deploy.\n\nHere's a detailed explanation:\n\n\n## Download and configure the sample\n⬇️\n[**Download or clone the complete sample app here**](https://github.com/kwhinnery/deno_courier_example).\n\nYou can run and deploy this sample application yourself using the instructions in the GitHub repo's [`README` file](https://github.com/kwhinnery/deno_courier_example).\n\nTo run the example app above, you'll also need to [sign up for Courier](https://app.courier.com/signup). Of course the techniques you'll see in the application would just as easily apply to any notification service, from [Amazon SNS](https://aws.amazon.com/sns/) to [Twilio](https://www.twilio.com/), but Courier provides an easy-to-use notification API that you can use with a personal GMail account for testing (in addition to all the other neat things it can do).\n\n## Key functionality\nAfter setting up and running the project, we'd like to direct your attention to a few key parts of the code that implement the scheduling mechanics.\n\n## Connecting to KV and adding a listener on app start\nMost of the example app's functionality lives in [server.tsx](https://github.com/kwhinnery/deno_courier_example/blob/main/server.tsx) in the top-level directory. When the Deno app process starts, it creates a connection to a Deno KV instance and attaches an event handler which will process messages as they are received from the queue.\n\n## Creating and scheduling a notification\nAfter a new order is submitted through the form in this demo application, the `enqueue` function is called with a delay of five seconds before a notification email is sent out.\n\n## Defining the notification data type in TypeScript\nOften, it is desirable to work with strongly typed objects when pushing data into or out of the queue. While queue messages are an [`unknown`](https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown) TypeScript type initially, we can use [type guards](https://www.typescriptlang.org/docs/handbook/2/narrowing.html) to tell the compiler the shape of the data we expect.\n\n## Sending a Courier API request\nTo send an email as scheduled, we use the Courier REST API. More information about the Courier REST API can be found in [their reference docs](https://www.courier.com/docs/reference/send/message/).\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/tutorials/schedule_notification", "title": "Schedule a notification for a future date", "description": "A common use case for queues is scheduling work to be completed at some point in the future. This page demonstrates how to schedule notification messages sent through the Courier API using a sample application that runs on Deno Deploy.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-02-28 06:43:58", "type": "overview", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Schedule a notification for a future date", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:title": "Schedule a notification for a future date", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "language": "en", "title": "Schedule a notification for a future date", "ogTitle": "Schedule a notification for a future date", "og:site_name": "Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "856304f8-d1e0-4b9d-8ef2-4b5df13d6fd7", "sourceURL": "https://docs.deno.com/deploy/kv/tutorials/schedule_notification", "url": "https://docs.deno.com/deploy/kv/tutorials/schedule_notification/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"Schedule a notification for a future date\"?\n\nAssistant: Here are some code examples:\n\n### Connecting to KV and adding a listener on app start\n```yaml\n// Create a Deno KV database reference\nconst kv = await Deno.openKv();\n\n// Create a queue listener that will process enqueued messages\nkv.listenQueue(async (message) => {\n  /* ... implementation of listener here ... */\n});\n```\n\n### Creating and scheduling a notification\n```yaml\napp.post(\"/order\", async (c) => {\n  const { email, order } = await c.req.parseBody();\n  const n: Notification = {\n    email: email as string,\n    body: `Order received for: ${order}`\n  };\n  // Additional implementation here\n});\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/deploy/kv/tutorials/schedule_notification", "title": "Schedule a notification for a future date", "description": "A common use case for queues is scheduling work to be completed at some point in the future. This page demonstrates how to schedule notification messages sent through the Courier API using a sample application that runs on Deno Deploy.", "has_code_examples": true, "has_best_practices": false, "section_count": 6, "timestamp": "2025-02-28 06:43:58", "type": "code_examples", "page_metadata": {"description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:title": "Schedule a notification for a future date", "og:image": "/img/og.webp", "twitter:image": "/img/og.webp", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "ogImage": "/img/og.webp", "twitter:title": "Schedule a notification for a future date", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "favicon": "https://docs.deno.com/favicon.ico", "twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogSiteName": "Deno", "ogLocale": "en_US", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "og:type": "article", "og:locale": "en_US", "language": "en", "title": "Schedule a notification for a future date", "ogTitle": "Schedule a notification for a future date", "og:site_name": "Deno", "twitter:site": "@deno_land", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "scrapeId": "856304f8-d1e0-4b9d-8ef2-4b5df13d6fd7", "sourceURL": "https://docs.deno.com/deploy/kv/tutorials/schedule_notification", "url": "https://docs.deno.com/deploy/kv/tutorials/schedule_notification/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What is \"OpenTelemetry\"?\n\nAssistant: The OpenTelemetry integration for Deno is still in development and may change. To use it, you must pass the `--unstable-otel` flag to Deno. Deno has built in support for OpenTelemetry.\n\nHere's a detailed explanation:\n\n\n## Quick start\nTo enable the OpenTelemetry integration, run your Deno script with the `--unstable-otel` flag and set the environment variable `OTEL_DENO=true`:\n\n```highlight notranslate sh\nOTEL_DENO=true deno run --unstable-otel my_script.ts\n```\n\nThis will automatically collect and export runtime observability data to an OpenTelemetry endpoint at `localhost:4318` using Protobuf over HTTP ( `http/protobuf`).\n\nTip\n\nIf you do not have an OpenTelemetry collector set up yet, you can get started with a [local LGTM stack in Docker](https://github.com/grafana/docker-otel-lgtm/tree/main?tab=readme-ov-file) (Loki (logs), Grafana (dashboard), Tempo (traces), and Mimir (metrics)) by running the following command:\n\n```highlight notranslate sh\ndocker run --name lgtm -p 3000:3000 -p 4317:4317 -p 4318:4318 --rm -ti \\\n\t-v \"$PWD\"/lgtm/grafana:/data/grafana \\\n\t-v \"$PWD\"/lgtm/prometheus:/data/prometheus \\\n\t-v \"$PWD\"/lgtm/loki:/data/loki \\\n\t-e GF_PATHS_DATA=/data/grafana \\\n\tdocker.io/grafana/otel-lgtm:0.8.1\n```\n\nYou can then access the Grafana dashboard at `http://localhost:3000` with the username `admin` and password `admin. This will automatically collect and export runtime observability data like `console.log`, traces for HTTP requests, and metrics for the Deno runtime. [Learn more about auto instrumentation](https://docs.deno.com/runtime/fundamentals/open_telemetry/#auto-instrumentation). You can also create your own metrics, traces, and logs using the `npm:@opentelemetry/api` package. [Learn more about user defined metrics](https://docs.deno.com/runtime/fundamentals/open_telemetry/#user-metrics).\n\n## Auto instrumentation\nDeno automatically collects and exports some observability data to the OTLP endpoint. This data is exported in the built-in instrumentation scope of the Deno runtime. This scope has the name `deno`. The version of the Deno runtime is the version of the `deno` instrumentation scope. (e.g. `deno:2.1.4`).\n\n### Traces\n\nDeno automatically creates spans for various operations, such as:\n\n- Incoming HTTP requests served with `Deno.serve`.\n- Outgoing HTTP requests made with `fetch`.\n\n#### `Deno.serve`\n\nWhen you use `Deno.serve` to create an HTTP server, a span is created for each incoming request. The span automatically ends when response headers are sent (not when the response body is done sending).\n\nThe name of the created span is `${method}`. The span kind is `server`.\n\nThe following attributes are automatically added to the span on creation:\n\n- `http.request.method`: The HTTP method of the request.\n- `url.full`: The full URL of the request (as would be reported by `req.url`).\n- `url.scheme`: The scheme of the request URL (e.g. `http` or `https`).\n- `url.path`: The path of the request URL.\n- `url.query`: The query string of the request URL.\n\nAfter the request is handled, the following attributes are added:\n\n- `http.status_code`: The status code of the response.\n\nDeno does not automatically add a `http.route` attribute to the span as the route is not known by the runtime, and instead is determined by the routing logic in a user's handler function. If you want to add a `http.route` attribute to the span, you can do so in your handler function using `npm:@opentelemetry/api`. In this case you should also update the span name to include the route.\n\n```highlight notranslate ts\nimport { trace } from \"npm:@opentelemetry/api@1\";\n\nconst INDEX_ROUTE = new URLPattern({ pathname: \"/\" });\nconst BOOK_ROUTE = new URLPattern({ pathname: \"/book/:id\" });\n\nDeno.serve(async (req) => {\n  const span = trace.getActiveSpan();\n  if (INDEX_ROUTE.test(req.url)) {\n    span.setAttribute(\"http.route\", \"/\");\n    span.updateName(`${req.method} /\");\n\n    // handle index route\n  } else if (BOOK_ROUTE.test(req.url)) {\n    span.setAttribute(\"http.route\", \"/book/:id\");\n    span.updateName(`${req.method} /book/:id\");\n\n    // handle book route\n  } else {\n    return new Response(\"Not found\", { status: 404 });\n  }\n});\n```\n\n#### `fetch`\n\nWhen you use `fetch` to make an HTTP request, a span is created for the request. The span automatically ends when the response headers are received.\n\nThe name of the created span is `${method}`. The span kind is `client`.\n\nThe following attributes are automatically added to the span on creation:\n\n- `http.request.method`: The HTTP method of the request.\n- `url.full`: The full URL of the request.\n- `url.scheme`: The scheme of the request URL.\n- `url.path`: The path of the request URL.\n- `url.query`: The query string of the request URL.\n\nAfter the response is received, the following attributes are added:\n\n- `http.status_code`: The status code of the response.\n\n## Metrics\nThe following metrics are automatically collected and exported:\n\n#### `Deno.serve` / `Deno.serveHttp`\n\n##### `http.server.request.duration`\n\nA histogram of the duration of incoming HTTP requests served with `Deno.serve` or `Deno.serveHttp`. The time that is measured is from when the request is received to when the response headers are sent. This does not include the time to send the response body. The unit of this metric is seconds. The histogram buckets are `[0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1.0, 2.5, 5.0, 7.5, 10.0]`.\n\nThis metric is recorded with the following attributes:\n\n- `http.request.method`: The HTTP method of the request.\n- `url.scheme`: The scheme of the request URL.\n- `network.protocol.version`: The version of the HTTP protocol used for the request (e.g. `1.1` or `2`).\n- `server.address`: The address that the server is listening on.\n- `server.port`: The port that the server is listening on.\n- `http.response.status_code`: The status code of the response (if the request has been handled without a fatal error).\n- `error.type`: The type of error that occurred (if the request handling was subject to an error).\n\n##### `http.server.active_requests`\n\nA gauge of the number of active requests being handled by `Deno.serve` or `Deno.serveHttp` at any given time. This is the number of requests that have been received but not yet responded to (where the response headers have not yet been sent). This metric is recorded with the following attributes:\n\n- `http.request.method`: The HTTP method of the request.\n- `url.scheme`: The scheme of the request URL.\n- `server.address`: The address that the server is listening on.\n- `server.port`: The port that the server is listening on.\n\n##### `http.server.request.body.size`\n\nA histogram of the size of the request body of incoming HTTP requests served with `Deno.serve` or `Deno.serveHttp`. The unit of this metric is bytes. The histogram buckets are `[0, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]`.\n\nThis metric is recorded with the following attributes:\n\n- `http.request.method`: The HTTP method of the request.\n- `url.scheme`: The scheme of the request URL.\n- `network.protocol.version`: The version of the HTTP protocol used for the request (e.g. `1.1` or `2`).\n- `server.address`: The address that the server is listening on.\n- `server.port`: The port that the server is listening on.\n- `http.response.status_code`: The status code of the response (if the request has been handled without a fatal error).\n- `error.type`: The type of error that occurred (if the request handling was subject to an error).\n\n##### `http.server.response.body.size`\n\nA histogram of the size of the response body of incoming HTTP requests served with `Deno.serve` or `Deno.serveHttp`. The unit of this metric is bytes. The histogram buckets are `[0, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]`.\n\nThis metric is recorded with the following attributes:\n\n- `http.request.method`: The HTTP method of the request.\n- `url.scheme`: The scheme of the request URL.\n- `network.protocol.version`: The version of the HTTP protocol used for the request (e.g. `1.1` or `2`).\n- `server.address`: The address that the server is listening on.\n- `server.port`: The port that the server is listening on.\n- `http.response.status_code`: The status code of the response (if the request has been handled without a fatal error).\n- `error.type`: The type of error that occurred (if the request handling was subject to an error).\n\n## Logs\nThe following logs are automatically collected and exported:\n\n- Any logs created with `console.*` methods such as `console.log` and `console.error`.\n- Any logs created by the Deno runtime, such as debug logs, `Downloading` logs, and similar.\n- Any errors that cause the Deno runtime to exit (both from user code, and from the runtime itself).\n\nLogs raised from JavaScript code will be exported with the relevant span context, if the log occurred inside of an active span.\n\n`console` auto instrumentation can be configured using the `OTEL_DENO_CONSOLE` environment variable:\n\n- `capture`: Logs are emitted to stdout/stderr and are also exported with OpenTelemetry. (default)\n- `replace`: Logs are only exported with OpenTelemetry, and not emitted to stdout/stderr.\n- `ignore`: Logs are emitted only to stdout/stderr, and will not be exported with OpenTelemetry.\n\n## User metrics\nIn addition to the automatically collected telemetry data, you can also create your own metrics and traces using the `npm:@opentelemetry/api` package.\n\nYou do not need to configure the `npm:@opentelemetry/api` package to use it with Deno. Deno sets up the `npm:@opentelemetry/api` package automatically when the `--unstable-otel` flag is passed. There is no need to call `metrics.setGlobalMeterProvider()`, `trace.setGlobalTracerProvider()`, or `context.setGlobalContextManager()`. All configuration of resources, exporter settings, etc. is done via environment variables.\n\nDeno works with version `1.x` of the `npm:@opentelemetry/api` package. You can either import directly from `npm:@opentelemetry/api@1`, or you can install the package locally with `deno add` and import from `@opentelemetry/api`.\n\n```highlight notranslate sh\ndeno add npm:@opentelemetry/api@1\n```\n\nFor both traces and metrics, you need to define names for the tracer and meter respectively. If you are instrumenting a library, you should name the tracer or meter after the library (such as `my-awesome-lib`). If you are instrumenting an application, you should name the tracer or meter after the application (such as `my-app`). The version of the tracer or meter should be set to the version of the library or application.\n\n## Context propagation\nIn OpenTelemetry, context propagation is the process of passing some context information (such as the current span) from one part of an application to another, without having to pass it explicitly as an argument to every function.\n\nIn Deno, context propagation is done using the rules of `AsyncContext`, the TC39 proposal for async context propagation. The `AsyncContext` API is not yet exposed to users in Deno, but it is used internally to propagate the active span and other context information across asynchronous boundaries.\n\nA quick overview how AsyncContext propagation works:\n\n- When a new asynchronous task is started (such as a promise, or a timer), the current context is saved.\n- Then some other code can execute concurrently with the asynchronous task, in a different context.\n- When the asynchronous task completes, the saved context is restored.\n\nThis means that async context propagation essentially behaves like a global variable that is scoped to the current asynchronous task, and is automatically copied to any new asynchronous tasks that are started from this current task.\n\nThe `context` API from `npm:@opentelemetry/api@1` exposes this functionality to users. It works as follows:\n\n```highlight notranslate ts\nimport { context } from \"npm:@opentelemetry/api@1\";\n\n// Get the currently active context\nconst currentContext = context.active();\n\n// You can add create a new context with a value added to it\nconst newContext = currentContext.setValue(\"id\", 1);\n\n// The current context is not changed by calling setValue\nconsole.log(currentContext.getValue(\"id\")); // undefined\n\n// You can run a function inside a new context\ncontext.with(newContext, () => {\n  // Any code in this block will run with the new context\n  console.log(context.active().getValue(\"id\")); // 1\n\n  // The context is also available in any functions called from this block\n  function myFunction() {\n    return context.active().getValue(\"id\");\n  }\n  console.log(myFunction()); // 1\n\n  // And it is also available in any asynchronous callbacks scheduled from here\n  setTimeout(() => {\n    console.log(context.active().getValue(\"id\")); // 1\n  }, 10);\n});\n\n// Outside, the context is still the same\nconsole.log(context.active().getValue(\"id\")); // undefined\n```\n\nThe context API integrates with spans too. For example, to run a function in the context of a specific span, the span can be added to a context, and then the function can be run in that context:\n\n```highlight notranslate ts\nimport { context, trace } from \"npm:@opentelemetry/api@1\";\n\nconst tracer = trace.getTracer(\"my-app\", \"1.0.0\");\n\nconst span = tracer.startSpan(\"myFunction\");\nconst contextWithSpan = trace.setSpan(context.active(), span);\n\ncontext.with(contextWithSpan, () => {\n  const activeSpan = trace.getActiveSpan();\n  console.log(activeSpan === span); // true\n});\n\n// Don't forget to end the span!\nspan.end();\n```\n\n## Configuration\nThe OpenTelemetry integration can be enabled by setting the `OTEL_DENO=true` environment variable.\n\nThe endpoint and protocol for the OTLP exporter can be configured using the `OTEL_EXPORTER_OTLP_ENDPOINT` and `OTEL_EXPORTER_OTLP_PROTOCOL` environment variables.\n\nIf the endpoint requires authentication, headers can be configured using the `OTEL_EXPORTER_OTLP_HEADERS` environment variable.\n\nEndpoint can all be overridden individually for metrics, traces, and logs by using specific environment variables, such as:\n\n- `OTEL_EXPORTER_OTLP_METRICS_ENDPOINT`\n- `OTEL_EXPORTER_OTLP_TRACES_ENDPOINT`\n- `OTEL_EXPORTER_OTLP_LOGS_ENDPOINT`\n\nFor more information on headers that can be used to configure the OTLP exporter, [see the OpenTelemetry website](https://opentelemetry.io/docs/specs/otel/protocol/exporter/#configuration-options).\n\nThe resource that is associated with the telemetry data can be configured using the `OTEL_SERVICE_NAME` and `OTEL_RESOURCE_ATTRIBUTES` environment variables. In addition to attributes set via the `OTEL_RESOURCE_ATTRIBUTES` environment variable, the following attributes are automatically set:\n\n- `service.name`: If `OTEL_SERVICE_NAME` is not set, the value is set to `<unknown_service>`.\n- `process.runtime.name`: `deno`\n- `process.runtime.version`: The version of the Deno runtime.\n- `telemetry.sdk.name`: `deno-opentelemetry`\n- `telemetry.sdk.language`: `deno-rust`\n- `telemetry.sdk.version`: The version of the Deno runtime, plus the version of the `opentelemetry` Rust crate being used by Deno, separated by a `-`.\n\nMetric collection frequency can be configured using the `OTEL_METRIC_EXPORT_INTERVAL` environment variable. The default value is `60000` milliseconds (60 seconds).\n\nSpan exporter batching can be configured using the batch span processor environment variables described in the [OpenTelemetry specification](https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#batch-span-processor).\n\nLog exporter batching can be configured using the batch log record processor environment variables described in the [OpenTelemetry specification](https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#batch-log-record-processor).\n\n## Limitations\nWhile the OpenTelemetry integration for Deno is in development, there are some limitations to be aware of:\n\n- Traces are always sampled (i.e. `OTEL_TRACE_SAMPLER=parentbased_always_on`).\n- Traces do not support events.\n- Traces only support links with no attributes.\n- Automatic propagation of the trace context in `Deno.serve` and `fetch` is not supported.\n- Metric exemplars are not supported.\n- Custom log streams (e.g. logs other than `console.log` and `console.error`) are not supported.\n- The only supported exporter is OTLP - other exporters are not supported.\n- Only `http/protobuf` and `http/json` protocols are supported for OTLP. Other protocols such as `grpc` are not supported.\n- Metrics from observable (asynchronous) meters are not collected on process exit/crash, so the last value of metrics may not be exported. Synchronous metrics are exported on process exit/crash.\n- The limits specified in the `OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT`, `OTEL_ATTRIBUTE_COUNT_LIMIT`, `OTEL_SPAN_EVENT_COUNT_LIMIT`, `OTEL_SPAN_LINK_COUNT_LIMIT`, `OTEL_EVENT_ATTRIBUTE_COUNT_LIMIT`, and `OTEL_LINK_ATTRIBUTE_COUNT_LIMIT` environment variable are not respected for trace spans.\n- The `OTEL_METRIC_EXPORT_TIMEOUT` environment variable is not respected.\n- HTTP methods are that are not known are not normalized to `_OTHER` in the `http.request.method` span attribute as per the OpenTelemetry semantic conventions.\n- The HTTP server span for `Deno.serve` does not have an OpenTelemetry status set, and if the handler throws (ie `onError` is invoked), the span will not have an error status set and the error will not be attached to the span via event.\n- There is no mechanism to add a `http.route` attribute to the HTTP client span for `fetch`, or to update the span name to include the route.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/open_telemetry", "title": "OpenTelemetry", "description": "The OpenTelemetry integration for Deno is still in development and may change. To use it, you must pass the `--unstable-otel` flag to Deno. Deno has built in support for OpenTelemetry.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 06:45:03", "type": "overview", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "OpenTelemetry", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "OpenTelemetry", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:title": "OpenTelemetry", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "twitter:image": "/img/og.webp", "twitter:title": "OpenTelemetry", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "scrapeId": "07e2eefe-b757-4aa7-b177-ac1ed87c9730", "sourceURL": "https://docs.deno.com/runtime/fundamentals/open_telemetry", "url": "https://docs.deno.com/runtime/fundamentals/open_telemetry/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: Can you show me some code examples for \"OpenTelemetry\"?\n\nAssistant: Here are some code examples:\n\n### Quick start command\n```yaml\nOTEL_DENO=true deno run --unstable-otel my_script.ts\n```\n\n### Docker command for LGTM stack\n```yaml\ndocker run --name lgtm -p 3000:3000 -p 4317:4317 -p 4318:4318 --rm -ti \\\n\t-v \"$PWD\"/lgtm/grafana:/data/grafana \\\n\t-v \"$PWD\"/lgtm/prometheus:/data/prometheus \\\n\t-v \"$PWD\"/lgtm/loki:/data/loki \\\n\t-e GF_PATHS_DATA=/data/grafana \\\n\tdocker.io/grafana/otel-lgtm:0.8.1\n```\n\n### Deno.serve example\n```yaml\nimport { trace } from \"npm:@opentelemetry/api@1\";\n\nconst INDEX_ROUTE = new URLPattern({ pathname: \"/\" });\nconst BOOK_ROUTE = new URLPattern({ pathname: \"/book/:id\" });\n\nDeno.serve(async (req) => {\n  const span = trace.getActiveSpan();\n  if (INDEX_ROUTE.test(req.url)) {\n    span.setAttribute(\"http.route\", \"/\");\n    span.updateName(`${req.method} /\");\n\n    // handle index route\n  } else if (BOOK_ROUTE.test(req.url)) {\n    span.setAttribute(\"http.route\", \"/book/:id\");\n    span.updateName(`${req.method} /book/:id\");\n\n    // handle book route\n  } else {\n    return new Response(\"Not found\", { status: 404 });\n  }\n});\n```\n\n### Creating a tracer\n```yaml\nimport { trace } from \"npm:@opentelemetry/api@1\";\n\nconst tracer = trace.getTracer(\"my-app\", \"1.0.0\");\n```\n\n### Creating a metric\n```yaml\nimport { metrics } from \"npm:@opentelemetry/api@1\";\n\nconst meter = metrics.getMeter(\"my-app\", \"1.0.0\");\n\nconst counter = meter.createCounter(\"my_counter\", {\n  description: \"A simple counter\",\n  unit: \"1\",\n});\n\ncounter.add(1);\ncounter.add(2);\n\ncounter.add(1, { color: \"red\" });\ncounter.add(2, { color: \"blue\" });\n```\n\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/open_telemetry", "title": "OpenTelemetry", "description": "The OpenTelemetry integration for Deno is still in development and may change. To use it, you must pass the `--unstable-otel` flag to Deno. Deno has built in support for OpenTelemetry.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 06:45:03", "type": "code_examples", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "OpenTelemetry", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "OpenTelemetry", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:title": "OpenTelemetry", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "twitter:image": "/img/og.webp", "twitter:title": "OpenTelemetry", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "scrapeId": "07e2eefe-b757-4aa7-b177-ac1ed87c9730", "sourceURL": "https://docs.deno.com/runtime/fundamentals/open_telemetry", "url": "https://docs.deno.com/runtime/fundamentals/open_telemetry/", "statusCode": 200}}}
{"text": "System: You are a helpful Deno expert.\n\nUser: What are the best practices for \"OpenTelemetry\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you do not have an OpenTelemetry collector set up yet, you can get started with a local LGTM stack in Docker.\n• In OpenTelemetry, metric attributes should generally have low cardinality. This means that there should not be too many unique combinations of attribute values. High cardinality attributes can cause problems with metric storage and exporting, and should be avoided. Use spans and logs for high cardinality data.\n", "metadata": {"source_url": "https://docs.deno.com/runtime/fundamentals/open_telemetry", "title": "OpenTelemetry", "description": "The OpenTelemetry integration for Deno is still in development and may change. To use it, you must pass the `--unstable-otel` flag to Deno. Deno has built in support for OpenTelemetry.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-28 06:45:03", "type": "best_practices", "page_metadata": {"twitter:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "ogImage": "/img/og.webp", "twitter:site": "@deno_land", "favicon": "https://docs.deno.com/favicon.ico", "ogTitle": "OpenTelemetry", "og:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "title": "OpenTelemetry", "og:image": "/img/og.webp", "og:site_name": "Deno", "twitter:card": "summary_large_image", "og:title": "OpenTelemetry", "og:locale": "en_US", "keywords": "Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example", "language": "en", "twitter:image": "/img/og.webp", "twitter:title": "OpenTelemetry", "ogDescription": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "viewport": "width=device-width, initial-scale=1", "og:image:alt": "Deno docs: Deno documentation, guides, and reference materials. docs.deno.com", "twitter:description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "ogSiteName": "Deno", "ogLocale": "en_US", "description": "In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno", "og:type": "article", "scrapeId": "07e2eefe-b757-4aa7-b177-ac1ed87c9730", "sourceURL": "https://docs.deno.com/runtime/fundamentals/open_telemetry", "url": "https://docs.deno.com/runtime/fundamentals/open_telemetry/", "statusCode": 200}}}
