{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Documentation\"?\n\nAssistant: Welcome to the Helm documentation. Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report.\n\nHere's a detailed explanation:\n\n\n## How the documentation is organized\nHelm has a lot of documentation. A high-level overview of how it’s organized will help you know where to look for certain things:\n\n- Tutorials take you by the hand through a series of steps to create your first Helm chart. Start here if you’re new to Helm.\n- Topic guides discuss key topics and concepts at a fairly high level and provide useful background information and explanation.\n- Community Guides discuss topics centered around Helm’s community. Start here if you want to learn more about the development process of Helm itself and how you can contribute.\n- How-to guides are recipes. They guide you through the steps involved in addressing key problems and use-cases. They are more advanced than tutorials and assume some knowledge of how Helm works.\n\n## Quicklinks\n- Quickstart Guide: How to install and get started with Helm including instructions for distros, FAQs, and plugins.\n- Chart Guide: Practical steps for building Helm charts—how to structure, sign, and sync your charts.\n- Video: Intro to Helm: Watch Matt Farina and Josh Dolitsky present an introduction to Helm at KubeCon 2019.\n- Migrating from v2 to v3: Read our blog post on how to migrate from Helm v2 to Helm v3.\n- Helm Security Audit: Helm has been audited and deemed as recommended for public deployment during a third-party security audit funded by the CNCF.\n", "metadata": {"source_url": "https://helm.sh/docs", "title": "Helm Documentation", "description": "Welcome to the Helm documentation. Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:06:43", "type": "overview", "page_metadata": {"language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Everything you need to know about how the documentation is organized.", "ogTitle": "Docs Home", "og:title": ["Docs Home", "Docs Home"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Everything you need to know about how the documentation is organized.", "twitter:title": "Helm | Docs Home", "twitter:description": "Everything you need to know about how the documentation is organized.", "ogUrl": "https://helm.sh/docs/", "title": "Helm | Docs\n", "og:url": "https://helm.sh/docs/", "og:description": "Everything you need to know about how the documentation is organized.", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "f6371b8a-8c3f-4224-a96e-ad1dc86a6d93", "sourceURL": "https://helm.sh/docs", "url": "https://helm.sh/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Documentation\"?\n\nAssistant: Here are the recommended best practices:\n\n• Start with the Tutorials if you’re new to Helm.\n• Refer to Topic guides for key topics and concepts.\n• Check Community Guides for information on contributing to Helm.\n• Use How-to guides for advanced recipes and use-cases.\n", "metadata": {"source_url": "https://helm.sh/docs", "title": "Helm Documentation", "description": "Welcome to the Helm documentation. Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:06:43", "type": "best_practices", "page_metadata": {"language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Everything you need to know about how the documentation is organized.", "ogTitle": "Docs Home", "og:title": ["Docs Home", "Docs Home"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Everything you need to know about how the documentation is organized.", "twitter:title": "Helm | Docs Home", "twitter:description": "Everything you need to know about how the documentation is organized.", "ogUrl": "https://helm.sh/docs/", "title": "Helm | Docs\n", "og:url": "https://helm.sh/docs/", "og:description": "Everything you need to know about how the documentation is organized.", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "f6371b8a-8c3f-4224-a96e-ad1dc86a6d93", "sourceURL": "https://helm.sh/docs", "url": "https://helm.sh/docs/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Changes Since Helm 2\"?\n\nAssistant: Here's an exhaustive list of all the major changes introduced in Helm 3.\n\nHere's a detailed explanation:\n\n\n## Removal of Tiller\nDuring the Helm 2 development cycle, we introduced Tiller. Tiller played an important role for teams working on a shared cluster - it made it possible for multiple different operators to interact with the same set of releases.\n\nWith role-based access controls (RBAC) enabled by default in Kubernetes 1.6, locking down Tiller for use in a production scenario became more difficult to manage. Due to the vast number of possible security policies, our stance was to provide a permissive default configuration. This allowed first-time users to start experimenting with Helm and Kubernetes without having to dive headfirst into the security controls. Unfortunately, this permissive configuration could grant a user a broad range of permissions they weren’t intended to have. DevOps and SREs had to learn additional operational steps when installing Tiller into a multi-tenant cluster.\n\nAfter hearing how community members were using Helm in certain scenarios, we found that Tiller’s release management system did not need to rely upon an in-cluster operator to maintain state or act as a central hub for Helm release information. Instead, we could simply fetch information from the Kubernetes API server, render the Charts client-side, and store a record of the installation in Kubernetes.\n\nTiller’s primary goal could be accomplished without Tiller, so one of the first decisions we made regarding Helm 3 was to completely remove Tiller.\n\nWith Tiller gone, the security model for Helm is radically simplified. Helm 3 now supports all the modern security, identity, and authorization features of modern Kubernetes. Helm’s permissions are evaluated using your kubeconfig file. Cluster administrators can restrict user permissions at whatever granularity they see fit. Releases are still recorded in-cluster, and the rest of Helm’s functionality remains.\n\n## Improved Upgrade Strategy: 3-way Strategic Merge Patches\nHelm 2 used a two-way strategic merge patch. During an upgrade, it compared the most recent chart's manifest against the proposed chart's manifest (the one supplied during `helm upgrade`). It compared the differences between these two charts to determine what changes needed to be applied to the resources in Kubernetes. If changes were applied to the cluster out-of-band (such as during a `kubectl edit`), those changes were not considered. This resulted in resources being unable to roll back to its previous state: because Helm only considered the last applied chart's manifest as its current state, if there were no changes in the chart's state, the live state was left unchanged.\n\nIn Helm 3, we now use a three-way strategic merge patch. Helm considers the old manifest, its live state, and the new manifest when generating a patch.\n\n## Examples\nLet's go through a few common examples what this change impacts.\n\n## Rolling back where live state has changed\nYour team just deployed their application to production on Kubernetes using Helm. The chart contains a Deployment object where the number of replicas is set to three:\n\n```console\n$ helm install myapp ./myapp\n```\n\nA new developer joins the team. On their first day while observing the production cluster, a horrible coffee-spilling-on-the-keyboard accident happens and they `kubectl scale` the production deployment from three replicas down to zero.\n\n```console\n$ kubectl scale --replicas=0 deployment/myapp\n```\n\nAnother developer on your team notices that the production site is down and decides to rollback the release to its previous state:\n\n```console\n$ helm rollback myapp\n```\n\nWhat happens?\n\nIn Helm 2, it would generate a patch, comparing the old manifest against the new manifest. Because this is a rollback, it's the same manifest. Helm would determine that there is nothing to change because there is no difference between the old manifest and the new manifest. The replica count continues to stay at zero. Panic ensues.\n\nIn Helm 3, the patch is generated using the old manifest, the live state, and the new manifest. Helm recognizes that the old state was at three, the live state is at zero and the new manifest wishes to change it back to three, so it generates a patch to change the state back to three.\n\n## Upgrades where live state has changed\nMany service meshes and other controller-based applications inject data into Kubernetes objects. This can be something like a sidecar, labels, or other information. Previously if you had the given manifest rendered from a Chart:\n\n```yaml\ncontainers:\n- name: server\n  image: nginx:2.0.0\n```\n\nAnd the live state was modified by another application to\n\n```yaml\ncontainers:\n- name: server\n  image: nginx:2.0.0\n- name: my-injected-sidecar\n  image: my-cool-mesh:1.0.0\n```\n\nNow, you want to upgrade the `nginx` image tag to `2.1.0`. So, you upgrade to a chart with the given manifest:\n\n```yaml\ncontainers:\n- name: server\n  image: nginx:2.1.0\n```\n\nWhat happens?\n\nIn Helm 2, Helm generates a patch of the `containers` object between the old manifest and the new manifest. The cluster's live state is not considered during the patch generation.\n\nThe cluster's live state is modified to look like the following:\n\n```yaml\ncontainers:\n- name: server\n  image: nginx:2.1.0\n```\n\nThe sidecar pod is removed from live state. More panic ensues.\n\nIn Helm 3, Helm generates a patch of the `containers` object between the old manifest, the live state, and the new manifest. It notices that the new manifest changes the image tag to `2.1.0`, but live state contains a sidecar container.\n\nThe cluster's live state is modified to look like the following:\n\n```yaml\ncontainers:\n- name: server\n  image: nginx:2.1.0\n- name: my-injected-sidecar\n  image: my-cool-mesh:1.0.0\n```\n\n## Release Names are now scoped to the Namespace\nWith the removal of Tiller, the information about each release had to go somewhere. In Helm 2, this was stored in the same namespace as Tiller. In practice, this meant that once a name was used by a release, no other release could use that same name, even if it was deployed in a different namespace.\n\nIn Helm 3, information about a particular release is now stored in the same namespace as the release itself. This means that users can now `helm install wordpress stable/wordpress` in two separate namespaces, and each can be referred with `helm list` by changing the current namespace context (e.g. `helm list --namespace foo`).\n\nWith this greater alignment to native cluster namespaces, the `helm list` command no longer lists all releases by default. Instead, it will list only the releases in the namespace of your current kubernetes context (i.e. the namespace shown when you run `kubectl config view --minify`). It also means you must supply the `--all-namespaces` flag to `helm list` to get behaviour similar to Helm 2.\n\n## Secrets as the default storage driver\nIn Helm 3, Secrets are now used as the default storage driver. Helm 2 used ConfigMaps by default to store release information. In Helm 2.7.0, a new storage backend that uses Secrets for storing release information was implemented, and it is now the default starting in Helm 3.\n\nChanging to Secrets as the Helm 3 default allows for additional security in protecting charts in conjunction with the release of Secret encryption in Kubernetes.\n\nEncrypting secrets at rest became available as an alpha feature in Kubernetes 1.7 and became stable as of Kubernetes 1.13. This allows users to encrypt Helm release metadata at rest, and so it is a good starting point that can be expanded later into using something like Vault.\n\n## Go import path changes\nIn Helm 3, Helm switched the Go import path over from `k8s.io/helm` to `helm.sh/helm/v3`. If you intend to upgrade to the Helm 3 Go client libraries, make sure to change your import paths.\n\n## Capabilities\nThe `.Capabilities` built-in object available during the rendering stage has been simplified.\n\n## Validating Chart Values with JSONSchema\nA JSON Schema can now be imposed upon chart values. This ensures that values provided by the user follow the schema laid out by the chart maintainer, providing better error reporting when the user provides an incorrect set of values for a chart.\n\nValidation occurs when any of the following commands are invoked:\n\n- `helm install`\n- `helm upgrade`\n- `helm template`\n- `helm lint`\n\nSee the documentation on Schema files for more information.\n\n## Consolidation of requirements.yaml into Chart.yaml\nThe Chart dependency management system moved from requirements.yaml and requirements.lock to Chart.yaml and Chart.lock. We recommend that new charts meant for Helm 3 use the new format. However, Helm 3 still understands Chart API version 1 ( v1) and will load existing requirements.yaml files.\n\nIn Helm 2, this is how a requirements.yaml looked:\n\n```yaml\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://charts.helm.sh/stable\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n\nIn Helm 3, the dependency is expressed the same way, but now from your Chart.yaml:\n\n```yaml\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://charts.helm.sh/stable\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n\nCharts are still downloaded and placed in the `charts/` directory, so subcharts vendored into the `charts/` directory will continue to work without modification.\n\n## Name (or --generate-name) is now required on install\nIn Helm 2, if no name was provided, an auto-generated name would be given. In production, this proved to be more of a nuisance than a helpful feature. In Helm 3, Helm will throw an error if no name is provided with `helm install`.\n\nFor those who still wish to have a name auto-generated for you, you can use the `--generate-name` flag to create one for you.\n\n## Pushing Charts to OCI Registries\nThis is an experimental feature introduced in Helm 3. To use, set the environment variable `HELM_EXPERIMENTAL_OCI=1`.\n\nAt a high level, a Chart Repository is a location where Charts can be stored and shared. The Helm client packs and ships Helm Charts to a Chart Repository. Simply put, a Chart Repository is a basic HTTP server that houses an index.yaml file and some packaged charts.\n\nWhile there are several benefits to the Chart Repository API meeting the most basic storage requirements, a few drawbacks have started to show:\n\n- Chart Repositories have a very hard time abstracting most of the security implementations required in a production environment. Having a standard API for authentication and authorization is very important in production scenarios.\n- Helm’s Chart provenance tools used for signing and verifying the integrity and origin of a chart are an optional piece of the Chart publishing process.\n- In multi-tenant scenarios, the same Chart can be uploaded by another tenant, costing twice the storage cost to store the same content. Smarter chart repositories have been designed to handle this, but it’s not a part of the formal specification.\n- Using a single index file for search, metadata information, and fetching Charts has made it difficult or clunky to design around in secure multi-tenant implementations.\n\nDocker’s Distribution project (also known as Docker Registry v2) is the successor to the Docker Registry project. Many major cloud vendors have a product offering of the Distribution project, and with so many vendors offering the same product, the Distribution project has benefited from many years of hardening, security best practices, and battle-testing.\n\nPlease have a look at `helm help chart` and `helm help registry` for more information on how to package a chart and push it to a Docker registry.\n\n## Removal of helm serve\n`helm serve` ran a local Chart Repository on your machine for development purposes. However, it didn't receive much uptake as a development tool and had numerous issues with its design. In the end, we decided to remove it and split it out as a plugin.\n\nFor a similar experience to `helm serve`, have a look at the local filesystem storage option in ChartMuseum and the servecm plugin.\n\n## Library chart support\nHelm 3 supports a class of chart called a “library chart”. This is a chart that is shared by other charts, but does not create any release artifacts of its own. A library chart’s templates can only declare `define` elements. Globally scoped non- `define` content is simply ignored. This allows users to re-use and share snippets of code that can be re-used across many charts, avoiding redundancy and keeping charts DRY.\n\nLibrary charts are declared in the dependencies directive in Chart.yaml, and are installed and managed like any other chart.\n\n## Chart.yaml apiVersion bump\nWith the introduction of library chart support and the consolidation of requirements.yaml into Chart.yaml, clients that understood Helm 2's package format won't understand these new features. So, we bumped the apiVersion in Chart.yaml from `v1` to `v2`.\n\n## XDG Base Directory Support\nThe XDG Base Directory Specification is a portable standard defining where configuration, data, and cached files should be stored on the filesystem.\n\nIn Helm 2, Helm stored all this information in `~/.helm` (affectionately known as `helm home`), which could be changed by setting the `$HELM_HOME` environment variable, or by using the global flag `--home`.\n\nIn Helm 3, Helm now respects the following environment variables as per the XDG Base Directory Specification:\n\n- `$XDG_CACHE_HOME`\n- `$XDG_CONFIG_HOME`\n- `$XDG_DATA_HOME`\n\nHelm plugins are still passed `$HELM_HOME` as an alias to `$XDG_DATA_HOME` for backwards compatibility with plugins looking to use `$HELM_HOME` as a scratchpad environment.\n\n## CLI Command Renames\nIn order to better align the verbiage from other package managers, `helm delete` was re-named to `helm uninstall`. `helm delete` is still retained as an alias to `helm uninstall`, so either form can be used.\n\n## Automatically creating namespaces\nWhen creating a release in a namespace that does not exist, Helm 2 created the namespace. Helm 3 follows the behavior of other Kubernetes tooling and returns an error if the namespace does not exist. Helm 3 will create the namespace if you explicitly specify `--create-namespace` flag.\n\n## What happened to .Chart.ApiVersion?\nHelm follows the typical convention for CamelCasing which is to capitalize an acronym. We have done this elsewhere in the code, such as with `.Capabilities.APIVersions.Has`. In Helm v3, we corrected `.Chart.ApiVersion` to follow this pattern, renaming it to `.Chart.APIVersion`.\n", "metadata": {"source_url": "https://helm.sh/docs/faq/changes_since_helm2", "title": "Changes Since Helm 2", "description": "Here's an exhaustive list of all the major changes introduced in Helm 3.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-27 21:07:30", "type": "overview", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Changes Since Helm 2", "Changes Since Helm 2"], "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Changes Since Helm 2", "ogUrl": "https://helm.sh/docs/faq/changes_since_helm2/", "title": "Helm | Changes Since Helm 2\n", "language": "en", "ogTitle": "Changes Since Helm 2", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/faq/changes_since_helm2/", "twitter:card": "summary", "scrapeId": "7282a78c-c4c0-4e0b-ab19-89c104664eca", "sourceURL": "https://helm.sh/docs/faq/changes_since_helm2", "url": "https://helm.sh/docs/faq/changes_since_helm2/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Changes Since Helm 2\"?\n\nAssistant: Here are some code examples:\n\n### Rolling back where live state has changed\n```yaml\n$ helm install myapp ./myapp\n$ kubectl scale --replicas=0 deployment/myapp\n$ helm rollback myapp\n```\n\n### Upgrades where live state has changed\n```yaml\n```yaml\ncontainers:\n- name: server\n  image: nginx:2.0.0\n```\n\n```yaml\ncontainers:\n- name: server\n  image: nginx:2.0.0\n- name: my-injected-sidecar\n  image: my-cool-mesh:1.0.0\n```\n\n```yaml\ncontainers:\n- name: server\n  image: nginx:2.1.0\n```\n```\n\n### Requirements.yaml example\n```yaml\n```yaml\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://charts.helm.sh/stable\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n```\n\n### Chart.yaml example\n```yaml\n```yaml\ndependencies:\n- name: mariadb\n  version: 5.x.x\n  repository: https://charts.helm.sh/stable\n  condition: mariadb.enabled\n  tags:\n    - database\n```\n```\n\n### Library chart example\n```yaml\n```yaml\ndependencies:\n  - name: mylib\n    version: 1.x.x\n    repository: quay.io\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/faq/changes_since_helm2", "title": "Changes Since Helm 2", "description": "Here's an exhaustive list of all the major changes introduced in Helm 3.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-27 21:07:30", "type": "code_examples", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Changes Since Helm 2", "Changes Since Helm 2"], "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Changes Since Helm 2", "ogUrl": "https://helm.sh/docs/faq/changes_since_helm2/", "title": "Helm | Changes Since Helm 2\n", "language": "en", "ogTitle": "Changes Since Helm 2", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/faq/changes_since_helm2/", "twitter:card": "summary", "scrapeId": "7282a78c-c4c0-4e0b-ab19-89c104664eca", "sourceURL": "https://helm.sh/docs/faq/changes_since_helm2", "url": "https://helm.sh/docs/faq/changes_since_helm2/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Changes Since Helm 2\"?\n\nAssistant: Here are the recommended best practices:\n\n• Helm 3 supports all the modern security, identity, and authorization features of modern Kubernetes.\n• Use the `--generate-name` flag to create an auto-generated name if needed.\n• Consider using the new environment variables for plugins to support Helm 3.\n• For better error reporting, impose a JSON Schema on chart values.\n• Use library charts to avoid redundancy and keep charts DRY.\n", "metadata": {"source_url": "https://helm.sh/docs/faq/changes_since_helm2", "title": "Changes Since Helm 2", "description": "Here's an exhaustive list of all the major changes introduced in Helm 3.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-27 21:07:30", "type": "best_practices", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Changes Since Helm 2", "Changes Since Helm 2"], "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Changes Since Helm 2", "ogUrl": "https://helm.sh/docs/faq/changes_since_helm2/", "title": "Helm | Changes Since Helm 2\n", "language": "en", "ogTitle": "Changes Since Helm 2", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/faq/changes_since_helm2/", "twitter:card": "summary", "scrapeId": "7282a78c-c4c0-4e0b-ab19-89c104664eca", "sourceURL": "https://helm.sh/docs/faq/changes_since_helm2", "url": "https://helm.sh/docs/faq/changes_since_helm2/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Chart Development Tips and Tricks\"?\n\nAssistant: This guide covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.\n\nHere's a detailed explanation:\n\n\n## Know Your Template Functions\nHelm uses [Go templates](https://godoc.org/text/template) for templating your resource files. While Go ships several built-in functions, we have added many others.\n\nFirst, we added all of the functions in the [Sprig\\ library](https://masterminds.github.io/sprig/), except `env` and `expandenv`, for security reasons.\n\nWe also added two special template functions: `include` and `required`. The `include` function allows you to bring in another template, and then pass the results to other template functions.\n\nFor example, this template snippet includes a template called `mytpl`, then lowercases the result, then wraps that in double quotes.\n\n```yaml\nvalue: {{ include \"mytpl\" . | lower | quote }}\n```\n\nThe `required` function allows you to declare a particular values entry as required for template rendering. If the value is empty, the template rendering will fail with a user submitted error message.\n\nThe following example of the `required` function declares an entry for `.Values.who` is required, and will print an error message when that entry is missing:\n\n```yaml\nvalue: {{ required \"A valid .Values.who entry required!\" .Values.who }}\n```\n\n## Quote Strings, Don't Quote Integers\nWhen you are working with string data, you are always safer quoting the strings than leaving them as bare words:\n\n```yaml\nname: {{ .Values.MyName | quote }}\n```\n\nBut when working with integers _do not quote the values._ That can, in many cases, cause parsing errors inside of Kubernetes.\n\n```yaml\nport: {{ .Values.Port }}\n```\n\nThis remark does not apply to env variables values which are expected to be string, even if they represent integers:\n\n```yaml\nenv:\n  - name: HOST\n    value: \"http://host\"\n  - name: PORT\n    value: \"1234\"\n```\n\n## Using the 'include' Function\nGo provides a way of including one template in another using a built-in `template` directive. However, the built-in function cannot be used in Go template pipelines.\n\nTo make it possible to include a template, and then perform an operation on that template's output, Helm has a special `include` function:\n\n```fallback\n{{ include \"toYaml\" $value | indent 2 }}\n```\n\nThe above includes a template called `toYaml`, passes it `$value`, and then passes the output of that template to the `indent` function.\n\nBecause YAML ascribes significance to indentation levels and whitespace, this is one great way to include snippets of code, but handle indentation in a relevant context.\n\n## Using the 'required' function\nGo provides a way for setting template options to control behavior when a map is indexed with a key that's not present in the map. This is typically set with `template.Options(\"missingkey=option\")`, where `option` can be `default`, `zero`, or `error`. While setting this option to error will stop execution with an error, this would apply to every missing key in the map. There may be situations where a chart developer wants to enforce this behavior for select values in the `values.yaml` file.\n\nThe `required` function gives developers the ability to declare a value entry as required for template rendering. If the entry is empty in `values.yaml`, the template will not render and will return an error message supplied by the developer.\n\nFor example:\n\n```fallback\n{{ required \"A valid foo is required!\" .Values.foo }}\n```\n\nThe above will render the template when `.Values.foo` is defined, but will fail to render and exit when `.Values.foo` is undefined.\n\n## Using the 'tpl' Function\nThe `tpl` function allows developers to evaluate strings as templates inside a template. This is useful to pass a template string as a value to a chart or render external configuration files. Syntax: `{{ tpl TEMPLATE_STRING VALUES }}`\n\nExamples:\n\n```yaml\n# values\ntemplate: \"{{ .Values.name }}\"\nname: \"Tom\"\n\n# template\n{{ tpl .Values.template . }}\n\n# output\nTom\n```\n\nRendering an external configuration file:\n\n```yaml\n# external configuration file conf/app.conf\nfirstName={{ .Values.firstName }}\nlastName={{ .Values.lastName }}\n\n# values\nfirstName: Peter\nlastName: Parker\n\n# template\n{{ tpl (.Files.Get \"conf/app.conf\") . }}\n\n# output\nfirstName=Peter\nlastName=Parker\n```\n\n## Creating Image Pull Secrets\nImage pull secrets are essentially a combination of _registry_, _username_, and _password_. You may need them in an application you are deploying, but to create them requires running `base64` a couple of times. We can write a helper template to compose the Docker configuration file for use as the Secret's payload. Here is an example:\n\nFirst, assume that the credentials are defined in the `values.yaml` file like so:\n\n```yaml\nimageCredentials:\n  registry: quay.io\n  username: someone\n  password: sillyness\n  email: someone@host.com\n```\n\nWe then define our helper template as follows:\n\n```fallback\n{{- define \"imagePullSecret\" }}\n{{- with .Values.imageCredentials }}\n{{- printf \"{\\\"auths\\\":{\\\"%s\\\":{\\\"username\\\":\\\"%s\\\",\\\"password\\\":\\\"%s\\\",\\\"email\\\":\\\"%s\\\",\\\"auth\\\":\\\"%s\\\"}}}\" .registry .username .password .email (printf \"%s:%s\" .username .password | b64enc) | b64enc }}\n{{- end }}\n{{- end }}\n```\n\nFinally, we use the helper template in a larger template to create the Secret manifest:\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: myregistrykey\ntype: kubernetes.io/dockerconfigjson\ndata:\n  .dockerconfigjson: {{ template \"imagePullSecret\" . }}\n```\n\n## Automatically Roll Deployments\nOften times ConfigMaps or Secrets are injected as configuration files in containers or there are other external dependency changes that require rolling pods. Depending on the application a restart may be required should those be updated with a subsequent `helm upgrade`, but if the deployment spec itself didn't change the application keeps running with the old configuration resulting in an inconsistent deployment.\n\nThe `sha256sum` function can be used to ensure a deployment's annotation section is updated if another file changes:\n\n```yaml\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        checksum/config: {{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}\n[...] \n```\n\nNOTE: If you're adding this to a library chart you won't be able to access your file in `$.Template.BasePath`. Instead you can reference your definition with `{{ include (\"mylibchart.configmap\") . | sha256sum }}`.\n\nIn the event you always want to roll your deployment, you can use a similar annotation step as above, instead replacing with a random string so it always changes and causes the deployment to roll:\n\n```yaml\nkind: Deployment\nspec:\n  template:\n    metadata:\n      annotations:\n        rollme: {{ randAlphaNum 5 | quote }}\n[...] \n```\n\nEach invocation of the template function will generate a unique random string. This means that if it's necessary to sync the random strings used by multiple resources, all relevant resources will need to be in the same template file.\n\nBoth of these methods allow your Deployment to leverage the built in update strategy logic to avoid taking downtime.\n\nNOTE: In the past we recommended using the `--recreate-pods` flag as another option. This flag has been marked as deprecated in Helm 3 in favor of the more declarative method above.\n\n## Tell Helm Not To Uninstall a Resource\nSometimes there are resources that should not be uninstalled when Helm runs a `helm uninstall`. Chart developers can add an annotation to a resource to prevent it from being uninstalled.\n\n```yaml\nkind: Secret\nmetadata:\n  annotations:\n    helm.sh/resource-policy: keep\n[...] \n```\n\nThe annotation `helm.sh/resource-policy: keep` instructs Helm to skip deleting this resource when a helm operation (such as `helm uninstall`, `helm upgrade` or `helm rollback`) would result in its deletion. _However_, this resource becomes orphaned. Helm will no longer manage it in any way. This can lead to problems if using `helm install --replace` on a release that has already been uninstalled, but has kept resources.\n\n## Using \"Partials\" and Template Includes\nSometimes you want to create some reusable parts in your chart, whether they're blocks or template partials. And often, it's cleaner to keep these in their own files.\n\nIn the `templates/` directory, any file that begins with an underscore( `_`) is not expected to output a Kubernetes manifest file. So by convention, helper templates and partials are placed in a `_helpers.tpl` file.\n\n## Complex Charts with Many Dependencies\nMany of the charts in the CNCF [Artifact\\ Hub](https://artifacthub.io/packages/search?kind=0) are \"building blocks\" for creating more advanced applications. But charts may be used to create instances of large-scale applications. In such cases, a single umbrella chart may have multiple subcharts, each of which functions as a piece of the whole.\n\nThe current best practice for composing a complex application from discrete parts is to create a top-level umbrella chart that exposes the global configurations, and then use the `charts/` subdirectory to embed each of the components.\n\n## YAML is a Superset of JSON\nAccording to the YAML specification, YAML is a superset of JSON. That means that any valid JSON structure ought to be valid in YAML.\n\nThis has an advantage: Sometimes template developers may find it easier to express a datastructure with a JSON-like syntax rather than deal with YAML's whitespace sensitivity.\n\nAs a best practice, templates should follow a YAML-like syntax _unless_ the JSON syntax substantially reduces the risk of a formatting issue.\n\n## Be Careful with Generating Random Values\nThere are functions in Helm that allow you to generate random data, cryptographic keys, and so on. These are fine to use. But be aware that during upgrades, templates are re-executed. When a template run generates data that differs from the last run, that will trigger an update of that resource.\n\n## Install or Upgrade a Release with One Command\nHelm provides a way to perform an install-or-upgrade as a single command. Use `helm upgrade` with the `--install` command. This will cause Helm to see if the release is already installed. If not, it will run an install. If it is, then the existing release will be upgraded.\n\n```console\n$ helm upgrade --install <release name> --values <values file> <chart directory>\n```\n", "metadata": {"source_url": "https://helm.sh/docs/howto/charts_tips_and_tricks", "title": "Chart Development Tips and Tricks", "description": "This guide covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-27 21:08:10", "type": "overview", "page_metadata": {"title": "Helm | Chart Development Tips and Tricks\n", "twitter:card": "summary", "ogTitle": "Chart Development Tips and Tricks", "ogDescription": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "viewport": "width=device-width,initial-scale=1", "language": "en", "og:description": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "og:title": ["Chart Development Tips and Tricks", "Chart Development Tips and Tricks"], "twitter:title": "Helm | Chart Development Tips and Tricks", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/howto/charts_tips_and_tricks/", "ogUrl": "https://helm.sh/docs/howto/charts_tips_and_tricks/", "twitter:description": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "793125ac-6d5f-4255-9665-e512aabf59e8", "sourceURL": "https://helm.sh/docs/howto/charts_tips_and_tricks", "url": "https://helm.sh/docs/howto/charts_tips_and_tricks/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Chart Development Tips and Tricks\"?\n\nAssistant: Here are some code examples:\n\n### Template Snippet with include\n```yaml\nvalue: {{ include \"mytpl\" . | lower | quote }}\n\n```\n\n### Required Function Example\n```yaml\nvalue: {{ required \"A valid .Values.who entry required!\" .Values.who }}\n\n```\n\n### Quoting Strings Example\n```yaml\nname: {{ .Values.MyName | quote }}\n\n```\n\n### Using include Function Example\n```yaml\n{{ include \"toYaml\" $value | indent 2 }}\n\n```\n\n### Required Function Example\n```yaml\n{{ required \"A valid foo is required!\" .Values.foo }}\n\n```\n\n### Using tpl Function Example\n```yaml\n# values\ntemplate: \"{{ .Values.name }}\"\nname: \"Tom\"\n\n# template\n{{ tpl .Values.template . }}\n\n# output\nTom\n\n```\n\n### Rendering External Configuration File Example\n```yaml\n# external configuration file conf/app.conf\nfirstName={{ .Values.firstName }}\nlastName={{ .Values.lastName }}\n\n# values\nfirstName: Peter\nlastName: Parker\n\n# template\n{{ tpl (.Files.Get \"conf/app.conf\") . }}\n\n# output\nfirstName=Peter\nlastName=Parker\n\n```\n\n### Creating Image Pull Secrets Example\n```yaml\n{{- define \"imagePullSecret\" }}\n{{- with .Values.imageCredentials }}\n{{- printf \"{\\\"auths\\\":{\\\"%s\\\":{\\\"username\\\":\\\"%s\\\",\\\"password\\\":\\\"%s\\\",\\\"email\\\":\\\"%s\\\",\\\"auth\\\":\\\"%s\\\"}}}\" .registry .username .password .email (printf \"%s:%s\" .username .password | b64enc) | b64enc }}\n{{- end }}\n{{- end }}\n\n```\n\n### Automatically Roll Deployments Example\n```yaml\nchecksum/config: {{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}\n\n```\n\n### Prevent Uninstalling Resource Example\n```yaml\nkind: Secret\nmetadata:\n  annotations:\n    helm.sh/resource-policy: keep\n\n```\n\n### Install or Upgrade Command Example\n```yaml\n$ helm upgrade --install <release name> --values <values file> <chart directory>\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/howto/charts_tips_and_tricks", "title": "Chart Development Tips and Tricks", "description": "This guide covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-27 21:08:10", "type": "code_examples", "page_metadata": {"title": "Helm | Chart Development Tips and Tricks\n", "twitter:card": "summary", "ogTitle": "Chart Development Tips and Tricks", "ogDescription": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "viewport": "width=device-width,initial-scale=1", "language": "en", "og:description": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "og:title": ["Chart Development Tips and Tricks", "Chart Development Tips and Tricks"], "twitter:title": "Helm | Chart Development Tips and Tricks", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/howto/charts_tips_and_tricks/", "ogUrl": "https://helm.sh/docs/howto/charts_tips_and_tricks/", "twitter:description": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "793125ac-6d5f-4255-9665-e512aabf59e8", "sourceURL": "https://helm.sh/docs/howto/charts_tips_and_tricks", "url": "https://helm.sh/docs/howto/charts_tips_and_tricks/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Chart Development Tips and Tricks\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always quote strings when working with string data.\n• Do not quote integer values to avoid parsing errors in Kubernetes.\n• Use the `include` function to include templates and perform operations on their output.\n• Use the `required` function to enforce required values in templates.\n• Utilize the `tpl` function to evaluate strings as templates within templates.\n• Create reusable parts in your chart using partials and helper templates.\n• Follow YAML-like syntax in templates unless JSON syntax reduces formatting issues.\n• Be cautious with generating random values as they can trigger updates during upgrades.\n", "metadata": {"source_url": "https://helm.sh/docs/howto/charts_tips_and_tricks", "title": "Chart Development Tips and Tricks", "description": "This guide covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-27 21:08:10", "type": "best_practices", "page_metadata": {"title": "Helm | Chart Development Tips and Tricks\n", "twitter:card": "summary", "ogTitle": "Chart Development Tips and Tricks", "ogDescription": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "viewport": "width=device-width,initial-scale=1", "language": "en", "og:description": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "og:title": ["Chart Development Tips and Tricks", "Chart Development Tips and Tricks"], "twitter:title": "Helm | Chart Development Tips and Tricks", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/howto/charts_tips_and_tricks/", "ogUrl": "https://helm.sh/docs/howto/charts_tips_and_tricks/", "twitter:description": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Covers some of the tips and tricks Helm chart developers have learned while building production-quality charts.", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "793125ac-6d5f-4255-9665-e512aabf59e8", "sourceURL": "https://helm.sh/docs/howto/charts_tips_and_tricks", "url": "https://helm.sh/docs/howto/charts_tips_and_tricks/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Charts\"?\n\nAssistant: Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of Kubernetes resources. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.\n\nHere's a detailed explanation:\n\n\n## The Chart File Structure\nA chart is organized as a collection of files inside of a directory. The directory name is the name of the chart (without versioning information). Thus, a chart describing WordPress would be stored in a `wordpress/` directory.\n\nInside of this directory, Helm will expect a structure that matches this:\n\n```text\nwordpress/\n  Chart.yaml          # A YAML file containing information about the chart\n  LICENSE             # OPTIONAL: A plain text file containing the license for the chart\n  README.md           # OPTIONAL: A human-readable README file\n  values.yaml         # The default configuration values for this chart\n  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file\n  charts/             # A directory containing any charts upon which this chart depends.\n  crds/               # Custom Resource Definitions\n  templates/          # A directory of templates that, when combined with values,\n                      # will generate valid Kubernetes manifest files.\n  templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes\n```\n\nHelm reserves use of the `charts/`, `crds/`, and `templates/` directories, and of the listed file names. Other files will be left as they are.\n\n## The Chart.yaml File\nThe `Chart.yaml` file is required for a chart. It contains the following fields:\n\n```yaml\napiVersion: The chart API version (required)\nname: The name of the chart (required)\nversion: A SemVer 2 version (required)\nkubeVersion: A SemVer range of compatible Kubernetes versions (optional)\ndescription: A single-sentence description of this project (optional)\ntype: The type of the chart (optional)\nkeywords:\n  - A list of keywords about this project (optional)\nhome: The URL of this projects home page (optional)\nsources:\n  - A list of URLs to source code for this project (optional)\ndependencies: # A list of the chart requirements (optional)\n  - name: The name of the chart (nginx)\n    version: The version of the chart (\"1.2.3\")\n    repository: (optional) The repository URL (\"https://example.com/charts\") or alias (\"@repo-name\")\n    condition: (optional) A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )\n    tags: # (optional)\n      - Tags can be used to group charts for enabling/disabling together\n    import-values: # (optional)\n      - ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.\n    alias: (optional) Alias to be used for the chart. Useful when you have to add the same chart multiple times\nmaintainers: # (optional)\n  - name: The maintainers name (required for each maintainer)\n    email: The maintainers email (optional for each maintainer)\n    url: A URL for the maintainer (optional for each maintainer)\nicon: A URL to an SVG or PNG image to be used as an icon (optional).\nappVersion: The version of the app that this contains (optional). Needn't be SemVer. Quotes recommended.\ndeprecated: Whether this chart is deprecated (optional, boolean)\nannotations:\n  example: A list of annotations keyed by name (optional).\n```\n\nAs of [v3.3.2](https://github.com/helm/helm/releases/tag/v3.3.2), additional fields are not allowed.\nThe recommended approach is to add custom metadata in `annotations`.\n\n## Charts and Versioning\nEvery chart must have a version number. A version must follow the [SemVer\\ 2](https://semver.org/spec/v2.0.0.html) standard. Unlike Helm Classic, Helm v2 and later uses version numbers as release markers. Packages in repositories are identified by name plus version.\n\nFor example, an `nginx` chart whose version field is set to `version: 1.2.3` will be named:\n\n```text\nnginx-1.2.3.tgz\n```\n\nMore complex SemVer 2 names are also supported, such as `version: 1.2.3-alpha.1+ef365`. But non-SemVer names are explicitly disallowed by the system.\n\n**NOTE:** Whereas Helm Classic and Deployment Manager were both very GitHub oriented when it came to charts, Helm v2 and later does not rely upon or require GitHub or even Git. Consequently, it does not use Git SHAs for versioning at all.\n\nThe `version` field inside of the `Chart.yaml` is used by many of the Helm tools, including the CLI. When generating a package, the `helm package` command will use the version that it finds in the `Chart.yaml` as a token in the package name. The system assumes that the version number in the chart package name matches the version number in the `Chart.yaml`. Failure to meet this assumption will cause an error.\n\n## The `apiVersion` Field\nThe `apiVersion` field should be `v2` for Helm charts that require at least Helm 3. Charts supporting previous Helm versions have an `apiVersion` set to `v1` and are still installable by Helm 3.\n\nChanges from `v1` to `v2`:\n\n- A `dependencies` field defining chart dependencies, which were located in a separate `requirements.yaml` file for `v1` charts (see [Chart\\ Dependencies](https://helm.sh/docs/topics/charts/#chart-dependencies)).\n- The `type` field, discriminating application and library charts (see [Chart\\ Types](https://helm.sh/docs/topics/charts/#chart-types)).\n\n## The `appVersion` Field\nNote that the `appVersion` field is not related to the `version` field. It is a way of specifying the version of the application. For example, the `drupal` chart may have an `appVersion: \"8.2.1\"`, indicating that the version of Drupal included in the chart (by default) is `8.2.1`. This field is informational, and has no impact on chart version calculations. Wrapping the version in quotes is highly recommended. It forces the YAML parser to treat the version number as a string. Leaving it unquoted can lead to parsing issues in some cases. For example, YAML interprets `1.0` as a floating point value, and a git commit SHA like `1234e10` as scientific notation.\n\nAs of Helm v3.5.0, `helm create` wraps the default `appVersion` field in quotes.\n\n## The `kubeVersion` Field\nThe optional `kubeVersion` field can define semver constraints on supported Kubernetes versions. Helm will validate the version constraints when installing the chart and fail if the cluster runs an unsupported Kubernetes version.\n\nVersion constraints may comprise space separated AND comparisons such as\n\n```fallback\n>= 1.13.0 < 1.15.0\n```\n\nwhich themselves can be combined with the OR `||` operator like in the following example\n\n```fallback\n>= 1.13.0 < 1.14.0 || >= 1.14.1 < 1.15.0\n```\n\nIn this example the version `1.14.0` is excluded, which can make sense if a bug in certain versions is known to prevent the chart from running properly.\n\nApart from version constrains employing operators `=` `!=` `>` `<` `>=` `<=` the following shorthand notations are supported\n\n- hyphen ranges for closed intervals, where `1.1 - 2.3.4` is equivalent to `>= 1.1 <= 2.3.4`.\n- wildcards `x`, `X` and `*`, where `1.2.x` is equivalent to `>= 1.2.0 < 1.3.0`.\n- tilde ranges (patch version changes allowed), where `~1.2.3` is equivalent to `>= 1.2.3 < 1.3.0`.\n- caret ranges (minor version changes allowed), where `^1.2.3` is equivalent to `>= 1.2.3 < 2.0.0`.\n\nFor a detailed explanation of supported semver constraints see [Masterminds/semver](https://github.com/Masterminds/semver).\n\n## Deprecating Charts\nWhen managing charts in a Chart Repository, it is sometimes necessary to deprecate a chart. The optional `deprecated` field in `Chart.yaml` can be used to mark a chart as deprecated. If the **latest** version of a chart in the repository is marked as deprecated, then the chart as a whole is considered to be deprecated. The chart name can be later reused by publishing a newer version that is not marked as deprecated. The workflow for deprecating charts is:\n\n1. Update chart's `Chart.yaml` to mark the chart as deprecated, bumping the version\n2. Release the new chart version in the Chart Repository\n3. Remove the chart from the source repository (e.g. git)\n", "metadata": {"source_url": "https://helm.sh/docs/topics/charts", "title": "Charts", "description": "Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of Kubernetes resources. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:09:57", "type": "overview", "page_metadata": {"og:description": "Explains the chart format, and provides basic guidance for building charts with Helm.", "twitter:card": "summary", "description": "Explains the chart format, and provides basic guidance for building charts with Helm.", "language": "en", "ogTitle": "Charts", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Explains the chart format, and provides basic guidance for building charts with Helm.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Charts", "og:title": ["Charts", "Charts"], "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/topics/charts/", "ogUrl": "https://helm.sh/docs/topics/charts/", "title": "Helm | Charts\n", "ogDescription": "Explains the chart format, and provides basic guidance for building charts with Helm.", "scrapeId": "97fe0356-2ed1-431a-bc62-151e377ad157", "sourceURL": "https://helm.sh/docs/topics/charts", "url": "https://helm.sh/docs/topics/charts/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Charts\"?\n\nAssistant: Here are some code examples:\n\n### Chart File Structure Example\n```yaml\n```text\nwordpress/\n  Chart.yaml          # A YAML file containing information about the chart\n  LICENSE             # OPTIONAL: A plain text file containing the license for the chart\n  README.md           # OPTIONAL: A human-readable README file\n  values.yaml         # The default configuration values for this chart\n  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file\n  charts/             # A directory containing any charts upon which this chart depends.\n  crds/               # Custom Resource Definitions\n  templates/          # A directory of templates that, when combined with values,\n                      # will generate valid Kubernetes manifest files.\n  templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes\n```\n```\n\n### Chart.yaml Fields Example\n```yaml\n```yaml\napiVersion: The chart API version (required)\nname: The name of the chart (required)\nversion: A SemVer 2 version (required)\nkubeVersion: A SemVer range of compatible Kubernetes versions (optional)\ndescription: A single-sentence description of this project (optional)\ntype: The type of the chart (optional)\nkeywords:\n  - A list of keywords about this project (optional)\nhome: The URL of this projects home page (optional)\nsources:\n  - A list of URLs to source code for this project (optional)\ndependencies: # A list of the chart requirements (optional)\n  - name: The name of the chart (nginx)\n    version: The version of the chart (\"1.2.3\")\n    repository: (optional) The repository URL (\"https://example.com/charts\") or alias (\"@repo-name\")\n    condition: (optional) A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )\n    tags: # (optional)\n      - Tags can be used to group charts for enabling/disabling together\n    import-values: # (optional)\n      - ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.\n    alias: (optional) Alias to be used for the chart. Useful when you have to add the same chart multiple times\nmaintainers: # (optional)\n  - name: The maintainers name (required for each maintainer)\n    email: The maintainers email (optional for each maintainer)\n    url: A URL for the maintainer (optional for each maintainer)\nicon: A URL to an SVG or PNG image to be used as an icon (optional).\nappVersion: The version of the app that this contains (optional). Needn't be SemVer. Quotes recommended.\ndeprecated: Whether this chart is deprecated (optional, boolean)\nannotations:\n  example: A list of annotations keyed by name (optional).\n```\n```\n\n### Versioning Example\n```yaml\n```text\nnginx-1.2.3.tgz\n```\n```\n\n### KubeVersion Constraints Example\n```yaml\n```fallback\n>= 1.13.0 < 1.15.0\n```\n```\n\n### Dependencies Field Example\n```yaml\n```yaml\ndependencies:\n  - name: apache\n    version: 1.2.3\n    repository: https://example.com/charts\n  - name: mysql\n    version: 3.2.1\n    repository: https://another.example.com/charts\n```\n```\n\n### Helm Repo Add Example\n```yaml\n```console\n$ helm repo add fantastic-charts https://charts.helm.sh/incubator\n```\n```\n\n### Helm Dependency Update Example\n```yaml\n```console\n$ helm dep up foochart\nHang tight while we grab the latest from your chart repositories...\n...Successfully got an update from the \"local\" chart repository\n...Successfully got an update from the \"stable\" chart repository\n...Successfully got an update from the \"example\" chart repository\n...Successfully got an update from the \"another\" chart repository\nUpdate Complete. Happy Helming!\nSaving 2 charts\nDownloading apache from repo https://example.com/charts\nDownloading mysql from repo https://another.example.com/charts\n```\n```\n\n### Template Example\n```yaml\n```yaml\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: deis-database\n  namespace: deis\n  labels:\n    app.kubernetes.io/managed-by: deis\nspec:\n  replicas: 1\n  selector:\n    app.kubernetes.io/name: deis-database\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: deis-database\n    spec:\n      serviceAccount: deis-database\n      containers:\n        - name: deis-database\n          image: {{ .Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}\n          imagePullPolicy: {{ .Values.pullPolicy }}\n          ports:\n            - containerPort: 5432\n          env:\n            - name: DATABASE_STORAGE\n              value: {{ default \"minio\" .Values.storage }}\n```\n```\n\n### Values.yaml Example\n```yaml\n```yaml\nimageRegistry: \"quay.io/deis\"\ndockerTag: \"latest\"\npullPolicy: \"Always\"\nstorage: \"s3\"\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/charts", "title": "Charts", "description": "Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of Kubernetes resources. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:09:57", "type": "code_examples", "page_metadata": {"og:description": "Explains the chart format, and provides basic guidance for building charts with Helm.", "twitter:card": "summary", "description": "Explains the chart format, and provides basic guidance for building charts with Helm.", "language": "en", "ogTitle": "Charts", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Explains the chart format, and provides basic guidance for building charts with Helm.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Charts", "og:title": ["Charts", "Charts"], "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/topics/charts/", "ogUrl": "https://helm.sh/docs/topics/charts/", "title": "Helm | Charts\n", "ogDescription": "Explains the chart format, and provides basic guidance for building charts with Helm.", "scrapeId": "97fe0356-2ed1-431a-bc62-151e377ad157", "sourceURL": "https://helm.sh/docs/topics/charts", "url": "https://helm.sh/docs/topics/charts/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Charts\"?\n\nAssistant: Here are the recommended best practices:\n\n• To drop a dependency into your `charts/` directory, use the `helm pull` command.\n• Conditions (when set in values) always override tags. The first condition path that exists wins and subsequent ones for that chart are ignored.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/charts", "title": "Charts", "description": "Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of Kubernetes resources. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:09:57", "type": "best_practices", "page_metadata": {"og:description": "Explains the chart format, and provides basic guidance for building charts with Helm.", "twitter:card": "summary", "description": "Explains the chart format, and provides basic guidance for building charts with Helm.", "language": "en", "ogTitle": "Charts", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Explains the chart format, and provides basic guidance for building charts with Helm.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Charts", "og:title": ["Charts", "Charts"], "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/topics/charts/", "ogUrl": "https://helm.sh/docs/topics/charts/", "title": "Helm | Charts\n", "ogDescription": "Explains the chart format, and provides basic guidance for building charts with Helm.", "scrapeId": "97fe0356-2ed1-431a-bc62-151e377ad157", "sourceURL": "https://helm.sh/docs/topics/charts", "url": "https://helm.sh/docs/topics/charts/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Developer Guide\"?\n\nAssistant: This guide explains how to set up your environment for developing on Helm.\n\nHere's a detailed explanation:\n\n\n## Prerequisites\n- The latest version of Go\n- A Kubernetes cluster w/ kubectl (optional)\n- Git\n\n## Building Helm\nWe use Make to build our programs. The simplest way to get started is:\n\n```console\n$ make\n```\n\nIf required, this will first install dependencies and validate configuration. It will then compile `helm` and place it in `bin/helm`.\n\nTo run Helm locally, you can run `bin/helm`.\n\n- Helm is known to run on macOS and most Linux distributions, including Alpine.\n\n## Running tests\nTo run all the tests, run `make test`.\nAs a pre-requisite, you would need to have [golangci-lint](https://golangci-lint.run/) installed.\n\n## Running Locally\nYou can update your path and add the path of your local helm binary. In an editor open your shell config file. Add the following line making sure you replace `<path to your binary folder>` with your local bin directory.\n\n```bash\nexport PATH=\"<path to your binary folder>:$PATH\"\n```\n\nThis will allow you to run the locally built version of helm from your terminal.\n\n## Contribution Guidelines\nWe welcome contributions. This project has set up some guidelines in order to ensure that (a) code quality remains high, (b) the project remains consistent, and (c) contributions follow the open source legal requirements. Our intent is not to burden contributors, but to build elegant and high-quality open source code so that our users will benefit.\n\nMake sure you have read and understood the main CONTRIBUTING guide:\n\n[https://github.com/helm/helm/blob/main/CONTRIBUTING.md](https://github.com/helm/helm/blob/main/CONTRIBUTING.md)\n", "metadata": {"source_url": "https://helm.sh/docs/community/developers", "title": "Developer Guide", "description": "This guide explains how to set up your environment for developing on Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:10:06", "type": "overview", "page_metadata": {"title": "Helm | Developer Guide\n", "description": "Instructions for setting up your environment for developing Helm.", "og:url": "https://helm.sh/docs/community/developers/", "twitter:description": "Instructions for setting up your environment for developing Helm.", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Developer Guide", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/community/developers/", "ogDescription": "Instructions for setting up your environment for developing Helm.", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Developer Guide", "og:title": ["Developer Guide", "Developer Guide"], "language": "en", "og:description": "Instructions for setting up your environment for developing Helm.", "twitter:card": "summary", "scrapeId": "640f1a84-79ce-4c42-8063-e42adf8611cb", "sourceURL": "https://helm.sh/docs/community/developers", "url": "https://helm.sh/docs/community/developers/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Developer Guide\"?\n\nAssistant: Here are some code examples:\n\n### Building Helm\n```yaml\n$ make\n```\n\n### Running Locally\n```yaml\nexport PATH=\"<path to your binary folder>:$PATH\"\n```\n\n### Running tests\n```yaml\nmake test\n```\n\n### Git Commit Message Example\n```yaml\nfix(helm): add --foo flag to 'helm install'\n\nWhen 'helm install --foo bar' is run, this will print \"foo\" in the output regardless of the outcome of the installation.\n\nCloses #1234\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/community/developers", "title": "Developer Guide", "description": "This guide explains how to set up your environment for developing on Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:10:06", "type": "code_examples", "page_metadata": {"title": "Helm | Developer Guide\n", "description": "Instructions for setting up your environment for developing Helm.", "og:url": "https://helm.sh/docs/community/developers/", "twitter:description": "Instructions for setting up your environment for developing Helm.", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Developer Guide", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/community/developers/", "ogDescription": "Instructions for setting up your environment for developing Helm.", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Developer Guide", "og:title": ["Developer Guide", "Developer Guide"], "language": "en", "og:description": "Instructions for setting up your environment for developing Helm.", "twitter:card": "summary", "scrapeId": "640f1a84-79ce-4c42-8063-e42adf8611cb", "sourceURL": "https://helm.sh/docs/community/developers", "url": "https://helm.sh/docs/community/developers/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Developer Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Helm is known to run on macOS and most Linux distributions, including Alpine.\n• We encourage developers to _not_ try to manually manage dependencies. Instead, we suggest relying upon the project's `Makefile` to do that for you.\n• When writing new features, please write accompanying documentation and submit it to the helm-www repository.\n• For Git commit messages, we follow the Semantic Commit Messages guidelines.\n", "metadata": {"source_url": "https://helm.sh/docs/community/developers", "title": "Developer Guide", "description": "This guide explains how to set up your environment for developing on Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:10:06", "type": "best_practices", "page_metadata": {"title": "Helm | Developer Guide\n", "description": "Instructions for setting up your environment for developing Helm.", "og:url": "https://helm.sh/docs/community/developers/", "twitter:description": "Instructions for setting up your environment for developing Helm.", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Developer Guide", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/community/developers/", "ogDescription": "Instructions for setting up your environment for developing Helm.", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Developer Guide", "og:title": ["Developer Guide", "Developer Guide"], "language": "en", "og:description": "Instructions for setting up your environment for developing Helm.", "twitter:card": "summary", "scrapeId": "640f1a84-79ce-4c42-8063-e42adf8611cb", "sourceURL": "https://helm.sh/docs/community/developers", "url": "https://helm.sh/docs/community/developers/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"General Conventions\"?\n\nAssistant: This part of the Best Practices Guide explains general conventions.\n\nHere's a detailed explanation:\n\n\n## Chart Names\nChart names must be lower case letters and numbers. Words _may_ be separated with dashes (-):\n\nExamples:\n\ndrupal\nnginx-lego\naws-cluster-autoscaler\n\nNeither uppercase letters nor underscores can be used in chart names. Dots should not be used in chart names.\n\n## Version Numbers\nWherever possible, Helm uses [SemVer 2](https://semver.org/) to represent version numbers. (Note that Docker image tags do not necessarily follow SemVer, and are thus considered an unfortunate exception to the rule.)\n\nWhen SemVer versions are stored in Kubernetes labels, we conventionally alter the `+` character to an `_` character, as labels do not allow the `+` sign as a value.\n\n## Formatting YAML\nYAML files should be indented using _two spaces_ (and never tabs).\n\n## Usage of the Words Helm and Chart\nThere are a few conventions for using the words _Helm_ and _helm_.\n\n- _Helm_ refers to the project as a whole\n- `helm` refers to the client-side command\n- The term `chart` does not need to be capitalized, as it is not a proper noun\n- However, `Chart.yaml` does need to be capitalized because the file name is case sensitive\n\nWhen in doubt, use _Helm_ (with an uppercase 'H').\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/conventions", "title": "General Conventions", "description": "This part of the Best Practices Guide explains general conventions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:10:13", "type": "overview", "page_metadata": {"twitter:title": "Helm | General Conventions", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "General conventions for charts.", "ogUrl": "https://helm.sh/docs/chart_best_practices/conventions/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "General Conventions", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "General conventions for charts.", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:url": "https://helm.sh/docs/chart_best_practices/conventions/", "og:description": "General conventions for charts.", "title": "Helm | General Conventions\n", "description": "General conventions for charts.", "og:title": ["General Conventions", "General Conventions"], "scrapeId": "0b2c2a8b-6e3d-485f-b526-fe5a93edd4de", "sourceURL": "https://helm.sh/docs/chart_best_practices/conventions", "url": "https://helm.sh/docs/chart_best_practices/conventions/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"General Conventions\"?\n\nAssistant: Here are some code examples:\n\n### Chart Name Examples\n```yaml\ndrupal\nnginx-lego\naws-cluster-autoscaler\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/conventions", "title": "General Conventions", "description": "This part of the Best Practices Guide explains general conventions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:10:13", "type": "code_examples", "page_metadata": {"twitter:title": "Helm | General Conventions", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "General conventions for charts.", "ogUrl": "https://helm.sh/docs/chart_best_practices/conventions/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "General Conventions", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "General conventions for charts.", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:url": "https://helm.sh/docs/chart_best_practices/conventions/", "og:description": "General conventions for charts.", "title": "Helm | General Conventions\n", "description": "General conventions for charts.", "og:title": ["General Conventions", "General Conventions"], "scrapeId": "0b2c2a8b-6e3d-485f-b526-fe5a93edd4de", "sourceURL": "https://helm.sh/docs/chart_best_practices/conventions", "url": "https://helm.sh/docs/chart_best_practices/conventions/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"General Conventions\"?\n\nAssistant: Here are the recommended best practices:\n\n• Chart names must be lower case letters and numbers, separated by dashes if needed.\n• Use SemVer 2 for version numbers where possible, altering `+` to `_` for Kubernetes labels.\n• YAML files should be indented using two spaces, never tabs.\n• Use _Helm_ for the project name and `helm` for the command line tool.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/conventions", "title": "General Conventions", "description": "This part of the Best Practices Guide explains general conventions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:10:13", "type": "best_practices", "page_metadata": {"twitter:title": "Helm | General Conventions", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "General conventions for charts.", "ogUrl": "https://helm.sh/docs/chart_best_practices/conventions/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "General Conventions", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "General conventions for charts.", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:url": "https://helm.sh/docs/chart_best_practices/conventions/", "og:description": "General conventions for charts.", "title": "Helm | General Conventions\n", "description": "General conventions for charts.", "og:title": ["General Conventions", "General Conventions"], "scrapeId": "0b2c2a8b-6e3d-485f-b526-fe5a93edd4de", "sourceURL": "https://helm.sh/docs/chart_best_practices/conventions", "url": "https://helm.sh/docs/chart_best_practices/conventions/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Introduction to Helm\"?\n\nAssistant: Are you new to Helm? This is the place to start!\n\nHere's a detailed explanation:\n\n\n## Quicklinks\n[**Quickstart Guide** \\ How to install and get started with Helm including instructions for distros, FAQs, and plugins.](https://helm.sh/docs/intro/quickstart/) [**Installing Helm** \\ Learn how to install and get running with Helm.](https://helm.sh/docs/intro/install/) [**Using Helm** \\ Explains the basics of Helm.](https://helm.sh/docs/intro/using_helm/) [**Cheat Sheet** \\ Helm cheatsheet](https://helm.sh/docs/intro/cheatsheet/) \n\n[Helm Project](https://github.com/helm/helm)[Blog](https://helm.sh/blog)[Events](https://www.cncf.io/community/kubecon-cloudnativecon-events/)[Quick Start Guide](https://helm.sh/docs/intro/quickstart/)[Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md)[Charts](https://artifacthub.io/)[Introduction](https://helm.sh/docs/topics/charts/)[Chart tips & tricks](https://helm.sh/docs/howto/charts_tips_and_tricks/)[Developing Charts](https://helm.sh/docs/chart_template_guide/)[Search 800+ Charts](https://artifacthub.io/)[Development](https://github.com/helm/community/blob/main/communication.md)[#helm-dev](https://kubernetes.slack.com/messages/C51E88VDG) _(slack)_[Contribution Guide](https://github.com/helm/helm/blob/main/CONTRIBUTING.md)[Maintainers](https://github.com/helm/helm/blob/main/OWNERS)[Weekly Meetings](https://github.com/helm/community/blob/main/communication.md#meetings)[Community](https://github.com/helm/community)[#helm-users](https://kubernetes.slack.com/messages/C0NH30761 \"#helm-users on Slack\") _(slack)_[Mailing List](https://lists.cncf.io/g/cncf-helm/topics)[Logos](https://github.com/cncf/artwork/tree/master/projects/helm) & [Art](https://github.com/helm/community/tree/main/art)[Twitter](https://twitter.com/helmpack) \n\n[We are a Cloud Native Computing Foundation graduated project.](https://www.cncf.io/ \"Cloud Native Computing Foundation\")\n\n[![We are a Cloud Native Computing Foundation project](https://helm.sh/img/cncf-white.svg)](https://www.cncf.io/ \"Cloud Native Computing Foundation\")\n", "metadata": {"source_url": "https://helm.sh/docs/intro", "title": "Introduction to Helm", "description": "Are you new to Helm? This is the place to start!", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:10:21", "type": "overview", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://helm.sh/docs/intro/", "og:title": ["Introduction", "Introduction"], "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Introduction", "og:url": "https://helm.sh/docs/intro/", "title": "Helm | Docs\n", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Introduction", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "scrapeId": "53449015-1530-44f7-9c5c-eb533831a5bc", "sourceURL": "https://helm.sh/docs/intro", "url": "https://helm.sh/docs/intro/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Introduction to Helm\"?\n\nAssistant: Here are the recommended best practices:\n\n• Documentation distributed under CC-BY-4.0\n• The Linux Foundation has registered trademarks and uses trademarks. For a list of trademarks of The Linux Foundation, please see the Trademark Usage page.\n", "metadata": {"source_url": "https://helm.sh/docs/intro", "title": "Introduction to Helm", "description": "Are you new to Helm? This is the place to start!", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:10:21", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://helm.sh/docs/intro/", "og:title": ["Introduction", "Introduction"], "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Introduction", "og:url": "https://helm.sh/docs/intro/", "title": "Helm | Docs\n", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Introduction", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "scrapeId": "53449015-1530-44f7-9c5c-eb533831a5bc", "sourceURL": "https://helm.sh/docs/intro", "url": "https://helm.sh/docs/intro/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Go SDK Documentation\"?\n\nAssistant: Helm's Go SDK enables custom software to leverage Helm charts and Helm's functionality for managing Kubernetes software deployment.\n\nHere's a detailed explanation:\n\n\n## Introduction\nHelm's Go SDK enables custom software to leverage Helm charts and Helm's functionality for managing Kubernetes software deployment (In fact, the Helm CLI is effectively just one such tool!)\n\nCurrently, the SDK has been functionally separated from the Helm CLI. And the SDK can (and is) used by standalone tooling. The Helm project has committed to API stability for the SDK. As a warning, the SDK has some rough edges remaining from the initial work to separate the CLI and the SDK. Which the Helm project aims to improve and over time.\n\nFull API documentation can be found at [https://pkg.go.dev/helm.sh/helm/v3](https://pkg.go.dev/helm.sh/helm/v3).\n\nA brief overview of some of the main types of packages and a simple example follows below. See the [Examples](https://helm.sh/docs/sdk/examples/) section for more examples and a more full featured 'driver'.\n\n## Main package overview\n- [pkg/action](https://pkg.go.dev/helm.sh/helm/v3/pkg/action): Contains the main “client” for performing Helm actions. This is the same package that the CLI is using underneath the hood. If you just need to perform basic Helm commands from another Go program, this package is for you\n- [pkg/chart](https://pkg.go.dev/helm.sh/helm/v3/pkg/chart), [pkg/chartutil](https://pkg.go.dev/helm.sh/helm/v3/pkg/chartutil): Methods and helpers used for loading and manipulating charts\n- [pkg/cli](https://pkg.go.dev/helm.sh/helm/v3/pkg/cli) and its subpackages: Contains all the handlers for the standard Helm environment variables and its subpackages contain output and values file handling\n- [pkg/release](https://pkg.go.dev/helm.sh/helm/v3/pkg/release): Defines the `Release` object and statuses\n\nThere are many more packages besides these, so go check out the documentation for more information!\n\n## Simple example\nThis is a simple example of doing a `helm list` using the Go SDK. See the [Examples](https://helm.sh/docs/sdk/examples/) section for more full featured examples.\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n\n    \"helm.sh/helm/v3/pkg/action\"\n    \"helm.sh/helm/v3/pkg/cli\"\n)\n\nfunc main() {\n    settings := cli.New()\n\n    actionConfig := new(action.Configuration)\n    // You can pass an empty string instead of settings.Namespace() to list\n    // all namespaces\n    if err := actionConfig.Init(settings.RESTClientGetter(), settings.Namespace(), os.Getenv(\"HELM_DRIVER\"), log.Printf); err != nil {\n        log.Printf(\"%+v\", err)\n        os.Exit(1)\n    }\n\n    client := action.NewList(actionConfig)\n    // Only list deployed\n    client.Deployed = true\n    results, err := client.Run()\n    if err != nil {\n        log.Printf(\"%+v\", err)\n        os.Exit(1)\n    }\n\n    for _, rel := range results {\n        log.Printf(\"%+v\", rel)\n    }\n}\n```\n\n## Compatibility\nThe Helm SDK explicitly follows the Helm backwards compatibility guarantees:\n\n[https://github.com/helm/community/blob/main/hips/hip-0004.md](https://github.com/helm/community/blob/main/hips/hip-0004.md)\n\nThat is, break changes will only be made over major versions.\n", "metadata": {"source_url": "https://helm.sh/docs/sdk/gosdk", "title": "Helm Go SDK Documentation", "description": "Helm's Go SDK enables custom software to leverage Helm charts and Helm's functionality for managing Kubernetes software deployment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:10:34", "type": "overview", "page_metadata": {"og:url": "https://helm.sh/docs/sdk/gosdk/", "language": "en", "description": "Introduces the Helm Go SDK", "og:title": ["Introduction", "Introduction"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Introduces the Helm Go SDK", "ogUrl": "https://helm.sh/docs/sdk/gosdk/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Introduction", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Introduction\n", "og:description": "Introduces the Helm Go SDK", "ogTitle": "Introduction", "twitter:description": "Introduces the Helm Go SDK", "scrapeId": "01e1654a-6dd7-4fa6-b391-6f5345188fbf", "sourceURL": "https://helm.sh/docs/sdk/gosdk", "url": "https://helm.sh/docs/sdk/gosdk/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Go SDK Documentation\"?\n\nAssistant: Here are some code examples:\n\n### Simple helm list example\n```yaml\n```go\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n\n    \"helm.sh/helm/v3/pkg/action\"\n    \"helm.sh/helm/v3/pkg/cli\"\n)\n\nfunc main() {\n    settings := cli.New()\n\n    actionConfig := new(action.Configuration)\n    // You can pass an empty string instead of settings.Namespace() to list\n    // all namespaces\n    if err := actionConfig.Init(settings.RESTClientGetter(), settings.Namespace(), os.Getenv(\"HELM_DRIVER\"), log.Printf); err != nil {\n        log.Printf(\"%+v\", err)\n        os.Exit(1)\n    }\n\n    client := action.NewList(actionConfig)\n    // Only list deployed\n    client.Deployed = true\n    results, err := client.Run()\n    if err != nil {\n        log.Printf(\"%+v\", err)\n        os.Exit(1)\n    }\n\n    for _, rel := range results {\n        log.Printf(\"%+v\", rel)\n    }\n}\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/sdk/gosdk", "title": "Helm Go SDK Documentation", "description": "Helm's Go SDK enables custom software to leverage Helm charts and Helm's functionality for managing Kubernetes software deployment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:10:34", "type": "code_examples", "page_metadata": {"og:url": "https://helm.sh/docs/sdk/gosdk/", "language": "en", "description": "Introduces the Helm Go SDK", "og:title": ["Introduction", "Introduction"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Introduces the Helm Go SDK", "ogUrl": "https://helm.sh/docs/sdk/gosdk/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Introduction", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Introduction\n", "og:description": "Introduces the Helm Go SDK", "ogTitle": "Introduction", "twitter:description": "Introduces the Helm Go SDK", "scrapeId": "01e1654a-6dd7-4fa6-b391-6f5345188fbf", "sourceURL": "https://helm.sh/docs/sdk/gosdk", "url": "https://helm.sh/docs/sdk/gosdk/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Go SDK Documentation\"?\n\nAssistant: Here are the recommended best practices:\n\n• Check the full API documentation for detailed information on using the SDK.\n• Refer to the Examples section for more comprehensive examples and drivers.\n• Be aware of the SDK's rough edges and the Helm project's commitment to improving them over time.\n", "metadata": {"source_url": "https://helm.sh/docs/sdk/gosdk", "title": "Helm Go SDK Documentation", "description": "Helm's Go SDK enables custom software to leverage Helm charts and Helm's functionality for managing Kubernetes software deployment.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:10:34", "type": "best_practices", "page_metadata": {"og:url": "https://helm.sh/docs/sdk/gosdk/", "language": "en", "description": "Introduces the Helm Go SDK", "og:title": ["Introduction", "Introduction"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Introduces the Helm Go SDK", "ogUrl": "https://helm.sh/docs/sdk/gosdk/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Introduction", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Introduction\n", "og:description": "Introduces the Helm Go SDK", "ogTitle": "Introduction", "twitter:description": "Introduces the Helm Go SDK", "scrapeId": "01e1654a-6dd7-4fa6-b391-6f5345188fbf", "sourceURL": "https://helm.sh/docs/sdk/gosdk", "url": "https://helm.sh/docs/sdk/gosdk/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Quickstart Guide\"?\n\nAssistant: This guide covers how you can quickly get started using Helm.\n\nHere's a detailed explanation:\n\n\n## Prerequisites\nThe following prerequisites are required for a successful and properly secured use of Helm.\n\n1. A Kubernetes cluster\n2. Deciding what security configurations to apply to your installation, if any\n3. Installing and configuring Helm.\n\n### Install Kubernetes or have access to a cluster\n\n- You must have Kubernetes installed. For the latest release of Helm, we recommend the latest stable release of Kubernetes, which in most cases is the second-latest minor release.\n- You should also have a local configured copy of `kubectl`.\n\nSee the [Helm Version Support Policy](https://helm.sh/docs/topics/version_skew/) for the maximum version skew supported between Helm and Kubernetes.\n\n## Install Helm\nDownload a binary release of the Helm client. You can use tools like `homebrew`, or look at [the official releases page](https://github.com/helm/helm/releases).\n\nFor more details, or for other options, see [the installation guide](https://helm.sh/docs/intro/install/).\n\n## Initialize a Helm Chart Repository\nOnce you have Helm ready, you can add a chart repository. Check [Artifact Hub](https://artifacthub.io/packages/search?kind=0) for available Helm chart repositories.\n\n```console\n$ helm repo add bitnami https://charts.bitnami.com/bitnami\n```\n\nOnce this is installed, you will be able to list the charts you can install:\n\n```console\n$ helm search repo bitnami\nNAME                              CHART VERSION APP VERSION   DESCRIPTION\nbitnami/bitnami-common            0.0.9         0.0.9         DEPRECATED Chart with custom templates used in ...\nbitnami/airflow                   8.0.2         2.0.0         Apache Airflow is a platform to programmaticall...\nbitnami/apache                    8.2.3         2.4.46        Chart for Apache HTTP Server\nbitnami/aspnet-core               1.2.3         3.1.9         ASP.NET Core is an open-source framework create...\n# ... and many more\n```\n\n## Install an Example Chart\nTo install a chart, you can run the `helm install` command. Helm has several ways to find and install a chart, but the easiest is to use the `bitnami` charts.\n\n```console\n$ helm repo update              # Make sure we get the latest list of charts\n$ helm install bitnami/mysql --generate-name\nNAME: mysql-1612624192\nLAST DEPLOYED: Sat Feb  6 16:09:56 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES: ...\n```\n\nIn the example above, the `bitnami/mysql` chart was released, and the name of our new release is `mysql-1612624192`.\n\nYou get a simple idea of the features of this MySQL chart by running `helm show chart bitnami/mysql`. Or you could run `helm show all bitnami/mysql` to get all information about the chart.\n\nWhenever you install a chart, a new release is created. So one chart can be installed multiple times into the same cluster. And each can be independently managed and upgraded.\n\nThe `helm install` command is a very powerful command with many capabilities. To learn more about it, check out the [Using Helm Guide](https://helm.sh/docs/intro/using_helm/).\n\n## Learn About Releases\nIt's easy to see what has been released using Helm:\n\n```console\n$ helm list\nNAME             NAMESPACE REVISION UPDATED                              STATUS   CHART       APP VERSION\nmysql-1612624192 default   1        2021-02-06 16:09:56.283059 +0100 CET deployed mysql-8.3.0 8.0.23\n``` \n\nThe `helm list` (or `helm ls`) function will show you a list of all deployed releases.\n\n## Uninstall a Release\nTo uninstall a release, use the `helm uninstall` command:\n\n```console\n$ helm uninstall mysql-1612624192\nrelease \"mysql-1612624192\" uninstalled\n```\n\nThis will uninstall `mysql-1612624192` from Kubernetes, which will remove all resources associated with the release as well as the release history.\n\nIf the flag `--keep-history` is provided, release history will be kept. You will be able to request information about that release:\n\n```console\n$ helm status mysql-1612624192\nStatus: UNINSTALLED\n...\n```\n\nBecause Helm tracks your releases even after you've uninstalled them, you can audit a cluster's history, and even undelete a release (with `helm rollback`).\n\n## Reading the Help Text\nTo learn more about the available Helm commands, use `helm help` or type a command followed by the `-h` flag:\n\n```console\n$ helm get -h\n```\n", "metadata": {"source_url": "https://helm.sh/docs/intro/quickstart", "title": "Quickstart Guide", "description": "This guide covers how you can quickly get started using Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:10:52", "type": "overview", "page_metadata": {"og:url": "https://helm.sh/docs/intro/quickstart/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Quickstart Guide\n", "language": "en", "ogTitle": "Quickstart Guide", "description": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "twitter:title": "Helm | Quickstart Guide", "twitter:description": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "ogDescription": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "viewport": "width=device-width,initial-scale=1", "og:title": ["Quickstart Guide", "Quickstart Guide"], "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/intro/quickstart/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "og:description": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "scrapeId": "904d513a-c064-499f-9970-9b7885105652", "sourceURL": "https://helm.sh/docs/intro/quickstart", "url": "https://helm.sh/docs/intro/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Quickstart Guide\"?\n\nAssistant: Here are some code examples:\n\n### Add Bitnami Repository\n```yaml\n$ helm repo add bitnami https://charts.bitnami.com/bitnami\n```\n\n### Search Bitnami Charts\n```yaml\n$ helm search repo bitnami\nNAME                              CHART VERSION APP VERSION   DESCRIPTION\nbitnami/bitnami-common            0.0.9         0.0.9         DEPRECATED Chart with custom templates used in ...\nbitnami/airflow                   8.0.2         2.0.0         Apache Airflow is a platform to programmaticall...\nbitnami/apache                    8.2.3         2.4.46        Chart for Apache HTTP Server\nbitnami/aspnet-core               1.2.3         3.1.9         ASP.NET Core is an open-source framework create...\n# ... and many more\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/intro/quickstart", "title": "Quickstart Guide", "description": "This guide covers how you can quickly get started using Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:10:52", "type": "code_examples", "page_metadata": {"og:url": "https://helm.sh/docs/intro/quickstart/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Quickstart Guide\n", "language": "en", "ogTitle": "Quickstart Guide", "description": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "twitter:title": "Helm | Quickstart Guide", "twitter:description": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "ogDescription": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "viewport": "width=device-width,initial-scale=1", "og:title": ["Quickstart Guide", "Quickstart Guide"], "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/intro/quickstart/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "og:description": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "scrapeId": "904d513a-c064-499f-9970-9b7885105652", "sourceURL": "https://helm.sh/docs/intro/quickstart", "url": "https://helm.sh/docs/intro/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Quickstart Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have the latest stable release of Kubernetes for the best compatibility with Helm.\n• Use `helm repo update` to get the latest list of charts before installation.\n• Consider using the `--keep-history` flag when uninstalling to retain release history.\n", "metadata": {"source_url": "https://helm.sh/docs/intro/quickstart", "title": "Quickstart Guide", "description": "This guide covers how you can quickly get started using Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:10:52", "type": "best_practices", "page_metadata": {"og:url": "https://helm.sh/docs/intro/quickstart/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Quickstart Guide\n", "language": "en", "ogTitle": "Quickstart Guide", "description": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "twitter:title": "Helm | Quickstart Guide", "twitter:description": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "ogDescription": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "viewport": "width=device-width,initial-scale=1", "og:title": ["Quickstart Guide", "Quickstart Guide"], "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/intro/quickstart/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "og:description": "How to install and get started with Helm including instructions for distros, FAQs, and plugins.", "scrapeId": "904d513a-c064-499f-9970-9b7885105652", "sourceURL": "https://helm.sh/docs/intro/quickstart", "url": "https://helm.sh/docs/intro/quickstart/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Chart Hooks\"?\n\nAssistant: Helm provides a hook mechanism to allow chart developers to intervene at certain points in a release's life cycle.\n\nHere's a detailed explanation:\n\n\n## The Available Hooks\nThe following hooks are defined:\n\n| Annotation Value | Description |\n| --- | --- |\n| `pre-install` | Executes after templates are rendered, but before any resources are created in Kubernetes |\n| `post-install` | Executes after all resources are loaded into Kubernetes |\n| `pre-delete` | Executes on a deletion request before any resources are deleted from Kubernetes |\n| `post-delete` | Executes on a deletion request after all of the release's resources have been deleted |\n| `pre-upgrade` | Executes on an upgrade request after templates are rendered, but before any resources are updated |\n| `post-upgrade` | Executes on an upgrade request after all resources have been upgraded |\n| `pre-rollback` | Executes on a rollback request after templates are rendered, but before any resources are rolled back |\n| `post-rollback` | Executes on a rollback request after all resources have been modified |\n| `test` | Executes when the Helm test subcommand is invoked (<br>[view test docs](https://helm.sh/docs/chart_tests/)) |\n\n_Note that the `crd-install` hook has been removed in favor of the `crds/` directory in Helm 3._\n\n## Hooks and the Release Lifecycle\nHooks allow you, the chart developer, an opportunity to perform operations at strategic points in a release lifecycle. For example, consider the lifecycle for a `helm install`. By default, the lifecycle looks like this:\n\n1. User runs `helm install foo`\n2. The Helm library install API is called\n3. After some verification, the library renders the `foo` templates\n4. The library loads the resulting resources into Kubernetes\n5. The library returns the release object (and other data) to the client\n6. The client exits\n\nHelm defines two hooks for the `install` lifecycle: `pre-install` and `post-install`. If the developer of the `foo` chart implements both hooks, the lifecycle is altered like this:\n\n01. User runs `helm install foo`\n02. The Helm library install API is called\n03. CRDs in the `crds/` directory are installed\n04. After some verification, the library renders the `foo` templates\n05. The library prepares to execute the `pre-install` hooks (loading hook resources into Kubernetes)\n06. The library sorts hooks by weight (assigning a weight of 0 by default), by resource kind and finally by name in ascending order.\n07. The library then loads the hook with the lowest weight first (negative to positive)\n08. The library waits until the hook is \"Ready\" (except for CRDs)\n09. The library loads the resulting resources into Kubernetes. Note that if the `--wait` flag is set, the library will wait until all resources are in a ready state and will not run the `post-install` hook until they are ready.\n10. The library executes the `post-install` hook (loading hook resources)\n11. The library waits until the hook is \"Ready\"\n12. The library returns the release object (and other data) to the client\n13. The client exits\n\nWhat does it mean to wait until a hook is ready? This depends on the resource declared in the hook. If the resource is a `Job` or `Pod` kind, Helm will wait until it successfully runs to completion. And if the hook fails, the release will fail. This is a _blocking operation_, so the Helm client will pause while the Job is run.\n\nFor all other kinds, as soon as Kubernetes marks the resource as loaded (added or updated), the resource is considered \"Ready\". When many resources are declared in a hook, the resources are executed serially. If they have hook weights (see below), they are executed in weighted order.\nStarting from Helm 3.2.0 hook resources with same weight are installed in the same order as normal non-hook resources. Otherwise, ordering is not guaranteed. (In Helm 2.3.0 and after, they are sorted alphabetically. That behavior, though, is not considered binding and could change in the future.) It is considered good practice to add a hook weight, and set it to `0` if weight is not important.\n\n### Hook resources are not managed with corresponding releases\n\nThe resources that a hook creates are currently not tracked or managed as part of the release. Once Helm verifies that the hook has reached its ready state, it will leave the hook resource alone. Garbage collection of hook resources when the corresponding release is deleted may be added to Helm 3 in the future, so any hook resources that must never be deleted should be annotated with `helm.sh/resource-policy: keep`.\n\nPractically speaking, this means that if you create resources in a hook, you cannot rely upon `helm uninstall` to remove the resources. To destroy such resources, you need to either [add a custom `helm.sh/hook-delete-policy` annotation](https://helm.sh/docs/topics/charts_hooks/#hook-deletion-policies) to the hook template file, or [set the time to live (TTL) field of a Job resource](https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/).\n\n## Writing a Hook\nHooks are just Kubernetes manifest files with special annotations in the metadata section. Because they are template files, you can use all of the normal template features, including reading `.Values`, `.Release`, and `.Template`.\n\nFor example, this template, stored in `templates/post-install-job.yaml`, declares a job to be run on `post-install`:\n\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: \"{{ .Release.Name }}\"\n  labels:\n    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}\n    app.kubernetes.io/instance: {{ .Release.Name | quote }}\n    app.kubernetes.io/version: {{ .Chart.AppVersion }}\n    helm.sh/chart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n  annotations:\n    # This is what defines this resource as a hook. Without this line, the\n    # job is considered part of the release.\n    \"helm.sh/hook\": post-install\n    \"helm.sh/hook-weight\": \"-5\"\n    \"helm.sh/hook-delete-policy\": hook-succeeded\nspec:\n  template:\n    metadata:\n      name: \"{{ .Release.Name }}\"\n      labels:\n        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}\n        app.kubernetes.io/instance: {{ .Release.Name | quote }}\n        helm.sh/chart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n    spec:\n      restartPolicy: Never\n      containers:\n      - name: post-install-job\n        image: \"alpine:3.3\"\n        command: [\"/bin/sleep\",\"{{ default \"10\" .Values.sleepyTime }}\"]\n```\n\nWhat makes this template a hook is the annotation:\n\n```yaml\nannotations:\n  \"helm.sh/hook\": post-install\n```\n\nOne resource can implement multiple hooks:\n\n```yaml\nannotations:\n  \"helm.sh/hook\": post-install,post-upgrade\n```\n\nSimilarly, there is no limit to the number of different resources that may implement a given hook. For example, one could declare both a secret and a config map as a pre-install hook.\n\nWhen subcharts declare hooks, those are also evaluated. There is no way for a top-level chart to disable the hooks declared by subcharts.\n\nIt is possible to define a weight for a hook which will help build a deterministic executing order. Weights are defined using the following annotation:\n\n```yaml\nannotations:\n  \"helm.sh/hook-weight\": \"5\"\n```\n\nHook weights can be positive or negative numbers but must be represented as strings. When Helm starts the execution cycle of hooks of a particular Kind it will sort those hooks in ascending order.\n\n### Hook deletion policies\n\nIt is possible to define policies that determine when to delete corresponding hook resources. Hook deletion policies are defined using the following annotation:\n\n```yaml\nannotations:\n  \"helm.sh/hook-delete-policy\": before-hook-creation,hook-succeeded\n```\n\nYou can choose one or more defined annotation values:\n\n| Annotation Value | Description |\n| --- | --- |\n| `before-hook-creation` | Delete the previous resource before a new hook is launched (default) |\n| `hook-succeeded` | Delete the resource after the hook is successfully executed |\n| `hook-failed` | Delete the resource if the hook failed during execution |\n\nIf no hook deletion policy annotation is specified, the `before-hook-creation` behavior applies by default.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/charts_hooks", "title": "Chart Hooks", "description": "Helm provides a hook mechanism to allow chart developers to intervene at certain points in a release's life cycle.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:11:20", "type": "overview", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Chart Hooks\n", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Describes how to work with chart hooks.", "ogTitle": "Chart Hooks", "twitter:title": "Helm | Chart Hooks", "ogUrl": "https://helm.sh/docs/topics/charts_hooks/", "ogDescription": "Describes how to work with chart hooks.", "og:description": "Describes how to work with chart hooks.", "og:title": ["Chart Hooks", "Chart Hooks"], "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/topics/charts_hooks/", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Describes how to work with chart hooks.", "scrapeId": "1997a793-1a8b-45dd-8492-5abeb7fb4609", "sourceURL": "https://helm.sh/docs/topics/charts_hooks", "url": "https://helm.sh/docs/topics/charts_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Chart Hooks\"?\n\nAssistant: Here are some code examples:\n\n### Post-install Job Example\n```yaml\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: \"{{ .Release.Name }}\"\n  labels:\n    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}\n    app.kubernetes.io/instance: {{ .Release.Name | quote }}\n    app.kubernetes.io/version: {{ .Chart.AppVersion }}\n    helm.sh/chart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n  annotations:\n    \"helm.sh/hook\": post-install\n    \"helm.sh/hook-weight\": \"-5\"\n    \"helm.sh/hook-delete-policy\": hook-succeeded\nspec:\n  template:\n    metadata:\n      name: \"{{ .Release.Name }}\"\n      labels:\n        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}\n        app.kubernetes.io/instance: {{ .Release.Name | quote }}\n        helm.sh/chart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n    spec:\n      restartPolicy: Never\n      containers:\n      - name: post-install-job\n        image: \"alpine:3.3\"\n        command: [\"/bin/sleep\",\"{{ default \"10\" .Values.sleepyTime }}\"]\n```\n```\n\n### Multiple Hooks Example\n```yaml\n```yaml\nannotations:\n  \"helm.sh/hook\": post-install,post-upgrade\n```\n```\n\n### Hook Weight Example\n```yaml\n```yaml\nannotations:\n  \"helm.sh/hook-weight\": \"5\"\n```\n```\n\n### Hook Deletion Policies Example\n```yaml\n```yaml\nannotations:\n  \"helm.sh/hook-delete-policy\": before-hook-creation,hook-succeeded\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/charts_hooks", "title": "Chart Hooks", "description": "Helm provides a hook mechanism to allow chart developers to intervene at certain points in a release's life cycle.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:11:20", "type": "code_examples", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Chart Hooks\n", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Describes how to work with chart hooks.", "ogTitle": "Chart Hooks", "twitter:title": "Helm | Chart Hooks", "ogUrl": "https://helm.sh/docs/topics/charts_hooks/", "ogDescription": "Describes how to work with chart hooks.", "og:description": "Describes how to work with chart hooks.", "og:title": ["Chart Hooks", "Chart Hooks"], "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/topics/charts_hooks/", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Describes how to work with chart hooks.", "scrapeId": "1997a793-1a8b-45dd-8492-5abeb7fb4609", "sourceURL": "https://helm.sh/docs/topics/charts_hooks", "url": "https://helm.sh/docs/topics/charts_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Chart Hooks\"?\n\nAssistant: Here are the recommended best practices:\n\n• It is considered good practice to add a hook weight, and set it to `0` if weight is not important.\n• If you create resources in a hook, you cannot rely upon `helm uninstall` to remove the resources.\n• To destroy resources created in a hook, add a custom `helm.sh/hook-delete-policy` annotation or set the TTL field of a Job resource.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/charts_hooks", "title": "Chart Hooks", "description": "Helm provides a hook mechanism to allow chart developers to intervene at certain points in a release's life cycle.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:11:20", "type": "best_practices", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Chart Hooks\n", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Describes how to work with chart hooks.", "ogTitle": "Chart Hooks", "twitter:title": "Helm | Chart Hooks", "ogUrl": "https://helm.sh/docs/topics/charts_hooks/", "ogDescription": "Describes how to work with chart hooks.", "og:description": "Describes how to work with chart hooks.", "og:title": ["Chart Hooks", "Chart Hooks"], "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/topics/charts_hooks/", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Describes how to work with chart hooks.", "scrapeId": "1997a793-1a8b-45dd-8492-5abeb7fb4609", "sourceURL": "https://helm.sh/docs/topics/charts_hooks", "url": "https://helm.sh/docs/topics/charts_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Getting Started\"?\n\nAssistant: In this section of the guide, we'll create a chart and then add a first template. The chart we created here will be used throughout the rest of the guide.\n\nHere's a detailed explanation:\n\n\n## Charts\nAs described in the [Charts Guide](https://helm.sh/docs/topics/charts), Helm charts are structured like this:\n\n```fallback\nmychart/\n  Chart.yaml\n  values.yaml\n  charts/\n  templates/\n  ...\n```\n\nThe `templates/` directory is for template files. When Helm evaluates a chart, it will send all of the files in the `templates/` directory through the template rendering engine. It then collects the results of those templates and sends them on to Kubernetes.\n\nThe `values.yaml` file is also important to templates. This file contains the _default values_ for a chart. These values may be overridden by users during `helm install` or `helm upgrade`.\n\nThe `Chart.yaml` file contains a description of the chart. You can access it from within a template.\n\nThe `charts/` directory _may_ contain other charts (which we call _subcharts_). Later in this guide we will see how those work when it comes to template rendering.\n\n## A Starter Chart\nFor this guide, we'll create a simple chart called `mychart`, and then we'll create some templates inside of the chart.\n\n```console\n$ helm create mychart\nCreating mychart\n```\n\n### A Quick Glimpse of `mychart/templates/`\n\nIf you take a look at the `mychart/templates/` directory, you'll notice a few files already there.\n\n- `NOTES.txt`: The \"help text\" for your chart. This will be displayed to your users when they run `helm install`.\n- `deployment.yaml`: A basic manifest for creating a Kubernetes [deployment](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)\n- `service.yaml`: A basic manifest for creating a [service\\ endpoint](https://kubernetes.io/docs/concepts/services-networking/service/) for your deployment\n- `_helpers.tpl`: A place to put template helpers that you can re-use throughout the chart\n\nAnd what we're going to do is... _remove them all!_ That way we can work through our tutorial from scratch. We'll actually create our own `NOTES.txt` and `_helpers.tpl` as we go.\n\n```console\n$ rm -rf mychart/templates/*\n```\n\nWhen you're writing production grade charts, having basic versions of these charts can be really useful. So in your day-to-day chart authoring, you probably won't want to remove them.\n\n## A First Template\nThe first template we are going to create will be a `ConfigMap`. In Kubernetes, a ConfigMap is simply an object for storing configuration data. Other things, like pods, can access the data in a ConfigMap.\n\nBecause ConfigMaps are basic resources, they make a great starting point for us.\n\nLet's begin by creating a file called `mychart/templates/configmap.yaml`:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mychart-configmap\ndata:\n  myvalue: \"Hello World\"\n```\n\n**TIP:** Template names do not follow a rigid naming pattern. However, we recommend using the extension `.yaml` for YAML files and `.tpl` for helpers.\n\nThe YAML file above is a bare-bones ConfigMap, having the minimal necessary fields. By virtue of the fact that this file is in the `mychart/templates/` directory, it will be sent through the template engine.\n\nIt is just fine to put a plain YAML file like this in the `mychart/templates/` directory. When Helm reads this template, it will simply send it to Kubernetes as-is.\n\nWith this simple template, we now have an installable chart. And we can install it like this:\n\n```console\n$ helm install full-coral ./mychart\nNAME: full-coral\nLAST DEPLOYED: Tue Nov  1 17:36:01 2016\nNAMESPACE: default\nSTATUS: DEPLOYED\nREVISION: 1\nTEST SUITE: None\n```\n\nUsing Helm, we can retrieve the release and see the actual template that was loaded.\n\n```console\n$ helm get manifest full-coral\n\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mychart-configmap\ndata:\n  myvalue: \"Hello World\"\n```\n\nThe `helm get manifest` command takes a release name ( `full-coral`) and prints out all of the Kubernetes resources that were uploaded to the server. Each file begins with `---` to indicate the start of a YAML document, and then is followed by an automatically generated comment line that tells us what template file generated this YAML document.\n\nFrom there on, we can see that the YAML data is exactly what we put in our `configmap.yaml` file.\n\nNow we can uninstall our release: `helm uninstall full-coral`.\n\n## Adding a Simple Template Call\nHard-coding the `name:` into a resource is usually considered to be bad practice. Names should be unique to a release. So we might want to generate a name field by inserting the release name.\n\n**TIP:** The `name:` field is limited to 63 characters because of limitations to the DNS system. For that reason, release names are limited to 53 characters. Kubernetes 1.3 and earlier limited to only 24 characters (thus 14 character names).\n\nLet's alter `configmap.yaml` accordingly.\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n```\n\nThe big change comes in the value of the `name:` field, which is now `{{ .Release.Name }}-configmap`.\n\n> A template directive is enclosed in `{{` and `}}` blocks.\n\nThe template directive `{{ .Release.Name }}` injects the release name into the template. The values that are passed into a template can be thought of as _namespaced objects_, where a dot ( `.`) separates each namespaced element.\n\nThe leading dot before `Release` indicates that we start with the top-most namespace for this scope (we'll talk about scope in a bit). So we could read `.Release.Name` as \"start at the top namespace, find the `Release` object, then look inside of it for an object called `Name`\".\n\nThe `Release` object is one of the built-in objects for Helm, and we'll cover it in more depth later. But for now, it is sufficient to say that this will display the release name that the library assigns to our release.\n\nNow when we install our resource, we'll immediately see the result of using this template directive:\n\n```console\n$ helm install clunky-serval ./mychart\nNAME: clunky-serval\nLAST DEPLOYED: Tue Nov  1 17:45:37 2016\nNAMESPACE: default\nSTATUS: DEPLOYED\nREVISION: 1\nTEST SUITE: None\n```\n\nYou can run `helm get manifest clunky-serval` to see the entire generated YAML.\n\nNote that the ConfigMap inside Kubernetes name is `clunky-serval-configmap` instead of `mychart-configmap` previously.\n\nAt this point, we've seen templates at their most basic: YAML files that have template directives embedded in `{{` and `}}`. In the next part, we'll take a deeper look into templates. But before moving on, there's one quick trick that can make building templates faster: When you want to test the template rendering, but not actually install anything, you can use `helm install --debug --dry-run goodly-guppy ./mychart`. This will render the templates. But instead of installing the chart, it will return the rendered template to you so you can see the output:\n\n```console\n$ helm install --debug --dry-run goodly-guppy ./mychart\ninstall.go:149: [debug] Original chart version: \"\"\ninstall.go:166: [debug] CHART PATH: /Users/ninja/mychart\n\nNAME: goodly-guppy\nLAST DEPLOYED: Thu Dec 26 17:24:13 2019\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\naffinity: {}\nfullnameOverride: \"\"\nimage:\n  pullPolicy: IfNotPresent\n  repository: nginx\nimagePullSecrets: []\ningress:\n  annotations: {}\n  enabled: false\n  hosts:\n  - host: chart-example.local\n    paths: []\n  tls: []\nnameOverride: \"\"\nnodeSelector: {}\npodSecurityContext: {}\nreplicaCount: 1\nresources: {}\nsecurityContext: {}\nservice:\n  port: 80\n  type: ClusterIP\nserviceAccount:\n  create: true\n  name: null\ntolerations: []\n\nHOOKS:\nMANIFEST:\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: goodly-guppy-configmap\ndata:\n  myvalue: \"Hello World\"\n```\n\nUsing `--dry-run` will make it easier to test your code, but it won't ensure that Kubernetes itself will accept the templates you generate. It's best not to assume that your chart will install just because `--dry-run` works.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/getting_started", "title": "Getting Started", "description": "In this section of the guide, we'll create a chart and then add a first template. The chart we created here will be used throughout the rest of the guide.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:15:00", "type": "overview", "page_metadata": {"title": "Helm | Getting Started\n", "twitter:title": "Helm | Getting Started", "og:url": "https://helm.sh/docs/chart_template_guide/getting_started/", "og:description": "A quick guide on Chart templates.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "A quick guide on Chart templates.", "language": "en", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Getting Started", "ogUrl": "https://helm.sh/docs/chart_template_guide/getting_started/", "description": "A quick guide on Chart templates.", "og:title": ["Getting Started", "Getting Started"], "twitter:description": "A quick guide on Chart templates.", "scrapeId": "dd445144-1737-4644-bde6-1ee9f7af8c2c", "sourceURL": "https://helm.sh/docs/chart_template_guide/getting_started", "url": "https://helm.sh/docs/chart_template_guide/getting_started/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Getting Started\"?\n\nAssistant: Here are some code examples:\n\n### Creating a chart\n```yaml\n$ helm create mychart\nCreating mychart\n\n```\n\n### Removing templates\n```yaml\n$ rm -rf mychart/templates/*\n\n```\n\n### Installing the chart\n```yaml\n$ helm install full-coral ./mychart\nNAME: full-coral\nLAST DEPLOYED: Tue Nov  1 17:36:01 2016\nNAMESPACE: default\nSTATUS: DEPLOYED\nREVISION: 1\nTEST SUITE: None\n\n```\n\n### Getting the manifest\n```yaml\n$ helm get manifest full-coral\n\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mychart-configmap\ndata:\n  myvalue: \"Hello World\"\n\n```\n\n### Installing with release name\n```yaml\n$ helm install clunky-serval ./mychart\nNAME: clunky-serval\nLAST DEPLOYED: Tue Nov  1 17:45:37 2016\nNAMESPACE: default\nSTATUS: DEPLOYED\nREVISION: 1\nTEST SUITE: None\n\n```\n\n### Testing template rendering\n```yaml\n$ helm install --debug --dry-run goodly-guppy ./mychart\ninstall.go:149: [debug] Original chart version: \"\"\ninstall.go:166: [debug] CHART PATH: /Users/ninja/mychart\n\nNAME: goodly-guppy\nLAST DEPLOYED: Thu Dec 26 17:24:13 2019\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\naffinity: {}\nfullnameOverride: \"\"\nimage:\n  pullPolicy: IfNotPresent\n  repository: nginx\nimagePullSecrets: []\ningress:\n  annotations: {}\n  enabled: false\n  hosts:\n  - host: chart-example.local\n    paths: []\n  tls: []\nnameOverride: \"\"\nnodeSelector: {}\npodSecurityContext: {}\nreplicaCount: 1\nresources: {}\nsecurityContext: {}\nservice:\n  port: 80\n  type: ClusterIP\nserviceAccount:\n  create: true\n  name: null\ntolerations: []\n\nHOOKS:\nMANIFEST:\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: goodly-guppy-configmap\ndata:\n  myvalue: \"Hello World\"\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/getting_started", "title": "Getting Started", "description": "In this section of the guide, we'll create a chart and then add a first template. The chart we created here will be used throughout the rest of the guide.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:15:00", "type": "code_examples", "page_metadata": {"title": "Helm | Getting Started\n", "twitter:title": "Helm | Getting Started", "og:url": "https://helm.sh/docs/chart_template_guide/getting_started/", "og:description": "A quick guide on Chart templates.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "A quick guide on Chart templates.", "language": "en", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Getting Started", "ogUrl": "https://helm.sh/docs/chart_template_guide/getting_started/", "description": "A quick guide on Chart templates.", "og:title": ["Getting Started", "Getting Started"], "twitter:description": "A quick guide on Chart templates.", "scrapeId": "dd445144-1737-4644-bde6-1ee9f7af8c2c", "sourceURL": "https://helm.sh/docs/chart_template_guide/getting_started", "url": "https://helm.sh/docs/chart_template_guide/getting_started/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Getting Started\"?\n\nAssistant: Here are the recommended best practices:\n\n• Template names do not follow a rigid naming pattern. However, we recommend using the extension `.yaml` for YAML files and `.tpl` for helpers.\n• The `name:` field is limited to 63 characters because of limitations to the DNS system. For that reason, release names are limited to 53 characters. Kubernetes 1.3 and earlier limited to only 24 characters (thus 14 character names).\n• Using `--dry-run` will make it easier to test your code, but it won't ensure that Kubernetes itself will accept the templates you generate. It's best not to assume that your chart will install just because `--dry-run` works.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/getting_started", "title": "Getting Started", "description": "In this section of the guide, we'll create a chart and then add a first template. The chart we created here will be used throughout the rest of the guide.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:15:00", "type": "best_practices", "page_metadata": {"title": "Helm | Getting Started\n", "twitter:title": "Helm | Getting Started", "og:url": "https://helm.sh/docs/chart_template_guide/getting_started/", "og:description": "A quick guide on Chart templates.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "A quick guide on Chart templates.", "language": "en", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Getting Started", "ogUrl": "https://helm.sh/docs/chart_template_guide/getting_started/", "description": "A quick guide on Chart templates.", "og:title": ["Getting Started", "Getting Started"], "twitter:description": "A quick guide on Chart templates.", "scrapeId": "dd445144-1737-4644-bde6-1ee9f7af8c2c", "sourceURL": "https://helm.sh/docs/chart_template_guide/getting_started", "url": "https://helm.sh/docs/chart_template_guide/getting_started/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"How-to Guides\"?\n\nAssistant: Here you’ll find short answers to 'How do I….?' types of questions. These how-to guides don’t cover topics in depth – you’ll find that material in the Topic Guides. However, these guides will help you quickly accomplish common tasks.\n\nHere's a detailed explanation:\n\n\n## Quicklinks\nCovers some of the tips and tricks Helm chart developers have learned while building production-quality charts. Describes how to synchronize your local and remote chart repositories. Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.\n", "metadata": {"source_url": "https://helm.sh/docs/howto", "title": "How-to Guides", "description": "Here you’ll find short answers to 'How do I….?' types of questions. These how-to guides don’t cover topics in depth – you’ll find that material in the Topic Guides. However, these guides will help you quickly accomplish common tasks.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:15:04", "type": "overview", "page_metadata": {"ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | How-to", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/howto/", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["How-to", "How-to"], "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/howto/", "description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Docs\n", "ogTitle": "How-to", "scrapeId": "e8019523-4307-4f08-8221-1f94db13b0b5", "sourceURL": "https://helm.sh/docs/howto", "url": "https://helm.sh/docs/howto/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"How-to Guides\"?\n\nAssistant: Here are the recommended best practices:\n\n• These how-to guides help you quickly accomplish common tasks.\n", "metadata": {"source_url": "https://helm.sh/docs/howto", "title": "How-to Guides", "description": "Here you’ll find short answers to 'How do I….?' types of questions. These how-to guides don’t cover topics in depth – you’ll find that material in the Topic Guides. However, these guides will help you quickly accomplish common tasks.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:15:04", "type": "best_practices", "page_metadata": {"ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | How-to", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/howto/", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["How-to", "How-to"], "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/howto/", "description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Docs\n", "ogTitle": "How-to", "scrapeId": "e8019523-4307-4f08-8221-1f94db13b0b5", "sourceURL": "https://helm.sh/docs/howto", "url": "https://helm.sh/docs/howto/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Installing\"?\n\nAssistant: Instructions and information regarding the installation of Helm.\n\nHere's a detailed explanation:\n\n\n## Why aren't there native packages of Helm for Fedora and other Linux distros?\nThe Helm project does not maintain packages for operating systems and environments. The Helm community may provide native packages and if the Helm project is made aware of them they will be listed. This is how the Homebrew formula was started and listed. If you're interested in maintaining a package, we'd love it.\n\n## Why do you provide a `curl ...|bash` script?\nThere is a script in our repository ( `scripts/get-helm-3`) that can be executed as a `curl ..|bash` script. The transfers are all protected by HTTPS, and the script does some auditing of the packages it fetches. However, the script has all the usual dangers of any shell script.\n\nWe provide it because it is useful, but we suggest that users carefully read the script first. What we'd really like, though, are better packaged releases of Helm.\n\n## How do I put the Helm client files somewhere other than their defaults?\nHelm uses the XDG structure for storing files. There are environment variables you can use to override these locations:\n\n- `$XDG_CACHE_HOME`: set an alternative location for storing cached files.\n- `$XDG_CONFIG_HOME`: set an alternative location for storing Helm configuration.\n- `$XDG_DATA_HOME`: set an alternative location for storing Helm data.\n\nNote that if you have existing repositories, you will need to re-add them with `helm repo add...`.\n", "metadata": {"source_url": "https://helm.sh/docs/faq/installing", "title": "Installing", "description": "Instructions and information regarding the installation of Helm.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:15:12", "type": "overview", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Installing\n", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/faq/installing/", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Installing", "ogTitle": "Installing", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "og:url": "https://helm.sh/docs/faq/installing/", "og:title": ["Installing", "Installing"], "twitter:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "5cc6cc77-f5f9-4f25-972a-f7e2010d7685", "sourceURL": "https://helm.sh/docs/faq/installing", "url": "https://helm.sh/docs/faq/installing/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Installing\"?\n\nAssistant: Here are the recommended best practices:\n\n• Carefully read the `curl ...|bash` script before executing it.\n• If you have existing repositories, you will need to re-add them with `helm repo add...`.\n", "metadata": {"source_url": "https://helm.sh/docs/faq/installing", "title": "Installing", "description": "Instructions and information regarding the installation of Helm.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:15:12", "type": "best_practices", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Installing\n", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/faq/installing/", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Installing", "ogTitle": "Installing", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "og:url": "https://helm.sh/docs/faq/installing/", "og:title": ["Installing", "Installing"], "twitter:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "5cc6cc77-f5f9-4f25-972a-f7e2010d7685", "sourceURL": "https://helm.sh/docs/faq/installing", "url": "https://helm.sh/docs/faq/installing/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Installing Helm\"?\n\nAssistant: This guide shows how to install the Helm CLI. Helm can be installed either from source, or from pre-built binary releases.\n\nHere's a detailed explanation:\n\n\n## From The Helm Project\nThe Helm project provides two ways to fetch and install Helm. These are the official methods to get Helm releases. In addition to that, the Helm community provides methods to install Helm through different package managers. Installation through those methods can be found below the official methods.\n\n## From the Binary Releases\nEvery release of Helm provides binary releases for a variety of OSes. These binary versions can be manually downloaded and installed.\n\n1. Download your desired version\n2. Unpack it ( `tar -zxvf helm-v3.0.0-linux-amd64.tar.gz`)\n3. Find the `helm` binary in the unpacked directory, and move it to its desired destination ( `mv linux-amd64/helm /usr/local/bin/helm`)\n\nFrom there, you should be able to run the client and add the stable chart repository: `helm help`.\n\n**Note:** Helm automated tests are performed for Linux AMD64 only during GitHub Actions builds and releases. Testing of other OSes are the responsibility of the community requesting Helm for the OS in question.\n\n## From Script\nHelm now has an installer script that will automatically grab the latest version of Helm and install it locally.\n\nYou can fetch that script, and then execute it locally. It's well documented so that you can read through it and understand what it is doing before you run it.\n\n```console\n$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n$ chmod 700 get_helm.sh\n$ ./get_helm.sh\n```\n\nYes, you can `curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash` if you want to live on the edge.\n\n## Through Package Managers\nThe Helm community provides the ability to install Helm through operating system package managers. These are not supported by the Helm project and are not considered trusted 3rd parties.\n\n## From Homebrew (macOS)\nMembers of the Helm community have contributed a Helm formula build to Homebrew. This formula is generally up to date.\n\n```console\nbrew install helm\n```\n\n## From Chocolatey (Windows)\nMembers of the Helm community have contributed a Helm package build to Chocolatey. This package is generally up to date.\n\n```console\nchoco install kubernetes-helm\n```\n\n## From Scoop (Windows)\nMembers of the Helm community have contributed a Helm package build to Scoop. This package is generally up to date.\n\n```console\nscoop install helm\n```\n\n## From Winget (Windows)\nMembers of the Helm community have contributed a Helm package build to Winget. This package is generally up to date.\n\n```console\nwinget install Helm.Helm\n```\n\n## From Apt (Debian/Ubuntu)\nMembers of the Helm community have contributed a Helm package for Apt. This package is generally up to date.\n\n```console\ncurl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null\nsudo apt-get install apt-transport-https --yes\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list\nsudo apt-get update\nsudo apt-get install helm\n```\n\n## From dnf/yum (fedora)\nSince Fedora 35, helm is available on the official repository. You can install helm with invoking:\n\n```console\nsudo dnf install helm\n```\n\n## From Snap\nThe Snapcrafters community maintains the Snap version of the Helm package:\n\n```console\nsudo snap install helm --classic\n```\n\n## From pkg (FreeBSD)\nMembers of the FreeBSD community have contributed a Helm package build to the FreeBSD Ports Collection. This package is generally up to date.\n\n```console\npkg install helm\n```\n\n## Development Builds\nIn addition to releases you can download or install development snapshots of Helm.\n\n## From Canary Builds\n\"Canary\" builds are versions of the Helm software that are built from the latest main branch. They are not official releases, and may not be stable. However, they offer the opportunity to test the cutting edge features.\n\nCanary Helm binaries are stored at get.helm.sh. Here are links to the common builds:\n\n- Linux AMD64\n- macOS AMD64\n- Experimental Windows AMD64\n\n## From Source (Linux, macOS)\nBuilding Helm from source is slightly more work, but is the best way to go if you want to test the latest (pre-release) Helm version.\n\nYou must have a working Go environment.\n\n```console\n$ git clone https://github.com/helm/helm.git\n$ cd helm\n$ make\n```\n\n## Conclusion\nIn most cases, installation is as simple as getting a pre-built helm binary. This document covers additional cases for those who want to do more sophisticated things with Helm.\n\nOnce you have the Helm Client successfully installed, you can move on to using Helm to manage charts and add the stable chart repository.\n", "metadata": {"source_url": "https://helm.sh/docs/intro/install", "title": "Installing Helm", "description": "This guide shows how to install the Helm CLI. Helm can be installed either from source, or from pre-built binary releases.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-27 21:15:33", "type": "overview", "page_metadata": {"og:description": "Learn how to install and get running with Helm.", "language": "en", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Learn how to install and get running with Helm.", "title": "Helm | Installing Helm\n", "twitter:title": "Helm | Installing Helm", "ogUrl": "https://helm.sh/docs/intro/install/", "og:url": "https://helm.sh/docs/intro/install/", "twitter:card": "summary", "ogDescription": "Learn how to install and get running with Helm.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Installing Helm", "description": "Learn how to install and get running with Helm.", "og:title": ["Installing Helm", "Installing Helm"], "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "e7ccc3cd-99d7-4e54-8bff-1743ebc4cd93", "sourceURL": "https://helm.sh/docs/intro/install", "url": "https://helm.sh/docs/intro/install/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Installing Helm\"?\n\nAssistant: Here are some code examples:\n\n### Install Helm from Script\n```yaml\n$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n$ chmod 700 get_helm.sh\n$ ./get_helm.sh\n```\n\n### Install Helm from Homebrew (macOS)\n```yaml\nbrew install helm\n```\n\n### Install Helm from Chocolatey (Windows)\n```yaml\nchoco install kubernetes-helm\n```\n\n### Install Helm from Scoop (Windows)\n```yaml\nscoop install helm\n```\n\n### Install Helm from Winget (Windows)\n```yaml\nwinget install Helm.Helm\n```\n\n### Install Helm from Apt (Debian/Ubuntu)\n```yaml\ncurl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null\nsudo apt-get install apt-transport-https --yes\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list\nsudo apt-get update\nsudo apt-get install helm\n```\n\n### Install Helm from dnf/yum (fedora)\n```yaml\nsudo dnf install helm\n```\n\n### Install Helm from Snap\n```yaml\nsudo snap install helm --classic\n```\n\n### Install Helm from pkg (FreeBSD)\n```yaml\npkg install helm\n```\n\n### Build Helm from Source\n```yaml\n$ git clone https://github.com/helm/helm.git\n$ cd helm\n$ make\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/intro/install", "title": "Installing Helm", "description": "This guide shows how to install the Helm CLI. Helm can be installed either from source, or from pre-built binary releases.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-27 21:15:33", "type": "code_examples", "page_metadata": {"og:description": "Learn how to install and get running with Helm.", "language": "en", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Learn how to install and get running with Helm.", "title": "Helm | Installing Helm\n", "twitter:title": "Helm | Installing Helm", "ogUrl": "https://helm.sh/docs/intro/install/", "og:url": "https://helm.sh/docs/intro/install/", "twitter:card": "summary", "ogDescription": "Learn how to install and get running with Helm.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Installing Helm", "description": "Learn how to install and get running with Helm.", "og:title": ["Installing Helm", "Installing Helm"], "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "e7ccc3cd-99d7-4e54-8bff-1743ebc4cd93", "sourceURL": "https://helm.sh/docs/intro/install", "url": "https://helm.sh/docs/intro/install/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Installing Helm\"?\n\nAssistant: Here are the recommended best practices:\n\n• Helm automated tests are performed for Linux AMD64 only during GitHub Actions builds and releases. Testing of other OSes are the responsibility of the community requesting Helm for the OS in question.\n• Read through the installer script before executing it to understand what it is doing.\n", "metadata": {"source_url": "https://helm.sh/docs/intro/install", "title": "Installing Helm", "description": "This guide shows how to install the Helm CLI. Helm can be installed either from source, or from pre-built binary releases.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-02-27 21:15:33", "type": "best_practices", "page_metadata": {"og:description": "Learn how to install and get running with Helm.", "language": "en", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Learn how to install and get running with Helm.", "title": "Helm | Installing Helm\n", "twitter:title": "Helm | Installing Helm", "ogUrl": "https://helm.sh/docs/intro/install/", "og:url": "https://helm.sh/docs/intro/install/", "twitter:card": "summary", "ogDescription": "Learn how to install and get running with Helm.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Installing Helm", "description": "Learn how to install and get running with Helm.", "og:title": ["Installing Helm", "Installing Helm"], "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "e7ccc3cd-99d7-4e54-8bff-1743ebc4cd93", "sourceURL": "https://helm.sh/docs/intro/install", "url": "https://helm.sh/docs/intro/install/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"A Maintainer's Guide to Releasing Helm\"?\n\nAssistant: Time for a new Helm release! As a Helm maintainer cutting a release, you are the best person to update this release checklist should your experiences vary from what's documented here.\n\nHere's a detailed explanation:\n\n\n## Release Checklist\nAll releases will be of the form vX.Y.Z where X is the major version number, Y is the minor version number and Z is the patch release number. This project strictly follows semantic versioning so following this step is critical.\n\nHelm announces in advance the date of its next minor release. Every effort should be made to respect the announced date. Furthermore, when starting the release process, the date for the next release should have been selected as it will be used in the release process.\n\nThese directions will cover initial configuration followed by the release process for three different kinds of releases:\n\n- Major Releases - released less frequently - have breaking changes\n- Minor Releases - released every 3 to 4 months - no breaking changes\n- Patch Releases - released monthly - do not require all steps in this guide\n\nInitial Configuration\n\n1. Create the Release Branch\n2. Major/Minor releases: Change the Version Number in Git\n3. Major/Minor releases: Commit and Push the Release Branch\n4. Major/Minor releases: Create a Release Candidate\n5. Major/Minor releases: Iterate on Successive Release Candidates\n6. Finalize the Release\n7. Write the Release Notes\n8. PGP Sign the downloads\n9. Publish Release\n10. Update Docs\n11. Tell the Community\n", "metadata": {"source_url": "https://helm.sh/docs/community/release_checklist", "title": "A Maintainer's Guide to Releasing Helm", "description": "Time for a new Helm release! As a Helm maintainer cutting a release, you are the best person to update this release checklist should your experiences vary from what's documented here.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:15:51", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/community/release_checklist/", "twitter:description": "Checklist for maintainers when releasing the next version of Helm.", "og:title": ["Release Checklist", "Release Checklist"], "ogDescription": "Checklist for maintainers when releasing the next version of Helm.", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Helm | Release Checklist\n", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Release Checklist", "og:url": "https://helm.sh/docs/community/release_checklist/", "twitter:title": "Helm | Release Checklist", "description": "Checklist for maintainers when releasing the next version of Helm.", "og:description": "Checklist for maintainers when releasing the next version of Helm.", "twitter:card": "summary", "scrapeId": "66976b03-d412-471b-ac36-35e0cc56dba8", "sourceURL": "https://helm.sh/docs/community/release_checklist", "url": "https://helm.sh/docs/community/release_checklist/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"A Maintainer's Guide to Releasing Helm\"?\n\nAssistant: Here are some code examples:\n\n### Set Up Git Remote\n```yaml\ngit remote add upstream git@github.com:helm/helm.git\n```\n\n### Set Up Environment Variables for Major/Minor Releases\n```yaml\nexport RELEASE_NAME=vX.Y.0\nexport RELEASE_BRANCH_NAME=\"release-X.Y\"\nexport RELEASE_CANDIDATE_NAME=\"$RELEASE_NAME-rc.1\"\n```\n\n### Set Up Environment Variables for Patch Releases\n```yaml\nexport PREVIOUS_PATCH_RELEASE=vX.Y.Z\nexport RELEASE_NAME=vX.Y.Z+1\nexport RELEASE_BRANCH_NAME=\"release-X.Y\"\n```\n\n### Create the Release Branch for Major/Minor Releases\n```yaml\ngit fetch upstream\ngit checkout upstream/main\ngit checkout -b $RELEASE_BRANCH_NAME\n```\n\n### Create the Release Branch for Patch Releases\n```yaml\ngit fetch upstream\ngit checkout -b $RELEASE_BRANCH_NAME upstream/$RELEASE_BRANCH_NAME\n```\n\n### Change the Version Number in Git\n```yaml\n$ git diff internal/version/version.go\ndiff --git a/internal/version/version.go b/internal/version/version.go\nindex 712aae64..c1ed191e 100644\n--- a/internal/version/version.go\n+++ b/internal/version/version.go\n@@ -30,7 +30,7 @@ var (\n // Increment major number for new feature additions and behavioral changes.\n // Increment minor number for bug fixes and performance enhancements.\n // Increment patch number for critical fixes to existing releases.\n-       version = \"v3.3\"\n+       version = \"v3.4\"\n\n // metadata is extra build time data\n metadata = \"\"\n```\n\n### Commit and Push the Release Branch\n```yaml\ngit push upstream $RELEASE_BRANCH_NAME\n```\n\n### Create a Release Candidate\n```yaml\ngit tag --sign --annotate \"${RELEASE_CANDIDATE_NAME}\" --message \"Helm release ${RELEASE_CANDIDATE_NAME}\"\ngit push upstream $RELEASE_CANDIDATE_NAME\n```\n\n### Iterate on Successive Release Candidates\n```yaml\ngit cherry-pick -x <commit_id>\ngit tag --sign --annotate \"${RELEASE_CANDIDATE_NAME}\" --message \"Helm release ${RELEASE_CANDIDATE_NAME}\"\ngit push upstream $RELEASE_CANDIDATE_NAME\n```\n\n### Finalize the Release\n```yaml\ngit checkout $RELEASE_BRANCH_NAME\ngit tag --sign --annotate \"${RELEASE_NAME}\" --message \"Helm release ${RELEASE_NAME}\"\ngit push upstream $RELEASE_NAME\n```\n\n### Write the Release Notes\n```yaml\nexport VERSION=\"$RELEASE_NAME\"\nexport PREVIOUS_RELEASE=vX.Y.Z\nmake clean\nmake fetch-dist\nmake release-notes\n```\n\n### PGP Sign the downloads\n```yaml\nexport VERSION=\"$RELEASE_NAME\"\nmake clean\t\t# if not already run\nmake fetch-dist\t# if not already run\nmake sign\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/community/release_checklist", "title": "A Maintainer's Guide to Releasing Helm", "description": "Time for a new Helm release! As a Helm maintainer cutting a release, you are the best person to update this release checklist should your experiences vary from what's documented here.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:15:51", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/community/release_checklist/", "twitter:description": "Checklist for maintainers when releasing the next version of Helm.", "og:title": ["Release Checklist", "Release Checklist"], "ogDescription": "Checklist for maintainers when releasing the next version of Helm.", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Helm | Release Checklist\n", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Release Checklist", "og:url": "https://helm.sh/docs/community/release_checklist/", "twitter:title": "Helm | Release Checklist", "description": "Checklist for maintainers when releasing the next version of Helm.", "og:description": "Checklist for maintainers when releasing the next version of Helm.", "twitter:card": "summary", "scrapeId": "66976b03-d412-471b-ac36-35e0cc56dba8", "sourceURL": "https://helm.sh/docs/community/release_checklist", "url": "https://helm.sh/docs/community/release_checklist/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"A Maintainer's Guide to Releasing Helm\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the git remote in your repository is named 'upstream'.\n• For major/minor releases, set environment variables for convenience.\n• For patch releases, use different environment variables for versioning.\n• Verify that a helm/helm milestone for the release exists on GitHub.\n• Make sure PRs and issues for this release are in the milestone.\n• Spend time testing release candidates thoroughly before finalizing the release.\n", "metadata": {"source_url": "https://helm.sh/docs/community/release_checklist", "title": "A Maintainer's Guide to Releasing Helm", "description": "Time for a new Helm release! As a Helm maintainer cutting a release, you are the best person to update this release checklist should your experiences vary from what's documented here.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:15:51", "type": "best_practices", "page_metadata": {"ogUrl": "https://helm.sh/docs/community/release_checklist/", "twitter:description": "Checklist for maintainers when releasing the next version of Helm.", "og:title": ["Release Checklist", "Release Checklist"], "ogDescription": "Checklist for maintainers when releasing the next version of Helm.", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Helm | Release Checklist\n", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Release Checklist", "og:url": "https://helm.sh/docs/community/release_checklist/", "twitter:title": "Helm | Release Checklist", "description": "Checklist for maintainers when releasing the next version of Helm.", "og:description": "Checklist for maintainers when releasing the next version of Helm.", "twitter:card": "summary", "scrapeId": "66976b03-d412-471b-ac36-35e0cc56dba8", "sourceURL": "https://helm.sh/docs/community/release_checklist", "url": "https://helm.sh/docs/community/release_checklist/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Syncing Your Chart Repository\"?\n\nAssistant: This example is specifically for a Google Cloud Storage (GCS) bucket which serves a chart repository.\n\nHere's a detailed explanation:\n\n\n## Prerequisites\n- Install the [gsutil](https://cloud.google.com/storage/docs/gsutil) tool. _We_ _rely heavily on the gsutil rsync functionality_ - Be sure to have access to the Helm binary - _Optional: We recommend you set_ [object_versioning](https://cloud.google.com/storage/docs/gsutil/addlhelp/ObjectVersioningandConcurrencyControl#top_of_page) _on your GCS bucket in case you accidentally delete something._\n\n## Set up a local chart repository directory\nCreate a local directory like we did in [the chart repository guide](https://helm.sh/docs/topics/chart_repository/), and place your packaged charts in that directory.\n\n## Generate an updated index.yaml\nUse Helm to generate an updated index.yaml file by passing in the directory path and the url of the remote repository to the `helm repo index` command like this:\n\nThis will generate an updated index.yaml file and place it in the `fantastic-charts/` directory.\n\n## Sync your local and remote chart repositories\nUpload the contents of the directory to your GCS bucket by running `scripts/sync-repo.sh` and pass in the local directory name and the GCS bucket name.\n\n## Updating your chart repository\nYou'll want to keep a local copy of the contents of your chart repository or use `gsutil rsync` to copy the contents of your remote chart repository to a local directory.\n", "metadata": {"source_url": "https://helm.sh/docs/howto/chart_repository_sync_example", "title": "Syncing Your Chart Repository", "description": "This example is specifically for a Google Cloud Storage (GCS) bucket which serves a chart repository.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:16:32", "type": "overview", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Syncing Your Chart Repository", "og:url": "https://helm.sh/docs/howto/chart_repository_sync_example/", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "language": "en", "twitter:title": "Helm | Syncing Your Chart Repository", "title": "Helm | Syncing Your Chart Repository\n", "og:title": ["Syncing Your Chart Repository", "Syncing Your Chart Repository"], "og:description": "Describes how to synchronize your local and remote chart repositories.", "twitter:description": "Describes how to synchronize your local and remote chart repositories.", "ogDescription": "Describes how to synchronize your local and remote chart repositories.", "description": "Describes how to synchronize your local and remote chart repositories.", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/howto/chart_repository_sync_example/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "c7ce5da6-0bdf-4687-9a27-6afd29b3ab8a", "sourceURL": "https://helm.sh/docs/howto/chart_repository_sync_example", "url": "https://helm.sh/docs/howto/chart_repository_sync_example/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Syncing Your Chart Repository\"?\n\nAssistant: Here are some code examples:\n\n### Create a local directory and move packaged charts\n```yaml\n$ mkdir fantastic-charts\n$ mv alpine-0.1.0.tgz fantastic-charts/\n```\n\n### Generate an updated index.yaml\n```yaml\n$ helm repo index fantastic-charts/ --url https://fantastic-charts.storage.googleapis.com\n```\n\n### Sync local directory to remote repository\n```yaml\n$ pwd\n/Users/me/code/go/src/helm.sh/helm\n$ scripts/sync-repo.sh fantastic-charts/ fantastic-charts\nGetting ready to sync your local directory (fantastic-charts/) to a remote repository at gs://fantastic-charts\nVerifying Prerequisites....\nThumbs up! Looks like you have gsutil. Let's continue.\nBuilding synchronization state...\nStarting synchronization\nWould copy file://fantastic-charts/alpine-0.1.0.tgz to gs://fantastic-charts/alpine-0.1.0.tgz\nWould copy file://fantastic-charts/index.yaml to gs://fantastic-charts/index.yaml\nAre you sure you would like to continue with these changes?? [y/N]} y\nBuilding synchronization state...\nStarting synchronization\nCopying file://fantastic-charts/alpine-0.1.0.tgz [Content-Type=application/x-tar]...\nUploading   gs://fantastic-charts/alpine-0.1.0.tgz:              740 B/740 B\nCopying file://fantastic-charts/index.yaml [Content-Type=application/octet-stream]...\nUploading   gs://fantastic-charts/index.yaml:                    347 B/347 B\nCongratulations your remote chart repository now matches the contents of fantastic-charts/\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/howto/chart_repository_sync_example", "title": "Syncing Your Chart Repository", "description": "This example is specifically for a Google Cloud Storage (GCS) bucket which serves a chart repository.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:16:32", "type": "code_examples", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Syncing Your Chart Repository", "og:url": "https://helm.sh/docs/howto/chart_repository_sync_example/", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "language": "en", "twitter:title": "Helm | Syncing Your Chart Repository", "title": "Helm | Syncing Your Chart Repository\n", "og:title": ["Syncing Your Chart Repository", "Syncing Your Chart Repository"], "og:description": "Describes how to synchronize your local and remote chart repositories.", "twitter:description": "Describes how to synchronize your local and remote chart repositories.", "ogDescription": "Describes how to synchronize your local and remote chart repositories.", "description": "Describes how to synchronize your local and remote chart repositories.", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/howto/chart_repository_sync_example/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "c7ce5da6-0bdf-4687-9a27-6afd29b3ab8a", "sourceURL": "https://helm.sh/docs/howto/chart_repository_sync_example", "url": "https://helm.sh/docs/howto/chart_repository_sync_example/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Syncing Your Chart Repository\"?\n\nAssistant: Here are the recommended best practices:\n\n• We recommend you set object versioning on your GCS bucket in case you accidentally delete something.\n• Keep a local copy of the contents of your chart repository or use gsutil rsync to copy the contents of your remote chart repository to a local directory.\n", "metadata": {"source_url": "https://helm.sh/docs/howto/chart_repository_sync_example", "title": "Syncing Your Chart Repository", "description": "This example is specifically for a Google Cloud Storage (GCS) bucket which serves a chart repository.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:16:32", "type": "best_practices", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Syncing Your Chart Repository", "og:url": "https://helm.sh/docs/howto/chart_repository_sync_example/", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "language": "en", "twitter:title": "Helm | Syncing Your Chart Repository", "title": "Helm | Syncing Your Chart Repository\n", "og:title": ["Syncing Your Chart Repository", "Syncing Your Chart Repository"], "og:description": "Describes how to synchronize your local and remote chart repositories.", "twitter:description": "Describes how to synchronize your local and remote chart repositories.", "ogDescription": "Describes how to synchronize your local and remote chart repositories.", "description": "Describes how to synchronize your local and remote chart repositories.", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/howto/chart_repository_sync_example/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "c7ce5da6-0bdf-4687-9a27-6afd29b3ab8a", "sourceURL": "https://helm.sh/docs/howto/chart_repository_sync_example", "url": "https://helm.sh/docs/howto/chart_repository_sync_example/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Values\"?\n\nAssistant: This part of the best practices guide covers using values. In this part of the guide, we provide recommendations on how you should structure and use your values, with focus on designing a chart's `values.yaml` file.\n\nHere's a detailed explanation:\n\n\n## Naming Conventions\nVariable names should begin with a lowercase letter, and words should be separated with camelcase:\n\nCorrect:\n\n```yaml\nchicken: true\nchickenNoodleSoup: true\n```\n\nIncorrect:\n\n```yaml\nChicken: true  # initial caps may conflict with built-ins\nchicken-noodle-soup: true # do not use hyphens in the name\n```\n\nNote that all of Helm's built-in variables begin with an uppercase letter to easily distinguish them from user-defined values: `.Release.Name`, `.Capabilities.KubeVersion`.\n\n## Flat or Nested Values\nYAML is a flexible format, and values may be nested deeply or flattened.\n\nNested:\n\n```yaml\nserver:\n  name: nginx\n  port: 80\n```\n\nFlat:\n\n```yaml\nserverName: nginx\nserverPort: 80\n```\n\nIn most cases, flat should be favored over nested. The reason for this is that it is simpler for template developers and users.\n\nFor optimal safety, a nested value must be checked at every level:\n\n```fallback\n{{ if .Values.server }}\n  {{ default \"none\" .Values.server.name }}\n{{ end }}\n```\n\nFor every layer of nesting, an existence check must be done. But for flat configuration, such checks can be skipped, making the template easier to read and use.\n\n```fallback\n{{ default \"none\" .Values.serverName }}\n```\n\nWhen there are a large number of related variables, and at least one of them is non-optional, nested values may be used to improve readability.\n\n## Make Types Clear\nYAML's type coercion rules are sometimes counterintuitive. For example, `foo: false` is not the same as `foo: \"false\"`. Large integers like `foo: 12345678` will get converted to scientific notation in some cases.\n\nThe easiest way to avoid type conversion errors is to be explicit about strings, and implicit about everything else. Or, in short, _quote all strings_.\n\nOften, to avoid the integer casting issues, it is advantageous to store your integers as strings as well, and use `{{ int $value }}` in the template to convert from a string back to an integer.\n\nIn most cases, explicit type tags are respected, so `foo: !!string 1234` should treat `1234` as a string. _However_, the YAML parser consumes tags, so the type data is lost after one parse.\n\n## Consider How Users Will Use Your Values\nThere are three potential sources of values:\n\n- A chart's `values.yaml` file\n- A values file supplied by `helm install -f` or `helm upgrade -f`\n- The values passed to a `--set` or `--set-string` flag on `helm install` or `helm upgrade`\n\nWhen designing the structure of your values, keep in mind that users of your chart may want to override them via either the `-f` flag or with the `--set` option.\n\nSince `--set` is more limited in expressiveness, the first guidelines for writing your `values.yaml` file is _make it easy to override from `--set`_.\n\nFor this reason, it's often better to structure your values file using maps.\n\nDifficult to use with `--set`:\n\n```yaml\nservers:\n  - name: foo\n    port: 80\n  - name: bar\n    port: 81\n```\n\nThe above cannot be expressed with `--set` in Helm `<=2.4`. In Helm 2.5, accessing the port on foo is `--set servers[0].port=80`. Not only is it harder for the user to figure out, but it is prone to errors if at some later time the order of the `servers` is changed.\n\nEasy to use:\n\n```yaml\nservers:\n  foo:\n    port: 80\n  bar:\n    port: 81\n```\n\nAccessing foo's port is much more obvious: `--set servers.foo.port=80`.\n\n## Document `values.yaml`\nEvery defined property in `values.yaml` should be documented. The documentation string should begin with the name of the property that it describes, and then give at least a one-sentence description.\n\nIncorrect:\n\n```yaml\n# the host name for the webserver\nserverHost: example\nserverPort: 9191\n```\n\nCorrect:\n\n```yaml\n# serverHost is the host name for the webserver\nserverHost: example\n# serverPort is the HTTP listener port for the webserver\nserverPort: 9191\n```\n\nBeginning each comment with the name of the parameter it documents makes it easy to grep out documentation, and will enable documentation tools to reliably correlate doc strings with the parameters they describe.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/values", "title": "Values", "description": "This part of the best practices guide covers using values. In this part of the guide, we provide recommendations on how you should structure and use your values, with focus on designing a chart's `values.yaml` file.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:16:56", "type": "overview", "page_metadata": {"ogDescription": "Focuses on how you should structure and use your values.", "og:url": "https://helm.sh/docs/chart_best_practices/values/", "title": "Helm | Values\n", "description": "Focuses on how you should structure and use your values.", "og:description": "Focuses on how you should structure and use your values.", "twitter:card": "summary", "ogTitle": "Values", "ogUrl": "https://helm.sh/docs/chart_best_practices/values/", "twitter:description": "Focuses on how you should structure and use your values.", "viewport": "width=device-width,initial-scale=1", "language": "en", "twitter:title": "Helm | Values", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Values", "Values"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "17aac99e-86dd-408c-952c-fd24e77a1a40", "sourceURL": "https://helm.sh/docs/chart_best_practices/values", "url": "https://helm.sh/docs/chart_best_practices/values/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Values\"?\n\nAssistant: Here are some code examples:\n\n### Correct Naming Conventions\n```yaml\n```yaml\nchicken: true\nchickenNoodleSoup: true\n```\n```\n\n### Incorrect Naming Conventions\n```yaml\n```yaml\nChicken: true  # initial caps may conflict with built-ins\nchicken-noodle-soup: true # do not use hyphens in the name\n```\n```\n\n### Nested Values Example\n```yaml\n```yaml\nserver:\n  name: nginx\n  port: 80\n```\n```\n\n### Flat Values Example\n```yaml\n```yaml\nserverName: nginx\nserverPort: 80\n```\n```\n\n### Nested Value Existence Check\n```yaml\n```fallback\n{{ if .Values.server }}\n  {{ default \"none\" .Values.server.name }}\n{{ end }}\n```\n```\n\n### Flat Value Default Example\n```yaml\n```fallback\n{{ default \"none\" .Values.serverName }}\n```\n```\n\n### Difficult to Use with `--set` Example\n```yaml\n```yaml\nservers:\n  - name: foo\n    port: 80\n  - name: bar\n    port: 81\n```\n```\n\n### Easy to Use with `--set` Example\n```yaml\n```yaml\nservers:\n  foo:\n    port: 80\n  bar:\n    port: 81\n```\n```\n\n### Incorrect Documentation Example\n```yaml\n```yaml\n# the host name for the webserver\nserverHost: example\nserverPort: 9191\n```\n```\n\n### Correct Documentation Example\n```yaml\n```yaml\n# serverHost is the host name for the webserver\nserverHost: example\n# serverPort is the HTTP listener port for the webserver\nserverPort: 9191\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/values", "title": "Values", "description": "This part of the best practices guide covers using values. In this part of the guide, we provide recommendations on how you should structure and use your values, with focus on designing a chart's `values.yaml` file.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:16:56", "type": "code_examples", "page_metadata": {"ogDescription": "Focuses on how you should structure and use your values.", "og:url": "https://helm.sh/docs/chart_best_practices/values/", "title": "Helm | Values\n", "description": "Focuses on how you should structure and use your values.", "og:description": "Focuses on how you should structure and use your values.", "twitter:card": "summary", "ogTitle": "Values", "ogUrl": "https://helm.sh/docs/chart_best_practices/values/", "twitter:description": "Focuses on how you should structure and use your values.", "viewport": "width=device-width,initial-scale=1", "language": "en", "twitter:title": "Helm | Values", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Values", "Values"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "17aac99e-86dd-408c-952c-fd24e77a1a40", "sourceURL": "https://helm.sh/docs/chart_best_practices/values", "url": "https://helm.sh/docs/chart_best_practices/values/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Values\"?\n\nAssistant: Here are the recommended best practices:\n\n• Variable names should begin with a lowercase letter, and words should be separated with camelcase.\n• In most cases, flat should be favored over nested values for simplicity.\n• Be explicit about strings to avoid type conversion errors.\n• Make it easy to override values from `--set` by structuring your values file using maps.\n• Document every defined property in `values.yaml` with a clear description.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/values", "title": "Values", "description": "This part of the best practices guide covers using values. In this part of the guide, we provide recommendations on how you should structure and use your values, with focus on designing a chart's `values.yaml` file.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:16:56", "type": "best_practices", "page_metadata": {"ogDescription": "Focuses on how you should structure and use your values.", "og:url": "https://helm.sh/docs/chart_best_practices/values/", "title": "Helm | Values\n", "description": "Focuses on how you should structure and use your values.", "og:description": "Focuses on how you should structure and use your values.", "twitter:card": "summary", "ogTitle": "Values", "ogUrl": "https://helm.sh/docs/chart_best_practices/values/", "twitter:description": "Focuses on how you should structure and use your values.", "viewport": "width=device-width,initial-scale=1", "language": "en", "twitter:title": "Helm | Values", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Values", "Values"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "17aac99e-86dd-408c-952c-fd24e77a1a40", "sourceURL": "https://helm.sh/docs/chart_best_practices/values", "url": "https://helm.sh/docs/chart_best_practices/values/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Built-in Objects\"?\n\nAssistant: Objects are passed into a template from the template engine. This page covers the built-in objects available in templates, their structure, and how to access them.\n\nHere's a detailed explanation:\n\n\n## Overview\nObjects are passed into a template from the template engine. And your code can pass objects around (we'll see examples when we look at the `with` and `range` statements). There are even a few ways to create new objects within your templates, like with the `tuple` function we'll see later.\n\n## Top-Level Objects\nObjects can be simple, and have just one value. Or they can contain other objects or functions. For example, the `Release` object contains several objects (like `Release.Name`) and the `Files` object has a few functions.\n\n## Release Object\n`Release`: This object describes the release itself. It has several objects inside of it:\n- `Release.Name`: The release name\n- `Release.Namespace`: The namespace to be released into (if the manifest doesn’t override)\n- `Release.IsUpgrade`: This is set to `true` if the current operation is an upgrade or rollback.\n- `Release.IsInstall`: This is set to `true` if the current operation is an install.\n- `Release.Revision`: The revision number for this release. On install, this is 1, and it is incremented with each upgrade and rollback.\n- `Release.Service`: The service that is rendering the present template. On Helm, this is always `Helm`.\n\n## Values Object\n`Values`: Values passed into the template from the `values.yaml` file and from user-supplied files. By default, `Values` is empty.\n\n## Chart Object\n`Chart`: The contents of the `Chart.yaml` file. Any data in `Chart.yaml` will be accessible here. For example `{{ .Chart.Name }}-{{ .Chart.Version }}` will print out the `mychart-0.1.0`.\n- The available fields are listed in the [Charts Guide](https://helm.sh/docs/topics/charts/#the-chartyaml-file) \n\n## Subcharts Object\n`Subcharts`: This provides access to the scope (.Values, .Charts, .Releases etc.) of subcharts to the parent. For example `.Subcharts.mySubChart.myValue` to access the `myValue` in the `mySubChart` chart.\n\n## Files Object\n`Files`: This provides access to all non-special files in a chart. While you cannot use it to access templates, you can use it to access other files in the chart. See the section [Accessing Files](https://helm.sh/docs/chart_template_guide/accessing_files/) for more.\n- `Files.Get` is a function for getting a file by name ( `.Files.Get config.ini`)\n- `Files.GetBytes` is a function for getting the contents of a file as an array of bytes instead of as a string. This is useful for things like images.\n- `Files.Glob` is a function that returns a list of files whose names match the given shell glob pattern.\n- `Files.Lines` is a function that reads a file line-by-line. This is useful for iterating over each line in a file.\n- `Files.AsSecrets` is a function that returns the file bodies as Base 64 encoded strings.\n- `Files.AsConfig` is a function that returns file bodies as a YAML map.\n\n## Capabilities Object\n`Capabilities`: This provides information about what capabilities the Kubernetes cluster supports.\n- `Capabilities.APIVersions` is a set of versions.\n- `Capabilities.APIVersions.Has $version` indicates whether a version (e.g., `batch/v1`) or resource (e.g., `apps/v1/Deployment`) is available on the cluster.\n- `Capabilities.KubeVersion` and `Capabilities.KubeVersion.Version` is the Kubernetes version.\n- `Capabilities.KubeVersion.Major` is the Kubernetes major version.\n- `Capabilities.KubeVersion.Minor` is the Kubernetes minor version.\n- `Capabilities.HelmVersion` is the object containing the Helm Version details, it is the same output of `helm version`.\n- `Capabilities.HelmVersion.Version` is the current Helm version in semver format.\n- `Capabilities.HelmVersion.GitCommit` is the Helm git sha1.\n- `Capabilities.HelmVersion.GitTreeState` is the state of the Helm git tree.\n- `Capabilities.HelmVersion.GoVersion` is the version of the Go compiler used.\n\n## Template Object\n`Template`: Contains information about the current template that is being executed\n- `Template.Name`: A namespaced file path to the current template (e.g. `mychart/templates/mytemplate.yaml`)\n- `Template.BasePath`: The namespaced path to the templates directory of the current chart (e.g. `mychart/templates`).\n\n## Naming Convention\nThe built-in values always begin with a capital letter. This is in keeping with Go's naming convention. When you create your own names, you are free to use a convention that suits your team. Some teams, like many whose charts you may see on [Artifact Hub](https://artifacthub.io/packages/search?kind=0), choose to use only initial lower case letters in order to distinguish local names from those built-in. In this guide, we follow that convention.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/builtin_objects", "title": "Built-in Objects", "description": "Objects are passed into a template from the template engine. This page covers the built-in objects available in templates, their structure, and how to access them.", "has_code_examples": false, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:17:11", "type": "overview", "page_metadata": {"ogTitle": "Built-in Objects", "title": "Helm | Built-in Objects\n", "viewport": "width=device-width,initial-scale=1", "og:description": "Built-in objects available to templates.", "language": "en", "og:title": ["Built-in Objects", "Built-in Objects"], "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Built-in objects available to templates.", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Built-in objects available to templates.", "ogUrl": "https://helm.sh/docs/chart_template_guide/builtin_objects/", "twitter:title": "Helm | Built-in Objects", "twitter:card": "summary", "ogDescription": "Built-in objects available to templates.", "og:url": "https://helm.sh/docs/chart_template_guide/builtin_objects/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "29bfa95e-af3b-4f9d-8a36-6f50f78efcfb", "sourceURL": "https://helm.sh/docs/chart_template_guide/builtin_objects", "url": "https://helm.sh/docs/chart_template_guide/builtin_objects/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Built-in Objects\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use capital letters for built-in values to follow Go's naming convention.\n• Consider using lower case letters for local names to distinguish them from built-in objects.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/builtin_objects", "title": "Built-in Objects", "description": "Objects are passed into a template from the template engine. This page covers the built-in objects available in templates, their structure, and how to access them.", "has_code_examples": false, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:17:11", "type": "best_practices", "page_metadata": {"ogTitle": "Built-in Objects", "title": "Helm | Built-in Objects\n", "viewport": "width=device-width,initial-scale=1", "og:description": "Built-in objects available to templates.", "language": "en", "og:title": ["Built-in Objects", "Built-in Objects"], "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Built-in objects available to templates.", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Built-in objects available to templates.", "ogUrl": "https://helm.sh/docs/chart_template_guide/builtin_objects/", "twitter:title": "Helm | Built-in Objects", "twitter:card": "summary", "ogDescription": "Built-in objects available to templates.", "og:url": "https://helm.sh/docs/chart_template_guide/builtin_objects/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "29bfa95e-af3b-4f9d-8a36-6f50f78efcfb", "sourceURL": "https://helm.sh/docs/chart_template_guide/builtin_objects", "url": "https://helm.sh/docs/chart_template_guide/builtin_objects/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Chart Releaser Action to Automate GitHub Page Charts\"?\n\nAssistant: This guide describes how to use Chart Releaser Action to automate releasing charts through GitHub pages. Chart Releaser Action is a GitHub Action workflow to turn a GitHub project into a self-hosted Helm chart repo, using helm/chart-releaser CLI tool.\n\nHere's a detailed explanation:\n\n\n## Repository Changes\nCreate a Git repository under your GitHub organization. You could give the name of the repository as `helm-charts`, though other names are also acceptable. The sources of all the charts can be placed under the `main` branch. The charts should be placed under `/charts` directory at the top-level of the directory tree.\n\nThere should be another branch named `gh-pages` to publish the charts. The changes to that branch will be automatically created by the Chart Releaser Action described here. However, you can create that `gh-branch` and add `README.md` file, which is going to be visible to the users visiting the page.\n\nYou can add instruction in the `README.md` for charts installation like this (replace `<alias>`, `<orgname>`, and `<chart-name>`):\n\n## Usage\n\n[Helm](https://helm.sh) must be installed to use the charts.  Please refer to Helm's [documentation](https://helm.sh/docs) to get started.\n\nOnce Helm has been set up correctly, add the repo as follows:\n\n  helm repo add <alias> https://<orgname>.github.io/helm-charts\n\nIf you had already added this repo earlier, run `helm repo update` to retrieve the latest versions of the packages.  You can then run `helm search repo <alias>` to see the charts.\n\nTo install the <chart-name> chart:\n\n    helm install my-<chart-name> <alias>/<chart-name>\n\nTo uninstall the chart:\n\n    helm uninstall my-<chart-name>\n\nThe charts will be published to a website with URL like this:\n\n```\nhttps://<orgname>.github.io/helm-charts\n```\n\n## GitHub Actions Workflow\nCreate GitHub Actions workflow file in the `main` branch at `.github/workflows/release.yml`\n\n```yaml\nname: Release Charts\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n        uses: helm/chart-releaser-action@v1.6.0\n        env:\n          CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```\n\nThe above configuration uses [@helm/chart-releaser-action](https://github.com/helm/chart-releaser-action) to turn your GitHub project into a self-hosted Helm chart repo. It does this - during every push to main - by checking each chart in your project, and whenever there's a new chart version, creates a corresponding GitHub release named for the chart version, adds Helm chart artifacts to the release, and creates or updates an `index.yaml` file with metadata about those releases, which is then hosted on GitHub pages.\n\nThe Chart Releaser Action version number used in the above example is `v1.6.0`. You can change it to the [latest available version](https://github.com/helm/chart-releaser-action/releases).\n", "metadata": {"source_url": "https://helm.sh/docs/howto/chart_releaser_action", "title": "Chart Releaser Action to Automate GitHub Page Charts", "description": "This guide describes how to use Chart Releaser Action to automate releasing charts through GitHub pages. Chart Releaser Action is a GitHub Action workflow to turn a GitHub project into a self-hosted Helm chart repo, using helm/chart-releaser CLI tool.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:17:31", "type": "overview", "page_metadata": {"twitter:description": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/howto/chart_releaser_action/", "twitter:title": "Helm | Chart Releaser Action to Automate GitHub Page Charts", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "og:description": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "ogUrl": "https://helm.sh/docs/howto/chart_releaser_action/", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Chart Releaser Action to Automate GitHub Page Charts", "og:title": ["Chart Releaser Action to Automate GitHub Page Charts", "Chart Releaser Action to Automate GitHub Page Charts"], "title": "Helm | Chart Releaser Action to Automate GitHub Page Charts\n", "description": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "scrapeId": "4ed521e8-afc8-4734-a586-0e6d435cbf8e", "sourceURL": "https://helm.sh/docs/howto/chart_releaser_action", "url": "https://helm.sh/docs/howto/chart_releaser_action/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Chart Releaser Action to Automate GitHub Page Charts\"?\n\nAssistant: Here are some code examples:\n\n### Usage Instructions for Helm Charts\n```yaml\n## Usage\n\n[Helm](https://helm.sh) must be installed to use the charts.  Please refer to Helm's [documentation](https://helm.sh/docs) to get started.\n\nOnce Helm has been set up correctly, add the repo as follows:\n\n  helm repo add <alias> https://<orgname>.github.io/helm-charts\n\nIf you had already added this repo earlier, run `helm repo update` to retrieve the latest versions of the packages.  You can then run `helm search repo <alias>` to see the charts.\n\nTo install the <chart-name> chart:\n\n    helm install my-<chart-name> <alias>/<chart-name>\n\nTo uninstall the chart:\n\n    helm uninstall my-<chart-name>\n\nThe charts will be published to a website with URL like this:\n\n```\nhttps://<orgname>.github.io/helm-charts\n```\n```\n\n### GitHub Actions Workflow Configuration\n```yaml\nname: Release Charts\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Configure Git\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n\n      - name: Run chart-releaser\n        uses: helm/chart-releaser-action@v1.6.0\n        env:\n          CR_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/howto/chart_releaser_action", "title": "Chart Releaser Action to Automate GitHub Page Charts", "description": "This guide describes how to use Chart Releaser Action to automate releasing charts through GitHub pages. Chart Releaser Action is a GitHub Action workflow to turn a GitHub project into a self-hosted Helm chart repo, using helm/chart-releaser CLI tool.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:17:31", "type": "code_examples", "page_metadata": {"twitter:description": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/howto/chart_releaser_action/", "twitter:title": "Helm | Chart Releaser Action to Automate GitHub Page Charts", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "og:description": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "ogUrl": "https://helm.sh/docs/howto/chart_releaser_action/", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Chart Releaser Action to Automate GitHub Page Charts", "og:title": ["Chart Releaser Action to Automate GitHub Page Charts", "Chart Releaser Action to Automate GitHub Page Charts"], "title": "Helm | Chart Releaser Action to Automate GitHub Page Charts\n", "description": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "scrapeId": "4ed521e8-afc8-4734-a586-0e6d435cbf8e", "sourceURL": "https://helm.sh/docs/howto/chart_releaser_action", "url": "https://helm.sh/docs/howto/chart_releaser_action/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Chart Releaser Action to Automate GitHub Page Charts\"?\n\nAssistant: Here are the recommended best practices:\n\n• The Chart Releaser Action is almost always used in tandem with the Helm Testing Action and Kind Action.\n• Ensure to replace <alias>, <orgname>, and <chart-name> with actual values in the usage instructions.\n", "metadata": {"source_url": "https://helm.sh/docs/howto/chart_releaser_action", "title": "Chart Releaser Action to Automate GitHub Page Charts", "description": "This guide describes how to use Chart Releaser Action to automate releasing charts through GitHub pages. Chart Releaser Action is a GitHub Action workflow to turn a GitHub project into a self-hosted Helm chart repo, using helm/chart-releaser CLI tool.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:17:31", "type": "best_practices", "page_metadata": {"twitter:description": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/howto/chart_releaser_action/", "twitter:title": "Helm | Chart Releaser Action to Automate GitHub Page Charts", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "og:description": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "ogUrl": "https://helm.sh/docs/howto/chart_releaser_action/", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Chart Releaser Action to Automate GitHub Page Charts", "og:title": ["Chart Releaser Action to Automate GitHub Page Charts", "Chart Releaser Action to Automate GitHub Page Charts"], "title": "Helm | Chart Releaser Action to Automate GitHub Page Charts\n", "description": "Describe how to use Chart Releaser Action to automate releasing charts through GitHub pages.", "scrapeId": "4ed521e8-afc8-4734-a586-0e6d435cbf8e", "sourceURL": "https://helm.sh/docs/howto/chart_releaser_action", "url": "https://helm.sh/docs/howto/chart_releaser_action/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Chart Tests\"?\n\nAssistant: A guide for writing tests in Helm charts to validate their functionality and ensure they work as expected when installed.\n\nHere's a detailed explanation:\n\n\n## Introduction\nA chart contains a number of Kubernetes resources and components that work together. As a chart author, you may want to write some tests that validate that your chart works as expected when it is installed. These tests also help the chart consumer understand what your chart is supposed to do.\n\n## Defining a Test\nA test in a helm chart lives under the `templates/` directory and is a job definition that specifies a container with a given command to run. The container should exit successfully (exit 0) for a test to be considered a success. The job definition must contain the helm test hook annotation: `helm.sh/hook: test`.\n\nNote that until Helm v3, the job definition needed to contain one of these helm test hook annotations: `helm.sh/hook: test-success` or `helm.sh/hook: test-failure`. `helm.sh/hook: test-success` is still accepted as a backwards-compatible alternative to `helm.sh/hook: test`.\n\n## Example Tests\n- Validate that your configuration from the values.yaml file was properly injected.\n  - Make sure your username and password work correctly\n  - Make sure an incorrect username and password does not work\n- Assert that your services are up and correctly load balancing\n- etc.\n\n## Running Tests\nYou can run the pre-defined tests in Helm on a release using the command `helm test <RELEASE_NAME>`. For a chart consumer, this is a great way to check that their release of a chart (or application) works as expected.\n\n## Example Test\nThe [helm create](https://helm.sh/docs/helm/helm_create/) command will automatically create a number of folders and files. To try the helm test functionality, first create a demo helm chart.\n\n```console\n$ helm create demo\n```\n\nYou will now be able to see the following structure in your demo helm chart.\n\n```fallback\ndemo/\n  Chart.yaml\n  values.yaml\n  charts/\n  templates/\n  templates/tests/test-connection.yaml\n```\n\nIn `demo/templates/tests/test-connection.yaml` you'll see a test you can try. You can see the helm test pod definition here:\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"{{ include \"demo.fullname\" . }}-test-connection\"\n  labels:\n    {{- include \"demo.labels\" . | nindent 4 }}\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: wget\n      image: busybox\n      command: ['wget']\n      args: ['{{ include \"demo.fullname\" . }}:{{ .Values.service.port }}']\n  restartPolicy: Never\n```\n\n## Steps to Run a Test Suite on a Release\nFirst, install the chart on your cluster to create a release. You may have to wait for all pods to become active; if you test immediately after this install, it is likely to show a transitive failure, and you will want to re-test.\n\n```console\n$ helm install demo demo --namespace default\n$ helm test demo\nNAME: demo\nLAST DEPLOYED: Mon Feb 14 20:03:16 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE:     demo-test-connection\nLast Started:   Mon Feb 14 20:35:19 2022\nLast Completed: Mon Feb 14 20:35:23 2022\nPhase:          Succeeded\n[...]\n```\n\n## Notes\n- You can define as many tests as you would like in a single yaml file or spread across several yaml files in the `templates/` directory.\n- You are welcome to nest your test suite under a `tests/` directory like `<chart-name>/templates/tests/` for more isolation.\n- A test is a [Helm hook](https://helm.sh/docs/charts_hooks/), so annotations like `helm.sh/hook-weight` and `helm.sh/hook-delete-policy` may be used with test resources.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/chart_tests", "title": "Chart Tests", "description": "A guide for writing tests in Helm charts to validate their functionality and ensure they work as expected when installed.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:17:45", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/topics/chart_tests/", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Describes how to run and test your charts.", "twitter:card": "summary", "twitter:description": "Describes how to run and test your charts.", "ogTitle": "Chart Tests", "og:url": "https://helm.sh/docs/topics/chart_tests/", "og:title": ["Chart Tests", "Chart Tests"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Chart Tests\n", "og:description": "Describes how to run and test your charts.", "description": "Describes how to run and test your charts.", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "twitter:title": "Helm | Chart Tests", "scrapeId": "16a7382f-84df-478b-afc0-5fda7bba72fd", "sourceURL": "https://helm.sh/docs/topics/chart_tests", "url": "https://helm.sh/docs/topics/chart_tests/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Chart Tests\"?\n\nAssistant: Here are some code examples:\n\n### Creating a Demo Helm Chart\n```yaml\n$ helm create demo\n```\n\n### Demo Helm Chart Structure\n```yaml\ndemo/\n  Chart.yaml\n  values.yaml\n  charts/\n  templates/\n  templates/tests/test-connection.yaml\n```\n\n### Helm Test Pod Definition\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"{{ include \"demo.fullname\" . }}-test-connection\"\n  labels:\n    {{- include \"demo.labels\" . | nindent 4 }}\n  annotations:\n    \"helm.sh/hook\": test\nspec:\n  containers:\n    - name: wget\n      image: busybox\n      command: ['wget']\n      args: ['{{ include \"demo.fullname\" . }}:{{ .Values.service.port }}']\n  restartPolicy: Never\n```\n\n### Running Tests on a Release\n```yaml\n$ helm install demo demo --namespace default\n$ helm test demo\nNAME: demo\nLAST DEPLOYED: Mon Feb 14 20:03:16 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE:     demo-test-connection\nLast Started:   Mon Feb 14 20:35:19 2022\nLast Completed: Mon Feb 14 20:35:23 2022\nPhase:          Succeeded\n[...]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/chart_tests", "title": "Chart Tests", "description": "A guide for writing tests in Helm charts to validate their functionality and ensure they work as expected when installed.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:17:45", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/topics/chart_tests/", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Describes how to run and test your charts.", "twitter:card": "summary", "twitter:description": "Describes how to run and test your charts.", "ogTitle": "Chart Tests", "og:url": "https://helm.sh/docs/topics/chart_tests/", "og:title": ["Chart Tests", "Chart Tests"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Chart Tests\n", "og:description": "Describes how to run and test your charts.", "description": "Describes how to run and test your charts.", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "twitter:title": "Helm | Chart Tests", "scrapeId": "16a7382f-84df-478b-afc0-5fda7bba72fd", "sourceURL": "https://helm.sh/docs/topics/chart_tests", "url": "https://helm.sh/docs/topics/chart_tests/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Chart Tests\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can define as many tests as you would like in a single yaml file or spread across several yaml files in the templates/ directory.\n• You are welcome to nest your test suite under a tests/ directory like <chart-name>/templates/tests/ for more isolation.\n• A test is a Helm hook, so annotations like helm.sh/hook-weight and helm.sh/hook-delete-policy may be used with test resources.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/chart_tests", "title": "Chart Tests", "description": "A guide for writing tests in Helm charts to validate their functionality and ensure they work as expected when installed.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:17:45", "type": "best_practices", "page_metadata": {"ogUrl": "https://helm.sh/docs/topics/chart_tests/", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Describes how to run and test your charts.", "twitter:card": "summary", "twitter:description": "Describes how to run and test your charts.", "ogTitle": "Chart Tests", "og:url": "https://helm.sh/docs/topics/chart_tests/", "og:title": ["Chart Tests", "Chart Tests"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Chart Tests\n", "og:description": "Describes how to run and test your charts.", "description": "Describes how to run and test your charts.", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "twitter:title": "Helm | Chart Tests", "scrapeId": "16a7382f-84df-478b-afc0-5fda7bba72fd", "sourceURL": "https://helm.sh/docs/topics/chart_tests", "url": "https://helm.sh/docs/topics/chart_tests/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Related Projects and Documentation\"?\n\nAssistant: The Helm community has produced many extra tools, plugins, and documentation about Helm. We love to hear about these projects.\n\nHere's a detailed explanation:\n\n\n## Helm Plugins\n- [helm-adopt](https://github.com/HamzaZo/helm-adopt) \\- A helm v3 plugin to adopt existing k8s resources into a new generated helm chart.\n- [helm-chartsnap](https://github.com/jlandowner/helm-chartsnap) \\- Snapshot testing plugin for Helm charts.\n- [Helm Diff](https://github.com/databus23/helm-diff) \\- Preview `helm upgrade` as a coloured diff\n- [Helm Dt](https://github.com/vmware-labs/distribution-tooling-for-helm) \\- Plugin that helps distributing Helm charts across OCI registries and on Air gap environments\n- [Helm Dashboard](https://github.com/komodorio/helm-dashboard) \\- GUI for Helm, visualize releases and repositories, manifest diffs\n- [helm-gcs](https://github.com/hayorov/helm-gcs) \\- Plugin to manage repositories on Google Cloud Storage\n- [helm-git](https://github.com/aslafy-z/helm-git) \\- Install charts and retrieve values files from your Git repositories\n- [helm-k8comp](https://github.com/cststack/k8comp) \\- Plugin to create Helm Charts from hiera using k8comp\n- [helm-mapkubeapis](https://github.com/helm/helm-mapkubeapis) \\- Update helm release metadata to replace deprecated or removed Kubernetes APIs\n- [helm-migrate-values](https://github.com/OctopusDeployLabs/helm-migrate-values) \\- Plugin to migrate user-specified values across Helm chart versions to handle breaking schema changes in `values.yaml`\n- [helm-monitor](https://github.com/ContainerSolutions/helm-monitor) \\- Plugin to monitor a release and rollback based on Prometheus/ElasticSearch query\n- [helm-release-plugin](https://github.com/JovianX/helm-release-plugin) \\- Plugin for Release management, Update release values, pulls(re-creates) helm Charts from deployed releases, set helm release TTL.\n- [helm-s3](https://github.com/hypnoglow/helm-s3) \\- Helm plugin that allows to use AWS S3 as a [private] chart repository\n- [helm-schema-gen](https://github.com/karuppiah7890/helm-schema-gen) \\- Helm Plugin that generates values yaml schema for your Helm 3 charts\n- [helm-secrets](https://github.com/jkroepke/helm-secrets) \\- Plugin to manage and store secrets safely (based on [sops](https://github.com/mozilla/sops))\n- [helm-sigstore](https://github.com/sigstore/helm-sigstore) - Plugin for Helm to integrate the [sigstore](https://sigstore.dev/) ecosystem. Search, upload and verify signed Helm charts.\n- [helm-tanka](https://github.com/Duologic/helm-tanka) \\- A Helm plugin for rendering Tanka/Jsonnet inside Helm charts.\n- [hc-unit](https://github.com/xchapter7x/hcunit) \\- Plugin for unit testing charts locally using OPA (Open Policy Agent) & Rego\n- [helm-unittest](https://github.com/quintush/helm-unittest) \\- Plugin for unit testing chart locally with YAML\n- [helm-val](https://github.com/HamzaZo/helm-val) \\- A plugin to get values from a previous release.\n- [helm-external-val](https://github.com/kuuji/helm-external-val) \\- A plugin that fetches helm values from external sources (configMaps, Secrets, etc.)\n- [helm-images](https://github.com/nikhilsbhat/helm-images) \\- Helm plugin to fetch all possible images from the chart before deployment or from a deployed release\n- [helm-drift](https://github.com/nikhilsbhat/helm-drift) \\- Helm plugin that identifies the configuration that has drifted from the Helm chart\n- [helm-tui](https://github.com/pidanou/helm-tui) \\- A light UI to manage your Helm assets without leaving the terminal\n\nWe also encourage GitHub authors to use the [helm-plugin](https://github.com/search?q=topic%3Ahelm-plugin&type=Repositories) tag on their plugin repositories.\n\n## Additional Tools\nTools layered on top of Helm.\n\n- [Aptakube](https://aptakube.com/) \\- Desktop UI for Kubernetes and Helm Releases\n- [Armada](https://airshipit.readthedocs.io/projects/armada/en/latest/) \\- Manage prefixed releases throughout various Kubernetes namespaces, and removes completed jobs for complex deployments\n- [avionix](https://github.com/zbrookle/avionix) - Python interface for generating Helm charts and Kubernetes yaml, allowing for inheritance and less duplication of code\n- [Botkube](https://botkube.io/) \\- Run Helm commands directly from Slack, Discord, Microsoft Teams, and Mattermost.\n- [Captain](https://github.com/alauda/captain) \\- A Helm3 Controller using HelmRequest and Release CRD\n- [Chartify](https://github.com/appscode/chartify) \\- Generate Helm charts from existing Kubernetes resources.\n- [ChartMuseum](https://github.com/helm/chartmuseum) \\- Helm Chart Repository with support for Amazon S3 and Google Cloud Storage\n- [chart-registry](https://github.com/hangyan/chart-registry) \\- Helm Charts Hosts on OCI Registry\n- [Codefresh](https://codefresh.io/) \\- Kubernetes native CI/CD and management platform with UI dashboards for managing Helm charts and releases\n- [Cyclops](https://cyclops-ui.com/) \\- Dynamic Kubernetes UI rendering based on Helm charts\n- [Flux](https://fluxcd.io/docs/components/helm/) - Continuous and progressive delivery from Git to Kubernetes.\n- [Helmfile](https://github.com/helmfile/helmfile) \\- Helmfile is a declarative spec for deploying helm charts\n- [Helmper](https://github.com/ChristofferNissen/helmper) \\- Helmper helps you import Helm Charts - including all OCI artifacts(images), to your own OCI registries. Helmper also facilitates security scanning and patching of OCI images. Helmper utilizes Helm, Oras, Trivy, Copacetic and Buildkitd.\n- [Helmsman](https://github.com/Praqma/helmsman) \\- Helmsman is a helm-charts-as-code tool which enables installing/upgrading/protecting/moving/deleting releases from version controlled desired state files (described in a simple TOML format)\n- [HULL](https://github.com/vidispine/hull) \\- This library chart provides a ready-to-use interface for specifying all Kubernetes objects directly in the `values.yaml`. It removes the need to write any templates for your charts and comes with many additional features to simplify Helm chart creation and usage.\n- [K8Studio](https://k8studio.io/) - Desktop UI for Managing Kubernetes Clusters with Integrated Helm Manager.\n- [Konveyor Move2Kube](https://konveyor.io/move2kube/) - Generate Helm charts for your existing projects.\n- [Landscaper](https://github.com/Eneco/landscaper/) - \"Landscaper takes a set of Helm Chart references with values (a desired state), and realizes this in a Kubernetes cluster.\"\n- [Monocular](https://github.com/helm/monocular) \\- Web UI for Helm Chart repositories\n- [Monokle](https://monokle.io/) \\- Desktop tool for creating, debugging and deploying Kubernetes resources and Helm Charts\n- [Orkestra](https://azure.github.io/orkestra/) \\- A cloud-native Release Orchestration and Lifecycle Management (LCM) platform for a related group of Helm releases and their subcharts\n- [Tanka](https://tanka.dev/helm) \\- Grafana Tanka configures Kubernetes resources through Jsonnet with the ability to consume Helm Charts\n- [Terraform Helm Provider](https://github.com/hashicorp/terraform-provider-helm) \\- The Helm provider for HashiCorp Terraform enables lifecycle management of Helm Charts with a declarative infrastructure-as-code syntax. The Helm provider is often paired the other Terraform providers, like the Kubernetes provider, to create a common workflow across all infrastructure services.\n- [VIM-Kubernetes](https://github.com/andrewstuart/vim-kubernetes) \\- VIM plugin for Kubernetes and Helm.\n\n## Helm Included\nPlatforms, distributions, and services that include Helm support.\n\n- [Kubernetic](https://kubernetic.com/) \\- Kubernetes Desktop Client\n- [Jenkins X](https://jenkins-x.io/) \\- open source automated CI/CD for Kubernetes which uses Helm for [promoting](https://jenkins-x.io/docs/getting-started/promotion/) applications through environments via GitOps.\n\n## Misc\nGrab bag of useful things for Chart authors and Helm users.\n\n- [Await](https://github.com/saltside/await) \\- Docker image to \"await\" different conditions--especially useful for init containers.\n[More Info](https://blog.slashdeploy.com/2017/02/16/introducing-await/)\n", "metadata": {"source_url": "https://helm.sh/docs/community/related", "title": "Related Projects and Documentation", "description": "The Helm community has produced many extra tools, plugins, and documentation about Helm. We love to hear about these projects.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:18:21", "type": "overview", "page_metadata": {"title": "Helm | Related Projects and Documentation\n", "description": "third-party tools, plugins and documentation provided by the community!", "og:title": ["Related Projects and Documentation", "Related Projects and Documentation"], "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "third-party tools, plugins and documentation provided by the community!", "ogUrl": "https://helm.sh/docs/community/related/", "og:url": "https://helm.sh/docs/community/related/", "twitter:title": "Helm | Related Projects and Documentation", "twitter:description": "third-party tools, plugins and documentation provided by the community!", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "ogTitle": "Related Projects and Documentation", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "third-party tools, plugins and documentation provided by the community!", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6868e9cb-1b8e-419c-80e7-49ca3a9157e4", "sourceURL": "https://helm.sh/docs/community/related", "url": "https://helm.sh/docs/community/related/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Related Projects and Documentation\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you have anything you'd like to add to this list, please open an issue or pull request.\n• We encourage GitHub authors to use the helm-plugin tag on their plugin repositories.\n", "metadata": {"source_url": "https://helm.sh/docs/community/related", "title": "Related Projects and Documentation", "description": "The Helm community has produced many extra tools, plugins, and documentation about Helm. We love to hear about these projects.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:18:21", "type": "best_practices", "page_metadata": {"title": "Helm | Related Projects and Documentation\n", "description": "third-party tools, plugins and documentation provided by the community!", "og:title": ["Related Projects and Documentation", "Related Projects and Documentation"], "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "third-party tools, plugins and documentation provided by the community!", "ogUrl": "https://helm.sh/docs/community/related/", "og:url": "https://helm.sh/docs/community/related/", "twitter:title": "Helm | Related Projects and Documentation", "twitter:description": "third-party tools, plugins and documentation provided by the community!", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "ogTitle": "Related Projects and Documentation", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "third-party tools, plugins and documentation provided by the community!", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "scrapeId": "6868e9cb-1b8e-419c-80e7-49ca3a9157e4", "sourceURL": "https://helm.sh/docs/community/related", "url": "https://helm.sh/docs/community/related/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Templates\"?\n\nAssistant: This part of the Best Practices Guide focuses on templates.\n\nHere's a detailed explanation:\n\n\n## Structure of `templates/`\nThe `templates/` directory should be structured as follows:\n\n- Template files should have the extension `.yaml` if they produce YAML output.\nThe extension `.tpl` may be used for template files that produce no formatted content.\n- Template file names should use dashed notation ( `my-example-configmap.yaml`), not camelcase.\n- Each resource definition should be in its own template file.\n- Template file names should reflect the resource kind in the name. e.g.\n`foo-pod.yaml`, `bar-svc.yaml`.\n\n## Names of Defined Templates\nDefined templates (templates created inside a `{{ define }} ` directive) are globally accessible. That means that a chart and all of its subcharts will have access to all of the templates created with `{{ define }}`.\n\nFor that reason, _all defined template names should be namespaced._\n\nCorrect:\n\n```yaml\n{{- define \"nginx.fullname\" }}\n{{/* ... */}}\n{{ end -}}\n```\n\nIncorrect:\n\n```yaml\n{{- define \"fullname\" -}}\n{{/* ... */}}\n{{ end -}}\n```\n\nIt is highly recommended that new charts are created via `helm create` command as the template names are automatically defined as per this best practice.\n\n## Formatting Templates\nTemplates should be indented using _two spaces_ (never tabs).\n\nTemplate directives should have whitespace after the opening braces and before the closing braces:\n\nCorrect:\n\n```fallback\n{{ .foo }}\n{{ print \"foo\" }}\n{{- print \"bar\" -}}\n```\n\nIncorrect:\n\n```fallback\n{{.foo}}\n{{print \"foo\"}}\n{{-print \"bar\"-}}\n```\n\nTemplates should chomp whitespace where possible:\n\n```yaml\nfoo:\n  {{- range .Values.items }}\n  {{ . }}\n  {{ end -}}\n```\n\nBlocks (such as control structures) may be indented to indicate flow of the template code.\n\n```fallback\n{{ if $foo -}}\n  {{- with .Bar }}Hello{{ end -}}\n{{- end -}}\n```\n\nHowever, since YAML is a whitespace-oriented language, it is often not possible for code indentation to follow that convention.\n\n## Whitespace in Generated Templates\nIt is preferable to keep the amount of whitespace in generated templates to a minimum. In particular, numerous blank lines should not appear adjacent to each other. But occasional empty lines (particularly between logical sections) is fine.\n\nThis is best:\n\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: example\n  labels:\n    first: first\n    second: second\n```\n\nThis is okay:\n\n```yaml\napiVersion: batch/v1\nkind: Job\n\nmetadata:\n  name: example\n\n  labels:\n    first: first\n    second: second\n```\n\nBut this should be avoided:\n\n```yaml\napiVersion: batch/v1\nkind: Job\n\nmetadata:\n  name: example\n\n  labels:\n    first: first\n\n    second: second\n```\n\n## Comments (YAML Comments vs. Template Comments)\nBoth YAML and Helm Templates have comment markers.\n\nYAML comments:\n\n```yaml\n# This is a comment\ntype: sprocket\n```\n\nTemplate Comments:\n\n```yaml\n{{- /*\nThis is a comment.\n*/}}\ntype: frobnitz\n```\n\nTemplate comments should be used when documenting features of a template, such as explaining a defined template:\n\n```yaml\n{{- /*\nmychart.shortname provides a 6 char truncated version of the release name.\n*/}}\n{{ define \"mychart.shortname\" -}}\n{{ .Release.Name | trunc 6 }}\n{{- end -}}\n```\n\nInside of templates, YAML comments may be used when it is useful for Helm users to (possibly) see the comments during debugging.\n\n```yaml\n# This may cause problems if the value is more than 100Gi\nmemory: {{ .Values.maxMem | quote }}\n```\n\nThe comment above is visible when the user runs `helm install --debug`, while comments specified in `{{- /* */}}` sections are not.\n\nBeware of adding `#` YAML comments on template sections containing Helm values that may be required by certain template functions.\n\nFor example, if `required` function is introduced to the above example, and `maxMem` is unset, then a `#` YAML comment will introduce a rendering error.\n\nCorrect: `helm template` does not render this block\n\n```yaml\n{{- /*\n# This may cause problems if the value is more than 100Gi\nmemory: {{ required \"maxMem must be set\" .Values.maxMem | quote }}\n*/ -}}\n```\n\nIncorrect: `helm template` returns `Error: execution error at (templates/test.yaml:2:13): maxMem must be set`\n\n```yaml\n# This may cause problems if the value is more than 100Gi\n# memory: {{ required .Values.maxMem \"maxMem must be set\" | quote }}\n```\n\n## Use of JSON in Templates and Template Output\nYAML is a superset of JSON. In some cases, using a JSON syntax can be more readable than other YAML representations.\n\nFor example, this YAML is closer to the normal YAML method of expressing lists:\n\n```yaml\narguments:\n  - \"--dirname\"\n  - \"/foo\"\n```\n\nBut it is easier to read when collapsed into a JSON list style:\n\n```yaml\narguments: [\"--dirname\", \"/foo\"]\n```\n\nUsing JSON for increased legibility is good. However, JSON syntax should not be used for representing more complex constructs.\n\nWhen dealing with pure JSON embedded inside of YAML (such as init container configuration), it is of course appropriate to use the JSON format.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/templates", "title": "Templates", "description": "This part of the Best Practices Guide focuses on templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:18:41", "type": "overview", "page_metadata": {"ogTitle": "Templates", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/chart_best_practices/templates/", "description": "A closer look at best practices surrounding templates.", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:url": "https://helm.sh/docs/chart_best_practices/templates/", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "A closer look at best practices surrounding templates.", "twitter:title": "Helm | Templates", "twitter:description": "A closer look at best practices surrounding templates.", "og:title": ["Templates", "Templates"], "title": "Helm | Templates\n", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "A closer look at best practices surrounding templates.", "scrapeId": "221017c2-8960-411f-b1aa-55182d00c793", "sourceURL": "https://helm.sh/docs/chart_best_practices/templates", "url": "https://helm.sh/docs/chart_best_practices/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Templates\"?\n\nAssistant: Here are some code examples:\n\n### Correct Template Definition\n```yaml\n{{- define \"nginx.fullname\" }}\n{{/* ... */}}\n{{ end -}}\n```\n\n### Incorrect Template Definition\n```yaml\n{{- define \"fullname\" -}}\n{{/* ... */}}\n{{ end -}}\n```\n\n### Correct Template Directives\n```yaml\n{{ .foo }}\n{{ print \"foo\" }}\n{{- print \"bar\" -}}\n```\n\n### Incorrect Template Directives\n```yaml\n{{.foo}}\n{{print \"foo\"}}\n{{-print \"bar\"-}}\n```\n\n### Chomp Whitespace Example\n```yaml\nfoo:\n  {{- range .Values.items }}\n  {{ . }}\n  {{ end -}}\n```\n\n### Indentation Example\n```yaml\n{{ if $foo -}}\n  {{- with .Bar }}Hello{{ end -}}\n{{- end -}}\n```\n\n### Best Whitespace Example\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: example\n  labels:\n    first: first\n    second: second\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/templates", "title": "Templates", "description": "This part of the Best Practices Guide focuses on templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:18:41", "type": "code_examples", "page_metadata": {"ogTitle": "Templates", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/chart_best_practices/templates/", "description": "A closer look at best practices surrounding templates.", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:url": "https://helm.sh/docs/chart_best_practices/templates/", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "A closer look at best practices surrounding templates.", "twitter:title": "Helm | Templates", "twitter:description": "A closer look at best practices surrounding templates.", "og:title": ["Templates", "Templates"], "title": "Helm | Templates\n", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "A closer look at best practices surrounding templates.", "scrapeId": "221017c2-8960-411f-b1aa-55182d00c793", "sourceURL": "https://helm.sh/docs/chart_best_practices/templates", "url": "https://helm.sh/docs/chart_best_practices/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Templates\"?\n\nAssistant: Here are the recommended best practices:\n\n• Template files should have the extension `.yaml` if they produce YAML output.\n• Template file names should use dashed notation ( `my-example-configmap.yaml`), not camelcase.\n• Each resource definition should be in its own template file.\n• Template file names should reflect the resource kind in the name.\n• All defined template names should be namespaced.\n• It is highly recommended that new charts are created via `helm create` command as the template names are automatically defined as per this best practice.\n• Templates should be indented using _two spaces_ (never tabs).\n• Template directives should have whitespace after the opening braces and before the closing braces.\n• Templates should chomp whitespace where possible.\n• It is preferable to keep the amount of whitespace in generated templates to a minimum.\n• Template comments should be used when documenting features of a template.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/templates", "title": "Templates", "description": "This part of the Best Practices Guide focuses on templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:18:41", "type": "best_practices", "page_metadata": {"ogTitle": "Templates", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/chart_best_practices/templates/", "description": "A closer look at best practices surrounding templates.", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:url": "https://helm.sh/docs/chart_best_practices/templates/", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "A closer look at best practices surrounding templates.", "twitter:title": "Helm | Templates", "twitter:description": "A closer look at best practices surrounding templates.", "og:title": ["Templates", "Templates"], "title": "Helm | Templates\n", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "A closer look at best practices surrounding templates.", "scrapeId": "221017c2-8960-411f-b1aa-55182d00c793", "sourceURL": "https://helm.sh/docs/chart_best_practices/templates", "url": "https://helm.sh/docs/chart_best_practices/templates/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Topic Guides\"?\n\nAssistant: Here you’ll find introductions to all the key parts of Helm you’ll need or want to know.\n\nHere's a detailed explanation:\n\n\n## Quicklinks\n[**Charts** \\nExplains the chart format, and provides basic guidance for building charts with Helm.](https://helm.sh/docs/topics/charts/) [**Chart Hooks** \\nDescribes how to work with chart hooks.](https://helm.sh/docs/topics/charts_hooks/) [**Chart Tests** \\nDescribes how to run and test your charts.](https://helm.sh/docs/topics/chart_tests/) [**Library Charts** \\nExplains library charts and examples of usage](https://helm.sh/docs/topics/library_charts/) [**Helm Provenance and Integrity** \\nDescribes how to verify the integrity and origin of a Chart.](https://helm.sh/docs/topics/provenance/) [**The Chart Repository Guide** \\nHow to create and work with Helm chart repositories.](https://helm.sh/docs/topics/chart_repository/) [**Use OCI-based registries** \\nDescribes how to use OCI for Chart distribution.](https://helm.sh/docs/topics/registries/) [**Helm Architecture** \\nDescribes the Helm architecture at a high level.](https://helm.sh/docs/topics/architecture/) [**Advanced Helm Techniques** \\nExplains various advanced features for Helm power users](https://helm.sh/docs/topics/advanced/) [**Kubernetes Distribution Guide** \\nCaptures information about using Helm in specific Kubernetes environments.](https://helm.sh/docs/topics/kubernetes_distros/) [**Role-based Access Control** \\nExplains how Helm interacts with Kubernetes' Role-Based Access Control.](https://helm.sh/docs/topics/rbac/) [**The Helm Plugins Guide** \\nIntroduces how to use and create plugins to extend Helm's functionality.](https://helm.sh/docs/topics/plugins/) [**Migrating Helm v2 to v3** \\nLearn how to migrate Helm v2 to v3.](https://helm.sh/docs/topics/v2_v3_migration/) [**Deprecated Kubernetes APIs** \\nExplains deprecated Kubernetes APIs in Helm](https://helm.sh/docs/topics/kubernetes_apis/) [**Helm Version Support Policy** \\nDescribes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.](https://helm.sh/docs/topics/version_skew/) [**Permissions management for SQL storage backend** \\nGet to know how to setup permissions when using SQL storage backend.](https://helm.sh/docs/topics/permissions_sql_storage_backend/) [**Release schedule policy** \\nDescribes Helm's release schedule policy.](https://helm.sh/docs/topics/release_policy/)\n", "metadata": {"source_url": "https://helm.sh/docs/topics", "title": "Topic Guides", "description": "Here you’ll find introductions to all the key parts of Helm you’ll need or want to know.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 21:18:54", "type": "overview", "page_metadata": {"og:title": ["Topics", "Topics"], "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/topics/", "twitter:title": "Helm | Topics", "language": "en", "ogUrl": "https://helm.sh/docs/topics/", "title": "Helm | Docs\n", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogTitle": "Topics", "og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "b9c549dd-59c5-464f-a224-837448bf9bc5", "sourceURL": "https://helm.sh/docs/topics", "url": "https://helm.sh/docs/topics/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Uninstalling\"?\n\nAssistant: Instructions and information on uninstalling Helm and locating its files.\n\nHere's a detailed explanation:\n\n\n## Uninstalling\n### I want to delete my local Helm. Where are all its files?\n\nAlong with the `helm` binary, Helm stores some files in the following locations:\n\n- $XDG_CACHE_HOME\n- $XDG_CONFIG_HOME\n- $XDG_DATA_HOME\n\nThe following table gives the default folder for each of these, by OS:\n\n| Operating System | Cache Path | Configuration Path | Data Path |\n| --- | --- | --- | --- |\n| Linux | `$HOME/.cache/helm` | `$HOME/.config/helm` | `$HOME/.local/share/helm` |\n| macOS | `$HOME/Library/Caches/helm` | `$HOME/Library/Preferences/helm` | `$HOME/Library/helm` |\n| Windows | `%TEMP%\\helm` | `%APPDATA%\\helm` | `%APPDATA%\\helm` |\n", "metadata": {"source_url": "https://helm.sh/docs/faq/uninstalling", "title": "Uninstalling", "description": "Instructions and information on uninstalling Helm and locating its files.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 21:18:59", "type": "overview", "page_metadata": {"og:title": ["Uninstalling", "Uninstalling"], "ogUrl": "https://helm.sh/docs/faq/uninstalling/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Uninstalling", "language": "en", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/faq/uninstalling/", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "title": "Helm | Uninstalling\n", "ogTitle": "Uninstalling", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "160efc12-72c5-4ea8-9315-7a9e6de960fa", "sourceURL": "https://helm.sh/docs/faq/uninstalling", "url": "https://helm.sh/docs/faq/uninstalling/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Using Helm\"?\n\nAssistant: This guide explains the basics of using Helm to manage packages on your Kubernetes cluster. It assumes that you have already installed the Helm client.\n\nHere's a detailed explanation:\n\n\n## Three Big Concepts\nA _Chart_ is a Helm package. It contains all of the resource definitions necessary to run an application, tool, or service inside of a Kubernetes cluster. Think of it like the Kubernetes equivalent of a Homebrew formula, an Apt dpkg, or a Yum RPM file.\n\nA _Repository_ is the place where charts can be collected and shared. It's like Perl's [CPAN archive](https://www.cpan.org/) or the [Fedora Package Database](https://src.fedoraproject.org/), but for Kubernetes packages.\n\nA _Release_ is an instance of a chart running in a Kubernetes cluster. One chart can often be installed many times into the same cluster. And each time it is installed, a new _release_ is created. Consider a MySQL chart. If you want two databases running in your cluster, you can install that chart twice. Each one will have its own _release_, which will in turn have its own _release name_.\n\nWith these concepts in mind, we can now explain Helm like this:\n\nHelm installs _charts_ into Kubernetes, creating a new _release_ for each installation. And to find new charts, you can search Helm chart _repositories_.\n\n## 'helm search': Finding Charts\nHelm comes with a powerful search command. It can be used to search two different types of source:\n\n- `helm search hub` searches [the Artifact Hub](https://artifacthub.io/), which lists helm charts from dozens of different repositories.\n- `helm search repo` searches the repositories that you have added to your local helm client (with `helm repo add`). This search is done over local data, and no public network connection is needed.\n\nYou can find publicly available charts by running `helm search hub`:\n\n```console\n$ helm search hub wordpress\nURL                                                 CHART VERSION APP VERSION DESCRIPTION\nhttps://hub.helm.sh/charts/bitnami/wordpress        7.6.7         5.2.4       Web publishing platform for building blogs and ...\nhttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.6.3        v0.6.3      Presslabs WordPress Operator Helm Chart\nhttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.7.1        v0.7.1      A Helm chart for deploying a WordPress site on ...\n```\n\nThe above searches for all `wordpress` charts on Artifact Hub.\n\nWith no filter, `helm search hub` shows you all of the available charts.\n\n`helm search hub` exposes the URL to the location on [artifacthub.io](https://artifacthub.io/) but not the actual Helm repo. `helm search hub --list-repo-url` exposes the actual Helm repo URL which comes in handy when you are looking to add a new repo: `helm repo add [NAME] [URL]`.\n\nUsing `helm search repo`, you can find the names of the charts in repositories you have already added:\n\n```console\n$ helm repo add brigade https://brigadecore.github.io/charts\n\"brigade\" has been added to your repositories\n$ helm search repo brigade\nNAME                          CHART VERSION APP VERSION DESCRIPTION\nbrigade/brigade               1.3.2         v1.2.1      Brigade provides event-driven scripting of Kube...\nbrigade/brigade-github-app    0.4.1         v0.2.1      The Brigade GitHub App, an advanced gateway for...\nbrigrade/brigade-github-oauth  0.2.0         v0.20.0     The legacy OAuth GitHub Gateway for Brigade\nbrigade/brigade-k8s-gateway   0.1.0                     A Helm chart for Kubernetes\nbrigade/brigade-project       1.0.0         v1.0.0      Create a Brigade project\nbrigade/kashti                0.4.0         v0.4.0      A Helm chart for Kubernetes\n```\n\nHelm search uses a fuzzy string matching algorithm, so you can type parts of words or phrases:\n\n```console\n$ helm search repo kash\nNAME            CHART VERSION APP VERSION DESCRIPTION\nbrigade/kashti  0.4.0         v0.4.0      A Helm chart for Kubernetes\n```\n\nSearch is a good way to find available packages. Once you have found a package you want to install, you can use `helm install` to install it.\n\n## 'helm install': Installing a Package\nTo install a new package, use the `helm install` command. At its simplest, it takes two arguments: A release name that you pick, and the name of the chart you want to install.\n\n```console\n$ helm install happy-panda bitnami/wordpress\nNAME: happy-panda\nLAST DEPLOYED: Tue Jan 26 10:27:17 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n** Please be patient while the chart is being deployed **\n\nYour WordPress site can be accessed through the following DNS name from within your cluster:\n\n    happy-panda-wordpress.default.svc.cluster.local (port 80)\n\nTo access your WordPress site from outside the cluster follow the steps below:\n1. Get the WordPress URL by running these commands:\n  NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n        Watch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'\n   export SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n   echo \"WordPress URL: http://$SERVICE_IP/\"\n   echo \"WordPress Admin URL: http://$SERVICE_IP/admin\"\n2. Open a browser and access WordPress using the obtained URL.\n3. Login with the following credentials below to see your blog:\n  echo Username: user\n  echo Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)\n```\n\nNow the `wordpress` chart is installed. Note that installing a chart creates a new _release_ object. The release above is named `happy-panda`. (If you want Helm to generate a name for you, leave off the release name and use `--generate-name`.)\n\nDuring installation, the `helm` client will print useful information about which resources were created, what the state of the release is, and also whether there are additional configuration steps you can or should take.\n\nHelm installs resources in the following order:\n- Namespace\n- NetworkPolicy\n- ResourceQuota\n- LimitRange\n- PodSecurityPolicy\n- PodDisruptionBudget\n- ServiceAccount\n- Secret\n- SecretList\n- ConfigMap\n- StorageClass\n- PersistentVolume\n- PersistentVolumeClaim\n- CustomResourceDefinition\n- ClusterRole\n- ClusterRoleList\n- ClusterRoleBinding\n- ClusterRoleBindingList\n- Role\n- RoleList\n- RoleBinding\n- RoleBindingList\n- Service\n- DaemonSet\n- Pod\n- ReplicationController\n- ReplicaSet\n- Deployment\n- HorizontalPodAutoscaler\n- StatefulSet\n- Job\n- CronJob\n- Ingress\n- APIService\n\nHelm does not wait until all of the resources are running before it exits. Many charts require Docker images that are over 600MB in size, and may take a long time to install into the cluster.\n\nTo keep track of a release's state, or to re-read configuration information, you can use `helm status`:\n\n```console\n$ helm status happy-panda\nNAME: happy-panda\nLAST DEPLOYED: Tue Jan 26 10:27:17 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n** Please be patient while the chart is being deployed **\n\nYour WordPress site can be accessed through the following DNS name from within your cluster:\n\n    happy-panda-wordpress.default.svc.cluster.local (port 80)\n\nTo access your WordPress site from outside the cluster follow the steps below:\n1. Get the WordPress URL by running these commands:\n  NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n        Watch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'\n   export SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n   echo \"WordPress URL: http://$SERVICE_IP/\"\n   echo \"WordPress Admin URL: http://$SERVICE_IP/admin\"\n2. Open a browser and access WordPress using the obtained URL.\n3. Login with the following credentials below to see your blog:\n  echo Username: user\n  echo Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)\n```\n\nThe above shows the current state of your release.\n\n## Customizing the Chart Before Installing\nInstalling the way we have here will only use the default configuration options for this chart. Many times, you will want to customize the chart to use your preferred configuration.\n\nTo see what options are configurable on a chart, use `helm show values`:\n\n```console\n$ helm show values bitnami/wordpress\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry and imagePullSecrets\n##\n# global:\n#   imageRegistry: myRegistryName\n#   imagePullSecrets:\n#     - myRegistryKeySecretName\n#   storageClass: myStorageClass\n\n## Bitnami WordPress image version\n## ref: https://hub.docker.com/r/bitnami/wordpress/tags/\n##\nimage:\n  registry: docker.io\n  repository: bitnami/wordpress\n  tag: 5.6.0-debian-10-r35\n  [..]\n```\n\nYou can then override any of these settings in a YAML formatted file, and then pass that file during installation.\n\n```console\n$ echo '{mariadb.auth.database: user0db, mariadb.auth.username: user0}' > values.yaml\n$ helm install -f values.yaml bitnami/wordpress --generate-name\n```\n\nThe above will create a default MariaDB user with the name `user0`, and grant this user access to a newly created `user0db` database, but will accept all the rest of the defaults for that chart.\n\nThere are two ways to pass configuration data during install:\n- `--values` (or `-f`): Specify a YAML file with overrides. This can be specified multiple times and the rightmost file will take precedence\n- `--set`: Specify overrides on the command line.\n\nIf both are used, `--set` values are merged into `--values` with higher precedence. Overrides specified with `--set` are persisted in a Secret. Values that have been `--set` can be viewed for a given release with `helm get values <release-name>`. Values that have been `--set` can be cleared by running `helm upgrade` with `--reset-values` specified.\n\n## The Format and Limitations of `--set`\nThe `--set` option takes zero or more name/value pairs. At its simplest, it is used like this: `--set name=value`. The YAML equivalent of that is:\n\n```yaml\nname: value\n```\n\nMultiple values are separated by `,` characters. So `--set a=b,c=d` becomes:\n\n```yaml\na: b\nc: d\n```\n\nMore complex expressions are supported. For example, `--set outer.inner=value` is translated into this:\n\n```yaml\nouter:\n  inner: value\n```\n\nLists can be expressed by enclosing values in `{` and `}`. For example, `--set name={a, b, c}` translates to:\n\n```yaml\nname:\n  - a\n  - b\n  - c\n```\n\nCertain name/key can be set to be `null` or to be an empty array `[]`. For example, `--set name=[],a=null` translates\n\n```yaml\nname:\n  - a\n  - b\n  - c\na: b\n```\n\nto\n\n```yaml\nname: []\na: null\n```\n\nAs of Helm 2.5.0, it is possible to access list items using an array index syntax. For example, `--set servers[0].port=80` becomes:\n\n```yaml\nservers:\n  - port: 80\n```\n\nMultiple values can be set this way. The line `--set servers[0].port=80,servers[0].host=example` becomes:\n\n```yaml\nservers:\n  - port: 80\n    host: example\n```\n\nSometimes you need to use special characters in your `--set` lines. You can use a backslash to escape the characters; `--set name=value1\\,value2` will become:\n\n```yaml\nname: \"value1,value2\"\n```\n\nSimilarly, you can escape dot sequences as well, which may come in handy when charts use the `toYaml` function to parse annotations, labels and node selectors. The syntax for `--set nodeSelector.\"kubernetes\\.io/role\"=master` becomes:\n\n```yaml\nnodeSelector:\n  kubernetes.io/role: master\n```\n\nDeeply nested data structures can be difficult to express using `--set`. Chart designers are encouraged to consider the `--set` usage when designing the format of a `values.yaml` file (read more about [Values Files](https://helm.sh/docs/chart_template_guide/values_files/)).\n\n## More Installation Methods\nThe `helm install` command can install from several sources:\n- A chart repository (as we've seen above)\n- A local chart archive ( `helm install foo foo-0.1.1.tgz`)\n- An unpacked chart directory ( `helm install foo path/to/foo`)\n- A full URL ( `helm install foo https://example.com/charts/foo-1.2.3.tgz`)\n", "metadata": {"source_url": "https://helm.sh/docs/intro/using_helm", "title": "Using Helm", "description": "This guide explains the basics of using Helm to manage packages on your Kubernetes cluster. It assumes that you have already installed the Helm client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:19:50", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/intro/using_helm/", "twitter:description": "Explains the basics of Helm.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Explains the basics of Helm.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Using Helm", "Using Helm"], "description": "Explains the basics of Helm.", "title": "Helm | Using Helm\n", "twitter:title": "Helm | Using Helm", "og:description": "Explains the basics of Helm.", "og:url": "https://helm.sh/docs/intro/using_helm/", "language": "en", "ogTitle": "Using Helm", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "8078417e-3af4-4696-baad-28c16f516794", "sourceURL": "https://helm.sh/docs/intro/using_helm", "url": "https://helm.sh/docs/intro/using_helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Using Helm\"?\n\nAssistant: Here are some code examples:\n\n### Finding Charts on Artifact Hub\n```yaml\n$ helm search hub wordpress\nURL                                                 CHART VERSION APP VERSION DESCRIPTION\nhttps://hub.helm.sh/charts/bitnami/wordpress        7.6.7         5.2.4       Web publishing platform for building blogs and ...\nhttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.6.3        v0.6.3      Presslabs WordPress Operator Helm Chart\nhttps://hub.helm.sh/charts/presslabs/wordpress-...  v0.7.1        v0.7.1      A Helm chart for deploying a WordPress site on ...\n\n```\n\n### Installing a Package\n```yaml\n$ helm install happy-panda bitnami/wordpress\nNAME: happy-panda\nLAST DEPLOYED: Tue Jan 26 10:27:17 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n** Please be patient while the chart is being deployed **\n\nYour WordPress site can be accessed through the following DNS name from within your cluster:\n\n    happy-panda-wordpress.default.svc.cluster.local (port 80)\n\nTo access your WordPress site from outside the cluster follow the steps below:\n1. Get the WordPress URL by running these commands:\n  NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n        Watch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'\n   export SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n   echo \"WordPress URL: http://$SERVICE_IP/\"\n   echo \"WordPress Admin URL: http://$SERVICE_IP/admin\"\n2. Open a browser and access WordPress using the obtained URL.\n3. Login with the following credentials below to see your blog:\n  echo Username: user\n  echo Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)\n\n```\n\n### Customizing the Chart\n```yaml\n$ helm show values bitnami/wordpress\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry and imagePullSecrets\n##\n# global:\n#   imageRegistry: myRegistryName\n#   imagePullSecrets:\n#     - myRegistryKeySecretName\n#   storageClass: myStorageClass\n\n## Bitnami WordPress image version\n## ref: https://hub.docker.com/r/bitnami/wordpress/tags/\n##\nimage:\n  registry: docker.io\n  repository: bitnami/wordpress\n  tag: 5.6.0-debian-10-r35\n  [..]\n```\n\n### Passing Configuration Data\n```yaml\n$ echo '{mariadb.auth.database: user0db, mariadb.auth.username: user0}' > values.yaml\n$ helm install -f values.yaml bitnami/wordpress --generate-name\n\n```\n\n### Checking Release Status\n```yaml\n$ helm status happy-panda\nNAME: happy-panda\nLAST DEPLOYED: Tue Jan 26 10:27:17 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n** Please be patient while the chart is being deployed **\n\nYour WordPress site can be accessed through the following DNS name from within your cluster:\n\n    happy-panda-wordpress.default.svc.cluster.local (port 80)\n\nTo access your WordPress site from outside the cluster follow the steps below:\n1. Get the WordPress URL by running these commands:\n  NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n        Watch the status with: 'kubectl get svc --namespace default -w happy-panda-wordpress'\n   export SERVICE_IP=$(kubectl get svc --namespace default happy-panda-wordpress --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n   echo \"WordPress URL: http://$SERVICE_IP/\"\n   echo \"WordPress Admin URL: http://$SERVICE_IP/admin\"\n2. Open a browser and access WordPress using the obtained URL.\n3. Login with the following credentials below to see your blog:\n  echo Username: user\n  echo Password: $(kubectl get secret --namespace default happy-panda-wordpress -o jsonpath=\"{.data.wordpress-password}\" | base64 --decode)\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/intro/using_helm", "title": "Using Helm", "description": "This guide explains the basics of using Helm to manage packages on your Kubernetes cluster. It assumes that you have already installed the Helm client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:19:50", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/intro/using_helm/", "twitter:description": "Explains the basics of Helm.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Explains the basics of Helm.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Using Helm", "Using Helm"], "description": "Explains the basics of Helm.", "title": "Helm | Using Helm\n", "twitter:title": "Helm | Using Helm", "og:description": "Explains the basics of Helm.", "og:url": "https://helm.sh/docs/intro/using_helm/", "language": "en", "ogTitle": "Using Helm", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "8078417e-3af4-4696-baad-28c16f516794", "sourceURL": "https://helm.sh/docs/intro/using_helm", "url": "https://helm.sh/docs/intro/using_helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Using Helm\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `helm search hub` to find publicly available charts.\n• Customize charts using `--values` or `--set` options during installation.\n• Use `helm status` to check the state of your release after installation.\n• Consider using `--timeout` and `--wait` options for better control during install/upgrade.\n", "metadata": {"source_url": "https://helm.sh/docs/intro/using_helm", "title": "Using Helm", "description": "This guide explains the basics of using Helm to manage packages on your Kubernetes cluster. It assumes that you have already installed the Helm client.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:19:50", "type": "best_practices", "page_metadata": {"ogUrl": "https://helm.sh/docs/intro/using_helm/", "twitter:description": "Explains the basics of Helm.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Explains the basics of Helm.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Using Helm", "Using Helm"], "description": "Explains the basics of Helm.", "title": "Helm | Using Helm\n", "twitter:title": "Helm | Using Helm", "og:description": "Explains the basics of Helm.", "og:url": "https://helm.sh/docs/intro/using_helm/", "language": "en", "ogTitle": "Using Helm", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "8078417e-3af4-4696-baad-28c16f516794", "sourceURL": "https://helm.sh/docs/intro/using_helm", "url": "https://helm.sh/docs/intro/using_helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"The Chart Best Practices Guide\"?\n\nAssistant: This guide covers the Helm Team's considered best practices for creating charts. It focuses on how charts should be structured.\n\nHere's a detailed explanation:\n\n\n## Quicklinks\nGeneral conventions for charts, Values, Templates, Dependencies, Labels and Annotations, Pods and PodTemplates, Custom Resource Definitions, Role-Based Access Control.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices", "title": "The Chart Best Practices Guide", "description": "This guide covers the Helm Team's considered best practices for creating charts. It focuses on how charts should be structured.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:19:53", "type": "overview", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_best_practices/", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Docs\n", "twitter:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Best Practices", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Best Practices", "Best Practices"], "viewport": "width=device-width,initial-scale=1", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/chart_best_practices/", "ogTitle": "Best Practices", "scrapeId": "fbe32705-68e7-4cbe-a426-1cd4b5749ce0", "sourceURL": "https://helm.sh/docs/chart_best_practices", "url": "https://helm.sh/docs/chart_best_practices/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"The Chart Best Practices Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Focus on best practices for charts that may be publicly deployed.\n• Authors of internal-use charts may find that their internal interests override the suggestions.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices", "title": "The Chart Best Practices Guide", "description": "This guide covers the Helm Team's considered best practices for creating charts. It focuses on how charts should be structured.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:19:53", "type": "best_practices", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_best_practices/", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Docs\n", "twitter:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Best Practices", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Best Practices", "Best Practices"], "viewport": "width=device-width,initial-scale=1", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/chart_best_practices/", "ogTitle": "Best Practices", "scrapeId": "fbe32705-68e7-4cbe-a426-1cd4b5749ce0", "sourceURL": "https://helm.sh/docs/chart_best_practices", "url": "https://helm.sh/docs/chart_best_practices/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Cheat Sheet\"?\n\nAssistant: Helm cheatsheet featuring all the necessary commands required to manage an application through Helm.\n\nHere's a detailed explanation:\n\n\n## Basic interpretations/context\nChart:\n\n- It is the name of your chart in case it has been pulled and untarred.\n- It is <repo_name>/<chart_name> in case the repository has been added but chart not pulled.\n- It is the URL/Absolute path to the chart.\n\nName:\n\n- It is the name you want to give to your current helm chart installation.\n\nRelease:\n\n- Is the name you assigned to an installation instance.\n\nRevision:\n\n- Is the value from the Helm history command\n\nRepo-name:\n\n- The name of a repository.\n\nDIR:\n\n- Directory name/path\n", "metadata": {"source_url": "https://helm.sh/docs/intro/cheatsheet", "title": "Helm Cheat Sheet", "description": "Helm cheatsheet featuring all the necessary commands required to manage an application through Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:20:30", "type": "overview", "page_metadata": {"ogDescription": "Helm cheatsheet", "ogUrl": "https://helm.sh/docs/intro/cheatsheet/", "og:url": "https://helm.sh/docs/intro/cheatsheet/", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm cheatsheet", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Cheat Sheet", "Cheat Sheet"], "ogTitle": "Cheat Sheet", "title": "Helm | Cheat Sheet\n", "twitter:card": "summary", "twitter:title": "Helm | Cheat Sheet", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm cheatsheet", "og:description": "Helm cheatsheet", "scrapeId": "cdff5dcd-edbc-45cf-836a-2887fb26e8c5", "sourceURL": "https://helm.sh/docs/intro/cheatsheet", "url": "https://helm.sh/docs/intro/cheatsheet/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Cheat Sheet\"?\n\nAssistant: Here are some code examples:\n\n### Chart Management\n```yaml\nhelm create <name>                      # Creates a chart directory along with the common files and directories used in a chart.\nhelm package <chart-path>               # Packages a chart into a versioned chart archive file.\nhelm lint <chart>                       # Run tests to examine a chart and identify possible issues:\nhelm show all <chart>                   # Inspect a chart and list its contents:\nhelm show values <chart>                # Displays the contents of the values.yaml file\nhelm pull <chart>                       # Download/pull chart\nhelm pull <chart> --untar=true          # If set to true, will untar the chart after downloading it\nhelm pull <chart> --verify              # Verify the package before using it\nhelm pull <chart> --version <number>    # Default-latest is used, specify a version constraint for the chart version to use\nhelm dependency list <chart>            # Display a list of a chart’s dependencies:\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/intro/cheatsheet", "title": "Helm Cheat Sheet", "description": "Helm cheatsheet featuring all the necessary commands required to manage an application through Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:20:30", "type": "code_examples", "page_metadata": {"ogDescription": "Helm cheatsheet", "ogUrl": "https://helm.sh/docs/intro/cheatsheet/", "og:url": "https://helm.sh/docs/intro/cheatsheet/", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm cheatsheet", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Cheat Sheet", "Cheat Sheet"], "ogTitle": "Cheat Sheet", "title": "Helm | Cheat Sheet\n", "twitter:card": "summary", "twitter:title": "Helm | Cheat Sheet", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm cheatsheet", "og:description": "Helm cheatsheet", "scrapeId": "cdff5dcd-edbc-45cf-836a-2887fb26e8c5", "sourceURL": "https://helm.sh/docs/intro/cheatsheet", "url": "https://helm.sh/docs/intro/cheatsheet/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Cheat Sheet\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --dry-run flag to validate chart installations before applying them.\n• Always verify packages before using them with the --verify flag.\n• Keep your repositories updated with helm repo update.\n• Use specific version constraints when upgrading charts to avoid unexpected changes.\n", "metadata": {"source_url": "https://helm.sh/docs/intro/cheatsheet", "title": "Helm Cheat Sheet", "description": "Helm cheatsheet featuring all the necessary commands required to manage an application through Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:20:30", "type": "best_practices", "page_metadata": {"ogDescription": "Helm cheatsheet", "ogUrl": "https://helm.sh/docs/intro/cheatsheet/", "og:url": "https://helm.sh/docs/intro/cheatsheet/", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm cheatsheet", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Cheat Sheet", "Cheat Sheet"], "ogTitle": "Cheat Sheet", "title": "Helm | Cheat Sheet\n", "twitter:card": "summary", "twitter:title": "Helm | Cheat Sheet", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm cheatsheet", "og:description": "Helm cheatsheet", "scrapeId": "cdff5dcd-edbc-45cf-836a-2887fb26e8c5", "sourceURL": "https://helm.sh/docs/intro/cheatsheet", "url": "https://helm.sh/docs/intro/cheatsheet/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Dependencies\"?\n\nAssistant: This section of the guide covers best practices for `dependencies` declared in `Chart.yaml`.\n\nHere's a detailed explanation:\n\n\n## Versions\nWhere possible, use version ranges instead of pinning to an exact version. The suggested default is to use a patch-level version match:\n\n```yaml\nversion: ~1.2.3\n```\n\nThis will match version `1.2.3` and any patches to that release. In other words, `~1.2.3` is equivalent to `>= 1.2.3, < 1.3.0`\n\nFor the complete version matching syntax, please see the [semver\\ documentation](https://github.com/Masterminds/semver#checking-version-constraints).\n\n## Prerelease versions\nThe above versioning constraints will not match on pre-release versions. For example `version: ~1.2.3` will match `version: ~1.2.4` but not `version: ~1.2.3-1`. The following provides a pre-release as well as patch-level matching:\n\n```yaml\nversion: ~1.2.3-0\n```\n\n## Repository URLs\nWhere possible, use `https://` repository URLs, followed by `http://` URLs.\n\nIf the repository has been added to the repository index file, the repository name can be used as an alias of URL. Use `alias:` or `@` followed by repository names.\n\nFile URLs ( `file://...`) are considered a \"special case\" for charts that are assembled by a fixed deployment pipeline.\n\nWhen using [downloader plugins](https://helm.sh/docs/topics/plugins/#downloader-plugins) the URL scheme will be specific to the plugin. Note, a user of the chart will need to have a plugin supporting the scheme installed to update or build the dependency.\n\nHelm cannot perform dependency management operations on the dependency when the `repository` field is left blank. In that case Helm will assume the dependency is in a sub-directory of the `charts` folder with the name being the same as the `name` property for the dependency.\n\n## Conditions and Tags\nConditions or tags should be added to any dependencies that _are optional_.\n\nThe preferred form of a condition is:\n\n```yaml\ncondition: somechart.enabled\n```\n\nWhere `somechart` is the chart name of the dependency.\n\nWhen multiple subcharts (dependencies) together provide an optional or swappable feature, those charts should share the same tags.\n\nFor example, if both `nginx` and `memcached` together provide performance optimizations for the main app in the chart, and are required to both be present when that feature is enabled, then they should both have a tags section like this:\n\n```yaml\ntags:\n  - webaccelerator\n```\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/dependencies", "title": "Dependencies", "description": "This section of the guide covers best practices for `dependencies` declared in `Chart.yaml`.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:20:45", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "ogTitle": "Dependencies", "description": "Covers best practices for Chart dependencies.", "ogDescription": "Covers best practices for Chart dependencies.", "og:description": "Covers best practices for Chart dependencies.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "title": "Helm | Dependencies\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/chart_best_practices/dependencies/", "ogUrl": "https://helm.sh/docs/chart_best_practices/dependencies/", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Dependencies", "Dependencies"], "twitter:title": "Helm | Dependencies", "twitter:description": "Covers best practices for Chart dependencies.", "scrapeId": "58b2c97e-2682-454d-a05c-852436a377f7", "sourceURL": "https://helm.sh/docs/chart_best_practices/dependencies", "url": "https://helm.sh/docs/chart_best_practices/dependencies/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Dependencies\"?\n\nAssistant: Here are some code examples:\n\n### Version Range Example\n```yaml\nversion: ~1.2.3\n```\n\n### Prerelease Version Example\n```yaml\nversion: ~1.2.3-0\n```\n\n### Condition Example\n```yaml\ncondition: somechart.enabled\n```\n\n### Tags Example\n```yaml\ntags:\n  - webaccelerator\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/dependencies", "title": "Dependencies", "description": "This section of the guide covers best practices for `dependencies` declared in `Chart.yaml`.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:20:45", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "ogTitle": "Dependencies", "description": "Covers best practices for Chart dependencies.", "ogDescription": "Covers best practices for Chart dependencies.", "og:description": "Covers best practices for Chart dependencies.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "title": "Helm | Dependencies\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/chart_best_practices/dependencies/", "ogUrl": "https://helm.sh/docs/chart_best_practices/dependencies/", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Dependencies", "Dependencies"], "twitter:title": "Helm | Dependencies", "twitter:description": "Covers best practices for Chart dependencies.", "scrapeId": "58b2c97e-2682-454d-a05c-852436a377f7", "sourceURL": "https://helm.sh/docs/chart_best_practices/dependencies", "url": "https://helm.sh/docs/chart_best_practices/dependencies/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Dependencies\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use version ranges instead of pinning to an exact version.\n• Use `https://` repository URLs, followed by `http://` URLs.\n• Add conditions or tags to any optional dependencies.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/dependencies", "title": "Dependencies", "description": "This section of the guide covers best practices for `dependencies` declared in `Chart.yaml`.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:20:45", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "language": "en", "ogTitle": "Dependencies", "description": "Covers best practices for Chart dependencies.", "ogDescription": "Covers best practices for Chart dependencies.", "og:description": "Covers best practices for Chart dependencies.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "title": "Helm | Dependencies\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/chart_best_practices/dependencies/", "ogUrl": "https://helm.sh/docs/chart_best_practices/dependencies/", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Dependencies", "Dependencies"], "twitter:title": "Helm | Dependencies", "twitter:description": "Covers best practices for Chart dependencies.", "scrapeId": "58b2c97e-2682-454d-a05c-852436a377f7", "sourceURL": "https://helm.sh/docs/chart_best_practices/dependencies", "url": "https://helm.sh/docs/chart_best_practices/dependencies/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Library Charts\"?\n\nAssistant: A library chart is a type of Helm chart that defines chart primitives or definitions which can be shared by Helm templates in other charts.\n\nHere's a detailed explanation:\n\n\n## Create a Simple Library Chart\nAs mentioned previously, a library chart is a type of Helm chart. This means that you can start off by creating a scaffold chart:\n\n```console\n$ helm create mylibchart\nCreating mylibchart\n```\n\nYou will first remove all the files in `templates` directory as we will create our own templates definitions in this example.\n\n```console\n$ rm -rf mylibchart/templates/*\n```\n\nThe values file will not be required either.\n\n```console\n$ rm -f mylibchart/values.yaml\n```\n\nBefore we jump into creating common code, lets do a quick review of some relevant Helm concepts. A named template (sometimes called a partial or a subtemplate) is simply a template defined inside of a file, and given a name. In the `templates/` directory, any file that begins with an underscore(_) is not expected to output a Kubernetes manifest file. So by convention, helper templates and partials are placed in a `_*.tpl` or `_*.yaml` files.\n\nIn this example, we will code a common ConfigMap which creates an empty ConfigMap resource. We will define the common ConfigMap in file `mylibchart/templates/_configmap.yaml` as follows:\n\n```yaml\n{{- define \"mylibchart.configmap.tpl\" -}}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name | printf \"%s-%s\" .Chart.Name }}\ndata: {}\n{{- end -}}\n{{- define \"mylibchart.configmap\" -}}\n{{- include \"mylibchart.util.merge\" (append . \"mylibchart.configmap.tpl\") -}}\n{{- end -}}\n```\n\nThe ConfigMap construct is defined in named template `mylibchart.configmap.tpl`. It is a simple ConfigMap with an empty resource, `data`. Within this file there is another named template called `mylibchart.configmap`. This named template includes another named template `mylibchart.util.merge` which will take 2 named templates as arguments, the template calling `mylibchart.configmap` and `mylibchart.configmap.tpl`.\n\nThe helper function `mylibchart.util.merge` is a named template in `mylibchart/templates/_util.yaml`. It is a handy util from The Common Helm Helper Chart because it merges the 2 templates and overrides any common parts in both:\n\n```yaml\n{{- /*\nmylibchart.util.merge will merge two YAML templates and output the result.\nThis takes an array of three values:\n- the top context\n- the template name of the overrides (destination)\n- the template name of the base (source)\n*/}}\n{{- define \"mylibchart.util.merge\" -}}\n{{- $top := first . -}}\n{{- $overrides := fromYaml (include (index . 1) $top) | default (dict ) -}}\n{{- $tpl := fromYaml (include (index . 2) $top) | default (dict ) -}}\n{{- toYaml (merge $overrides $tpl) -}}\n{{- end -}}\n```\n\nThis is important when a chart wants to use common code that it needs to customize with its configuration.\n\nFinally, lets change the chart type to `library`. This requires editing `mylibchart/Chart.yaml` as follows:\n\n```yaml\napiVersion: v2\nname: mylibchart\ndescription: A Helm chart for Kubernetes\n\ntype: library\n\nversion: 0.1.0\nappVersion: \"1.16.0\"\n```\n\nThe library chart is now ready to be shared and its ConfigMap definition to be re-used.\n\nBefore moving on, it is worth checking if Helm recognizes the chart as a library chart:\n\n```console\n$ helm install mylibchart mylibchart/\nError: library charts are not installable\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/library_charts", "title": "Library Charts", "description": "A library chart is a type of Helm chart that defines chart primitives or definitions which can be shared by Helm templates in other charts.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:21:04", "type": "overview", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "og:url": "https://helm.sh/docs/topics/library_charts/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/topics/library_charts/", "twitter:title": "Helm | Library Charts", "title": "Helm | Library Charts\n", "ogDescription": "Explains library charts and examples of usage", "description": "Explains library charts and examples of usage", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Library Charts", "twitter:description": "Explains library charts and examples of usage", "og:description": "Explains library charts and examples of usage", "og:title": ["Library Charts", "Library Charts"], "scrapeId": "aa9c1f99-8e7a-4e4b-b19f-dd8066bb49b5", "sourceURL": "https://helm.sh/docs/topics/library_charts", "url": "https://helm.sh/docs/topics/library_charts/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Library Charts\"?\n\nAssistant: Here are some code examples:\n\n### Create a Simple Library Chart\n```yaml\n$ helm create mylibchart\nCreating mylibchart\n\n```\n\n### Remove Template Files\n```yaml\n$ rm -rf mylibchart/templates/*\n\n```\n\n### Remove Values File\n```yaml\n$ rm -f mylibchart/values.yaml\n\n```\n\n### Define ConfigMap Template\n```yaml\n{{- define \"mylibchart.configmap.tpl\" -}}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name | printf \"%s-%s\" .Chart.Name }}\ndata: {}\n{{- end -}}\n{{- define \"mylibchart.configmap\" -}}\n{{- include \"mylibchart.util.merge\" (append . \"mylibchart.configmap.tpl\") -}}\n{{- end -}}\n```\n\n### Merge Function Template\n```yaml\n{{- /*\nmylibchart.util.merge will merge two YAML templates and output the result.\nThis takes an array of three values:\n- the top context\n- the template name of the overrides (destination)\n- the template name of the base (source)\n*/}}\n{{- define \"mylibchart.util.merge\" -}}\n{{- $top := first . -}}\n{{- $overrides := fromYaml (include (index . 1) $top) | default (dict ) -}}\n{{- $tpl := fromYaml (include (index . 2) $top) | default (dict ) -}}\n{{- toYaml (merge $overrides $tpl) -}}\n{{- end -}}\n```\n\n### Change Chart Type to Library\n```yaml\napiVersion: v2\nname: mylibchart\ndescription: A Helm chart for Kubernetes\n\ntype: library\n\nversion: 0.1.0\nappVersion: \"1.16.0\"\n\n```\n\n### Install Library Chart\n```yaml\n$ helm install mylibchart mylibchart/\nError: library charts are not installable\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/library_charts", "title": "Library Charts", "description": "A library chart is a type of Helm chart that defines chart primitives or definitions which can be shared by Helm templates in other charts.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:21:04", "type": "code_examples", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "og:url": "https://helm.sh/docs/topics/library_charts/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/topics/library_charts/", "twitter:title": "Helm | Library Charts", "title": "Helm | Library Charts\n", "ogDescription": "Explains library charts and examples of usage", "description": "Explains library charts and examples of usage", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Library Charts", "twitter:description": "Explains library charts and examples of usage", "og:description": "Explains library charts and examples of usage", "og:title": ["Library Charts", "Library Charts"], "scrapeId": "aa9c1f99-8e7a-4e4b-b19f-dd8066bb49b5", "sourceURL": "https://helm.sh/docs/topics/library_charts", "url": "https://helm.sh/docs/topics/library_charts/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Library Charts\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use library charts to share common code across multiple Helm charts.\n• Remove unnecessary files from the templates directory when creating a library chart.\n• Define named templates for reusable code snippets.\n• Use the `include` function to incorporate common templates into your charts.\n• Check if Helm recognizes the chart as a library chart before installation.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/library_charts", "title": "Library Charts", "description": "A library chart is a type of Helm chart that defines chart primitives or definitions which can be shared by Helm templates in other charts.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:21:04", "type": "best_practices", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "og:url": "https://helm.sh/docs/topics/library_charts/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/topics/library_charts/", "twitter:title": "Helm | Library Charts", "title": "Helm | Library Charts\n", "ogDescription": "Explains library charts and examples of usage", "description": "Explains library charts and examples of usage", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Library Charts", "twitter:description": "Explains library charts and examples of usage", "og:description": "Explains library charts and examples of usage", "og:title": ["Library Charts", "Library Charts"], "scrapeId": "aa9c1f99-8e7a-4e4b-b19f-dd8066bb49b5", "sourceURL": "https://helm.sh/docs/topics/library_charts", "url": "https://helm.sh/docs/topics/library_charts/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"The History of the Project\"?\n\nAssistant: An overview of the history and evolution of the Helm project, including its origins, key milestones, and transitions within the Kubernetes ecosystem.\n\nHere's a detailed explanation:\n\n\n## Introduction\nHelm is a graduated CNCF project.\n\n## Origins of Helm\nHelm began as what is now known as Helm Classic, a Deis project begun in 2015 and introduced at the inaugural KubeCon.\n\n## Merging with Kubernetes\nIn January of 2016, the project merged with a GCS tool called Kubernetes Deployment Manager, and the project was moved under Kubernetes. As a result of the merging of codebases, Helm 2.0 was released later that year. The key feature of Deployment Manager that survived in Helm 2 was the server-side component, renamed from DM to Tiller for the final Helm 2.0 release.\n\n## CNCF Graduation\nHelm was promoted from a Kubernetes subproject to a full-fledged CNCF project in June, 2018. Helm formed a top-level governing body and several projects were subsumed under the Helm project, including Monocular, the Helm Chart Repo, Chart Museum, and later the Helm Hub.\n\n## Helm 3 Development\nWhen the Helm 3 development cycle began, Tiller was removed, bringing Helm closer to its original vision of being a client tool. But Helm 3 continues to track releases inside of the Kubernetes cluster, making it possible for teams to work together on a common set of Helm releases. Helm 3 was released in November 2019.\n\n## Recent Developments\nHelm graduated as a CNCF project in April 2020. The CNCF Artifact Hub replaced the Helm Hub in October 2020.\n", "metadata": {"source_url": "https://helm.sh/docs/community/history", "title": "The History of the Project", "description": "An overview of the history and evolution of the Helm project, including its origins, key milestones, and transitions within the Kubernetes ecosystem.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:21:12", "type": "overview", "page_metadata": {"twitter:title": "Helm | The History of the Project", "og:title": ["The History of the Project", "The History of the Project"], "ogDescription": "Provides a high-level overview of the project's history.", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Provides a high-level overview of the project's history.", "title": "Helm | The History of the Project\n", "language": "en", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/community/history/", "ogTitle": "The History of the Project", "twitter:card": "summary", "description": "Provides a high-level overview of the project's history.", "og:url": "https://helm.sh/docs/community/history/", "twitter:description": "Provides a high-level overview of the project's history.", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "e24bf6b9-284e-4002-a1e5-36aa5593ffa4", "sourceURL": "https://helm.sh/docs/community/history", "url": "https://helm.sh/docs/community/history/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"The History of the Project\"?\n\nAssistant: Here are the recommended best practices:\n\n• Helm 3 continues to track releases inside of the Kubernetes cluster, making it possible for teams to work together on a common set of Helm releases.\n", "metadata": {"source_url": "https://helm.sh/docs/community/history", "title": "The History of the Project", "description": "An overview of the history and evolution of the Helm project, including its origins, key milestones, and transitions within the Kubernetes ecosystem.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:21:12", "type": "best_practices", "page_metadata": {"twitter:title": "Helm | The History of the Project", "og:title": ["The History of the Project", "The History of the Project"], "ogDescription": "Provides a high-level overview of the project's history.", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Provides a high-level overview of the project's history.", "title": "Helm | The History of the Project\n", "language": "en", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/community/history/", "ogTitle": "The History of the Project", "twitter:card": "summary", "description": "Provides a high-level overview of the project's history.", "og:url": "https://helm.sh/docs/community/history/", "twitter:description": "Provides a high-level overview of the project's history.", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "e24bf6b9-284e-4002-a1e5-36aa5593ffa4", "sourceURL": "https://helm.sh/docs/community/history", "url": "https://helm.sh/docs/community/history/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Troubleshooting\"?\n\nAssistant: Here are some code examples:\n\n### Fixing stable repository\n```yaml\n$ helm repo add stable https://charts.helm.sh/stable --force-update\n```\n\n### Repairing incubator repository\n```yaml\n$ helm repo add incubator https://charts.helm.sh/incubator --force-update\n```\n\n### Permanently fixing stable repository warning\n```yaml\n$ helm repo add stable https://charts.helm.sh/stable --force-update\n```\n\n### Permanently fixing incubator repository warning\n```yaml\n$ helm repo add incubator https://charts.helm.sh/incubator --force-update\n```\n\n### Enabling Kubernetes client logging\n```yaml\nhelm list -v 6\n```\n\n### Initializing with Helm v2.17.0\n```yaml\nhelm init —upgrade\n```\n\n### Installing specific Helm v2 version\n```yaml\nhelm init --tiller-image ghcr.io/helm/tiller:v2.16.9\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/faq/troubleshooting", "title": "Troubleshooting", "description": "", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:21:55", "type": "code_examples", "page_metadata": {"title": "Helm | Troubleshooting\n", "ogUrl": "https://helm.sh/docs/faq/troubleshooting/", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "ogTitle": "Troubleshooting", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Troubleshooting", "Troubleshooting"], "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Troubleshooting", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "og:url": "https://helm.sh/docs/faq/troubleshooting/", "scrapeId": "24703b80-0fea-4d5f-8cba-6a9a3016cee4", "sourceURL": "https://helm.sh/docs/faq/troubleshooting", "url": "https://helm.sh/docs/faq/troubleshooting/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Troubleshooting\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure your local Kubernetes config file has the correct credentials when using GKE.\n• For Helm 3, remember to specify the namespace when referencing releases.\n• Consider migrating to Helm v3 as Helm v2 is unsupported and has known vulnerabilities.\n", "metadata": {"source_url": "https://helm.sh/docs/faq/troubleshooting", "title": "Troubleshooting", "description": "", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:21:55", "type": "best_practices", "page_metadata": {"title": "Helm | Troubleshooting\n", "ogUrl": "https://helm.sh/docs/faq/troubleshooting/", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "ogTitle": "Troubleshooting", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Troubleshooting", "Troubleshooting"], "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Troubleshooting", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "og:url": "https://helm.sh/docs/faq/troubleshooting/", "scrapeId": "24703b80-0fea-4d5f-8cba-6a9a3016cee4", "sourceURL": "https://helm.sh/docs/faq/troubleshooting", "url": "https://helm.sh/docs/faq/troubleshooting/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Values Files\"?\n\nAssistant: This page covers how to use values files in Helm templates, including how to access and override values, and best practices for structuring values.\n\nHere's a detailed explanation:\n\n\n## Introduction to Values Files\nIn the previous section we looked at the built-in objects that Helm templates offer. One of the built-in objects is `Values`. This object provides access to values passed into the chart. Its contents come from multiple sources:\n\n- The `values.yaml` file in the chart\n- If this is a subchart, the `values.yaml` file of a parent chart\n- A values file is passed into `helm install` or `helm upgrade` with the `-f` flag ( `helm install -f myvals.yaml ./mychart`)\n- Individual parameters are passed with `--set` (such as `helm install --set foo=bar ./mychart`)\n\nThe list above is in order of specificity: `values.yaml` is the default, which can be overridden by a parent chart's `values.yaml`, which can in turn be overridden by a user-supplied values file, which can in turn be overridden by `--set` parameters.\n\n## Editing Values Files\nValues files are plain YAML files. Let's edit `mychart/values.yaml` and then edit our ConfigMap template.\n\nRemoving the defaults in `values.yaml`, we'll set just one parameter:\n\n```yaml\nfavoriteDrink: coffee\n```\n\nNow we can use this inside of a template:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favoriteDrink }}\n```\n\nNotice on the last line we access `favoriteDrink` as an attribute of `Values`:\n`{{ .Values.favoriteDrink }}`.\n\n## Rendering the Template\nLet's see how this renders.\n\n```console\n$ helm install geared-marsupi ./mychart --dry-run --debug\ninstall.go:158: [debug] Original chart version: \"\"\ninstall.go:175: [debug] CHART PATH: /home/bagratte/src/playground/mychart\n\nNAME: geared-marsupi\nLAST DEPLOYED: Wed Feb 19 23:21:13 2020\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\nfavoriteDrink: coffee\n\nHOOKS:\nMANIFEST:\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: geared-marsupi-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: coffee\n```\n\nBecause `favoriteDrink` is set in the default `values.yaml` file to `coffee`, that's the value displayed in the template. We can easily override that by adding a `--set` flag in our call to `helm install`:\n\n## Overriding Values with --set\n```console\n$ helm install solid-vulture ./mychart --dry-run --debug --set favoriteDrink=slurm\ninstall.go:158: [debug] Original chart version: \"\"\ninstall.go:175: [debug] CHART PATH: /home/bagratte/src/playground/mychart\n\nNAME: solid-vulture\nLAST DEPLOYED: Wed Feb 19 23:25:54 2020\nNAMESPACE: default\nSTATUS: pending-install\nREVISION: 1\nTEST SUITE: None\nUSER-SUPPLIED VALUES:\nfavoriteDrink: slurm\n\nCOMPUTED VALUES:\nfavoriteDrink: slurm\n\nHOOKS:\nMANIFEST:\n---\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: solid-vulture-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: slurm\n```\n\nSince `--set` has a higher precedence than the default `values.yaml` file, our template generates `drink: slurm`.\n\n## Structuring Values Files\nValues files can contain more structured content, too. For example, we could create a `favorite` section in our `values.yaml` file, and then add several keys there:\n\n```yaml\nfavorite:\n  drink: coffee\n  food: pizza\n```\n\nNow we would have to modify the template slightly:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink }}\n  food: {{ .Values.favorite.food }}\n```\n\nWhile structuring data this way is possible, the recommendation is that you keep your values trees shallow, favoring flatness.\n\n## Deleting a Default Key\nIf you need to delete a key from the default values, you may override the value of the key to be `null`, in which case Helm will remove the key from the overridden values merge.\n\nFor example, the stable Drupal chart allows configuring the liveness probe, in case you configure a custom image. Here are the default values:\n\n```yaml\nlivenessProbe:\n  httpGet:\n    path: /user/login\n    port: http\n  initialDelaySeconds: 120\n```\n\nIf you try to override the livenessProbe handler to `exec` instead of `httpGet` using `--set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt]`, Helm will coalesce the default and overridden keys together, resulting in the following YAML:\n\n```yaml\nlivenessProbe:\n  httpGet:\n    path: /user/login\n    port: http\n  exec:\n    command:\n    - cat\n    - docroot/CHANGELOG.txt\n  initialDelaySeconds: 120\n```\n\nHowever, Kubernetes would then fail because you can not declare more than one livenessProbe handler. To overcome this, you may instruct Helm to delete the `livenessProbe.httpGet` by setting it to null:\n\n```sh\nhelm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null\n```\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/values_files", "title": "Values Files", "description": "This page covers how to use values files in Helm templates, including how to access and override values, and best practices for structuring values.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:22:18", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Instructions on how to use the --values flag.", "og:title": ["Values Files", "Values Files"], "og:url": "https://helm.sh/docs/chart_template_guide/values_files/", "title": "Helm | Values Files\n", "ogUrl": "https://helm.sh/docs/chart_template_guide/values_files/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Instructions on how to use the --values flag.", "ogDescription": "Instructions on how to use the --values flag.", "language": "en", "twitter:description": "Instructions on how to use the --values flag.", "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Values Files", "twitter:title": "Helm | Values Files", "twitter:card": "summary", "scrapeId": "57f524d9-751a-4a4f-a167-9123ea1d449b", "sourceURL": "https://helm.sh/docs/chart_template_guide/values_files", "url": "https://helm.sh/docs/chart_template_guide/values_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Values Files\"?\n\nAssistant: Here are some code examples:\n\n### Editing values.yaml\n```yaml\nfavoriteDrink: coffee\n```\n\n### ConfigMap Template Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favoriteDrink }}\n```\n\n### Helm Install Command Example\n```yaml\n$ helm install geared-marsupi ./mychart --dry-run --debug\n```\n\n### Overriding with --set Example\n```yaml\n$ helm install solid-vulture ./mychart --dry-run --debug --set favoriteDrink=slurm\n```\n\n### Structured values.yaml Example\n```yaml\nfavorite:\n  drink: coffee\n  food: pizza\n```\n\n### Deleting a Default Key Example\n```yaml\nhelm install stable/drupal --set image=my-registry/drupal:0.1.0 --set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --set livenessProbe.httpGet=null\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/values_files", "title": "Values Files", "description": "This page covers how to use values files in Helm templates, including how to access and override values, and best practices for structuring values.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:22:18", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Instructions on how to use the --values flag.", "og:title": ["Values Files", "Values Files"], "og:url": "https://helm.sh/docs/chart_template_guide/values_files/", "title": "Helm | Values Files\n", "ogUrl": "https://helm.sh/docs/chart_template_guide/values_files/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Instructions on how to use the --values flag.", "ogDescription": "Instructions on how to use the --values flag.", "language": "en", "twitter:description": "Instructions on how to use the --values flag.", "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Values Files", "twitter:title": "Helm | Values Files", "twitter:card": "summary", "scrapeId": "57f524d9-751a-4a4f-a167-9123ea1d449b", "sourceURL": "https://helm.sh/docs/chart_template_guide/values_files", "url": "https://helm.sh/docs/chart_template_guide/values_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Values Files\"?\n\nAssistant: Here are the recommended best practices:\n\n• Keep your values trees shallow, favoring flatness.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/values_files", "title": "Values Files", "description": "This page covers how to use values files in Helm templates, including how to access and override values, and best practices for structuring values.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:22:18", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Instructions on how to use the --values flag.", "og:title": ["Values Files", "Values Files"], "og:url": "https://helm.sh/docs/chart_template_guide/values_files/", "title": "Helm | Values Files\n", "ogUrl": "https://helm.sh/docs/chart_template_guide/values_files/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Instructions on how to use the --values flag.", "ogDescription": "Instructions on how to use the --values flag.", "language": "en", "twitter:description": "Instructions on how to use the --values flag.", "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Values Files", "twitter:title": "Helm | Values Files", "twitter:card": "summary", "scrapeId": "57f524d9-751a-4a4f-a167-9123ea1d449b", "sourceURL": "https://helm.sh/docs/chart_template_guide/values_files", "url": "https://helm.sh/docs/chart_template_guide/values_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"The Chart Template Developer's Guide\"?\n\nAssistant: This guide provides an introduction to Helm's chart templates, with emphasis on the template language.\n\nHere's a detailed explanation:\n\n\n## Introduction\nTemplates generate manifest files, which are YAML-formatted resource descriptions that Kubernetes can understand. We'll look at how templates are structured, how they can be used, how to write Go templates, and how to debug your work.\n\n## Focus Areas\nThis guide focuses on the following concepts:\n\n- The Helm template language\n- Using values\n- Techniques for working with templates\n\n## Quicklinks\nA list of useful links related to Helm chart templates.\n\n## Additional Resources\nLinks to the Helm Project, Blog, Events, Quick Start Guide, Code of Conduct, Charts, Introduction, Chart tips & tricks, Developing Charts, Search 800+ Charts, Development, Contribution Guide, Maintainers, Weekly Meetings, Community, Mailing List, Logos & Art, Twitter.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide", "title": "The Chart Template Developer's Guide", "description": "This guide provides an introduction to Helm's chart templates, with emphasis on the template language.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:22:24", "type": "overview", "page_metadata": {"og:url": "https://helm.sh/docs/chart_template_guide/", "ogUrl": "https://helm.sh/docs/chart_template_guide/", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Chart Template Guide", "language": "en", "twitter:title": "Helm | Chart Template Guide", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Docs\n", "og:title": ["Chart Template Guide", "Chart Template Guide"], "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "36af98db-c328-465d-9b1d-4dc1e367e309", "sourceURL": "https://helm.sh/docs/chart_template_guide", "url": "https://helm.sh/docs/chart_template_guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"The Chart Template Developer's Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• This guide is oriented toward learning the ins and outs of the Helm template language.\n• Other guides provide introductory material, examples, and best practices.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide", "title": "The Chart Template Developer's Guide", "description": "This guide provides an introduction to Helm's chart templates, with emphasis on the template language.", "has_code_examples": false, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:22:24", "type": "best_practices", "page_metadata": {"og:url": "https://helm.sh/docs/chart_template_guide/", "ogUrl": "https://helm.sh/docs/chart_template_guide/", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Chart Template Guide", "language": "en", "twitter:title": "Helm | Chart Template Guide", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Docs\n", "og:title": ["Chart Template Guide", "Chart Template Guide"], "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "scrapeId": "36af98db-c328-465d-9b1d-4dc1e367e309", "sourceURL": "https://helm.sh/docs/chart_template_guide", "url": "https://helm.sh/docs/chart_template_guide/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Provenance and Integrity\"?\n\nAssistant: Helm has provenance tools which help chart users verify the integrity and origin of a package. Using industry-standard tools based on PKI, GnuPG, and well-respected package managers, Helm can generate and verify signature files.\n\nHere's a detailed explanation:\n\n\n## Overview\nIntegrity is established by comparing a chart to a provenance record. Provenance records are stored in _provenance files_, which are stored alongside a packaged chart. For example, if a chart is named `myapp-1.2.3.tgz`, its provenance file will be `myapp-1.2.3.tgz.prov`.\n\nProvenance files are generated at packaging time ( `helm package --sign ...`), and can be checked by multiple commands, notably `helm install --verify`.\n\n## The Workflow\nThis section describes a potential workflow for using provenance data effectively.\n\nPrerequisites:\n\n- A valid PGP keypair in a binary (not ASCII-armored) format\n- The `helm` command line tool\n- GnuPG command line tools (optional)\n- Keybase command line tools (optional)\n\n**NOTE:** If your PGP private key has a passphrase, you will be prompted to enter that passphrase for any commands that support the `--sign` option.\n\nCreating a new chart is the same as before:\n\n```console\n$ helm create mychart\nCreating mychart\n```\n\nOnce ready to package, add the `--sign` flag to `helm package`. Also, specify the name under which the signing key is known and the keyring containing the corresponding private key:\n\n```console\n$ helm package --sign --key 'John Smith' --keyring path/to/keyring.secret mychart\n```\n\n**Note:** The value of the `--key` argument must be a substring of the desired key's `uid` (in the output of `gpg --list-keys`), for example the name or email. **The fingerprint _cannot_ be used.**\n\n**TIP:** for GnuPG users, your secret keyring is in `~/.gnupg/secring.gpg`. You can use `gpg --list-secret-keys` to list the keys you have.\n\n**Warning:** the GnuPG v2 store your secret keyring using a new format `kbx` on the default location `~/.gnupg/pubring.kbx`. Please use the following command to convert your keyring to the legacy gpg format:\n\n```console\n$ gpg --export >~/.gnupg/pubring.gpg\n$ gpg --export-secret-keys >~/.gnupg/secring.gpg\n```\n\nAt this point, you should see both `mychart-0.1.0.tgz` and `mychart-0.1.0.tgz.prov`. Both files should eventually be uploaded to your desired chart repository.\n\nYou can verify a chart using `helm verify`:\n\n```console\n$ helm verify mychart-0.1.0.tgz\n```\n\nA failed verification looks like this:\n\n```console\n$ helm verify topchart-0.1.0.tgz\nError: sha256 sum does not match for topchart-0.1.0.tgz: \"sha256:1939fbf7c1023d2f6b865d137bbb600e0c42061c3235528b1e8c82f4450c12a7\" != \"sha256:5a391a90de56778dd3274e47d789a2c84e0e106e1a37ef8cfa51fd60ac9e623a\"\n```\n\nTo verify during an install, use the `--verify` flag.\n\n```console\n$ helm install --generate-name --verify mychart-0.1.0.tgz\n```\n\nIf the keyring containing the public key associated with the signed chart is not in the default location, you may need to point to the keyring with `--keyring PATH` as in the `helm package` example.\n\nIf verification fails, the install will be aborted before the chart is even rendered.\n\n## Using Keybase.io credentials\nThe [Keybase.io](https://keybase.io/) service makes it easy to establish a chain of trust for a cryptographic identity. Keybase credentials can be used to sign charts.\n\nPrerequisites:\n\n- A configured Keybase.io account\n- GnuPG installed locally\n- The `keybase` CLI installed locally\n\n#### Signing packages\n\nThe first step is to import your keybase keys into your local GnuPG keyring:\n\n```console\n$ keybase pgp export -s | gpg --import\n```\n\nThis will convert your Keybase key into the OpenPGP format, and then import it locally into your `~/.gnupg/secring.gpg` file.\n\nYou can double check by running `gpg --list-secret-keys`.\n\n```console\n$ gpg --list-secret-keys\n/Users/mattbutcher/.gnupg/secring.gpg\n-------------------------------------\nsec   2048R/1FC18762 2016-07-25\nuid                  technosophos (keybase.io/technosophos) <technosophos@keybase.io>\nssb   2048R/D125E546 2016-07-25\n```\n\nNote that your secret key will have an identifier string:\n\n```fallback\ntechnosophos (keybase.io/technosophos) <technosophos@keybase.io>\n```\n\nThat is the full name of your key.\n\nNext, you can package and sign a chart with `helm package`. Make sure you use at least part of that name string in `--key`.\n\n```console\n$ helm package --sign --key technosophos --keyring ~/.gnupg/secring.gpg mychart\n```\n\nAs a result, the `package` command should produce both a `.tgz` file and a `.tgz.prov` file.\n\n#### Verifying packages\n\nYou can also use a similar technique to verify a chart signed by someone else's Keybase key. Say you want to verify a package signed by `keybase.io/technosophos`. To do this, use the `keybase` tool:\n\n```console\n$ keybase follow technosophos\n$ keybase pgp pull\n```\n\nThe first command above tracks the user `technosophos`. Next `keybase pgp pull` downloads the OpenPGP keys of all of the accounts you follow, placing them in your GnuPG keyring ( `~/.gnupg/pubring.gpg`).\n\nAt this point, you can now use `helm verify` or any of the commands with a `--verify` flag:\n\n```console\n$ helm verify somechart-1.2.3.tgz\n```\n\n## Reasons a chart may not verify\nThese are common reasons for failure.\n\n- The `.prov` file is missing or corrupt. This indicates that something is misconfigured or that the original maintainer did not create a provenance file.\n- The key used to sign the file is not in your keyring. This indicate that the entity who signed the chart is not someone you've already signaled that you trust.\n- The verification of the `.prov` file failed. This indicates that something is wrong with either the chart or the provenance data.\n- The file hashes in the provenance file do not match the hash of the archive file. This indicates that the archive has been tampered with.\n\nIf a verification fails, there is reason to distrust the package.\n\n## The Provenance File\nThe provenance file contains a chart’s YAML file plus several pieces of verification information. Provenance files are designed to be automatically generated.\n\nThe following pieces of provenance data are added:\n\n- The chart file ( `Chart.yaml`) is included to give both humans and tools an easy view into the contents of the chart.\n- The signature (SHA256, just like Docker) of the chart package (the `.tgz` file) is included, and may be used to verify the integrity of the chart package.\n- The entire body is signed using the algorithm used by OpenPGP (see [Keybase.io](https://keybase.io/) for an emerging way of making crypto signing and verification easy).\n\nThe combination of this gives users the following assurances:\n\n- The package itself has not been tampered with (checksum package `.tgz`).\n- The entity who released this package is known (via the GnuPG/PGP signature).\n\nThe format of the file looks something like this:\n\n```fallback\nHash: SHA512\n\napiVersion: v2\nappVersion: \"1.16.0\"\ndescription: Sample chart\nname: mychart\ntype: application\nversion: 0.1.0\n\n...\nfiles:\n  mychart-0.1.0.tgz: sha256:d31d2f08b885ec696c37c7f7ef106709aaf5e8575b6d3dc5d52112ed29a9cb92\n-----BEGIN PGP SIGNATURE-----\n\nwsBcBAEBCgAQBQJdy0ReCRCEO7+YH8GHYgAAfhUIADx3pHHLLINv0MFkiEYpX/Kd\nnvHFBNps7hXqSocsg0a9Fi1LRAc3OpVh3knjPfHNGOy8+xOdhbqpdnB+5ty8YopI\nmYMWp6cP/Mwpkt7/gP1ecWFMevicbaFH5AmJCBihBaKJE4R1IX49/wTIaLKiWkv2\ncR64bmZruQPSW83UTNULtdD7kuTZXeAdTMjAK0NECsCz9/eK5AFggP4CDf7r2zNi\nhZsNrzloIlBZlGGns6mUOTO42J/+JojnOLIhI3Psd0HBD2bTlsm/rSfty4yZUs7D\nqtgooNdohoyGSzR5oapd7fEvauRQswJxOA0m0V+u9/eyLR0+JcYB8Udi1prnWf8=\n=aHfz\n-----END PGP SIGNATURE-----\n```\n\nNote that the YAML section contains two documents (separated by `...\\n`). The first file is the content of `Chart.yaml`. The second is the checksums, a map of filenames to SHA-256 digests of that file's content at packaging time.\n\nThe signature block is a standard PGP signature, which provides [tamper\\resistance](https://www.rossde.com/PGP/pgp_signatures.html).\n\n## Chart Repositories\nChart repositories serve as a centralized collection of Helm charts.\n\nChart repositories must make it possible to serve provenance files over HTTP via a specific request, and must make them available at the same URI path as the chart.\n\nFor example, if the base URL for a package is `https://example.com/charts/mychart-1.2.3.tgz`, the provenance file, if it exists, MUST be accessible at `https://example.com/charts/mychart-1.2.3.tgz.prov`.\n\nFrom the end user's perspective, `helm install --verify myrepo/mychart-1.2.3` should result in the download of both the chart and the provenance file with no additional user configuration or action.\n\n## Signatures in OCI-based registries\nWhen publishing charts to an [OCI-based registry](https://helm.sh/docs/topics/registries/), the [`helm-sigstore` plugin](https://github.com/sigstore/helm-sigstore/) can be used to publish provenance to [sigstore](https://sigstore.dev/).\n[As described in the\\documentation](https://github.com/sigstore/helm-sigstore/blob/main/USAGE.md), the process of creating provenance and signing with a GPG key are common, but the `helm sigstore upload` command can be used to publish the provenance to an immutable transparency log.\n\n## Establishing Authority and Authenticity\nWhen dealing with chain-of-trust systems, it is important to be able to establish the authority of a signer. Or, to put this plainly, the system above hinges on the fact that you trust the person who signed the chart. That, in turn, means you need to trust the public key of the signer.\n\nOne of the design decisions with Helm has been that the Helm project would not insert itself into the chain of trust as a necessary party. We don't want to be \"the certificate authority\" for all chart signers. Instead, we strongly favor a decentralized model, which is part of the reason we chose OpenPGP as our foundational technology. So when it comes to establishing authority, we have left this step more-or-less undefined in Helm 2 (a decision carried forward in Helm 3).\n\nHowever, we have some pointers and recommendations for those interested in using the provenance system:\n\n- The [Keybase](https://keybase.io/) platform provides a public centralized repository for trust information.  - You can use Keybase to store your keys or to get the public keys of others.\n  - Keybase also has fabulous documentation available\n  - While we haven't tested it, Keybase's \"secure website\" feature could be used to serve Helm charts.\n  - The basic idea is that an official \"chart reviewer\" signs charts with her or his key, and the resulting provenance file is then uploaded to the chart repository.\n  - There has been some work on the idea that a list of valid signing keys may be included in the `index.yaml` file of a repository.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/provenance", "title": "Helm Provenance and Integrity", "description": "Helm has provenance tools which help chart users verify the integrity and origin of a package. Using industry-standard tools based on PKI, GnuPG, and well-respected package managers, Helm can generate and verify signature files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:23:07", "type": "overview", "page_metadata": {"twitter:description": "Describes how to verify the integrity and origin of a Chart.", "og:url": "https://helm.sh/docs/topics/provenance/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Provenance and Integrity", "Helm Provenance and Integrity"], "twitter:card": "summary", "title": "Helm | Helm Provenance and Integrity\n", "og:description": "Describes how to verify the integrity and origin of a Chart.", "ogDescription": "Describes how to verify the integrity and origin of a Chart.", "ogTitle": "Helm Provenance and Integrity", "ogUrl": "https://helm.sh/docs/topics/provenance/", "language": "en", "twitter:title": "Helm | Helm Provenance and Integrity", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Describes how to verify the integrity and origin of a Chart.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "170bfcdb-862c-44dd-8ce2-e8b07e496a1c", "sourceURL": "https://helm.sh/docs/topics/provenance", "url": "https://helm.sh/docs/topics/provenance/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Provenance and Integrity\"?\n\nAssistant: Here are some code examples:\n\n### Creating a new chart\n```yaml\n$ helm create mychart\nCreating mychart\n\n```\n\n### Packaging a chart with signing\n```yaml\n$ helm package --sign --key 'John Smith' --keyring path/to/keyring.secret mychart\n\n```\n\n### Verifying a chart\n```yaml\n$ helm verify mychart-0.1.0.tgz\n\n```\n\n### Failed verification example\n```yaml\n$ helm verify topchart-0.1.0.tgz\nError: sha256 sum does not match for topchart-0.1.0.tgz: \"sha256:1939fbf7c1023d2f6b865d137bbb600e0c42061c3235528b1e8c82f4450c12a7\" != \"sha256:5a391a90de56778dd3274e47d789a2c84e0e106e1a37ef8cfa51fd60ac9e623a\"\n```\n\n### Verifying during install\n```yaml\n$ helm install --generate-name --verify mychart-0.1.0.tgz\n\n```\n\n### Importing Keybase keys into GnuPG\n```yaml\n$ keybase pgp export -s | gpg --import\n\n```\n\n### Listing secret keys\n```yaml\n$ gpg --list-secret-keys\n/Users/mattbutcher/.gnupg/secring.gpg\n-------------------------------------\nsec   2048R/1FC18762 2016-07-25\nuid                  technosophos (keybase.io/technosophos) <technosophos@keybase.io>\nssb   2048R/D125E546 2016-07-25\n\n```\n\n### Packaging and signing a chart with Keybase\n```yaml\n$ helm package --sign --key technosophos --keyring ~/.gnupg/secring.gpg mychart\n\n```\n\n### Verifying a chart signed by someone else's Keybase key\n```yaml\n$ helm verify somechart-1.2.3.tgz\n\n```\n\n### Converting keyring format\n```yaml\n$ gpg --export >~/.gnupg/pubring.gpg\n$ gpg --export-secret-keys >~/.gnupg/secring.gpg\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/provenance", "title": "Helm Provenance and Integrity", "description": "Helm has provenance tools which help chart users verify the integrity and origin of a package. Using industry-standard tools based on PKI, GnuPG, and well-respected package managers, Helm can generate and verify signature files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:23:07", "type": "code_examples", "page_metadata": {"twitter:description": "Describes how to verify the integrity and origin of a Chart.", "og:url": "https://helm.sh/docs/topics/provenance/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Provenance and Integrity", "Helm Provenance and Integrity"], "twitter:card": "summary", "title": "Helm | Helm Provenance and Integrity\n", "og:description": "Describes how to verify the integrity and origin of a Chart.", "ogDescription": "Describes how to verify the integrity and origin of a Chart.", "ogTitle": "Helm Provenance and Integrity", "ogUrl": "https://helm.sh/docs/topics/provenance/", "language": "en", "twitter:title": "Helm | Helm Provenance and Integrity", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Describes how to verify the integrity and origin of a Chart.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "170bfcdb-862c-44dd-8ce2-e8b07e496a1c", "sourceURL": "https://helm.sh/docs/topics/provenance", "url": "https://helm.sh/docs/topics/provenance/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Provenance and Integrity\"?\n\nAssistant: Here are the recommended best practices:\n\n• The value of the `--key` argument must be a substring of the desired key's `uid` (in the output of `gpg --list-keys`), for example the name or email. The fingerprint cannot be used.\n• For GnuPG users, your secret keyring is in `~/.gnupg/secring.gpg`. You can use `gpg --list-secret-keys` to list the keys you have.\n• If your PGP private key has a passphrase, you will be prompted to enter that passphrase for any commands that support the `--sign` option.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/provenance", "title": "Helm Provenance and Integrity", "description": "Helm has provenance tools which help chart users verify the integrity and origin of a package. Using industry-standard tools based on PKI, GnuPG, and well-respected package managers, Helm can generate and verify signature files.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:23:07", "type": "best_practices", "page_metadata": {"twitter:description": "Describes how to verify the integrity and origin of a Chart.", "og:url": "https://helm.sh/docs/topics/provenance/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Provenance and Integrity", "Helm Provenance and Integrity"], "twitter:card": "summary", "title": "Helm | Helm Provenance and Integrity\n", "og:description": "Describes how to verify the integrity and origin of a Chart.", "ogDescription": "Describes how to verify the integrity and origin of a Chart.", "ogTitle": "Helm Provenance and Integrity", "ogUrl": "https://helm.sh/docs/topics/provenance/", "language": "en", "twitter:title": "Helm | Helm Provenance and Integrity", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Describes how to verify the integrity and origin of a Chart.", "viewport": "width=device-width,initial-scale=1", "scrapeId": "170bfcdb-862c-44dd-8ce2-e8b07e496a1c", "sourceURL": "https://helm.sh/docs/topics/provenance", "url": "https://helm.sh/docs/topics/provenance/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Labels and Annotations\"?\n\nAssistant: This part of the Best Practices Guide discusses the best practices for using labels and annotations in your chart.\n\nHere's a detailed explanation:\n\n\n## Is it a Label or an Annotation?\nAn item of metadata should be a label under the following conditions:\n\n- It is used by Kubernetes to identify this resource\n- It is useful to expose to operators for the purpose of querying the system.\n\nFor example, we suggest using `helm.sh/chart: NAME-VERSION` as a label so that operators can conveniently find all of the instances of a particular chart to use.\n\nIf an item of metadata is not used for querying, it should be set as an annotation instead.\n\nHelm hooks are always annotations.\n\n## Standard Labels\nThe following table defines common labels that Helm charts use. Helm itself never requires that a particular label be present. Labels that are marked REC are recommended, and _should_ be placed onto a chart for global consistency. Those marked OPT are optional. These are idiomatic or commonly in use, but are not relied upon frequently for operational purposes.\n\n| Name | Status | Description |\n| --- | --- | --- |\n| `app.kubernetes.io/name` | REC | This should be the app name, reflecting the entire app. Usually `{{ template \"name\" . }}` is used for this. This is used by many Kubernetes manifests, and is not Helm-specific. |\n| `helm.sh/chart` | REC | This should be the chart name and version: `{{ .Chart.Name }}-{{ .Chart.Version | replace \"+\" \"_\" }}`. |\n| `app.kubernetes.io/managed-by` | REC | This should always be set to `{{ .Release.Service }}`. It is for finding all things managed by Helm. |\n| `app.kubernetes.io/instance` | REC | This should be the `{{ .Release.Name }}`. It aids in differentiating between different instances of the same application. |\n| `app.kubernetes.io/version` | OPT | The version of the app and can be set to `{{ .Chart.AppVersion }}`. |\n| `app.kubernetes.io/component` | OPT | This is a common label for marking the different roles that pieces may play in an application. For example, `app.kubernetes.io/component: frontend`. |\n| `app.kubernetes.io/part-of` | OPT | When multiple charts or pieces of software are used together to make one application. For example, application software and a database to produce a website. This can be set to the top level application being supported.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/labels", "title": "Labels and Annotations", "description": "This part of the Best Practices Guide discusses the best practices for using labels and annotations in your chart.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:23:16", "type": "overview", "page_metadata": {"language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "ogTitle": "Labels and Annotations", "og:url": "https://helm.sh/docs/chart_best_practices/labels/", "ogUrl": "https://helm.sh/docs/chart_best_practices/labels/", "ogDescription": "Covers best practices for using labels and annotations in your Chart.", "og:description": "Covers best practices for using labels and annotations in your Chart.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Labels and Annotations", "Labels and Annotations"], "twitter:title": "Helm | Labels and Annotations", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Labels and Annotations\n", "viewport": "width=device-width,initial-scale=1", "description": "Covers best practices for using labels and annotations in your Chart.", "twitter:description": "Covers best practices for using labels and annotations in your Chart.", "scrapeId": "967eb8b0-32e7-410d-be1c-767aad4bc1fe", "sourceURL": "https://helm.sh/docs/chart_best_practices/labels", "url": "https://helm.sh/docs/chart_best_practices/labels/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Labels and Annotations\"?\n\nAssistant: Here are some code examples:\n\n### Label Example\n```yaml\nhelm.sh/chart: NAME-VERSION\n```\n\n### Standard Label Examples\n```yaml\napp.kubernetes.io/name: {{ template \"name\" . }}\nhelm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace \"+\" \"_\" }}\napp.kubernetes.io/managed-by: {{ .Release.Service }}\napp.kubernetes.io/instance: {{ .Release.Name }}\napp.kubernetes.io/version: {{ .Chart.AppVersion }}\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/labels", "title": "Labels and Annotations", "description": "This part of the Best Practices Guide discusses the best practices for using labels and annotations in your chart.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:23:16", "type": "code_examples", "page_metadata": {"language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "ogTitle": "Labels and Annotations", "og:url": "https://helm.sh/docs/chart_best_practices/labels/", "ogUrl": "https://helm.sh/docs/chart_best_practices/labels/", "ogDescription": "Covers best practices for using labels and annotations in your Chart.", "og:description": "Covers best practices for using labels and annotations in your Chart.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Labels and Annotations", "Labels and Annotations"], "twitter:title": "Helm | Labels and Annotations", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Labels and Annotations\n", "viewport": "width=device-width,initial-scale=1", "description": "Covers best practices for using labels and annotations in your Chart.", "twitter:description": "Covers best practices for using labels and annotations in your Chart.", "scrapeId": "967eb8b0-32e7-410d-be1c-767aad4bc1fe", "sourceURL": "https://helm.sh/docs/chart_best_practices/labels", "url": "https://helm.sh/docs/chart_best_practices/labels/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Labels and Annotations\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use labels for metadata that is used by Kubernetes to identify resources and is useful for querying.\n• Use annotations for metadata that is not used for querying.\n• Helm hooks should always be set as annotations.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/labels", "title": "Labels and Annotations", "description": "This part of the Best Practices Guide discusses the best practices for using labels and annotations in your chart.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:23:16", "type": "best_practices", "page_metadata": {"language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "ogTitle": "Labels and Annotations", "og:url": "https://helm.sh/docs/chart_best_practices/labels/", "ogUrl": "https://helm.sh/docs/chart_best_practices/labels/", "ogDescription": "Covers best practices for using labels and annotations in your Chart.", "og:description": "Covers best practices for using labels and annotations in your Chart.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Labels and Annotations", "Labels and Annotations"], "twitter:title": "Helm | Labels and Annotations", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Labels and Annotations\n", "viewport": "width=device-width,initial-scale=1", "description": "Covers best practices for using labels and annotations in your Chart.", "twitter:description": "Covers best practices for using labels and annotations in your Chart.", "scrapeId": "967eb8b0-32e7-410d-be1c-767aad4bc1fe", "sourceURL": "https://helm.sh/docs/chart_best_practices/labels", "url": "https://helm.sh/docs/chart_best_practices/labels/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Localizing Helm Documentation\"?\n\nAssistant: This guide explains how to localize the Helm documentation.\n\nHere's a detailed explanation:\n\n\n## Getting Started\nContributions for translations use the same process as contributions for documentation. Translations are supplied through pull requests to the helm-www git repository and pull requests are reviewed by the team that manages the website.\n\n## Two-letter Language Code\nDocumentation is organized by the ISO 639-1 standard for the language codes. For example, the two-letter code for Korean is `ko`.\n\nIn content and configuration you will find the language code in use. Here are 3 examples:\n\n- In the `content` directory the language codes are the subdirectories and the localized content for the language is in each directory. Primarily in the `docs` subdirectory of each language code directory.\n- The `i18n` directory contains a configuration file for each language with phrases used on the website. The files are named with the pattern `[LANG].toml` where `[LANG]` is the two letter language code.\n- In the top level `config.toml` file there is configuration for navigation and other details organized by language code.\n\nEnglish, with a language code of `en`, is the default language and source for translations.\n\n## Fork, Branch, Change, Pull Request\nTo contribute translations start by creating a fork of the helm-www repository on GitHub. You will start by committing the changes to your fork.\n\nBy default your fork will be set to work on the default branch known as `main`. Please use branches to develop your changes and create pull requests. If you are unfamiliar with branches you can read about them in the GitHub documentation.\n\nOnce you have a branch make changes to add translations and localize the content to a language.\n\nNote, Helm uses a Developers Certificate of Origin. All commits need to have signoff. When making a commit you can use the `-s` or `--signoff` flag to use your Git configured name and email address to signoff on the commit. More details are available in the CONTRIBUTING.md file.\n\nWhen you are ready, create a pull request with the translation back to the helm-www repository.\n\nOnce a pull request has been created one of the maintainers will review it. Details on that process are in the CONTRIBUTING.md file.\n\n## Translating Content\nLocalizing all of the Helm content is a large task. It is ok to start small. The translations can be expanded over time.\n\n## Starting A New Language\nWhen starting a new language there is a minimum needed. This includes:\n\n- Adding a `content/[LANG]/docs` directory containing an `_index.md` file. This is the top level documentation landing page.\n- Creating a `[LANG].toml` file in the `i18n` directory. Initially you can copy the `en.toml` file as a starting point.\n- Adding a section for the language to the `config.toml` file to expose the new language. An existing language section can serve as a starting point.\n\n## Translating\nTranslated content needs to reside in the `content/[LANG]/docs` directory. It should have the same URL as the English source. For example, to translate the intro into Korean it can be useful to copy the english source like:\n\n```sh\nmkdir -p content/ko/docs/intro\ncp content/en/docs/intro/install.md content/ko/docs/intro/install.md\n```\n\nThe content in the new file can then be translated into the other language.\n\nDo not add an untranslated copy of an English file to `content/[LANG]/`. Once a language exists on the site, any untranslated pages will redirect to English automatically. Translation takes time, and you always want to be translating the most current version of the docs, not an outdated fork.\n\nMake sure you remove any `aliases` lines from the header section. A line like `aliases: [\"/docs/using_helm/\"]` does not belong in the translations. Those are redirections for old links which don't exist for new pages.\n\nNote, translation tools can help with the process. This includes machine generated translations. Machine generated translations should be edited or otherwise reviewing for grammar and meaning by a native language speaker before publishing.\n\n## Navigating Between Languages\nThe site global config.toml file is where language navigation is configured.\n\nTo add a new language, add a new set of parameters using the two-letter language code defined above. Example:\n\n```fallback\n# Korean\n[languages.ko]\ntitle = \"Helm\"\ndescription = \"Helm - The Kubernetes Package Manager.\"\ncontentDir = \"content/ko\"\nlanguageName = \"한국어 Korean\"\nweight = 1\n```\n\n## Resolving Internal Links\nTranslated content will sometimes include links to pages that only exist in another language. This will result in site build errors. Example:\n\n```fallback\n12:45:31 PM: htmltest started at 12:45:30 on app\n12:45:31 PM: ========================================================================\n12:45:31 PM: ko/docs/chart_template_guide/accessing_files/index.html\n  hash does not exist --- ko/docs/chart_template_guide/accessing_files/index.html --> #basic-example\n12:45:31 PM: ✘✘✘ failed in 197.566561ms\n12:45:31 PM: 1 error in 212 documents\n```\n\nTo resolve this, you need to check your content for internal links.\n\n- anchor links need to reflect the translated `id` value\n- internal page links need to be fixed\n\nFor internal pages that do not exist _(or have not been translated yet)_, the site will not build until a correction is made. As a fallback, the url can point to another language where that content does exist as follows:\n\n`< relref path=\"/docs/topics/library_charts.md\" lang=\"en\" >`\n\nSee the Hugo Docs on cross references between languages for more info.\n", "metadata": {"source_url": "https://helm.sh/docs/community/localization", "title": "Localizing Helm Documentation", "description": "This guide explains how to localize the Helm documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:23:35", "type": "overview", "page_metadata": {"language": "en", "description": "Instructions for localizing the Helm documentation.", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Localizing Helm Documentation", "Localizing Helm Documentation"], "ogTitle": "Localizing Helm Documentation", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Instructions for localizing the Helm documentation.", "ogUrl": "https://helm.sh/docs/community/localization/", "twitter:card": "summary", "twitter:title": "Helm | Localizing Helm Documentation", "ogDescription": "Instructions for localizing the Helm documentation.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Localizing Helm Documentation\n", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/community/localization/", "og:description": "Instructions for localizing the Helm documentation.", "scrapeId": "6ac217d8-445f-4119-a1d0-6665297f0f6b", "sourceURL": "https://helm.sh/docs/community/localization", "url": "https://helm.sh/docs/community/localization/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Localizing Helm Documentation\"?\n\nAssistant: Here are some code examples:\n\n### Copying English Source for Translation\n```yaml\nmkdir -p content/ko/docs/intro\ncp content/en/docs/intro/install.md content/ko/docs/intro/install.md\n```\n\n### Adding a New Language to config.toml\n```yaml\n# Korean\n[languages.ko]\ntitle = \"Helm\"\ndescription = \"Helm - The Kubernetes Package Manager.\"\ncontentDir = \"content/ko\"\nlanguageName = \"한국어 Korean\"\nweight = 1\n```\n\n### Build Error Example\n```yaml\n12:45:31 PM: htmltest started at 12:45:30 on app\n12:45:31 PM: ========================================================================\n12:45:31 PM: ko/docs/chart_template_guide/accessing_files/index.html\n  hash does not exist --- ko/docs/chart_template_guide/accessing_files/index.html --> #basic-example\n12:45:31 PM: ✘✘✘ failed in 197.566561ms\n12:45:31 PM: 1 error in 212 documents\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/community/localization", "title": "Localizing Helm Documentation", "description": "This guide explains how to localize the Helm documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:23:35", "type": "code_examples", "page_metadata": {"language": "en", "description": "Instructions for localizing the Helm documentation.", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Localizing Helm Documentation", "Localizing Helm Documentation"], "ogTitle": "Localizing Helm Documentation", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Instructions for localizing the Helm documentation.", "ogUrl": "https://helm.sh/docs/community/localization/", "twitter:card": "summary", "twitter:title": "Helm | Localizing Helm Documentation", "ogDescription": "Instructions for localizing the Helm documentation.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Localizing Helm Documentation\n", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/community/localization/", "og:description": "Instructions for localizing the Helm documentation.", "scrapeId": "6ac217d8-445f-4119-a1d0-6665297f0f6b", "sourceURL": "https://helm.sh/docs/community/localization", "url": "https://helm.sh/docs/community/localization/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Localizing Helm Documentation\"?\n\nAssistant: Here are the recommended best practices:\n\n• Start small when localizing content; translations can be expanded over time.\n• Ensure translated content resides in the correct directory and has the same URL as the English source.\n• Remove any 'aliases' lines from the header section of translated files.\n• Use translation tools, but ensure machine-generated translations are reviewed by a native speaker before publishing.\n", "metadata": {"source_url": "https://helm.sh/docs/community/localization", "title": "Localizing Helm Documentation", "description": "This guide explains how to localize the Helm documentation.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:23:35", "type": "best_practices", "page_metadata": {"language": "en", "description": "Instructions for localizing the Helm documentation.", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Localizing Helm Documentation", "Localizing Helm Documentation"], "ogTitle": "Localizing Helm Documentation", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Instructions for localizing the Helm documentation.", "ogUrl": "https://helm.sh/docs/community/localization/", "twitter:card": "summary", "twitter:title": "Helm | Localizing Helm Documentation", "ogDescription": "Instructions for localizing the Helm documentation.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Localizing Helm Documentation\n", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/community/localization/", "og:description": "Instructions for localizing the Helm documentation.", "scrapeId": "6ac217d8-445f-4119-a1d0-6665297f0f6b", "sourceURL": "https://helm.sh/docs/community/localization", "url": "https://helm.sh/docs/community/localization/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Template Functions and Pipelines\"?\n\nAssistant: This page covers how to use template functions and pipelines in Helm to transform data and create dynamic configurations.\n\nHere's a detailed explanation:\n\n\n## Best Practices\nWhen injecting strings from the `.Values` object into the template, we ought to quote these strings. We can do that by calling the `quote` function in the template directive.\n\n## Template Functions\nTemplate functions follow the syntax `functionName arg1 arg2...`. Helm has over 60 available functions, some defined by the Go template language and others part of the Sprig template library.\n\n## Pipelines\nPipelines are a tool for chaining together a series of template commands to compactly express a series of transformations. For example, instead of calling `quote ARGUMENT`, we can use a pipeline: `.Values.favorite.drink | quote`.\n\n## Using the `default` function\nThe `default` function allows you to specify a default value inside of the template, in case the value is omitted. For example: `drink: {{ .Values.favorite.drink | default \"tea\" | quote }}`.\n\n## Using the `lookup` function\nThe `lookup` function can be used to look up resources in a running cluster. The synopsis is `lookup apiVersion, kind, namespace, name -> resource or resource list`. Both `name` and `namespace` are optional.\n\n## Operators are functions\nFor templates, the operators ( `eq`, `ne`, `lt`, `gt`, `and`, `or` and so on) are all implemented as functions. In pipelines, operations can be grouped with parentheses.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines", "title": "Template Functions and Pipelines", "description": "This page covers how to use template functions and pipelines in Helm to transform data and create dynamic configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:23:46", "type": "overview", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines/", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Template Functions and Pipelines", "Template Functions and Pipelines"], "twitter:description": "Using functions in templates.", "ogDescription": "Using functions in templates.", "og:description": "Using functions in templates.", "ogTitle": "Template Functions and Pipelines", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Template Functions and Pipelines\n", "twitter:title": "Helm | Template Functions and Pipelines", "og:url": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines/", "description": "Using functions in templates.", "scrapeId": "88f45f79-07c2-4c18-bab2-50adc2c6387f", "sourceURL": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines", "url": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Template Functions and Pipelines\"?\n\nAssistant: Here are some code examples:\n\n### Basic Template Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ quote .Values.favorite.drink }}\n  food: {{ quote .Values.favorite.food }}\n\n```\n\n### Using Pipelines\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n\n```\n\n### Using the `repeat` function\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | repeat 5 | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n\n```\n\n### Using the `default` function\n```yaml\ndrink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n\n```\n\n### Using the `lookup` function\n```yaml\n(lookup \"v1\" \"Namespace\" \"\" \"mynamespace\").metadata.annotations\n\n```\n\n### Accessing a list of objects with `lookup`\n```yaml\n{{ range $index, $service := (lookup \"v1\" \"Service\" \"mynamespace\" \"\").items }}\n    {{/* do something with each service */}}\n{{ end }}\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines", "title": "Template Functions and Pipelines", "description": "This page covers how to use template functions and pipelines in Helm to transform data and create dynamic configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:23:46", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines/", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Template Functions and Pipelines", "Template Functions and Pipelines"], "twitter:description": "Using functions in templates.", "ogDescription": "Using functions in templates.", "og:description": "Using functions in templates.", "ogTitle": "Template Functions and Pipelines", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Template Functions and Pipelines\n", "twitter:title": "Helm | Template Functions and Pipelines", "og:url": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines/", "description": "Using functions in templates.", "scrapeId": "88f45f79-07c2-4c18-bab2-50adc2c6387f", "sourceURL": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines", "url": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Template Functions and Pipelines\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always quote strings from the .Values object when injecting them into templates.\n• Use pipelines to chain functions together for cleaner and more efficient templates.\n• Utilize the default function to provide fallback values in templates.\n• Be cautious with the lookup function as it requires access to the Kubernetes API and may fail if permissions are lacking.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines", "title": "Template Functions and Pipelines", "description": "This page covers how to use template functions and pipelines in Helm to transform data and create dynamic configurations.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:23:46", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines/", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Template Functions and Pipelines", "Template Functions and Pipelines"], "twitter:description": "Using functions in templates.", "ogDescription": "Using functions in templates.", "og:description": "Using functions in templates.", "ogTitle": "Template Functions and Pipelines", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Template Functions and Pipelines\n", "twitter:title": "Helm | Template Functions and Pipelines", "og:url": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines/", "description": "Using functions in templates.", "scrapeId": "88f45f79-07c2-4c18-bab2-50adc2c6387f", "sourceURL": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines", "url": "https://helm.sh/docs/chart_template_guide/functions_and_pipelines/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Commands\"?\n\nAssistant: Here you’ll find the list of CLI commands for Helm, with help info on their usage.\n\nHere's a detailed explanation:\n\n\n## Quicklinks\n[**Helm**](https://helm.sh/docs/helm/helm/) [**Helm Completion**](https://helm.sh/docs/helm/helm_completion/) [**Helm Completion Bash**](https://helm.sh/docs/helm/helm_completion_bash/) [**Helm Completion Fish**](https://helm.sh/docs/helm/helm_completion_fish/) [**Helm Completion Powershell**](https://helm.sh/docs/helm/helm_completion_powershell/) [**Helm Completion Zsh**](https://helm.sh/docs/helm/helm_completion_zsh/) [**Helm Create**](https://helm.sh/docs/helm/helm_create/) [**Helm Dependency**](https://helm.sh/docs/helm/helm_dependency/) [**Helm Dependency Build**](https://helm.sh/docs/helm/helm_dependency_build/) [**Helm Dependency List**](https://helm.sh/docs/helm/helm_dependency_list/) [**Helm Dependency Update**](https://helm.sh/docs/helm/helm_dependency_update/) [**Helm Env**](https://helm.sh/docs/helm/helm_env/) [**Helm Get**](https://helm.sh/docs/helm/helm_get/) [**Helm Get All**](https://helm.sh/docs/helm/helm_get_all/) [**Helm Get Hooks**](https://helm.sh/docs/helm/helm_get_hooks/) [**Helm Get Manifest**](https://helm.sh/docs/helm/helm_get_manifest/) [**Helm Get Metadata**](https://helm.sh/docs/helm/helm_get_metadata/) [**Helm Get Notes**](https://helm.sh/docs/helm/helm_get_notes/) [**Helm Get Values**](https://helm.sh/docs/helm/helm_get_values/) [**Helm History**](https://helm.sh/docs/helm/helm_history/) [**Helm Install**](https://helm.sh/docs/helm/helm_install/) [**Helm Lint**](https://helm.sh/docs/helm/helm_lint/) [**Helm List**](https://helm.sh/docs/helm/helm_list/) [**Helm Package**](https://helm.sh/docs/helm/helm_package/) [**Helm Plugin**](https://helm.sh/docs/helm/helm_plugin/) [**Helm Plugin Install**](https://helm.sh/docs/helm/helm_plugin_install/) [**Helm Plugin List**](https://helm.sh/docs/helm/helm_plugin_list/) [**Helm Plugin Uninstall**](https://helm.sh/docs/helm/helm_plugin_uninstall/) [**Helm Plugin Update**](https://helm.sh/docs/helm/helm_plugin_update/) [**Helm Pull**](https://helm.sh/docs/helm/helm_pull/) [**Helm Push**](https://helm.sh/docs/helm/helm_push/) [**Helm Registry**](https://helm.sh/docs/helm/helm_registry/) [**Helm Registry Login**](https://helm.sh/docs/helm/helm_registry_login/) [**Helm Registry Logout**](https://helm.sh/docs/helm/helm_registry_logout/) [**Helm Repo**](https://helm.sh/docs/helm/helm_repo/) [**Helm Repo Add**](https://helm.sh/docs/helm/helm_repo_add/) [**Helm Repo Index**](https://helm.sh/docs/helm/helm_repo_index/) [**Helm Repo List**](https://helm.sh/docs/helm/helm_repo_list/) [**Helm Repo Remove**](https://helm.sh/docs/helm/helm_repo_remove/) [**Helm Repo Update**](https://helm.sh/docs/helm/helm_repo_update/) [**Helm Rollback**](https://helm.sh/docs/helm/helm_rollback/) [**Helm Search**](https://helm.sh/docs/helm/helm_search/) [**Helm Search Hub**](https://helm.sh/docs/helm/helm_search_hub/) [**Helm Search Repo**](https://helm.sh/docs/helm/helm_search_repo/) [**Helm Show**](https://helm.sh/docs/helm/helm_show/) [**Helm Show All**](https://helm.sh/docs/helm/helm_show_all/) [**Helm Show Chart**](https://helm.sh/docs/helm/helm_show_chart/) [**Helm Show Crds**](https://helm.sh/docs/helm/helm_show_crds/) [**Helm Show Readme**](https://helm.sh/docs/helm/helm_show_readme/) [**Helm Show Values**](https://helm.sh/docs/helm/helm_show_values/) [**Helm Status**](https://helm.sh/docs/helm/helm_status/) [**Helm Template**](https://helm.sh/docs/helm/helm_template/) [**Helm Test**](https://helm.sh/docs/helm/helm_test/) [**Helm Uninstall**](https://helm.sh/docs/helm/helm_uninstall/) [**Helm Upgrade**](https://helm.sh/docs/helm/helm_upgrade/) [**Helm Verify**](https://helm.sh/docs/helm/helm_verify/) [**Helm Version**](https://helm.sh/docs/helm/helm_version/)\n", "metadata": {"source_url": "https://helm.sh/docs/helm", "title": "Helm Commands", "description": "Here you’ll find the list of CLI commands for Helm, with help info on their usage.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 21:24:00", "type": "overview", "page_metadata": {"twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "title": "Helm | Docs\n", "ogUrl": "https://helm.sh/docs/helm/", "twitter:title": "Helm | Helm Commands", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Documentation for the full list of helm CLI commands.", "twitter:description": "Documentation for the full list of helm CLI commands.", "ogTitle": "Helm Commands", "og:title": ["Helm Commands", "Helm Commands"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Documentation for the full list of helm CLI commands.", "ogDescription": "Documentation for the full list of helm CLI commands.", "viewport": "width=device-width,initial-scale=1", "language": "en", "og:url": "https://helm.sh/docs/helm/", "scrapeId": "8406576f-9622-49b1-bda0-cfb438d4c6ed", "sourceURL": "https://helm.sh/docs/helm", "url": "https://helm.sh/docs/helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Pods and PodTemplates\"?\n\nAssistant: This part of the Best Practices Guide discusses formatting the Pod and PodTemplate portions in chart manifests.\n\nHere's a detailed explanation:\n\n\n## Images\nA container image should use a fixed tag or the SHA of the image. It should not use the tags `latest`, `head`, `canary`, or other tags that are designed to be \"floating\".\n\nImages _may_ be defined in the `values.yaml` file to make it easy to swap out images.\n\n```yaml\nimage: {{ .Values.redisImage | quote }}\n```\n\nAn image and a tag _may_ be defined in `values.yaml` as two separate fields:\n\n```yaml\nimage: \"{{ .Values.redisImage }}:{{ .Values.redisTag }}\"\n```\n\n## ImagePullPolicy\n`helm create` sets the `imagePullPolicy` to `IfNotPresent` by default by doing the following in your `deployment.yaml`:\n\n```yaml\nimagePullPolicy: {{ .Values.image.pullPolicy }}\n```\n\nAnd `values.yaml`:\n\n```yaml\nimage:\n  pullPolicy: IfNotPresent\n```\n\nSimilarly, Kubernetes defaults the `imagePullPolicy` to `IfNotPresent` if it is not defined at all. If you want a value other than `IfNotPresent`, simply update the value in `values.yaml` to your desired value.\n\n## PodTemplates Should Declare Selectors\nAll PodTemplate sections should specify a selector. For example:\n\n```yaml\nselector:\n  matchLabels:\n      app.kubernetes.io/name: MyName\ntemplate:\n  metadata:\n    labels:\n      app.kubernetes.io/name: MyName\n```\n\nThis is a good practice because it makes the relationship between the set and the pod.\n\nBut this is even more important for sets like Deployment. Without this, the _entire_ set of labels is used to select matching pods, and this will break if you use labels that change, like version or release date.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/pods", "title": "Pods and PodTemplates", "description": "This part of the Best Practices Guide discusses formatting the Pod and PodTemplate portions in chart manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:24:14", "type": "overview", "page_metadata": {"og:url": "https://helm.sh/docs/chart_best_practices/pods/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Pods and PodTemplates", "title": "Helm | Pods and PodTemplates\n", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "twitter:card": "summary", "og:title": ["Pods and PodTemplates", "Pods and PodTemplates"], "og:description": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "ogDescription": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "ogUrl": "https://helm.sh/docs/chart_best_practices/pods/", "twitter:description": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Pods and PodTemplates", "scrapeId": "4c27ced5-9556-440b-9289-c25fed4236c6", "sourceURL": "https://helm.sh/docs/chart_best_practices/pods", "url": "https://helm.sh/docs/chart_best_practices/pods/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Pods and PodTemplates\"?\n\nAssistant: Here are some code examples:\n\n### Image Definition in values.yaml\n```yaml\nimage: {{ .Values.redisImage | quote }}\n\n```\n\n### Image and Tag Definition in values.yaml\n```yaml\nimage: \"{{ .Values.redisImage }}:{{ .Values.redisTag }}\"\n\n```\n\n### ImagePullPolicy in deployment.yaml\n```yaml\nimagePullPolicy: {{ .Values.image.pullPolicy }}\n\n```\n\n### ImagePullPolicy in values.yaml\n```yaml\nimage:\n  pullPolicy: IfNotPresent\n\n```\n\n### PodTemplate Selector Example\n```yaml\nselector:\n  matchLabels:\n      app.kubernetes.io/name: MyName\ntemplate:\n  metadata:\n    labels:\n      app.kubernetes.io/name: MyName\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/pods", "title": "Pods and PodTemplates", "description": "This part of the Best Practices Guide discusses formatting the Pod and PodTemplate portions in chart manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:24:14", "type": "code_examples", "page_metadata": {"og:url": "https://helm.sh/docs/chart_best_practices/pods/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Pods and PodTemplates", "title": "Helm | Pods and PodTemplates\n", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "twitter:card": "summary", "og:title": ["Pods and PodTemplates", "Pods and PodTemplates"], "og:description": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "ogDescription": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "ogUrl": "https://helm.sh/docs/chart_best_practices/pods/", "twitter:description": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Pods and PodTemplates", "scrapeId": "4c27ced5-9556-440b-9289-c25fed4236c6", "sourceURL": "https://helm.sh/docs/chart_best_practices/pods", "url": "https://helm.sh/docs/chart_best_practices/pods/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Pods and PodTemplates\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use fixed tags or SHA for container images instead of floating tags like latest or canary.\n• Define images in values.yaml for easy swapping.\n• Always declare selectors in PodTemplates to maintain the relationship between sets and pods.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/pods", "title": "Pods and PodTemplates", "description": "This part of the Best Practices Guide discusses formatting the Pod and PodTemplate portions in chart manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:24:14", "type": "best_practices", "page_metadata": {"og:url": "https://helm.sh/docs/chart_best_practices/pods/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Pods and PodTemplates", "title": "Helm | Pods and PodTemplates\n", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "twitter:card": "summary", "og:title": ["Pods and PodTemplates", "Pods and PodTemplates"], "og:description": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "ogDescription": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "ogUrl": "https://helm.sh/docs/chart_best_practices/pods/", "twitter:description": "Discusses formatting the Pod and PodTemplate portions in Chart manifests.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Pods and PodTemplates", "scrapeId": "4c27ced5-9556-440b-9289-c25fed4236c6", "sourceURL": "https://helm.sh/docs/chart_best_practices/pods", "url": "https://helm.sh/docs/chart_best_practices/pods/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Template Function List\"?\n\nAssistant: Helm includes many template functions you can take advantage of in templates.\n\nHere's a detailed explanation:\n\n\n## Logic and Flow Control Functions\nHelm includes numerous logic and control flow functions including and, coalesce, default, empty, eq, fail, ge, gt, le, lt, ne, not, or, and required.\n\n## String Functions\nHelm includes the following string functions: abbrev, abbrevboth, camelcase, cat, contains, hasPrefix, hasSuffix, indent, initials, kebabcase, lower, nindent, nospace, plural, print, printf, println, quote, randAlpha, randAlphaNum, randAscii, randNumeric, repeat, replace, shuffle, snakecase, squote, substr, swapcase, title, trim, trimAll, trimPrefix, trimSuffix, trunc, upper, wrap, and wrapWith.\n\n## Type Conversion Functions\nThe following type conversion functions are provided by Helm: atoi, float64, int, int64, toDecimal, toString, toStrings, toJson, toPrettyJson, toRawJson, fromYaml, fromJson, fromJsonArray, toYaml, and toToml.\n\n## Regular Expressions\nHelm includes the following regular expression functions: regexFind, regexFindAll, regexMatch, regexReplaceAll, regexReplaceAllLiteral, and regexSplit.\n\n## Cryptographic and Security Functions\nHelm provides some advanced cryptographic functions. They include adler32sum, buildCustomCert, decryptAES, derivePassword, encryptAES, genCA, genPrivateKey, genSelfSignedCert, genSignedCert, htpasswd, sha1sum, and sha256sum.\n\n## Date Functions\nHelm includes the following date functions you can use in templates: ago, date, dateInZone, dateModify, duration, durationRound, htmlDate, htmlDateInZone, now, toDate, and unixEpoch.\n\n## Dictionaries and Dict Functions\nHelm provides a key/value storage type called a dict (short for \"dictionary\", as in Python). A dict is an unordered type.\n\n## Encoding Functions\nHelm has the following encoding and decoding functions: b64enc, b64dec, b32enc, and b32dec.\n\n## Lists and List Functions\nHelm provides a simple list type that can contain arbitrary sequential lists of data.\n\n## Math Functions\nAll math functions operate on int64 values.\n\n## Float Math Functions\nAll math functions operate on float64 values.\n\n## Network Functions\nHelm has a single network function, getHostByName.\n\n## File Path Functions\nWhile Helm template functions do not grant access to the filesystem, they do provide functions for working with strings that follow file path conventions.\n\n## Reflection Functions\nHelm provides rudimentary reflection tools.\n\n## Semantic Version Functions\nSome version schemes are easily parseable and comparable.\n\n## URL Functions\nHelm includes the urlParse, urlJoin, and urlquery functions enabling you to work with URL parts.\n\n## UUID Functions\nHelm can generate UUID v4 universally unique IDs.\n\n## Kubernetes and Chart Functions\nHelm includes functions for working with Kubernetes.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/function_list", "title": "Template Function List", "description": "Helm includes many template functions you can take advantage of in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-27 21:25:02", "type": "overview", "page_metadata": {"title": "Helm | Template Function List\n", "og:url": "https://helm.sh/docs/chart_template_guide/function_list/", "twitter:description": "A list of template functions available in Helm", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "A list of template functions available in Helm", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Template Function List", "Template Function List"], "twitter:card": "summary", "ogDescription": "A list of template functions available in Helm", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Template Function List", "language": "en", "ogTitle": "Template Function List", "ogUrl": "https://helm.sh/docs/chart_template_guide/function_list/", "viewport": "width=device-width,initial-scale=1", "og:description": "A list of template functions available in Helm", "scrapeId": "0f1d1ac1-cd9b-421a-b414-f46297131739", "sourceURL": "https://helm.sh/docs/chart_template_guide/function_list", "url": "https://helm.sh/docs/chart_template_guide/function_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Template Function List\"?\n\nAssistant: Here are some code examples:\n\n### and\n```yaml\nand .Arg1 .Arg2\n```\n\n### or\n```yaml\nor .Arg1 .Arg2\n```\n\n### not\n```yaml\nnot .Arg\n```\n\n### eq\n```yaml\neq .Arg1 .Arg2\n```\n\n### ne\n```yaml\nne .Arg1 .Arg2\n```\n\n### lt\n```yaml\nlt .Arg1 .Arg2\n```\n\n### le\n```yaml\nle .Arg1 .Arg2\n```\n\n### gt\n```yaml\ngt .Arg1 .Arg2\n```\n\n### ge\n```yaml\nge .Arg1 .Arg2\n```\n\n### default\n```yaml\ndefault \"foo\" .Bar\n```\n\n### required\n```yaml\nrequired \"A valid foo is required!\" .Bar\n```\n\n### empty\n```yaml\nempty .Foo\n```\n\n### fail\n```yaml\nfail \"Please accept the end user license agreement\"\n```\n\n### coalesce\n```yaml\ncoalesce 0 1 2\n```\n\n### ternary\n```yaml\nternary \"foo\" \"bar\" true\n```\n\n### print\n```yaml\nprint \"Matt has \" .Dogs \" dogs\"\n```\n\n### println\n```yaml\nprintln \"Hello World\"\n```\n\n### printf\n```yaml\nprintf \"%s has %d dogs.\" .Name .NumberDogs\n```\n\n### trim\n```yaml\ntrim \"   hello    \"\n```\n\n### trimAll\n```yaml\ntrimAll \"$\" \"$5.00\"\n```\n\n### trimPrefix\n```yaml\ntrimPrefix \"-\" \"-hello\"\n```\n\n### trimSuffix\n```yaml\ntrimSuffix \"-\" \"hello-\"\n```\n\n### lower\n```yaml\nlower \"HELLO\"\n```\n\n### upper\n```yaml\nupper \"hello\"\n```\n\n### title\n```yaml\ntitle \"hello world\"\n```\n\n### untitle\n```yaml\nuntitle \"Hello World\"\n```\n\n### repeat\n```yaml\nrepeat 3 \"hello\"\n```\n\n### substr\n```yaml\nsubstr 0 5 \"hello world\"\n```\n\n### nospace\n```yaml\nnospace \"hello w o r l d\"\n```\n\n### trunc\n```yaml\ntrunc 5 \"hello world\"\n```\n\n### abbrev\n```yaml\nabbrev 5 \"hello world\"\n```\n\n### abbrevboth\n```yaml\nabbrevboth 5 10 \"1234 5678 9123\"\n```\n\n### initials\n```yaml\ninitials \"First Try\"\n```\n\n### randNumeric\n```yaml\nrandNumeric 3\n```\n\n### wrap\n```yaml\nwrap 80 $someText\n```\n\n### wrapWith\n```yaml\nwrapWith 5 \"\\t\" \"Hello World\"\n```\n\n### contains\n```yaml\ncontains \"cat\" \"catch\"\n```\n\n### hasPrefix\n```yaml\nhasPrefix \"cat\" \"catch\"\n```\n\n### quote\n```yaml\nquote \"string\"\n```\n\n### cat\n```yaml\ncat \"hello\" \"beautiful\" \"world\"\n```\n\n### indent\n```yaml\nindent 4 $lots_of_text\n```\n\n### nindent\n```yaml\nnindent 4 $lots_of_text\n```\n\n### replace\n```yaml\n\"I Am Henry VIII\" | replace \" \" \"-\"\n```\n\n### plural\n```yaml\nlen $fish | plural \"one anchovy\" \"many anchovies\"\n```\n\n### snakecase\n```yaml\nsnakecase \"FirstName\"\n```\n\n### camelcase\n```yaml\ncamelcase \"http_server\"\n```\n\n### kebabcase\n```yaml\nkebabcase \"FirstName\"\n```\n\n### swapcase\n```yaml\nswapcase \"This Is A.Test\"\n```\n\n### shuffle\n```yaml\nshuffle \"hello\"\n```\n\n### add\n```yaml\nadd 1 2 3\n```\n\n### add1\n```yaml\nadd1 1\n```\n\n### sub\n```yaml\nsub 5 3\n```\n\n### div\n```yaml\ndiv 10 2\n```\n\n### mod\n```yaml\nmod 10 3\n```\n\n### mul\n```yaml\nmul 1 2 3\n```\n\n### max\n```yaml\nmax 1 2 3\n```\n\n### min\n```yaml\nmin 1 2 3\n```\n\n### len\n```yaml\nlen .Arg\n```\n\n### addf\n```yaml\naddf 1.5 2 2\n```\n\n### add1f\n```yaml\nadd1f 1.5\n```\n\n### subf\n```yaml\nsubf 7.5 2 3\n```\n\n### divf\n```yaml\ndivf 10 2 4\n```\n\n### mulf\n```yaml\nmulf 1.5 2 2\n```\n\n### maxf\n```yaml\nmaxf 1 2.5 3\n```\n\n### minf\n```yaml\nminf 1.5 2 3\n```\n\n### floor\n```yaml\nfloor 123.9999\n```\n\n### ceil\n```yaml\nceil 123.001\n```\n\n### round\n```yaml\nround 123.555555 3\n```\n\n### getHostByName\n```yaml\ngetHostByName \"www.google.com\"\n```\n\n### base\n```yaml\nbase \"foo/bar/baz\"\n```\n\n### dir\n```yaml\ndir \"foo/bar/baz\"\n```\n\n### clean\n```yaml\nclean \"foo/bar/../baz\"\n```\n\n### ext\n```yaml\next \"foo.bar\"\n```\n\n### isAbs\n```yaml\nisAbs \"/foo/bar\"\n```\n\n### kindOf\n```yaml\nkindOf \"hello\"\n```\n\n### kindIs\n```yaml\nkindIs \"int\" 123\n```\n\n### typeOf\n```yaml\ntypeOf $foo\n```\n\n### typeIs\n```yaml\ntypeIs \"*io.Buffer\" $myVal\n```\n\n### typeIsLike\n```yaml\ntypeIsLike \"*io.Buffer\" $myVal\n```\n\n### deepEqual\n```yaml\ndeepEqual (list 1 2 3) (list 1 2 3)\n```\n\n### semver\n```yaml\n$version := semver \"1.2.3-alpha.1+123\"\n```\n\n### semverCompare\n```yaml\nsemver \"1.4.3\" | (semver \"1.2.3\").Compare\n```\n\n### urlParse\n```yaml\nurlParse \"http://admin:secret@server.com:8080/api?list=false#anchor\"\n```\n\n### urlJoin\n```yaml\nurlJoin (dict \"fragment\" \"fragment\" \"host\" \"host:80\" \"path\" \"/path\" \"query\" \"query\" \"scheme\" \"http\")\n```\n\n### urlquery\n```yaml\nurlquery \"string for query\"\n```\n\n### uuidv4\n```yaml\nuuidv4\n```\n\n### lookup\n```yaml\nlookup \"apps/v1\"\n```\n\n### .Capabilities.APIVersions.Has\n```yaml\n.Capabilities.APIVersions.Has \"apps/v1\"\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/function_list", "title": "Template Function List", "description": "Helm includes many template functions you can take advantage of in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-27 21:25:02", "type": "code_examples", "page_metadata": {"title": "Helm | Template Function List\n", "og:url": "https://helm.sh/docs/chart_template_guide/function_list/", "twitter:description": "A list of template functions available in Helm", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "A list of template functions available in Helm", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Template Function List", "Template Function List"], "twitter:card": "summary", "ogDescription": "A list of template functions available in Helm", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Template Function List", "language": "en", "ogTitle": "Template Function List", "ogUrl": "https://helm.sh/docs/chart_template_guide/function_list/", "viewport": "width=device-width,initial-scale=1", "og:description": "A list of template functions available in Helm", "scrapeId": "0f1d1ac1-cd9b-421a-b414-f46297131739", "sourceURL": "https://helm.sh/docs/chart_template_guide/function_list", "url": "https://helm.sh/docs/chart_template_guide/function_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Template Function List\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `default` function to set default values for variables.\n• Utilize `required` to enforce mandatory values in templates.\n• Leverage `coalesce` to find the first non-empty value from a list of variables.\n• Use `print` and `printf` for formatted output in templates.\n• Employ `trim` and `trimAll` to clean up strings before processing.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/function_list", "title": "Template Function List", "description": "Helm includes many template functions you can take advantage of in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-27 21:25:02", "type": "best_practices", "page_metadata": {"title": "Helm | Template Function List\n", "og:url": "https://helm.sh/docs/chart_template_guide/function_list/", "twitter:description": "A list of template functions available in Helm", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "A list of template functions available in Helm", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Template Function List", "Template Function List"], "twitter:card": "summary", "ogDescription": "A list of template functions available in Helm", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Template Function List", "language": "en", "ogTitle": "Template Function List", "ogUrl": "https://helm.sh/docs/chart_template_guide/function_list/", "viewport": "width=device-width,initial-scale=1", "og:description": "A list of template functions available in Helm", "scrapeId": "0f1d1ac1-cd9b-421a-b414-f46297131739", "sourceURL": "https://helm.sh/docs/chart_template_guide/function_list", "url": "https://helm.sh/docs/chart_template_guide/function_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"The Chart Repository Guide\"?\n\nAssistant: This section explains how to create and work with Helm chart repositories. At a high level, a chart repository is a location where packaged charts can be stored and shared.\n\nHere's a detailed explanation:\n\n\n## Prerequisites\n- Go through the [Quickstart](https://helm.sh/docs/intro/quickstart/) Guide\n- Read through the [Charts](https://helm.sh/docs/topics/charts/) document\n\n## Create a chart repository\nA _chart repository_ is an HTTP server that houses an `index.yaml` file and optionally some packaged charts. When you're ready to share your charts, the preferred way to do so is by uploading them to a chart repository.\n\nAs of Helm 2.2.0, client-side SSL auth to a repository is supported. Other authentication protocols may be available as plugins.\n\nBecause a chart repository can be any HTTP server that can serve YAML and tar files and can answer GET requests, you have a plethora of options when it comes down to hosting your own chart repository. For example, you can use a Google Cloud Storage (GCS) bucket, Amazon S3 bucket, GitHub Pages, or even create your own web server.\n\n## The chart repository structure\nA chart repository consists of packaged charts and a special file called `index.yaml` which contains an index of all of the charts in the repository. Frequently, the charts that `index.yaml` describes are also hosted on the same server, as are the [provenance files](https://helm.sh/docs/topics/provenance/).\n\nFor example, the layout of the repository `https://example.com/charts` might look like this:\n\n```fallback\ncharts/\n  |\n  |- index.yaml\n  |\n  |- alpine-0.1.2.tgz\n  |\n  |- alpine-0.1.2.tgz.prov\n```\n\nIn this case, the index file would contain information about one chart, the Alpine chart, and provide the download URL `https://example.com/charts/alpine-0.1.2.tgz` for that chart.\n\nIt is not required that a chart package be located on the same server as the `index.yaml` file. However, doing so is often the easiest.\n\n## The index file\nThe index file is a yaml file called `index.yaml`. It contains some metadata about the package, including the contents of a chart's `Chart.yaml` file. A valid chart repository must have an index file. The index file contains information about each chart in the chart repository. The `helm repo index` command will generate an index file based on a given local directory that contains packaged charts.\n\nThis is an example of an index file:\n\n```yaml\napiVersion: v1\nentries:\n  alpine:\n    - created: 2016-10-06T16:23:20.499814565-06:00\n      description: Deploy a basic Alpine Linux pod\n      digest: 99c76e403d752c84ead610644d4b1c2f2b453a74b921f422b9dcb8a7c8b559cd\n      home: https://helm.sh/helm\n      name: alpine\n      sources:\n      - https://github.com/helm/helm\n      urls:\n      - https://technosophos.github.io/tscharts/alpine-0.2.0.tgz\n      version: 0.2.0\n    - created: 2016-10-06T16:23:20.499543808-06:00\n      description: Deploy a basic Alpine Linux pod\n      digest: 515c58e5f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cd78727\n      home: https://helm.sh/helm\n      name: alpine\n      sources:\n      - https://github.com/helm/helm\n      urls:\n      - https://technosophos.github.io/tscharts/alpine-0.1.0.tgz\n      version: 0.1.0\n  nginx:\n    - created: 2016-10-06T16:23:20.499543808-06:00\n      description: Create a basic nginx HTTP server\n      digest: aaff4545f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cdffffff\n      home: https://helm.sh/helm\n      name: nginx\n      sources:\n      - https://github.com/helm/charts\n      urls:\n      - https://technosophos.github.io/tscharts/nginx-1.1.0.tgz\n      version: 1.1.0\ngenerated: 2016-10-06T16:23:20.499029981-06:00\n```\n\n## Hosting Chart Repositories\nThis part shows several ways to serve a chart repository.\n\n## Google Cloud Storage\nThe first step is to **create your GCS bucket**. We'll call ours `fantastic-charts`.\n\n![Create a GCS Bucket](https://helm.sh/img/create-a-bucket.png)\n\nNext, make your bucket public by **editing the bucket permissions**.\n\n![Edit Permissions](https://helm.sh/img/edit-permissions.png)\n\nInsert this line item to **make your bucket public**:\n\n![Make Bucket Public](https://helm.sh/img/make-bucket-public.png)\n\nCongratulations, now you have an empty GCS bucket ready to serve charts!\n\nYou may upload your chart repository using the Google Cloud Storage command line tool, or using the GCS web UI. A public GCS bucket can be accessed via simple HTTPS at this address: `https://bucket-name.storage.googleapis.com/`.\n\n## Cloudsmith\nYou can also set up chart repositories using Cloudsmith. Read more about chart repositories with Cloudsmith [here](https://help.cloudsmith.io/docs/helm-chart-repository)\n", "metadata": {"source_url": "https://helm.sh/docs/topics/chart_repository", "title": "The Chart Repository Guide", "description": "This section explains how to create and work with Helm chart repositories. At a high level, a chart repository is a location where packaged charts can be stored and shared.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:25:25", "type": "overview", "page_metadata": {"twitter:description": "How to create and work with Helm chart repositories.", "description": "How to create and work with Helm chart repositories.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | The Chart Repository Guide", "ogDescription": "How to create and work with Helm chart repositories.", "title": "Helm | The Chart Repository Guide\n", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/topics/chart_repository/", "og:title": ["The Chart Repository Guide", "The Chart Repository Guide"], "og:description": "How to create and work with Helm chart repositories.", "twitter:card": "summary", "ogTitle": "The Chart Repository Guide", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/chart_repository/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "dcbd39b1-fc2d-4ca0-93ef-898b2f229f60", "sourceURL": "https://helm.sh/docs/topics/chart_repository", "url": "https://helm.sh/docs/topics/chart_repository/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"The Chart Repository Guide\"?\n\nAssistant: Here are some code examples:\n\n### Example of a chart repository structure\n```yaml\ncharts/\n  |\n  |- index.yaml\n  |\n  |- alpine-0.1.2.tgz\n  |\n  |- alpine-0.1.2.tgz.prov\n```\n\n### Example of an index file\n```yaml\napiVersion: v1\nentries:\n  alpine:\n    - created: 2016-10-06T16:23:20.499814565-06:00\n      description: Deploy a basic Alpine Linux pod\n      digest: 99c76e403d752c84ead610644d4b1c2f2b453a74b921f422b9dcb8a7c8b559cd\n      home: https://helm.sh/helm\n      name: alpine\n      sources:\n      - https://github.com/helm/helm\n      urls:\n      - https://technosophos.github.io/tscharts/alpine-0.2.0.tgz\n      version: 0.2.0\n    - created: 2016-10-06T16:23:20.499543808-06:00\n      description: Deploy a basic Alpine Linux pod\n      digest: 515c58e5f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cd78727\n      home: https://helm.sh/helm\n      name: alpine\n      sources:\n      - https://github.com/helm/helm\n      urls:\n      - https://technosophos.github.io/tscharts/alpine-0.1.0.tgz\n      version: 0.1.0\n  nginx:\n    - created: 2016-10-06T16:23:20.499543808-06:00\n      description: Create a basic nginx HTTP server\n      digest: aaff4545f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cdffffff\n      home: https://helm.sh/helm\n      name: nginx\n      sources:\n      - https://github.com/helm/charts\n      urls:\n      - https://technosophos.github.io/tscharts/nginx-1.1.0.tgz\n      version: 1.1.0\ngenerated: 2016-10-06T16:23:20.499029981-06:00\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/chart_repository", "title": "The Chart Repository Guide", "description": "This section explains how to create and work with Helm chart repositories. At a high level, a chart repository is a location where packaged charts can be stored and shared.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:25:25", "type": "code_examples", "page_metadata": {"twitter:description": "How to create and work with Helm chart repositories.", "description": "How to create and work with Helm chart repositories.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | The Chart Repository Guide", "ogDescription": "How to create and work with Helm chart repositories.", "title": "Helm | The Chart Repository Guide\n", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/topics/chart_repository/", "og:title": ["The Chart Repository Guide", "The Chart Repository Guide"], "og:description": "How to create and work with Helm chart repositories.", "twitter:card": "summary", "ogTitle": "The Chart Repository Guide", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/chart_repository/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "dcbd39b1-fc2d-4ca0-93ef-898b2f229f60", "sourceURL": "https://helm.sh/docs/topics/chart_repository", "url": "https://helm.sh/docs/topics/chart_repository/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"The Chart Repository Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure the `index.yaml` file can be accessed with no authentication requirement.\n• Make sure `yaml` files are served with the correct content type ( `text/yaml` or `text/x-yaml`).\n• Use the `--merge` flag to incrementally add new charts to an existing `index.yaml` file.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/chart_repository", "title": "The Chart Repository Guide", "description": "This section explains how to create and work with Helm chart repositories. At a high level, a chart repository is a location where packaged charts can be stored and shared.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:25:25", "type": "best_practices", "page_metadata": {"twitter:description": "How to create and work with Helm chart repositories.", "description": "How to create and work with Helm chart repositories.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | The Chart Repository Guide", "ogDescription": "How to create and work with Helm chart repositories.", "title": "Helm | The Chart Repository Guide\n", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/topics/chart_repository/", "og:title": ["The Chart Repository Guide", "The Chart Repository Guide"], "og:description": "How to create and work with Helm chart repositories.", "twitter:card": "summary", "ogTitle": "The Chart Repository Guide", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/chart_repository/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "dcbd39b1-fc2d-4ca0-93ef-898b2f229f60", "sourceURL": "https://helm.sh/docs/topics/chart_repository", "url": "https://helm.sh/docs/topics/chart_repository/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Custom Resource Definitions\"?\n\nAssistant: This section of the Best Practices Guide deals with creating and using Custom Resource Definition objects.\n\nHere's a detailed explanation:\n\n\n## Install a CRD Declaration Before Using the Resource\nHelm is optimized to load as many resources into Kubernetes as fast as possible. By design, Kubernetes can take an entire set of manifests and bring them all online (this is called the reconciliation loop).\n\nBut there's a difference with CRDs.\n\nFor a CRD, the declaration must be registered before any resources of that CRDs kind(s) can be used. And the registration process sometimes takes a few seconds.\n\n## Method 1: Let helm Do It For You\nWith the arrival of Helm 3, we removed the old crd-install hooks for a more simple methodology. There is now a special directory called crds that you can create in your chart to hold your CRDs. These CRDs are not templated, but will be installed by default when running a helm install for the chart. If the CRD already exists, it will be skipped with a warning. If you wish to skip the CRD installation step, you can pass the --skip-crds flag.\n\nSome caveats (and explanations)\n\nThere is no support at this time for upgrading or deleting CRDs using Helm. This was an explicit decision after much community discussion due to the danger for unintentional data loss. Furthermore, there is currently no community consensus around how to handle CRDs and their lifecycle. As this evolves, Helm will add support for those use cases.\n\nThe --dry-run flag of helm install and helm upgrade is not currently supported for CRDs. The purpose of \"Dry Run\" is to validate that the output of the chart will actually work if sent to the server. But CRDs are a modification of the server's behavior. Helm cannot install the CRD on a dry run, so the discovery client will not know about that Custom Resource (CR), and validation will fail. You can alternatively move the CRDs to their own chart or use helm template instead.\n\nAnother important point to consider in the discussion around CRD support is how the rendering of templates is handled. One of the distinct disadvantages of the crd-install method used in Helm 2 was the inability to properly validate charts due to changing API availability (a CRD is actually adding another available API to your Kubernetes cluster). If a chart installed a CRD, helm no longer had a valid set of API versions to work against. This is also the reason behind removing templating support from CRDs. With the new crds method of CRD installation, we now ensure that helm has completely valid information about the current state of the cluster.\n\n## Method 2: Separate Charts\nAnother way to do this is to put the CRD definition in one chart, and then put any resources that use that CRD in another chart.\n\nIn this method, each chart must be installed separately. However, this workflow may be more useful for cluster operators who have admin access to a cluster.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions", "title": "Custom Resource Definitions", "description": "This section of the Best Practices Guide deals with creating and using Custom Resource Definition objects.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:25:33", "type": "overview", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "og:description": "How to handle creating and using CRDs.", "ogUrl": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions/", "language": "en", "title": "Helm | Custom Resource Definitions\n", "og:title": ["Custom Resource Definitions", "Custom Resource Definitions"], "og:url": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions/", "twitter:card": "summary", "twitter:title": "Helm | Custom Resource Definitions", "description": "How to handle creating and using CRDs.", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Custom Resource Definitions", "ogDescription": "How to handle creating and using CRDs.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "How to handle creating and using CRDs.", "scrapeId": "9d1ca602-feab-4bea-87c1-f95793981c33", "sourceURL": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions", "url": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Custom Resource Definitions\"?\n\nAssistant: Here are the recommended best practices:\n\n• The declaration of a CRD must be registered before any resources of that CRDs kind(s) can be used.\n• If the CRD already exists, it will be skipped with a warning during installation.\n• Use the --skip-crds flag to skip the CRD installation step.\n• The --dry-run flag is not supported for CRDs; consider moving CRDs to their own chart or using helm template instead.\n• Helm 3 uses a special directory called crds to hold CRDs, which are installed by default.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions", "title": "Custom Resource Definitions", "description": "This section of the Best Practices Guide deals with creating and using Custom Resource Definition objects.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:25:33", "type": "best_practices", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "og:description": "How to handle creating and using CRDs.", "ogUrl": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions/", "language": "en", "title": "Helm | Custom Resource Definitions\n", "og:title": ["Custom Resource Definitions", "Custom Resource Definitions"], "og:url": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions/", "twitter:card": "summary", "twitter:title": "Helm | Custom Resource Definitions", "description": "How to handle creating and using CRDs.", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Custom Resource Definitions", "ogDescription": "How to handle creating and using CRDs.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "How to handle creating and using CRDs.", "scrapeId": "9d1ca602-feab-4bea-87c1-f95793981c33", "sourceURL": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions", "url": "https://helm.sh/docs/chart_best_practices/custom_resource_definitions/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Flow Control\"?\n\nAssistant: Control structures (called \"actions\" in template parlance) provide you, the template author, with the ability to control the flow of a template's generation. Helm's template language provides the following control structures: if/else for creating conditional blocks, with to specify a scope, and range, which provides a \"for each\"-style loop.\n\nHere's a detailed explanation:\n\n\n## If/Else\nThe first control structure we'll look at is for conditionally including blocks of text in a template. This is the `if`/ `else` block.\n\nThe basic structure for a conditional looks like this:\n\n```fallback\n{{ if PIPELINE }}\n  # Do something\n{{ else if OTHER PIPELINE }}\n  # Do something else\n{{ else }}\n  # Default case\n{{ end }}\n```\n\nNotice that we're now talking about _pipelines_ instead of values. The reason for this is to make it clear that control structures can execute an entire pipeline, not just evaluate a value.\n\nA pipeline is evaluated as _false_ if the value is:\n\n- a boolean false\n- a numeric zero\n- an empty string\n- a `nil` (empty or null)\n- an empty collection ( `map`, `slice`, `tuple`, `dict`, `array`)\n\nUnder all other conditions, the condition is true.\n\nLet's add a simple conditional to our ConfigMap. We'll add another setting if the drink is set to coffee:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{ if eq .Values.favorite.drink \"coffee\" }}mug: \"true\"{{ end }}\n```\n\nSince we commented out `drink: coffee` in our last example, the output should not include a `mug: \"true\"` flag. But if we add that line back into our `values.yaml` file, the output should look like this:\n\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: eyewitness-elk-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"PIZZA\"\n  mug: \"true\"\n```\n\n## Controlling Whitespace\n\nWhile we're looking at conditionals, we should take a quick look at the way whitespace is controlled in templates. Let's take the previous example and format it to be a little easier to read:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{ if eq .Values.favorite.drink \"coffee\" }}\n    mug: \"true\"\n  {{ end }}\n```\n\nInitially, this looks good. But if we run it through the template engine, we'll get an unfortunate result:\n\n```console\n$ helm install --dry-run --debug ./mychart\nSERVER: \"localhost:44134\"\nCHART PATH: /Users/mattbutcher/Code/Go/src/helm.sh/helm/_scratch/mychart\nError: YAML parse error on mychart/templates/configmap.yaml: error converting YAML to JSON: yaml: line 9: did not find expected key\n```\n\nWhat happened? We generated incorrect YAML because of the whitespacing above.\n\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: eyewitness-elk-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"PIZZA\"\n    mug: \"true\"\n```\n\n`mug` is incorrectly indented. Let's simply out-dent that one line, and re-run:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{ if eq .Values.favorite.drink \"coffee\" }}\n  mug: \"true\"\n  {{ end }}\n```\n\nWhen we sent that, we'll get YAML that is valid, but still looks a little funny:\n\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: telling-chimp-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"PIZZA\"\n\n  mug: \"true\"\n```\n\nNotice that we received a few empty lines in our YAML. Why? When the template engine runs, it _removes_ the contents inside of `{{` and `}}`, but it leaves the remaining whitespace exactly as is.\n\nYAML ascribes meaning to whitespace, so managing the whitespace becomes pretty important. Fortunately, Helm templates have a few tools to help.\n\nFirst, the curly brace syntax of template declarations can be modified with special characters to tell the template engine to chomp whitespace. `{{- `(with the dash and space added) indicates that whitespace should be chomped left, while `-}}` means whitespace to the right should be consumed. _Be careful!_\n_Newlines are whitespace!_\n\n> Make sure there is a space between the `-` and the rest of your directive.\n> `{{- 3 }}` means \"trim left whitespace and print 3\" while `{{-3 }}` means \"print -3\".\n\nUsing this syntax, we can modify our template to get rid of those new lines:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{- if eq .Values.favorite.drink \"coffee\" }}\n  mug: \"true\"\n  {{- end }}\n```\n\nJust for the sake of making this point clear, let's adjust the above, and substitute an `*` for each whitespace that will be deleted following this rule. An `*` at the end of the line indicates a newline character that would be removed\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}*  \n**{{- if eq .Values.favorite.drink \"coffee\" }}\n  mug: \"true\"*  \n**{{- end }}\n```\n\nKeeping that in mind, we can run our template through Helm and see the result:\n\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: clunky-cat-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"PIZZA\"\n  mug: \"true\"\n```\n\nBe careful with the chomping modifiers. It is easy to accidentally do things like this:\n\n```yaml\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{- if eq .Values.favorite.drink \"coffee\" -}}\n  mug: \"true\"\n  {{- end -}}\n```\n\nThat will produce `food: \"PIZZA\"mug: \"true\"` because it consumed newlines on both sides.\n\n> For the details on whitespace control in templates, see the [Official Go\\ template documentation](https://godoc.org/text/template) \n\nFinally, sometimes it's easier to tell the template system how to indent for you instead of trying to master the spacing of template directives. For that reason, you may sometimes find it useful to use the `indent` function ( `{{ indent 2 \"mug:true\" }}`).\n\n## Modifying scope using `with`\nThe next control structure to look at is the `with` action. This controls variable scoping. Recall that `.` is a reference to _the current scope_. So `.Values` tells the template to find the `Values` object in the current scope.\n\nThe syntax for `with` is similar to a simple `if` statement:\n\n```fallback\n{{ with PIPELINE }}\n  # restricted scope\n{{ end }}\n```\n\nScopes can be changed. `with` can allow you to set the current scope ( `.`) to a particular object. For example, we've been working with `.Values.favorite`. Let's rewrite our ConfigMap to alter the `.` scope to point to `.Values.favorite`:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n```\n\nNote that we removed the `if` conditional from the previous exercise because it is now unnecessary - the block after `with` only executes if the value of `PIPELINE` is not empty.\n\nNotice that now we can reference `.drink` and `.food` without qualifying them. That is because the `with` statement sets `.` to point to `.Values.favorite`. The `.` is reset to its previous scope after `{{ end }}\n\nBut here's a note of caution! Inside of the restricted scope, you will not be able to access the other objects from the parent scope using `.`. This, for example, will fail:\n\n```yaml\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ .Release.Name }}\n  {{- end }}\n```\n\nIt will produce an error because `Release.Name` is not inside of the restricted scope for `.`. However, if we swap the last two lines, all will work as expected because the scope is reset after `{{ end }}`.\n\n```yaml\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n  release: {{ .Release.Name }}\n```\n\nOr, we can use `$` for accessing the object `Release.Name` from the parent scope. `$` is mapped to the root scope when template execution begins and it does not change during template execution. The following would work as well:\n\n```yaml\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ $.Release.Name }}\n  {{- end }}\n```\n\n## Looping with the `range` action\nMany programming languages have support for looping using `for` loops, `foreach` loops, or similar functional mechanisms. In Helm's template language, the way to iterate through a collection is to use the `range` operator.\n\nTo start, let's add a list of pizza toppings to our `values.yaml` file:\n\n```yaml\nfavorite:\n  drink: coffee\n  food: pizza\npizzaToppings:\n  - mushrooms\n  - cheese\n  - peppers\n  - onions\n  - pineapple\n```\n\nNow we have a list (called a `slice` in templates) of `pizzaToppings`. We can modify our template to print this list into our ConfigMap:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n  toppings: |-\n    {{- range .Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }}\n```\n\nWe can use `$` for accessing the list `Values.pizzaToppings` from the parent scope. `$` is mapped to the root scope when template execution begins and it does not change during template execution. The following would work as well:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  toppings: |-\n    {{- range $.Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }}\n  {{- end }}\n```\n\nLet's take a closer look at the `toppings:` list. The `range` function will \"range over\" (iterate through) the `pizzaToppings` list. But now something interesting happens. Just like `with` sets the scope of `.`, so does a `range` operator. Each time through the loop, `.` is set to the current pizza topping. That is, the first time, `.` is set to `mushrooms`. The second iteration it is set to `cheese`, and so on.\n\nWe can send the value of `.` directly down a pipeline, so when we do `{{ . | title | quote }}`, it sends `.` to `title` (title case function) and then to `quote`. If we run this template, the output will be:\n\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: edgy-dragonfly-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"PIZZA\"\n  toppings: |-\n    - \"Mushrooms\"\n    - \"Cheese\"\n    - \"Peppers\"\n    - \"Onions\"\n    - \"Pineapple\"\n```\n\nNow, in this example we've done something tricky. The `toppings: |-` line is declaring a multi-line string. So our list of toppings is actually not a YAML list. It's a big string. Why would we do this? Because the data in ConfigMaps `data` is composed of key/value pairs, where both the key and the value are simple strings. To understand why this is the case, take a look at the [Kubernetes ConfigMap docs](https://kubernetes.io/docs/concepts/configuration/configmap/). For us, though, this detail doesn't matter much.\n\n> The `|-` marker in YAML takes a multi-line string. This can be a useful technique for embedding big blocks of data inside of your manifests, as exemplified here.\n\nSometimes it's useful to be able to quickly make a list inside of your template, and then iterate over that list. Helm templates have a function to make this easy: `tuple`. In computer science, a tuple is a list-like collection of fixed size, but with arbitrary data types. This roughly conveys the way a `tuple` is used.\n\n```yaml\n  sizes: |-\n    {{- range tuple \"small\" \"medium\" \"large\" }}\n    - {{ . }}\n    {{- end }}\n```\n\nThe above will produce this:\n\n```yaml\n  sizes: |-\n    - small\n    - medium\n    - large\n```\n\nIn addition to lists and tuples, `range` can be used to iterate over collections that have a key and a value (like a `map` or `dict`). We'll see how to do that in the next section when we introduce template variables.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/control_structures", "title": "Flow Control", "description": "Control structures (called \"actions\" in template parlance) provide you, the template author, with the ability to control the flow of a template's generation. Helm's template language provides the following control structures: if/else for creating conditional blocks, with to specify a scope, and range, which provides a \"for each\"-style loop.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:26:14", "type": "overview", "page_metadata": {"ogDescription": "A quick overview on the flow structure within templates.", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Flow Control", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "A quick overview on the flow structure within templates.", "title": "Helm | Flow Control\n", "ogUrl": "https://helm.sh/docs/chart_template_guide/control_structures/", "language": "en", "description": "A quick overview on the flow structure within templates.", "twitter:description": "A quick overview on the flow structure within templates.", "og:url": "https://helm.sh/docs/chart_template_guide/control_structures/", "og:title": ["Flow Control", "Flow Control"], "twitter:title": "Helm | Flow Control", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "f8593b3e-a123-4d2f-ba0a-8825a31fb758", "sourceURL": "https://helm.sh/docs/chart_template_guide/control_structures", "url": "https://helm.sh/docs/chart_template_guide/control_structures/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Flow Control\"?\n\nAssistant: Here are some code examples:\n\n### If/Else Example\n```yaml\n{{ if PIPELINE }}\n  # Do something\n{{ else if OTHER PIPELINE }}\n  # Do something else\n{{ else }}\n  # Default case\n{{ end }}\n\n```\n\n### ConfigMap with Conditional\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{ if eq .Values.favorite.drink \"coffee\" }}mug: \"true\"{{ end }}\n\n```\n\n### YAML Output with Conditional\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: eyewitness-elk-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"PIZZA\"\n  mug: \"true\"\n\n```\n\n### Whitespace Control Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{ if eq .Values.favorite.drink \"coffee\" }}\n  mug: \"true\"\n  {{ end }}\n\n```\n\n### Modified Template with Chomped Whitespace\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: {{ .Values.favorite.drink | default \"tea\" | quote }}\n  food: {{ .Values.favorite.food | upper | quote }}\n  {{- if eq .Values.favorite.drink \"coffee\" }}\n  mug: \"true\"\n  {{- end }}\n\n```\n\n### Using `with` to Modify Scope\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n\n```\n\n### Looping with `range` Example\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  {{- end }}\n  toppings: |-\n    {{- range .Values.pizzaToppings }}\n    - {{ . | title | quote }}\n    {{- end }}\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/control_structures", "title": "Flow Control", "description": "Control structures (called \"actions\" in template parlance) provide you, the template author, with the ability to control the flow of a template's generation. Helm's template language provides the following control structures: if/else for creating conditional blocks, with to specify a scope, and range, which provides a \"for each\"-style loop.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:26:14", "type": "code_examples", "page_metadata": {"ogDescription": "A quick overview on the flow structure within templates.", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Flow Control", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "A quick overview on the flow structure within templates.", "title": "Helm | Flow Control\n", "ogUrl": "https://helm.sh/docs/chart_template_guide/control_structures/", "language": "en", "description": "A quick overview on the flow structure within templates.", "twitter:description": "A quick overview on the flow structure within templates.", "og:url": "https://helm.sh/docs/chart_template_guide/control_structures/", "og:title": ["Flow Control", "Flow Control"], "twitter:title": "Helm | Flow Control", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "f8593b3e-a123-4d2f-ba0a-8825a31fb758", "sourceURL": "https://helm.sh/docs/chart_template_guide/control_structures", "url": "https://helm.sh/docs/chart_template_guide/control_structures/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Flow Control\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure there is a space between the `-` and the rest of your directive when using chomping modifiers.\n• Be careful with the chomping modifiers as they can easily consume newlines and affect the output.\n• Use the `indent` function to help manage whitespace in templates.\n• The `|-` marker in YAML takes a multi-line string, which can be useful for embedding large blocks of data inside manifests.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/control_structures", "title": "Flow Control", "description": "Control structures (called \"actions\" in template parlance) provide you, the template author, with the ability to control the flow of a template's generation. Helm's template language provides the following control structures: if/else for creating conditional blocks, with to specify a scope, and range, which provides a \"for each\"-style loop.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:26:14", "type": "best_practices", "page_metadata": {"ogDescription": "A quick overview on the flow structure within templates.", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Flow Control", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "A quick overview on the flow structure within templates.", "title": "Helm | Flow Control\n", "ogUrl": "https://helm.sh/docs/chart_template_guide/control_structures/", "language": "en", "description": "A quick overview on the flow structure within templates.", "twitter:description": "A quick overview on the flow structure within templates.", "og:url": "https://helm.sh/docs/chart_template_guide/control_structures/", "og:title": ["Flow Control", "Flow Control"], "twitter:title": "Helm | Flow Control", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "f8593b3e-a123-4d2f-ba0a-8825a31fb758", "sourceURL": "https://helm.sh/docs/chart_template_guide/control_structures", "url": "https://helm.sh/docs/chart_template_guide/control_structures/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Use OCI-based registries\"?\n\nAssistant: Beginning in Helm 3, you can use container registries with OCI support to store and share chart packages. Beginning in Helm v3.8.0, OCI support is enabled by default.\n\nHere's a detailed explanation:\n\n\n## OCI support prior to v3.8.0\nOCI support graduated from experimental to general availability with Helm v3.8.0. In prior versions of Helm, OCI support behaved differently. If you were using OCI support prior to Helm v3.8.0, its important to understand what has changed with different versions of Helm.\n\n## Enabling OCI support prior to v3.8.0\nPrior to Helm v3.8.0, OCI support is _experimental_ and must be enabled.\n\nTo enable OCI experimental support for Helm versions prior to v3.8.0, set `HELM_EXPERIMENTAL_OCI` in your environment. For example:\n\n```console\nexport HELM_EXPERIMENTAL_OCI=1\n```\n\n## OCI feature deprecation and behavior changes with v3.8.0\nThe release of [Helm v3.8.0](https://github.com/helm/helm/releases/tag/v3.8.0), the following features and behaviors are different from previous versions of Helm:\n\n- When setting a chart in the dependencies as OCI, the version can be set to a range like other dependencies.\n- SemVer tags that include build information can be pushed and used. OCI registries don't support `+` as a tag character. Helm translates the `+` to `_` when stored as a tag.\n- The `helm registry login` command now follows the same structure as the Docker CLI for storing credentials. The same location for registry configuration can be passed to both Helm and the Docker CLI.\n\n## OCI feature deprecation and behavior changes with v3.7.0\nThe release of [Helm v3.7.0](https://github.com/helm/helm/releases/tag/v3.7.0) included the implementation of [HIP 6](https://github.com/helm/community/blob/main/hips/hip-0006.md) for OCI support. As a result, the following features and behaviors are different from previous versions of Helm:\n\n- The `helm chart` subcommand has been removed.\n- The chart cache has been removed (no `helm chart list` etc.).\n- OCI registry references are now always prefixed with `oci://`.\n- The basename of the registry reference must _always_ match the chart's name.\n- The tag of the registry reference must _always_ match the chart's semantic version (i.e. no `latest` tags).\n- The chart layer media type was switched from `application/tar+gzip` to `application/vnd.cncf.helm.chart.content.v1.tar+gzip`.\n\n## Using an OCI-based registry\n### Helm repositories in OCI-based registries\nA [Helm repository](https://helm.sh/docs/topics/chart_repository/) is a way to house and distribute packaged Helm charts. An OCI-based registry can contain zero or more Helm repositories and each of those repositories can contain zero or more packaged Helm charts.\n\n### Use hosted registries\nThere are several hosted container registries with OCI support that you can use for your Helm charts. For example:\n\n- [Amazon ECR](https://docs.aws.amazon.com/AmazonECR/latest/userguide/push-oci-artifact.html)\n- [Azure Container Registry](https://docs.microsoft.com/azure/container-registry/container-registry-helm-repos#push-chart-to-registry-as-oci-artifact)\n- [Docker Hub](https://docs.docker.com/docker-hub/oci-artifacts/)\n- [Google Artifact Registry](https://cloud.google.com/artifact-registry/docs/helm/manage-charts)\n- [Harbor](https://goharbor.io/docs/main/administration/user-defined-oci-artifact/)\n- [IBM Cloud Container Registry](https://cloud.ibm.com/docs/Registry?topic=Registry-registry_helm_charts)\n- [JFrog Artifactory](https://jfrog.com/help/r/jfrog-artifactory-documentation/helm-oci-repositories)\n\nFollow the hosted container registry provider's documentation to create and configure a registry with OCI support.\n\n**Note:** You can run [Docker Registry](https://docs.docker.com/registry/deploying/) or [`zot`](https://github.com/project-zot/zot), which are OCI-based registries, on your development computer. Running an OCI-based registry on your development computer should only be used for testing purposes.\n\n## Using sigstore to sign OCI-based charts\nThe [`helm-sigstore`](https://github.com/sigstore/helm-sigstore) plugin allows using [Sigstore](https://sigstore.dev/) to sign Helm charts with the same tools used to sign container images. This provides an alternative to the [GPG-based provenance](https://helm.sh/docs/topics/provenance/) supported by classic [chart repositories](https://helm.sh/docs/topics/chart_repository/).\n\nFor more details on using the `helm sigstore` plugin, see [that project's documentation](https://github.com/sigstore/helm-sigstore/blob/main/USAGE.md).\n\n## Commands for working with registries\n### The `registry` subcommand\n\n#### `login`\nlogin to a registry (with manual password entry)\n\n```console\n$ helm registry login -u myuser localhost:5000\nPassword:\nLogin succeeded\n``` \n\n#### `logout`\nlogout from a registry\n\n```console\n$ helm registry logout localhost:5000\nLogout succeeded\n``` \n\n### The `push` subcommand\nUpload a chart to an OCI-based registry:\n\n```console\n$ helm push mychart-0.1.0.tgz oci://localhost:5000/helm-charts\nPushed: localhost:5000/helm-charts/mychart:0.1.0\nDigest: sha256:ec5f08ee7be8b557cd1fc5ae1a0ac985e8538da7c93f51a51eff4b277509a723\n```\n\nThe `push` subcommand can only be used against `.tgz` files created ahead of time using `helm package`.\n\nWhen using `helm push` to upload a chart an OCI registry, the reference must be prefixed with `oci://` and must not contain the basename or tag.\n\nThe registry reference basename is inferred from the chart's name, and the tag is inferred from the chart's semantic version. This is currently a strict requirement.\n\nCertain registries require the repository and/or namespace (if specified) to be created beforehand. Otherwise, an error will be produced during the `helm push` operation.\n\nIf you have created a [provenance file](https://helm.sh/docs/topics/provenance/) ( `.prov`), and it is present next to the chart `.tgz` file, it will automatically be uploaded to the registry upon `push`. This results in an extra layer on [the Helm chart manifest](https://helm.sh/docs/topics/registries/#helm-chart-manifest).\n\nUsers of the [helm-push plugin](https://github.com/chartmuseum/helm-push) (for uploading charts to [ChartMuseum](https://helm.sh/docs/topics/chart_repository/#chartmuseum-repository-server)) may experience issues, since the plugin conflicts with the new, built-in `push`. As of version v0.10.0, the plugin has been renamed to `cm-push`.\n\n## Other subcommands\nSupport for the `oci://` protocol is also available in various other subcommands. Here is a complete list:\n\n- `helm pull`\n- `helm show`\n- `helm template`\n- `helm install`\n- `helm upgrade`\n\nThe basename (chart name) of the registry reference _is_ included for any type of action involving chart download (vs. `helm push` where it is omitted).\n\nHere are a few examples of using the subcommands listed above against OCI-based charts:\n\n```fallback\n$ helm pull oci://localhost:5000/helm-charts/mychart --version 0.1.0\nPulled: localhost:5000/helm-charts/mychart:0.1.0\nDigest: sha256:0be7ec9fb7b962b46d81e4bb74fdcdb7089d965d3baca9f85d64948b05b402ff\n\n$ helm show all oci://localhost:5000/helm-charts/mychart --version 0.1.0\napiVersion: v2\nappVersion: 1.16.0\ndescription: A Helm chart for Kubernetes\nname: mychart\n...\n\n$ helm template myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0\n---\n# Source: mychart/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\n...\n\n$ helm install myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0\nNAME: myrelease\nLAST DEPLOYED: Wed Oct 27 15:11:40 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n...\n\n$ helm upgrade myrelease oci://localhost:5000/helm-charts/mychart --version 0.2.0\nRelease \"myrelease\" has been upgraded. Happy Helming!\nNAME: myrelease\nLAST DEPLOYED: Wed Oct 27 15:12:05 2021\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 2\nNOTES:\n...\n```\n\n## Specifying dependencies\nDependencies of a chart can be pulled from a registry using the `dependency update` subcommand.\n\nThe `repository` for a given entry in `Chart.yaml` is specified as the registry reference without the basename:\n\n```fallback\ndependencies:\n  - name: mychart\n    version: \"2.7.0\"\n    repository: \"oci://localhost:5000/myrepo\"\n```\n\nThis will fetch `oci://localhost:5000/myrepo/mychart:2.7.0` when `dependency update` is executed.\n\n## Helm chart manifest\nExample Helm chart manifest as represented in a registry (note the `mediaType` fields):\n\n```json\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.cncf.helm.config.v1+json\",\n    \"digest\": \"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\",\n    \"size\": 117\n  },\n  \"layers\": [\\\n    {\\\n      \"mediaType\": \"application/vnd.cncf.helm.chart.content.v1.tar+gzip\",\\\n      \"digest\": \"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\",\\\n      \"size\": 2487\\\n    }\\\n  ]\n}\n```\n\nThe following example contains a [provenance file](https://helm.sh/docs/topics/provenance/) (note the extra layer):\n\n```json\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.cncf.helm.config.v1+json\",\n    \"digest\": \"sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111\",\n    \"size\": 117\n  },\n  \"layers\": [\\\n    {\\\n      \"mediaType\": \"application/vnd.cncf.helm.chart.content.v1.tar+gzip\",\\\n      \"digest\": \"sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617\",\\\n      \"size\": 2487\\\n    },\\\n    {\\\n      \"mediaType\": \"application/vnd.cncf.helm.chart.provenance.v1.prov\",\\\n      \"digest\": \"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a\",\\\n      \"size\": 643\\\n    }\\\n  ]\n}\n```\n\n## Migrating from chart repos\nMigrating from classic [chart repositories](https://helm.sh/docs/topics/chart_repository/) (index.yaml-based repos) is as simple using `helm pull`, then using `helm push` to upload the resulting `.tgz` files to a registry.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/registries", "title": "Use OCI-based registries", "description": "Beginning in Helm 3, you can use container registries with OCI support to store and share chart packages. Beginning in Helm v3.8.0, OCI support is enabled by default.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 21:26:51", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/topics/registries/", "twitter:card": "summary", "title": "Helm | Use OCI-based registries\n", "og:title": ["Use OCI-based registries", "Use OCI-based registries"], "twitter:description": "Describes how to use OCI for Chart distribution.", "description": "Describes how to use OCI for Chart distribution.", "ogTitle": "Use OCI-based registries", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "Describes how to use OCI for Chart distribution.", "og:description": "Describes how to use OCI for Chart distribution.", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/registries/", "language": "en", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Use OCI-based registries", "scrapeId": "0810d495-12b4-43fd-a35e-9bca89b584f7", "sourceURL": "https://helm.sh/docs/topics/registries", "url": "https://helm.sh/docs/topics/registries/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Use OCI-based registries\"?\n\nAssistant: Here are some code examples:\n\n### Enabling OCI support prior to v3.8.0\n```yaml\nexport HELM_EXPERIMENTAL_OCI=1\n```\n\n### Registry login command\n```yaml\n$ helm registry login -u myuser localhost:5000\nPassword:\nLogin succeeded\n```\n\n### Registry logout command\n```yaml\n$ helm registry logout localhost:5000\nLogout succeeded\n```\n\n### Push command\n```yaml\n$ helm push mychart-0.1.0.tgz oci://localhost:5000/helm-charts\nPushed: localhost:5000/helm-charts/mychart:0.1.0\nDigest: sha256:ec5f08ee7be8b557cd1fc5ae1a0ac985e8538da7c93f51a51eff4b277509a723\n```\n\n### Pull command\n```yaml\n$ helm pull oci://localhost:5000/helm-charts/mychart --version 0.1.0\nPulled: localhost:5000/helm-charts/mychart:0.1.0\nDigest: sha256:0be7ec9fb7b962b46d81e4bb74fdcdb7089d965d3baca9f85d64948b05b402ff\n```\n\n### Show command\n```yaml\n$ helm show all oci://localhost:5000/helm-charts/mychart --version 0.1.0\napiVersion: v2\nappVersion: 1.16.0\ndescription: A Helm chart for Kubernetes\nname: mychart\n...\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/registries", "title": "Use OCI-based registries", "description": "Beginning in Helm 3, you can use container registries with OCI support to store and share chart packages. Beginning in Helm v3.8.0, OCI support is enabled by default.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 21:26:51", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/topics/registries/", "twitter:card": "summary", "title": "Helm | Use OCI-based registries\n", "og:title": ["Use OCI-based registries", "Use OCI-based registries"], "twitter:description": "Describes how to use OCI for Chart distribution.", "description": "Describes how to use OCI for Chart distribution.", "ogTitle": "Use OCI-based registries", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "Describes how to use OCI for Chart distribution.", "og:description": "Describes how to use OCI for Chart distribution.", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/registries/", "language": "en", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Use OCI-based registries", "scrapeId": "0810d495-12b4-43fd-a35e-9bca89b584f7", "sourceURL": "https://helm.sh/docs/topics/registries", "url": "https://helm.sh/docs/topics/registries/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Use OCI-based registries\"?\n\nAssistant: Here are the recommended best practices:\n\n• When using `helm push` to upload a chart to an OCI registry, the reference must be prefixed with `oci://` and must not contain the basename or tag.\n• Certain registries require the repository and/or namespace (if specified) to be created beforehand. Otherwise, an error will be produced during the `helm push` operation.\n• If you have created a provenance file ( `.prov`), and it is present next to the chart `.tgz` file, it will automatically be uploaded to the registry upon `push`.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/registries", "title": "Use OCI-based registries", "description": "Beginning in Helm 3, you can use container registries with OCI support to store and share chart packages. Beginning in Helm v3.8.0, OCI support is enabled by default.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 21:26:51", "type": "best_practices", "page_metadata": {"ogUrl": "https://helm.sh/docs/topics/registries/", "twitter:card": "summary", "title": "Helm | Use OCI-based registries\n", "og:title": ["Use OCI-based registries", "Use OCI-based registries"], "twitter:description": "Describes how to use OCI for Chart distribution.", "description": "Describes how to use OCI for Chart distribution.", "ogTitle": "Use OCI-based registries", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "Describes how to use OCI for Chart distribution.", "og:description": "Describes how to use OCI for Chart distribution.", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/registries/", "language": "en", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Use OCI-based registries", "scrapeId": "0810d495-12b4-43fd-a35e-9bca89b584f7", "sourceURL": "https://helm.sh/docs/topics/registries", "url": "https://helm.sh/docs/topics/registries/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Community Guides\"?\n\nAssistant: Learn here about the development process for the Helm project itself and how you can contribute.\n\nHere's a detailed explanation:\n\n\n## Quicklinks\n[**Developer Guide** \\ Instructions for setting up your environment for developing Helm.](https://helm.sh/docs/community/developers/) [**Release Checklist** \\ Checklist for maintainers when releasing the next version of Helm.](https://helm.sh/docs/community/release_checklist/) [**Related Projects and Documentation** \\ third-party tools, plugins and documentation provided by the community!](https://helm.sh/docs/community/related/) [**The History of the Project** \\ Provides a high-level overview of the project's history.](https://helm.sh/docs/community/history/) [**Localizing Helm Documentation** \\ Instructions for localizing the Helm documentation.](https://helm.sh/docs/community/localization/) \n\n[Helm Project](https://github.com/helm/helm)[Blog](https://helm.sh/blog)[Events](https://www.cncf.io/community/kubecon-cloudnativecon-events/)[Quick Start Guide](https://helm.sh/docs/intro/quickstart/)[Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md)[Charts](https://artifacthub.io/)[Introduction](https://helm.sh/docs/topics/charts/)[Chart tips & tricks](https://helm.sh/docs/howto/charts_tips_and_tricks/)[Developing Charts](https://helm.sh/docs/chart_template_guide/)[Search 800+ Charts](https://artifacthub.io/)[Development](https://github.com/helm/community/blob/main/communication.md)[#helm-dev](https://kubernetes.slack.com/messages/C51E88VDG) _(slack)_[Contribution Guide](https://github.com/helm/helm/blob/main/CONTRIBUTING.md)[Maintainers](https://github.com/helm/helm/blob/main/OWNERS)[Weekly Meetings](https://github.com/helm/community/blob/main/communication.md#meetings)[Community](https://github.com/helm/community)[#helm-users](https://kubernetes.slack.com/messages/C0NH30761 \"#helm-users on Slack\") _(slack)_[Mailing List](https://lists.cncf.io/g/cncf-helm/topics)[Logos](https://github.com/cncf/artwork/tree/master/projects/helm) & [Art](https://github.com/helm/community/tree/main/art)[Twitter](https://twitter.com/helmpack) \n\n[We are a Cloud Native Computing Foundation graduated project.](https://www.cncf.io/ \"Cloud Native Computing Foundation\") \n\n[![We are a Cloud Native Computing Foundation project](https://helm.sh/img/cncf-white.svg)](https://www.cncf.io/ \"Cloud Native Computing Foundation\")\n", "metadata": {"source_url": "https://helm.sh/docs/community", "title": "Community Guides", "description": "Learn here about the development process for the Helm project itself and how you can contribute.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:27:00", "type": "overview", "page_metadata": {"twitter:title": "Helm | Community", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/community/", "ogTitle": "Community", "title": "Helm | Docs\n", "ogUrl": "https://helm.sh/docs/community/", "og:title": ["Community", "Community"], "twitter:card": "summary", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "6229deca-21d0-4e23-b8f6-cbea389ccacf", "sourceURL": "https://helm.sh/docs/community", "url": "https://helm.sh/docs/community/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Community Guides\"?\n\nAssistant: Here are the recommended best practices:\n\n• Documentation distributed under CC-BY-4.0\n• The Linux Foundation has registered trademarks and uses trademarks.\n", "metadata": {"source_url": "https://helm.sh/docs/community", "title": "Community Guides", "description": "Learn here about the development process for the Helm project itself and how you can contribute.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:27:00", "type": "best_practices", "page_metadata": {"twitter:title": "Helm | Community", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/community/", "ogTitle": "Community", "title": "Helm | Docs\n", "ogUrl": "https://helm.sh/docs/community/", "og:title": ["Community", "Community"], "twitter:card": "summary", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "6229deca-21d0-4e23-b8f6-cbea389ccacf", "sourceURL": "https://helm.sh/docs/community", "url": "https://helm.sh/docs/community/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Role-Based Access Control\"?\n\nAssistant: This part of the Best Practices Guide discusses the creation and formatting of RBAC resources in chart manifests.\n\nHere's a detailed explanation:\n\n\n## YAML Configuration\nRBAC and ServiceAccount configuration should happen under separate keys. They are separate things. Splitting these two concepts out in the YAML disambiguates them and makes this clearer.\n\n```yaml\nrbac:\n  # Specifies whether RBAC resources should be created\n  create: true\n\nserviceAccount:\n  # Specifies whether a ServiceAccount should be created\n  create: true\n  # The name of the ServiceAccount to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name:\n```\n\nThis structure can be extended for more complex charts that require multiple ServiceAccounts.\n\n```yaml\nsomeComponent:\n  serviceAccount:\n    create: true\n    name:\nanotherComponent:\n  serviceAccount:\n    create: true\n    name:\n```\n\n## RBAC Resources Should be Created by Default\n`rbac.create` should be a boolean value controlling whether RBAC resources are created. The default should be `true`. Users who wish to manage RBAC access controls themselves can set this value to `false` (in which case see below).\n\n## Using RBAC Resources\n`serviceAccount.name` should be set to the name of the ServiceAccount to be used by access-controlled resources created by the chart. If `serviceAccount.create` is true, then a ServiceAccount with this name should be created. If the name is not set, then a name is generated using the `fullname` template, If `serviceAccount.create` is false, then it should not be created, but it should still be associated with the same resources so that manually-created RBAC resources created later that reference it will function correctly. If `serviceAccount.create` is false and the name is not specified, then the default ServiceAccount is used.\n\nThe following helper template should be used for the ServiceAccount.\n\n```yaml\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"mychart.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create -}}\n    {{ default (include \"mychart.fullname\" .) .Values.serviceAccount.name }}\n{{- else -}}\n    {{ default \"default\" .Values.serviceAccount.name }}\n{{- end -}}\n{{- end -}}\n```\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/rbac", "title": "Role-Based Access Control", "description": "This part of the Best Practices Guide discusses the creation and formatting of RBAC resources in chart manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:27:26", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/chart_best_practices/rbac/", "twitter:description": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "og:url": "https://helm.sh/docs/chart_best_practices/rbac/", "language": "en", "twitter:card": "summary", "ogTitle": "Role-Based Access Control", "ogDescription": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "description": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "twitter:title": "Helm | Role-Based Access Control", "og:description": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "viewport": "width=device-width,initial-scale=1", "og:title": ["Role-Based Access Control", "Role-Based Access Control"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Role-Based Access Control\n", "scrapeId": "cf8b5dc2-7eb0-4492-86e5-d99d627a093a", "sourceURL": "https://helm.sh/docs/chart_best_practices/rbac", "url": "https://helm.sh/docs/chart_best_practices/rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Role-Based Access Control\"?\n\nAssistant: Here are some code examples:\n\n### RBAC Configuration Example\n```yaml\nrbac:\n  # Specifies whether RBAC resources should be created\n  create: true\n\nserviceAccount:\n  # Specifies whether a ServiceAccount should be created\n  create: true\n  # The name of the ServiceAccount to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name:\n\n```\n\n### Complex Chart Example\n```yaml\nsomeComponent:\n  serviceAccount:\n    create: true\n    name:\nanotherComponent:\n  serviceAccount:\n    create: true\n    name:\n\n```\n\n### Helper Template for ServiceAccount\n```yaml\n{{/*\nCreate the name of the service account to use\n*/}}\n{{- define \"mychart.serviceAccountName\" -}}\n{{- if .Values.serviceAccount.create -}}\n    {{ default (include \"mychart.fullname\" .) .Values.serviceAccount.name }}\n{{- else -}}\n    {{ default \"default\" .Values.serviceAccount.name }}\n{{- end -}}\n{{- end -}}\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/rbac", "title": "Role-Based Access Control", "description": "This part of the Best Practices Guide discusses the creation and formatting of RBAC resources in chart manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:27:26", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/chart_best_practices/rbac/", "twitter:description": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "og:url": "https://helm.sh/docs/chart_best_practices/rbac/", "language": "en", "twitter:card": "summary", "ogTitle": "Role-Based Access Control", "ogDescription": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "description": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "twitter:title": "Helm | Role-Based Access Control", "og:description": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "viewport": "width=device-width,initial-scale=1", "og:title": ["Role-Based Access Control", "Role-Based Access Control"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Role-Based Access Control\n", "scrapeId": "cf8b5dc2-7eb0-4492-86e5-d99d627a093a", "sourceURL": "https://helm.sh/docs/chart_best_practices/rbac", "url": "https://helm.sh/docs/chart_best_practices/rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Role-Based Access Control\"?\n\nAssistant: Here are the recommended best practices:\n\n• RBAC and ServiceAccount configuration should be separated in YAML for clarity.\n• `rbac.create` should default to `true` to ensure RBAC resources are created by default.\n• If `serviceAccount.create` is false, ensure the ServiceAccount is still associated with the resources.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_best_practices/rbac", "title": "Role-Based Access Control", "description": "This part of the Best Practices Guide discusses the creation and formatting of RBAC resources in chart manifests.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:27:26", "type": "best_practices", "page_metadata": {"ogUrl": "https://helm.sh/docs/chart_best_practices/rbac/", "twitter:description": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "og:url": "https://helm.sh/docs/chart_best_practices/rbac/", "language": "en", "twitter:card": "summary", "ogTitle": "Role-Based Access Control", "ogDescription": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "description": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "twitter:title": "Helm | Role-Based Access Control", "og:description": "Discusses the creation and formatting of RBAC resources in Chart manifests.", "viewport": "width=device-width,initial-scale=1", "og:title": ["Role-Based Access Control", "Role-Based Access Control"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Role-Based Access Control\n", "scrapeId": "cf8b5dc2-7eb0-4492-86e5-d99d627a093a", "sourceURL": "https://helm.sh/docs/chart_best_practices/rbac", "url": "https://helm.sh/docs/chart_best_practices/rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Variables\"?\n\nAssistant: An overview of how to use variables in Helm templates, including scoping, assignment, and examples of usage in templates.\n\nHere's a detailed explanation:\n\n\n## Introduction to Variables\nWith functions, pipelines, objects, and control structures under our belts, we can turn to one of the more basic ideas in many programming languages: variables. In templates, they are less frequently used. But we will see how to use them to simplify code, and to make better use of `with` and `range`.\n\n## Scoping Issues with Variables\nIn an earlier example, we saw that this code will fail:\n\n```yaml\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ .Release.Name }}\n  {{- end }}\n```\n\n`Release.Name` is not inside of the scope that's restricted in the `with` block. One way to work around scoping issues is to assign objects to variables that can be accessed without respect to the present scope.\n\n## Defining Variables in Helm Templates\nIn Helm templates, a variable is a named reference to another object. It follows the form `$name`. Variables are assigned with a special assignment operator: `:=`. We can rewrite the above to use a variable for `Release.Name`.\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- $relname := .Release.Name -}}\n  {{- with .Values.favorite }}\n  drink: {{ .drink | default \"tea\" | quote }}\n  food: {{ .food | upper | quote }}\n  release: {{ $relname }}\n  {{- end }}\n```\n\nNotice that before we start the `with` block, we assign `$relname := .Release.Name`. Now inside of the `with` block, the `$relname` variable still points to the release name.\n\n## Example Output of Variable Usage\nRunning that will produce this:\n\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: viable-badger-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"PIZZA\"\n  release: viable-badger\n```\n\nVariables are particularly useful in `range` loops. They can be used on list-like objects to capture both the index and the value.\n\n## Using Variables in Range Loops\n```yaml\n  toppings: |-\n    {{- range $index, $topping := .Values.pizzaToppings }}\n      {{ $index }}: {{ $topping }}\n    {{- end }}\n```\n\nNote that `range` comes first, then the variables, then the assignment operator, then the list. This will assign the integer index (starting from zero) to `$index` and the value to `$topping`. Running it will produce:\n\n```yaml\n  toppings: |-\n      0: mushrooms\n      1: cheese\n      2: peppers\n      3: onions\n```\n\nFor data structures that have both a key and a value, we can use `range` to get both.\n\n## Looping Through Key-Value Pairs\nFor example, we can loop through `.Values.favorite` like this:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  myvalue: \"Hello World\"\n  {{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n  {{- end }}\n```\n\nNow on the first iteration, `$key` will be `drink` and `$val` will be `coffee`, and on the second, `$key` will be `food` and `$val` will be `pizza`. Running the above will generate this:\n\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: eager-rabbit-configmap\ndata:\n  myvalue: \"Hello World\"\n  drink: \"coffee\"\n  food: \"pizza\"\n```\n\n## Variable Scope\nVariables are normally not \"global\". They are scoped to the block in which they are declared. Earlier, we assigned `$relname` in the top level of the template. That variable will be in scope for the entire template. But in our last example, `$key` and `$val` will only be in scope inside of the `{{ range... }}{{ end }}\nblock.\n\n## Root Context Variable\nHowever, there is one variable that will always point to the root context: - `$` -. This can be very useful when you are looping in a range and you need to know the chart's release name.\n\n## Example of Using Root Context Variable\nAn example illustrating this:\n\n```yaml\n{{- range .Values.tlsSecrets }}\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .name }}\n  labels:\n    # Many helm templates would use `.` below, but that will not work,\n    # however `$` will work here\n    app.kubernetes.io/name: {{ template \"fullname\" $ }}\n    # I cannot reference .Chart.Name, but I can do $.Chart.Name\n    helm.sh/chart: \"{{ $.Chart.Name }}-{{ $.Chart.Version }}\"\n    app.kubernetes.io/instance: \"{{ $.Release.Name }}\"\n    # Value from appVersion in Chart.yaml\n    app.kubernetes.io/version: \"{{ $.Chart.AppVersion }}\"\n    app.kubernetes.io/managed-by: \"{{ $.Release.Service }}\"\ntype: kubernetes.io/tls\ndata:\n  tls.crt: {{ .certificate }}\n  tls.key: {{ .key }}\n{{- end }}\n```\n\n## Conclusion\nSo far we have looked at just one template declared in just one file. But one of the powerful features of the Helm template language is its ability to declare multiple templates and use them together.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/variables", "title": "Variables", "description": "An overview of how to use variables in Helm templates, including scoping, assignment, and examples of usage in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:27:59", "type": "overview", "page_metadata": {"twitter:title": "Helm | Variables", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Using variables in templates.", "title": "Helm | Variables\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/chart_template_guide/variables/", "ogDescription": "Using variables in templates.", "og:title": ["Variables", "Variables"], "ogTitle": "Variables", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_template_guide/variables/", "og:description": "Using variables in templates.", "twitter:card": "summary", "description": "Using variables in templates.", "language": "en", "scrapeId": "e2f5c978-62c8-4252-8d80-7c28d6892710", "sourceURL": "https://helm.sh/docs/chart_template_guide/variables", "url": "https://helm.sh/docs/chart_template_guide/variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Variables\"?\n\nAssistant: Here are some code examples:\n\n### Variable Assignment in Helm Template\n```yaml\n{{- $relname := .Release.Name -}}\n```\n\n### Using Range with Index and Value\n```yaml\n{{- range $index, $topping := .Values.pizzaToppings }}\n  {{ $index }}: {{ $topping }}\n{{- end }}\n```\n\n### Looping Through Key-Value Pairs\n```yaml\n{{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n{{- end }}\n```\n\n### Using Root Context Variable\n```yaml\n{{- range .Values.tlsSecrets }}\n  app.kubernetes.io/name: {{ template \"fullname\" $ }}\n  helm.sh/chart: \"{{ $.Chart.Name }}-{{ $.Chart.Version }}\"\n  app.kubernetes.io/instance: \"{{ $.Release.Name }}\"\n  app.kubernetes.io/version: \"{{ $.Chart.AppVersion }}\"\n  app.kubernetes.io/managed-by: \"{{ $.Release.Service }}\"\n{{- end }}\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/variables", "title": "Variables", "description": "An overview of how to use variables in Helm templates, including scoping, assignment, and examples of usage in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:27:59", "type": "code_examples", "page_metadata": {"twitter:title": "Helm | Variables", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Using variables in templates.", "title": "Helm | Variables\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/chart_template_guide/variables/", "ogDescription": "Using variables in templates.", "og:title": ["Variables", "Variables"], "ogTitle": "Variables", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_template_guide/variables/", "og:description": "Using variables in templates.", "twitter:card": "summary", "description": "Using variables in templates.", "language": "en", "scrapeId": "e2f5c978-62c8-4252-8d80-7c28d6892710", "sourceURL": "https://helm.sh/docs/chart_template_guide/variables", "url": "https://helm.sh/docs/chart_template_guide/variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Variables\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use variables to simplify code and manage scope effectively.\n• Assign variables before entering a `with` block to maintain access to outer scope values.\n• Utilize the root context variable `$` when you need to access global values within loops.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/variables", "title": "Variables", "description": "An overview of how to use variables in Helm templates, including scoping, assignment, and examples of usage in templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:27:59", "type": "best_practices", "page_metadata": {"twitter:title": "Helm | Variables", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Using variables in templates.", "title": "Helm | Variables\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/chart_template_guide/variables/", "ogDescription": "Using variables in templates.", "og:title": ["Variables", "Variables"], "ogTitle": "Variables", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_template_guide/variables/", "og:description": "Using variables in templates.", "twitter:card": "summary", "description": "Using variables in templates.", "language": "en", "scrapeId": "e2f5c978-62c8-4252-8d80-7c28d6892710", "sourceURL": "https://helm.sh/docs/chart_template_guide/variables", "url": "https://helm.sh/docs/chart_template_guide/variables/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Advanced Helm Techniques\"?\n\nAssistant: This section explains various advanced features and techniques for using Helm.\n\nHere's a detailed explanation:\n\n\n## Post Rendering\nPost rendering gives chart installers the ability to manually manipulate, configure, and/or validate rendered manifests before they are installed by Helm. This allows users with advanced configuration needs to be able to use tools like [`kustomize`](https://kustomize.io/) to apply configuration changes without the need to fork a public chart or requiring chart maintainers to specify every last configuration option for a piece of software. There are also use cases for injecting common tools and side cars in enterprise environments or analysis of the manifests before deployment.\n\n### Prerequisites\n\n- Helm 3.1+\n\n### Usage\n\nA post-renderer can be any executable that accepts rendered Kubernetes manifests on STDIN and returns valid Kubernetes manifests on STDOUT. It should return an non-0 exit code in the event of a failure. This is the only \"API\" between the two components. It allows for great flexibility in what you can do with your post-render process.\n\nA post renderer can be used with `install`, `upgrade`, and `template`. To use a post-renderer, use the `--post-renderer` flag with a path to the renderer executable you wish to use:\n\n```shell\n$ helm install mychart stable/wordpress --post-renderer ./path/to/executable\n```\n\nIf the path does not contain any separators, it will search in $PATH, otherwise it will resolve any relative paths to a fully qualified path\n\nIf you wish to use multiple post-renderers, call all of them in a script or together in whatever binary tool you have built. In bash, this would be as simple as `renderer1 | renderer2 | renderer3`.\n\nYou can see an example of using `kustomize` as a post renderer [here](https://github.com/thomastaylor312/advanced-helm-demos/tree/master/post-render).\n\n### Caveats\n\nWhen using post renderers, there are several important things to keep in mind. The most important of these is that when using a post-renderer, all people modifying that release **MUST** use the same renderer in order to have repeatable builds. This feature is purposefully built to allow any user to switch out which renderer they are using or to stop using a renderer, but this should be done deliberately to avoid accidental modification or data loss.\n\nOne other important note is around security. If you are using a post-renderer, you should ensure it is coming from a reliable source (as is the case for any other arbitrary executable). Using non-trusted or non-verified renderers is NOT recommended as they have full access to rendered templates, which often contain secret data.\n\n### Custom Post Renderers\n\nThe post render step offers even more flexibility when used in the Go SDK. Any post renderer only needs to implement the following Go interface:\n\n```go\ntype PostRenderer interface {\n    // Run expects a single buffer filled with Helm rendered manifests. It\n    // expects the modified results to be returned on a separate buffer or an\n    // error if there was an issue or failure while running the post render step\n    Run(renderedManifests *bytes.Buffer) (modifiedManifests *bytes.Buffer, err error)\n}\n```\n\nFor more information on using the Go SDK, See the [Go SDK section](https://helm.sh/docs/topics/advanced/#go-sdk)\n", "metadata": {"source_url": "https://helm.sh/docs/topics/advanced", "title": "Advanced Helm Techniques", "description": "This section explains various advanced features and techniques for using Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:28:10", "type": "overview", "page_metadata": {"twitter:description": "Explains various advanced features for Helm power users", "description": "Explains various advanced features for Helm power users", "og:url": "https://helm.sh/docs/topics/advanced/", "ogTitle": "Advanced Helm Techniques", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Advanced Helm Techniques", "twitter:card": "summary", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Advanced Helm Techniques\n", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Explains various advanced features for Helm power users", "og:title": ["Advanced Helm Techniques", "Advanced Helm Techniques"], "og:description": "Explains various advanced features for Helm power users", "ogUrl": "https://helm.sh/docs/topics/advanced/", "scrapeId": "f8473574-299a-42ff-8d25-625cf165af56", "sourceURL": "https://helm.sh/docs/topics/advanced", "url": "https://helm.sh/docs/topics/advanced/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Advanced Helm Techniques\"?\n\nAssistant: Here are some code examples:\n\n### Helm Install with Post Renderer\n```yaml\n$ helm install mychart stable/wordpress --post-renderer ./path/to/executable\n```\n\n### Set HELM_DRIVER to ConfigMap\n```yaml\nexport HELM_DRIVER=configmap\n```\n\n### Set HELM_DRIVER to SQL\n```yaml\nexport HELM_DRIVER=sql\nexport HELM_DRIVER_SQL_CONNECTION_STRING=postgresql://helm-postgres:5432/helm?user=helm&password=changeme\n```\n\n### Retrieve Release Information\n```yaml\nkubectl get secret --all-namespaces -l \"owner=helm\"\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/advanced", "title": "Advanced Helm Techniques", "description": "This section explains various advanced features and techniques for using Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:28:10", "type": "code_examples", "page_metadata": {"twitter:description": "Explains various advanced features for Helm power users", "description": "Explains various advanced features for Helm power users", "og:url": "https://helm.sh/docs/topics/advanced/", "ogTitle": "Advanced Helm Techniques", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Advanced Helm Techniques", "twitter:card": "summary", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Advanced Helm Techniques\n", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Explains various advanced features for Helm power users", "og:title": ["Advanced Helm Techniques", "Advanced Helm Techniques"], "og:description": "Explains various advanced features for Helm power users", "ogUrl": "https://helm.sh/docs/topics/advanced/", "scrapeId": "f8473574-299a-42ff-8d25-625cf165af56", "sourceURL": "https://helm.sh/docs/topics/advanced", "url": "https://helm.sh/docs/topics/advanced/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Advanced Helm Techniques\"?\n\nAssistant: Here are the recommended best practices:\n\n• When using post renderers, all people modifying that release MUST use the same renderer for repeatable builds.\n• Ensure post-renderers come from a reliable source to avoid security risks.\n• Be cautious when switching to the ConfigMap backend as it may expose sensitive data.\n• Make your SQL database production ready and enable permission management to mirror Kubernetes RBAC.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/advanced", "title": "Advanced Helm Techniques", "description": "This section explains various advanced features and techniques for using Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:28:10", "type": "best_practices", "page_metadata": {"twitter:description": "Explains various advanced features for Helm power users", "description": "Explains various advanced features for Helm power users", "og:url": "https://helm.sh/docs/topics/advanced/", "ogTitle": "Advanced Helm Techniques", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Advanced Helm Techniques", "twitter:card": "summary", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Advanced Helm Techniques\n", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Explains various advanced features for Helm power users", "og:title": ["Advanced Helm Techniques", "Advanced Helm Techniques"], "og:description": "Explains various advanced features for Helm power users", "ogUrl": "https://helm.sh/docs/topics/advanced/", "scrapeId": "f8473574-299a-42ff-8d25-625cf165af56", "sourceURL": "https://helm.sh/docs/topics/advanced", "url": "https://helm.sh/docs/topics/advanced/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Frequently Asked Questions\"?\n\nAssistant: This section provides help with the most common questions.\n\nHere's a detailed explanation:\n\n\n## Quicklinks\n[**Changes Since Helm 2**](https://helm.sh/docs/faq/changes_since_helm2/) [**Installing**](https://helm.sh/docs/faq/installing/) [**Uninstalling**](https://helm.sh/docs/faq/uninstalling/) [**Troubleshooting**](https://helm.sh/docs/faq/troubleshooting/)\n\n[Helm Project](https://github.com/helm/helm)[Blog](https://helm.sh/blog)[Events](https://www.cncf.io/community/kubecon-cloudnativecon-events/)[Quick Start Guide](https://helm.sh/docs/intro/quickstart/)[Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md)[Charts](https://artifacthub.io/)[Introduction](https://helm.sh/docs/topics/charts/)[Chart tips & tricks](https://helm.sh/docs/howto/charts_tips_and_tricks/)[Developing Charts](https://helm.sh/docs/chart_template_guide/)[Search 800+ Charts](https://artifacthub.io/)[Development](https://github.com/helm/community/blob/main/communication.md)[#helm-dev](https://kubernetes.slack.com/messages/C51E88VDG) _(slack)_[Contribution Guide](https://github.com/helm/helm/blob/main/CONTRIBUTING.md)[Maintainers](https://github.com/helm/helm/blob/main/OWNERS)[Weekly Meetings](https://github.com/helm/community/blob/main/communication.md#meetings)[Community](https://github.com/helm/community)[#helm-users](https://kubernetes.slack.com/messages/C0NH30761 \"#helm-users on Slack\") _(slack)_[Mailing List](https://lists.cncf.io/g/cncf-helm/topics)[Logos](https://github.com/cncf/artwork/tree/master/projects/helm) & [Art](https://github.com/helm/community/tree/main/art)[Twitter](https://twitter.com/helmpack)\n", "metadata": {"source_url": "https://helm.sh/docs/faq", "title": "Frequently Asked Questions", "description": "This section provides help with the most common questions.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:28:19", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/faq/", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/faq/", "title": "Helm | Docs\n", "twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Frequently Asked Questions", "twitter:card": "summary", "twitter:title": "Helm | Frequently Asked Questions", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "og:title": ["Frequently Asked Questions", "Frequently Asked Questions"], "scrapeId": "90cd9bd7-6278-426a-a025-d02df27cd79d", "sourceURL": "https://helm.sh/docs/faq", "url": "https://helm.sh/docs/faq/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Frequently Asked Questions\"?\n\nAssistant: Here are the recommended best practices:\n\n• We'd love your help making this document better. To add, correct, or remove information, file an issue or send us a pull request.\n", "metadata": {"source_url": "https://helm.sh/docs/faq", "title": "Frequently Asked Questions", "description": "This section provides help with the most common questions.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:28:19", "type": "best_practices", "page_metadata": {"ogUrl": "https://helm.sh/docs/faq/", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/faq/", "title": "Helm | Docs\n", "twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Frequently Asked Questions", "twitter:card": "summary", "twitter:title": "Helm | Frequently Asked Questions", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "og:title": ["Frequently Asked Questions", "Frequently Asked Questions"], "scrapeId": "90cd9bd7-6278-426a-a025-d02df27cd79d", "sourceURL": "https://helm.sh/docs/faq", "url": "https://helm.sh/docs/faq/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Named Templates\"?\n\nAssistant: This section covers how to define named templates in Helm, their usage, and best practices for naming and organizing templates.\n\nHere's a detailed explanation:\n\n\n## Introduction to Named Templates\nIt is time to move beyond one template, and begin to create others. In this section, we will see how to define named templates in one file, and then use them elsewhere. A named template (sometimes called a partial or a subtemplate) is simply a template defined inside of a file, and given a name. We'll see two ways to create them, and a few different ways to use them.\n\n## Template Actions\nIn the Flow Control section we introduced three actions for declaring and managing templates: define, template, and block. In this section, we'll cover those three actions, and also introduce a special-purpose include function that works similarly to the template action.\n\n## Naming Templates\nAn important detail to keep in mind when naming templates: template names are global. If you declare two templates with the same name, whichever one is loaded last will be the one used. Because templates in subcharts are compiled together with top-level templates, you should be careful to name your templates with chart-specific names. One popular naming convention is to prefix each defined template with the name of the chart: {{ define \"mychart.labels\" }}.\n\n## Partials and _ files\nSo far, we've used one file, and that one file has contained a single template. But Helm's template language allows you to create named embedded templates, that can be accessed by name elsewhere. Before we get to the nuts-and-bolts of writing those templates, there is file naming convention that deserves mention: Most files in templates/ are treated as if they contain Kubernetes manifests. The NOTES.txt is one exception. But files whose name begins with an underscore (_) are assumed to not have a manifest inside. These files are not rendered to Kubernetes object definitions, but are available everywhere within other chart templates for use. These files are used to store partials and helpers.\n\n## Declaring and using templates with define and template\nThe define action allows us to create a named template inside of a template file. Its syntax goes like this:\n\n```yaml\n{{- define \"MY.NAME\" }}\n  # body of template here\n{{- end }}\n```\n\nFor example, we can define a template to encapsulate a Kubernetes block of labels:\n\n```yaml\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\n```\n\nNow we can embed this template inside of our existing ConfigMap, and then include it with the template action:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  {{- template \"mychart.labels\" }}\ndata:\n  myvalue: \"Hello World\"\n  {{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n  {{- end }}\n```\n\nWhen the template engine reads this file, it will store away the reference to mychart.labels until template \"mychart.labels\" is called. Then it will render that template inline.\n\n## Setting the scope of a template\nIn the template we defined above, we did not use any objects. We just used functions. Let's modify our defined template to include the chart name and chart version:\n\n```yaml\n{{/* Generate basic labels */}}\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n    chart: {{ .Chart.Name }}\n    version: {{ .Chart.Version }}\n{{- end }}\n```\n\nIf we render this, we will get an error like this:\n\n```console\n$ helm install --dry-run moldy-jaguar ./mychart\nError: unable to build kubernetes objects from release manifest: error validating \"\": error validating data: [unknown object type \"nil\" in ConfigMap.metadata.labels.chart, unknown object type \"nil\" in ConfigMap.metadata.labels.version]\n```\n\nTo see what rendered, re-run with --disable-openapi-validation:\n`helm install --dry-run --disable-openapi-validation moldy-jaguar ./mychart`.\n\n## The include function\nSay we've defined a simple template that looks like this:\n\n```yaml\n{{- define \"mychart.app\" -}}\napp_name: {{ .Chart.Name }}\napp_version: \"{{ .Chart.Version }}\"\n{{- end -}}\n```\n\nNow say I want to insert this both into the labels: section of my template, and also the data: section:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  labels:\n    {{ template \"mychart.app\" . }}\ndata:\n  myvalue: \"Hello World\"\n  {{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n  {{- end }}\n{{ template \"mychart.app\" . }}\n```\n\nIf we render this, we will get an error like this:\n\n```console\n$ helm install --dry-run measly-whippet ./mychart\nError: unable to build kubernetes objects from release manifest: error validating \"\": error validating data: [ValidationError(ConfigMap): unknown field \"app_name\" in io.k8s.api.core.v1.ConfigMap, ValidationError(ConfigMap): unknown field \"app_version\" in io.k8s.api.core.v1.ConfigMap]\n```\n\nTo work around this case, Helm provides an alternative to template that will import the contents of a template into the present pipeline where it can be passed along to other functions in the pipeline.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/named_templates", "title": "Named Templates", "description": "This section covers how to define named templates in Helm, their usage, and best practices for naming and organizing templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:28:42", "type": "overview", "page_metadata": {"language": "en", "twitter:card": "summary", "twitter:title": "Helm | Named Templates", "twitter:description": "How to define named templates.", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "How to define named templates.", "viewport": "width=device-width,initial-scale=1", "og:description": "How to define named templates.", "ogUrl": "https://helm.sh/docs/chart_template_guide/named_templates/", "title": "Helm | Named Templates\n", "og:title": ["Named Templates", "Named Templates"], "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_template_guide/named_templates/", "ogDescription": "How to define named templates.", "ogTitle": "Named Templates", "scrapeId": "c772392b-1b5c-421f-b5e5-42a412a83031", "sourceURL": "https://helm.sh/docs/chart_template_guide/named_templates", "url": "https://helm.sh/docs/chart_template_guide/named_templates/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Named Templates\"?\n\nAssistant: Here are some code examples:\n\n### Defining a Named Template\n```yaml\n{{- define \"MY.NAME\" }}\n  # body of template here\n{{- end }}\n\n```\n\n### Defining Labels Template\n```yaml\n{{- define \"mychart.labels\" }}\n  labels:\n    generator: helm\n    date: {{ now | htmlDate }}\n{{- end }}\n\n```\n\n### Embedding Template in ConfigMap\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  {{- template \"mychart.labels\" }}\ndata:\n  myvalue: \"Hello World\"\n  {{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n  {{- end }}\n\n```\n\n### Setting Template Scope\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  {{- template \"mychart.labels\" . }}\n\n```\n\n### Using Include Function\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\n  labels:\n{{ include \"mychart.app\" . | indent 4 }}\ndata:\n  myvalue: \"Hello World\"\n  {{- range $key, $val := .Values.favorite }}\n  {{ $key }}: {{ $val | quote }}\n  {{- end }}\n{{ include \"mychart.app\" . | indent 2 }}\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/named_templates", "title": "Named Templates", "description": "This section covers how to define named templates in Helm, their usage, and best practices for naming and organizing templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:28:42", "type": "code_examples", "page_metadata": {"language": "en", "twitter:card": "summary", "twitter:title": "Helm | Named Templates", "twitter:description": "How to define named templates.", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "How to define named templates.", "viewport": "width=device-width,initial-scale=1", "og:description": "How to define named templates.", "ogUrl": "https://helm.sh/docs/chart_template_guide/named_templates/", "title": "Helm | Named Templates\n", "og:title": ["Named Templates", "Named Templates"], "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_template_guide/named_templates/", "ogDescription": "How to define named templates.", "ogTitle": "Named Templates", "scrapeId": "c772392b-1b5c-421f-b5e5-42a412a83031", "sourceURL": "https://helm.sh/docs/chart_template_guide/named_templates", "url": "https://helm.sh/docs/chart_template_guide/named_templates/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Named Templates\"?\n\nAssistant: Here are the recommended best practices:\n\n• Template names are global; use chart-specific names to avoid conflicts.\n• Prefix defined templates with the name of the chart to avoid naming conflicts.\n• Use the include function over template for better output formatting in YAML documents.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/named_templates", "title": "Named Templates", "description": "This section covers how to define named templates in Helm, their usage, and best practices for naming and organizing templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:28:42", "type": "best_practices", "page_metadata": {"language": "en", "twitter:card": "summary", "twitter:title": "Helm | Named Templates", "twitter:description": "How to define named templates.", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "How to define named templates.", "viewport": "width=device-width,initial-scale=1", "og:description": "How to define named templates.", "ogUrl": "https://helm.sh/docs/chart_template_guide/named_templates/", "title": "Helm | Named Templates\n", "og:title": ["Named Templates", "Named Templates"], "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_template_guide/named_templates/", "ogDescription": "How to define named templates.", "ogTitle": "Named Templates", "scrapeId": "c772392b-1b5c-421f-b5e5-42a412a83031", "sourceURL": "https://helm.sh/docs/chart_template_guide/named_templates", "url": "https://helm.sh/docs/chart_template_guide/named_templates/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Accessing Files Inside Templates\"?\n\nAssistant: This page covers how to access files within Helm templates, including methods for reading file contents, using path helpers, glob patterns, and utility functions for ConfigMaps and Secrets.\n\nHere's a detailed explanation:\n\n\n## Introduction\nIn the previous section we looked at several ways to create and access named templates. This makes it easy to import one template from within another template. But sometimes it is desirable to import a file that is not a template and inject its contents without sending the contents through the template renderer.\n\nHelm provides access to files through the .Files object. Before we get going with the template examples, though, there are a few things to note about how this works:\n\n- It is okay to add extra files to your Helm chart. These files will be bundled. Be careful, though. Charts must be smaller than 1M because of the storage limitations of Kubernetes objects.\n- Some files cannot be accessed through the .Files object, usually for security reasons.\n  - Files in templates/ cannot be accessed.\n  - Files excluded using .helmignore cannot be accessed.\n  - Files outside of a Helm application subchart cannot be accessed.\n- Charts do not preserve UNIX mode information, so file-level permissions will have no impact on the availability of a file when it comes to the .Files object.\n\n## Basic example\nWith those caveats behind, let's write a template that reads three files into our ConfigMap. To get started, we will add three files to the chart, putting all three directly inside of the mychart/ directory.\n\nconfig1.toml:\n```toml\nmessage = Hello from config 1\n```\n\nconfig2.toml:\n```toml\nmessage = This is config 2\n```\n\nconfig3.toml:\n```toml\nmessage = Goodbye from config 3\n```\n\nEach of these is a simple TOML file (think old-school Windows INI files). We know the names of these files, so we can use a range function to loop through them and inject their contents into our ConfigMap.\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  {{- $files := .Files }}\n  {{- range tuple \"config1.toml\" \"config2.toml\" \"config3.toml\" }}\n  {{ . }}: |-\n    {{ $files.Get . }}\n  {{- end }}\n```\n\nThis ConfigMap uses several of the techniques discussed in previous sections. For example, we create a $files variable to hold a reference to the .Files object. We also use the tuple function to create a list of files that we loop through. Then we print each file name ( {{ . }}: |-) followed by the contents of the file {{ $files.Get . }}.\n\nRunning this template will produce a single ConfigMap with the contents of all three files:\n\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: quieting-giraf-configmap\ndata:\n  config1.toml: |-\n    message = Hello from config 1\n\n  config2.toml: |-\n    message = This is config 2\n\n  config3.toml: |-\n    message = Goodbye from config 3\n``\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/accessing_files", "title": "Accessing Files Inside Templates", "description": "This page covers how to access files within Helm templates, including methods for reading file contents, using path helpers, glob patterns, and utility functions for ConfigMaps and Secrets.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:29:02", "type": "overview", "page_metadata": {"language": "en", "twitter:description": "How to access files from within a template.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "How to access files from within a template.", "og:title": ["Accessing Files Inside Templates", "Accessing Files Inside Templates"], "og:description": "How to access files from within a template.", "twitter:card": "summary", "title": "Helm | Accessing Files Inside Templates\n", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Accessing Files Inside Templates", "ogUrl": "https://helm.sh/docs/chart_template_guide/accessing_files/", "ogTitle": "Accessing Files Inside Templates", "description": "How to access files from within a template.", "og:url": "https://helm.sh/docs/chart_template_guide/accessing_files/", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "67980eca-12ae-44d3-a131-b902b4f753ca", "sourceURL": "https://helm.sh/docs/chart_template_guide/accessing_files", "url": "https://helm.sh/docs/chart_template_guide/accessing_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Accessing Files Inside Templates\"?\n\nAssistant: Here are some code examples:\n\n### Basic ConfigMap Example\n```yaml\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  {{- $files := .Files }}\n  {{- range tuple \"config1.toml\" \"config2.toml\" \"config3.toml\" }}\n  {{ . }}: |-\n    {{ $files.Get . }}\n  {{- end }}\n```\n```\n\n### Basic Secret Example\n```yaml\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ .Release.Name }}-secret\ntype: Opaque\ndata:\n  token: |-\n    {{ .Files.Get \"config1.toml\" | b64enc }}\n```\n```\n\n### Using Glob Patterns\n```yaml\n```yaml\n{{ $currentScope := .}}\n{{ range $path, $_ :=  .Files.Glob  \"**.yaml\" }}\n    {{- with $currentScope}}\n        {{ .Files.Get $path }}\n    {{- end }}\n{{ end }}\n```\n```\n\n### ConfigMap and Secret Utility Functions\n```yaml\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: conf\ndata:\n{{ (.Files.Glob \"foo/*\").AsConfig | indent 2 }}\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: very-secret\ntype: Opaque\ndata:\n{{ (.Files.Glob \"bar/*\").AsSecrets | indent 2 }}\n```\n```\n\n### Accessing Lines of a File\n```yaml\n```yaml\ndata:\n  some-file.txt: {{ range .Files.Lines \"foo/bar.txt\" }}\n    {{ . }}{{ end }}\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/accessing_files", "title": "Accessing Files Inside Templates", "description": "This page covers how to access files within Helm templates, including methods for reading file contents, using path helpers, glob patterns, and utility functions for ConfigMaps and Secrets.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:29:02", "type": "code_examples", "page_metadata": {"language": "en", "twitter:description": "How to access files from within a template.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "How to access files from within a template.", "og:title": ["Accessing Files Inside Templates", "Accessing Files Inside Templates"], "og:description": "How to access files from within a template.", "twitter:card": "summary", "title": "Helm | Accessing Files Inside Templates\n", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Accessing Files Inside Templates", "ogUrl": "https://helm.sh/docs/chart_template_guide/accessing_files/", "ogTitle": "Accessing Files Inside Templates", "description": "How to access files from within a template.", "og:url": "https://helm.sh/docs/chart_template_guide/accessing_files/", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "67980eca-12ae-44d3-a131-b902b4f753ca", "sourceURL": "https://helm.sh/docs/chart_template_guide/accessing_files", "url": "https://helm.sh/docs/chart_template_guide/accessing_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Accessing Files Inside Templates\"?\n\nAssistant: Here are the recommended best practices:\n\n• Charts must be smaller than 1M due to Kubernetes storage limitations.\n• Files in templates/ cannot be accessed through the .Files object.\n• Files excluded using .helmignore cannot be accessed.\n• Use the .Files.Glob method for extracting files with glob patterns.\n• Use utility methods for ConfigMaps and Secrets for better organization.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/accessing_files", "title": "Accessing Files Inside Templates", "description": "This page covers how to access files within Helm templates, including methods for reading file contents, using path helpers, glob patterns, and utility functions for ConfigMaps and Secrets.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:29:02", "type": "best_practices", "page_metadata": {"language": "en", "twitter:description": "How to access files from within a template.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "How to access files from within a template.", "og:title": ["Accessing Files Inside Templates", "Accessing Files Inside Templates"], "og:description": "How to access files from within a template.", "twitter:card": "summary", "title": "Helm | Accessing Files Inside Templates\n", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Accessing Files Inside Templates", "ogUrl": "https://helm.sh/docs/chart_template_guide/accessing_files/", "ogTitle": "Accessing Files Inside Templates", "description": "How to access files from within a template.", "og:url": "https://helm.sh/docs/chart_template_guide/accessing_files/", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "67980eca-12ae-44d3-a131-b902b4f753ca", "sourceURL": "https://helm.sh/docs/chart_template_guide/accessing_files", "url": "https://helm.sh/docs/chart_template_guide/accessing_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Creating a NOTES.txt File\"?\n\nAssistant: In this section we are going to look at Helm's tool for providing instructions to your chart users. At the end of a `helm install` or `helm upgrade`, Helm can print out a block of helpful information for users. This information is highly customizable using templates.\n\nHere's a detailed explanation:\n\n\n## Introduction\nIn this section we are going to look at Helm's tool for providing instructions to your chart users. At the end of a `helm install` or `helm upgrade`, Helm can print out a block of helpful information for users. This information is highly customizable using templates.\n\n## Creating a NOTES.txt File\nTo add installation notes to your chart, simply create a `templates/NOTES.txt` file. This file is plain text, but it is processed like a template, and has all the normal template functions and objects available.\n\n## Example NOTES.txt File\nLet's create a simple `NOTES.txt` file:\n\n```fallback\nThank you for installing {{ .Chart.Name }}.\n\nYour release is named {{ .Release.Name }}.\n\nTo learn more about the release, try:\n\n  $ helm status {{ .Release.Name }}\n  $ helm get all {{ .Release.Name }}\n```\n\nNow if we run `helm install rude-cardinal ./mychart` we will see this message at the bottom:\n\n```fallback\nRESOURCES:\n==> v1/Secret\nNAME                   TYPE      DATA      AGE\nrude-cardinal-secret   Opaque    1         0s\n\n==> v1/ConfigMap\nNAME                      DATA      AGE\nrude-cardinal-configmap   3         0s\n\nNOTES:\nThank you for installing mychart.\n\nYour release is named rude-cardinal.\n\nTo learn more about the release, try:\n\n  $ helm status rude-cardinal\n  $ helm get all rude-cardinal\n```\n\nUsing `NOTES.txt` this way is a great way to give your users detailed information about how to use their newly installed chart. Creating a `NOTES.txt` file is strongly recommended, though it is not required.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/notes_files", "title": "Creating a NOTES.txt File", "description": "In this section we are going to look at Helm's tool for providing instructions to your chart users. At the end of a `helm install` or `helm upgrade`, Helm can print out a block of helpful information for users. This information is highly customizable using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:29:12", "type": "overview", "page_metadata": {"description": "How to provide instructions to your Chart users.", "twitter:title": "Helm | Creating a NOTES.txt File", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:url": "https://helm.sh/docs/chart_template_guide/notes_files/", "ogUrl": "https://helm.sh/docs/chart_template_guide/notes_files/", "twitter:description": "How to provide instructions to your Chart users.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "How to provide instructions to your Chart users.", "title": "Helm | Creating a NOTES.txt File\n", "twitter:card": "summary", "ogDescription": "How to provide instructions to your Chart users.", "ogTitle": "Creating a NOTES.txt File", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Creating a NOTES.txt File", "Creating a NOTES.txt File"], "scrapeId": "3d22fcfa-f1e1-459e-9562-36d4944970dd", "sourceURL": "https://helm.sh/docs/chart_template_guide/notes_files", "url": "https://helm.sh/docs/chart_template_guide/notes_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Creating a NOTES.txt File\"?\n\nAssistant: Here are some code examples:\n\n### Sample NOTES.txt File\n```yaml\nThank you for installing {{ .Chart.Name }}.\n\nYour release is named {{ .Release.Name }}.\n\nTo learn more about the release, try:\n\n  $ helm status {{ .Release.Name }}\n  $ helm get all {{ .Release.Name }}\n\n```\n\n### Output of helm install command\n```yaml\nRESOURCES:\n==> v1/Secret\nNAME                   TYPE      DATA      AGE\nrude-cardinal-secret   Opaque    1         0s\n\n==> v1/ConfigMap\nNAME                      DATA      AGE\nrude-cardinal-configmap   3         0s\n\nNOTES:\nThank you for installing mychart.\n\nYour release is named rude-cardinal.\n\nTo learn more about the release, try:\n\n  $ helm status rude-cardinal\n  $ helm get all rude-cardinal\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/notes_files", "title": "Creating a NOTES.txt File", "description": "In this section we are going to look at Helm's tool for providing instructions to your chart users. At the end of a `helm install` or `helm upgrade`, Helm can print out a block of helpful information for users. This information is highly customizable using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:29:12", "type": "code_examples", "page_metadata": {"description": "How to provide instructions to your Chart users.", "twitter:title": "Helm | Creating a NOTES.txt File", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:url": "https://helm.sh/docs/chart_template_guide/notes_files/", "ogUrl": "https://helm.sh/docs/chart_template_guide/notes_files/", "twitter:description": "How to provide instructions to your Chart users.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "How to provide instructions to your Chart users.", "title": "Helm | Creating a NOTES.txt File\n", "twitter:card": "summary", "ogDescription": "How to provide instructions to your Chart users.", "ogTitle": "Creating a NOTES.txt File", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Creating a NOTES.txt File", "Creating a NOTES.txt File"], "scrapeId": "3d22fcfa-f1e1-459e-9562-36d4944970dd", "sourceURL": "https://helm.sh/docs/chart_template_guide/notes_files", "url": "https://helm.sh/docs/chart_template_guide/notes_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Creating a NOTES.txt File\"?\n\nAssistant: Here are the recommended best practices:\n\n• Creating a NOTES.txt file is strongly recommended, though it is not required.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/notes_files", "title": "Creating a NOTES.txt File", "description": "In this section we are going to look at Helm's tool for providing instructions to your chart users. At the end of a `helm install` or `helm upgrade`, Helm can print out a block of helpful information for users. This information is highly customizable using templates.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:29:12", "type": "best_practices", "page_metadata": {"description": "How to provide instructions to your Chart users.", "twitter:title": "Helm | Creating a NOTES.txt File", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:url": "https://helm.sh/docs/chart_template_guide/notes_files/", "ogUrl": "https://helm.sh/docs/chart_template_guide/notes_files/", "twitter:description": "How to provide instructions to your Chart users.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "How to provide instructions to your Chart users.", "title": "Helm | Creating a NOTES.txt File\n", "twitter:card": "summary", "ogDescription": "How to provide instructions to your Chart users.", "ogTitle": "Creating a NOTES.txt File", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Creating a NOTES.txt File", "Creating a NOTES.txt File"], "scrapeId": "3d22fcfa-f1e1-459e-9562-36d4944970dd", "sourceURL": "https://helm.sh/docs/chart_template_guide/notes_files", "url": "https://helm.sh/docs/chart_template_guide/notes_files/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Glossary\"?\n\nAssistant: A comprehensive glossary of terms related to Helm and Kubernetes.\n\nHere's a detailed explanation:\n\n\n## Chart\nA Helm package that contains information sufficient for installing a set of Kubernetes resources into a Kubernetes cluster.\n\nCharts contain a `Chart.yaml` file as well as templates, default values (`values.yaml`), and dependencies.\n\nCharts are developed in a well-defined directory structure, and then packaged into an archive format called a _chart archive_.\n\n## Chart Archive\nA _chart archive_ is a tarred and gzipped (and optionally signed) chart.\n\n## Chart Dependency (Subcharts)\nCharts may depend upon other charts. There are two ways a dependency may occur:\n\n- Soft dependency: A chart may simply not function without another chart being installed in a cluster. Helm does not provide tooling for this case. In this case, dependencies may be managed separately.\n- Hard dependency: A chart may contain (inside of its `charts/` directory) another chart upon which it depends. In this case, installing the chart will install all of its dependencies. In this case, a chart and its dependencies are managed as a collection.\n\nWhen a chart is packaged (via `helm package`) all of its hard dependencies are bundled with it.\n\n## Chart Version\nCharts are versioned according to the [SemVer 2 spec](https://semver.org/). A version number is required on every chart.\n\n## Chart.yaml\nInformation about a chart is stored in a special file called `Chart.yaml`. Every chart must have this file.\n\n## Helm (and helm)\nHelm is the package manager for Kubernetes. As an operating system package manager makes it easy to install tools on an OS, Helm makes it easy to install applications and resources into Kubernetes clusters.\n\nWhile _Helm_ is the name of the project, the command line client is also named `helm`. By convention, when speaking of the project, _Helm_ is capitalized. When speaking of the client, _helm_ is in lowercase.\n\n## Helm Configuration Files (XDG)\nHelm stores its configuration files in XDG directories. These directories are created the first time `helm` is run.\n\n## Kube Config (KUBECONFIG)\nThe Helm client learns about Kubernetes clusters by using files in the _Kube_ config file format. By default, Helm attempts to find this file in the place where `kubectl` creates it ( `$HOME/.kube/config`).\n\n## Lint (Linting)\nTo _lint_ a chart is to validate that it follows the conventions and requirements of the Helm chart standard. Helm provides tools to do this, notably the `helm lint` command.\n\n## Provenance (Provenance file)\nHelm charts may be accompanied by a _provenance file_ which provides information about where the chart came from and what it contains.\n\nProvenance files are one part of the Helm security story. A provenance contains a cryptographic hash of the chart archive file, the Chart.yaml data, and a signature block (an OpenPGP \"clearsign\" block). When coupled with a keychain, this provides chart users with the ability to:\n\n- Validate that a chart was signed by a trusted party\n- Validate that the chart file has not been tampered with\n- Validate the contents of a chart metadata (`Chart.yaml`)\n- Quickly match a chart to its provenance data\n\nProvenance files have the `.prov` extension, and can be served from a chart repository server or any other HTTP server.\n\n## Release\nWhen a chart is installed, the Helm library creates a _release_ to track that installation.\n\nA single chart may be installed many times into the same cluster, and create many different releases. For example, one can install three PostgreSQL databases by running `helm install` three times with a different release name.\n\n## Release Number (Release Version)\nA single release can be updated multiple times. A sequential counter is used to track releases as they change. After a first `helm install`, a release will have _release number_ 1. Each time a release is upgraded or rolled back, the release number will be incremented.\n\n## Rollback\nA release can be upgraded to a newer chart or configuration. But since release history is stored, a release can also be _rolled back_ to a previous release number. This is done with the `helm rollback` command.\n\nImportantly, a rolled back release will receive a new release number.\n\n| Operation | Release Number |\n| --- | --- |\n| install | release 1 |\n| upgrade | release 2 |\n| upgrade | release 3 |\n| rollback 1 | release 4 (but running the same config as release 1) |\n\nThe above table illustrates how release numbers increment across install, upgrade, and rollback.\n\n## Helm Library (or SDK)\nThe Helm Library (or SDK) refers to the Go code that interacts directly with the Kubernetes API server to install, upgrade, query, and remove Kubernetes resources. It can be imported into a project to use Helm as a client library instead of a CLI.\n\n## Repository (Repo, Chart Repository)\nHelm charts may be stored on dedicated HTTP servers called _chart repositories_ (_repositories_, or just _repos_).\n\nA chart repository server is a simple HTTP server that can serve an `index.yaml` file that describes a batch of charts, and provides information on where each chart can be downloaded from. (Many chart repositories serve the charts as well as the `index.yaml` file.)\n\nA Helm client can point to zero or more chart repositories. By default, Helm clients are not configured with any chart repositories. Chart repositories can be added at any time using the `helm repo add` command.\n\n## Chart Registry (OCI-based Registry)\nA Helm Chart Registry is an [OCI-based](https://opencontainers.org/about/overview/) storage and distribution system that is used to host and share Helm chart packages. For more information, see the [Helm documentation on registries](https://helm.sh/docs/topics/registries/).\n\n## Values (Values Files, values.yaml)\nValues provide a way to override template defaults with your own information.\n\nHelm Charts are \"parameterized\", which means the chart developer may expose configuration that can be overridden at installation time. For example, a chart may expose a `username` field that allows setting a user name for a service.\n\nThese exposed variables are called _values_ in Helm parlance.\n\nValues can be set during `helm install` and `helm upgrade` operations, either by passing them in directly, or by using a `values.yaml` file.\n", "metadata": {"source_url": "https://helm.sh/docs/glossary", "title": "Glossary", "description": "A comprehensive glossary of terms related to Helm and Kubernetes.", "has_code_examples": false, "has_best_practices": false, "section_count": 17, "timestamp": "2025-02-27 21:29:40", "type": "overview", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Terms used to describe components of Helm's architecture.", "description": "Terms used to describe components of Helm's architecture.", "twitter:title": "Helm | Glossary", "og:title": ["Glossary", "Glossary"], "og:description": "Terms used to describe components of Helm's architecture.", "ogTitle": "Glossary", "ogUrl": "https://helm.sh/docs/glossary/", "twitter:description": "Terms used to describe components of Helm's architecture.", "og:url": "https://helm.sh/docs/glossary/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "title": "Helm | Docs\n", "scrapeId": "0ac9e8dc-cd70-4383-86ca-99361f42e975", "sourceURL": "https://helm.sh/docs/glossary", "url": "https://helm.sh/docs/glossary/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Kubernetes Distribution Guide\"?\n\nAssistant: This document captures information about using Helm in specific Kubernetes environments. Please contribute more details about any distros (sorted alphabetically) if desired.\n\nHere's a detailed explanation:\n\n\n## AKS\nHelm works with [Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/kubernetes-helm).\n\n## DC/OS\nHelm has been tested and is working on Mesospheres DC/OS 1.11 Kubernetes platform, and requires no additional configuration.\n\n## EKS\nHelm works with Amazon Elastic Kubernetes Service (Amazon EKS): [Using Helm with Amazon EKS](https://docs.aws.amazon.com/eks/latest/userguide/helm.html).\n\n## GKE\nGoogle's GKE hosted Kubernetes platform is known to work with Helm, and requires no additional configuration.\n\n## scripts/local-cluster and Hyperkube\nHyperkube configured via `scripts/local-cluster.sh` is known to work. For raw Hyperkube you may need to do some manual configuration.\n\n## IKS\nHelm works with [IBM Cloud Kubernetes Service](https://cloud.ibm.com/docs/containers?topic=containers-helm).\n\n## KIND (Kubernetes IN Docker)\nHelm is regularly tested on [KIND](https://github.com/kubernetes-sigs/kind).\n\n## KubeOne\nHelm works in clusters that are set up by KubeOne without caveats.\n\n## Kubermatic\nHelm works in user clusters that are created by Kubermatic without caveats. Since seed cluster can be set up in different ways Helm support depends on their configuration.\n\n## MicroK8s\nHelm can be enabled in [MicroK8s](https://microk8s.io/) using the command:\n`microk8s.enable helm3`.\n\n## Minikube\nHelm is tested and known to work with [Minikube](https://github.com/kubernetes/minikube). It requires no additional configuration.\n\n## Openshift\nHelm works straightforward on OpenShift Online, OpenShift Dedicated, OpenShift Container Platform (version >= 3.6) or OpenShift Origin (version >= 3.6). To learn more read [this blog](https://blog.openshift.com/getting-started-helm-openshift/) post.\n\n## Platform9\nHelm is pre-installed with [Platform9 Managed Kubernetes](https://platform9.com/managed-kubernetes/?utm_source=helm_distro_notes). Platform9 provides access to all official Helm charts through the App Catalog UI and native Kubernetes CLI. Additional repositories can be manually added. Further details are available in this [Platform9 App Catalog article](https://platform9.com/support/deploying-kubernetes-apps-platform9-managed-kubernetes/?utm_source=helm_distro_notes).\n\n## Ubuntu with kubeadm\nKubernetes bootstrapped with `kubeadm` is known to work on the following Linux distributions:\n\n- Ubuntu 16.04\n- Fedora release 25\n\nSome versions of Helm (v2.0.0-beta2) require you to `export KUBECONFIG=/etc/kubernetes/admin.conf` or create a `~/.kube/config`.\n\n## VMware Tanzu Kubernetes Grid\nHelm runs on VMware Tanzu Kubernetes Grid, TKG, without needing configuration changes. The Tanzu CLI can manage installing packages for [helm-controller](https://fluxcd.io/flux/components/helm/) allowing for declaratively managing Helm chart releases. Further details available in the TKG documentation for [CLI-Managed Packages](https://docs.vmware.com/en/VMware-Tanzu-Kubernetes-Grid/1.6/vmware-tanzu-kubernetes-grid-16/GUID-packages-user-managed-index.html#package-locations-and-dependencies-5).\n", "metadata": {"source_url": "https://helm.sh/docs/topics/kubernetes_distros", "title": "Kubernetes Distribution Guide", "description": "This document captures information about using Helm in specific Kubernetes environments. Please contribute more details about any distros (sorted alphabetically) if desired.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-27 21:29:53", "type": "overview", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/topics/kubernetes_distros/", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Kubernetes Distribution Guide", "og:url": "https://helm.sh/docs/topics/kubernetes_distros/", "ogTitle": "Kubernetes Distribution Guide", "og:description": "Captures information about using Helm in specific Kubernetes environments.", "title": "Helm | Kubernetes Distribution Guide\n", "language": "en", "description": "Captures information about using Helm in specific Kubernetes environments.", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Kubernetes Distribution Guide", "Kubernetes Distribution Guide"], "twitter:description": "Captures information about using Helm in specific Kubernetes environments.", "ogDescription": "Captures information about using Helm in specific Kubernetes environments.", "scrapeId": "74206d13-57af-44be-86a2-ff60fb3adc03", "sourceURL": "https://helm.sh/docs/topics/kubernetes_distros", "url": "https://helm.sh/docs/topics/kubernetes_distros/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Kubernetes Distribution Guide\"?\n\nAssistant: Here are some code examples:\n\n### Enable Helm in MicroK8s\n```yaml\nmicrok8s.enable helm3\n```\n\n### Export KUBECONFIG for Helm\n```yaml\nexport KUBECONFIG=/etc/kubernetes/admin.conf\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/kubernetes_distros", "title": "Kubernetes Distribution Guide", "description": "This document captures information about using Helm in specific Kubernetes environments. Please contribute more details about any distros (sorted alphabetically) if desired.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-27 21:29:53", "type": "code_examples", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/topics/kubernetes_distros/", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Kubernetes Distribution Guide", "og:url": "https://helm.sh/docs/topics/kubernetes_distros/", "ogTitle": "Kubernetes Distribution Guide", "og:description": "Captures information about using Helm in specific Kubernetes environments.", "title": "Helm | Kubernetes Distribution Guide\n", "language": "en", "description": "Captures information about using Helm in specific Kubernetes environments.", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Kubernetes Distribution Guide", "Kubernetes Distribution Guide"], "twitter:description": "Captures information about using Helm in specific Kubernetes environments.", "ogDescription": "Captures information about using Helm in specific Kubernetes environments.", "scrapeId": "74206d13-57af-44be-86a2-ff60fb3adc03", "sourceURL": "https://helm.sh/docs/topics/kubernetes_distros", "url": "https://helm.sh/docs/topics/kubernetes_distros/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Kubernetes Distribution Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• Contribute more details about any distros sorted alphabetically if desired.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/kubernetes_distros", "title": "Kubernetes Distribution Guide", "description": "This document captures information about using Helm in specific Kubernetes environments. Please contribute more details about any distros (sorted alphabetically) if desired.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-27 21:29:53", "type": "best_practices", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/topics/kubernetes_distros/", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Kubernetes Distribution Guide", "og:url": "https://helm.sh/docs/topics/kubernetes_distros/", "ogTitle": "Kubernetes Distribution Guide", "og:description": "Captures information about using Helm in specific Kubernetes environments.", "title": "Helm | Kubernetes Distribution Guide\n", "language": "en", "description": "Captures information about using Helm in specific Kubernetes environments.", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Kubernetes Distribution Guide", "Kubernetes Distribution Guide"], "twitter:description": "Captures information about using Helm in specific Kubernetes environments.", "ogDescription": "Captures information about using Helm in specific Kubernetes environments.", "scrapeId": "74206d13-57af-44be-86a2-ff60fb3adc03", "sourceURL": "https://helm.sh/docs/topics/kubernetes_distros", "url": "https://helm.sh/docs/topics/kubernetes_distros/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Role-based Access Control\"?\n\nAssistant: This guide covers how to manage user access in Kubernetes using Role-based Access Control (RBAC), including how to grant roles to users and service accounts, and examples of managing access at both namespace and cluster levels.\n\nHere's a detailed explanation:\n\n\n## Managing user accounts\nAll Kubernetes clusters have two categories of users: service accounts managed by Kubernetes, and normal users.\n\nNormal users are assumed to be managed by an outside, independent service. An administrator distributing private keys, a user store like Keystone or Google Accounts, even a file with a list of usernames and passwords. In this regard, Kubernetes does not have objects which represent normal user accounts. Normal users cannot be added to a cluster through an API call.\n\nIn contrast, service accounts are users managed by the Kubernetes API. They are bound to specific namespaces, and created automatically by the API server or manually through API calls. Service accounts are tied to a set of credentials stored as Secrets, which are mounted into pods allowing in-cluster processes to talk to the Kubernetes API.\n\nAPI requests are tied to either a normal user or a service account, or are treated as anonymous requests. This means every process inside or outside the cluster, from a human user typing `kubectl` on a workstation, to kubelets on nodes, to members of the control plane, must authenticate when making requests to the API server, or be treated as an anonymous user.\n\n## Roles, ClusterRoles, RoleBindings, and ClusterRoleBindings\nIn Kubernetes, user accounts and service accounts can only view and edit resources they have been granted access to. This access is granted through the use of Roles and RoleBindings. Roles and RoleBindings are bound to a particular namespace, which grant users the ability to view and/or edit resources within that namespace the Role provides them access to.\n\nAt a cluster scope, these are called ClusterRoles and ClusterRoleBindings. Granting a user a ClusterRole grants them access to view and/or edit resources across the entire cluster. It is also required to view and/or edit resources at the cluster scope (namespaces, resource quotas, nodes).\n\nClusterRoles can be bound to a particular namespace through reference in a RoleBinding. The `admin`, `edit` and `view` default ClusterRoles are commonly used in this manner.\n\nThese are a few ClusterRoles available by default in Kubernetes. They are intended to be user-facing roles. They include super-user roles (`cluster-admin`), and roles with more granular access (`admin`, `edit`, `view`).\n\n| Default ClusterRole | Default ClusterRoleBinding | Description |\n| --- | --- | --- |\n| `cluster-admin` | `system:masters` group | Allows super-user access to perform any action on any resource. When used in a ClusterRoleBinding, it gives full control over every resource in the cluster and in all namespaces. When used in a RoleBinding, it gives full control over every resource in the rolebinding's namespace, including the namespace itself. |\n| `admin` | None | Allows admin access, intended to be granted within a namespace using a RoleBinding. If used in a RoleBinding, allows read/write access to most resources in a namespace, including the ability to create roles and rolebindings within the namespace. It does not allow write access to resource quota or to the namespace itself. |\n| `edit` | None | Allows read/write access to most objects in a namespace. It does not allow viewing or modifying roles or rolebindings. |\n| `view` | None | Allows read-only access to see most objects in a namespace. It does not allow viewing roles or rolebindings. It does not allow viewing secrets, since those are escalating.\n\n## Restricting a user account's access using RBAC\nNow that we understand the basics of Role-based Access Control, let's discuss how an administrator can restrict a user's scope of access.\n\n## Example: Grant a user read/write access to a particular namespace\nTo restrict a user's access to a particular namespace, we can use either the `edit` or the `admin` role. If your charts create or interact with Roles and Rolebindings, you'll want to use the `admin` ClusterRole.\n\nAdditionally, you may also create a RoleBinding with `cluster-admin` access. Granting a user `cluster-admin` access at the namespace scope provides full control over every resource in the namespace, including the namespace itself.\n\nFor this example, we will create a user with the `edit` Role. First, create the namespace:\n\n```console\n$ kubectl create namespace foo\n```\n\nNow, create a RoleBinding in that namespace, granting the user the `edit` role.\n\n```console\n$ kubectl create rolebinding sam-edit\n    --clusterrole edit \\​\n    --user sam \\​\n    --namespace foo\n```\n\n## Example: Grant a user read/write access at the cluster scope\nIf a user wishes to install a chart that installs cluster-scope resources (namespaces, roles, custom resource definitions, etc.), they will require cluster-scope write access.\n\nTo do that, grant the user either `admin` or `cluster-admin` access.\n\nGranting a user `cluster-admin` access grants them access to absolutely every resource available in Kubernetes, including node access with `kubectl drain` and other administrative tasks. It is highly recommended to consider providing the user `admin` access instead, or to create a custom ClusterRole tailored to their needs.\n\n```console\n$ kubectl create clusterrolebinding sam-view\n    --clusterrole view \\​\n    --user sam\n\n$ kubectl create clusterrolebinding sam-secret-reader\n    --clusterrole secret-reader \\​\n    --user sam\n```\n\n## Example: Grant a user read-only access to a particular namespace\nYou might've noticed that there is no ClusterRole available for viewing secrets. The `view` ClusterRole does not grant a user read access to Secrets due to escalation concerns. Helm stores release metadata as Secrets by default.\n\nIn order for a user to run `helm list`, they need to be able to read these secrets. For that, we will create a special `secret-reader` ClusterRole.\n\nCreate the file `cluster-role-secret-reader.yaml` and write the following content into the file:\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1​\nkind: ClusterRole​\nmetadata:​\n  name: secret-reader​\nrules:​\n- apiGroups: [\"\"]​\n  resources: [\"secrets\"]​\n  verbs: [\"get\", \"watch\", \"list\"]\n```\n\nThen, create the ClusterRole using\n\n```console\n$ kubectl create -f clusterrole-secret-reader.yaml​\n```\n\nOnce that's done, we can grant a user read access to most resources, and then grant them read access to secrets:\n\n```console\n$ kubectl create namespace foo\n\n$ kubectl create rolebinding sam-view\n    --clusterrole view \\​\n    --user sam \\​\n    --namespace foo\n\n$ kubectl create rolebinding sam-secret-reader\n    --clusterrole secret-reader \\​\n    --user sam \\​\n    --namespace foo\n```\n\n## Example: Grant a user read-only access at the cluster scope\nIn certain scenarios, it may be beneficial to grant a user cluster-scope access. For example, if a user wants to run the command `helm list --all-namespaces`, the API requires the user has cluster-scope read access.\n\nTo do that, grant the user both `view` and `secret-reader` access as described above, but with a ClusterRoleBinding.\n\n```console\n$ kubectl create clusterrolebinding sam-view\n    --clusterrole view \\​\n    --user sam\n\n$ kubectl create clusterrolebinding sam-secret-reader\n    --clusterrole secret-reader \\​\n    --user sam\n```\n\n## Additional Thoughts\nThe examples shown above utilize the default ClusterRoles provided with Kubernetes. For more fine-grained control over what resources users are granted access to, have a look at [the Kubernetes\\ documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) on creating your own custom Roles and ClusterRoles.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/rbac", "title": "Role-based Access Control", "description": "This guide covers how to manage user access in Kubernetes using Role-based Access Control (RBAC), including how to grant roles to users and service accounts, and examples of managing access at both namespace and cluster levels.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:30:18", "type": "overview", "page_metadata": {"title": "Helm | Role-based Access Control\n", "ogDescription": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "og:description": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "ogUrl": "https://helm.sh/docs/topics/rbac/", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Role-based Access Control", "twitter:card": "summary", "og:url": "https://helm.sh/docs/topics/rbac/", "description": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "viewport": "width=device-width,initial-scale=1", "og:title": ["Role-based Access Control", "Role-based Access Control"], "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Role-based Access Control", "twitter:description": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "scrapeId": "cf7dcbb8-a1c4-451e-9e15-7e08aebcdf43", "sourceURL": "https://helm.sh/docs/topics/rbac", "url": "https://helm.sh/docs/topics/rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Role-based Access Control\"?\n\nAssistant: Here are some code examples:\n\n### Create a namespace\n```yaml\n$ kubectl create namespace foo\n```\n\n### Create a RoleBinding for user with edit role\n```yaml\n$ kubectl create rolebinding sam-edit\n    --clusterrole edit \\​\n    --user sam \\​\n    --namespace foo\n```\n\n### Create ClusterRoleBinding for view role\n```yaml\n$ kubectl create clusterrolebinding sam-view\n    --clusterrole view \\​\n    --user sam\n```\n\n### Create ClusterRoleBinding for secret-reader role\n```yaml\n$ kubectl create clusterrolebinding sam-secret-reader\n    --clusterrole secret-reader \\​\n    --user sam\n```\n\n### Create ClusterRole for secret-reader\n```yaml\napiVersion: rbac.authorization.k8s.io/v1​\nkind: ClusterRole​\nmetadata:​\n  name: secret-reader​\nrules:​\n- apiGroups: [\"\"]​\n  resources: [\"secrets\"]​\n  verbs: [\"get\", \"watch\", \"list\"]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/rbac", "title": "Role-based Access Control", "description": "This guide covers how to manage user access in Kubernetes using Role-based Access Control (RBAC), including how to grant roles to users and service accounts, and examples of managing access at both namespace and cluster levels.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:30:18", "type": "code_examples", "page_metadata": {"title": "Helm | Role-based Access Control\n", "ogDescription": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "og:description": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "ogUrl": "https://helm.sh/docs/topics/rbac/", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Role-based Access Control", "twitter:card": "summary", "og:url": "https://helm.sh/docs/topics/rbac/", "description": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "viewport": "width=device-width,initial-scale=1", "og:title": ["Role-based Access Control", "Role-based Access Control"], "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Role-based Access Control", "twitter:description": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "scrapeId": "cf7dcbb8-a1c4-451e-9e15-7e08aebcdf43", "sourceURL": "https://helm.sh/docs/topics/rbac", "url": "https://helm.sh/docs/topics/rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Role-based Access Control\"?\n\nAssistant: Here are the recommended best practices:\n\n• Consider using the `admin` role instead of `cluster-admin` for users who do not need full cluster access.\n• Create custom Roles and ClusterRoles for more fine-grained control over user permissions.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/rbac", "title": "Role-based Access Control", "description": "This guide covers how to manage user access in Kubernetes using Role-based Access Control (RBAC), including how to grant roles to users and service accounts, and examples of managing access at both namespace and cluster levels.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:30:18", "type": "best_practices", "page_metadata": {"title": "Helm | Role-based Access Control\n", "ogDescription": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "og:description": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "ogUrl": "https://helm.sh/docs/topics/rbac/", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Role-based Access Control", "twitter:card": "summary", "og:url": "https://helm.sh/docs/topics/rbac/", "description": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "viewport": "width=device-width,initial-scale=1", "og:title": ["Role-based Access Control", "Role-based Access Control"], "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Role-based Access Control", "twitter:description": "Explains how Helm interacts with Kubernetes' Role-Based Access Control.", "scrapeId": "cf7dcbb8-a1c4-451e-9e15-7e08aebcdf43", "sourceURL": "https://helm.sh/docs/topics/rbac", "url": "https://helm.sh/docs/topics/rbac/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Subcharts and Global Values\"?\n\nAssistant: This page covers the concepts of subcharts in Helm, how to create them, manage values, and utilize global values across charts.\n\nHere's a detailed explanation:\n\n\n## Creating a Subchart\nFor these exercises, we'll start with the `mychart/` chart we created at the beginning of this guide, and we'll add a new chart inside of it.\n\n```console\n$ cd mychart/charts\n$ helm create mysubchart\nCreating mysubchart\n$ rm -rf mysubchart/templates/*\n```\n\nNotice that just as before, we deleted all of the base templates so that we can start from scratch. In this guide, we are focused on how templates work, not on managing dependencies. But the [Charts Guide](https://helm.sh/docs/topics/charts/) has more information on how subcharts work.\n\n## Adding Values and a Template to the Subchart\nNext, let's create a simple template and values file for our `mysubchart` chart. There should already be a `values.yaml` in `mychart/charts/mysubchart`. We'll set it up like this:\n\n```yaml\ndessert: cake\n```\n\nNext, we'll create a new ConfigMap template in `mychart/charts/mysubchart/templates/configmap.yaml`:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-cfgmap2\ndata:\n  dessert: {{ .Values.dessert }}\n```\n\nBecause every subchart is a _stand-alone chart_, we can test `mysubchart` on its own:\n\n```console\n$ helm install --generate-name --dry-run --debug mychart/charts/mysubchart\nSERVER: \"localhost:44134\"\nCHART PATH: /Users/mattbutcher/Code/Go/src/helm.sh/helm/_scratch/mychart/charts/mysubchart\nNAME:   newbie-elk\nTARGET NAMESPACE:   default\nCHART:  mysubchart 0.1.0\nMANIFEST:\n---\n# Source: mysubchart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: newbie-elk-cfgmap2\ndata:\n  dessert: cake\n```\n\n## Overriding Values from a Parent Chart\nOur original chart, `mychart` is now the _parent_ chart of `mysubchart`. This relationship is based entirely on the fact that `mysubchart` is within `mychart/charts`.\n\nBecause `mychart` is a parent, we can specify configuration in `mychart` and have that configuration pushed into `mysubchart`. For example, we can modify `mychart/values.yaml` like this:\n\n```yaml\nfavorite:\n  drink: coffee\n  food: pizza\npizzaToppings:\n  - mushrooms\n  - cheese\n  - peppers\n  - onions\n\nmysubchart:\n  dessert: ice cream\n```\n\nNote the last two lines. Any directives inside of the `mysubchart` section will be sent to the `mysubchart` chart. So if we run `helm install --generate-name --dry-run --debug mychart`, one of the things we will see is the `mysubchart` ConfigMap:\n\n```yaml\n# Source: mychart/charts/mysubchart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: unhinged-bee-cfgmap2\ndata:\n  dessert: ice cream\n```\n\nThe value at the top level has now overridden the value of the subchart.\n\nThere's an important detail to notice here. We didn't change the template of `mychart/charts/mysubchart/templates/configmap.yaml` to point to `.Values.mysubchart.dessert`. From that template's perspective, the value is still located at `.Values.dessert`. As the template engine passes values along, it sets the scope. So for the `mysubchart` templates, only values specifically for `mysubchart` will be available in `.Values`.\n\n## Global Chart Values\nGlobal values are values that can be accessed from any chart or subchart by exactly the same name. Globals require explicit declaration. You can't use an existing non-global as if it were a global.\n\nThe Values data type has a reserved section called `Values.global` where global values can be set. Let's set one in our `mychart/values.yaml` file.\n\n```yaml\nfavorite:\n  drink: coffee\n  food: pizza\npizzaToppings:\n  - mushrooms\n  - cheese\n  - peppers\n  - onions\n\nmysubchart:\n  dessert: ice cream\n\nglobal:\n  salad: caesar\n```\n\nBecause of the way globals work, both `mychart/templates/configmap.yaml` and `mysubchart/templates/configmap.yaml` should be able to access that value as `{{ .Values.global.salad }}`.\n\n`mychart/templates/configmap.yaml`:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-configmap\ndata:\n  salad: {{ .Values.global.salad }}\n```\n\n`mysubchart/templates/configmap.yaml`:\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ .Release.Name }}-cfgmap2\ndata:\n  dessert: {{ .Values.dessert }}\n  salad: {{ .Values.global.salad }}\n```\n\nNow if we run a dry run install, we'll see the same value in both outputs:\n\n```yaml\n# Source: mychart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: silly-snake-configmap\ndata:\n  salad: caesar\n\n---\n# Source: mychart/charts/mysubchart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: silly-snake-cfgmap2\ndata:\n  dessert: ice cream\n  salad: caesar\n```\n\n## Sharing Templates with Subcharts\nParent charts and subcharts can share templates. Any defined block in any chart is available to other charts.\n\nFor example, we can define a simple template like this:\n\n```yaml\n{{- define \"labels\" }}from: mychart{{ end }}\n```\n\nRecall how the labels on templates are _globally shared_. Thus, the `labels` chart can be included from any other chart.\n\nWhile chart developers have a choice between `include` and `template`, one advantage of using `include` is that `include` can dynamically reference templates:\n\n```yaml\n{{ include $mytemplate }}\n```\n\nThe above will dereference `$mytemplate`. The `template` function, in contrast, will only accept a string literal.\n\n## Avoid Using Blocks\nThe Go template language provides a `block` keyword that allows developers to provide a default implementation which is overridden later. In Helm charts, blocks are not the best tool for overriding because if multiple implementations of the same block are provided, the one selected is unpredictable.\n\nThe suggestion is to instead use `include`.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals", "title": "Subcharts and Global Values", "description": "This page covers the concepts of subcharts in Helm, how to create them, manage values, and utilize global values across charts.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:30:41", "type": "overview", "page_metadata": {"twitter:title": "Helm | Subcharts and Global Values", "ogTitle": "Subcharts and Global Values", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Interacting with a subchart's and global values.", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Interacting with a subchart's and global values.", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals/", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Interacting with a subchart's and global values.", "og:url": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals/", "ogDescription": "Interacting with a subchart's and global values.", "og:title": ["Subcharts and Global Values", "Subcharts and Global Values"], "title": "Helm | Subcharts and Global Values\n", "scrapeId": "1f54ff6d-8fec-4d81-8f75-816855d6c908", "sourceURL": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals", "url": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Subcharts and Global Values\"?\n\nAssistant: Here are some code examples:\n\n### Creating a Subchart\n```yaml\n$ cd mychart/charts\n$ helm create mysubchart\nCreating mysubchart\n$ rm -rf mysubchart/templates/*\n```\n\n### Testing Subchart on its Own\n```yaml\n$ helm install --generate-name --dry-run --debug mychart/charts/mysubchart\nSERVER: \"localhost:44134\"\nCHART PATH: /Users/mattbutcher/Code/Go/src/helm.sh/helm/_scratch/mychart/charts/mysubchart\nNAME:   newbie-elk\nTARGET NAMESPACE:   default\nCHART:  mysubchart 0.1.0\nMANIFEST:\n---\n# Source: mysubchart/templates/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: newbie-elk-cfgmap2\ndata:\n  dessert: cake\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals", "title": "Subcharts and Global Values", "description": "This page covers the concepts of subcharts in Helm, how to create them, manage values, and utilize global values across charts.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:30:41", "type": "code_examples", "page_metadata": {"twitter:title": "Helm | Subcharts and Global Values", "ogTitle": "Subcharts and Global Values", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Interacting with a subchart's and global values.", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Interacting with a subchart's and global values.", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals/", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Interacting with a subchart's and global values.", "og:url": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals/", "ogDescription": "Interacting with a subchart's and global values.", "og:title": ["Subcharts and Global Values", "Subcharts and Global Values"], "title": "Helm | Subcharts and Global Values\n", "scrapeId": "1f54ff6d-8fec-4d81-8f75-816855d6c908", "sourceURL": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals", "url": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Subcharts and Global Values\"?\n\nAssistant: Here are the recommended best practices:\n\n• Global values are useful for passing information across charts, but require careful planning to ensure templates are configured to use them properly.\n• Avoid using blocks for overriding templates; prefer using include for predictable behavior.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals", "title": "Subcharts and Global Values", "description": "This page covers the concepts of subcharts in Helm, how to create them, manage values, and utilize global values across charts.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:30:41", "type": "best_practices", "page_metadata": {"twitter:title": "Helm | Subcharts and Global Values", "ogTitle": "Subcharts and Global Values", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Interacting with a subchart's and global values.", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Interacting with a subchart's and global values.", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals/", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Interacting with a subchart's and global values.", "og:url": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals/", "ogDescription": "Interacting with a subchart's and global values.", "og:title": ["Subcharts and Global Values", "Subcharts and Global Values"], "title": "Helm | Subcharts and Global Values\n", "scrapeId": "1f54ff6d-8fec-4d81-8f75-816855d6c908", "sourceURL": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals", "url": "https://helm.sh/docs/chart_template_guide/subcharts_and_globals/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \".helmignore file\"?\n\nAssistant: The .helmignore file is used to specify files you don't want to include in your helm chart.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `.helmignore` file is used to specify files you don't want to include in your helm chart.\n\nIf this file exists, the `helm package` command will ignore all the files that match the pattern specified in the `.helmignore` file while packaging your application.\n\nThis can help in avoiding unnecessary or sensitive files or directories from being added in your helm chart.\n\n## Pattern Matching\nThe `.helmignore` file supports Unix shell glob matching, relative path matching, and negation (prefixed with !). Only one pattern per line is considered.\n\n## Example .helmignore File\nHere is an example `.helmignore` file:\n\n```fallback\n# comment\n\n# Match any file or path named .helmignore\n.helmignore\n\n# Match any file or path named .git\n.git\n\n# Match any text file\n*.txt\n\n# Match only directories named mydir\nmydir/\n\n# Match only text files in the top-level directory\n/*.txt\n\n# Match only the file foo.txt in the top-level directory\n/foo.txt\n\n# Match any file named ab.txt, ac.txt, or ad.txt\na[b-d].txt\n\n# Match any file under subdir matching temp*\n*/temp*\n\n*/*/temp*\ntemp?\n```\n\n\n## Differences from .gitignore\nSome notable differences from .gitignore:\n\n- The '**' syntax is not supported.\n- The globbing library is Go's 'filepath.Match', not fnmatch(3)\n- Trailing spaces are always ignored (there is no supported escape sequence)\n- There is no support for '!' as a special leading sequence.\n- It does not exclude itself by default, you have to add an explicit entry for `.helmignore`.\n\n## Contribution\n**We'd love your help** making this document better. To add, correct, or remove information, [file an issue](https://github.com/helm/helm-www/issues) or send us a pull request.\n\n## Links\n[Helm Project](https://github.com/helm/helm)[Blog](https://helm.sh/blog)[Events](https://www.cncf.io/community/kubecon-cloudnativecon-events/)[Quick Start Guide](https://helm.sh/docs/intro/quickstart/)[Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md)[Charts](https://artifacthub.io/)[Introduction](https://helm.sh/docs/topics/charts/)[Chart tips & tricks](https://helm.sh/docs/howto/charts_tips_and_tricks/)[Developing Charts](https://helm.sh/docs/chart_template_guide/)[Search 800+ Charts](https://artifacthub.io/)[Development](https://github.com/helm/community/blob/main/communication.md)[#helm-dev](https://kubernetes.slack.com/messages/C51E88VDG) _(slack)_[Contribution Guide](https://github.com/helm/helm/blob/main/CONTRIBUTING.md)[Maintainers](https://github.com/helm/helm/blob/main/OWNERS)[Weekly Meetings](https://github.com/helm/community/blob/main/communication.md#meetings)[Community](https://github.com/helm/community)[#helm-users](https://kubernetes.slack.com/messages/C0NH30761 \"#helm-users on Slack\") _(slack)_[Mailing List](https://lists.cncf.io/g/cncf-helm/topics)[Logos](https://github.com/cncf/artwork/tree/master/projects/helm) & [Art](https://github.com/helm/community/tree/main/art)[Twitter](https://twitter.com/helmpack)\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/helm_ignore_file", "title": ".helmignore file", "description": "The .helmignore file is used to specify files you don't want to include in your helm chart.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:30:56", "type": "overview", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "ogDescription": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "og:url": "https://helm.sh/docs/chart_template_guide/helm_ignore_file/", "description": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "og:title": ["The .helmignore file", "The .helmignore file"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | The .helmignore file\n", "twitter:title": "Helm | The .helmignore file", "ogTitle": "The .helmignore file", "language": "en", "og:description": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "ogUrl": "https://helm.sh/docs/chart_template_guide/helm_ignore_file/", "twitter:card": "summary", "scrapeId": "ca0029ad-3abf-4864-846f-fcccaa4c69c6", "sourceURL": "https://helm.sh/docs/chart_template_guide/helm_ignore_file", "url": "https://helm.sh/docs/chart_template_guide/helm_ignore_file/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \".helmignore file\"?\n\nAssistant: Here are some code examples:\n\n### Example .helmignore File\n```yaml\n# comment\n\n# Match any file or path named .helmignore\n.helmignore\n\n# Match any file or path named .git\n.git\n\n# Match any text file\n*.txt\n\n# Match only directories named mydir\nmydir/\n\n# Match only text files in the top-level directory\n/*.txt\n\n# Match only the file foo.txt in the top-level directory\n/foo.txt\n\n# Match any file named ab.txt, ac.txt, or ad.txt\na[b-d].txt\n\n# Match any file under subdir matching temp*\n*/temp*\n\n*/*/temp*\ntemp?\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/helm_ignore_file", "title": ".helmignore file", "description": "The .helmignore file is used to specify files you don't want to include in your helm chart.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:30:56", "type": "code_examples", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "ogDescription": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "og:url": "https://helm.sh/docs/chart_template_guide/helm_ignore_file/", "description": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "og:title": ["The .helmignore file", "The .helmignore file"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | The .helmignore file\n", "twitter:title": "Helm | The .helmignore file", "ogTitle": "The .helmignore file", "language": "en", "og:description": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "ogUrl": "https://helm.sh/docs/chart_template_guide/helm_ignore_file/", "twitter:card": "summary", "scrapeId": "ca0029ad-3abf-4864-846f-fcccaa4c69c6", "sourceURL": "https://helm.sh/docs/chart_template_guide/helm_ignore_file", "url": "https://helm.sh/docs/chart_template_guide/helm_ignore_file/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \".helmignore file\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the .helmignore file to avoid including unnecessary or sensitive files in your helm chart.\n• Remember that only one pattern per line is considered in the .helmignore file.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/helm_ignore_file", "title": ".helmignore file", "description": "The .helmignore file is used to specify files you don't want to include in your helm chart.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:30:56", "type": "best_practices", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "ogDescription": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "og:url": "https://helm.sh/docs/chart_template_guide/helm_ignore_file/", "description": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "og:title": ["The .helmignore file", "The .helmignore file"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | The .helmignore file\n", "twitter:title": "Helm | The .helmignore file", "ogTitle": "The .helmignore file", "language": "en", "og:description": "The `.helmignore` file is used to specify files you don't want to include in your helm chart.", "ogUrl": "https://helm.sh/docs/chart_template_guide/helm_ignore_file/", "twitter:card": "summary", "scrapeId": "ca0029ad-3abf-4864-846f-fcccaa4c69c6", "sourceURL": "https://helm.sh/docs/chart_template_guide/helm_ignore_file", "url": "https://helm.sh/docs/chart_template_guide/helm_ignore_file/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"The Helm Plugins Guide\"?\n\nAssistant: A Helm plugin is a tool that can be accessed through the `helm` CLI, but which is not part of the built-in Helm codebase. This guide explains how to use and create plugins.\n\nHere's a detailed explanation:\n\n\n## An Overview\nHelm plugins are add-on tools that integrate seamlessly with Helm. They provide a way to extend the core feature set of Helm, but without requiring every new feature to be written in Go and added to the core tool.\n\nHelm plugins have the following features:\n\n- They can be added and removed from a Helm installation without impacting the core Helm tool.\n- They can be written in any programming language.\n- They integrate with Helm, and will show up in `helm help` and other places.\n\nHelm plugins live in `$HELM_PLUGINS`. You can find the current value of this, including the default value when not set in the environment, using the `helm env` command.\n\nThe Helm plugin model is partially based on Git's plugin model. To that end, you may sometimes hear `helm` referred to as the _porcelain_ layer, with plugins being the _plumbing_. This is a shorthand way of suggesting that Helm provides the user experience and top level processing logic, while the plugins do the \"detail work\" of performing a desired action.\n\n## Installing a Plugin\nPlugins are installed using the `$ helm plugin install <path|url>` command. You can pass in a path to a plugin on your local file system or a url of a remote VCS repo. The `helm plugin install` command clones or copies the plugin at the path/url given into `$HELM_PLUGINS`. If you are installing from a VCS you can specify the version with the `--version` argument.\n\n```console\n$ helm plugin install https://github.com/adamreese/helm-env\n```\n\nIf you have a plugin tar distribution, simply untar the plugin into the `$HELM_PLUGINS` directory. You can also install tarball plugins directly from url by issuing `helm plugin install https://domain/path/to/plugin.tar.gz`.\n\n## The Plugin File Structure\nIn many ways, a plugin is similar to a chart. Each plugin has a top-level directory containing a `plugin.yaml` file. Additonal files may be present but only the `plugin.yaml` file is required.\n\n```console\n$HELM_PLUGINS/\n  |- last/\n      |- plugin.yaml\n```\n\n## The plugin.yaml File\nThe plugin.yaml file is required for a plugin. It contains the following fields:\n\n```yaml\nname: The name of the plugin (REQUIRED)\nversion: A SemVer 2 version (REQUIRED)\nusage: Single line usage text shown in help\ndescription: Long description shown in places like helm help\nignoreFlags: Ignore flags passed in from Helm\nplatformCommand: # Configure command to run based on the platform\n  - os: OS match, can be empty or ommited to match all OS'\n    arch: Architecture match, can be empty or ommited to match all architectures\n    command: Plugin command to execute\n    args: Plugin command arguments\ncommand: (DEPRECATED) Plugin command, use platformCommand instead\nplatformHooks: # Configure plugin lifecycle hooks based on the platform\n  install: # Install lifecycle commands\n    - os: OS match, can be empty or ommited to match all OS'\n      arch: Architecture match, can be empty or ommited to match all architectures\n      command: Plugin install command to execute\n      args: Plugin install command arguments\n  update: # Update lifecycle commands\n    - os: OS match, can be empty or ommited to match all OS'\n      arch: Architecture match, can be empty or ommited to match all architectures\n      command: Plugin update command to execute\n      args: Plugin update command arguments\n  delete: # Delete lifecycle commands\n    - os: OS match, can be empty or ommited to match all OS'\n      arch: Architecture match, can be empty or ommited to match all architectures\n      command: Plugin delete command to execute\n      args: Plugin delete command arguments\nhooks: # (Deprecated) Plugin lifecycle hooks, use platformHooks instead\n  install: Command to install plugin\n  update: Command to update plugin\n  delete: Command to delete plugin\ndownloaders: # Configure downloaders capability\n  - command: Command to invoke\n    protocols:\n      - Protocol schema supported\n```\n\n## Building a Plugin\nHere is the plugin YAML for a simple plugin that helps get the last release name:\n\n```yaml\nname: last\nversion: 0.1.0\nusage: get the last release name\ndescription: get the last release name\nignoreFlags: false\nplatformCommand:\n  - command: ${HELM_BIN}\n    args:\n      - list\n      - --short\n      - --max=1\n      - --date\n      - -r\n```\n\nPlugins may require additional scripts and executables.\nScripts can be included in the plugin directory and executables can be downloaded via a hook. The following is an example plugin:\n\n```console\n$HELM_PLUGINS/\n  |- myplugin/\n    |- scripts/\n      |- install.ps1\n      |- install.sh\n    |- plugin.yaml\n```\n\n```yaml\nname: myplugin\nversion: 0.1.0\nusage: example plugin\ndescription: example plugin\nignoreFlags: false\nplatformCommand:\n  - command: ${HELM_PLUGIN_DIR}/bin/myplugin\n  - os: windows\n    command: ${HELM_PLUGIN_DIR}\\bin\\myplugin.exe\nplatformHooks:\n  install:\n    - command: ${HELM_PLUGIN_DIR}/scripts/install.sh\n    - os: windows\n      command: pwsh\n      args:\n        - -c\n        - ${HELM_PLUGIN_DIR}\\scripts\\install.ps1\n  update:\n    - command: ${HELM_PLUGIN_DIR}/scripts/install.sh\n      args:\n        - -u\n    - os: windows\n      command: pwsh\n      args:\n        - -c\n        - ${HELM_PLUGIN_DIR}\\scripts\\install.ps1\n        - -Update\n```\n\n## Plugin Commands\nThere are some strategies for working with plugin commands:\n\n- If a plugin includes an executable, the executable for a `platformCommand:` or should be packaged in the plugin directory or installed via a hook.\n- The `platformCommand:` or `command:` line will have any environment variables expanded before execution. `$HELM_PLUGIN_DIR` will point to the plugin directory.\n- The command itself is not executed in a shell. So you can't oneline a shell script.\n- Helm injects lots of configuration into environment variables. Take a look at the environment to see what information is available.\n- Helm makes no assumptions about the language of the plugin. You can write it in whatever you prefer.\n- Commands are responsible for implementing specific help text for `-h` and `--help`. Helm will use `usage` and `description` for `helm help` and `helm help myplugin`, but will not handle `helm myplugin --help`.\n\n## Testing a Local Plugin\nFirst you need to find your `HELM_PLUGINS` path to do it run the folowing command:\n\n```bash\nhelm env\n```\n\nChange your current directory to the director that `HELM_PLUGINS` is set to.\n\nNow you can add a symbolic link to your build output of your plugin in this example we did it for `mapkubeapis`.\n\n```bash\nln -s ~/GitHub/helm-mapkubeapis ./helm-mapkubeapis\n```\n\n## Downloader Plugins\nBy default, Helm is able to pull Charts using HTTP/S. As of Helm 2.4.0, plugins can have a special capability to download Charts from arbitrary sources.\n\nPlugins shall declare this special capability in the `plugin.yaml` file (top level):\n\n```yaml\ndownloaders:\n- command: \"bin/mydownloader\"\n  protocols:\n  - \"myprotocol\"\n  - \"myprotocols\"\n```\n\nIf such plugin is installed, Helm can interact with the repository using the specified protocol scheme by invoking the `command`. The special repository shall be added similarly to the regular ones: `helm repo add favorite myprotocol://example.com/` The rules for the special repos are the same to the regular ones: Helm must be able to download the `index.yaml` file in order to discover and cache the list of available Charts.\n\nThe defined command will be invoked with the following scheme: `command certFile keyFile caFile full-URL`. The SSL credentials are coming from the repo definition, stored in `$HELM_REPOSITORY_CONFIG`\n(i.e., `$HELM_CONFIG_HOME/repositories.yaml`). A Downloader plugin is expected to dump the raw content to stdout and report errors on stderr.\n\nThe downloader command also supports sub-commands or arguments, allowing you to specify for example `bin/mydownloader subcommand -d` in the `plugin.yaml`. This is useful if you want to use the same executable for the main plugin command and the downloader command, but with a different sub-command for each.\n\n## Environment Variables\nWhen Helm executes a plugin, it passes the outer environment to the plugin, and also injects some additional environment variables.\n\nVariables like `KUBECONFIG` are set for the plugin if they are set in the outer environment.\n\nThe following variables are guaranteed to be set:\n\n- `HELM_PLUGINS`: The path to the plugins directory.\n- `HELM_PLUGIN_NAME`: The name of the plugin, as invoked by `helm`. So `helm myplug` will have the short name `myplug`.\n- `HELM_PLUGIN_DIR`: The directory that contains the plugin.\n- `HELM_BIN`: The path to the `helm` command (as executed by the user).\n- `HELM_DEBUG`: Indicates if the debug flag was set by helm.\n- `HELM_REGISTRY_CONFIG`: The location for the registry configuration (if using). Note that the use of Helm with registries is an experimental feature.\n- `HELM_REPOSITORY_CACHE`: The path to the repository cache files.\n- `HELM_REPOSITORY_CONFIG`: The path to the repository configuration file.\n- `HELM_NAMESPACE`: The namespace given to the `helm` command (generally using the `-n` flag).\n- `HELM_KUBECONTEXT`: The name of the Kubernetes config context given to the `helm` command.\n\nAdditionally, if a Kubernetes configuration file was explicitly specified, it will be set as the `KUBECONFIG` variable.\n\n## A Note on Flag Parsing\nWhen executing a plugin, Helm will parse global flags for its own use. None of these flags are passed on to the plugin.\n\n- `--debug`: If this is specified, `$HELM_DEBUG` is set to `1`\n- `--registry-config`: This is converted to `$HELM_REGISTRY_CONFIG`\n- `--repository-cache`: This is converted to `$HELM_REPOSITORY_CACHE`\n- `--repository-config`: This is converted to `$HELM_REPOSITORY_CONFIG`\n- `--namespace` and `-n`: This is converted to `$HELM_NAMESPACE`\n- `--kube-context`: This is converted to `$HELM_KUBECONTEXT`\n- `--kubeconfig`: This is converted to `$KUBECONFIG`\n\nPlugins _should_ display help text and then exit for `-h` and `--help`. In all other cases, plugins may use flags as appropriate.\n\n## Providing shell auto-completion\nAs of Helm 3.2, a plugin can optionally provide support for shell auto-completion as part of Helm's existing auto-completion mechanism.\n\n## Static auto-completion\nIf a plugin provides its own flags and/or sub-commands, it can inform Helm of them by having a `completion.yaml` file located in the plugin's root directory. The `completion.yaml` file has the form:\n\n```yaml\nname: <pluginName>\nflags:\n- <flag 1>\n- <flag 2>\nvalidArgs:\n- <arg value 1>\n- <arg value 2>\ncommands:\n  name: <commandName>\n  flags:\n  - <flag 1>\n  - <flag 2>\n  validArgs:\n  - <arg value 1>\n  - <arg value 2>\n  commands:\n     <and so on, recursively>\n```\n\nNotes:\n\n1. All sections are optional but should be provided if applicable.\n2. Flags should not include the `-` or `--` prefix.\n3. Both short and long flags can and should be specified. A short flag need not be associated with its corresponding long form, but both forms should be listed.\n4. Flags need not be ordered in any way, but need to be listed at the correct point in the sub-command hierarchy of the file.\n5. Helm's existing global flags are already handled by Helm's auto-completion mechanism, therefore plugins need not specify the following flags `--debug`, `--namespace` or `-n`, `--kube-context`, and `--kubeconfig`, or any other global flag.\n6. The `validArgs` list provides a static list of possible completions for the first parameter following a sub-command. It is not always possible to provide such a list in advance (see the [Dynamic\\ Completion](https://helm.sh/docs/topics/plugins/#dynamic-completion) section below), in which case the `validArgs` section can be omitted.\n\nThe `completion.yaml` file is entirely optional. If it is not provided, Helm will simply not provide shell auto-completion for the plugin (unless [Dynamic\\ Completion](https://helm.sh/docs/topics/plugins/#dynamic-completion) is supported by the plugin). Also, adding a `completion.yaml` file is backwards-compatible and will not impact the behavior of the plugin when using older helm versions.\n\n## Dynamic completion\nAlso starting with Helm 3.2, plugins can provide their own dynamic shell auto-completion. Dynamic shell auto-completion is the completion of parameter values or flag values that cannot be defined in advance. For example, completion of the names of helm releases currently available on the cluster.\n\nFor the plugin to support dynamic auto-completion, it must provide an **executable** file called `plugin.complete` in its root directory. When the Helm completion script requires dynamic completions for the plugin, it will execute the `plugin.complete` file, passing it the command-line that needs to be completed. The `plugin.complete` executable will need to have the logic to determine what the proper completion choices are and output them to standard output to be consumed by the Helm completion script.\n\nThe `plugin.complete` file is entirely optional. If it is not provided, Helm will simply not provide dynamic auto-completion for the plugin. Also, adding a `plugin.complete` file is backwards-compatible and will not impact the behavior of the plugin when using older helm versions.\n\nThe output of the `plugin.complete` script should be a new-line separated list such as:\n\n```console\nrel1\nrel2\nrel3\n```\n\nWhen `plugin.complete` is called, the plugin environment is set just like when the plugin's main script is called. Therefore, the variables `$HELM_NAMESPACE`, `$HELM_KUBECONTEXT`, and all other plugin variables will already be set, and their corresponding global flags will be removed.\n\nThe `plugin.complete` file can be in any executable form; it can be a shell script, a Go program, or any other type of program that Helm can execute. The `plugin.complete` file _**must**_ have executable permissions for the user. The `plugin.complete` file _**must**_ exit with a success code (value 0).\n\nIn some cases, dynamic completion will require to obtain information from the Kubernetes cluster. For example, the `helm fullstatus` plugin requires a release name as input. In the `fullstatus` plugin, for its `plugin.complete` script to provide completion for current release names, it can simply run `helm list -q` and output the result.\n\nIf it is desired to use the same executable for plugin execution and for plugin completion, the `plugin.complete` script can be made to call the main plugin executable with some special parameter or flag; when the main plugin executable detects the special parameter or flag, it will know to run the completion. In our example, `plugin.complete` could be implemented like this:\n\n```sh\n#!/usr/bin/env sh\n\n# \"$@\" is the entire command-line that requires completion.\n# It is important to double-quote the \"$@\" variable to preserve a possibly empty last parameter.\n$HELM_PLUGIN_DIR/status.sh --complete \"$@\"\n```\n\n## Tips and tricks\n1. The shell will automatically filter out completion choices that don't match user input. A plugin can therefore return all relevant completions without removing the ones that don't match the user input. For example, if the command-line is `helm fullstatus ngin<TAB>`, the `plugin.complete` script can print _all_ release names (of the `default` namespace), not just the ones starting with `ngin`; the shell will only retain the ones starting with `ngin`.\n2. To simplify dynamic completion support, especially if you have a complex plugin, you can have your `plugin.complete` script call your main plugin script and request completion choices. See the [Dynamic\\ Completion](https://helm.sh/docs/topics/plugins/#dynamic-completion) section above for an example.\n3. To debug dynamic completion and the `plugin.complete` file, one can run the following to see the completion results :\n   - `helm __complete <pluginName> <arguments to complete>`. For example:\n   - `helm __complete fullstatus --output js<ENTER>`,\n   - `helm __complete fullstatus -o json \"\"<ENTER>`.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/plugins", "title": "The Helm Plugins Guide", "description": "A Helm plugin is a tool that can be accessed through the `helm` CLI, but which is not part of the built-in Helm codebase. This guide explains how to use and create plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-27 21:33:56", "type": "overview", "page_metadata": {"description": "Introduces how to use and create plugins to extend Helm's functionality.", "title": "Helm | The Helm Plugins Guide\n", "ogDescription": "Introduces how to use and create plugins to extend Helm's functionality.", "og:url": "https://helm.sh/docs/topics/plugins/", "ogUrl": "https://helm.sh/docs/topics/plugins/", "og:title": ["The Helm Plugins Guide", "The Helm Plugins Guide"], "twitter:title": "Helm | The Helm Plugins Guide", "og:description": "Introduces how to use and create plugins to extend Helm's functionality.", "ogTitle": "The Helm Plugins Guide", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "twitter:description": "Introduces how to use and create plugins to extend Helm's functionality.", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "4a09771b-7388-4945-8efb-5ba2350ef358", "sourceURL": "https://helm.sh/docs/topics/plugins", "url": "https://helm.sh/docs/topics/plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"The Helm Plugins Guide\"?\n\nAssistant: Here are some code examples:\n\n### Installing a Plugin\n```yaml\n$ helm plugin install https://github.com/adamreese/helm-env\n```\n\n### The Plugin File Structure\n```yaml\n$HELM_PLUGINS/\n  |- last/\n      |- plugin.yaml\n```\n\n### Building a Plugin\n```yaml\nname: last\nversion: 0.1.0\nusage: get the last release name\ndescription: get the last release name\nignoreFlags: false\nplatformCommand:\n  - command: ${HELM_BIN}\n    args:\n      - list\n      - --short\n      - --max=1\n      - --date\n      - -r\n```\n\n### Testing a Local Plugin\n```yaml\nhelm env\n```\n\n### Testing a Local Plugin - Symbolic Link\n```yaml\nln -s ~/GitHub/helm-mapkubeapis ./helm-mapkubeapis\n```\n\n### Downloader Plugins\n```yaml\ndownloaders:\n- command: \"bin/mydownloader\"\n  protocols:\n  - \"myprotocol\"\n  - \"myprotocols\"\n```\n\n### Dynamic completion example\n```yaml\n#!/usr/bin/env sh\n\n# \"$@\" is the entire command-line that requires completion.\n# It is important to double-quote the \"$@\" variable to preserve a possibly empty last parameter.\n$HELM_PLUGIN_DIR/status.sh --complete \"$@\"\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/plugins", "title": "The Helm Plugins Guide", "description": "A Helm plugin is a tool that can be accessed through the `helm` CLI, but which is not part of the built-in Helm codebase. This guide explains how to use and create plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-27 21:33:56", "type": "code_examples", "page_metadata": {"description": "Introduces how to use and create plugins to extend Helm's functionality.", "title": "Helm | The Helm Plugins Guide\n", "ogDescription": "Introduces how to use and create plugins to extend Helm's functionality.", "og:url": "https://helm.sh/docs/topics/plugins/", "ogUrl": "https://helm.sh/docs/topics/plugins/", "og:title": ["The Helm Plugins Guide", "The Helm Plugins Guide"], "twitter:title": "Helm | The Helm Plugins Guide", "og:description": "Introduces how to use and create plugins to extend Helm's functionality.", "ogTitle": "The Helm Plugins Guide", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "twitter:description": "Introduces how to use and create plugins to extend Helm's functionality.", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "4a09771b-7388-4945-8efb-5ba2350ef358", "sourceURL": "https://helm.sh/docs/topics/plugins", "url": "https://helm.sh/docs/topics/plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"The Helm Plugins Guide\"?\n\nAssistant: Here are the recommended best practices:\n\n• If a plugin includes an executable, the executable for a platformCommand: or should be packaged in the plugin directory or installed via a hook.\n• The platformCommand: or command: line will have any environment variables expanded before execution. $HELM_PLUGIN_DIR will point to the plugin directory.\n• The command itself is not executed in a shell. So you can't oneline a shell script.\n• Helm injects lots of configuration into environment variables. Take a look at the environment to see what information is available.\n• Helm makes no assumptions about the language of the plugin. You can write it in whatever you prefer.\n• Commands are responsible for implementing specific help text for -h and --help. Helm will use usage and description for helm help and helm help myplugin, but will not handle helm myplugin --help.\n• The shell will automatically filter out completion choices that don't match user input. A plugin can therefore return all relevant completions without removing the ones that don't match the user input. For example, if the command-line is helm fullstatus ngin<TAB>, the plugin.complete script can print all release names (of the default namespace), not just the ones starting with ngin; the shell will only retain the ones starting with ngin.\n• To simplify dynamic completion support, especially if you have a complex plugin, you can have your plugin.complete script call your main plugin script and request completion choices.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/plugins", "title": "The Helm Plugins Guide", "description": "A Helm plugin is a tool that can be accessed through the `helm` CLI, but which is not part of the built-in Helm codebase. This guide explains how to use and create plugins.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-27 21:33:56", "type": "best_practices", "page_metadata": {"description": "Introduces how to use and create plugins to extend Helm's functionality.", "title": "Helm | The Helm Plugins Guide\n", "ogDescription": "Introduces how to use and create plugins to extend Helm's functionality.", "og:url": "https://helm.sh/docs/topics/plugins/", "ogUrl": "https://helm.sh/docs/topics/plugins/", "og:title": ["The Helm Plugins Guide", "The Helm Plugins Guide"], "twitter:title": "Helm | The Helm Plugins Guide", "og:description": "Introduces how to use and create plugins to extend Helm's functionality.", "ogTitle": "The Helm Plugins Guide", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "twitter:description": "Introduces how to use and create plugins to extend Helm's functionality.", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "4a09771b-7388-4945-8efb-5ba2350ef358", "sourceURL": "https://helm.sh/docs/topics/plugins", "url": "https://helm.sh/docs/topics/plugins/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Debugging Templates\"?\n\nAssistant: Debugging templates can be tricky because the rendered templates are sent to the Kubernetes API server, which may reject the YAML files for reasons other than formatting.\n\nHere's a detailed explanation:\n\n\n## Debugging Commands\nThere are a few commands that can help you debug.\n\n- `helm lint` is your go-to tool for verifying that your chart follows best practices\n- `helm template --debug` will test rendering chart templates locally.\n- `helm install --dry-run --debug` will also render your chart locally without installing it, but will also check if conflicting resources are already running on the cluster. Setting `--dry-run=server` will additionally execute any `lookup` in your chart towards the server.\n- `helm get manifest`: This is a good way to see what templates are installed on the server.\n\n## Retrieving YAML\nWhen your YAML is failing to parse, but you want to see what is generated, one easy way to retrieve the YAML is to comment out the problem section in the template, and then re-run `helm install --dry-run --debug`:\n\n```yaml\napiVersion: v2\n# some: problem section\n# {{ .Values.foo | quote }}\n```\n\nThe above will be rendered and returned with the comments intact:\n\n```yaml\napiVersion: v2\n# some: problem section\n#  \"bar\"\n```\n\nThis provides a quick way of viewing the generated content without YAML parse errors blocking.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/debugging", "title": "Debugging Templates", "description": "Debugging templates can be tricky because the rendered templates are sent to the Kubernetes API server, which may reject the YAML files for reasons other than formatting.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:34:27", "type": "overview", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Debugging Templates", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "og:description": "Troubleshooting charts that are failing to deploy.", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Troubleshooting charts that are failing to deploy.", "twitter:title": "Helm | Debugging Templates", "og:url": "https://helm.sh/docs/chart_template_guide/debugging/", "ogUrl": "https://helm.sh/docs/chart_template_guide/debugging/", "og:title": ["Debugging Templates", "Debugging Templates"], "twitter:description": "Troubleshooting charts that are failing to deploy.", "description": "Troubleshooting charts that are failing to deploy.", "title": "Helm | Debugging Templates\n", "scrapeId": "a4fb9db9-8b58-489a-ac06-102de367029e", "sourceURL": "https://helm.sh/docs/chart_template_guide/debugging", "url": "https://helm.sh/docs/chart_template_guide/debugging/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Debugging Templates\"?\n\nAssistant: Here are some code examples:\n\n### YAML Example with Commented Section\n```yaml\n```yaml\napiVersion: v2\n# some: problem section\n# {{ .Values.foo | quote }}\n```\n```\n\n### Rendered YAML Output\n```yaml\n```yaml\napiVersion: v2\n# some: problem section\n#  \"bar\"\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/debugging", "title": "Debugging Templates", "description": "Debugging templates can be tricky because the rendered templates are sent to the Kubernetes API server, which may reject the YAML files for reasons other than formatting.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:34:27", "type": "code_examples", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Debugging Templates", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "og:description": "Troubleshooting charts that are failing to deploy.", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Troubleshooting charts that are failing to deploy.", "twitter:title": "Helm | Debugging Templates", "og:url": "https://helm.sh/docs/chart_template_guide/debugging/", "ogUrl": "https://helm.sh/docs/chart_template_guide/debugging/", "og:title": ["Debugging Templates", "Debugging Templates"], "twitter:description": "Troubleshooting charts that are failing to deploy.", "description": "Troubleshooting charts that are failing to deploy.", "title": "Helm | Debugging Templates\n", "scrapeId": "a4fb9db9-8b58-489a-ac06-102de367029e", "sourceURL": "https://helm.sh/docs/chart_template_guide/debugging", "url": "https://helm.sh/docs/chart_template_guide/debugging/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Debugging Templates\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use `helm lint` to verify that your chart follows best practices.\n• Utilize `helm template --debug` to test rendering chart templates locally.\n• Run `helm install --dry-run --debug` to check for conflicting resources without installing the chart.\n• Comment out problem sections in your template to view generated YAML without parse errors.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/debugging", "title": "Debugging Templates", "description": "Debugging templates can be tricky because the rendered templates are sent to the Kubernetes API server, which may reject the YAML files for reasons other than formatting.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:34:27", "type": "best_practices", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Debugging Templates", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "og:description": "Troubleshooting charts that are failing to deploy.", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "ogDescription": "Troubleshooting charts that are failing to deploy.", "twitter:title": "Helm | Debugging Templates", "og:url": "https://helm.sh/docs/chart_template_guide/debugging/", "ogUrl": "https://helm.sh/docs/chart_template_guide/debugging/", "og:title": ["Debugging Templates", "Debugging Templates"], "twitter:description": "Troubleshooting charts that are failing to deploy.", "description": "Troubleshooting charts that are failing to deploy.", "title": "Helm | Debugging Templates\n", "scrapeId": "a4fb9db9-8b58-489a-ac06-102de367029e", "sourceURL": "https://helm.sh/docs/chart_template_guide/debugging", "url": "https://helm.sh/docs/chart_template_guide/debugging/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Migrating Helm v2 to v3\"?\n\nAssistant: This guide shows how to migrate Helm v2 to v3. Helm v2 needs to be installed and managing releases in one or more clusters.\n\nHere's a detailed explanation:\n\n\n## Overview of Helm 3 Changes\nThe full list of changes from Helm 2 to 3 are documented in the FAQ section. The following is a summary of some of those changes that a user should be aware of before and during migration:\n\n1. Removal of Tiller:\n   - Replaces client/server with client/library architecture ( `helm` binary only)\n   - Security is now on per user basis (delegated to Kubernetes user cluster security)\n   - Releases are now stored as in-cluster secrets and the release object metadata has changed\n   - Releases are persisted on a release namespace basis and not in the Tiller namespace anymore\n2. Chart repository updated:\n   - `helm search` now supports both local repository searches and making search queries against Artifact Hub\n3. Chart apiVersion bumped to \"v2\" for following specification changes:\n   - Dynamically linked chart dependencies moved to `Chart.yaml` ( `requirements.yaml` removed and requirements --> dependencies)\n   - Library charts (helper/common charts) can now be added as dynamically linked chart dependencies\n   - Charts have a `type` metadata field to define the chart to be of an `application` or `library` chart. It is application by default which means it is renderable and installable\n   - Helm 2 charts (apiVersion=v1) are still installable\n4. XDG directory specification added:\n   - Helm home removed and replaced with XDG directory specification for storing configuration files\n   - No longer need to initialize Helm\n   - `helm init` and `helm home` removed\n5. Additional changes:\n   - Helm install/set-up is simplified:\n     - Helm client (helm binary) only (no Tiller)\n     - Run-as-is paradigm\n   - `local` or `stable` repositories are not set-up by default\n   - `crd-install` hook removed and replaced with `crds` directory in chart where all CRDs defined in it will be installed before any rendering of the chart\n   - `test-failure` hook annotation value removed, and `test-success` deprecated. Use `test` instead\n   - Commands removed/replaced/added:\n     - delete --> uninstall : removes all release history by default (previously needed `--purge`)\n     - fetch --> pull\n     - home (removed)\n     - init (removed)\n     - install: requires release name or `--generate-name` argument\n     - inspect --> show\n     - reset (removed)\n     - serve (removed)\n     - template: `-x`/ `--execute` argument renamed to `-s`/ `--show-only`\n     - upgrade: Added argument `--history-max` which limits the maximum number of revisions saved per release (0 for no limit)\n   - Helm 3 Go library has undergone a lot of changes and is incompatible with the Helm 2 library\n   - Release binaries are now hosted on `get.helm.sh`\n\n## Migration Use Cases\nThe migration use cases are as follows:\n\n1. Helm v2 and v3 managing the same cluster:\n   - This use case is only recommended if you intend to phase out Helm v2 gradually and do not require v3 to manage any releases deployed by v2. All new releases being deployed should be performed by v3 and existing v2 deployed releases are updated/removed by v2 only\n   - Helm v2 and v3 can quite happily manage the same cluster. The Helm versions can be installed on the same or separate systems\n   - If installing Helm v3 on the same system, you need to perform an additional step to ensure that both client versions can co-exist until ready to remove Helm v2 client. Rename or put the Helm v3 binary in a different folder to avoid conflict\n   - Otherwise there are no conflicts between both versions because of the following distinctions:\n     - v2 and v3 release (history) storage are independent of each other. The changes include the Kubernetes resource for storage and the release object metadata contained in the resource. Releases will also be on a per user namespace instead of using the Tiller namespace (for example, v2 default Tiller namespace kube-system). v2 uses \"ConfigMaps\" or \"Secrets\" under the Tiller namespace and `TILLER` ownership. v3 uses \"Secrets\" in the user namespace and `helm` ownership. Releases are incremental in both v2 and v3\n     - The only issue could be if Kubernetes cluster scoped resources (e.g. `clusterroles.rbac`) are defined in a chart. The v3 deployment would then fail even if unique in the namespace as the resources would clash\n     - v3 configuration no longer uses `$HELM_HOME` and uses XDG directory specification instead. It is also created on the fly as need be. It is therefore independent of v2 configuration. This is applicable only when both versions are installed on the same system\n2. Migrating Helm v2 to Helm v3:\n   - This use case applies when you want Helm v3 to manage existing Helm v2 releases\n   - It should be noted that a Helm v2 client:\n     - can manage 1 to many Kubernetes clusters\n     - can connect to 1 to many Tiller instances for a cluster\n   - This means that you have to be aware of this when migrating as releases are deployed into clusters by Tiller and its namespace. You have to therefore be aware of migrating for each cluster and each Tiller instance that is managed by the Helm v2 client instance\n   - The recommended data migration path is as follows:\n     1. Backup v2 data\n     2. Migrate Helm v2 configuration\n     3. Migrate Helm v2 releases\n     4. When confident that Helm v3 is managing all Helm v2 data (for all clusters and Tiller instances of the Helm v2 client instance) as expected, then clean up Helm v2 data\n   - The migration process is automated by the Helm v3 2to3 plugin.\n\n## Reference\n- Helm v3 2to3 plugin\n- Blog post explaining `2to3` plugin usage with examples\n- Helm Project\n- Events\n- Quick Start Guide\n- Code of Conduct\n- Charts\n- Introduction\n- Chart tips & tricks\n- Developing Charts\n- Search 800+ Charts\n- Development\n- Contribution Guide\n- Maintainers\n- Weekly Meetings\n- Community\n- Mailing List\n- Logos & Art\n- Twitter\n- We are a Cloud Native Computing Foundation graduated project.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/v2_v3_migration", "title": "Migrating Helm v2 to v3", "description": "This guide shows how to migrate Helm v2 to v3. Helm v2 needs to be installed and managing releases in one or more clusters.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:34:50", "type": "overview", "page_metadata": {"language": "en", "twitter:card": "summary", "title": "Helm | Migrating Helm v2 to v3\n", "og:title": ["Migrating Helm v2 to v3", "Migrating Helm v2 to v3"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Migrating Helm v2 to v3", "og:url": "https://helm.sh/docs/topics/v2_v3_migration/", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Migrating Helm v2 to v3", "og:description": "Learn how to migrate Helm v2 to v3.", "twitter:description": "Learn how to migrate Helm v2 to v3.", "ogDescription": "Learn how to migrate Helm v2 to v3.", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/topics/v2_v3_migration/", "description": "Learn how to migrate Helm v2 to v3.", "scrapeId": "75779287-0ab8-42af-b99d-2af76d24d448", "sourceURL": "https://helm.sh/docs/topics/v2_v3_migration", "url": "https://helm.sh/docs/topics/v2_v3_migration/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Migrating Helm v2 to v3\"?\n\nAssistant: Here are some code examples:\n\n### Migration Process Steps\n```yaml\n1. Backup v2 data\n2. Migrate Helm v2 configuration\n3. Migrate Helm v2 releases\n4. Clean up Helm v2 data when confident that Helm v3 is managing all Helm v2 data.\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/v2_v3_migration", "title": "Migrating Helm v2 to v3", "description": "This guide shows how to migrate Helm v2 to v3. Helm v2 needs to be installed and managing releases in one or more clusters.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:34:50", "type": "code_examples", "page_metadata": {"language": "en", "twitter:card": "summary", "title": "Helm | Migrating Helm v2 to v3\n", "og:title": ["Migrating Helm v2 to v3", "Migrating Helm v2 to v3"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Migrating Helm v2 to v3", "og:url": "https://helm.sh/docs/topics/v2_v3_migration/", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Migrating Helm v2 to v3", "og:description": "Learn how to migrate Helm v2 to v3.", "twitter:description": "Learn how to migrate Helm v2 to v3.", "ogDescription": "Learn how to migrate Helm v2 to v3.", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/topics/v2_v3_migration/", "description": "Learn how to migrate Helm v2 to v3.", "scrapeId": "75779287-0ab8-42af-b99d-2af76d24d448", "sourceURL": "https://helm.sh/docs/topics/v2_v3_migration", "url": "https://helm.sh/docs/topics/v2_v3_migration/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Migrating Helm v2 to v3\"?\n\nAssistant: Here are the recommended best practices:\n\n• Helm v2 and v3 can manage the same cluster if phased out gradually.\n• Rename or put the Helm v3 binary in a different folder to avoid conflict when installing on the same system.\n• Backup v2 data before migrating to Helm v3.\n• Ensure to migrate for each cluster and each Tiller instance managed by the Helm v2 client.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/v2_v3_migration", "title": "Migrating Helm v2 to v3", "description": "This guide shows how to migrate Helm v2 to v3. Helm v2 needs to be installed and managing releases in one or more clusters.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:34:50", "type": "best_practices", "page_metadata": {"language": "en", "twitter:card": "summary", "title": "Helm | Migrating Helm v2 to v3\n", "og:title": ["Migrating Helm v2 to v3", "Migrating Helm v2 to v3"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Migrating Helm v2 to v3", "og:url": "https://helm.sh/docs/topics/v2_v3_migration/", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Migrating Helm v2 to v3", "og:description": "Learn how to migrate Helm v2 to v3.", "twitter:description": "Learn how to migrate Helm v2 to v3.", "ogDescription": "Learn how to migrate Helm v2 to v3.", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/topics/v2_v3_migration/", "description": "Learn how to migrate Helm v2 to v3.", "scrapeId": "75779287-0ab8-42af-b99d-2af76d24d448", "sourceURL": "https://helm.sh/docs/topics/v2_v3_migration", "url": "https://helm.sh/docs/topics/v2_v3_migration/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Next Steps\"?\n\nAssistant: This guide is intended to give you, the chart developer, a strong understanding of how to use Helm's template language, focusing on the technical aspects of template development.\n\nHere's a detailed explanation:\n\n\n## Useful Pointers\nHere are some useful pointers to other documentation that will help you as you create new charts:\n\n- The CNCF [Artifact Hub](https://artifacthub.io/packages/search?kind=0) is an indispensable source of charts.\n- The Kubernetes [Documentation](https://kubernetes.io/docs/home/) provides detailed examples of the various resource kinds that you can use, from ConfigMaps and Secrets to DaemonSets and Deployments.\n- The Helm [Charts Guide](https://helm.sh/docs/topics/charts/) explains the workflow of using charts.\n- The Helm [Chart Hooks Guide](https://helm.sh/docs/topics/charts_hooks/) explains how to create lifecycle hooks.\n- The Helm [Charts Tips and Tricks](https://helm.sh/docs/howto/charts_tips_and_tricks/) article provides some useful tips for writing charts.\n- The [Sprig documentation](https://github.com/Masterminds/sprig) documents more than sixty of the template functions.\n- The [Go template docs](https://godoc.org/text/template) explain the template syntax in detail.\n- The [Schelm tool](https://github.com/databus23/schelm) is a nice helper utility for debugging charts.\n\n## Community Support\nSometimes it's easier to ask a few questions and get answers from experienced developers. The best place to do this is in the [Kubernetes Slack](https://kubernetes.slack.com/) Helm channels:\n\n- [#helm-users](https://kubernetes.slack.com/messages/helm-users)\n- [#helm-dev](https://kubernetes.slack.com/messages/helm-dev)\n- [#charts](https://kubernetes.slack.com/messages/charts)\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/wrapping_up", "title": "Next Steps", "description": "This guide is intended to give you, the chart developer, a strong understanding of how to use Helm's template language, focusing on the technical aspects of template development.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:34:57", "type": "overview", "page_metadata": {"description": "Wrapping up - some useful pointers to other documentation that will help you.", "twitter:card": "summary", "twitter:title": "Helm | Next Steps", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Next Steps\n", "viewport": "width=device-width,initial-scale=1", "language": "en", "og:description": "Wrapping up - some useful pointers to other documentation that will help you.", "twitter:description": "Wrapping up - some useful pointers to other documentation that will help you.", "ogUrl": "https://helm.sh/docs/chart_template_guide/wrapping_up/", "og:url": "https://helm.sh/docs/chart_template_guide/wrapping_up/", "og:title": ["Next Steps", "Next Steps"], "ogDescription": "Wrapping up - some useful pointers to other documentation that will help you.", "ogTitle": "Next Steps", "scrapeId": "e9f44007-7be7-4a71-b195-3f138edf9954", "sourceURL": "https://helm.sh/docs/chart_template_guide/wrapping_up", "url": "https://helm.sh/docs/chart_template_guide/wrapping_up/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Next Steps\"?\n\nAssistant: Here are the recommended best practices:\n\n• Visit The Helm Project for contributions and suggestions.\n• Utilize the CNCF Artifact Hub for chart resources.\n• Refer to Kubernetes Documentation for resource examples.\n• Check out the Helm Charts Guide for workflow explanations.\n• Explore the Helm Chart Hooks Guide for lifecycle hooks.\n• Read the Helm Charts Tips and Tricks for writing tips.\n• Use the Sprig documentation for template functions.\n• Consult the Go template docs for syntax details.\n• Leverage the Schelm tool for debugging charts.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/wrapping_up", "title": "Next Steps", "description": "This guide is intended to give you, the chart developer, a strong understanding of how to use Helm's template language, focusing on the technical aspects of template development.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:34:57", "type": "best_practices", "page_metadata": {"description": "Wrapping up - some useful pointers to other documentation that will help you.", "twitter:card": "summary", "twitter:title": "Helm | Next Steps", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Next Steps\n", "viewport": "width=device-width,initial-scale=1", "language": "en", "og:description": "Wrapping up - some useful pointers to other documentation that will help you.", "twitter:description": "Wrapping up - some useful pointers to other documentation that will help you.", "ogUrl": "https://helm.sh/docs/chart_template_guide/wrapping_up/", "og:url": "https://helm.sh/docs/chart_template_guide/wrapping_up/", "og:title": ["Next Steps", "Next Steps"], "ogDescription": "Wrapping up - some useful pointers to other documentation that will help you.", "ogTitle": "Next Steps", "scrapeId": "e9f44007-7be7-4a71-b195-3f138edf9954", "sourceURL": "https://helm.sh/docs/chart_template_guide/wrapping_up", "url": "https://helm.sh/docs/chart_template_guide/wrapping_up/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Appendix: Go Data Types and Templates\"?\n\nAssistant: This section covers the various data types used in the Helm template language, which is implemented in the Go programming language.\n\nHere's a detailed explanation:\n\n\n## Go Data Types\nThe Helm template language is implemented in the strongly typed Go programming language. For that reason, variables in templates are typed. For the most part, variables will be exposed as one of the following types:\n\n- string: A string of text\n- bool: a `true` or `false`\n- int: An integer value (there are also 8, 16, 32, and 64 bit signed and unsigned variants of this)\n- float64: a 64-bit floating point value (there are also 8, 16, and 32 bit varieties of this)\n- a byte slice ( `[]byte`), often used to hold (potentially) binary data\n- struct: an object with properties and methods\n- a slice (indexed list) of one of the previous types\n- a string-keyed map ( `map[string]interface{}`) where the value is one of the previous types\n\nThere are many other types in Go, and sometimes you will have to convert between them in your templates. The easiest way to debug an object's type is to pass it through `printf \"%T\"` in a template, which will print the type. Also see the `typeOf` and `kindOf` functions.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/data_types", "title": "Appendix: Go Data Types and Templates", "description": "This section covers the various data types used in the Helm template language, which is implemented in the Go programming language.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:35:26", "type": "overview", "page_metadata": {"ogDescription": "A quick overview on variables in templates.", "viewport": "width=device-width,initial-scale=1", "og:description": "A quick overview on variables in templates.", "title": "Helm | Appendix: Go Data Types and Templates\n", "twitter:description": "A quick overview on variables in templates.", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/chart_template_guide/data_types/", "ogTitle": "Appendix: Go Data Types and Templates", "description": "A quick overview on variables in templates.", "og:title": ["Appendix: Go Data Types and Templates", "Appendix: Go Data Types and Templates"], "twitter:title": "Helm | Appendix: Go Data Types and Templates", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_template_guide/data_types/", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "69b9e1c0-8129-470c-801d-5c6299961d71", "sourceURL": "https://helm.sh/docs/chart_template_guide/data_types", "url": "https://helm.sh/docs/chart_template_guide/data_types/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Appendix: Go Data Types and Templates\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use printf \"%T\" to debug an object's type in a template.\n• Refer to the `typeOf` and `kindOf` functions for additional type information.\n", "metadata": {"source_url": "https://helm.sh/docs/chart_template_guide/data_types", "title": "Appendix: Go Data Types and Templates", "description": "This section covers the various data types used in the Helm template language, which is implemented in the Go programming language.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:35:26", "type": "best_practices", "page_metadata": {"ogDescription": "A quick overview on variables in templates.", "viewport": "width=device-width,initial-scale=1", "og:description": "A quick overview on variables in templates.", "title": "Helm | Appendix: Go Data Types and Templates\n", "twitter:description": "A quick overview on variables in templates.", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/chart_template_guide/data_types/", "ogTitle": "Appendix: Go Data Types and Templates", "description": "A quick overview on variables in templates.", "og:title": ["Appendix: Go Data Types and Templates", "Appendix: Go Data Types and Templates"], "twitter:title": "Helm | Appendix: Go Data Types and Templates", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/chart_template_guide/data_types/", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "69b9e1c0-8129-470c-801d-5c6299961d71", "sourceURL": "https://helm.sh/docs/chart_template_guide/data_types", "url": "https://helm.sh/docs/chart_template_guide/data_types/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"helm delete\"?\n\nAssistant: This command has been renamed. Please refer instead to helm uninstall.\n\nHere's a detailed explanation:\n\n\n## References\nThis command has been renamed. Please refer instead to [helm uninstall](https://helm.sh/docs/helm/helm_uninstall/).\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_delete", "title": "helm delete", "description": "This command has been renamed. Please refer instead to helm uninstall.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 21:35:30", "type": "overview", "page_metadata": {"ogTitle": "", "language": "en", "og:url": "https://helm.sh/docs/helm/helm_delete/", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm |\n", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | ", "ogUrl": "https://helm.sh/docs/helm/helm_delete/", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["", ""], "twitter:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "c7ff577c-6a81-4331-9f7a-8f2620eaf74c", "sourceURL": "https://helm.sh/docs/helm/helm_delete", "url": "https://helm.sh/docs/helm/helm_delete/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"helm init\"?\n\nAssistant: This command does not exist in Helm 3, following the removal of Tiller. You no longer need to install Tiller in your cluster in order to use Helm.\n\nHere's a detailed explanation:\n\n\n## Helm 3 and Tiller\nThis command does not exist in Helm 3, following the removal of Tiller. You no longer need to install Tiller in your cluster in order to use Helm.\n\n## Helm 2 Documentation\nIf you are using Helm 2, go to v2.helm.sh to view the Helm Init documentation.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_init", "title": "helm init", "description": "This command does not exist in Helm 3, following the removal of Tiller. You no longer need to install Tiller in your cluster in order to use Helm.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:35:34", "type": "overview", "page_metadata": {"description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_init/", "twitter:card": "summary", "language": "en", "ogTitle": "", "og:title": ["", ""], "title": "Helm |\n", "og:url": "https://helm.sh/docs/helm/helm_init/", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | ", "ogDescription": "Helm - The Kubernetes Package Manager.", "scrapeId": "700700f7-fff3-46a0-a57b-e7c7d7446822", "sourceURL": "https://helm.sh/docs/helm/helm_init", "url": "https://helm.sh/docs/helm/helm_init/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"helm init\"?\n\nAssistant: Here are the recommended best practices:\n\n• For Helm 2 users, refer to the Helm Init documentation at v2.helm.sh.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_init", "title": "helm init", "description": "This command does not exist in Helm 3, following the removal of Tiller. You no longer need to install Tiller in your cluster in order to use Helm.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:35:34", "type": "best_practices", "page_metadata": {"description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_init/", "twitter:card": "summary", "language": "en", "ogTitle": "", "og:title": ["", ""], "title": "Helm |\n", "og:url": "https://helm.sh/docs/helm/helm_init/", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | ", "ogDescription": "Helm - The Kubernetes Package Manager.", "scrapeId": "700700f7-fff3-46a0-a57b-e7c7d7446822", "sourceURL": "https://helm.sh/docs/helm/helm_init", "url": "https://helm.sh/docs/helm/helm_init/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"helm inspect\"?\n\nAssistant: This command has been renamed. Please refer instead to helm show.\n\nHere's a detailed explanation:\n\n\n## Links\n[Helm Project](https://github.com/helm/helm)[Blog](https://helm.sh/blog)[Events](https://www.cncf.io/community/kubecon-cloudnativecon-events/)[Quick Start Guide](https://helm.sh/docs/intro/quickstart/)[Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md)[Charts](https://artifacthub.io/)[Introduction](https://helm.sh/docs/topics/charts/)[Chart tips & tricks](https://helm.sh/docs/howto/charts_tips_and_tricks/)[Developing Charts](https://helm.sh/docs/chart_template_guide/)[Search 800+ Charts](https://artifacthub.io/)[Development](https://github.com/helm/community/blob/main/communication.md)[#helm-dev](https://kubernetes.slack.com/messages/C51E88VDG) _(slack)_[Contribution Guide](https://github.com/helm/helm/blob/main/CONTRIBUTING.md)[Maintainers](https://github.com/helm/helm/blob/main/OWNERS)[Weekly Meetings](https://github.com/helm/community/blob/main/communication.md#meetings)[Community](https://github.com/helm/community)[#helm-users](https://kubernetes.slack.com/messages/C0NH30761 \"#helm-users on Slack\") _(slack)_[Mailing List](https://lists.cncf.io/g/cncf-helm/topics)[Logos](https://github.com/cncf/artwork/tree/master/projects/helm) & [Art](https://github.com/helm/community/tree/main/art)[Twitter](https://twitter.com/helmpack)\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_inspect", "title": "helm inspect", "description": "This command has been renamed. Please refer instead to helm show.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-02-27 21:35:43", "type": "overview", "page_metadata": {"title": "Helm |\n", "twitter:card": "summary", "twitter:title": "Helm | ", "ogUrl": "https://helm.sh/docs/helm/helm_inspect/", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "og:title": ["", ""], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_inspect/", "ogTitle": "", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "784d34da-1f6f-46a9-8f7a-c4a10b7b4598", "sourceURL": "https://helm.sh/docs/helm/helm_inspect", "url": "https://helm.sh/docs/helm/helm_inspect/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Deprecated Kubernetes APIs\"?\n\nAssistant: This page covers the deprecation policy of Kubernetes APIs, how to handle deprecated API versions in Helm charts, and best practices for chart maintainers and Helm users.\n\nHere's a detailed explanation:\n\n\n## Introduction\nKubernetes is an API-driven system and the API evolves over time to reflect the evolving understanding of the problem space. This is common practice across systems and their APIs. An important part of evolving APIs is a good deprecation policy and process to inform users of how changes to APIs are implemented. In other words, consumers of your API need to know in advance and in what release an API will be removed or changed. This removes the element of surprise and breaking changes to consumers.\n\n## Kubernetes Deprecation Policy\nThe Kubernetes deprecation policy documents how Kubernetes handles the changes to its API versions. The policy for deprecation states the timeframe that API versions will be supported following a deprecation announcement. It is therefore important to be aware of deprecation announcements and know when API versions will be removed, to help minimize the effect.\n\n## Announcement Example\nThis is an example of an announcement for the removal of deprecated API versions in Kubernetes 1.16 and was advertised a few months prior to the release. These API versions would have been announced for deprecation prior to this again. This shows that there is a good policy in place which informs consumers of API version support.\n\n## Helm Templates and API Groups\nHelm templates specify a Kubernetes API group when defining a Kubernetes object, similar to a Kubernetes manifest file. It is specified in the apiVersion field of the template and it identifies the API version of the Kubernetes object. This means that Helm users and chart maintainers need to be aware when Kubernetes API versions have been deprecated and in what Kubernetes version they will be removed.\n\n## Chart Maintainers\nYou should audit your charts checking for Kubernetes API versions that are deprecated or are removed in a Kubernetes version. The API versions found as due to be or that are now out of support, should be updated to the supported version and a new version of the chart released. The API version is defined by the kind and apiVersion fields. For example, here is a removed Deployment object API version in Kubernetes 1.16:\n\n```yaml\napiVersion: apps/v1beta1\nkind: Deployment\n```\n\n## Helm Users\nYou should audit the charts that you use (similar to chart maintainers) and identify any charts where API versions are deprecated or removed in a Kubernetes version. For the charts identified, you need to check for the latest version of the chart (which has supported API versions) or update the chart yourself.\n\nAdditionally, you also need to audit any charts deployed (i.e. Helm releases) checking again for any deprecated or removed API versions. This can be done by getting details of a release using the helm get manifest command.\n\n## Updating Helm Releases\nThe means for updating a Helm release to supported APIs depends on your findings as follows:\n\n1. If you find deprecated API versions only then:\n   - Perform a helm upgrade with a version of the chart with supported Kubernetes API versions\n   - Add a description in the upgrade, something along the lines to not perform a rollback to a Helm version prior to this current version\n\n2. If you find any API version(s) that is/are removed in a Kubernetes version then:\n   - If you are running a Kubernetes version where the API version(s) are still available (for example, you are on Kubernetes 1.15 and found you use APIs that will be removed in Kubernetes 1.16):\n     - Follow the step 1 procedure\n   - Otherwise (for example, you are already running a Kubernetes version where some API versions reported by helm get manifest are no longer available):\n     - You need to edit the release manifest that is stored in the cluster to update the API versions to supported APIs.\n\n## Error Handling\nIf you don't update a release as suggested previously, you will have an error similar to the following when trying to upgrade a release in a Kubernetes version where its API version(s) is/are removed:\n\n```fallback\nError: UPGRADE FAILED: current release manifest contains removed kubernetes api(s) for this kubernetes version and it is therefore unable to build the kubernetes objects for performing the diff. error from kubernetes: unable to recognize \"\": no matches for kind \"Deployment\" in version \"apps/v1beta1\"\n```\n\nHelm fails in this scenario because it attempts to create a diff patch between the current deployed release (which contains the Kubernetes APIs that are removed in this Kubernetes version) against the chart you are passing with the updated/supported API versions.\n\n## Updating API Versions of a Release Manifest\nThe manifest is a property of the Helm release object which is stored in the data field of a Secret (default) or ConfigMap in the cluster. The data field contains a gzipped object which is base 64 encoded (there is an additional base 64 encoding for a Secret). There is a Secret/ConfigMap per release version/revision in the namespace of the release.\n\nYou can use the Helm mapkubeapis plugin to perform the update of a release to supported APIs. Check out the readme for more details.\n\n## Manual Steps for Updating API Versions\nAlternatively, you can follow these manual steps to perform an update of the API versions of a release manifest. Depending on your configuration you will follow the steps for the Secret or ConfigMap backend.\n\n- Get the name of the Secret or Configmap associated with the latest deployed release:\n  - Secrets backend: `kubectl get secret -l owner=helm,status=deployed,name=<release_name> --namespace <release_namespace> | awk '{print $1}' | grep -v NAME`\n  - ConfigMap backend: `kubectl get configmap -l owner=helm,status=deployed,name=<release_name> --namespace <release_namespace> | awk '{print $1}' | grep -v NAME`\n- Get latest deployed release details:\n  - Secrets backend: `kubectl get secret <release_secret_name> -n <release_namespace> -o yaml > release.yaml`\n  - ConfigMap backend: `kubectl get configmap <release_configmap_name> -n <release_namespace> -o yaml > release.yaml`\n- Backup the release in case you need to restore if something goes wrong:\n  - `cp release.yaml release.bak`\n  - In case of emergency, restore: `kubectl apply -f release.bak -n <release_namespace>`\n- Decode the release object:\n  - Secrets backend: `cat release.yaml | grep -oP '(?<=release: ).*' | base64 -d | base64 -d | gzip -d > release.data.decoded`\n  - ConfigMap backend: `cat release.yaml | grep -oP '(?<=release: ).*' | base64 -d | gzip -d > release.data.decoded`\n- Change API versions of the manifests. Can use any tool (e.g. editor) to make the changes. This is in the manifest field of your decoded release object (release.data.decoded)\n- Encode the release object:\n  - Secrets backend: `cat release.data.decoded | gzip | base64 | base64`\n  - ConfigMap backend: `cat release.data.decoded | gzip | base64`\n- Replace data.release property value in the deployed release file (release.yaml) with the new encoded release object\n- Apply file to namespace: `kubectl apply -f release.yaml -n <release_namespace>`\n- Perform a helm upgrade with a version of the chart with supported Kubernetes API versions\n- Add a description in the upgrade, something along the lines to not perform a rollback to a Helm version prior to this current version.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/kubernetes_apis", "title": "Deprecated Kubernetes APIs", "description": "This page covers the deprecation policy of Kubernetes APIs, how to handle deprecated API versions in Helm charts, and best practices for chart maintainers and Helm users.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:36:07", "type": "overview", "page_metadata": {"og:url": "https://helm.sh/docs/topics/kubernetes_apis/", "description": "Explains deprecated Kubernetes APIs in Helm", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "og:title": ["Deprecated Kubernetes APIs", "Deprecated Kubernetes APIs"], "og:description": "Explains deprecated Kubernetes APIs in Helm", "twitter:title": "Helm | Deprecated Kubernetes APIs", "ogUrl": "https://helm.sh/docs/topics/kubernetes_apis/", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Deprecated Kubernetes APIs\n", "ogTitle": "Deprecated Kubernetes APIs", "ogDescription": "Explains deprecated Kubernetes APIs in Helm", "twitter:description": "Explains deprecated Kubernetes APIs in Helm", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "41471409-b8a3-4334-a1ce-43e481dd4cf4", "sourceURL": "https://helm.sh/docs/topics/kubernetes_apis", "url": "https://helm.sh/docs/topics/kubernetes_apis/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Deprecated Kubernetes APIs\"?\n\nAssistant: Here are some code examples:\n\n### Removed Deployment Object API Version\n```yaml\n```yaml\napiVersion: apps/v1beta1\nkind: Deployment\n```\n```\n\n### Error on Upgrade\n```yaml\n```fallback\nError: UPGRADE FAILED: current release manifest contains removed kubernetes api(s) for this kubernetes version and it is therefore unable to build the kubernetes objects for performing the diff. error from kubernetes: unable to recognize \"\": no matches for kind \"Deployment\" in version \"apps/v1beta1\"\n```\n```\n\n### Secrets Backend Command to Get Secret Name\n```yaml\n`kubectl get secret -l owner=helm,status=deployed,name=<release_name> --namespace <release_namespace> | awk '{print $1}' | grep -v NAME`\n```\n\n### ConfigMap Backend Command to Get ConfigMap Name\n```yaml\n`kubectl get configmap -l owner=helm,status=deployed,name=<release_name> --namespace <release_namespace> | awk '{print $1}' | grep -v NAME`\n```\n\n### Secrets Backend Command to Get Latest Deployed Release Details\n```yaml\n`kubectl get secret <release_secret_name> -n <release_namespace> -o yaml > release.yaml`\n```\n\n### ConfigMap Backend Command to Get Latest Deployed Release Details\n```yaml\n`kubectl get configmap <release_configmap_name> -n <release_namespace> -o yaml > release.yaml`\n```\n\n### Secrets Backend Command to Decode Release Object\n```yaml\n`cat release.yaml | grep -oP '(?<=release: ).*' | base64 -d | base64 -d | gzip -d > release.data.decoded`\n```\n\n### ConfigMap Backend Command to Decode Release Object\n```yaml\n`cat release.yaml | grep -oP '(?<=release: ).*' | base64 -d | gzip -d > release.data.decoded`\n```\n\n### Secrets Backend Command to Encode Release Object\n```yaml\n`cat release.data.decoded | gzip | base64 | base64`\n```\n\n### ConfigMap Backend Command to Encode Release Object\n```yaml\n`cat release.data.decoded | gzip | base64`\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/kubernetes_apis", "title": "Deprecated Kubernetes APIs", "description": "This page covers the deprecation policy of Kubernetes APIs, how to handle deprecated API versions in Helm charts, and best practices for chart maintainers and Helm users.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:36:07", "type": "code_examples", "page_metadata": {"og:url": "https://helm.sh/docs/topics/kubernetes_apis/", "description": "Explains deprecated Kubernetes APIs in Helm", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "og:title": ["Deprecated Kubernetes APIs", "Deprecated Kubernetes APIs"], "og:description": "Explains deprecated Kubernetes APIs in Helm", "twitter:title": "Helm | Deprecated Kubernetes APIs", "ogUrl": "https://helm.sh/docs/topics/kubernetes_apis/", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Deprecated Kubernetes APIs\n", "ogTitle": "Deprecated Kubernetes APIs", "ogDescription": "Explains deprecated Kubernetes APIs in Helm", "twitter:description": "Explains deprecated Kubernetes APIs in Helm", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "41471409-b8a3-4334-a1ce-43e481dd4cf4", "sourceURL": "https://helm.sh/docs/topics/kubernetes_apis", "url": "https://helm.sh/docs/topics/kubernetes_apis/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Deprecated Kubernetes APIs\"?\n\nAssistant: Here are the recommended best practices:\n\n• The best practice is to upgrade releases using deprecated API versions to supported API versions, prior to upgrading to a Kubernetes cluster that removes those API versions.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/kubernetes_apis", "title": "Deprecated Kubernetes APIs", "description": "This page covers the deprecation policy of Kubernetes APIs, how to handle deprecated API versions in Helm charts, and best practices for chart maintainers and Helm users.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:36:07", "type": "best_practices", "page_metadata": {"og:url": "https://helm.sh/docs/topics/kubernetes_apis/", "description": "Explains deprecated Kubernetes APIs in Helm", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "viewport": "width=device-width,initial-scale=1", "og:title": ["Deprecated Kubernetes APIs", "Deprecated Kubernetes APIs"], "og:description": "Explains deprecated Kubernetes APIs in Helm", "twitter:title": "Helm | Deprecated Kubernetes APIs", "ogUrl": "https://helm.sh/docs/topics/kubernetes_apis/", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Deprecated Kubernetes APIs\n", "ogTitle": "Deprecated Kubernetes APIs", "ogDescription": "Explains deprecated Kubernetes APIs in Helm", "twitter:description": "Explains deprecated Kubernetes APIs in Helm", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "41471409-b8a3-4334-a1ce-43e481dd4cf4", "sourceURL": "https://helm.sh/docs/topics/kubernetes_apis", "url": "https://helm.sh/docs/topics/kubernetes_apis/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm\"?\n\nAssistant: The Helm package manager for Kubernetes.\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThe Kubernetes package manager\n\nCommon actions for Helm:\n\n- helm search: search for charts\n- helm pull: download a chart to your local directory to view\n- helm install: upload the chart to Kubernetes\n- helm list: list releases of charts\n\nEnvironment variables:\n\n| Name | Description |\n| --- | --- |\n| $HELM_CACHE_HOME | set an alternative location for storing cached files. |\n| $HELM_CONFIG_HOME | set an alternative location for storing Helm configuration. |\n| $HELM_DATA_HOME | set an alternative location for storing Helm data. |\n| $HELM_DEBUG | indicate whether or not Helm is running in Debug mode |\n| $HELM_DRIVER | set the backend storage driver. Values are: configmap, secret, memory, sql. |\n| $HELM_DRIVER_SQL_CONNECTION_STRING | set the connection string the SQL storage driver should use. |\n| $HELM_MAX_HISTORY | set the maximum number of helm release history. |\n| $HELM_NAMESPACE | set the namespace used for the helm operations. |\n| $HELM_NO_PLUGINS | disable plugins. Set HELM_NO_PLUGINS=1 to disable plugins. |\n| $HELM_PLUGINS | set the path to the plugins directory |\n| $HELM_REGISTRY_CONFIG | set the path to the registry config file. |\n| $HELM_REPOSITORY_CACHE | set the path to the repository cache directory |\n| $HELM_REPOSITORY_CONFIG | set the path to the repositories file. |\n| $KUBECONFIG | set an alternative Kubernetes configuration file (default \"~/.kube/config\") |\n| $HELM_KUBEAPISERVER | set the Kubernetes API Server Endpoint for authentication |\n| $HELM_KUBECAFILE | set the Kubernetes certificate authority file. |\n| $HELM_KUBEASGROUPS | set the Groups to use for impersonation using a comma-separated list. |\n| $HELM_KUBEASUSER | set the Username to impersonate for the operation. |\n| $HELM_KUBECONTEXT | set the name of the kubeconfig context. |\n| $HELM_KUBETOKEN | set the Bearer KubeToken used for authentication. |\n| $HELM_KUBEINSECURE_SKIP_TLS_VERIFY | indicate if the Kubernetes API server's certificate validation should be skipped (insecure) |\n| $HELM_KUBETLS_SERVER_NAME | set the server name used to validate the Kubernetes API server certificate |\n| $HELM_BURST_LIMIT | set the default burst limit in the case the server contains many CRDs (default 100, -1 to disable) |\n| $HELM_QPS | set the Queries Per Second in cases where a high number of calls exceed the option for higher burst values |\n\nHelm stores cache, configuration, and data based on the following configuration order:\n\n- If a HELM_*_HOME environment variable is set, it will be used\n- Otherwise, on systems supporting the XDG base directory specification, the XDG variables will be used\n- When no other location is set a default location will be used based on the operating system\n\nBy default, the default directories depend on the Operating System. The defaults are listed below:\n\n| Operating System | Cache Path | Configuration Path | Data Path |\n| --- | --- | --- | --- |\n| Linux | $HOME/.cache/helm | $HOME/.config/helm | $HOME/.local/share/helm |\n| macOS | $HOME/Library/Caches/helm | $HOME/Library/Preferences/helm | $HOME/Library/helm |\n| Windows | %TEMP%\\helm | %APPDATA%\\helm | %APPDATA%\\helm |\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm", "title": "Helm", "description": "The Helm package manager for Kubernetes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:36:25", "type": "overview", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm/", "twitter:card": "summary", "twitter:title": "Helm | Helm", "ogTitle": "Helm", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm\n", "language": "en", "og:title": ["Helm", "Helm"], "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm/", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "f4772a94-71ae-42e6-9374-b6860eafde71", "sourceURL": "https://helm.sh/docs/helm/helm", "url": "https://helm.sh/docs/helm/helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n  -h, --help                            help for helm\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm", "title": "Helm", "description": "The Helm package manager for Kubernetes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:36:25", "type": "code_examples", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm/", "twitter:card": "summary", "twitter:title": "Helm | Helm", "ogTitle": "Helm", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm\n", "language": "en", "og:title": ["Helm", "Helm"], "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm/", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "f4772a94-71ae-42e6-9374-b6860eafde71", "sourceURL": "https://helm.sh/docs/helm/helm", "url": "https://helm.sh/docs/helm/helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm\"?\n\nAssistant: Here are the recommended best practices:\n\n• If a HELM_*_HOME environment variable is set, it will be used for configuration.\n• On systems supporting the XDG base directory specification, the XDG variables will be used for configuration.\n• When no other location is set, a default location will be used based on the operating system.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm", "title": "Helm", "description": "The Helm package manager for Kubernetes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:36:25", "type": "best_practices", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm/", "twitter:card": "summary", "twitter:title": "Helm | Helm", "ogTitle": "Helm", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm\n", "language": "en", "og:title": ["Helm", "Helm"], "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm/", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "f4772a94-71ae-42e6-9374-b6860eafde71", "sourceURL": "https://helm.sh/docs/helm/helm", "url": "https://helm.sh/docs/helm/helm/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Completion Bash\"?\n\nAssistant: generate autocompletion script for bash\n\nHere's a detailed explanation:\n\n\n## Synopsis\nGenerate the autocompletion script for Helm for the bash shell.\n\nTo load completions in your current shell session:\n\n```\nsource <(helm completion bash)\n```\n\nTo load completions for every new session, execute once:\n\n- Linux:\n\n```\nhelm completion bash > /etc/bash_completion.d/helm\n```\n\n- MacOS:\n\n```\nhelm completion bash > /usr/local/etc/bash_completion.d/helm\n```\n\n```fallback\nhelm completion bash [flags]\n```\n\n## Options\n```fallback\n  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm completion](https://helm.sh/docs/helm/helm_completion/) \\- generate autocompletion scripts for the specified shell\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_bash", "title": "Helm Completion Bash", "description": "generate autocompletion script for bash", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:36:45", "type": "overview", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_completion_bash/", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Completion Bash\n", "ogTitle": "Helm Completion Bash", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_completion_bash/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Completion Bash", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Completion Bash", "Helm Completion Bash"], "language": "en", "scrapeId": "792bcb44-3cd9-43b1-9144-43c314cbc9e6", "sourceURL": "https://helm.sh/docs/helm/helm_completion_bash", "url": "https://helm.sh/docs/helm/helm_completion_bash/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Completion Bash\"?\n\nAssistant: Here are some code examples:\n\n### Load completions in current shell session\n```yaml\nsource <(helm completion bash)\n```\n\n### Load completions for Linux\n```yaml\nhelm completion bash > /etc/bash_completion.d/helm\n```\n\n### Load completions for MacOS\n```yaml\nhelm completion bash > /usr/local/etc/bash_completion.d/helm\n```\n\n### Fallback command\n```yaml\nhelm completion bash [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_bash", "title": "Helm Completion Bash", "description": "generate autocompletion script for bash", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:36:45", "type": "code_examples", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_completion_bash/", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Completion Bash\n", "ogTitle": "Helm Completion Bash", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_completion_bash/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Completion Bash", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Completion Bash", "Helm Completion Bash"], "language": "en", "scrapeId": "792bcb44-3cd9-43b1-9144-43c314cbc9e6", "sourceURL": "https://helm.sh/docs/helm/helm_completion_bash", "url": "https://helm.sh/docs/helm/helm_completion_bash/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Completion Bash\"?\n\nAssistant: Here are the recommended best practices:\n\n• To load completions for every new session, execute the command once for your operating system.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_bash", "title": "Helm Completion Bash", "description": "generate autocompletion script for bash", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:36:45", "type": "best_practices", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_completion_bash/", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Completion Bash\n", "ogTitle": "Helm Completion Bash", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_completion_bash/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Completion Bash", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Completion Bash", "Helm Completion Bash"], "language": "en", "scrapeId": "792bcb44-3cd9-43b1-9144-43c314cbc9e6", "sourceURL": "https://helm.sh/docs/helm/helm_completion_bash", "url": "https://helm.sh/docs/helm/helm_completion_bash/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Completion Fish\"?\n\nAssistant: generate autocompletion script for fish\n\nHere's a detailed explanation:\n\n\n## Synopsis\nGenerate the autocompletion script for Helm for the fish shell.\n\nTo load completions in your current shell session:\n\n```\nhelm completion fish | source\n```\n\nTo load completions for every new session, execute once:\n\n```\nhelm completion fish > ~/.config/fish/completions/helm.fish\n```\n\nYou will need to start a new shell for this setup to take effect.\n\n```fallback\nhelm completion fish [flags]\n```\n\n## Options\n```fallback\n  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_fish", "title": "Helm Completion Fish", "description": "generate autocompletion script for fish", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:36:55", "type": "overview", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_completion_fish/", "og:title": ["Helm Completion Fish", "Helm Completion Fish"], "twitter:title": "Helm | Helm Completion Fish", "ogTitle": "Helm Completion Fish", "twitter:card": "summary", "language": "en", "og:url": "https://helm.sh/docs/helm/helm_completion_fish/", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Completion Fish\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "02272ea3-d43c-4129-ab80-7baedf60a0cd", "sourceURL": "https://helm.sh/docs/helm/helm_completion_fish", "url": "https://helm.sh/docs/helm/helm_completion_fish/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Completion Fish\"?\n\nAssistant: Here are some code examples:\n\n### Load completions in current shell session\n```yaml\nhelm completion fish | source\n```\n\n### Load completions for every new session\n```yaml\nhelm completion fish > ~/.config/fish/completions/helm.fish\n```\n\n### Fallback command\n```yaml\nhelm completion fish [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_fish", "title": "Helm Completion Fish", "description": "generate autocompletion script for fish", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:36:55", "type": "code_examples", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_completion_fish/", "og:title": ["Helm Completion Fish", "Helm Completion Fish"], "twitter:title": "Helm | Helm Completion Fish", "ogTitle": "Helm Completion Fish", "twitter:card": "summary", "language": "en", "og:url": "https://helm.sh/docs/helm/helm_completion_fish/", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Completion Fish\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "02272ea3-d43c-4129-ab80-7baedf60a0cd", "sourceURL": "https://helm.sh/docs/helm/helm_completion_fish", "url": "https://helm.sh/docs/helm/helm_completion_fish/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Completion Fish\"?\n\nAssistant: Here are the recommended best practices:\n\n• You will need to start a new shell for the setup to take effect.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_fish", "title": "Helm Completion Fish", "description": "generate autocompletion script for fish", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:36:55", "type": "best_practices", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_completion_fish/", "og:title": ["Helm Completion Fish", "Helm Completion Fish"], "twitter:title": "Helm | Helm Completion Fish", "ogTitle": "Helm Completion Fish", "twitter:card": "summary", "language": "en", "og:url": "https://helm.sh/docs/helm/helm_completion_fish/", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Completion Fish\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "02272ea3-d43c-4129-ab80-7baedf60a0cd", "sourceURL": "https://helm.sh/docs/helm/helm_completion_fish", "url": "https://helm.sh/docs/helm/helm_completion_fish/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Completion Powershell\"?\n\nAssistant: generate autocompletion script for powershell\n\nHere's a detailed explanation:\n\n\n## Synopsis\nGenerate the autocompletion script for powershell.\n\nTo load completions in your current shell session:\nPS C:> helm completion powershell \\| Out-String \\| Invoke-Expression\n\nTo load completions for every new session, add the output of the above command to your powershell profile.\n\n## Options\n```fallback\n  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm completion](https://helm.sh/docs/helm/helm_completion/) \\- generate autocompletion scripts for the specified shell\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_powershell", "title": "Helm Completion Powershell", "description": "generate autocompletion script for powershell", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:37:15", "type": "overview", "page_metadata": {"ogTitle": "Helm Completion Powershell", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_completion_powershell/", "twitter:title": "Helm | Helm Completion Powershell", "title": "Helm | Helm Completion Powershell\n", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "language": "en", "og:title": ["Helm Completion Powershell", "Helm Completion Powershell"], "twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_completion_powershell/", "scrapeId": "c77bccc9-daf1-49d0-aca7-d939740f5b1e", "sourceURL": "https://helm.sh/docs/helm/helm_completion_powershell", "url": "https://helm.sh/docs/helm/helm_completion_powershell/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Completion Powershell\"?\n\nAssistant: Here are some code examples:\n\n### Helm Completion Command\n```yaml\nhelm completion powershell [flags]\n```\n\n### Loading Completions in Current Session\n```yaml\nPS C:> helm completion powershell \\| Out-String \\| Invoke-Expression\n```\n\n### Options Command\n```yaml\n  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n```\n\n### Inherited Options\n```yaml\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_powershell", "title": "Helm Completion Powershell", "description": "generate autocompletion script for powershell", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:37:15", "type": "code_examples", "page_metadata": {"ogTitle": "Helm Completion Powershell", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_completion_powershell/", "twitter:title": "Helm | Helm Completion Powershell", "title": "Helm | Helm Completion Powershell\n", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "language": "en", "og:title": ["Helm Completion Powershell", "Helm Completion Powershell"], "twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_completion_powershell/", "scrapeId": "c77bccc9-daf1-49d0-aca7-d939740f5b1e", "sourceURL": "https://helm.sh/docs/helm/helm_completion_powershell", "url": "https://helm.sh/docs/helm/helm_completion_powershell/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Completion Powershell\"?\n\nAssistant: Here are the recommended best practices:\n\n• To load completions for every new session, add the output of the helm completion command to your powershell profile.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_powershell", "title": "Helm Completion Powershell", "description": "generate autocompletion script for powershell", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:37:15", "type": "best_practices", "page_metadata": {"ogTitle": "Helm Completion Powershell", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_completion_powershell/", "twitter:title": "Helm | Helm Completion Powershell", "title": "Helm | Helm Completion Powershell\n", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "language": "en", "og:title": ["Helm Completion Powershell", "Helm Completion Powershell"], "twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_completion_powershell/", "scrapeId": "c77bccc9-daf1-49d0-aca7-d939740f5b1e", "sourceURL": "https://helm.sh/docs/helm/helm_completion_powershell", "url": "https://helm.sh/docs/helm/helm_completion_powershell/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Completion Zsh\"?\n\nAssistant: generate autocompletion script for zsh\n\nHere's a detailed explanation:\n\n\n## Synopsis\nGenerate the autocompletion script for Helm for the zsh shell.\n\nTo load completions in your current shell session:\n\n```\nsource <(helm completion zsh)\n```\n\nTo load completions for every new session, execute once:\n\n```\nhelm completion zsh > \"${fpath[1]}/_helm\"\n```\n\n```fallback\nhelm completion zsh [flags]\n```\n\n## Options\n```fallback\n  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm completion](https://helm.sh/docs/helm/helm_completion/) \\- generate autocompletion scripts for the specified shell\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_zsh", "title": "Helm Completion Zsh", "description": "generate autocompletion script for zsh", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:38:51", "type": "overview", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Helm Completion Zsh", "Helm Completion Zsh"], "twitter:description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_completion_zsh/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:title": "Helm | Helm Completion Zsh", "og:url": "https://helm.sh/docs/helm/helm_completion_zsh/", "ogTitle": "Helm Completion Zsh", "description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Completion Zsh\n", "scrapeId": "03adceb0-7463-448e-89a9-62f8c3d4513d", "sourceURL": "https://helm.sh/docs/helm/helm_completion_zsh", "url": "https://helm.sh/docs/helm/helm_completion_zsh/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Completion Zsh\"?\n\nAssistant: Here are some code examples:\n\n### Load completions in current shell session\n```yaml\nsource <(helm completion zsh)\n```\n\n### Load completions for every new session\n```yaml\nhelm completion zsh > \"${fpath[1]}/_helm\"\n```\n\n### Fallback command\n```yaml\nhelm completion zsh [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_zsh", "title": "Helm Completion Zsh", "description": "generate autocompletion script for zsh", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:38:51", "type": "code_examples", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Helm Completion Zsh", "Helm Completion Zsh"], "twitter:description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_completion_zsh/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:title": "Helm | Helm Completion Zsh", "og:url": "https://helm.sh/docs/helm/helm_completion_zsh/", "ogTitle": "Helm Completion Zsh", "description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Completion Zsh\n", "scrapeId": "03adceb0-7463-448e-89a9-62f8c3d4513d", "sourceURL": "https://helm.sh/docs/helm/helm_completion_zsh", "url": "https://helm.sh/docs/helm/helm_completion_zsh/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Completion Zsh\"?\n\nAssistant: Here are the recommended best practices:\n\n• To load completions for every new session, execute the command once to ensure it is available in future sessions.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_completion_zsh", "title": "Helm Completion Zsh", "description": "generate autocompletion script for zsh", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:38:51", "type": "best_practices", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Helm Completion Zsh", "Helm Completion Zsh"], "twitter:description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_completion_zsh/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:title": "Helm | Helm Completion Zsh", "og:url": "https://helm.sh/docs/helm/helm_completion_zsh/", "ogTitle": "Helm Completion Zsh", "description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Completion Zsh\n", "scrapeId": "03adceb0-7463-448e-89a9-62f8c3d4513d", "sourceURL": "https://helm.sh/docs/helm/helm_completion_zsh", "url": "https://helm.sh/docs/helm/helm_completion_zsh/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Create\"?\n\nAssistant: create a new chart with the given name\n\nHere's a detailed explanation:\n\n\n## helm create\nThis command creates a chart directory along with the common files and directories used in a chart.\n\nFor example, 'helm create foo' will create a directory structure that looks something like this:\n\n```\nfoo/\n├── .helmignore   # Contains patterns to ignore when packaging Helm charts.\n├── Chart.yaml    # Information about your chart\n├── values.yaml   # The default values for your templates\n├── charts/       # Charts that this chart depends on\n└── templates/    # The template files\n    └── tests/    # The test files\n```\n\n'helm create' takes a path for an argument. If directories in the given path do not exist, Helm will attempt to create them as it goes. If the given destination exists and there are files in that directory, conflicting files will be overwritten, but other files will be left alone.\n\n## Options\n```fallback\n  -h, --help             help for create\n  -p, --starter string   the name or absolute path to Helm starter scaffold\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_create", "title": "Helm Create", "description": "create a new chart with the given name", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:39:01", "type": "overview", "page_metadata": {"ogTitle": "Helm Create", "viewport": "width=device-width,initial-scale=1", "og:title": ["Helm Create", "Helm Create"], "title": "Helm | Helm Create\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_create/", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_create/", "twitter:title": "Helm | Helm Create", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "scrapeId": "c838ac3b-1dc6-44d9-b9cc-3073779fa21a", "sourceURL": "https://helm.sh/docs/helm/helm_create", "url": "https://helm.sh/docs/helm/helm_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Create\"?\n\nAssistant: Here are some code examples:\n\n### helm create command\n```yaml\nhelm create NAME [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_create", "title": "Helm Create", "description": "create a new chart with the given name", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:39:01", "type": "code_examples", "page_metadata": {"ogTitle": "Helm Create", "viewport": "width=device-width,initial-scale=1", "og:title": ["Helm Create", "Helm Create"], "title": "Helm | Helm Create\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_create/", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_create/", "twitter:title": "Helm | Helm Create", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "scrapeId": "c838ac3b-1dc6-44d9-b9cc-3073779fa21a", "sourceURL": "https://helm.sh/docs/helm/helm_create", "url": "https://helm.sh/docs/helm/helm_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Create\"?\n\nAssistant: Here are the recommended best practices:\n\n• If directories in the given path do not exist, Helm will attempt to create them as it goes.\n• Conflicting files will be overwritten, but other files will be left alone.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_create", "title": "Helm Create", "description": "create a new chart with the given name", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:39:01", "type": "best_practices", "page_metadata": {"ogTitle": "Helm Create", "viewport": "width=device-width,initial-scale=1", "og:title": ["Helm Create", "Helm Create"], "title": "Helm | Helm Create\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_create/", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_create/", "twitter:title": "Helm | Helm Create", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "scrapeId": "c838ac3b-1dc6-44d9-b9cc-3073779fa21a", "sourceURL": "https://helm.sh/docs/helm/helm_create", "url": "https://helm.sh/docs/helm/helm_create/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Dependency\"?\n\nAssistant: Manage a chart's dependencies\n\nHere's a detailed explanation:\n\n\n## Synopsis\nManage the dependencies of a chart.\n\nHelm charts store their dependencies in 'charts/'. For chart developers, it is often easier to manage dependencies in 'Chart.yaml' which declares all dependencies.\n\nThe dependency commands operate on that file, making it easy to synchronize between the desired dependencies and the actual dependencies stored in the 'charts/' directory.\n\nFor example, this Chart.yaml declares two dependencies:\n\n```\n# Chart.yaml\ndependencies:\n- name: nginx\n  version: \"1.2.3\"\n  repository: \"https://example.com/charts\"\n- name: memcached\n  version: \"3.2.1\"\n  repository: \"https://another.example.com/charts\"\n```\n\nThe 'name' should be the name of a chart, where that name must match the name in that chart's 'Chart.yaml' file.\n\nThe 'version' field should contain a semantic version or version range.\n\nThe 'repository' URL should point to a Chart Repository. Helm expects that by appending '/index.yaml' to the URL, it should be able to retrieve the chart repository's index. Note: 'repository' can be an alias. The alias must start with 'alias:' or '@'.\n\nStarting from 2.2.0, repository can be defined as the path to the directory of the dependency charts stored locally. The path should start with a prefix of \"file://\". For example,\n\n```\n# Chart.yaml\ndependencies:\n- name: nginx\n  version: \"1.2.3\"\n  repository: \"file://../dependency_chart/nginx\"\n```\n\nIf the dependency chart is retrieved locally, it is not required to have the repository added to helm by \"helm add repo\". Version matching is also supported for this case.\n\n## Options\n```fallback\n  -h, --help   help for dependency\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n- [helm dependency build](https://helm.sh/docs/helm/helm_dependency_build/) \\- rebuild the charts/ directory based on the Chart.lock file\n- [helm dependency list](https://helm.sh/docs/helm/helm_dependency_list/) \\- list the dependencies for the given chart\n- [helm dependency update](https://helm.sh/docs/helm/helm_dependency_update/) \\- update charts/ based on the contents of Chart.yaml\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_dependency", "title": "Helm Dependency", "description": "Manage a chart's dependencies", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:39:15", "type": "overview", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Dependency\n", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "language": "en", "og:title": ["Helm Dependency", "Helm Dependency"], "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Helm Dependency", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/helm/helm_dependency/", "og:url": "https://helm.sh/docs/helm/helm_dependency/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Dependency", "twitter:card": "summary", "scrapeId": "77277a4e-647a-42c1-a934-129a48d99c3c", "sourceURL": "https://helm.sh/docs/helm/helm_dependency", "url": "https://helm.sh/docs/helm/helm_dependency/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Dependency\"?\n\nAssistant: Here are some code examples:\n\n### Chart.yaml Example with Dependencies\n```yaml\n# Chart.yaml\ndependencies:\n- name: nginx\n  version: \"1.2.3\"\n  repository: \"https://example.com/charts\"\n- name: memcached\n  version: \"3.2.1\"\n  repository: \"https://another.example.com/charts\"\n```\n\n### Local Repository Example\n```yaml\n# Chart.yaml\ndependencies:\n- name: nginx\n  version: \"1.2.3\"\n  repository: \"file://../dependency_chart/nginx\"\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_dependency", "title": "Helm Dependency", "description": "Manage a chart's dependencies", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:39:15", "type": "code_examples", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Dependency\n", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "language": "en", "og:title": ["Helm Dependency", "Helm Dependency"], "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Helm Dependency", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/helm/helm_dependency/", "og:url": "https://helm.sh/docs/helm/helm_dependency/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Dependency", "twitter:card": "summary", "scrapeId": "77277a4e-647a-42c1-a934-129a48d99c3c", "sourceURL": "https://helm.sh/docs/helm/helm_dependency", "url": "https://helm.sh/docs/helm/helm_dependency/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Dependency\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the 'name' in dependencies matches the name in the chart's 'Chart.yaml' file.\n• Use semantic versioning for the 'version' field in dependencies.\n• When using local dependencies, prefix the repository path with 'file://'.\n• If a dependency chart is retrieved locally, it does not need to be added to helm with 'helm add repo'.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_dependency", "title": "Helm Dependency", "description": "Manage a chart's dependencies", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:39:15", "type": "best_practices", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Dependency\n", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "language": "en", "og:title": ["Helm Dependency", "Helm Dependency"], "favicon": "https://helm.sh/img/favicon-152.png", "ogTitle": "Helm Dependency", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/helm/helm_dependency/", "og:url": "https://helm.sh/docs/helm/helm_dependency/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Dependency", "twitter:card": "summary", "scrapeId": "77277a4e-647a-42c1-a934-129a48d99c3c", "sourceURL": "https://helm.sh/docs/helm/helm_dependency", "url": "https://helm.sh/docs/helm/helm_dependency/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Dependency List\"?\n\nAssistant: list the dependencies for the given chart\n\nHere's a detailed explanation:\n\n\n## Synopsis\nList all of the dependencies declared in a chart.\n\nThis can take chart archives and chart directories as input. It will not alter\nthe contents of a chart.\n\nThis will produce an error if the chart cannot be loaded.\n\n## Options\n  -h, --help                 help for list\n      --max-col-width uint   maximum column width for output table (default 80)\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_dependency_list", "title": "Helm Dependency List", "description": "list the dependencies for the given chart", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:39:57", "type": "overview", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_dependency_list/", "twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Dependency List", "Helm Dependency List"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Dependency List", "twitter:card": "summary", "ogTitle": "Helm Dependency List", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Dependency List\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_dependency_list/", "scrapeId": "bdc9bb9b-b92b-4add-999b-29f2c0ce2c4f", "sourceURL": "https://helm.sh/docs/helm/helm_dependency_list", "url": "https://helm.sh/docs/helm/helm_dependency_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Dependency List\"?\n\nAssistant: Here are some code examples:\n\n### Command to list dependencies\n```yaml\nhelm dependency list CHART [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_dependency_list", "title": "Helm Dependency List", "description": "list the dependencies for the given chart", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:39:57", "type": "code_examples", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_dependency_list/", "twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Dependency List", "Helm Dependency List"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Dependency List", "twitter:card": "summary", "ogTitle": "Helm Dependency List", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Dependency List\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_dependency_list/", "scrapeId": "bdc9bb9b-b92b-4add-999b-29f2c0ce2c4f", "sourceURL": "https://helm.sh/docs/helm/helm_dependency_list", "url": "https://helm.sh/docs/helm/helm_dependency_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Dependency List\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure the chart can be loaded before running the command to avoid errors.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_dependency_list", "title": "Helm Dependency List", "description": "list the dependencies for the given chart", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:39:57", "type": "best_practices", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_dependency_list/", "twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Dependency List", "Helm Dependency List"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Dependency List", "twitter:card": "summary", "ogTitle": "Helm Dependency List", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Dependency List\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_dependency_list/", "scrapeId": "bdc9bb9b-b92b-4add-999b-29f2c0ce2c4f", "sourceURL": "https://helm.sh/docs/helm/helm_dependency_list", "url": "https://helm.sh/docs/helm/helm_dependency_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Dependency Update\"?\n\nAssistant: Update charts/ based on the contents of Chart.yaml\n\nHere's a detailed explanation:\n\n\n## Synopsis\nUpdate the on-disk dependencies to mirror Chart.yaml.\n\nThis command verifies that the required charts, as expressed in 'Chart.yaml',\nare present in 'charts/' and are at an acceptable version. It will pull down\nthe latest charts that satisfy the dependencies, and clean up old dependencies.\n\nOn successful update, this will generate a lock file that can be used to\nrebuild the dependencies to an exact version.\n\nDependencies are not required to be represented in 'Chart.yaml'. For that\nreason, an update command will not remove charts unless they are (a) present\nin the Chart.yaml file, but (b) at the wrong version.\n\n## Options\n```gdscript3\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n  -h, --help                       help for update\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             keyring containing public keys (default \"~/.gnupg/pubring.gpg\")\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --skip-refresh               do not refresh the local repository cache\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the packages against signatures\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm dependency](https://helm.sh/docs/helm/helm_dependency/) \\- manage a chart's dependencies\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_dependency_update", "title": "Helm Dependency Update", "description": "Update charts/ based on the contents of Chart.yaml", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:40:21", "type": "overview", "page_metadata": {"twitter:title": "Helm | Helm Dependency Update", "language": "en", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Dependency Update", "ogUrl": "https://helm.sh/docs/helm/helm_dependency_update/", "og:title": ["Helm Dependency Update", "Helm Dependency Update"], "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Dependency Update\n", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/helm/helm_dependency_update/", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "5d94bedc-a762-49f9-b8e9-f304df283462", "sourceURL": "https://helm.sh/docs/helm/helm_dependency_update", "url": "https://helm.sh/docs/helm/helm_dependency_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Dependency Update\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nhelm dependency update CHART [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_dependency_update", "title": "Helm Dependency Update", "description": "Update charts/ based on the contents of Chart.yaml", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:40:21", "type": "code_examples", "page_metadata": {"twitter:title": "Helm | Helm Dependency Update", "language": "en", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Dependency Update", "ogUrl": "https://helm.sh/docs/helm/helm_dependency_update/", "og:title": ["Helm Dependency Update", "Helm Dependency Update"], "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Dependency Update\n", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/helm/helm_dependency_update/", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "5d94bedc-a762-49f9-b8e9-f304df283462", "sourceURL": "https://helm.sh/docs/helm/helm_dependency_update", "url": "https://helm.sh/docs/helm/helm_dependency_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Dependency Update\"?\n\nAssistant: Here are the recommended best practices:\n\n• Dependencies are not required to be represented in 'Chart.yaml'.\n• An update command will not remove charts unless they are present in the Chart.yaml file but at the wrong version.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_dependency_update", "title": "Helm Dependency Update", "description": "Update charts/ based on the contents of Chart.yaml", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:40:21", "type": "best_practices", "page_metadata": {"twitter:title": "Helm | Helm Dependency Update", "language": "en", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Dependency Update", "ogUrl": "https://helm.sh/docs/helm/helm_dependency_update/", "og:title": ["Helm Dependency Update", "Helm Dependency Update"], "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Dependency Update\n", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/helm/helm_dependency_update/", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "5d94bedc-a762-49f9-b8e9-f304df283462", "sourceURL": "https://helm.sh/docs/helm/helm_dependency_update", "url": "https://helm.sh/docs/helm/helm_dependency_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Env\"?\n\nAssistant: helm client environment information\n\nHere's a detailed explanation:\n\n\n## Synopsis\nEnv prints out all the environment information in use by Helm.\n\n## Options\n```fallback\n  -h, --help   help for env\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_env", "title": "Helm Env", "description": "helm client environment information", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:40:37", "type": "overview", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_env/", "og:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Env", "og:title": ["Helm Env", "Helm Env"], "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Helm Env", "twitter:card": "summary", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_env/", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Env\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "655275a6-d066-426f-a1de-756b434c366b", "sourceURL": "https://helm.sh/docs/helm/helm_env", "url": "https://helm.sh/docs/helm/helm_env/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Env\"?\n\nAssistant: Here are some code examples:\n\n### Command to print environment information\n```yaml\nhelm env [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_env", "title": "Helm Env", "description": "helm client environment information", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:40:37", "type": "code_examples", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_env/", "og:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Env", "og:title": ["Helm Env", "Helm Env"], "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Helm Env", "twitter:card": "summary", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_env/", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Env\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "655275a6-d066-426f-a1de-756b434c366b", "sourceURL": "https://helm.sh/docs/helm/helm_env", "url": "https://helm.sh/docs/helm/helm_env/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Env\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --debug flag for verbose output when troubleshooting.\n• Ensure the kubeconfig file path is correctly set to avoid connection issues.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_env", "title": "Helm Env", "description": "helm client environment information", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:40:37", "type": "best_practices", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_env/", "og:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Env", "og:title": ["Helm Env", "Helm Env"], "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Helm Env", "twitter:card": "summary", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_env/", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Env\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "655275a6-d066-426f-a1de-756b434c366b", "sourceURL": "https://helm.sh/docs/helm/helm_env", "url": "https://helm.sh/docs/helm/helm_env/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Get\"?\n\nAssistant: download extended information of a named release\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command consists of multiple subcommands which can be used to get extended information about the release, including:\n\n- The values used to generate the release\n- The generated manifest file\n- The notes provided by the chart of the release\n- The hooks associated with the release\n- The metadata of the release\n\n## Options\n```fallback\n  -h, --help   help for get\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n- [helm get all](https://helm.sh/docs/helm/helm_get_all/) \\- download all information for a named release\n- [helm get hooks](https://helm.sh/docs/helm/helm_get_hooks/) \\- download all hooks for a named release\n- [helm get manifest](https://helm.sh/docs/helm/helm_get_manifest/) \\- download the manifest for a named release\n- [helm get metadata](https://helm.sh/docs/helm/helm_get_metadata/) \\- This command fetches metadata for a given release\n- [helm get notes](https://helm.sh/docs/helm/helm_get_notes/) \\- download the notes for a named release\n- [helm get values](https://helm.sh/docs/helm/helm_get_values/) \\- download the values file for a named release\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get", "title": "Helm Get", "description": "download extended information of a named release", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:40:51", "type": "overview", "page_metadata": {"twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_get/", "og:title": ["Helm Get", "Helm Get"], "ogDescription": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Get", "title": "Helm | Helm Get\n", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Get", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_get/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "scrapeId": "f3556953-c37e-42c3-b75f-3037e5be2f5e", "sourceURL": "https://helm.sh/docs/helm/helm_get", "url": "https://helm.sh/docs/helm/helm_get/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Get All\"?\n\nAssistant: download all information for a named release\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command prints a human readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.\n\n## Options\n```fallback\n  -h, --help              help for all\n      --revision int      get the named release with revision\n      --template string   go template for formatting the output, eg: {{.Release.Name}}\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm get](https://helm.sh/docs/helm/helm_get/) \\- download extended information of a named release\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_all", "title": "Helm Get All", "description": "download all information for a named release", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:41:02", "type": "overview", "page_metadata": {"twitter:title": "Helm | Helm Get All", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": ["Helm Get All", "Helm Get All"], "title": "Helm | Helm Get All\n", "ogTitle": "Helm Get All", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_get_all/", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_get_all/", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "a7d428bf-0caa-4d69-8584-2cfa62e2492e", "sourceURL": "https://helm.sh/docs/helm/helm_get_all", "url": "https://helm.sh/docs/helm/helm_get_all/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Get All\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nhelm get all RELEASE_NAME [flags]\n```\n\n### Options Example\n```yaml\n  -h, --help              help for all\n      --revision int      get the named release with revision\n      --template string   go template for formatting the output, eg: {{.Release.Name}}\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_all", "title": "Helm Get All", "description": "download all information for a named release", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:41:02", "type": "code_examples", "page_metadata": {"twitter:title": "Helm | Helm Get All", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:title": ["Helm Get All", "Helm Get All"], "title": "Helm | Helm Get All\n", "ogTitle": "Helm Get All", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_get_all/", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_get_all/", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "a7d428bf-0caa-4d69-8584-2cfa62e2492e", "sourceURL": "https://helm.sh/docs/helm/helm_get_all", "url": "https://helm.sh/docs/helm/helm_get_all/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Get Hooks\"?\n\nAssistant: download all hooks for a named release\n\nHere's a detailed explanation:\n\n\n## helm get hooks\nThis command downloads hooks for a given release.\n\nHooks are formatted in YAML and separated by the YAML '---\\n' separator.\n\n## Synopsis\n```fallback\nhelm get hooks RELEASE_NAME [flags]\n```\n\n## Options\n```fallback\n  -h, --help           help for hooks\n      --revision int   get the named release with revision\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm get](https://helm.sh/docs/helm/helm_get/) \\- download extended information of a named release\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_hooks", "title": "Helm Get Hooks", "description": "download all hooks for a named release", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-27 21:41:15", "type": "overview", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_get_hooks/", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Helm Get Hooks", "ogTitle": "Helm Get Hooks", "twitter:card": "summary", "og:title": ["Helm Get Hooks", "Helm Get Hooks"], "twitter:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Get Hooks\n", "ogUrl": "https://helm.sh/docs/helm/helm_get_hooks/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "9691ae55-bae0-41ce-a4ca-1b35ec6f685a", "sourceURL": "https://helm.sh/docs/helm/helm_get_hooks", "url": "https://helm.sh/docs/helm/helm_get_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Get Hooks\"?\n\nAssistant: Here are some code examples:\n\n### Command to get hooks\n```yaml\nhelm get hooks RELEASE_NAME [flags]\n```\n\n### Options for hooks\n```yaml\n  -h, --help           help for hooks\n      --revision int   get the named release with revision\n```\n\n### Options inherited from parent commands\n```yaml\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_hooks", "title": "Helm Get Hooks", "description": "download all hooks for a named release", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-27 21:41:15", "type": "code_examples", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_get_hooks/", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Helm Get Hooks", "ogTitle": "Helm Get Hooks", "twitter:card": "summary", "og:title": ["Helm Get Hooks", "Helm Get Hooks"], "twitter:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Get Hooks\n", "ogUrl": "https://helm.sh/docs/helm/helm_get_hooks/", "viewport": "width=device-width,initial-scale=1", "scrapeId": "9691ae55-bae0-41ce-a4ca-1b35ec6f685a", "sourceURL": "https://helm.sh/docs/helm/helm_get_hooks", "url": "https://helm.sh/docs/helm/helm_get_hooks/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Get Manifest\"?\n\nAssistant: download the manifest for a named release\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command fetches the generated manifest for a given release.\n\nA manifest is a YAML-encoded representation of the Kubernetes resources that\nwere generated from this release's chart(s). If a chart is dependent on other\ncharts, those resources will also be included in the manifest.\n\n## Options\n```fallback\n  -h, --help           help for manifest\n      --revision int   get the named release with revision\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm get](https://helm.sh/docs/helm/helm_get/) \\- download extended information of a named release\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_manifest", "title": "Helm Get Manifest", "description": "download the manifest for a named release", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:41:24", "type": "overview", "page_metadata": {"ogTitle": "Helm Get Manifest", "ogUrl": "https://helm.sh/docs/helm/helm_get_manifest/", "twitter:title": "Helm | Helm Get Manifest", "twitter:card": "summary", "title": "Helm | Helm Get Manifest\n", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Get Manifest", "Helm Get Manifest"], "og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_get_manifest/", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "scrapeId": "649071d0-bbae-48b1-830c-eedb3f963616", "sourceURL": "https://helm.sh/docs/helm/helm_get_manifest", "url": "https://helm.sh/docs/helm/helm_get_manifest/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Get Manifest\"?\n\nAssistant: Here are some code examples:\n\n### Command to get manifest\n```yaml\nhelm get manifest RELEASE_NAME [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_manifest", "title": "Helm Get Manifest", "description": "download the manifest for a named release", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:41:24", "type": "code_examples", "page_metadata": {"ogTitle": "Helm Get Manifest", "ogUrl": "https://helm.sh/docs/helm/helm_get_manifest/", "twitter:title": "Helm | Helm Get Manifest", "twitter:card": "summary", "title": "Helm | Helm Get Manifest\n", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Get Manifest", "Helm Get Manifest"], "og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_get_manifest/", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "scrapeId": "649071d0-bbae-48b1-830c-eedb3f963616", "sourceURL": "https://helm.sh/docs/helm/helm_get_manifest", "url": "https://helm.sh/docs/helm/helm_get_manifest/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Get Metadata\"?\n\nAssistant: This command fetches metadata for a given release\n\nHere's a detailed explanation:\n\n\n## helm get metadata\nThis command fetches metadata for a given release\n\n```fallback\nhelm get metadata RELEASE_NAME [flags]\n```\n\n### Options\n\n```fallback\n  -h, --help            help for metadata\n  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --revision int    specify release revision\n```\n\n### Options inherited from parent commands\n\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_metadata", "title": "Helm Get Metadata", "description": "This command fetches metadata for a given release", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:41:32", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_get_metadata/", "ogTitle": "Helm Get Metadata", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "title": "Helm | Helm Get Metadata\n", "og:title": ["Helm Get Metadata", "Helm Get Metadata"], "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Get Metadata", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_get_metadata/", "scrapeId": "1ec496a6-b710-4901-b90f-8b90416bc005", "sourceURL": "https://helm.sh/docs/helm/helm_get_metadata", "url": "https://helm.sh/docs/helm/helm_get_metadata/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Get Metadata\"?\n\nAssistant: Here are some code examples:\n\n### helm get metadata\n```yaml\nhelm get metadata RELEASE_NAME [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_metadata", "title": "Helm Get Metadata", "description": "This command fetches metadata for a given release", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:41:32", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_get_metadata/", "ogTitle": "Helm Get Metadata", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "title": "Helm | Helm Get Metadata\n", "og:title": ["Helm Get Metadata", "Helm Get Metadata"], "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Get Metadata", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_get_metadata/", "scrapeId": "1ec496a6-b710-4901-b90f-8b90416bc005", "sourceURL": "https://helm.sh/docs/helm/helm_get_metadata", "url": "https://helm.sh/docs/helm/helm_get_metadata/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Get Metadata\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format for better readability.\n• Always check the Kubernetes API server's certificate validity unless you are in a secure environment.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_metadata", "title": "Helm Get Metadata", "description": "This command fetches metadata for a given release", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:41:32", "type": "best_practices", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_get_metadata/", "ogTitle": "Helm Get Metadata", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "title": "Helm | Helm Get Metadata\n", "og:title": ["Helm Get Metadata", "Helm Get Metadata"], "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Get Metadata", "language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_get_metadata/", "scrapeId": "1ec496a6-b710-4901-b90f-8b90416bc005", "sourceURL": "https://helm.sh/docs/helm/helm_get_metadata", "url": "https://helm.sh/docs/helm/helm_get_metadata/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Get Notes\"?\n\nAssistant: download the notes for a named release\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command shows notes provided by the chart of a named release.\n\n## Options\n```fallback\n  -h, --help           help for notes\n      --revision int   get the named release with revision\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm get](https://helm.sh/docs/helm/helm_get/) \\- download extended information of a named release\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_notes", "title": "Helm Get Notes", "description": "download the notes for a named release", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:41:39", "type": "overview", "page_metadata": {"language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Get Notes", "twitter:title": "Helm | Helm Get Notes", "title": "Helm | Helm Get Notes\n", "og:title": ["Helm Get Notes", "Helm Get Notes"], "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_get_notes/", "og:url": "https://helm.sh/docs/helm/helm_get_notes/", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "d72c79d4-96c2-4b72-a688-c917f18849e5", "sourceURL": "https://helm.sh/docs/helm/helm_get_notes", "url": "https://helm.sh/docs/helm/helm_get_notes/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Get Notes\"?\n\nAssistant: Here are some code examples:\n\n### Command to get notes\n```yaml\nhelm get notes RELEASE_NAME [flags]\n```\n\n### Options Example\n```yaml\n  -h, --help           help for notes\n      --revision int   get the named release with revision\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_notes", "title": "Helm Get Notes", "description": "download the notes for a named release", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:41:39", "type": "code_examples", "page_metadata": {"language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Get Notes", "twitter:title": "Helm | Helm Get Notes", "title": "Helm | Helm Get Notes\n", "og:title": ["Helm Get Notes", "Helm Get Notes"], "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_get_notes/", "og:url": "https://helm.sh/docs/helm/helm_get_notes/", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "d72c79d4-96c2-4b72-a688-c917f18849e5", "sourceURL": "https://helm.sh/docs/helm/helm_get_notes", "url": "https://helm.sh/docs/helm/helm_get_notes/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Get Notes\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --revision flag to specify a particular revision of the release if needed.\n• Always check the help option (-h or --help) for additional command usage information.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_notes", "title": "Helm Get Notes", "description": "download the notes for a named release", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:41:39", "type": "best_practices", "page_metadata": {"language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Get Notes", "twitter:title": "Helm | Helm Get Notes", "title": "Helm | Helm Get Notes\n", "og:title": ["Helm Get Notes", "Helm Get Notes"], "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_get_notes/", "og:url": "https://helm.sh/docs/helm/helm_get_notes/", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "d72c79d4-96c2-4b72-a688-c917f18849e5", "sourceURL": "https://helm.sh/docs/helm/helm_get_notes", "url": "https://helm.sh/docs/helm/helm_get_notes/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Get Values\"?\n\nAssistant: download the values file for a named release\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command downloads a values file for a given release.\n\n## Options\n```fallback\n  -a, --all             dump all (computed) values\n  -h, --help            help for values\n  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --revision int    get the named release with revision\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm get](https://helm.sh/docs/helm/helm_get/) \\- download extended information of a named release\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_values", "title": "Helm Get Values", "description": "download the values file for a named release", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:41:53", "type": "overview", "page_metadata": {"ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Get Values", "language": "en", "viewport": "width=device-width,initial-scale=1", "description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Get Values\n", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Get Values", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "og:url": "https://helm.sh/docs/helm/helm_get_values/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_get_values/", "og:title": ["Helm Get Values", "Helm Get Values"], "scrapeId": "78b04937-8a16-4b94-8199-f4e6c2058b46", "sourceURL": "https://helm.sh/docs/helm/helm_get_values", "url": "https://helm.sh/docs/helm/helm_get_values/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Get Values\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nhelm get values RELEASE_NAME [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_get_values", "title": "Helm Get Values", "description": "download the values file for a named release", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:41:53", "type": "code_examples", "page_metadata": {"ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Get Values", "language": "en", "viewport": "width=device-width,initial-scale=1", "description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Get Values\n", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Get Values", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "og:url": "https://helm.sh/docs/helm/helm_get_values/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_get_values/", "og:title": ["Helm Get Values", "Helm Get Values"], "scrapeId": "78b04937-8a16-4b94-8199-f4e6c2058b46", "sourceURL": "https://helm.sh/docs/helm/helm_get_values", "url": "https://helm.sh/docs/helm/helm_get_values/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm History\"?\n\nAssistant: fetch release history\n\nHere's a detailed explanation:\n\n\n## helm history\nHistory prints historical revisions for a given release.\n\nA default maximum of 256 revisions will be returned. Setting '--max' configures the maximum length of the revision list returned.\n\nThe historical release set is printed as a formatted table, e.g:\n\n```\n$ helm history angry-bird\nREVISION    UPDATED                     STATUS          CHART             APP VERSION     DESCRIPTION\n1           Mon Oct 3 10:15:13 2016     superseded      alpine-0.1.0      1.0             Initial install\n2           Mon Oct 3 10:15:13 2016     superseded      alpine-0.1.0      1.0             Upgraded successfully\n3           Mon Oct 3 10:15:13 2016     superseded      alpine-0.1.0      1.0             Rolled back to 2\n4           Mon Oct 3 10:15:13 2016     deployed        alpine-0.1.0      1.0             Upgraded successfully\n\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_history", "title": "Helm History", "description": "fetch release history", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:42:00", "type": "overview", "page_metadata": {"description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_history/", "og:title": ["Helm History", "Helm History"], "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm History\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/helm/helm_history/", "ogTitle": "Helm History", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Helm History", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "scrapeId": "ee28ed5c-0217-42cb-806d-8bf0c800506b", "sourceURL": "https://helm.sh/docs/helm/helm_history", "url": "https://helm.sh/docs/helm/helm_history/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm History\"?\n\nAssistant: Here are some code examples:\n\n### helm history command\n```yaml\nhelm history RELEASE_NAME [flags]\n```\n\n### Options\n```yaml\n  -h, --help            help for history\n      --max int         maximum number of revision to include in history (default 256)\n  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_history", "title": "Helm History", "description": "fetch release history", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:42:00", "type": "code_examples", "page_metadata": {"description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_history/", "og:title": ["Helm History", "Helm History"], "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm History\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/helm/helm_history/", "ogTitle": "Helm History", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Helm History", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "scrapeId": "ee28ed5c-0217-42cb-806d-8bf0c800506b", "sourceURL": "https://helm.sh/docs/helm/helm_history", "url": "https://helm.sh/docs/helm/helm_history/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm History\"?\n\nAssistant: Here are the recommended best practices:\n\n• A default maximum of 256 revisions will be returned. Setting '--max' configures the maximum length of the revision list returned.\n• Use the '--output' flag to specify the output format, with allowed values being table, json, and yaml.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_history", "title": "Helm History", "description": "fetch release history", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:42:00", "type": "best_practices", "page_metadata": {"description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_history/", "og:title": ["Helm History", "Helm History"], "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm History\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/helm/helm_history/", "ogTitle": "Helm History", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Helm History", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "scrapeId": "ee28ed5c-0217-42cb-806d-8bf0c800506b", "sourceURL": "https://helm.sh/docs/helm/helm_history", "url": "https://helm.sh/docs/helm/helm_history/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Install\"?\n\nAssistant: This documentation page covers the installation of a Helm chart using the helm install command, including options, examples, and best practices.\n\nHere's a detailed explanation:\n\n\n## helm install\ninstall a chart\n\n## Synopsis\nThis command installs a chart archive.\n\nThe install argument must be a chart reference, a path to a packaged chart,\na path to an unpacked chart directory or a URL.\n\nTo override values in a chart, use either the '--values' flag and pass in a file\nor use the '--set' flag and pass configuration from the command line, to force\na string value use '--set-string'. You can use '--set-file' to set individual\nvalues from a file when the value itself is too long for the command line\nor is dynamically generated. You can also use '--set-json' to set json values\n(scalars/objects/arrays) from the command line.\n\n## Code Examples\n$ helm install -f myvalues.yaml myredis ./redis\n\n$ helm install --set name=prod myredis ./redis\n\n$ helm install --set-string long_int=1234567890 myredis ./redis\n\n$ helm install --set-file my_script=dothings.sh myredis ./redis\n\n$ helm install --set-json 'master.sidecars=[{\"name\":\"sidecar\",\"image\":\"myImage\",\"imagePullPolicy\":\"Always\",\"ports\":[{\"name\":\"portname\",\"containerPort\":1234}]}]' myredis ./redis\n\nYou can specify the '--values'/'-f' flag multiple times. The priority will be given to the\nlast (right-most) file specified. For example, if both myvalues.yaml and override.yaml\ncontained a key called 'Test', the value set in override.yaml would take precedence:\n\n$ helm install -f myvalues.yaml -f override.yaml  myredis ./redis\n\nYou can specify the '--set' flag multiple times. The priority will be given to the\nlast (right-most) set specified. For example, if both 'bar' and 'newbar' values are\nset for a key called 'foo', the 'newbar' value would take precedence:\n\n$ helm install --set foo=bar --set foo=newbar  myredis ./redis\n\nSimilarly, in the following example 'foo' is set to '[\"four\"]':\n\n$ helm install --set-json='foo=[\"one\", \"two\", \"three\"]' --set-json='foo=[\"four\"]' myredis ./redis\n\nAnd in the following example, 'foo' is set to '{\"key1\":\"value1\",\"key2\":\"bar\"}':\n\n$ helm install --set-json='foo={\"key1\":\"value1\",\"key2\":\"value2\"}' --set-json='foo.key2=\"bar\"' myredis ./redis\n\nTo check the generated manifests of a release without installing the chart,\nthe --debug and --dry-run flags can be combined.\n\nThe --dry-run flag will output all generated chart manifests, including Secrets\nwhich can contain sensitive values. To hide Kubernetes Secrets use the\n--hide-secret flag. Please carefully consider how and when these flags are used.\n\nIf --verify is set, the chart MUST have a provenance file, and the provenance\nfile MUST pass all verification steps.\n\n## Chart References\nA chart reference is a convenient way of referencing a chart in a chart repository.\n\nWhen you use a chart reference with a repo prefix ('example/mariadb'), Helm will look in the local\nconfiguration for a chart repository named 'example', and will then look for a\nchart in that repository whose name is 'mariadb'. It will install the latest stable version of that chart\nuntil you specify '--devel' flag to also include development version (alpha, beta, and release candidate releases), or\nsupply a version number with the '--version' flag.\n\nTo see the list of chart repositories, use 'helm repo list'. To search for\ncharts in a repository, use 'helm search'.\n\n## Options\n--atomic                                     if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used\n--ca-file string                             verify certificates of HTTPS-enabled servers using this CA bundle\n--cert-file string                           identify HTTPS client using this SSL certificate file\n--create-namespace                           create the release namespace if not present\n--dependency-update                          update dependencies if they are missing before installing the chart\n--description string                         add a custom description\n--devel                                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n--disable-openapi-validation                 if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema\n--dry-run string[=\"client\"]                  simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.\n--enable-dns                                 enable DNS lookups when rendering templates\n--force                                      force resource updates through a replacement strategy\n-g, --generate-name                              generate the name (and omit the NAME parameter)\n-h, --help                                       help for install\n--hide-notes                                 if set, do not show notes in install output. Does not affect presence in chart metadata\n--hide-secret                                hide Kubernetes Secrets when also using the --dry-run flag\n--insecure-skip-tls-verify                   skip tls certificate checks for the chart download\n--key-file string                            identify HTTPS client using this SSL key file\n--keyring string                             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n-l, --labels stringToString                      Labels that would be added to release metadata. Should be divided by comma. (default [])\n--name-template string                       specify template used to name the release\n--no-hooks                                   prevent hooks from running during install\n-o, --output format                              prints the output in the specified format. Allowed values: table, json, yaml (default table)\n--pass-credentials                           pass credentials to all domains\n--password string                            chart repository password where to locate the requested chart\n--plain-http                                 use insecure HTTP connections for the chart download\n--post-renderer postRendererString           the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path\n--post-renderer-args postRendererArgsSlice   an argument to the post-renderer (can specify multiple) (default [])\n--render-subchart-notes                      if set, render subchart notes along with the parent\n--replace                                    re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production\n--repo string                                chart repository url where to locate the requested chart\n--set stringArray                            set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n--set-file stringArray                       set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n--set-json stringArray                       set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)\n--set-literal stringArray                    set a literal STRING value on the command line\n--set-string stringArray                     set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n--skip-crds                                  if set, no CRDs will be installed. By default, CRDs are installed if not already present\n--skip-schema-validation                     if set, disables JSON schema validation\n--take-ownership                             if set, install will ignore the check for helm annotations and take ownership of the existing resources\n--timeout duration                           time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n--username string                            chart repository username where to locate the requested chart\n-f, --values strings                             specify values in a YAML file or a URL (can specify multiple)\n--verify                                     verify the package before using it\n--version string                             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n--wait                                       if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout\n--wait-for-jobs                              if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_install", "title": "Helm Install", "description": "This documentation page covers the installation of a Helm chart using the helm install command, including options, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:52:30", "type": "overview", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "twitter:title": "Helm | Helm Install", "og:url": "https://helm.sh/docs/helm/helm_install/", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Install\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_install/", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Install", "og:title": ["Helm Install", "Helm Install"], "og:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "e997f94c-f730-4fb5-aefe-a1ecf667104d", "sourceURL": "https://helm.sh/docs/helm/helm_install", "url": "https://helm.sh/docs/helm/helm_install/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Install\"?\n\nAssistant: Here are some code examples:\n\n### Basic Helm Install Command\n```yaml\n$ helm install -f myvalues.yaml myredis ./redis\n```\n\n### Install with Set Values\n```yaml\n$ helm install --set name=prod myredis ./redis\n```\n\n### Install with String Set Value\n```yaml\n$ helm install --set-string long_int=1234567890 myredis ./redis\n```\n\n### Install with File Set Value\n```yaml\n$ helm install --set-file my_script=dothings.sh myredis ./redis\n```\n\n### Install with JSON Set Value\n```yaml\n$ helm install --set-json 'master.sidecars=[{\"name\":\"sidecar\",\"image\":\"myImage\",\"imagePullPolicy\":\"Always\",\"ports\":[{\"name\":\"portname\",\"containerPort\":1234}]}]' myredis ./redis\n```\n\n### Multiple Values with Priority\n```yaml\n$ helm install -f myvalues.yaml -f override.yaml  myredis ./redis\n```\n\n### Multiple Set Values with Priority\n```yaml\n$ helm install --set foo=bar --set foo=newbar  myredis ./redis\n```\n\n### JSON Set Value with Priority\n```yaml\n$ helm install --set-json='foo=[\"one\", \"two\", \"three\"]' --set-json='foo=[\"four\"]' myredis ./redis\n```\n\n### JSON Set Value with Nested Key\n```yaml\n$ helm install --set-json='foo={\"key1\":\"value1\",\"key2\":\"value2\"}' --set-json='foo.key2=\"bar\"' myredis ./redis\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_install", "title": "Helm Install", "description": "This documentation page covers the installation of a Helm chart using the helm install command, including options, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:52:30", "type": "code_examples", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "twitter:title": "Helm | Helm Install", "og:url": "https://helm.sh/docs/helm/helm_install/", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Install\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_install/", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Install", "og:title": ["Helm Install", "Helm Install"], "og:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "e997f94c-f730-4fb5-aefe-a1ecf667104d", "sourceURL": "https://helm.sh/docs/helm/helm_install", "url": "https://helm.sh/docs/helm/helm_install/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Install\"?\n\nAssistant: Here are the recommended best practices:\n\n• To check the generated manifests of a release without installing the chart, use the --debug and --dry-run flags together.\n• The --dry-run flag will output all generated chart manifests, including Secrets which can contain sensitive values. Use the --hide-secret flag to hide Kubernetes Secrets when using --dry-run.\n• If --verify is set, the chart MUST have a provenance file, and the provenance file MUST pass all verification steps.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_install", "title": "Helm Install", "description": "This documentation page covers the installation of a Helm chart using the helm install command, including options, examples, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:52:30", "type": "best_practices", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "twitter:title": "Helm | Helm Install", "og:url": "https://helm.sh/docs/helm/helm_install/", "viewport": "width=device-width,initial-scale=1", "title": "Helm | Helm Install\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_install/", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Install", "og:title": ["Helm Install", "Helm Install"], "og:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "e997f94c-f730-4fb5-aefe-a1ecf667104d", "sourceURL": "https://helm.sh/docs/helm/helm_install", "url": "https://helm.sh/docs/helm/helm_install/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Lint\"?\n\nAssistant: examine a chart for possible issues\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command takes a path to a chart and runs a series of tests to verify that the chart is well-formed.\n\nIf the linter encounters things that will cause the chart to fail installation, it will emit [ERROR] messages. If it encounters issues that break with convention or recommendation, it will emit [WARNING] messages.\n\n## Options\n  -h, --help                      help for lint\n      --kube-version string       Kubernetes version used for capabilities and deprecation checks\n      --quiet                     print only warnings and errors\n      --set stringArray           set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --set-file stringArray      set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --set-json stringArray      set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)\n      --set-literal stringArray   set a literal STRING value on the command line\n      --set-string stringArray    set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --skip-schema-validation    if set, disables JSON schema validation\n      --strict                    fail on lint warnings\n  -f, --values strings            specify values in a YAML file or a URL (can specify multiple)\n      --with-subcharts            lint dependent charts\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_lint", "title": "Helm Lint", "description": "examine a chart for possible issues", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:53:07", "type": "overview", "page_metadata": {"ogTitle": "Helm Lint", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Helm Lint", "og:url": "https://helm.sh/docs/helm/helm_lint/", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Lint", "Helm Lint"], "title": "Helm | Helm Lint\n", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_lint/", "language": "en", "scrapeId": "39d4ac69-d053-44c8-933a-e55e8ac31982", "sourceURL": "https://helm.sh/docs/helm/helm_lint", "url": "https://helm.sh/docs/helm/helm_lint/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Lint\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nhelm lint PATH [flags]\n```\n\n### Options Inherited from Parent Commands\n```yaml\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_lint", "title": "Helm Lint", "description": "examine a chart for possible issues", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:53:07", "type": "code_examples", "page_metadata": {"ogTitle": "Helm Lint", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Helm Lint", "og:url": "https://helm.sh/docs/helm/helm_lint/", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Lint", "Helm Lint"], "title": "Helm | Helm Lint\n", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_lint/", "language": "en", "scrapeId": "39d4ac69-d053-44c8-933a-e55e8ac31982", "sourceURL": "https://helm.sh/docs/helm/helm_lint", "url": "https://helm.sh/docs/helm/helm_lint/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Lint\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --strict option to fail on lint warnings for stricter validation.\n• Utilize the --quiet flag to suppress output and only show warnings and errors.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_lint", "title": "Helm Lint", "description": "examine a chart for possible issues", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:53:07", "type": "best_practices", "page_metadata": {"ogTitle": "Helm Lint", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Helm Lint", "og:url": "https://helm.sh/docs/helm/helm_lint/", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Lint", "Helm Lint"], "title": "Helm | Helm Lint\n", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_lint/", "language": "en", "scrapeId": "39d4ac69-d053-44c8-933a-e55e8ac31982", "sourceURL": "https://helm.sh/docs/helm/helm_lint", "url": "https://helm.sh/docs/helm/helm_lint/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm List\"?\n\nAssistant: This command lists all of the releases for a specified namespace (uses current namespace context if namespace not specified).\n\nHere's a detailed explanation:\n\n\n## helm list\nThis command lists all of the releases for a specified namespace (uses current namespace context if namespace not specified).\n\nBy default, it lists only releases that are deployed or failed. Flags like '--uninstalled' and '--all' will alter this behavior. Such flags can be combined: '--uninstalled --failed'.\n\nBy default, items are sorted alphabetically. Use the '-d' flag to sort by release date.\n\nIf the --filter flag is provided, it will be treated as a filter. Filters are regular expressions (Perl compatible) that are applied to the list of releases. Only items that match the filter will be returned.\n\nIf no results are found, 'helm list' will exit 0, but with no output (or in the case of no '-q' flag, only headers).\n\nBy default, up to 256 items may be returned. To limit this, use the '--max' flag. Setting '--max' to 0 will not return all results. Rather, it will return the server's default, which may be much higher than 256. Pairing the '--max' flag with the '--offset' flag allows you to page through results.\n\n## Options\n-a, --all                  show all releases without any filter applied\n-A, --all-namespaces       list releases across all namespaces\n-d, --date                 sort by release date\n    --deployed             show deployed releases. If no other is specified, this will be automatically enabled\n    --failed               show failed releases\n-f, --filter string        a regular expression (Perl compatible). Any releases that match the expression will be included in the results\n-h, --help                 help for list\n-m, --max int              maximum number of releases to fetch (default 256)\n    --no-headers           don't print headers when using the default output format\n    --offset int           next release index in the list, used to offset from start value\n-o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)\n    --pending              show pending releases\n-r, --reverse              reverse the sort order\n-l, --selector string      Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Works only for secret(default) and configmap storage backends.\n-q, --short                output short (quiet) listing format\n    --superseded           show superseded releases\n    --time-format string   format time using golang time formatter. Example: --time-format \"2006-01-02 15:04:05Z0700\"\n    --uninstalled          show uninstalled releases (if 'helm uninstall --keep-history' was used)\n    --uninstalling         show releases that are currently being uninstalled.\n\n## Options inherited from parent commands\n    --burst-limit int                 client-side default throttling limit (default 100)\n    --debug                           enable verbose output\n    --kube-apiserver string           the address and the port for the Kubernetes API server\n    --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n    --kube-as-user string             username to impersonate for the operation\n    --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n    --kube-context string             name of the kubeconfig context to use\n    --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n    --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n    --kube-token string               bearer token used for authentication\n    --kubeconfig string               path to the kubeconfig file\n-n, --namespace string                namespace scope for this request\n    --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n    --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n    --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n    --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_list", "title": "Helm List", "description": "This command lists all of the releases for a specified namespace (uses current namespace context if namespace not specified).", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:53:18", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_list/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Helm List", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm List", "Helm List"], "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm List\n", "og:url": "https://helm.sh/docs/helm/helm_list/", "ogTitle": "Helm List", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "scrapeId": "50334a88-62cf-4968-a892-2ea18fb43ebe", "sourceURL": "https://helm.sh/docs/helm/helm_list", "url": "https://helm.sh/docs/helm/helm_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm List\"?\n\nAssistant: Here are some code examples:\n\n### Example of helm list with filter\n```yaml\n$ helm list --filter 'ara[a-z]+'\nNAME                UPDATED                                  CHART\nmaudlin-arachnid    2020-06-18 14:17:46.125134977 +0000 UTC  alpine-0.1.0\n```\n\n### Fallback command\n```yaml\nhelm list [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_list", "title": "Helm List", "description": "This command lists all of the releases for a specified namespace (uses current namespace context if namespace not specified).", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:53:18", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_list/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Helm List", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm List", "Helm List"], "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm List\n", "og:url": "https://helm.sh/docs/helm/helm_list/", "ogTitle": "Helm List", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "scrapeId": "50334a88-62cf-4968-a892-2ea18fb43ebe", "sourceURL": "https://helm.sh/docs/helm/helm_list", "url": "https://helm.sh/docs/helm/helm_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm List\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the '--filter' flag to narrow down the list of releases based on regular expressions.\n• Combine flags like '--uninstalled' and '--failed' to customize the output.\n• Use the '-d' flag to sort the releases by date instead of alphabetically.\n• Limit the number of returned items with the '--max' flag to avoid overwhelming output.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_list", "title": "Helm List", "description": "This command lists all of the releases for a specified namespace (uses current namespace context if namespace not specified).", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:53:18", "type": "best_practices", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_list/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Helm List", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm List", "Helm List"], "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm List\n", "og:url": "https://helm.sh/docs/helm/helm_list/", "ogTitle": "Helm List", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "scrapeId": "50334a88-62cf-4968-a892-2ea18fb43ebe", "sourceURL": "https://helm.sh/docs/helm/helm_list", "url": "https://helm.sh/docs/helm/helm_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Package\"?\n\nAssistant: package a chart directory into a chart archive\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command packages a chart into a versioned chart archive file. If a path is given, this will look at that path for a chart (which must contain a Chart.yaml file) and then package that directory.\n\nVersioned chart archives are used by Helm package repositories.\n\nTo sign a chart, use the '--sign' flag. In most cases, you should also provide '--keyring path/to/secret/keys' and '--key keyname'.\n\n$ helm package --sign ./mychart --key mykey --keyring ~/.gnupg/secring.gpg\n\nIf '--keyring' is not specified, Helm usually defaults to the public keyring unless your environment is otherwise configured.\n\n```go\nhelm package [CHART_PATH] [...] [flags]\n```\n\n## Options\n```gdscript3\n      --app-version string         set the appVersion on the chart to this version\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n  -u, --dependency-update          update dependencies from \"Chart.yaml\" to dir \"charts/\" before packaging\n  -d, --destination string         location to write the chart. (default \".\")\n  -h, --help                       help for package\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key string                 name of the key to use when signing. Used if --sign is true\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of a public keyring (default \"~/.gnupg/pubring.gpg\")\n      --passphrase-file string     location of a file which contains the passphrase for the signing key. Use \"-\" in order to read from stdin.\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --sign                       use a PGP private key to sign this package\n      --username string            chart repository username where to locate the requested chart\n      --version string             set the version on the chart to this semver version\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_package", "title": "Helm Package", "description": "package a chart directory into a chart archive", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:53:38", "type": "overview", "page_metadata": {"twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "title": "Helm | Helm Package\n", "description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Package", "twitter:title": "Helm | Helm Package", "og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_package/", "og:url": "https://helm.sh/docs/helm/helm_package/", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Package", "Helm Package"], "viewport": "width=device-width,initial-scale=1", "scrapeId": "e811316a-000a-4ff2-9f07-d1e67f7ec633", "sourceURL": "https://helm.sh/docs/helm/helm_package", "url": "https://helm.sh/docs/helm/helm_package/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Package\"?\n\nAssistant: Here are some code examples:\n\n### Helm Package Command Example\n```yaml\n$ helm package --sign ./mychart --key mykey --keyring ~/.gnupg/secring.gpg\n```\n\n### Helm Package Syntax\n```yaml\n```go\nhelm package [CHART_PATH] [...] [flags]\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_package", "title": "Helm Package", "description": "package a chart directory into a chart archive", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:53:38", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "title": "Helm | Helm Package\n", "description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Package", "twitter:title": "Helm | Helm Package", "og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_package/", "og:url": "https://helm.sh/docs/helm/helm_package/", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Package", "Helm Package"], "viewport": "width=device-width,initial-scale=1", "scrapeId": "e811316a-000a-4ff2-9f07-d1e67f7ec633", "sourceURL": "https://helm.sh/docs/helm/helm_package", "url": "https://helm.sh/docs/helm/helm_package/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Package\"?\n\nAssistant: Here are the recommended best practices:\n\n• To sign a chart, use the '--sign' flag along with '--keyring path/to/secret/keys' and '--key keyname'.\n• If '--keyring' is not specified, Helm usually defaults to the public keyring unless your environment is otherwise configured.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_package", "title": "Helm Package", "description": "package a chart directory into a chart archive", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:53:38", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "language": "en", "twitter:image": "https://helm.sh/img/og-image.png", "title": "Helm | Helm Package\n", "description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Package", "twitter:title": "Helm | Helm Package", "og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_package/", "og:url": "https://helm.sh/docs/helm/helm_package/", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Package", "Helm Package"], "viewport": "width=device-width,initial-scale=1", "scrapeId": "e811316a-000a-4ff2-9f07-d1e67f7ec633", "sourceURL": "https://helm.sh/docs/helm/helm_package", "url": "https://helm.sh/docs/helm/helm_package/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Plugin\"?\n\nAssistant: install, list, or uninstall Helm plugins\n\nHere's a detailed explanation:\n\n\n## Synopsis\nManage client-side Helm plugins.\n\n## Options\n```fallback\n  -h, --help   help for plugin\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin", "title": "Helm Plugin", "description": "install, list, or uninstall Helm plugins", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-27 21:53:49", "type": "overview", "page_metadata": {"twitter:title": "Helm | Helm Plugin", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Plugin\n", "ogTitle": "Helm Plugin", "ogUrl": "https://helm.sh/docs/helm/helm_plugin/", "description": "Helm - The Kubernetes Package Manager.", "language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Helm Plugin", "Helm Plugin"], "og:url": "https://helm.sh/docs/helm/helm_plugin/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "59ed3528-13c3-40b1-b637-5bf1d8877fbf", "sourceURL": "https://helm.sh/docs/helm/helm_plugin", "url": "https://helm.sh/docs/helm/helm_plugin/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Plugin\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```fallback\n  -h, --help   help for plugin\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin", "title": "Helm Plugin", "description": "install, list, or uninstall Helm plugins", "has_code_examples": true, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-27 21:53:49", "type": "code_examples", "page_metadata": {"twitter:title": "Helm | Helm Plugin", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Plugin\n", "ogTitle": "Helm Plugin", "ogUrl": "https://helm.sh/docs/helm/helm_plugin/", "description": "Helm - The Kubernetes Package Manager.", "language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "og:title": ["Helm Plugin", "Helm Plugin"], "og:url": "https://helm.sh/docs/helm/helm_plugin/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "59ed3528-13c3-40b1-b637-5bf1d8877fbf", "sourceURL": "https://helm.sh/docs/helm/helm_plugin", "url": "https://helm.sh/docs/helm/helm_plugin/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Plugin Install\"?\n\nAssistant: install a Helm plugin\n\nHere's a detailed explanation:\n\n\n## helm plugin install\nThis command allows you to install a plugin from a url to a VCS repo or a local path.\n\n## Synopsis\n```fallback\nhelm plugin install [options] <path|url> [flags]\n```\n\n## Options\n```gdscript3\n  -h, --help             help for install\n      --version string   specify a version constraint. If this is not specified, the latest version is installed\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm plugin](https://helm.sh/docs/helm/helm_plugin/) \\- install, list, or uninstall Helm plugins\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_install", "title": "Helm Plugin Install", "description": "install a Helm plugin", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-27 21:54:11", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_plugin_install/", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Plugin Install\n", "ogTitle": "Helm Plugin Install", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Plugin Install", "Helm Plugin Install"], "twitter:title": "Helm | Helm Plugin Install", "twitter:card": "summary", "og:description": "Helm - The Kubernetes Package Manager.", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_plugin_install/", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "5761059c-c63a-47b4-a3e7-df42accbfaae", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_install", "url": "https://helm.sh/docs/helm/helm_plugin_install/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Plugin Install\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nhelm plugin install [options] <path|url> [flags]\n```\n\n### Options Example\n```yaml\n  -h, --help             help for install\n      --version string   specify a version constraint. If this is not specified, the latest version is installed\n```\n\n### Inherited Options Example\n```yaml\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_install", "title": "Helm Plugin Install", "description": "install a Helm plugin", "has_code_examples": true, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-27 21:54:11", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_plugin_install/", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Plugin Install\n", "ogTitle": "Helm Plugin Install", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Plugin Install", "Helm Plugin Install"], "twitter:title": "Helm | Helm Plugin Install", "twitter:card": "summary", "og:description": "Helm - The Kubernetes Package Manager.", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_plugin_install/", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "5761059c-c63a-47b4-a3e7-df42accbfaae", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_install", "url": "https://helm.sh/docs/helm/helm_plugin_install/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Plugin List\"?\n\nAssistant: list installed Helm plugins\n\nHere's a detailed explanation:\n\n\n## helm plugin list\nlist installed Helm plugins\n\n```fallback\nhelm plugin list [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_list", "title": "Helm Plugin List", "description": "list installed Helm plugins", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:54:15", "type": "overview", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Plugin List", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "og:url": "https://helm.sh/docs/helm/helm_plugin_list/", "og:title": ["Helm Plugin List", "Helm Plugin List"], "twitter:title": "Helm | Helm Plugin List", "title": "Helm | Helm Plugin List\n", "language": "en", "viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_plugin_list/", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "61855af0-57b4-49f2-a88b-1795fb5e6a47", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_list", "url": "https://helm.sh/docs/helm/helm_plugin_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Plugin List\"?\n\nAssistant: Here are some code examples:\n\n### helm plugin list command\n```yaml\nhelm plugin list [flags]\n```\n\n### Options for helm plugin list\n```yaml\n  -h, --help   help for list\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_list", "title": "Helm Plugin List", "description": "list installed Helm plugins", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:54:15", "type": "code_examples", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Plugin List", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "og:url": "https://helm.sh/docs/helm/helm_plugin_list/", "og:title": ["Helm Plugin List", "Helm Plugin List"], "twitter:title": "Helm | Helm Plugin List", "title": "Helm | Helm Plugin List\n", "language": "en", "viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_plugin_list/", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "61855af0-57b4-49f2-a88b-1795fb5e6a47", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_list", "url": "https://helm.sh/docs/helm/helm_plugin_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Plugin List\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the command and its options.\n• Be cautious with the --kube-insecure-skip-tls-verify option as it makes HTTPS connections insecure.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_list", "title": "Helm Plugin List", "description": "list installed Helm plugins", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:54:15", "type": "best_practices", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Plugin List", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "og:url": "https://helm.sh/docs/helm/helm_plugin_list/", "og:title": ["Helm Plugin List", "Helm Plugin List"], "twitter:title": "Helm | Helm Plugin List", "title": "Helm | Helm Plugin List\n", "language": "en", "viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_plugin_list/", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "61855af0-57b4-49f2-a88b-1795fb5e6a47", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_list", "url": "https://helm.sh/docs/helm/helm_plugin_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Plugin Uninstall\"?\n\nAssistant: uninstall one or more Helm plugins\n\nHere's a detailed explanation:\n\n\n## helm plugin uninstall\nuninstall one or more Helm plugins\n\n## Options\n```fallback\n  -h, --help   help for uninstall\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_uninstall", "title": "Helm Plugin Uninstall", "description": "uninstall one or more Helm plugins", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:54:23", "type": "overview", "page_metadata": {"twitter:card": "summary", "ogTitle": "Helm Plugin Uninstall", "description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_plugin_uninstall/", "og:title": ["Helm Plugin Uninstall", "Helm Plugin Uninstall"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Helm Plugin Uninstall", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_plugin_uninstall/", "title": "Helm | Helm Plugin Uninstall\n", "scrapeId": "58c7fd35-9597-4359-8478-1464329472bc", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_uninstall", "url": "https://helm.sh/docs/helm/helm_plugin_uninstall/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Plugin Uninstall\"?\n\nAssistant: Here are some code examples:\n\n### helm plugin uninstall\n```yaml\nhelm plugin uninstall <plugin>... [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_uninstall", "title": "Helm Plugin Uninstall", "description": "uninstall one or more Helm plugins", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:54:23", "type": "code_examples", "page_metadata": {"twitter:card": "summary", "ogTitle": "Helm Plugin Uninstall", "description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_plugin_uninstall/", "og:title": ["Helm Plugin Uninstall", "Helm Plugin Uninstall"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Helm Plugin Uninstall", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_plugin_uninstall/", "title": "Helm | Helm Plugin Uninstall\n", "scrapeId": "58c7fd35-9597-4359-8478-1464329472bc", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_uninstall", "url": "https://helm.sh/docs/helm/helm_plugin_uninstall/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Plugin Uninstall\"?\n\nAssistant: Here are the recommended best practices:\n\n• Refer to the official Helm documentation for more details on plugin management.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_uninstall", "title": "Helm Plugin Uninstall", "description": "uninstall one or more Helm plugins", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:54:23", "type": "best_practices", "page_metadata": {"twitter:card": "summary", "ogTitle": "Helm Plugin Uninstall", "description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_plugin_uninstall/", "og:title": ["Helm Plugin Uninstall", "Helm Plugin Uninstall"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:title": "Helm | Helm Plugin Uninstall", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_plugin_uninstall/", "title": "Helm | Helm Plugin Uninstall\n", "scrapeId": "58c7fd35-9597-4359-8478-1464329472bc", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_uninstall", "url": "https://helm.sh/docs/helm/helm_plugin_uninstall/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Plugin Update\"?\n\nAssistant: update one or more Helm plugins\n\nHere's a detailed explanation:\n\n\n## helm plugin update\nupdate one or more Helm plugins\n\n## Options\n```fallback\n  -h, --help   help for update\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_update", "title": "Helm Plugin Update", "description": "update one or more Helm plugins", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:54:41", "type": "overview", "page_metadata": {"ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_plugin_update/", "language": "en", "ogTitle": "Helm Plugin Update", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Plugin Update", "og:title": ["Helm Plugin Update", "Helm Plugin Update"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "title": "Helm | Helm Plugin Update\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_plugin_update/", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "4f9c00a9-832e-49e4-9f8f-cc82b69b9bd4", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_update", "url": "https://helm.sh/docs/helm/helm_plugin_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Plugin Update\"?\n\nAssistant: Here are some code examples:\n\n### helm plugin update\n```yaml\nhelm plugin update <plugin>... [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_update", "title": "Helm Plugin Update", "description": "update one or more Helm plugins", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:54:41", "type": "code_examples", "page_metadata": {"ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_plugin_update/", "language": "en", "ogTitle": "Helm Plugin Update", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Plugin Update", "og:title": ["Helm Plugin Update", "Helm Plugin Update"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "title": "Helm | Helm Plugin Update\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_plugin_update/", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "4f9c00a9-832e-49e4-9f8f-cc82b69b9bd4", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_update", "url": "https://helm.sh/docs/helm/helm_plugin_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Plugin Update\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the update command and its options.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_plugin_update", "title": "Helm Plugin Update", "description": "update one or more Helm plugins", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:54:41", "type": "best_practices", "page_metadata": {"ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_plugin_update/", "language": "en", "ogTitle": "Helm Plugin Update", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Plugin Update", "og:title": ["Helm Plugin Update", "Helm Plugin Update"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "title": "Helm | Helm Plugin Update\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_plugin_update/", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "4f9c00a9-832e-49e4-9f8f-cc82b69b9bd4", "sourceURL": "https://helm.sh/docs/helm/helm_plugin_update", "url": "https://helm.sh/docs/helm/helm_plugin_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Pull\"?\n\nAssistant: download a chart from a repository and (optionally) unpack it in local directory\n\nHere's a detailed explanation:\n\n\n## Synopsis\nRetrieve a package from a package repository, and download it locally.\n\nThis is useful for fetching packages to inspect, modify, or repackage. It can\nalso be used to perform cryptographic verification of a chart without installing\nthe chart.\n\nThere are options for unpacking the chart after download. This will create a\ndirectory for the chart and uncompress into that directory.\n\nIf the --verify flag is specified, the requested chart MUST have a provenance\nfile, and MUST pass the verification process. Failure in any part of this will\nresult in an error, and the chart will not be saved locally.\n\n## Options\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n  -d, --destination string         location to write the chart. If this and untardir are specified, untardir is appended to this (default \".\")\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored.\n  -h, --help                       help for pull\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --prov                       fetch the provenance file, but don't perform verification\n      --repo string                chart repository url where to locate the requested chart\n      --untar                      if set to true, will untar the chart after downloading it\n      --untardir string            if untar is specified, this flag specifies the name of the directory into which the chart is expanded (default \".\")\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_pull", "title": "Helm Pull", "description": "download a chart from a repository and (optionally) unpack it in local directory", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:55:10", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Pull", "og:title": ["Helm Pull", "Helm Pull"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Helm Pull\n", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/helm/helm_pull/", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_pull/", "twitter:title": "Helm | Helm Pull", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "12c51c0b-0d9e-4252-b7cd-f6c08b1b1274", "sourceURL": "https://helm.sh/docs/helm/helm_pull", "url": "https://helm.sh/docs/helm/helm_pull/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Pull\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nhelm pull [chart URL | repo/chartname] [...] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_pull", "title": "Helm Pull", "description": "download a chart from a repository and (optionally) unpack it in local directory", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:55:10", "type": "code_examples", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Pull", "og:title": ["Helm Pull", "Helm Pull"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Helm Pull\n", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/helm/helm_pull/", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_pull/", "twitter:title": "Helm | Helm Pull", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "12c51c0b-0d9e-4252-b7cd-f6c08b1b1274", "sourceURL": "https://helm.sh/docs/helm/helm_pull", "url": "https://helm.sh/docs/helm/helm_pull/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Pull\"?\n\nAssistant: Here are the recommended best practices:\n\n• If the --verify flag is specified, the requested chart MUST have a provenance file, and MUST pass the verification process. Failure in any part of this will result in an error, and the chart will not be saved locally.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_pull", "title": "Helm Pull", "description": "download a chart from a repository and (optionally) unpack it in local directory", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:55:10", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Pull", "og:title": ["Helm Pull", "Helm Pull"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Helm Pull\n", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/helm/helm_pull/", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_pull/", "twitter:title": "Helm | Helm Pull", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "12c51c0b-0d9e-4252-b7cd-f6c08b1b1274", "sourceURL": "https://helm.sh/docs/helm/helm_pull", "url": "https://helm.sh/docs/helm/helm_pull/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Push\"?\n\nAssistant: Upload a chart to a registry. If the chart has an associated provenance file, it will also be uploaded.\n\nHere's a detailed explanation:\n\n\n## helm push\npush a chart to remote\n\n## Synopsis\nUpload a chart to a registry.\n\nIf the chart has an associated provenance file,\nit will also be uploaded.\n\n```fallback\nhelm push [chart] [remote] [flags]\n\n```\n\n## Options\n```gdscript3\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify registry client using this SSL certificate file\n  -h, --help                       help for push\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart upload\n      --key-file string            identify registry client using this SSL key file\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart upload\n      --username string            chart repository username where to locate the requested chart\n\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_push", "title": "Helm Push", "description": "Upload a chart to a registry. If the chart has an associated provenance file, it will also be uploaded.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:55:21", "type": "overview", "page_metadata": {"title": "Helm | Helm Push\n", "og:title": ["Helm Push", "Helm Push"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Push", "language": "en", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Push", "ogUrl": "https://helm.sh/docs/helm/helm_push/", "og:url": "https://helm.sh/docs/helm/helm_push/", "twitter:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "012957e1-4834-4737-b970-a849b2b4064e", "sourceURL": "https://helm.sh/docs/helm/helm_push", "url": "https://helm.sh/docs/helm/helm_push/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Push\"?\n\nAssistant: Here are some code examples:\n\n### Command to push a chart\n```yaml\nhelm push [chart] [remote] [flags]\n```\n\n### Options for helm push\n```yaml\n--ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n--cert-file string           identify registry client using this SSL certificate file\n-h, --help                       help for push\n--insecure-skip-tls-verify   skip tls certificate checks for the chart upload\n--key-file string            identify registry client using this SSL key file\n--password string            chart repository password where to locate the requested chart\n--plain-http                 use insecure HTTP connections for the chart upload\n--username string            chart repository username where to locate the requested chart\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_push", "title": "Helm Push", "description": "Upload a chart to a registry. If the chart has an associated provenance file, it will also be uploaded.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:55:21", "type": "code_examples", "page_metadata": {"title": "Helm | Helm Push\n", "og:title": ["Helm Push", "Helm Push"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Push", "language": "en", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Push", "ogUrl": "https://helm.sh/docs/helm/helm_push/", "og:url": "https://helm.sh/docs/helm/helm_push/", "twitter:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "012957e1-4834-4737-b970-a849b2b4064e", "sourceURL": "https://helm.sh/docs/helm/helm_push", "url": "https://helm.sh/docs/helm/helm_push/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Push\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use secure connections whenever possible to avoid exposing sensitive information.\n• Always verify certificates when connecting to HTTPS-enabled servers.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_push", "title": "Helm Push", "description": "Upload a chart to a registry. If the chart has an associated provenance file, it will also be uploaded.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:55:21", "type": "best_practices", "page_metadata": {"title": "Helm | Helm Push\n", "og:title": ["Helm Push", "Helm Push"], "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Push", "language": "en", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Push", "ogUrl": "https://helm.sh/docs/helm/helm_push/", "og:url": "https://helm.sh/docs/helm/helm_push/", "twitter:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "012957e1-4834-4737-b970-a849b2b4064e", "sourceURL": "https://helm.sh/docs/helm/helm_push", "url": "https://helm.sh/docs/helm/helm_push/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Registry\"?\n\nAssistant: login to or logout from a registry\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command consists of multiple subcommands to interact with registries.\n\n## Options\n```fallback\n  -h, --help   help for registry\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_registry", "title": "Helm Registry", "description": "login to or logout from a registry", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-02-27 21:55:28", "type": "overview", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "language": "en", "ogTitle": "Helm Registry", "og:title": ["Helm Registry", "Helm Registry"], "og:url": "https://helm.sh/docs/helm/helm_registry/", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Helm Registry\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:title": "Helm | Helm Registry", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_registry/", "scrapeId": "48a197d6-d36a-4044-8531-95620da9b812", "sourceURL": "https://helm.sh/docs/helm/helm_registry", "url": "https://helm.sh/docs/helm/helm_registry/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Registry Login\"?\n\nAssistant: login to a registry\n\nHere's a detailed explanation:\n\n\n## Synopsis\nAuthenticate to a remote registry.\n\n## Options\n```fallback\n      --ca-file string     verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string   identify registry client using this SSL certificate file\n  -h, --help               help for login\n      --insecure           allow connections to TLS registry without certs\n      --key-file string    identify registry client using this SSL key file\n  -p, --password string    registry password or identity token\n      --password-stdin     read password or identity token from stdin\n  -u, --username string    registry username\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_registry_login", "title": "Helm Registry Login", "description": "login to a registry", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:55:41", "type": "overview", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Registry Login", "og:title": ["Helm Registry Login", "Helm Registry Login"], "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Helm | Helm Registry Login\n", "ogUrl": "https://helm.sh/docs/helm/helm_registry_login/", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Registry Login", "og:url": "https://helm.sh/docs/helm/helm_registry_login/", "scrapeId": "456341ed-6372-4206-88a7-441eba6e8bf5", "sourceURL": "https://helm.sh/docs/helm/helm_registry_login", "url": "https://helm.sh/docs/helm/helm_registry_login/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Registry Login\"?\n\nAssistant: Here are some code examples:\n\n### Command to login to a registry\n```yaml\nhelm registry login [host] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_registry_login", "title": "Helm Registry Login", "description": "login to a registry", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:55:41", "type": "code_examples", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Registry Login", "og:title": ["Helm Registry Login", "Helm Registry Login"], "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Helm | Helm Registry Login\n", "ogUrl": "https://helm.sh/docs/helm/helm_registry_login/", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Registry Login", "og:url": "https://helm.sh/docs/helm/helm_registry_login/", "scrapeId": "456341ed-6372-4206-88a7-441eba6e8bf5", "sourceURL": "https://helm.sh/docs/helm/helm_registry_login", "url": "https://helm.sh/docs/helm/helm_registry_login/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Registry Login\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --insecure flag with caution as it allows connections without certificate validation.\n• Always verify the CA file when connecting to a secure registry.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_registry_login", "title": "Helm Registry Login", "description": "login to a registry", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:55:41", "type": "best_practices", "page_metadata": {"favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Registry Login", "og:title": ["Helm Registry Login", "Helm Registry Login"], "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "language": "en", "title": "Helm | Helm Registry Login\n", "ogUrl": "https://helm.sh/docs/helm/helm_registry_login/", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Registry Login", "og:url": "https://helm.sh/docs/helm/helm_registry_login/", "scrapeId": "456341ed-6372-4206-88a7-441eba6e8bf5", "sourceURL": "https://helm.sh/docs/helm/helm_registry_login", "url": "https://helm.sh/docs/helm/helm_registry_login/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Registry Logout\"?\n\nAssistant: logout from a registry\n\nHere's a detailed explanation:\n\n\n## Synopsis\nRemove credentials stored for a remote registry.\n\n## Options\n```fallback\n  -h, --help   help for logout\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_registry_logout", "title": "Helm Registry Logout", "description": "logout from a registry", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:55:48", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/helm/helm_registry_logout/", "og:url": "https://helm.sh/docs/helm/helm_registry_logout/", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Registry Logout", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Registry Logout", "Helm Registry Logout"], "title": "Helm | Helm Registry Logout\n", "twitter:card": "summary", "ogTitle": "Helm Registry Logout", "twitter:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "f2ddc687-7d50-4254-8afc-495beddc82e2", "sourceURL": "https://helm.sh/docs/helm/helm_registry_logout", "url": "https://helm.sh/docs/helm/helm_registry_logout/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Registry Logout\"?\n\nAssistant: Here are some code examples:\n\n### Command to logout from a registry\n```yaml\nhelm registry logout [host] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_registry_logout", "title": "Helm Registry Logout", "description": "logout from a registry", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:55:48", "type": "code_examples", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/helm/helm_registry_logout/", "og:url": "https://helm.sh/docs/helm/helm_registry_logout/", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Registry Logout", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Registry Logout", "Helm Registry Logout"], "title": "Helm | Helm Registry Logout\n", "twitter:card": "summary", "ogTitle": "Helm Registry Logout", "twitter:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "f2ddc687-7d50-4254-8afc-495beddc82e2", "sourceURL": "https://helm.sh/docs/helm/helm_registry_logout", "url": "https://helm.sh/docs/helm/helm_registry_logout/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Registry Logout\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to specify the correct host when logging out from a registry.\n• Use the --help option to get more information about the logout command.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_registry_logout", "title": "Helm Registry Logout", "description": "logout from a registry", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:55:48", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width,initial-scale=1", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/helm/helm_registry_logout/", "og:url": "https://helm.sh/docs/helm/helm_registry_logout/", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Registry Logout", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Registry Logout", "Helm Registry Logout"], "title": "Helm | Helm Registry Logout\n", "twitter:card": "summary", "ogTitle": "Helm Registry Logout", "twitter:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "f2ddc687-7d50-4254-8afc-495beddc82e2", "sourceURL": "https://helm.sh/docs/helm/helm_registry_logout", "url": "https://helm.sh/docs/helm/helm_registry_logout/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Repo\"?\n\nAssistant: add, list, remove, update, and index chart repositories\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command consists of multiple subcommands to interact with chart repositories.\n\nIt can be used to add, remove, list, and index chart repositories.\n\n## Options\n```fallback\n  -h, --help   help for repo\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n- [helm repo add](https://helm.sh/docs/helm/helm_repo_add/) \\- add a chart repository\n- [helm repo index](https://helm.sh/docs/helm/helm_repo_index/) \\- generate an index file given a directory containing packaged charts\n- [helm repo list](https://helm.sh/docs/helm/helm_repo_list/) \\- list chart repositories\n- [helm repo remove](https://helm.sh/docs/helm/helm_repo_remove/) \\- remove one or more chart repositories\n- [helm repo update](https://helm.sh/docs/helm/helm_repo_update/) \\- update information of available charts locally from chart repositories\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo", "title": "Helm Repo", "description": "add, list, remove, update, and index chart repositories", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:56:07", "type": "overview", "page_metadata": {"og:title": ["Helm Repo", "Helm Repo"], "twitter:title": "Helm | Helm Repo", "title": "Helm | Helm Repo\n", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Repo", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_repo/", "og:url": "https://helm.sh/docs/helm/helm_repo/", "scrapeId": "864adf04-941d-4d30-8830-20b7d3339f6d", "sourceURL": "https://helm.sh/docs/helm/helm_repo", "url": "https://helm.sh/docs/helm/helm_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Repo\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```fallback\n  -h, --help   help for repo\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo", "title": "Helm Repo", "description": "add, list, remove, update, and index chart repositories", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:56:07", "type": "code_examples", "page_metadata": {"og:title": ["Helm Repo", "Helm Repo"], "twitter:title": "Helm | Helm Repo", "title": "Helm | Helm Repo\n", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Repo", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_repo/", "og:url": "https://helm.sh/docs/helm/helm_repo/", "scrapeId": "864adf04-941d-4d30-8830-20b7d3339f6d", "sourceURL": "https://helm.sh/docs/helm/helm_repo", "url": "https://helm.sh/docs/helm/helm_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Repo Add\"?\n\nAssistant: add a chart repository\n\nHere's a detailed explanation:\n\n\n## helm repo add\nadd a chart repository\n\n```fallback\nhelm repo add [NAME] [URL] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_add", "title": "Helm Repo Add", "description": "add a chart repository", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:56:15", "type": "overview", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_repo_add/", "og:title": ["Helm Repo Add", "Helm Repo Add"], "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Helm Repo Add", "title": "Helm | Helm Repo Add\n", "ogTitle": "Helm Repo Add", "og:url": "https://helm.sh/docs/helm/helm_repo_add/", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "5dfb3be6-cf37-4b3e-b714-b85fae51b479", "sourceURL": "https://helm.sh/docs/helm/helm_repo_add", "url": "https://helm.sh/docs/helm/helm_repo_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Repo Add\"?\n\nAssistant: Here are some code examples:\n\n### Command to add a chart repository\n```yaml\nhelm repo add [NAME] [URL] [flags]\n```\n\n### Options for helm repo add\n```yaml\n--allow-deprecated-repos     by default, this command will not allow adding official repos that have been permanently deleted. This disables that behavior\n--ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n--cert-file string           identify HTTPS client using this SSL certificate file\n--force-update               replace (overwrite) the repo if it already exists\n-h, --help                       help for add\n--insecure-skip-tls-verify   skip tls certificate checks for the repository\n--key-file string            identify HTTPS client using this SSL key file\n--no-update                  Ignored. Formerly, it would disabled forced updates. It is deprecated by force-update.\n--pass-credentials           pass credentials to all domains\n--password string            chart repository password\n--password-stdin             read chart repository password from stdin\n--username string            chart repository username\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_add", "title": "Helm Repo Add", "description": "add a chart repository", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:56:15", "type": "code_examples", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_repo_add/", "og:title": ["Helm Repo Add", "Helm Repo Add"], "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Helm Repo Add", "title": "Helm | Helm Repo Add\n", "ogTitle": "Helm Repo Add", "og:url": "https://helm.sh/docs/helm/helm_repo_add/", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "5dfb3be6-cf37-4b3e-b714-b85fae51b479", "sourceURL": "https://helm.sh/docs/helm/helm_repo_add", "url": "https://helm.sh/docs/helm/helm_repo_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Repo Add\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use --force-update to overwrite an existing repository if needed.\n• Consider using --allow-deprecated-repos if you need to add a deprecated repository.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_add", "title": "Helm Repo Add", "description": "add a chart repository", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:56:15", "type": "best_practices", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_repo_add/", "og:title": ["Helm Repo Add", "Helm Repo Add"], "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:title": "Helm | Helm Repo Add", "title": "Helm | Helm Repo Add\n", "ogTitle": "Helm Repo Add", "og:url": "https://helm.sh/docs/helm/helm_repo_add/", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "5dfb3be6-cf37-4b3e-b714-b85fae51b479", "sourceURL": "https://helm.sh/docs/helm/helm_repo_add", "url": "https://helm.sh/docs/helm/helm_repo_add/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Repo Index\"?\n\nAssistant: generate an index file given a directory containing packaged charts\n\nHere's a detailed explanation:\n\n\n## helm repo index\nRead the current directory, generate an index file based on the charts found and write the result to 'index.yaml' in the current directory.\n\nThis tool is used for creating an 'index.yaml' file for a chart repository. To set an absolute URL to the charts, use '--url' flag.\n\nTo merge the generated index with an existing index file, use the '--merge' flag. In this case, the charts found in the current directory will be merged into the index passed in with --merge, with local charts taking priority over existing charts.\n\n## Options\n-h, --help           help for index\n    --json           output in JSON format\n    --merge string   merge the generated index into the given index\n    --url string     url of chart repository\n\n## Options inherited from parent commands\n--burst-limit int                 client-side default throttling limit (default 100)\n--debug                           enable verbose output\n--kube-apiserver string           the address and the port for the Kubernetes API server\n--kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n--kube-as-user string             username to impersonate for the operation\n--kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n--kube-context string             name of the kubeconfig context to use\n--kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n--kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n--kube-token string               bearer token used for authentication\n--kubeconfig string               path to the kubeconfig file\n-n, --namespace string                namespace scope for this request\n--qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n--registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n--repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n--repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_index", "title": "Helm Repo Index", "description": "generate an index file given a directory containing packaged charts", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:56:22", "type": "overview", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Repo Index", "Helm Repo Index"], "twitter:title": "Helm | Helm Repo Index", "twitter:card": "summary", "title": "Helm | Helm Repo Index\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Repo Index", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/helm/helm_repo_index/", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/helm/helm_repo_index/", "scrapeId": "686ea240-d125-48d7-ad84-b91112c92ef3", "sourceURL": "https://helm.sh/docs/helm/helm_repo_index", "url": "https://helm.sh/docs/helm/helm_repo_index/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Repo Index\"?\n\nAssistant: Here are some code examples:\n\n### Command to generate index\n```yaml\nhelm repo index [DIR] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_index", "title": "Helm Repo Index", "description": "generate an index file given a directory containing packaged charts", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:56:22", "type": "code_examples", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Repo Index", "Helm Repo Index"], "twitter:title": "Helm | Helm Repo Index", "twitter:card": "summary", "title": "Helm | Helm Repo Index\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Repo Index", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/helm/helm_repo_index/", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/helm/helm_repo_index/", "scrapeId": "686ea240-d125-48d7-ad84-b91112c92ef3", "sourceURL": "https://helm.sh/docs/helm/helm_repo_index", "url": "https://helm.sh/docs/helm/helm_repo_index/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Repo Index\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the '--url' flag to set an absolute URL to the charts.\n• Use the '--merge' flag to merge the generated index with an existing index file.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_index", "title": "Helm Repo Index", "description": "generate an index file given a directory containing packaged charts", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:56:22", "type": "best_practices", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Repo Index", "Helm Repo Index"], "twitter:title": "Helm | Helm Repo Index", "twitter:card": "summary", "title": "Helm | Helm Repo Index\n", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Repo Index", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "ogUrl": "https://helm.sh/docs/helm/helm_repo_index/", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/helm/helm_repo_index/", "scrapeId": "686ea240-d125-48d7-ad84-b91112c92ef3", "sourceURL": "https://helm.sh/docs/helm/helm_repo_index", "url": "https://helm.sh/docs/helm/helm_repo_index/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Repo List\"?\n\nAssistant: list chart repositories\n\nHere's a detailed explanation:\n\n\n## helm repo list\nlist chart repositories\n\n## Options\n  -h, --help            help for list\n  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)\n\n\n## Options inherited from parent commands\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_list", "title": "Helm Repo List", "description": "list chart repositories", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:56:32", "type": "overview", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Repo List", "twitter:title": "Helm | Helm Repo List", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Repo List", "Helm Repo List"], "title": "Helm | Helm Repo List\n", "ogUrl": "https://helm.sh/docs/helm/helm_repo_list/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_repo_list/", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "20814a06-4108-4e4d-99d3-6cd892abd751", "sourceURL": "https://helm.sh/docs/helm/helm_repo_list", "url": "https://helm.sh/docs/helm/helm_repo_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Repo List\"?\n\nAssistant: Here are some code examples:\n\n### helm repo list\n```yaml\nhelm repo list [flags]\n```\n\n### Options\n```yaml\n  -h, --help            help for list\n  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)\n\n```\n\n### Options inherited from parent commands\n```yaml\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_list", "title": "Helm Repo List", "description": "list chart repositories", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:56:32", "type": "code_examples", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Repo List", "twitter:title": "Helm | Helm Repo List", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Repo List", "Helm Repo List"], "title": "Helm | Helm Repo List\n", "ogUrl": "https://helm.sh/docs/helm/helm_repo_list/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_repo_list/", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "20814a06-4108-4e4d-99d3-6cd892abd751", "sourceURL": "https://helm.sh/docs/helm/helm_repo_list", "url": "https://helm.sh/docs/helm/helm_repo_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Repo List\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the -o flag to specify the output format for better readability.\n• Ensure to set the correct kubeconfig context to avoid issues with Kubernetes API server communication.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_list", "title": "Helm Repo List", "description": "list chart repositories", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:56:32", "type": "best_practices", "page_metadata": {"google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Repo List", "twitter:title": "Helm | Helm Repo List", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Repo List", "Helm Repo List"], "title": "Helm | Helm Repo List\n", "ogUrl": "https://helm.sh/docs/helm/helm_repo_list/", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_repo_list/", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "20814a06-4108-4e4d-99d3-6cd892abd751", "sourceURL": "https://helm.sh/docs/helm/helm_repo_list", "url": "https://helm.sh/docs/helm/helm_repo_list/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Repo Remove\"?\n\nAssistant: remove one or more chart repositories\n\nHere's a detailed explanation:\n\n\n## helm repo remove\nremove one or more chart repositories\n\n```fallback\nhelm repo remove [REPO1 [REPO2 ...]] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_remove", "title": "Helm Repo Remove", "description": "remove one or more chart repositories", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:56:36", "type": "overview", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Repo Remove\n", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "twitter:title": "Helm | Helm Repo Remove", "language": "en", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_repo_remove/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_repo_remove/", "ogTitle": "Helm Repo Remove", "og:title": ["Helm Repo Remove", "Helm Repo Remove"], "scrapeId": "f057a4c6-7005-4237-bdd3-d6b6a095a236", "sourceURL": "https://helm.sh/docs/helm/helm_repo_remove", "url": "https://helm.sh/docs/helm/helm_repo_remove/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Repo Remove\"?\n\nAssistant: Here are some code examples:\n\n### Command to remove chart repositories\n```yaml\nhelm repo remove [REPO1 [REPO2 ...]] [flags]\n```\n\n### Options for remove command\n```yaml\n  -h, --help   help for remove\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_remove", "title": "Helm Repo Remove", "description": "remove one or more chart repositories", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:56:36", "type": "code_examples", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Repo Remove\n", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "twitter:title": "Helm | Helm Repo Remove", "language": "en", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_repo_remove/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_repo_remove/", "ogTitle": "Helm Repo Remove", "og:title": ["Helm Repo Remove", "Helm Repo Remove"], "scrapeId": "f057a4c6-7005-4237-bdd3-d6b6a095a236", "sourceURL": "https://helm.sh/docs/helm/helm_repo_remove", "url": "https://helm.sh/docs/helm/helm_repo_remove/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Repo Remove\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --help flag to get more information about the remove command and its options.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_remove", "title": "Helm Repo Remove", "description": "remove one or more chart repositories", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:56:36", "type": "best_practices", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Repo Remove\n", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "twitter:title": "Helm | Helm Repo Remove", "language": "en", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_repo_remove/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_repo_remove/", "ogTitle": "Helm Repo Remove", "og:title": ["Helm Repo Remove", "Helm Repo Remove"], "scrapeId": "f057a4c6-7005-4237-bdd3-d6b6a095a236", "sourceURL": "https://helm.sh/docs/helm/helm_repo_remove", "url": "https://helm.sh/docs/helm/helm_repo_remove/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Repo Update\"?\n\nAssistant: update information of available charts locally from chart repositories\n\nHere's a detailed explanation:\n\n\n## Synopsis\nUpdate gets the latest information about charts from the respective chart repositories.\nInformation is cached locally, where it is used by commands like 'helm search'.\n\nYou can optionally specify a list of repositories you want to update.\n$ helm repo update <repo_name> ...\nTo update all the repositories, use 'helm repo update'.\n\n## Options\n```fallback\n      --fail-on-repo-update-fail   update fails if any of the repository updates fail\n  -h, --help                       help for update\n\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n\n```\n\n## SEE ALSO\n- [helm repo](https://helm.sh/docs/helm/helm_repo/) \\- add, list, remove, update, and index chart repositories\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_update", "title": "Helm Repo Update", "description": "update information of available charts locally from chart repositories", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:56:47", "type": "overview", "page_metadata": {"title": "Helm | Helm Repo Update\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Repo Update", "twitter:title": "Helm | Helm Repo Update", "og:title": ["Helm Repo Update", "Helm Repo Update"], "og:url": "https://helm.sh/docs/helm/helm_repo_update/", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_repo_update/", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "82573266-5160-48a0-a486-deaeabc287b6", "sourceURL": "https://helm.sh/docs/helm/helm_repo_update", "url": "https://helm.sh/docs/helm/helm_repo_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Repo Update\"?\n\nAssistant: Here are some code examples:\n\n### helm repo update\n```yaml\nhelm repo update [REPO1 [REPO2 ...]] [flags]\n```\n\n### Options\n```yaml\n--fail-on-repo-update-fail   update fails if any of the repository updates fail\n-h, --help                       help for update\n```\n\n### Options inherited from parent commands\n```yaml\n--burst-limit int                 client-side default throttling limit (default 100)\n--debug                           enable verbose output\n--kube-apiserver string           the address and the port for the Kubernetes API server\n--kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n--kube-as-user string             username to impersonate for the operation\n--kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n--kube-context string             name of the kubeconfig context to use\n--kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n--kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n--kube-token string               bearer token used for authentication\n--kubeconfig string               path to the kubeconfig file\n-n, --namespace string                namespace scope for this request\n--qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n--registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n--repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n--repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_repo_update", "title": "Helm Repo Update", "description": "update information of available charts locally from chart repositories", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:56:47", "type": "code_examples", "page_metadata": {"title": "Helm | Helm Repo Update\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Repo Update", "twitter:title": "Helm | Helm Repo Update", "og:title": ["Helm Repo Update", "Helm Repo Update"], "og:url": "https://helm.sh/docs/helm/helm_repo_update/", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_repo_update/", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "82573266-5160-48a0-a486-deaeabc287b6", "sourceURL": "https://helm.sh/docs/helm/helm_repo_update", "url": "https://helm.sh/docs/helm/helm_repo_update/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Rollback\"?\n\nAssistant: roll back a release to a previous revision\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command rolls back a release to a previous revision.\n\nThe first argument of the rollback command is the name of a release, and the\nsecond is a revision (version) number. If this argument is omitted or set to\n0, it will roll back to the previous release.\n\nTo see revision numbers, run 'helm history RELEASE'.\n\n## Options\n```fallback\n      --cleanup-on-fail    allow deletion of new resources created in this rollback when rollback fails\n      --dry-run            simulate a rollback\n      --force              force resource update through delete/recreate if needed\n  -h, --help               help for rollback\n      --history-max int    limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)\n      --no-hooks           prevent hooks from running during rollback\n      --recreate-pods      performs pods restart for the resource if applicable\n      --timeout duration   time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --wait               if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout\n      --wait-for-jobs      if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_rollback", "title": "Helm Rollback", "description": "roll back a release to a previous revision", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:57:02", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_rollback/", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_rollback/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Rollback", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "twitter:title": "Helm | Helm Rollback", "title": "Helm | Helm Rollback\n", "og:title": ["Helm Rollback", "Helm Rollback"], "twitter:card": "summary", "scrapeId": "ce173129-1bae-42c0-a746-acbe91f012a8", "sourceURL": "https://helm.sh/docs/helm/helm_rollback", "url": "https://helm.sh/docs/helm/helm_rollback/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Rollback\"?\n\nAssistant: Here are some code examples:\n\n### Helm Rollback Command\n```yaml\nhelm rollback <RELEASE> [REVISION] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_rollback", "title": "Helm Rollback", "description": "roll back a release to a previous revision", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:57:02", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_rollback/", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_rollback/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Rollback", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "twitter:title": "Helm | Helm Rollback", "title": "Helm | Helm Rollback\n", "og:title": ["Helm Rollback", "Helm Rollback"], "twitter:card": "summary", "scrapeId": "ce173129-1bae-42c0-a746-acbe91f012a8", "sourceURL": "https://helm.sh/docs/helm/helm_rollback", "url": "https://helm.sh/docs/helm/helm_rollback/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Rollback\"?\n\nAssistant: Here are the recommended best practices:\n\n• To see revision numbers, run 'helm history RELEASE'.\n• Use --dry-run to simulate a rollback before executing it.\n• Set --cleanup-on-fail to allow deletion of new resources if the rollback fails.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_rollback", "title": "Helm Rollback", "description": "roll back a release to a previous revision", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:57:02", "type": "best_practices", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_rollback/", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_rollback/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Rollback", "ogDescription": "Helm - The Kubernetes Package Manager.", "language": "en", "twitter:title": "Helm | Helm Rollback", "title": "Helm | Helm Rollback\n", "og:title": ["Helm Rollback", "Helm Rollback"], "twitter:card": "summary", "scrapeId": "ce173129-1bae-42c0-a746-acbe91f012a8", "sourceURL": "https://helm.sh/docs/helm/helm_rollback", "url": "https://helm.sh/docs/helm/helm_rollback/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Search\"?\n\nAssistant: Search for a keyword in charts\n\nHere's a detailed explanation:\n\n\n## Synopsis\nSearch provides the ability to search for Helm charts in the various places they can be stored including the Artifact Hub and repositories you have added. Use search subcommands to search different locations for charts.\n\n## Options\n```fallback\n  -h, --help   help for search\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n- [helm search hub](https://helm.sh/docs/helm/helm_search_hub/) \\- search for charts in the Artifact Hub or your own hub instance\n- [helm search repo](https://helm.sh/docs/helm/helm_search_repo/) \\- search repositories for a keyword in charts\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_search", "title": "Helm Search", "description": "Search for a keyword in charts", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:57:17", "type": "overview", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "og:title": ["Helm Search", "Helm Search"], "title": "Helm | Helm Search\n", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_search/", "twitter:title": "Helm | Helm Search", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Search", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://helm.sh/docs/helm/helm_search/", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "2f8ea252-198e-49e7-bd76-2ea3af2961a1", "sourceURL": "https://helm.sh/docs/helm/helm_search", "url": "https://helm.sh/docs/helm/helm_search/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Search\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```fallback\n  -h, --help   help for search\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_search", "title": "Helm Search", "description": "Search for a keyword in charts", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:57:17", "type": "code_examples", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "og:title": ["Helm Search", "Helm Search"], "title": "Helm | Helm Search\n", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_search/", "twitter:title": "Helm | Helm Search", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Search", "viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "og:url": "https://helm.sh/docs/helm/helm_search/", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "2f8ea252-198e-49e7-bd76-2ea3af2961a1", "sourceURL": "https://helm.sh/docs/helm/helm_search", "url": "https://helm.sh/docs/helm/helm_search/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Search Hub\"?\n\nAssistant: search for charts in the Artifact Hub or your own hub instance\n\nHere's a detailed explanation:\n\n\n## Synopsis\nSearch for Helm charts in the Artifact Hub or your own hub instance.\n\nArtifact Hub is a web-based application that enables finding, installing, and publishing packages and configurations for CNCF projects, including publicly available distributed charts Helm charts. It is a Cloud Native Computing Foundation sandbox project. You can browse the hub at [https://artifacthub.io/](https://artifacthub.io/)\n\nThe [KEYWORD] argument accepts either a keyword string, or quoted string of rich query options. For rich query options documentation, see [https://artifacthub.github.io/hub/api/?urls.primaryName=Monocular%20compatible%20search%20API#/Monocular/get_api_chartsvc_v1_charts_search](https://artifacthub.github.io/hub/api/?urls.primaryName=Monocular%20compatible%20search%20API#/Monocular/get_api_chartsvc_v1_charts_search)\n\nPrevious versions of Helm used an instance of Monocular as the default 'endpoint', so for backwards compatibility Artifact Hub is compatible with the Monocular search API. Similarly, when setting the 'endpoint' flag, the specified endpoint must also be implement a Monocular compatible search API endpoint. Note that when specifying a Monocular instance as the 'endpoint', rich queries are not supported. For API details, see [https://github.com/helm/monocular](https://github.com/helm/monocular)\n\n```fallback\nhelm search hub [KEYWORD] [flags]\n```\n\n## Options\n```fallback\n      --endpoint string      Hub instance to query for charts (default \"https://hub.helm.sh\")\n      --fail-on-no-result    search fails if no results are found\n  -h, --help                 help for hub\n      --list-repo-url        print charts repository URL\n      --max-col-width uint   maximum column width for output table (default 50)\n  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm search](https://helm.sh/docs/helm/helm_search/) \\- search for a keyword in charts\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_search_hub", "title": "Helm Search Hub", "description": "search for charts in the Artifact Hub or your own hub instance", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:57:33", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Search Hub", "Helm Search Hub"], "og:url": "https://helm.sh/docs/helm/helm_search_hub/", "ogTitle": "Helm Search Hub", "ogUrl": "https://helm.sh/docs/helm/helm_search_hub/", "twitter:card": "summary", "twitter:title": "Helm | Helm Search Hub", "title": "Helm | Helm Search Hub\n", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "6b34e6dc-6abb-4fc9-95e7-9d298710d3ad", "sourceURL": "https://helm.sh/docs/helm/helm_search_hub", "url": "https://helm.sh/docs/helm/helm_search_hub/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Search Hub\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nhelm search hub [KEYWORD] [flags]\n```\n\n### Options Example\n```yaml\n--endpoint string      Hub instance to query for charts (default \"https://hub.helm.sh\")\n--fail-on-no-result    search fails if no results are found\n-h, --help             help for hub\n--list-repo-url        print charts repository URL\n--max-col-width uint   maximum column width for output table (default 50)\n-o, --output format    prints the output in the specified format. Allowed values: table, json, yaml (default table)\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_search_hub", "title": "Helm Search Hub", "description": "search for charts in the Artifact Hub or your own hub instance", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:57:33", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Search Hub", "Helm Search Hub"], "og:url": "https://helm.sh/docs/helm/helm_search_hub/", "ogTitle": "Helm Search Hub", "ogUrl": "https://helm.sh/docs/helm/helm_search_hub/", "twitter:card": "summary", "twitter:title": "Helm | Helm Search Hub", "title": "Helm | Helm Search Hub\n", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "6b34e6dc-6abb-4fc9-95e7-9d298710d3ad", "sourceURL": "https://helm.sh/docs/helm/helm_search_hub", "url": "https://helm.sh/docs/helm/helm_search_hub/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Search Hub\"?\n\nAssistant: Here are the recommended best practices:\n\n• For rich query options documentation, refer to the provided API link.\n• When specifying a Monocular instance as the 'endpoint', rich queries are not supported.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_search_hub", "title": "Helm Search Hub", "description": "search for charts in the Artifact Hub or your own hub instance", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:57:33", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Search Hub", "Helm Search Hub"], "og:url": "https://helm.sh/docs/helm/helm_search_hub/", "ogTitle": "Helm Search Hub", "ogUrl": "https://helm.sh/docs/helm/helm_search_hub/", "twitter:card": "summary", "twitter:title": "Helm | Helm Search Hub", "title": "Helm | Helm Search Hub\n", "twitter:image": "https://helm.sh/img/og-image.png", "scrapeId": "6b34e6dc-6abb-4fc9-95e7-9d298710d3ad", "sourceURL": "https://helm.sh/docs/helm/helm_search_hub", "url": "https://helm.sh/docs/helm/helm_search_hub/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Search Repo\"?\n\nAssistant: search repositories for a keyword in charts\n\nHere's a detailed explanation:\n\n\n## Synopsis\nSearch reads through all of the repositories configured on the system, and looks for matches. Search of these repositories uses the metadata stored on the system.\n\nIt will display the latest stable versions of the charts found. If you specify the --devel flag, the output will include pre-release versions. If you want to search using a version constraint, use --version.\n\n## Examples\n```\n# Search for stable release versions matching the keyword \"nginx\"\n$ helm search repo nginx\n\n# Search for release versions matching the keyword \"nginx\", including pre-release versions\n$ helm search repo nginx --devel\n\n# Search for the latest stable release for nginx-ingress with a major version of 1\n$ helm search repo nginx-ingress --version ^1.0.0\n```\n\nRepositories are managed with 'helm repo' commands.\n\n## Options\n```gdscript3\n      --devel                use development versions (alpha, beta, and release candidate releases), too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n      --fail-on-no-result    search fails if no results are found\n  -h, --help                 help for repo\n      --max-col-width uint   maximum column width for output table (default 50)\n  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)\n  -r, --regexp               use regular expressions for searching repositories you have added\n      --version string       search using semantic versioning constraints on repositories you have added\n  -l, --versions             show the long listing, with each version of each chart on its own line, for repositories you have added\n```\n\n### Options inherited from parent commands\n\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_search_repo", "title": "Helm Search Repo", "description": "search repositories for a keyword in charts", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:57:44", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Search Repo\n", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "ogTitle": "Helm Search Repo", "ogUrl": "https://helm.sh/docs/helm/helm_search_repo/", "og:url": "https://helm.sh/docs/helm/helm_search_repo/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Helm Search Repo", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Search Repo", "Helm Search Repo"], "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "d54a5702-220d-4159-80e4-e7c53de3e986", "sourceURL": "https://helm.sh/docs/helm/helm_search_repo", "url": "https://helm.sh/docs/helm/helm_search_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Search Repo\"?\n\nAssistant: Here are some code examples:\n\n### Search for stable release versions matching the keyword \"nginx\"\n```yaml\n$ helm search repo nginx\n```\n\n### Search for release versions matching the keyword \"nginx\", including pre-release versions\n```yaml\n$ helm search repo nginx --devel\n```\n\n### Search for the latest stable release for nginx-ingress with a major version of 1\n```yaml\n$ helm search repo nginx-ingress --version ^1.0.0\n```\n\n### Fallback command\n```yaml\nhelm search repo [keyword] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_search_repo", "title": "Helm Search Repo", "description": "search repositories for a keyword in charts", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:57:44", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Search Repo\n", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "ogTitle": "Helm Search Repo", "ogUrl": "https://helm.sh/docs/helm/helm_search_repo/", "og:url": "https://helm.sh/docs/helm/helm_search_repo/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Helm Search Repo", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Search Repo", "Helm Search Repo"], "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "d54a5702-220d-4159-80e4-e7c53de3e986", "sourceURL": "https://helm.sh/docs/helm/helm_search_repo", "url": "https://helm.sh/docs/helm/helm_search_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Search Repo\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --devel flag to include pre-release versions in your search results.\n• Specify a version constraint using --version for more precise results.\n• Manage repositories with 'helm repo' commands.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_search_repo", "title": "Helm Search Repo", "description": "search repositories for a keyword in charts", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:57:44", "type": "best_practices", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Search Repo\n", "description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "ogTitle": "Helm Search Repo", "ogUrl": "https://helm.sh/docs/helm/helm_search_repo/", "og:url": "https://helm.sh/docs/helm/helm_search_repo/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Helm Search Repo", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:title": ["Helm Search Repo", "Helm Search Repo"], "og:description": "Helm - The Kubernetes Package Manager.", "scrapeId": "d54a5702-220d-4159-80e4-e7c53de3e986", "sourceURL": "https://helm.sh/docs/helm/helm_search_repo", "url": "https://helm.sh/docs/helm/helm_search_repo/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Show\"?\n\nAssistant: show information of a chart\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command consists of multiple subcommands to display information about a chart\n\n## Options\n```fallback\n  -h, --help   help for show\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n- [helm show all](https://helm.sh/docs/helm/helm_show_all/) \\- show all information of the chart\n- [helm show chart](https://helm.sh/docs/helm/helm_show_chart/) \\- show the chart's definition\n- [helm show crds](https://helm.sh/docs/helm/helm_show_crds/) \\- show the chart's CRDs\n- [helm show readme](https://helm.sh/docs/helm/helm_show_readme/) \\- show the chart's README\n- [helm show values](https://helm.sh/docs/helm/helm_show_values/) \\- show the chart's values\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show", "title": "Helm Show", "description": "show information of a chart", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:57:57", "type": "overview", "page_metadata": {"title": "Helm | Helm Show\n", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_show/", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Show", "og:title": ["Helm Show", "Helm Show"], "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Show", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_show/", "scrapeId": "297b178e-bfef-41a7-9c04-ac08a2c51423", "sourceURL": "https://helm.sh/docs/helm/helm_show", "url": "https://helm.sh/docs/helm/helm_show/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Show\"?\n\nAssistant: Here are some code examples:\n\n### Options\n```yaml\n```fallback\n  -h, --help   help for show\n```\n```\n\n### Options inherited from parent commands\n```yaml\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show", "title": "Helm Show", "description": "show information of a chart", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:57:57", "type": "code_examples", "page_metadata": {"title": "Helm | Helm Show\n", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "og:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_show/", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Show", "og:title": ["Helm Show", "Helm Show"], "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Show", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:card": "summary", "ogUrl": "https://helm.sh/docs/helm/helm_show/", "scrapeId": "297b178e-bfef-41a7-9c04-ac08a2c51423", "sourceURL": "https://helm.sh/docs/helm/helm_show", "url": "https://helm.sh/docs/helm/helm_show/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Show All\"?\n\nAssistant: show all information of the chart\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command inspects a chart (directory, file, or URL) and displays all its content (values.yaml, Chart.yaml, README)\n\n## Options\n```gdscript3\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n  -h, --help                       help for all\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --repo string                chart repository url where to locate the requested chart\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm show](https://helm.sh/docs/helm/helm_show/) \\- show information of a chart\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_all", "title": "Helm Show All", "description": "show all information of the chart", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:58:10", "type": "overview", "page_metadata": {"language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_show_all/", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Show All", "description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Show All", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "title": "Helm | Helm Show All\n", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_show_all/", "twitter:card": "summary", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Helm Show All", "Helm Show All"], "scrapeId": "b22ce34c-a5f5-45cb-ac79-1cec8751a1e7", "sourceURL": "https://helm.sh/docs/helm/helm_show_all", "url": "https://helm.sh/docs/helm/helm_show_all/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Show All\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nhelm show all [CHART] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_all", "title": "Helm Show All", "description": "show all information of the chart", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:58:10", "type": "code_examples", "page_metadata": {"language": "en", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_show_all/", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Show All", "description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Show All", "twitter:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "title": "Helm | Helm Show All\n", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_show_all/", "twitter:card": "summary", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Helm Show All", "Helm Show All"], "scrapeId": "b22ce34c-a5f5-45cb-ac79-1cec8751a1e7", "sourceURL": "https://helm.sh/docs/helm/helm_show_all", "url": "https://helm.sh/docs/helm/helm_show_all/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Show Chart\"?\n\nAssistant: show the chart's definition\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command inspects a chart (directory, file, or URL) and displays the contents of the Chart.yaml file\n\n## Options\n```gdscript3\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n  -h, --help                       help for chart\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --repo string                chart repository url where to locate the requested chart\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm show](https://helm.sh/docs/helm/helm_show/) \\- show information of a chart\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_chart", "title": "Helm Show Chart", "description": "show the chart's definition", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:58:20", "type": "overview", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_show_chart/", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_show_chart/", "twitter:card": "summary", "ogTitle": "Helm Show Chart", "twitter:title": "Helm | Helm Show Chart", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Show Chart", "Helm Show Chart"], "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Show Chart\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "d39719a5-1386-43da-9e20-61f37f50c3e2", "sourceURL": "https://helm.sh/docs/helm/helm_show_chart", "url": "https://helm.sh/docs/helm/helm_show_chart/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Show Chart\"?\n\nAssistant: Here are some code examples:\n\n### Command Syntax\n```yaml\nhelm show chart [CHART] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_chart", "title": "Helm Show Chart", "description": "show the chart's definition", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:58:20", "type": "code_examples", "page_metadata": {"ogUrl": "https://helm.sh/docs/helm/helm_show_chart/", "language": "en", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_show_chart/", "twitter:card": "summary", "ogTitle": "Helm Show Chart", "twitter:title": "Helm | Helm Show Chart", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Show Chart", "Helm Show Chart"], "favicon": "https://helm.sh/img/favicon-152.png", "viewport": "width=device-width,initial-scale=1", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Show Chart\n", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "d39719a5-1386-43da-9e20-61f37f50c3e2", "sourceURL": "https://helm.sh/docs/helm/helm_show_chart", "url": "https://helm.sh/docs/helm/helm_show_chart/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Show Crds\"?\n\nAssistant: show the chart's CRDs\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command inspects a chart (directory, file, or URL) and displays the contents of the CustomResourceDefinition files\n\n## Options\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n  -h, --help                       help for crds\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --repo string                chart repository url where to locate the requested chart\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n\n\n\n## Options inherited from parent commands\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_crds", "title": "Helm Show Crds", "description": "show the chart's CRDs", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:58:37", "type": "overview", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_show_crds/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Show Crds", "twitter:title": "Helm | Helm Show Crds", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Helm Show Crds\n", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_show_crds/", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Show Crds", "Helm Show Crds"], "scrapeId": "7b7a4458-21a0-43f5-9929-d589ec50923d", "sourceURL": "https://helm.sh/docs/helm/helm_show_crds", "url": "https://helm.sh/docs/helm/helm_show_crds/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Show Crds\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nhelm show crds [CHART] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_crds", "title": "Helm Show Crds", "description": "show the chart's CRDs", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:58:37", "type": "code_examples", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_show_crds/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Show Crds", "twitter:title": "Helm | Helm Show Crds", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Helm Show Crds\n", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_show_crds/", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Show Crds", "Helm Show Crds"], "scrapeId": "7b7a4458-21a0-43f5-9929-d589ec50923d", "sourceURL": "https://helm.sh/docs/helm/helm_show_crds", "url": "https://helm.sh/docs/helm/helm_show_crds/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Show Crds\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --devel flag to include development versions of charts.\n• Always verify the package before using it with the --verify option.\n• Specify a version constraint to ensure compatibility with your application.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_crds", "title": "Helm Show Crds", "description": "show the chart's CRDs", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:58:37", "type": "best_practices", "page_metadata": {"og:url": "https://helm.sh/docs/helm/helm_show_crds/", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Show Crds", "twitter:title": "Helm | Helm Show Crds", "twitter:card": "summary", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "title": "Helm | Helm Show Crds\n", "description": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_show_crds/", "twitter:description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Show Crds", "Helm Show Crds"], "scrapeId": "7b7a4458-21a0-43f5-9929-d589ec50923d", "sourceURL": "https://helm.sh/docs/helm/helm_show_crds", "url": "https://helm.sh/docs/helm/helm_show_crds/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Show Readme\"?\n\nAssistant: show the chart's README\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command inspects a chart (directory, file, or URL) and displays the contents of the README file\n\n## Options\n```gdscript3\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n  -h, --help                       help for readme\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --repo string                chart repository url where to locate the requested chart\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm show](https://helm.sh/docs/helm/helm_show/) \\- show information of a chart\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_readme", "title": "Helm Show Readme", "description": "show the chart's README", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:58:47", "type": "overview", "page_metadata": {"ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "og:title": ["Helm Show Readme", "Helm Show Readme"], "og:url": "https://helm.sh/docs/helm/helm_show_readme/", "ogUrl": "https://helm.sh/docs/helm/helm_show_readme/", "title": "Helm | Helm Show Readme\n", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Show Readme", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Show Readme", "scrapeId": "b8e16b82-4437-4354-9c20-f1fe84c947f8", "sourceURL": "https://helm.sh/docs/helm/helm_show_readme", "url": "https://helm.sh/docs/helm/helm_show_readme/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Show Readme\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nhelm show readme [CHART] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_readme", "title": "Helm Show Readme", "description": "show the chart's README", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:58:47", "type": "code_examples", "page_metadata": {"ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "twitter:card": "summary", "og:title": ["Helm Show Readme", "Helm Show Readme"], "og:url": "https://helm.sh/docs/helm/helm_show_readme/", "ogUrl": "https://helm.sh/docs/helm/helm_show_readme/", "title": "Helm | Helm Show Readme\n", "language": "en", "description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Show Readme", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Helm Show Readme", "scrapeId": "b8e16b82-4437-4354-9c20-f1fe84c947f8", "sourceURL": "https://helm.sh/docs/helm/helm_show_readme", "url": "https://helm.sh/docs/helm/helm_show_readme/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Show Values\"?\n\nAssistant: show the chart's values\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command inspects a chart (directory, file, or URL) and displays the contents of the values.yaml file\n\n## Options\n```gdscript3\n      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string           identify HTTPS client using this SSL certificate file\n      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n  -h, --help                       help for values\n      --insecure-skip-tls-verify   skip tls certificate checks for the chart download\n      --jsonpath string            supply a JSONPath expression to filter the output\n      --key-file string            identify HTTPS client using this SSL key file\n      --keyring string             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --pass-credentials           pass credentials to all domains\n      --password string            chart repository password where to locate the requested chart\n      --plain-http                 use insecure HTTP connections for the chart download\n      --repo string                chart repository url where to locate the requested chart\n      --username string            chart repository username where to locate the requested chart\n      --verify                     verify the package before using it\n      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm show](https://helm.sh/docs/helm/helm_show/) \\- show information of a chart\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_values", "title": "Helm Show Values", "description": "show the chart's values", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:58:57", "type": "overview", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Show Values", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_show_values/", "title": "Helm | Helm Show Values\n", "twitter:title": "Helm | Helm Show Values", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Show Values", "Helm Show Values"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_show_values/", "scrapeId": "826c802d-2a0f-4d1e-8dc1-92f1863379c5", "sourceURL": "https://helm.sh/docs/helm/helm_show_values", "url": "https://helm.sh/docs/helm/helm_show_values/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Show Values\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nhelm show values [CHART] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_show_values", "title": "Helm Show Values", "description": "show the chart's values", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-02-27 21:58:57", "type": "code_examples", "page_metadata": {"viewport": "width=device-width,initial-scale=1", "twitter:card": "summary", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Show Values", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_show_values/", "title": "Helm | Helm Show Values\n", "twitter:title": "Helm | Helm Show Values", "ogDescription": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "og:title": ["Helm Show Values", "Helm Show Values"], "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:url": "https://helm.sh/docs/helm/helm_show_values/", "scrapeId": "826c802d-2a0f-4d1e-8dc1-92f1863379c5", "sourceURL": "https://helm.sh/docs/helm/helm_show_values", "url": "https://helm.sh/docs/helm/helm_show_values/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Status\"?\n\nAssistant: display the status of the named release\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThis command shows the status of a named release.\nThe status consists of:\n\n- last deployment time\n- k8s namespace in which the release lives\n- state of the release (can be: unknown, deployed, uninstalled, superseded, failed, uninstalling, pending-install, pending-upgrade or pending-rollback)\n- revision of the release\n- description of the release (can be completion message or error message, need to enable --show-desc)\n- list of resources that this release consists of (need to enable --show-resources)\n- details on last test suite run, if applicable\n- additional notes provided by the chart\n\n## Options\n```fallback\n  -h, --help             help for status\n  -o, --output format    prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --revision int     if set, display the status of the named release with revision\n      --show-desc        if set, display the description message of the named release\n      --show-resources   if set, display the resources of the named release\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_status", "title": "Helm Status", "description": "display the status of the named release", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:59:08", "type": "overview", "page_metadata": {"og:title": ["Helm Status", "Helm Status"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_status/", "twitter:title": "Helm | Helm Status", "twitter:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Status\n", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Status", "og:description": "Helm - The Kubernetes Package Manager.", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_status/", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "scrapeId": "869e4dc3-84da-45a1-8885-fd71882f7026", "sourceURL": "https://helm.sh/docs/helm/helm_status", "url": "https://helm.sh/docs/helm/helm_status/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Status\"?\n\nAssistant: Here are some code examples:\n\n### Command Example\n```yaml\nhelm status RELEASE_NAME [flags]\n```\n\n### Options Example\n```yaml\n  -h, --help             help for status\n  -o, --output format    prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --revision int     if set, display the status of the named release with revision\n      --show-desc        if set, display the description message of the named release\n      --show-resources   if set, display the resources of the named release\n\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_status", "title": "Helm Status", "description": "display the status of the named release", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:59:08", "type": "code_examples", "page_metadata": {"og:title": ["Helm Status", "Helm Status"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_status/", "twitter:title": "Helm | Helm Status", "twitter:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Status\n", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Status", "og:description": "Helm - The Kubernetes Package Manager.", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_status/", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "scrapeId": "869e4dc3-84da-45a1-8885-fd71882f7026", "sourceURL": "https://helm.sh/docs/helm/helm_status", "url": "https://helm.sh/docs/helm/helm_status/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Status\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable --show-desc to view the description message of the named release.\n• Enable --show-resources to see the resources that the release consists of.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_status", "title": "Helm Status", "description": "display the status of the named release", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:59:08", "type": "best_practices", "page_metadata": {"og:title": ["Helm Status", "Helm Status"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_status/", "twitter:title": "Helm | Helm Status", "twitter:description": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Status\n", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Status", "og:description": "Helm - The Kubernetes Package Manager.", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_status/", "twitter:image": "https://helm.sh/img/og-image.png", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "scrapeId": "869e4dc3-84da-45a1-8885-fd71882f7026", "sourceURL": "https://helm.sh/docs/helm/helm_status", "url": "https://helm.sh/docs/helm/helm_status/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Template\"?\n\nAssistant: Render chart templates locally and display the output.\n\nHere's a detailed explanation:\n\n\n## helm template\nRender chart templates locally and display the output.\n\nAny values that would normally be looked up or retrieved in-cluster will be faked locally. Additionally, none of the server-side testing of chart validity (e.g. whether an API is supported) is done.\n\n## Options\n-a, --api-versions strings                       Kubernetes api versions used for Capabilities.APIVersions\n      --atomic                                     if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used\n      --ca-file string                             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string                           identify HTTPS client using this SSL certificate file\n      --create-namespace                           create the release namespace if not present\n      --dependency-update                          update dependencies if they are missing before installing the chart\n      --description string                         add a custom description\n      --devel                                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n      --disable-openapi-validation                 if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema\n      --dry-run string[=\"client\"]                  simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.\n      --enable-dns                                 enable DNS lookups when rendering templates\n      --force                                      force resource updates through a replacement strategy\n  -g, --generate-name                              generate the name (and omit the NAME parameter)\n  -h, --help                                       help for template\n      --hide-notes                                 if set, do not show notes in install output. Does not affect presence in chart metadata\n      --include-crds                               include CRDs in the templated output\n      --insecure-skip-tls-verify                   skip tls certificate checks for the chart download\n      --is-upgrade                                 set .Release.IsUpgrade instead of .Release.IsInstall\n      --key-file string                            identify HTTPS client using this SSL key file\n      --keyring string                             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n      --kube-version string                        Kubernetes version used for Capabilities.KubeVersion\n  -l, --labels stringToString                      Labels that would be added to release metadata. Should be divided by comma. (default [])\n      --name-template string                       specify template used to name the release\n      --no-hooks                                   prevent hooks from running during install\n      --output-dir string                          writes the executed templates to files in output-dir instead of stdout\n      --pass-credentials                           pass credentials to all domains\n      --password string                            chart repository password where to locate the requested chart\n      --plain-http                                 use insecure HTTP connections for the chart download\n      --post-renderer postRendererString           the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path\n      --post-renderer-args postRendererArgsSlice   an argument to the post-renderer (can specify multiple) (default [])\n      --release-name                               use release name in the output-dir path.\n      --render-subchart-notes                      if set, render subchart notes along with the parent\n      --replace                                    re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production\n      --repo string                                chart repository url where to locate the requested chart\n      --set stringArray                            set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --set-file stringArray                       set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --set-json stringArray                       set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)\n      --set-literal stringArray                    set a literal STRING value on the command line\n      --set-string stringArray                     set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -s, --show-only stringArray                      only show manifests rendered from the given templates\n      --skip-crds                                  if set, no CRDs will be installed. By default, CRDs are installed if not already present\n      --skip-schema-validation                     if set, disables JSON schema validation\n      --skip-tests                                 skip tests from templated output\n      --take-ownership                             if set, install will ignore the check for helm annotations and take ownership of the existing resources\n      --timeout duration                           time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --username string                            chart repository username where to locate the requested chart\n      --validate                                   validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install\n  -f, --values strings                             specify values in a YAML file or a URL (can specify multiple)\n      --verify                                     verify the package before using it\n      --version string                             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n      --wait                                       if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout\n      --wait-for-jobs                              if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_template", "title": "Helm Template", "description": "Render chart templates locally and display the output.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:59:30", "type": "overview", "page_metadata": {"ogTitle": "Helm Template", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_template/", "og:title": ["Helm Template", "Helm Template"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Template\n", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_template/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Helm Template", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "language": "en", "scrapeId": "e1eb84a4-1499-4c39-aff4-2b2a3a9efa43", "sourceURL": "https://helm.sh/docs/helm/helm_template", "url": "https://helm.sh/docs/helm/helm_template/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Template\"?\n\nAssistant: Here are some code examples:\n\n### Command to render templates\n```yaml\nhelm template [NAME] [CHART] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_template", "title": "Helm Template", "description": "Render chart templates locally and display the output.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:59:30", "type": "code_examples", "page_metadata": {"ogTitle": "Helm Template", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_template/", "og:title": ["Helm Template", "Helm Template"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Template\n", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_template/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Helm Template", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "language": "en", "scrapeId": "e1eb84a4-1499-4c39-aff4-2b2a3a9efa43", "sourceURL": "https://helm.sh/docs/helm/helm_template", "url": "https://helm.sh/docs/helm/helm_template/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Template\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --dry-run option to simulate an install without making any changes to the cluster.\n• Always validate your manifests against the Kubernetes cluster you are currently pointing at using the --validate flag.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_template", "title": "Helm Template", "description": "Render chart templates locally and display the output.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:59:30", "type": "best_practices", "page_metadata": {"ogTitle": "Helm Template", "description": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogUrl": "https://helm.sh/docs/helm/helm_template/", "og:title": ["Helm Template", "Helm Template"], "favicon": "https://helm.sh/img/favicon-152.png", "ogDescription": "Helm - The Kubernetes Package Manager.", "title": "Helm | Helm Template\n", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_template/", "twitter:image": "https://helm.sh/img/og-image.png", "twitter:title": "Helm | Helm Template", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:card": "summary", "language": "en", "scrapeId": "e1eb84a4-1499-4c39-aff4-2b2a3a9efa43", "sourceURL": "https://helm.sh/docs/helm/helm_template", "url": "https://helm.sh/docs/helm/helm_template/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Test\"?\n\nAssistant: run tests for a release\n\nHere's a detailed explanation:\n\n\n## Synopsis\nThe test command runs the tests for a release.\n\nThe argument this command takes is the name of a deployed release.\nThe tests to be run are defined in the chart that was installed.\n\n## Options\n```fallback\n      --filter strings     specify tests by attribute (currently \"name\") using attribute=value syntax or '!attribute=value' to exclude a test (can specify multiple or separate values with commas: name=test1,name=test2)\n  -h, --help               help for test\n      --hide-notes         if set, do not show notes in test output. Does not affect presence in chart metadata\n      --logs               dump the logs from test pods (this runs after all tests are complete, but before any cleanup)\n      --timeout duration   time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_test", "title": "Helm Test", "description": "run tests for a release", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:59:39", "type": "overview", "page_metadata": {"twitter:title": "Helm | Helm Test", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_test/", "title": "Helm | Helm Test\n", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Test", "og:title": ["Helm Test", "Helm Test"], "twitter:card": "summary", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/helm/helm_test/", "scrapeId": "67745862-9a9b-4ad9-961a-5734d2a63a82", "sourceURL": "https://helm.sh/docs/helm/helm_test", "url": "https://helm.sh/docs/helm/helm_test/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Test\"?\n\nAssistant: Here are some code examples:\n\n### Helm Test Command\n```yaml\nhelm test [RELEASE] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_test", "title": "Helm Test", "description": "run tests for a release", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:59:39", "type": "code_examples", "page_metadata": {"twitter:title": "Helm | Helm Test", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_test/", "title": "Helm | Helm Test\n", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Test", "og:title": ["Helm Test", "Helm Test"], "twitter:card": "summary", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/helm/helm_test/", "scrapeId": "67745862-9a9b-4ad9-961a-5734d2a63a82", "sourceURL": "https://helm.sh/docs/helm/helm_test", "url": "https://helm.sh/docs/helm/helm_test/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Test\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --filter option to specify tests by attribute for more granular control over which tests to run.\n• Utilize the --logs option to get detailed logs from test pods after tests are complete for troubleshooting.\n• Set a timeout using the --timeout option to avoid hanging operations during testing.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_test", "title": "Helm Test", "description": "run tests for a release", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:59:39", "type": "best_practices", "page_metadata": {"twitter:title": "Helm | Helm Test", "twitter:description": "Helm - The Kubernetes Package Manager.", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:image": "https://helm.sh/img/og-image.png", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_test/", "title": "Helm | Helm Test\n", "og:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "viewport": "width=device-width,initial-scale=1", "description": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Test", "og:title": ["Helm Test", "Helm Test"], "twitter:card": "summary", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/helm/helm_test/", "scrapeId": "67745862-9a9b-4ad9-961a-5734d2a63a82", "sourceURL": "https://helm.sh/docs/helm/helm_test", "url": "https://helm.sh/docs/helm/helm_test/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Uninstall\"?\n\nAssistant: uninstall a release\n\nHere's a detailed explanation:\n\n\n## helm uninstall\nThis command takes a release name and uninstalls the release.\n\nIt removes all of the resources associated with the last release of the chart as well as the release history, freeing it up for future use.\n\nUse the '--dry-run' flag to see which releases will be uninstalled without actually uninstalling them.\n\n## Options\n      --cascade string       Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents. Defaults to background. (default \"background\")\n      --description string   add a custom description\n      --dry-run              simulate a uninstall\n  -h, --help                 help for uninstall\n      --ignore-not-found     Treat \"release not found\" as a successful uninstall\n      --keep-history         remove all associated resources and mark the release as deleted, but retain the release history\n      --no-hooks             prevent hooks from running during uninstallation\n      --timeout duration     time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --wait                 if set, will wait until all the resources are deleted before returning. It will wait for as long as --timeout\n\n## Options inherited from parent commands\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_uninstall", "title": "Helm Uninstall", "description": "uninstall a release", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:59:48", "type": "overview", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_uninstall/", "og:title": ["Helm Uninstall", "Helm Uninstall"], "twitter:title": "Helm | Helm Uninstall", "title": "Helm | Helm Uninstall\n", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/helm/helm_uninstall/", "twitter:card": "summary", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Uninstall", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "8a3e481d-06eb-44ed-b6ee-954be9f47fb1", "sourceURL": "https://helm.sh/docs/helm/helm_uninstall", "url": "https://helm.sh/docs/helm/helm_uninstall/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Uninstall\"?\n\nAssistant: Here are some code examples:\n\n### helm uninstall command\n```yaml\nhelm uninstall RELEASE_NAME [...] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_uninstall", "title": "Helm Uninstall", "description": "uninstall a release", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:59:48", "type": "code_examples", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_uninstall/", "og:title": ["Helm Uninstall", "Helm Uninstall"], "twitter:title": "Helm | Helm Uninstall", "title": "Helm | Helm Uninstall\n", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/helm/helm_uninstall/", "twitter:card": "summary", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Uninstall", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "8a3e481d-06eb-44ed-b6ee-954be9f47fb1", "sourceURL": "https://helm.sh/docs/helm/helm_uninstall", "url": "https://helm.sh/docs/helm/helm_uninstall/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Uninstall\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the '--dry-run' flag to see which releases will be uninstalled without actually uninstalling them.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_uninstall", "title": "Helm Uninstall", "description": "uninstall a release", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:59:48", "type": "best_practices", "page_metadata": {"og:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/helm/helm_uninstall/", "og:title": ["Helm Uninstall", "Helm Uninstall"], "twitter:title": "Helm | Helm Uninstall", "title": "Helm | Helm Uninstall\n", "twitter:image": "https://helm.sh/img/og-image.png", "og:url": "https://helm.sh/docs/helm/helm_uninstall/", "twitter:card": "summary", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "ogTitle": "Helm Uninstall", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "twitter:description": "Helm - The Kubernetes Package Manager.", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "8a3e481d-06eb-44ed-b6ee-954be9f47fb1", "sourceURL": "https://helm.sh/docs/helm/helm_uninstall", "url": "https://helm.sh/docs/helm/helm_uninstall/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Upgrade\"?\n\nAssistant: This command upgrades a release to a new version of a chart.\n\nHere's a detailed explanation:\n\n\n## helm upgrade\nThis command upgrades a release to a new version of a chart.\n\nThe upgrade arguments must be a release and chart. The chart\nargument can be either: a chart reference('example/mariadb'), a path to a chart directory,\na packaged chart, or a fully qualified URL. For chart references, the latest\nversion will be specified unless the '--version' flag is set.\n\nTo override values in a chart, use either the '--values' flag and pass in a file\nor use the '--set' flag and pass configuration from the command line, to force string\nvalues, use '--set-string'. You can use '--set-file' to set individual\nvalues from a file when the value itself is too long for the command line\nor is dynamically generated. You can also use '--set-json' to set json values\n(scalars/objects/arrays) from the command line.\n\nYou can specify the '--values'/'-f' flag multiple times. The priority will be given to the\nlast (right-most) file specified. For example, if both myvalues.yaml and override.yaml\ncontained a key called 'Test', the value set in override.yaml would take precedence:\n\n```\n$ helm upgrade -f myvalues.yaml -f override.yaml redis ./redis\n```\n\nYou can specify the '--set' flag multiple times. The priority will be given to the\nlast (right-most) set specified. For example, if both 'bar' and 'newbar' values are\nset for a key called 'foo', the 'newbar' value would take precedence:\n\n```\n$ helm upgrade --set foo=bar --set foo=newbar redis ./redis\n```\n\nYou can update the values for an existing release with this command as well via the\n'--reuse-values' flag. The 'RELEASE' and 'CHART' arguments should be set to the original\nparameters, and existing values will be merged with any values set via '--values'/'-f'\nor '--set' flags. Priority is given to new values.\n\n```\n$ helm upgrade --reuse-values --set foo=bar --set foo=newbar redis ./redis\n```\n\nThe --dry-run flag will output all generated chart manifests, including Secrets\nwhich can contain sensitive values. To hide Kubernetes Secrets use the\n--hide-secret flag. Please carefully consider how and when these flags are used.\n\n```fallback\nhelm upgrade [RELEASE] [CHART] [flags]\n```\n\n## Options\n```gdscript3\n      --atomic                                     if set, upgrade process rolls back changes made in case of failed upgrade. The --wait flag will be set automatically if --atomic is used\n      --ca-file string                             verify certificates of HTTPS-enabled servers using this CA bundle\n      --cert-file string                           identify HTTPS client using this SSL certificate file\n      --cleanup-on-fail                            allow deletion of new resources created in this upgrade when upgrade fails\n      --create-namespace                           if --install is set, create the release namespace if not present\n      --dependency-update                          update dependencies if they are missing before installing the chart\n      --description string                         add a custom description\n      --devel                                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored\n      --disable-openapi-validation                 if set, the upgrade process will not validate rendered templates against the Kubernetes OpenAPI Schema\n      --dry-run string[=\"client\"]                  simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.\n      --enable-dns                                 enable DNS lookups when rendering templates\n      --force                                      force resource updates through a replacement strategy\n  -h, --help                                       help for upgrade\n      --hide-notes                                 if set, do not show notes in upgrade output. Does not affect presence in chart metadata\n      --hide-secret                                hide Kubernetes Secrets when also using the --dry-run flag\n      --history-max int                            limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)\n      --insecure-skip-tls-verify                   skip tls certificate checks for the chart download\n  -i, --install                                    if a release by this name doesn't already exist, run an install\n      --key-file string                            identify HTTPS client using this SSL key file\n      --keyring string                             location of public keys used for verification (default \"~/.gnupg/pubring.gpg\")\n  -l, --labels stringToString                      Labels that would be added to release metadata. Should be separated by comma. Original release labels will be merged with upgrade labels. You can unset label using null. (default [])\n      --no-hooks                                   disable pre/post upgrade hooks\n  -o, --output format                              prints the output in the specified format. Allowed values: table, json, yaml (default table)\n      --pass-credentials                           pass credentials to all domains\n      --password string                            chart repository password where to locate the requested chart\n      --plain-http                                 use insecure HTTP connections for the chart download\n      --post-renderer postRendererString           the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path\n      --post-renderer-args postRendererArgsSlice   an argument to the post-renderer (can specify multiple) (default [])\n      --render-subchart-notes                      if set, render subchart notes along with the parent\n      --repo string                                chart repository url where to locate the requested chart\n      --reset-then-reuse-values                    when upgrading, reset the values to the ones built into the chart, apply the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' or '--reuse-values' is specified, this is ignored\n      --reset-values                               when upgrading, reset the values to the ones built into the chart\n      --reuse-values                               when upgrading, reuse the last release's values and merge in any overrides from the command line via --set and -f. If '--reset-values' is specified, this is ignored\n      --set stringArray                            set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --set-file stringArray                       set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --set-json stringArray                       set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)\n      --set-literal stringArray                    set a literal STRING value on the command line\n      --set-string stringArray                     set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --skip-crds                                  if set, no CRDs will be installed when an upgrade is performed with install flag enabled. By default, CRDs are installed if not already present, when an upgrade is performed with install flag enabled\n      --skip-schema-validation                     if set, disables JSON schema validation\n      --take-ownership                             if set, upgrade will ignore the check for helm annotations and take ownership of the existing resources\n      --timeout duration                           time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)\n      --username string                            chart repository username where to locate the requested chart\n  -f, --values strings                             specify values in a YAML file or a URL (can specify multiple)\n      --verify                                     verify the package before using it\n      --version string                             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used\n      --wait                                       if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout\n      --wait-for-jobs                              if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_upgrade", "title": "Helm Upgrade", "description": "This command upgrades a release to a new version of a chart.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:00:30", "type": "overview", "page_metadata": {"title": "Helm | Helm Upgrade\n", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "twitter:title": "Helm | Helm Upgrade", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_upgrade/", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Helm Upgrade", "Helm Upgrade"], "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Upgrade", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_upgrade/", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "5d8abee2-b6f7-4691-b52a-791eb64a7b9f", "sourceURL": "https://helm.sh/docs/helm/helm_upgrade", "url": "https://helm.sh/docs/helm/helm_upgrade/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Upgrade\"?\n\nAssistant: Here are some code examples:\n\n### Basic Upgrade Command\n```yaml\n$ helm upgrade -f myvalues.yaml -f override.yaml redis ./redis\n```\n\n### Set Values Example\n```yaml\n$ helm upgrade --set foo=bar --set foo=newbar redis ./redis\n```\n\n### Reuse Values Example\n```yaml\n$ helm upgrade --reuse-values --set foo=bar --set foo=newbar redis ./redis\n```\n\n### Fallback Command Structure\n```yaml\nhelm upgrade [RELEASE] [CHART] [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_upgrade", "title": "Helm Upgrade", "description": "This command upgrades a release to a new version of a chart.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:00:30", "type": "code_examples", "page_metadata": {"title": "Helm | Helm Upgrade\n", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "twitter:title": "Helm | Helm Upgrade", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_upgrade/", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Helm Upgrade", "Helm Upgrade"], "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Upgrade", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_upgrade/", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "5d8abee2-b6f7-4691-b52a-791eb64a7b9f", "sourceURL": "https://helm.sh/docs/helm/helm_upgrade", "url": "https://helm.sh/docs/helm/helm_upgrade/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Upgrade\"?\n\nAssistant: Here are the recommended best practices:\n\n• Carefully consider how and when to use the --dry-run and --hide-secret flags.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_upgrade", "title": "Helm Upgrade", "description": "This command upgrades a release to a new version of a chart.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:00:30", "type": "best_practices", "page_metadata": {"title": "Helm | Helm Upgrade\n", "description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "twitter:title": "Helm | Helm Upgrade", "language": "en", "ogUrl": "https://helm.sh/docs/helm/helm_upgrade/", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Helm Upgrade", "Helm Upgrade"], "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Upgrade", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:description": "Helm - The Kubernetes Package Manager.", "viewport": "width=device-width,initial-scale=1", "og:url": "https://helm.sh/docs/helm/helm_upgrade/", "twitter:description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "scrapeId": "5d8abee2-b6f7-4691-b52a-791eb64a7b9f", "sourceURL": "https://helm.sh/docs/helm/helm_upgrade", "url": "https://helm.sh/docs/helm/helm_upgrade/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Verify\"?\n\nAssistant: verify that a chart at the given path has been signed and is valid\n\nHere's a detailed explanation:\n\n\n## Synopsis\nVerify that the given chart has a valid provenance file.\n\nProvenance files provide cryptographic verification that a chart has not been tampered with, and was packaged by a trusted provider.\n\nThis command can be used to verify a local chart. Several other commands provide '--verify' flags that run the same validation. To generate a signed package, use the 'helm package --sign' command.\n\n## Options\n```fallback\n  -h, --help             help for verify\n      --keyring string   keyring containing public keys (default \"~/.gnupg/pubring.gpg\")\n```\n\n## Options inherited from parent commands\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n\n## SEE ALSO\n- [helm](https://helm.sh/docs/helm/helm/) \\- The Helm package manager for Kubernetes.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_verify", "title": "Helm Verify", "description": "verify that a chart at the given path has been signed and is valid", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:00:39", "type": "overview", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "og:title": ["Helm Verify", "Helm Verify"], "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_verify/", "ogTitle": "Helm Verify", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_verify/", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Verify", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Verify\n", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "b8b30769-ebbb-48fd-b006-a7ddeed1041f", "sourceURL": "https://helm.sh/docs/helm/helm_verify", "url": "https://helm.sh/docs/helm/helm_verify/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Verify\"?\n\nAssistant: Here are some code examples:\n\n### Command to verify a chart\n```yaml\nhelm verify PATH [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_verify", "title": "Helm Verify", "description": "verify that a chart at the given path has been signed and is valid", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:00:39", "type": "code_examples", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "og:title": ["Helm Verify", "Helm Verify"], "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_verify/", "ogTitle": "Helm Verify", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_verify/", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Verify", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Verify\n", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "b8b30769-ebbb-48fd-b006-a7ddeed1041f", "sourceURL": "https://helm.sh/docs/helm/helm_verify", "url": "https://helm.sh/docs/helm/helm_verify/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Verify\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the 'helm package --sign' command to generate a signed package.\n• Ensure that the provenance file is valid for cryptographic verification.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_verify", "title": "Helm Verify", "description": "verify that a chart at the given path has been signed and is valid", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 22:00:39", "type": "best_practices", "page_metadata": {"twitter:description": "Helm - The Kubernetes Package Manager.", "language": "en", "og:title": ["Helm Verify", "Helm Verify"], "twitter:image": "https://helm.sh/img/og-image.png", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogUrl": "https://helm.sh/docs/helm/helm_verify/", "ogTitle": "Helm Verify", "ogDescription": "Helm - The Kubernetes Package Manager.", "og:url": "https://helm.sh/docs/helm/helm_verify/", "twitter:card": "summary", "viewport": "width=device-width,initial-scale=1", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:title": "Helm | Helm Verify", "favicon": "https://helm.sh/img/favicon-152.png", "title": "Helm | Helm Verify\n", "description": "Helm - The Kubernetes Package Manager.", "scrapeId": "b8b30769-ebbb-48fd-b006-a7ddeed1041f", "sourceURL": "https://helm.sh/docs/helm/helm_verify", "url": "https://helm.sh/docs/helm/helm_verify/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Version\"?\n\nAssistant: Show the version for Helm.\n\nHere's a detailed explanation:\n\n\n## helm version\nShow the version for Helm.\n\nThis will print a representation the version of Helm.\nThe output will look something like this:\n\nversion.BuildInfo{Version:\"v3.2.1\", GitCommit:\"fe51cd1e31e6a202cba7dead9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.13.10\"}\n\n- Version is the semantic version of the release.\n- GitCommit is the SHA for the commit that this version was built from.\n- GitTreeState is \"clean\" if there are no local code changes when this binary was built, and \"dirty\" if the binary was built from locally modified code.\n- GoVersion is the version of Go that was used to compile Helm.\n\nWhen using the --template flag the following properties are available to use in the template:\n\n- .Version contains the semantic version of Helm\n- .GitCommit is the git commit\n- .GitTreeState is the state of the git tree when Helm was built\n- .GoVersion contains the version of Go that Helm was compiled with\n\nFor example, --template='Version: {{.Version}}' outputs 'Version: v3.2.1'.\n\n## Options\nOptions for the helm version command include:\n\n```fallback\n  -h, --help              help for version\n      --short             print the version number\n      --template string   template for version string format\n```\n\n### Options inherited from parent commands\n\n```fallback\n      --burst-limit int                 client-side default throttling limit (default 100)\n      --debug                           enable verbose output\n      --kube-apiserver string           the address and the port for the Kubernetes API server\n      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-user string             username to impersonate for the operation\n      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection\n      --kube-context string             name of the kubeconfig context to use\n      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --kube-token string               bearer token used for authentication\n      --kubeconfig string               path to the kubeconfig file\n  -n, --namespace string                namespace scope for this request\n      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting\n      --registry-config string          path to the registry config file (default \"~/.config/helm/registry/config.json\")\n      --repository-cache string         path to the directory containing cached repository indexes (default \"~/.cache/helm/repository\")\n      --repository-config string        path to the file containing repository names and URLs (default \"~/.config/helm/repositories.yaml\")\n```\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_version", "title": "Helm Version", "description": "Show the version for Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:00:50", "type": "overview", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Helm Version", "Helm Version"], "og:url": "https://helm.sh/docs/helm/helm_version/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "title": "Helm | Helm Version\n", "ogUrl": "https://helm.sh/docs/helm/helm_version/", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Version", "twitter:title": "Helm | Helm Version", "scrapeId": "ec7a96d7-0917-499d-b8e3-0cfda765a1bf", "sourceURL": "https://helm.sh/docs/helm/helm_version", "url": "https://helm.sh/docs/helm/helm_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Version\"?\n\nAssistant: Here are some code examples:\n\n### helm version command\n```yaml\nhelm version [flags]\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_version", "title": "Helm Version", "description": "Show the version for Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:00:50", "type": "code_examples", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Helm Version", "Helm Version"], "og:url": "https://helm.sh/docs/helm/helm_version/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "title": "Helm | Helm Version\n", "ogUrl": "https://helm.sh/docs/helm/helm_version/", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Version", "twitter:title": "Helm | Helm Version", "scrapeId": "ec7a96d7-0917-499d-b8e3-0cfda765a1bf", "sourceURL": "https://helm.sh/docs/helm/helm_version", "url": "https://helm.sh/docs/helm/helm_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Version\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the --template flag to customize the output format of the version information.\n• Check the GitTreeState to determine if the Helm binary was built from modified code.\n", "metadata": {"source_url": "https://helm.sh/docs/helm/helm_version", "title": "Helm Version", "description": "Show the version for Helm.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:00:50", "type": "best_practices", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "viewport": "width=device-width,initial-scale=1", "language": "en", "ogDescription": "Helm - The Kubernetes Package Manager.", "twitter:description": "Helm - The Kubernetes Package Manager.", "favicon": "https://helm.sh/img/favicon-152.png", "og:title": ["Helm Version", "Helm Version"], "og:url": "https://helm.sh/docs/helm/helm_version/", "og:description": "Helm - The Kubernetes Package Manager.", "twitter:card": "summary", "title": "Helm | Helm Version\n", "ogUrl": "https://helm.sh/docs/helm/helm_version/", "description": "Helm - The Kubernetes Package Manager.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogTitle": "Helm Version", "twitter:title": "Helm | Helm Version", "scrapeId": "ec7a96d7-0917-499d-b8e3-0cfda765a1bf", "sourceURL": "https://helm.sh/docs/helm/helm_version", "url": "https://helm.sh/docs/helm/helm_version/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Helm Version Support Policy\"?\n\nAssistant: This document describes the maximum version skew supported between Helm and Kubernetes.\n\nHere's a detailed explanation:\n\n\n## Supported Versions\nHelm versions are expressed as `x.y.z`, where `x` is the major version, `y` is the minor version, and `z` is the patch version, following [Semantic\\ Versioning](https://semver.org/spec/v2.0.0.html) terminology.\n\nThe Helm project maintains a release branch for the most recent minor release. Applicable fixes, including security fixes, are cherry-picked into the release branch, depending on severity and feasibility. More details can be found in [Helm's release policy](https://helm.sh/docs/topics/release_policy/).\n\n## Supported Version Skew\nWhen a new version of Helm is released, it is compiled against a particular minor version of Kubernetes. For example, Helm 3.0.0 interacts with Kubernetes using the Kubernetes 1.16.2 client, so it is compatible with Kubernetes 1.16.\n\nAs of Helm 3, Helm is assumed to be compatible with `n-3` versions of Kubernetes it was compiled against. Due to Kubernetes' changes between minor versions, Helm 2's support policy is slightly stricter, assuming to be compatible with `n-1` versions of Kubernetes.\n\nFor example, if you are using a version of Helm 3 that was compiled against the Kubernetes 1.17 client APIs, then it should be safe to use with Kubernetes 1.17, 1.16, 1.15, and 1.14. If you are using a version of Helm 2 that was compiled against the Kubernetes 1.16 client APIs, then it should be safe to use with Kubernetes 1.16 and 1.15.\n\nIt is not recommended to use Helm with a version of Kubernetes that is newer than the version it was compiled against, as Helm does not make any forward compatibility guarantees.\n\nIf you choose to use Helm with a version of Kubernetes that it does not support, you are using it at your own risk.\n\nPlease refer to the table below to determine what version of Helm is compatible with your cluster.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/version_skew", "title": "Helm Version Support Policy", "description": "This document describes the maximum version skew supported between Helm and Kubernetes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:01:05", "type": "overview", "page_metadata": {"og:title": ["Helm Version Support Policy", "Helm Version Support Policy"], "description": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "og:url": "https://helm.sh/docs/topics/version_skew/", "title": "Helm | Helm Version Support Policy\n", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/topics/version_skew/", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Version Support Policy", "twitter:title": "Helm | Helm Version Support Policy", "twitter:description": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "language": "en", "twitter:card": "summary", "og:description": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "scrapeId": "c219549a-79a2-483a-96d2-1586bde071fb", "sourceURL": "https://helm.sh/docs/topics/version_skew", "url": "https://helm.sh/docs/topics/version_skew/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Helm Version Support Policy\"?\n\nAssistant: Here are some code examples:\n\n### Helm and Kubernetes Compatibility Table\n```yaml\n| Helm Version | Supported Kubernetes Versions |\n| --- | --- |\n| 3.17.x | 1.32.x - 1.29.x |\n| 3.16.x | 1.31.x - 1.28.x |\n| 3.15.x | 1.30.x - 1.27.x |\n| 3.14.x | 1.29.x - 1.26.x |\n| 3.13.x | 1.28.x - 1.25.x |\n| 3.12.x | 1.27.x - 1.24.x |\n| 3.11.x | 1.26.x - 1.23.x |\n| 3.10.x | 1.25.x - 1.22.x |\n| 3.9.x  | 1.24.x - 1.21.x |\n| 3.8.x  | 1.23.x - 1.20.x |\n| 3.7.x  | 1.22.x - 1.19.x |\n| 3.6.x  | 1.21.x - 1.18.x |\n| 3.5.x  | 1.20.x - 1.17.x |\n| 3.4.x  | 1.19.x - 1.16.x |\n| 3.3.x  | 1.18.x - 1.15.x |\n| 3.2.x  | 1.18.x - 1.15.x |\n| 3.1.x  | 1.17.x - 1.14.x |\n| 3.0.x  | 1.16.x - 1.13.x |\n| 2.16.x | 1.16.x - 1.15.x |\n| 2.15.x | 1.15.x - 1.14.x |\n| 2.14.x | 1.14.x - 1.13.x |\n| 2.13.x | 1.13.x - 1.12.x |\n| 2.12.x | 1.12.x - 1.11.x |\n| 2.11.x | 1.11.x - 1.10.x |\n| 2.10.x | 1.10.x - 1.9.x |\n| 2.9.x  | 1.10.x - 1.9.x |\n| 2.8.x  | 1.9.x - 1.8.x |\n| 2.7.x  | 1.8.x - 1.7.x |\n| 2.6.x  | 1.7.x - 1.6.x |\n| 2.5.x  | 1.6.x - 1.5.x |\n| 2.4.x  | 1.6.x - 1.5.x |\n| 2.3.x  | 1.5.x - 1.4.x |\n| 2.2.x  | 1.5.x - 1.4.x |\n| 2.1.x  | 1.5.x - 1.4.x |\n| 2.0.x  | 1.4.x - 1.3.x |\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/version_skew", "title": "Helm Version Support Policy", "description": "This document describes the maximum version skew supported between Helm and Kubernetes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:01:05", "type": "code_examples", "page_metadata": {"og:title": ["Helm Version Support Policy", "Helm Version Support Policy"], "description": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "og:url": "https://helm.sh/docs/topics/version_skew/", "title": "Helm | Helm Version Support Policy\n", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/topics/version_skew/", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Version Support Policy", "twitter:title": "Helm | Helm Version Support Policy", "twitter:description": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "language": "en", "twitter:card": "summary", "og:description": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "scrapeId": "c219549a-79a2-483a-96d2-1586bde071fb", "sourceURL": "https://helm.sh/docs/topics/version_skew", "url": "https://helm.sh/docs/topics/version_skew/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Helm Version Support Policy\"?\n\nAssistant: Here are the recommended best practices:\n\n• It is not recommended to use Helm with a version of Kubernetes that is newer than the version it was compiled against, as Helm does not make any forward compatibility guarantees.\n• If you choose to use Helm with a version of Kubernetes that it does not support, you are using it at your own risk.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/version_skew", "title": "Helm Version Support Policy", "description": "This document describes the maximum version skew supported between Helm and Kubernetes.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 22:01:05", "type": "best_practices", "page_metadata": {"og:title": ["Helm Version Support Policy", "Helm Version Support Policy"], "description": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "og:url": "https://helm.sh/docs/topics/version_skew/", "title": "Helm | Helm Version Support Policy\n", "viewport": "width=device-width,initial-scale=1", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "favicon": "https://helm.sh/img/favicon-152.png", "ogUrl": "https://helm.sh/docs/topics/version_skew/", "twitter:image": "https://helm.sh/img/og-image.png", "ogTitle": "Helm Version Support Policy", "twitter:title": "Helm | Helm Version Support Policy", "twitter:description": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "language": "en", "twitter:card": "summary", "og:description": "Describes Helm's patch release policy as well as the maximum version skew supported between Helm and Kubernetes.", "scrapeId": "c219549a-79a2-483a-96d2-1586bde071fb", "sourceURL": "https://helm.sh/docs/topics/version_skew", "url": "https://helm.sh/docs/topics/version_skew/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Permissions management for SQL storage backend\"?\n\nAssistant: This document aims to provide guidance to users for setting up and managing permissions when using the SQL storage backend.\n\nHere's a detailed explanation:\n\n\n## Introduction\nTo handle permissions, Helm leverages the RBAC feature of Kubernetes. When using the SQL storage backend, Kubernetes' roles can't be used to determine whether or not an user can access a given resource. This document shows how to create and manage these permissions.\n\n## Initialization\nThe first time the Helm CLI will make connect to your database, the client will make sure that it was previously initialized. If it is not, it will take care of the necessary setup automatically. This initialization requires admin privileges on the public schema, or at least to be able to:\n\n- create a table\n- grant privileges on the public schema\n\nAfter the migration was run against your database, all the other roles can use the client.\n\n## Grant privileges to a non admin user in PostgreSQL\nTo manage permissions, the SQL backend driver leverages the RLS (Row Security Level) feature of PostgreSQL. RLS allows all users to be able to read/write from/to the same table, without being able to manipulate the same rows if they are not explicitly allowed to. By default, any role that has not been explicitly granted with the right privileges will always return an empty list when running `helm list` and will not be able to retrieve or modify any resource in the cluster.\n\nLet's see how to grant a given role access to specific namespaces:\n\n```sql\nCREATE POLICY <name> ON releases_v1 FOR ALL TO <role> USING (namespace = 'default');\n```\n\nThis command will grant the permissions to read and write all resources that meet the `namespace = 'default'` condition to the role `role`. After creating this policy, the user being connected to the database on the behalf of the role `role` will therefore be able to see all the releases living in the `default` namespace when running `helm list`, and to modify and delete them.\n\nPrivileges can be managed granularly with RLS, and one might be interested in restraining access given the different columns of the table:\n\n- key\n- type\n- body\n- name\n- namespace\n- version\n- status\n- owner\n- createdAt\n- modifiedAt\n", "metadata": {"source_url": "https://helm.sh/docs/topics/permissions_sql_storage_backend", "title": "Permissions management for SQL storage backend", "description": "This document aims to provide guidance to users for setting up and managing permissions when using the SQL storage backend.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:01:15", "type": "overview", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/permissions_sql_storage_backend/", "language": "en", "twitter:description": "Get to know how to setup permissions when using SQL storage backend.", "title": "Helm | Permissions management for SQL storage backend\n", "ogUrl": "https://helm.sh/docs/topics/permissions_sql_storage_backend/", "description": "Get to know how to setup permissions when using SQL storage backend.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Get to know how to setup permissions when using SQL storage backend.", "ogDescription": "Get to know how to setup permissions when using SQL storage backend.", "twitter:card": "summary", "twitter:title": "Helm | Permissions management for SQL storage backend", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Permissions management for SQL storage backend", "og:title": ["Permissions management for SQL storage backend", "Permissions management for SQL storage backend"], "scrapeId": "f0c6c166-5e65-43d1-bdc4-8fabcfbaac03", "sourceURL": "https://helm.sh/docs/topics/permissions_sql_storage_backend", "url": "https://helm.sh/docs/topics/permissions_sql_storage_backend/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: Can you show me some code examples for \"Permissions management for SQL storage backend\"?\n\nAssistant: Here are some code examples:\n\n### Granting privileges to a role in PostgreSQL\n```yaml\nCREATE POLICY <name> ON releases_v1 FOR ALL TO <role> USING (namespace = 'default');\n```\n\n", "metadata": {"source_url": "https://helm.sh/docs/topics/permissions_sql_storage_backend", "title": "Permissions management for SQL storage backend", "description": "This document aims to provide guidance to users for setting up and managing permissions when using the SQL storage backend.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:01:15", "type": "code_examples", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/permissions_sql_storage_backend/", "language": "en", "twitter:description": "Get to know how to setup permissions when using SQL storage backend.", "title": "Helm | Permissions management for SQL storage backend\n", "ogUrl": "https://helm.sh/docs/topics/permissions_sql_storage_backend/", "description": "Get to know how to setup permissions when using SQL storage backend.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Get to know how to setup permissions when using SQL storage backend.", "ogDescription": "Get to know how to setup permissions when using SQL storage backend.", "twitter:card": "summary", "twitter:title": "Helm | Permissions management for SQL storage backend", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Permissions management for SQL storage backend", "og:title": ["Permissions management for SQL storage backend", "Permissions management for SQL storage backend"], "scrapeId": "f0c6c166-5e65-43d1-bdc4-8fabcfbaac03", "sourceURL": "https://helm.sh/docs/topics/permissions_sql_storage_backend", "url": "https://helm.sh/docs/topics/permissions_sql_storage_backend/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What are the best practices for \"Permissions management for SQL storage backend\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the Helm CLI is initialized with admin privileges on the public schema before managing permissions.\n• Use Row Security Level (RLS) to manage permissions granularly based on specific conditions.\n• Regularly review and update permissions to ensure they align with the current access requirements.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/permissions_sql_storage_backend", "title": "Permissions management for SQL storage backend", "description": "This document aims to provide guidance to users for setting up and managing permissions when using the SQL storage backend.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 22:01:15", "type": "best_practices", "page_metadata": {"twitter:image": "https://helm.sh/img/og-image.png", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/permissions_sql_storage_backend/", "language": "en", "twitter:description": "Get to know how to setup permissions when using SQL storage backend.", "title": "Helm | Permissions management for SQL storage backend\n", "ogUrl": "https://helm.sh/docs/topics/permissions_sql_storage_backend/", "description": "Get to know how to setup permissions when using SQL storage backend.", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "og:description": "Get to know how to setup permissions when using SQL storage backend.", "ogDescription": "Get to know how to setup permissions when using SQL storage backend.", "twitter:card": "summary", "twitter:title": "Helm | Permissions management for SQL storage backend", "viewport": "width=device-width,initial-scale=1", "ogTitle": "Permissions management for SQL storage backend", "og:title": ["Permissions management for SQL storage backend", "Permissions management for SQL storage backend"], "scrapeId": "f0c6c166-5e65-43d1-bdc4-8fabcfbaac03", "sourceURL": "https://helm.sh/docs/topics/permissions_sql_storage_backend", "url": "https://helm.sh/docs/topics/permissions_sql_storage_backend/", "statusCode": 200}}}
{"text": "System: You are a helpful Helm expert.\n\nUser: What is \"Release schedule policy\"?\n\nAssistant: This document describes the policy governing Helm's release schedule.\n\nHere's a detailed explanation:\n\n\n## Release calendar\nA public calendar showing the upcoming Helm releases can be found [here](https://helm.sh/calendar/release).\n\n## Semantic versioning\nHelm versions are expressed as `x.y.z`, where `x` is the major version, `y` is the minor version, and `z` is the patch version, following [Semantic Versioning](https://semver.org/spec/v2.0.0.html) terminology.\n\n## Patch releases\nPatch releases provide users with bug fixes and security fixes. They do not contain new features.\n\nA new patch release relating to the latest minor/major release will normally be done once a month on the second Wednesday of each month.\n\nA patch release to fix a high priority regression or security issue can be done whenever needed.\n\nA patch release will be cancelled for any of the following reasons:\n\n- if there is no new content since the previous release\n- if the patch release date falls within one week before the first release candidate (RC1) of an upcoming minor release\n- if the patch release date falls within four weeks following a minor release.\n\n## Minor releases\nMinor releases contain security and bug fixes as well as new features. They are backwards compatible with respect to the API and the CLI usage.\n\nTo align with Kubernetes releases, a minor helm release will be done every 4 months (3 releases a year).\n\nExtra minor releases can be done if needed but will not affect the timeline of an announced future release, unless the announced release is less than 7 days away.\n\nAt the same time as a release is published, the date of the next minor release will be announced and posted to Helm's main web page.\n\n## Major releases\nMajor releases contain breaking changes. Such releases are rare but are sometimes necessary to allow helm to continue to evolve in important new directions.\n\nMajor releases can be difficult to plan. With that in mind, a final release date will only be chosen and announced once the first beta version of such a release is available.\n", "metadata": {"source_url": "https://helm.sh/docs/topics/release_policy", "title": "Release schedule policy", "description": "This document describes the policy governing Helm's release schedule.", "has_code_examples": false, "has_best_practices": false, "section_count": 5, "timestamp": "2025-02-27 22:01:22", "type": "overview", "page_metadata": {"description": "Describes Helm's release schedule policy.", "title": "Helm | Release schedule policy\n", "twitter:title": "Helm | Release schedule policy", "og:description": "Describes Helm's release schedule policy.", "twitter:image": "https://helm.sh/img/og-image.png", "ogUrl": "https://helm.sh/docs/topics/release_policy/", "google-site-verification": "dCa3wS47cErhx0IpaxbB85NfcOP-vFxevknVk6fzf5I", "ogDescription": "Describes Helm's release schedule policy.", "language": "en", "favicon": "https://helm.sh/img/favicon-152.png", "og:url": "https://helm.sh/docs/topics/release_policy/", "ogTitle": "Release schedule policy", "viewport": "width=device-width,initial-scale=1", "twitter:description": "Describes Helm's release schedule policy.", "og:title": ["Release schedule policy", "Release schedule policy"], "twitter:card": "summary", "scrapeId": "f2343a32-c421-4c47-bded-f53a71b61299", "sourceURL": "https://helm.sh/docs/topics/release_policy", "url": "https://helm.sh/docs/topics/release_policy/", "statusCode": 200}}}
