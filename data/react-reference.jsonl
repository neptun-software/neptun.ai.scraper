{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what React Reference Overview is in react-reference?\n\nAssistant: Sure, I'd be happy to explain React Reference Overview in react-reference.\n\n# React Reference Overview\n\nThis section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.Here's a quick rundown of what this is about:\n\n## React\n\nProgrammatic React features:\n\n- [Hooks](https://react.dev/reference/react/hooks) \\- Use different React features from your components.\n- [Components](https://react.dev/reference/react/components) \\- Built-in components that you can use in your JSX.\n- [APIs](https://react.dev/reference/react/apis) \\- APIs that are useful for defining components.\n- [Directives](https://react.dev/reference/rsc/directives) \\- Provide instructions to bundlers compatible with React Server Components.\n\n## React DOM\n\nReact-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:\n\n- [Hooks](https://react.dev/reference/react-dom/hooks) \\- Hooks for web applications which run in the browser DOM environment.\n- [Components](https://react.dev/reference/react-dom/components) \\- React supports all of the browser built-in HTML and SVG components.\n- [APIs](https://react.dev/reference/react-dom) \\- The `react-dom` package contains methods supported only in web applications.\n- [Client APIs](https://react.dev/reference/react-dom/client) \\- The `react-dom/client` APIs let you render React components on the client (in the browser).\n- [Server APIs](https://react.dev/reference/react-dom/server) \\- The `react-dom/server` APIs let you render React components to HTML on the server.\n\n## Rules of React\n\nReact has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:\n\n- [Components and Hooks must be pure](https://react.dev/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.\n- [React calls Components and Hooks](https://react.dev/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.\n- [Rules of Hooks](https://react.dev/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.\n\n## Legacy APIs\n\n- [Legacy APIs](https://react.dev/reference/react/legacy) \\- Exported from the `react` package, but not recommended for use in newly written code.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:55:45", "type": "overview", "page_metadata": {"ogUrl": "https://react.dev/reference/react", "title": "React Reference Overview – React", "ogTitle": "React Reference Overview – React", "og:url": "https://react.dev/reference/react", "twitter:site": "@reactjs", "twitter:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "c7c49462-9914-4dd1-8c96-71211eaf1ff8", "sourceURL": "https://react.dev/reference", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I react in react-reference?\n\nAssistant: To react in react-reference, here's what you do:\nProgrammatic React features:\n\n- [Hooks](https://react.dev/reference/react/hooks) \\- Use different React features from your components.\n- [Components](https://react.dev/reference/react/components) \\- Built-in components that you can use in your JSX.\n- [APIs](https://react.dev/reference/react/apis) \\- APIs that are useful for defining components.\n- [Directives](https://react.dev/reference/rsc/directives) \\- Provide instructions to bundlers compatible with React Server Components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:55:45", "type": "section_detail", "page_metadata": {"ogUrl": "https://react.dev/reference/react", "title": "React Reference Overview – React", "ogTitle": "React Reference Overview – React", "og:url": "https://react.dev/reference/react", "twitter:site": "@reactjs", "twitter:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "c7c49462-9914-4dd1-8c96-71211eaf1ff8", "sourceURL": "https://react.dev/reference", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I react dom in react-reference?\n\nAssistant: To react dom in react-reference, here's what you do:\nReact-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:\n\n- [Hooks](https://react.dev/reference/react-dom/hooks) \\- Hooks for web applications which run in the browser DOM environment.\n- [Components](https://react.dev/reference/react-dom/components) \\- React supports all of the browser built-in HTML and SVG components.\n- [APIs](https://react.dev/reference/react-dom) \\- The `react-dom` package contains methods supported only in web applications.\n- [Client APIs](https://react.dev/reference/react-dom/client) \\- The `react-dom/client` APIs let you render React components on the client (in the browser).\n- [Server APIs](https://react.dev/reference/react-dom/server) \\- The `react-dom/server` APIs let you render React components to HTML on the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:55:45", "type": "section_detail", "page_metadata": {"ogUrl": "https://react.dev/reference/react", "title": "React Reference Overview – React", "ogTitle": "React Reference Overview – React", "og:url": "https://react.dev/reference/react", "twitter:site": "@reactjs", "twitter:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "c7c49462-9914-4dd1-8c96-71211eaf1ff8", "sourceURL": "https://react.dev/reference", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I rules of react in react-reference?\n\nAssistant: To rules of react in react-reference, here's what you do:\nReact has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:\n\n- [Components and Hooks must be pure](https://react.dev/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.\n- [React calls Components and Hooks](https://react.dev/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.\n- [Rules of Hooks](https://react.dev/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:55:45", "type": "section_detail", "page_metadata": {"ogUrl": "https://react.dev/reference/react", "title": "React Reference Overview – React", "ogTitle": "React Reference Overview – React", "og:url": "https://react.dev/reference/react", "twitter:site": "@reactjs", "twitter:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "c7c49462-9914-4dd1-8c96-71211eaf1ff8", "sourceURL": "https://react.dev/reference", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I legacy apis in react-reference?\n\nAssistant: To legacy apis in react-reference, here's what you do:\n- [Legacy APIs](https://react.dev/reference/react/legacy) \\- Exported from the `react` package, but not recommended for use in newly written code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:55:45", "type": "section_detail", "page_metadata": {"ogUrl": "https://react.dev/reference/react", "title": "React Reference Overview – React", "ogTitle": "React Reference Overview – React", "og:url": "https://react.dev/reference/react", "twitter:site": "@reactjs", "twitter:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "c7c49462-9914-4dd1-8c96-71211eaf1ff8", "sourceURL": "https://react.dev/reference", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what React Reference Overview is in react-reference?\n\nAssistant: Sure, I'd be happy to explain React Reference Overview in react-reference.\n\n# React Reference Overview\n\nThis section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.Here's a quick rundown of what this is about:\n\n## React\n\nProgrammatic React features:\n\n- [Hooks](https://react.dev/reference/react/hooks) \\- Use different React features from your components.\n- [Components](https://react.dev/reference/react/components) \\- Built-in components that you can use in your JSX.\n- [APIs](https://react.dev/reference/react/apis) \\- APIs that are useful for defining components.\n- [Directives](https://react.dev/reference/rsc/directives) \\- Provide instructions to bundlers compatible with React Server Components.\n\n## React DOM\n\nReact-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:\n\n- [Hooks](https://react.dev/reference/react-dom/hooks) \\- Hooks for web applications which run in the browser DOM environment.\n- [Components](https://react.dev/reference/react-dom/components) \\- React supports all of the browser built-in HTML and SVG components.\n- [APIs](https://react.dev/reference/react-dom) \\- The `react-dom` package contains methods supported only in web applications.\n- [Client APIs](https://react.dev/reference/react-dom/client) \\- The `react-dom/client` APIs let you render React components on the client (in the browser).\n- [Server APIs](https://react.dev/reference/react-dom/server) \\- The `react-dom/server` APIs let you render React components to HTML on the server.\n\n## Rules of React\n\nReact has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:\n\n- [Components and Hooks must be pure](https://react.dev/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.\n- [React calls Components and Hooks](https://react.dev/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.\n- [Rules of Hooks](https://react.dev/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.\n\n## Legacy APIs\n\n- [Legacy APIs](https://react.dev/reference/react/legacy) \\- Exported from the `react` package, but not recommended for use in newly written code.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:56:21", "type": "overview", "page_metadata": {"theme-color": "#23272f", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "React Reference Overview – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogTitle": "React Reference Overview – React", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://react.dev/reference/react", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react", "title": "React Reference Overview – React", "scrapeId": "98915984-c5a1-4a65-ac71-1fca68dc81c9", "sourceURL": "https://react.dev/reference/react", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I react in react-reference?\n\nAssistant: To react in react-reference, here's what you do:\nProgrammatic React features:\n\n- [Hooks](https://react.dev/reference/react/hooks) \\- Use different React features from your components.\n- [Components](https://react.dev/reference/react/components) \\- Built-in components that you can use in your JSX.\n- [APIs](https://react.dev/reference/react/apis) \\- APIs that are useful for defining components.\n- [Directives](https://react.dev/reference/rsc/directives) \\- Provide instructions to bundlers compatible with React Server Components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:56:21", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "React Reference Overview – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogTitle": "React Reference Overview – React", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://react.dev/reference/react", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react", "title": "React Reference Overview – React", "scrapeId": "98915984-c5a1-4a65-ac71-1fca68dc81c9", "sourceURL": "https://react.dev/reference/react", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I react dom in react-reference?\n\nAssistant: To react dom in react-reference, here's what you do:\nReact-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:\n\n- [Hooks](https://react.dev/reference/react-dom/hooks) \\- Hooks for web applications which run in the browser DOM environment.\n- [Components](https://react.dev/reference/react-dom/components) \\- React supports all of the browser built-in HTML and SVG components.\n- [APIs](https://react.dev/reference/react-dom) \\- The `react-dom` package contains methods supported only in web applications.\n- [Client APIs](https://react.dev/reference/react-dom/client) \\- The `react-dom/client` APIs let you render React components on the client (in the browser).\n- [Server APIs](https://react.dev/reference/react-dom/server) \\- The `react-dom/server` APIs let you render React components to HTML on the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:56:21", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "React Reference Overview – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogTitle": "React Reference Overview – React", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://react.dev/reference/react", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react", "title": "React Reference Overview – React", "scrapeId": "98915984-c5a1-4a65-ac71-1fca68dc81c9", "sourceURL": "https://react.dev/reference/react", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I rules of react in react-reference?\n\nAssistant: To rules of react in react-reference, here's what you do:\nReact has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:\n\n- [Components and Hooks must be pure](https://react.dev/reference/rules/components-and-hooks-must-be-pure) – Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.\n- [React calls Components and Hooks](https://react.dev/reference/rules/react-calls-components-and-hooks) – React is responsible for rendering components and hooks when necessary to optimize the user experience.\n- [Rules of Hooks](https://react.dev/reference/rules/rules-of-hooks) – Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:56:21", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "React Reference Overview – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogTitle": "React Reference Overview – React", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://react.dev/reference/react", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react", "title": "React Reference Overview – React", "scrapeId": "98915984-c5a1-4a65-ac71-1fca68dc81c9", "sourceURL": "https://react.dev/reference/react", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I legacy apis in react-reference?\n\nAssistant: To legacy apis in react-reference, here's what you do:\n- [Legacy APIs](https://react.dev/reference/react/legacy) \\- Exported from the `react` package, but not recommended for use in newly written code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react", "title": "React Reference Overview", "description": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit the Learn section.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 00:56:21", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "React Reference Overview – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "React Reference Overview – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogTitle": "React Reference Overview – React", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://react.dev/reference/react", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react", "title": "React Reference Overview – React", "scrapeId": "98915984-c5a1-4a65-ac71-1fca68dc81c9", "sourceURL": "https://react.dev/reference/react", "url": "https://react.dev/reference/react", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Rules of React is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Rules of React in react-reference.\n\n# Rules of React\n\nThis page describes the rules you need to follow to write idiomatic React code, which helps in creating well-organized, safe, and composable applications.Here's a quick rundown of what this is about:\n\n## Components and Hooks must be pure\n\nPurity in Components and Hooks is a key rule of React that makes your app predictable, easy to debug, and allows React to automatically optimize your code.\n\n- Components must be idempotent – React components are assumed to always return the same output with respect to their inputs – props, state, and context.\n- Side effects must run outside of render – Side effects should not run in render, as React can render components multiple times to create the best possible user experience.\n- Props and state are immutable – A component’s props and state are immutable snapshots with respect to a single render. Never mutate them directly.\n- Return values and arguments to Hooks are immutable – Once values are passed to a Hook, you should not modify them. Like props in JSX, values become immutable when passed to a Hook.\n- Values are immutable after being passed to JSX – Don’t mutate values after they’ve been used in JSX. Move the mutation before the JSX is created.\n\n## React calls Components and Hooks\n\nReact is responsible for rendering components and hooks when necessary to optimize the user experience. It is declarative: you tell React what to render in your component’s logic, and React will figure out how best to display it to your user.\n\n- Never call component functions directly – Components should only be used in JSX. Don’t call them as regular functions.\n- Never pass around hooks as regular values – Hooks should only be called inside of components. Never pass it around as a regular value.\n\n## Rules of Hooks\n\nHooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called. You need to follow the Rules of Hooks when using them.\n\n- Only call Hooks at the top level – Don’t call Hooks inside loops, conditions, or nested functions. Instead, always use Hooks at the top level of your React function, before any early returns.\n- Only call Hooks from React functions – Don’t call Hooks from regular JavaScript functions.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/rules", "title": "Rules of React", "description": "This page describes the rules you need to follow to write idiomatic React code, which helps in creating well-organized, safe, and composable applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:56:36", "type": "overview", "page_metadata": {"title": "Rules of React – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Rules of React – React", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogTitle": "Rules of React – React", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/rules", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/rules", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Rules of React – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "scrapeId": "6314392d-9aeb-40ba-9628-80f302888196", "sourceURL": "https://react.dev/reference/rules", "url": "https://react.dev/reference/rules", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I components and hooks must be pure in react-reference?\n\nAssistant: To components and hooks must be pure in react-reference, here's what you do:\nPurity in Components and Hooks is a key rule of React that makes your app predictable, easy to debug, and allows React to automatically optimize your code.\n\n- Components must be idempotent – React components are assumed to always return the same output with respect to their inputs – props, state, and context.\n- Side effects must run outside of render – Side effects should not run in render, as React can render components multiple times to create the best possible user experience.\n- Props and state are immutable – A component’s props and state are immutable snapshots with respect to a single render. Never mutate them directly.\n- Return values and arguments to Hooks are immutable – Once values are passed to a Hook, you should not modify them. Like props in JSX, values become immutable when passed to a Hook.\n- Values are immutable after being passed to JSX – Don’t mutate values after they’ve been used in JSX. Move the mutation before the JSX is created..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rules", "title": "Rules of React", "description": "This page describes the rules you need to follow to write idiomatic React code, which helps in creating well-organized, safe, and composable applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:56:36", "type": "section_detail", "page_metadata": {"title": "Rules of React – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Rules of React – React", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogTitle": "Rules of React – React", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/rules", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/rules", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Rules of React – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "scrapeId": "6314392d-9aeb-40ba-9628-80f302888196", "sourceURL": "https://react.dev/reference/rules", "url": "https://react.dev/reference/rules", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I react calls components and hooks in react-reference?\n\nAssistant: To react calls components and hooks in react-reference, here's what you do:\nReact is responsible for rendering components and hooks when necessary to optimize the user experience. It is declarative: you tell React what to render in your component’s logic, and React will figure out how best to display it to your user.\n\n- Never call component functions directly – Components should only be used in JSX. Don’t call them as regular functions.\n- Never pass around hooks as regular values – Hooks should only be called inside of components. Never pass it around as a regular value..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rules", "title": "Rules of React", "description": "This page describes the rules you need to follow to write idiomatic React code, which helps in creating well-organized, safe, and composable applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:56:36", "type": "section_detail", "page_metadata": {"title": "Rules of React – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Rules of React – React", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogTitle": "Rules of React – React", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/rules", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/rules", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Rules of React – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "scrapeId": "6314392d-9aeb-40ba-9628-80f302888196", "sourceURL": "https://react.dev/reference/rules", "url": "https://react.dev/reference/rules", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I rules of hooks in react-reference?\n\nAssistant: To rules of hooks in react-reference, here's what you do:\nHooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called. You need to follow the Rules of Hooks when using them.\n\n- Only call Hooks at the top level – Don’t call Hooks inside loops, conditions, or nested functions. Instead, always use Hooks at the top level of your React function, before any early returns.\n- Only call Hooks from React functions – Don’t call Hooks from regular JavaScript functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rules", "title": "Rules of React", "description": "This page describes the rules you need to follow to write idiomatic React code, which helps in creating well-organized, safe, and composable applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:56:36", "type": "section_detail", "page_metadata": {"title": "Rules of React – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Rules of React – React", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogTitle": "Rules of React – React", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/rules", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/rules", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Rules of React – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "scrapeId": "6314392d-9aeb-40ba-9628-80f302888196", "sourceURL": "https://react.dev/reference/rules", "url": "https://react.dev/reference/rules", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Rules of React in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse Strict Mode alongside React’s ESLint plugin to help your codebase follow the Rules of React.\n\nFollowing the Rules of React helps in finding and addressing bugs and keeping your application maintainable.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/rules", "title": "Rules of React", "description": "This page describes the rules you need to follow to write idiomatic React code, which helps in creating well-organized, safe, and composable applications.", "has_code_examples": false, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:56:36", "type": "best_practices", "page_metadata": {"title": "Rules of React – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Rules of React – React", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogTitle": "Rules of React – React", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/rules", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/rules", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Rules of React – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "scrapeId": "6314392d-9aeb-40ba-9628-80f302888196", "sourceURL": "https://react.dev/reference/rules", "url": "https://react.dev/reference/rules", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useId is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useId in react-reference.\n\n# useId\n\n`useId` is a React Hook for generating unique IDs that can be passed to accessibility attributes.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useId()`\n\nCall `useId` at the top level of your component to generate a unique ID:\n\n```sp-pre-placeholder grow-[2]\nimport { useId } from 'react';\n\nfunction PasswordField() {\n\n  const passwordHintId = useId();\n\n  // ...\n```\n\n#### Parameters\n\n`useId` does not take any parameters.\n\n#### Returns\n\n`useId` returns a unique ID string associated with this particular `useId` call in this particular component.\n\n#### Caveats\n\n- `useId` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n\n- `useId` **should not be used to generate keys** in a list. [Keys should be generated from your data.](https://react.dev/learn/rendering-lists#where-to-get-your-key)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useId", "title": "useId", "description": "`useId` is a React Hook for generating unique IDs that can be passed to accessibility attributes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:56:49", "type": "overview", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "useId – React", "ogUrl": "https://react.dev/reference/react/useId", "title": "useId – React", "og:url": "https://react.dev/reference/react/useId", "twitter:card": "summary_large_image", "twitter:title": "useId – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "ogTitle": "useId – React", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "scrapeId": "b8bb08a5-ea12-45d7-9829-8c4be0659159", "sourceURL": "https://react.dev/reference/react/useId", "url": "https://react.dev/reference/react/useId", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useId()`\n\nCall `useId` at the top level of your component to generate a unique ID:\n\n```sp-pre-placeholder grow-[2]\nimport { useId } from 'react';\n\nfunction PasswordField() {\n\n  const passwordHintId = useId();\n\n  // ...\n```\n\n#### Parameters\n\n`useId` does not take any parameters.\n\n#### Returns\n\n`useId` returns a unique ID string associated with this particular `useId` call in this particular component.\n\n#### Caveats\n\n- `useId` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n\n- `useId` **should not be used to generate keys** in a list. [Keys should be generated from your data.](https://react.dev/learn/rendering-lists#where-to-get-your-key).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useId", "title": "useId", "description": "`useId` is a React Hook for generating unique IDs that can be passed to accessibility attributes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:56:49", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "useId – React", "ogUrl": "https://react.dev/reference/react/useId", "title": "useId – React", "og:url": "https://react.dev/reference/react/useId", "twitter:card": "summary_large_image", "twitter:title": "useId – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "ogTitle": "useId – React", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "scrapeId": "b8bb08a5-ea12-45d7-9829-8c4be0659159", "sourceURL": "https://react.dev/reference/react/useId", "url": "https://react.dev/reference/react/useId", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useId in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useId Example**:\n\n```yaml\nconst id = useId()\n```\n\nThis snippet shows you how to basic useid example, which is an important aspect of useid.\n\n**PasswordField Component Example**:\n\n```yaml\nimport { useId } from 'react';\n\nfunction PasswordField() {\n  const passwordHintId = useId();\n  return (\n    <>\n      <label>\n        Password:\n        <input type=\"password\" aria-describedby={passwordHintId} />\n      </label>\n      <p id={passwordHintId}>\n        The password should contain at least 18 characters\n      </p>\n    </>\n  );\n}\n```\n\nThis snippet shows you how to passwordfield component example, which is an important aspect of useid.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useId", "title": "useId", "description": "`useId` is a React Hook for generating unique IDs that can be passed to accessibility attributes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:56:49", "type": "code_examples", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "useId – React", "ogUrl": "https://react.dev/reference/react/useId", "title": "useId – React", "og:url": "https://react.dev/reference/react/useId", "twitter:card": "summary_large_image", "twitter:title": "useId – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "ogTitle": "useId – React", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "scrapeId": "b8bb08a5-ea12-45d7-9829-8c4be0659159", "sourceURL": "https://react.dev/reference/react/useId", "url": "https://react.dev/reference/react/useId", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useId in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not call `useId` to generate keys in a list. Keys should be generated from your data.\n\nEnsure that the `identifierPrefix` you pass to the `hydrateRoot` call on the client side is the same as the `identifierPrefix` you pass to the server APIs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useId", "title": "useId", "description": "`useId` is a React Hook for generating unique IDs that can be passed to accessibility attributes.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:56:49", "type": "best_practices", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "useId – React", "ogUrl": "https://react.dev/reference/react/useId", "title": "useId – React", "og:url": "https://react.dev/reference/react/useId", "twitter:card": "summary_large_image", "twitter:title": "useId – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "ogTitle": "useId – React", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "scrapeId": "b8bb08a5-ea12-45d7-9829-8c4be0659159", "sourceURL": "https://react.dev/reference/react/useId", "url": "https://react.dev/reference/react/useId", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what createFactory is in react-reference?\n\nAssistant: Sure, I'd be happy to explain createFactory in react-reference.\n\n# createFactory\n\nThis API lets you create a function that produces React elements of a given type, but it is deprecated and will be removed in a future major version of React.Here's a quick rundown of what this is about:\n\n## Deprecated\n\nThis API will be removed in a future major version of React. [See the alternatives.](https://18.react.dev/reference/react/createFactory#alternatives)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/createFactory", "title": "createFactory", "description": "This API lets you create a function that produces React elements of a given type, but it is deprecated and will be removed in a future major version of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:56:55", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://18.react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:url": "https://react.dev/reference/react/createFactory", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "title": "createFactory – React", "ogUrl": "https://react.dev/reference/react/createFactory", "og:type": "website", "next-head-count": "35", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:title": "createFactory – React", "twitter:site": "@reactjs", "language": "en", "twitter:creator": "@reactjs", "ogTitle": "createFactory – React", "twitter:title": "createFactory – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "scrapeId": "9535f837-3ed4-4145-a48b-97ee6ee9972f", "sourceURL": "https://react.dev/reference/react/createFactory", "url": "https://18.react.dev/reference/react/createFactory", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deprecated in react-reference?\n\nAssistant: To deprecated in react-reference, here's what you do:\nThis API will be removed in a future major version of React. [See the alternatives.](https://18.react.dev/reference/react/createFactory#alternatives).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createFactory", "title": "createFactory", "description": "This API lets you create a function that produces React elements of a given type, but it is deprecated and will be removed in a future major version of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:56:55", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://18.react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:url": "https://react.dev/reference/react/createFactory", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "title": "createFactory – React", "ogUrl": "https://react.dev/reference/react/createFactory", "og:type": "website", "next-head-count": "35", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:title": "createFactory – React", "twitter:site": "@reactjs", "language": "en", "twitter:creator": "@reactjs", "ogTitle": "createFactory – React", "twitter:title": "createFactory – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "scrapeId": "9535f837-3ed4-4145-a48b-97ee6ee9972f", "sourceURL": "https://react.dev/reference/react/createFactory", "url": "https://18.react.dev/reference/react/createFactory", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for createFactory in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a factory function**:\n\n```yaml\nconst factory = createFactory(type)\n```\n\nThis snippet shows you how to creating a factory function, which is an important aspect of createfactory.\n\n**Using createFactory to create a button**:\n\n```yaml\nimport { createFactory } from 'react';\n\nconst button = createFactory('button');\n\nexport default function App() {\n  return button({\n    onClick: () => {\n      alert('Clicked!')\n    }\n  }, 'Click me');\n}\n```\n\nThis snippet shows you how to using createfactory to create a button, which is an important aspect of createfactory.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/createFactory", "title": "createFactory", "description": "This API lets you create a function that produces React elements of a given type, but it is deprecated and will be removed in a future major version of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:56:55", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://18.react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:url": "https://react.dev/reference/react/createFactory", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "title": "createFactory – React", "ogUrl": "https://react.dev/reference/react/createFactory", "og:type": "website", "next-head-count": "35", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:title": "createFactory – React", "twitter:site": "@reactjs", "language": "en", "twitter:creator": "@reactjs", "ogTitle": "createFactory – React", "twitter:title": "createFactory – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "scrapeId": "9535f837-3ed4-4145-a48b-97ee6ee9972f", "sourceURL": "https://react.dev/reference/react/createFactory", "url": "https://18.react.dev/reference/react/createFactory", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using createFactory in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf your project has many createFactory calls, copy the createFactory.js implementation into your project to keep your code unchanged except the imports.\n\nIf you have a few createFactory calls that you don’t mind porting manually, replace every call with a createElement call.\n\nYou can use JSX instead of createFactory, which is the most common way to use React.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/createFactory", "title": "createFactory", "description": "This API lets you create a function that produces React elements of a given type, but it is deprecated and will be removed in a future major version of React.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:56:55", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "favicon": "https://18.react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:url": "https://react.dev/reference/react/createFactory", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogDescription": "The library for web and native user interfaces", "title": "createFactory – React", "ogUrl": "https://react.dev/reference/react/createFactory", "og:type": "website", "next-head-count": "35", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:title": "createFactory – React", "twitter:site": "@reactjs", "language": "en", "twitter:creator": "@reactjs", "ogTitle": "createFactory – React", "twitter:title": "createFactory – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "scrapeId": "9535f837-3ed4-4145-a48b-97ee6ee9972f", "sourceURL": "https://react.dev/reference/react/createFactory", "url": "https://18.react.dev/reference/react/createFactory", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useCallback is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useCallback in react-reference.\n\n# useCallback\n\n`useCallback` is a React Hook that lets you cache a function definition between re-renders.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useCallback(fn, dependencies)`\n\nCall `useCallback` at the top level of your component to cache a function definition between re-renders:\n\n```sp-pre-placeholder grow-[2]\nimport { useCallback } from 'react';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n\n  }, [productId, referrer]);\n}\n```\n\n#### Parameters\n- `fn`: The function value that you want to cache. It can take any arguments and return any values. React will return (not call!) your function back to you during the initial render. On next renders, React will give you the same function again if the `dependencies` have not changed since the last render. Otherwise, it will give you the function that you have passed during the current render, and store it in case it can be reused later. React will not call your function. The function is returned to you so you can decide when and whether to call it.\n\n- `dependencies`: The list of all reactive values referenced inside of the `fn` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](https://react.dev/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm.\n\n#### Returns\nOn the initial render, `useCallback` returns the `fn` function you have passed.\n\nDuring subsequent renders, it will either return an already stored `fn` function from the last render (if the dependencies haven’t changed), or return the `fn` function you have passed during this render.\n\n#### Caveats\n- `useCallback` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- React **will not throw away the cached function unless there is a specific reason to do that.** For example, in development, React throws away the cache when you edit the file of your component. Both in development and in production, React will throw away the cache if your component suspends during the initial mount. In the future, React may add more features that take advantage of throwing away the cache—for example, if React adds built-in support for virtualized lists in the future, it would make sense to throw away the cache for items that scroll out of the virtualized table viewport. This should match your expectations if you rely on `useCallback` as a performance optimization. Otherwise, a [state variable](https://react.dev/reference/react/useState#im-trying-to-set-state-to-a-function-but-it-gets-called-instead) or a [ref](https://react.dev/reference/react/useRef#avoiding-recreating-the-ref-contents) may be more appropriate.\n\n## Usage\n\n### Skipping re-rendering of components\nWhen you optimize rendering performance, you will sometimes need to cache the functions that you pass to child components. Let’s first look at the syntax for how to do this, and then see in which cases it’s useful.\n\nTo cache a function between re-renders of your component, wrap its definition into the `useCallback` Hook:\n\n```sp-pre-placeholder grow-[2]\nimport { useCallback } from 'react';\n\nfunction ProductPage({ productId, referrer, theme }) {\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n\n  }, [productId, referrer]);\n\n  // ...\n}\n```\n\nYou need to pass two things to `useCallback`:\n1. A function definition that you want to cache between re-renders.\n2. A list of dependencies including every value within your component that’s used inside your function.\n\nOn the initial render, the returned function you’ll get from `useCallback` will be the function you passed.\n\nOn the following renders, React will compare the dependencies with the dependencies you passed during the previous render. If none of the dependencies have changed (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), `useCallback` will return the same function as before. Otherwise, `useCallback` will return the function you passed on _this_ render.\n\nIn other words, `useCallback` caches a function between re-renders until its dependencies change.\n\n**Let’s walk through an example to see when this is useful.**\nSay you’re passing a `handleSubmit` function down from the `ProductPage` to the `ShippingForm` component:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer, theme }) {\n\n  // ...\n\n  return (\n\n    <div className={theme}>\n\n      <ShippingForm onSubmit={handleSubmit} />\n\n    </div>\n\n  );\n}\n```\n\nYou’ve noticed that toggling the `theme` prop freezes the app for a moment, but if you remove `<ShippingForm />` from your JSX, it feels fast. This tells you that it’s worth trying to optimize the `ShippingForm` component.\n\n**By default, when a component re-renders, React re-renders all of its children recursively.** This is why, when `ProductPage` re-renders with a different `theme`, the `ShippingForm` component _also_ re-renders. This is fine for components that don’t require much calculation to re-render. But if you verified a re-render is slow, you can tell `ShippingForm` to skip re-rendering when its props are the same as on last render by wrapping it in [`memo`:](https://react.dev/reference/react/memo)\n\n```sp-pre-placeholder grow-[2]\nimport { memo } from 'react';\n\nconst ShippingForm = memo(function ShippingForm({ onSubmit }) {\n\n  // ...\n});\n```\n\n**With this change, `ShippingForm` will skip re-rendering if all of its props are the _same_ as on the last render.** This is when caching a function becomes important! Let’s say you defined `handleSubmit` without `useCallback`:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer, theme }) {\n\n  // Every time the theme changes, this will be a different function...\n\n  function handleSubmit(orderDetails) {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n  }\n\n  return (\n\n    <div className={theme}>\n\n      {/* ... so ShippingForm's props will never be the same, and it will re-render every time */}\n\n      <ShippingForm onSubmit={handleSubmit} />\n\n    </div>\n\n  );\n}\n```\n\n**In JavaScript, a `function () {}` or `() => {}` always creates a _different_ function,** similar to how the `{}` object literal always creates a new object. Normally, this wouldn’t be a problem, but it means that `ShippingForm` props will never be the same, and your [`memo`](https://react.dev/reference/react/memo) optimization won’t work. This is where `useCallback` comes in handy:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer, theme }) {\n\n  // Tell React to cache your function between re-renders...\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n\n  }, [productId, referrer]); // ...so as long as these dependencies don't change...\n\n  return (\n\n    <div className={theme}>\n\n      {/* ...ShippingForm will receive the same props and can skip re-rendering */}\n\n      <ShippingForm onSubmit={handleSubmit} />\n\n    </div>\n\n  );\n}\n```\n\n**By wrapping `handleSubmit` in `useCallback`, you ensure that it’s the _same_ function between the re-renders** (until dependencies change). You don’t _have to_ wrap a function in `useCallback` unless you do it for some specific reason. In this example, the reason is that you pass it to a component wrapped in [`memo`,](https://react.dev/reference/react/memo) and this lets it skip re-rendering. There are other reasons you might need `useCallback` which are described further on this page.\n\n## Troubleshooting\n\n### Every time my component renders, `useCallback` returns a different function\nMake sure you’ve specified the dependency array as a second argument!\n\nIf you forget the dependency array, `useCallback` will return a new function every time:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer }) {\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n  }); // 🔴 Returns a new function every time: no dependency array\n}\n```\n\nThis is the corrected version passing the dependency array as a second argument:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer }) {\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n  }, [productId, referrer]); // ✅ Does not return a new function unnecessarily\n}\n```\n\nIf this doesn’t help, then the problem is that at least one of your dependencies is different from the previous render. You can debug this problem by manually logging your dependencies to the console:\n\n```sp-pre-placeholder grow-[2]\n  const handleSubmit = useCallback((orderDetails) => {\n\n    // ..\n  }, [productId, referrer]);\n\n  console.log([productId, referrer]);\n```\n\nYou can then right-click on the arrays from different re-renders in the console and select “Store as a global variable” for both of them. Assuming the first one got saved as `temp1` and the second one got saved as `temp2`, you can then use the browser console to check whether each dependency in both arrays is the same:\n\n```sp-pre-placeholder grow-[2]\nObject.is(temp1[0], temp2[0]); // Is the first dependency the same between the arrays?\nObject.is(temp1[1], temp2[1]); // Is the second dependency the same between the arrays?\nObject.is(temp1[2], temp2[2]); // ... and so on for every dependency ...\n```\n\nWhen you find which dependency is breaking memoization, either find a way to remove it, or [memoize it as well.](https://react.dev/reference/react/useMemo#memoizing-a-dependency-of-another-hook)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useCallback", "title": "useCallback", "description": "`useCallback` is a React Hook that lets you cache a function definition between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:40", "type": "overview", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "og:type": "website", "title": "useCallback – React", "twitter:creator": "@reactjs", "ogTitle": "useCallback – React", "og:title": "useCallback – React", "twitter:title": "useCallback – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useCallback", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/useCallback", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "687d7a60-1ec6-44b6-a996-5099cc2a5e5a", "sourceURL": "https://react.dev/reference/react/useCallback", "url": "https://react.dev/reference/react/useCallback", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useCallback(fn, dependencies)`\n\nCall `useCallback` at the top level of your component to cache a function definition between re-renders:\n\n```sp-pre-placeholder grow-[2]\nimport { useCallback } from 'react';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n\n  }, [productId, referrer]);\n}\n```\n\n#### Parameters\n- `fn`: The function value that you want to cache. It can take any arguments and return any values. React will return (not call!) your function back to you during the initial render. On next renders, React will give you the same function again if the `dependencies` have not changed since the last render. Otherwise, it will give you the function that you have passed during the current render, and store it in case it can be reused later. React will not call your function. The function is returned to you so you can decide when and whether to call it.\n\n- `dependencies`: The list of all reactive values referenced inside of the `fn` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](https://react.dev/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm.\n\n#### Returns\nOn the initial render, `useCallback` returns the `fn` function you have passed.\n\nDuring subsequent renders, it will either return an already stored `fn` function from the last render (if the dependencies haven’t changed), or return the `fn` function you have passed during this render.\n\n#### Caveats\n- `useCallback` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- React **will not throw away the cached function unless there is a specific reason to do that.** For example, in development, React throws away the cache when you edit the file of your component. Both in development and in production, React will throw away the cache if your component suspends during the initial mount. In the future, React may add more features that take advantage of throwing away the cache—for example, if React adds built-in support for virtualized lists in the future, it would make sense to throw away the cache for items that scroll out of the virtualized table viewport. This should match your expectations if you rely on `useCallback` as a performance optimization. Otherwise, a [state variable](https://react.dev/reference/react/useState#im-trying-to-set-state-to-a-function-but-it-gets-called-instead) or a [ref](https://react.dev/reference/react/useRef#avoiding-recreating-the-ref-contents) may be more appropriate..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useCallback", "title": "useCallback", "description": "`useCallback` is a React Hook that lets you cache a function definition between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:40", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "og:type": "website", "title": "useCallback – React", "twitter:creator": "@reactjs", "ogTitle": "useCallback – React", "og:title": "useCallback – React", "twitter:title": "useCallback – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useCallback", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/useCallback", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "687d7a60-1ec6-44b6-a996-5099cc2a5e5a", "sourceURL": "https://react.dev/reference/react/useCallback", "url": "https://react.dev/reference/react/useCallback", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Skipping re-rendering of components\nWhen you optimize rendering performance, you will sometimes need to cache the functions that you pass to child components. Let’s first look at the syntax for how to do this, and then see in which cases it’s useful.\n\nTo cache a function between re-renders of your component, wrap its definition into the `useCallback` Hook:\n\n```sp-pre-placeholder grow-[2]\nimport { useCallback } from 'react';\n\nfunction ProductPage({ productId, referrer, theme }) {\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n\n  }, [productId, referrer]);\n\n  // ...\n}\n```\n\nYou need to pass two things to `useCallback`:\n1. A function definition that you want to cache between re-renders.\n2. A list of dependencies including every value within your component that’s used inside your function.\n\nOn the initial render, the returned function you’ll get from `useCallback` will be the function you passed.\n\nOn the following renders, React will compare the dependencies with the dependencies you passed during the previous render. If none of the dependencies have changed (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), `useCallback` will return the same function as before. Otherwise, `useCallback` will return the function you passed on _this_ render.\n\nIn other words, `useCallback` caches a function between re-renders until its dependencies change.\n\n**Let’s walk through an example to see when this is useful.**\nSay you’re passing a `handleSubmit` function down from the `ProductPage` to the `ShippingForm` component:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer, theme }) {\n\n  // ...\n\n  return (\n\n    <div className={theme}>\n\n      <ShippingForm onSubmit={handleSubmit} />\n\n    </div>\n\n  );\n}\n```\n\nYou’ve noticed that toggling the `theme` prop freezes the app for a moment, but if you remove `<ShippingForm />` from your JSX, it feels fast. This tells you that it’s worth trying to optimize the `ShippingForm` component.\n\n**By default, when a component re-renders, React re-renders all of its children recursively.** This is why, when `ProductPage` re-renders with a different `theme`, the `ShippingForm` component _also_ re-renders. This is fine for components that don’t require much calculation to re-render. But if you verified a re-render is slow, you can tell `ShippingForm` to skip re-rendering when its props are the same as on last render by wrapping it in [`memo`:](https://react.dev/reference/react/memo)\n\n```sp-pre-placeholder grow-[2]\nimport { memo } from 'react';\n\nconst ShippingForm = memo(function ShippingForm({ onSubmit }) {\n\n  // ...\n});\n```\n\n**With this change, `ShippingForm` will skip re-rendering if all of its props are the _same_ as on the last render.** This is when caching a function becomes important! Let’s say you defined `handleSubmit` without `useCallback`:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer, theme }) {\n\n  // Every time the theme changes, this will be a different function...\n\n  function handleSubmit(orderDetails) {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n  }\n\n  return (\n\n    <div className={theme}>\n\n      {/* ... so ShippingForm's props will never be the same, and it will re-render every time */}\n\n      <ShippingForm onSubmit={handleSubmit} />\n\n    </div>\n\n  );\n}\n```\n\n**In JavaScript, a `function () {}` or `() => {}` always creates a _different_ function,** similar to how the `{}` object literal always creates a new object. Normally, this wouldn’t be a problem, but it means that `ShippingForm` props will never be the same, and your [`memo`](https://react.dev/reference/react/memo) optimization won’t work. This is where `useCallback` comes in handy:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer, theme }) {\n\n  // Tell React to cache your function between re-renders...\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n\n  }, [productId, referrer]); // ...so as long as these dependencies don't change...\n\n  return (\n\n    <div className={theme}>\n\n      {/* ...ShippingForm will receive the same props and can skip re-rendering */}\n\n      <ShippingForm onSubmit={handleSubmit} />\n\n    </div>\n\n  );\n}\n```\n\n**By wrapping `handleSubmit` in `useCallback`, you ensure that it’s the _same_ function between the re-renders** (until dependencies change). You don’t _have to_ wrap a function in `useCallback` unless you do it for some specific reason. In this example, the reason is that you pass it to a component wrapped in [`memo`,](https://react.dev/reference/react/memo) and this lets it skip re-rendering. There are other reasons you might need `useCallback` which are described further on this page..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useCallback", "title": "useCallback", "description": "`useCallback` is a React Hook that lets you cache a function definition between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:40", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "og:type": "website", "title": "useCallback – React", "twitter:creator": "@reactjs", "ogTitle": "useCallback – React", "og:title": "useCallback – React", "twitter:title": "useCallback – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useCallback", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/useCallback", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "687d7a60-1ec6-44b6-a996-5099cc2a5e5a", "sourceURL": "https://react.dev/reference/react/useCallback", "url": "https://react.dev/reference/react/useCallback", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### Every time my component renders, `useCallback` returns a different function\nMake sure you’ve specified the dependency array as a second argument!\n\nIf you forget the dependency array, `useCallback` will return a new function every time:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer }) {\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n  }); // 🔴 Returns a new function every time: no dependency array\n}\n```\n\nThis is the corrected version passing the dependency array as a second argument:\n\n```sp-pre-placeholder grow-[2]\nfunction ProductPage({ productId, referrer }) {\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n  }, [productId, referrer]); // ✅ Does not return a new function unnecessarily\n}\n```\n\nIf this doesn’t help, then the problem is that at least one of your dependencies is different from the previous render. You can debug this problem by manually logging your dependencies to the console:\n\n```sp-pre-placeholder grow-[2]\n  const handleSubmit = useCallback((orderDetails) => {\n\n    // ..\n  }, [productId, referrer]);\n\n  console.log([productId, referrer]);\n```\n\nYou can then right-click on the arrays from different re-renders in the console and select “Store as a global variable” for both of them. Assuming the first one got saved as `temp1` and the second one got saved as `temp2`, you can then use the browser console to check whether each dependency in both arrays is the same:\n\n```sp-pre-placeholder grow-[2]\nObject.is(temp1[0], temp2[0]); // Is the first dependency the same between the arrays?\nObject.is(temp1[1], temp2[1]); // Is the second dependency the same between the arrays?\nObject.is(temp1[2], temp2[2]); // ... and so on for every dependency ...\n```\n\nWhen you find which dependency is breaking memoization, either find a way to remove it, or [memoize it as well.](https://react.dev/reference/react/useMemo#memoizing-a-dependency-of-another-hook).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useCallback", "title": "useCallback", "description": "`useCallback` is a React Hook that lets you cache a function definition between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:40", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "og:type": "website", "title": "useCallback – React", "twitter:creator": "@reactjs", "ogTitle": "useCallback – React", "og:title": "useCallback – React", "twitter:title": "useCallback – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useCallback", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/useCallback", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "687d7a60-1ec6-44b6-a996-5099cc2a5e5a", "sourceURL": "https://react.dev/reference/react/useCallback", "url": "https://react.dev/reference/react/useCallback", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useCallback in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**useCallback Example**:\n\n```yaml\nconst cachedFn = useCallback(fn, dependencies)\n```\n\nThis snippet shows you how to usecallback example, which is an important aspect of usecallback.\n\n**ProductPage Example**:\n\n```yaml\nimport { useCallback } from 'react';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n\n  const handleSubmit = useCallback((orderDetails) => {\n\n    post('/product/' + productId + '/buy', {\n\n      referrer,\n\n      orderDetails,\n\n    });\n\n  }, [productId, referrer]);\n}\n```\n\nThis snippet shows you how to productpage example, which is an important aspect of usecallback.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useCallback", "title": "useCallback", "description": "`useCallback` is a React Hook that lets you cache a function definition between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:40", "type": "code_examples", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "og:type": "website", "title": "useCallback – React", "twitter:creator": "@reactjs", "ogTitle": "useCallback – React", "og:title": "useCallback – React", "twitter:title": "useCallback – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useCallback", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/useCallback", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "687d7a60-1ec6-44b6-a996-5099cc2a5e5a", "sourceURL": "https://react.dev/reference/react/useCallback", "url": "https://react.dev/reference/react/useCallback", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useCallback in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou should only rely on `useCallback` as a performance optimization.\n\nIf your code doesn’t work without it, find the underlying problem and fix it first. Then you may add `useCallback` back.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useCallback", "title": "useCallback", "description": "`useCallback` is a React Hook that lets you cache a function definition between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:57:40", "type": "best_practices", "page_metadata": {"twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "og:type": "website", "title": "useCallback – React", "twitter:creator": "@reactjs", "ogTitle": "useCallback – React", "og:title": "useCallback – React", "twitter:title": "useCallback – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useCallback", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/useCallback", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "687d7a60-1ec6-44b6-a996-5099cc2a5e5a", "sourceURL": "https://react.dev/reference/react/useCallback", "url": "https://react.dev/reference/react/useCallback", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useMemo is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useMemo in react-reference.\n\n# useMemo\n\n`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.Here's a quick rundown of what this is about:\n\n## Reference\n\nCall `useMemo` at the top level of your component to cache a calculation between re-renders:\n\n```sp-pre-placeholder grow-[2]\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab }) {\n\n  const visibleTodos = useMemo(\n\n    () => filterTodos(todos, tab),\n\n    [todos, tab]\n\n  );\n\n  // ...\n\n}\n```\n\n[See more examples below.](https://react.dev/reference/react/useMemo#usage)\n\n#### Parameters\n\n- `calculateValue`: The function calculating the value that you want to cache. It should be pure, should take no arguments, and should return a value of any type. React will call your function during the initial render. On next renders, React will return the same value again if the `dependencies` have not changed since the last render. Otherwise, it will call `calculateValue`, return its result, and store it so it can be reused later.\n\n- `dependencies`: The list of all reactive values referenced inside of the `calculateValue` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](https://react.dev/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison.\n\n#### Returns\n\nOn the initial render, `useMemo` returns the result of calling `calculateValue` with no arguments.\n\nDuring next renders, it will either return an already stored value from the last render (if the dependencies haven’t changed), or call `calculateValue` again, and return the result that `calculateValue` has returned.\n\n#### Caveats\n\n- `useMemo` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- In Strict Mode, React will **call your calculation function twice** in order to [help you find accidental impurities.](https://react.dev/reference/react/useMemo#my-calculation-runs-twice-on-every-re-render) This is development-only behavior and does not affect production. If your calculation function is pure (as it should be), this should not affect your logic. The result from one of the calls will be ignored.\n- React **will not throw away the cached value unless there is a specific reason to do that.** For example, in development, React throws away the cache when you edit the file of your component. Both in development and in production, React will throw away the cache if your component suspends during the initial mount. In the future, React may add more features that take advantage of throwing away the cache—for example, if React adds built-in support for virtualized lists in the future, it would make sense to throw away the cache for items that scroll out of the virtualized table viewport. This should be fine if you rely on `useMemo` solely as a performance optimization. Otherwise, a [state variable](https://react.dev/reference/react/useState#avoiding-recreating-the-initial-state) or a [ref](https://react.dev/reference/react/useRef#avoiding-recreating-the-ref-contents) may be more appropriate.\n\n### Note\n\nCaching return values like this is also known as [_memoization_,](https://en.wikipedia.org/wiki/Memoization) which is why this Hook is called `useMemo`.\n\n## Usage\n\n### Skipping expensive recalculations\nTo cache a calculation between re-renders, wrap it in a `useMemo` call at the top level of your component:\n\n```sp-pre-placeholder grow-[2]\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab, theme }) {\n\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\n  // ...\n\n}\n```\n\nYou need to pass two things to `useMemo`:\n\n1. A calculation function that takes no arguments, like `() =>`, and returns what you wanted to calculate.\n2. A list of dependencies including every value within your component that’s used inside your calculation.\n\nOn the initial render, the value you’ll get from `useMemo` will be the result of calling your calculation.\n\nOn every subsequent render, React will compare the dependencies with the dependencies you passed during the last render. If none of the dependencies have changed (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), `useMemo` will return the value you already calculated before. Otherwise, React will re-run your calculation and return the new value.\n\nIn other words, `useMemo` caches a calculation result between re-renders until its dependencies change.\n\n**Let’s walk through an example to see when this is useful.**\n\nBy default, React will re-run the entire body of your component every time that it re-renders. For example, if this `TodoList` updates its state or receives new props from its parent, the `filterTodos` function will re-run:\n\n```sp-pre-placeholder grow-[2]\nfunction TodoList({ todos, tab, theme }) {\n\n  const visibleTodos = filterTodos(todos, tab);\n\n  // ...\n\n}\n```\n\nUsually, this isn’t a problem because most calculations are very fast. However, if you’re filtering or transforming a large array, or doing some expensive computation, you might want to skip doing it again if data hasn’t changed. If both `todos` and `tab` are the same as they were during the last render, wrapping the calculation in `useMemo` like earlier lets you reuse `visibleTodos` you’ve already calculated before.\n\nThis type of caching is called _[memoization.](https://en.wikipedia.org/wiki/Memoization)_.\n\n## Troubleshooting\n\n### My calculation runs twice on every re-render\nIn [Strict Mode](https://react.dev/reference/react/StrictMode), React will call some of your functions twice instead of once:\n\n```sp-pre-placeholder grow-[2]\nfunction TodoList({ todos, tab }) {\n\n  // This component function will run twice for every render.\n\n  const visibleTodos = useMemo(() => {\n\n    // This calculation will run twice if any of the dependencies change.\n\n    return filterTodos(todos, tab);\n\n  }, [todos, tab]);\n\n  // ...\n}\n```\n\nThis is expected and shouldn’t break your code.\n\nThis **development-only** behavior helps you [keep components pure.](https://react.dev/learn/keeping-components-pure) React uses the result of one of the calls, and ignores the result of the other call. As long as your component and calculation functions are pure, this shouldn’t affect your logic. However, if they are accidentally impure, this helps you notice and fix the mistake.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useMemo", "title": "useMemo", "description": "`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:58:06", "type": "overview", "page_metadata": {"fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "og:title": "useMemo – React", "ogTitle": "useMemo – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:creator": "@reactjs", "twitter:title": "useMemo – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useMemo", "title": "useMemo – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/useMemo", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "51576e3c-35b6-4d01-b3e2-15949f9b7636", "sourceURL": "https://react.dev/reference/react/useMemo", "url": "https://react.dev/reference/react/useMemo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `useMemo` at the top level of your component to cache a calculation between re-renders:\n\n```sp-pre-placeholder grow-[2]\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab }) {\n\n  const visibleTodos = useMemo(\n\n    () => filterTodos(todos, tab),\n\n    [todos, tab]\n\n  );\n\n  // ...\n\n}\n```\n\n[See more examples below.](https://react.dev/reference/react/useMemo#usage)\n\n#### Parameters\n\n- `calculateValue`: The function calculating the value that you want to cache. It should be pure, should take no arguments, and should return a value of any type. React will call your function during the initial render. On next renders, React will return the same value again if the `dependencies` have not changed since the last render. Otherwise, it will call `calculateValue`, return its result, and store it so it can be reused later.\n\n- `dependencies`: The list of all reactive values referenced inside of the `calculateValue` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](https://react.dev/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison.\n\n#### Returns\n\nOn the initial render, `useMemo` returns the result of calling `calculateValue` with no arguments.\n\nDuring next renders, it will either return an already stored value from the last render (if the dependencies haven’t changed), or call `calculateValue` again, and return the result that `calculateValue` has returned.\n\n#### Caveats\n\n- `useMemo` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- In Strict Mode, React will **call your calculation function twice** in order to [help you find accidental impurities.](https://react.dev/reference/react/useMemo#my-calculation-runs-twice-on-every-re-render) This is development-only behavior and does not affect production. If your calculation function is pure (as it should be), this should not affect your logic. The result from one of the calls will be ignored.\n- React **will not throw away the cached value unless there is a specific reason to do that.** For example, in development, React throws away the cache when you edit the file of your component. Both in development and in production, React will throw away the cache if your component suspends during the initial mount. In the future, React may add more features that take advantage of throwing away the cache—for example, if React adds built-in support for virtualized lists in the future, it would make sense to throw away the cache for items that scroll out of the virtualized table viewport. This should be fine if you rely on `useMemo` solely as a performance optimization. Otherwise, a [state variable](https://react.dev/reference/react/useState#avoiding-recreating-the-initial-state) or a [ref](https://react.dev/reference/react/useRef#avoiding-recreating-the-ref-contents) may be more appropriate.\n\n### Note\n\nCaching return values like this is also known as [_memoization_,](https://en.wikipedia.org/wiki/Memoization) which is why this Hook is called `useMemo`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useMemo", "title": "useMemo", "description": "`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:58:06", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "og:title": "useMemo – React", "ogTitle": "useMemo – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:creator": "@reactjs", "twitter:title": "useMemo – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useMemo", "title": "useMemo – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/useMemo", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "51576e3c-35b6-4d01-b3e2-15949f9b7636", "sourceURL": "https://react.dev/reference/react/useMemo", "url": "https://react.dev/reference/react/useMemo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Skipping expensive recalculations\nTo cache a calculation between re-renders, wrap it in a `useMemo` call at the top level of your component:\n\n```sp-pre-placeholder grow-[2]\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab, theme }) {\n\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\n  // ...\n\n}\n```\n\nYou need to pass two things to `useMemo`:\n\n1. A calculation function that takes no arguments, like `() =>`, and returns what you wanted to calculate.\n2. A list of dependencies including every value within your component that’s used inside your calculation.\n\nOn the initial render, the value you’ll get from `useMemo` will be the result of calling your calculation.\n\nOn every subsequent render, React will compare the dependencies with the dependencies you passed during the last render. If none of the dependencies have changed (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), `useMemo` will return the value you already calculated before. Otherwise, React will re-run your calculation and return the new value.\n\nIn other words, `useMemo` caches a calculation result between re-renders until its dependencies change.\n\n**Let’s walk through an example to see when this is useful.**\n\nBy default, React will re-run the entire body of your component every time that it re-renders. For example, if this `TodoList` updates its state or receives new props from its parent, the `filterTodos` function will re-run:\n\n```sp-pre-placeholder grow-[2]\nfunction TodoList({ todos, tab, theme }) {\n\n  const visibleTodos = filterTodos(todos, tab);\n\n  // ...\n\n}\n```\n\nUsually, this isn’t a problem because most calculations are very fast. However, if you’re filtering or transforming a large array, or doing some expensive computation, you might want to skip doing it again if data hasn’t changed. If both `todos` and `tab` are the same as they were during the last render, wrapping the calculation in `useMemo` like earlier lets you reuse `visibleTodos` you’ve already calculated before.\n\nThis type of caching is called _[memoization.](https://en.wikipedia.org/wiki/Memoization)_..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useMemo", "title": "useMemo", "description": "`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:58:06", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "og:title": "useMemo – React", "ogTitle": "useMemo – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:creator": "@reactjs", "twitter:title": "useMemo – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useMemo", "title": "useMemo – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/useMemo", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "51576e3c-35b6-4d01-b3e2-15949f9b7636", "sourceURL": "https://react.dev/reference/react/useMemo", "url": "https://react.dev/reference/react/useMemo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### My calculation runs twice on every re-render\nIn [Strict Mode](https://react.dev/reference/react/StrictMode), React will call some of your functions twice instead of once:\n\n```sp-pre-placeholder grow-[2]\nfunction TodoList({ todos, tab }) {\n\n  // This component function will run twice for every render.\n\n  const visibleTodos = useMemo(() => {\n\n    // This calculation will run twice if any of the dependencies change.\n\n    return filterTodos(todos, tab);\n\n  }, [todos, tab]);\n\n  // ...\n}\n```\n\nThis is expected and shouldn’t break your code.\n\nThis **development-only** behavior helps you [keep components pure.](https://react.dev/learn/keeping-components-pure) React uses the result of one of the calls, and ignores the result of the other call. As long as your component and calculation functions are pure, this shouldn’t affect your logic. However, if they are accidentally impure, this helps you notice and fix the mistake..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useMemo", "title": "useMemo", "description": "`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:58:06", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "og:title": "useMemo – React", "ogTitle": "useMemo – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:creator": "@reactjs", "twitter:title": "useMemo – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useMemo", "title": "useMemo – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/useMemo", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "51576e3c-35b6-4d01-b3e2-15949f9b7636", "sourceURL": "https://react.dev/reference/react/useMemo", "url": "https://react.dev/reference/react/useMemo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useMemo in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useMemo Example**:\n\n```yaml\nconst cachedValue = useMemo(calculateValue, dependencies)\n```\n\nThis snippet shows you how to basic usememo example, which is an important aspect of usememo.\n\n**TodoList Example**:\n\n```yaml\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab }) {\n\n  const visibleTodos = useMemo(\n\n    () => filterTodos(todos, tab),\n\n    [todos, tab]\n\n  );\n\n  // ...\n\n}\n```\n\nThis snippet shows you how to todolist example, which is an important aspect of usememo.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useMemo", "title": "useMemo", "description": "`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:58:06", "type": "code_examples", "page_metadata": {"fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "og:title": "useMemo – React", "ogTitle": "useMemo – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:creator": "@reactjs", "twitter:title": "useMemo – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useMemo", "title": "useMemo – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/useMemo", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "51576e3c-35b6-4d01-b3e2-15949f9b7636", "sourceURL": "https://react.dev/reference/react/useMemo", "url": "https://react.dev/reference/react/useMemo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useMemo in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou should only rely on `useMemo` as a performance optimization. If your code doesn’t work without it, find the underlying problem and fix it first. Then you may add `useMemo` to improve performance.\n\nIf your app is like this site, and most interactions are coarse (like replacing a page or an entire section), memoization is usually unnecessary. On the other hand, if your app is more like a drawing editor, and most interactions are granular (like moving shapes), then you might find memoization very helpful.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useMemo", "title": "useMemo", "description": "`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:58:06", "type": "best_practices", "page_metadata": {"fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "og:title": "useMemo – React", "ogTitle": "useMemo – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:creator": "@reactjs", "twitter:title": "useMemo – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useMemo", "title": "useMemo – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/useMemo", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "51576e3c-35b6-4d01-b3e2-15949f9b7636", "sourceURL": "https://react.dev/reference/react/useMemo", "url": "https://react.dev/reference/react/useMemo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Built-in React Components is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Built-in React Components in react-reference.\n\n# Built-in React Components\n\nReact exposes a few built-in components that you can use in your JSX.Here's a quick rundown of what this is about:\n\n## Built-in components\n\n- [`<Fragment>`](https://react.dev/reference/react/Fragment), alternatively written as `<>...</>`, lets you group multiple JSX nodes together.\n- [`<Profiler>`](https://react.dev/reference/react/Profiler) lets you measure rendering performance of a React tree programmatically.\n- [`<Suspense>`](https://react.dev/reference/react/Suspense) lets you display a fallback while the child components are loading.\n- [`<StrictMode>`](https://react.dev/reference/react/StrictMode) enables extra development-only checks that help you find bugs early.\n\n## Your own components\n\nYou can also [define your own components](https://react.dev/learn/your-first-component) as JavaScript functions.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/components", "title": "Built-in React Components", "description": "React exposes a few built-in components that you can use in your JSX.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 00:58:10", "type": "overview", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Built-in React Components – React", "title": "Built-in React Components – React", "og:url": "https://react.dev/reference/react/components", "language": "en", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "Built-in React Components – React", "twitter:card": "summary_large_image", "ogTitle": "Built-in React Components – React", "og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/components", "scrapeId": "3c350746-1e3d-4775-ae3e-735f5ab38bf3", "sourceURL": "https://react.dev/reference/react/components", "url": "https://react.dev/reference/react/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I built-in components in react-reference?\n\nAssistant: To built-in components in react-reference, here's what you do:\n- [`<Fragment>`](https://react.dev/reference/react/Fragment), alternatively written as `<>...</>`, lets you group multiple JSX nodes together.\n- [`<Profiler>`](https://react.dev/reference/react/Profiler) lets you measure rendering performance of a React tree programmatically.\n- [`<Suspense>`](https://react.dev/reference/react/Suspense) lets you display a fallback while the child components are loading.\n- [`<StrictMode>`](https://react.dev/reference/react/StrictMode) enables extra development-only checks that help you find bugs early..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/components", "title": "Built-in React Components", "description": "React exposes a few built-in components that you can use in your JSX.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 00:58:10", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Built-in React Components – React", "title": "Built-in React Components – React", "og:url": "https://react.dev/reference/react/components", "language": "en", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "Built-in React Components – React", "twitter:card": "summary_large_image", "ogTitle": "Built-in React Components – React", "og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/components", "scrapeId": "3c350746-1e3d-4775-ae3e-735f5ab38bf3", "sourceURL": "https://react.dev/reference/react/components", "url": "https://react.dev/reference/react/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I your own components in react-reference?\n\nAssistant: To your own components in react-reference, here's what you do:\nYou can also [define your own components](https://react.dev/learn/your-first-component) as JavaScript functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/components", "title": "Built-in React Components", "description": "React exposes a few built-in components that you can use in your JSX.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 00:58:10", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Built-in React Components – React", "title": "Built-in React Components – React", "og:url": "https://react.dev/reference/react/components", "language": "en", "twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "Built-in React Components – React", "twitter:card": "summary_large_image", "ogTitle": "Built-in React Components – React", "og:type": "website", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/components", "scrapeId": "3c350746-1e3d-4775-ae3e-735f5ab38bf3", "sourceURL": "https://react.dev/reference/react/components", "url": "https://react.dev/reference/react/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useContext is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useContext in react-reference.\n\n# useContext\n\n`useContext` is a React Hook that lets you read and subscribe to context from your component.Here's a quick rundown of what this is about:\n\n## Reference\n\nCall `useContext` at the top level of your component to read and subscribe to context.\n\n```sp-pre-placeholder grow-[2]\nimport { useContext } from 'react';\n\nfunction MyComponent() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n```\n\n### Parameters\n- `SomeContext`: The context that you’ve previously created with `createContext`. The context itself does not hold the information, it only represents the kind of information you can provide or read from components.\n\n### Returns\n`useContext` returns the context value for the calling component. It is determined as the `value` passed to the closest `SomeContext.Provider` above the calling component in the tree. If there is no such provider, then the returned value will be the `defaultValue` you have passed to `createContext` for that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes.\n\n### Caveats\n- `useContext()` call in a component is not affected by providers returned from the _same_ component. The corresponding `<Context.Provider>` **needs to be _above_** the component doing the `useContext()` call.\n- React **automatically re-renders** all the children that use a particular context starting from the provider that receives a different `value`. The previous and the next values are compared with the `Object.is` comparison. Skipping re-renders with `memo` does not prevent the children receiving fresh context values.\n- If your build system produces duplicates modules in the output (which can happen with symlinks), this can break context. Passing something via context only works if `SomeContext` that you use to provide context and `SomeContext` that you use to read it are **_exactly_ the same object**, as determined by a `===` comparison.\n\n## Usage\n\n### Passing data deeply into the tree\nCall `useContext` at the top level of your component to read and subscribe to context.\n\n```sp-pre-placeholder grow-[2]\nimport { useContext } from 'react';\n\nfunction Button() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n```\n\n`useContext` returns the context value for the context you passed. To determine the context value, React searches the component tree and finds **the closest context provider above** for that particular context.\n\nTo pass context to a `Button`, wrap it or one of its parent components into the corresponding context provider:\n\n```sp-pre-placeholder grow-[2]\nfunction MyPage() {\n\n  return (\n\n    <ThemeContext.Provider value=\"dark\">\n\n      <Form />\n\n    </ThemeContext.Provider>\n\n  );\n}\n\nfunction Form() {\n\n  // ... renders buttons inside ...\n}\n```\n\nIt doesn’t matter how many layers of components there are between the provider and the `Button`. When a `Button` _anywhere_ inside of `Form` calls `useContext(ThemeContext)`, it will receive \"dark\" as the value.\n\n### Pitfall\n`useContext()` always looks for the closest provider _above_ the component that calls it. It searches upwards and **does not** consider providers in the component from which you’re calling `useContext()`.\n\n## Updating data passed via context\n\nOften, you’ll want the context to change over time. To update context, combine it with state. Declare a state variable in the parent component, and pass the current state down as the context value to the provider.\n\n```sp-pre-placeholder grow-[2]\nfunction MyPage() {\n\n  const [theme, setTheme] = useState('dark');\n\n  return (\n\n    <ThemeContext.Provider value={theme}>\n\n      <Form />\n\n      <Button onClick={() => {\n\n        setTheme('light');\n\n      }}>\n\n        Switch to light theme\n\n      </Button>\n\n    </ThemeContext.Provider>\n\n  );\n}\n```\n\nNow any `Button` inside of the provider will receive the current `theme` value. If you call `setTheme` to update the `theme` value that you pass to the provider, all `Button` components will re-render with the new 'light' value.\n\n## Specifying a fallback default value\n\nIf React can’t find any providers of that particular context in the parent tree, the context value returned by `useContext()` will be equal to the default value that you specified when you created that context:\n\n```sp-pre-placeholder grow-[2]\nconst ThemeContext = createContext(null);\n```\n\nThe default value **never changes**. If you want to update context, use it with state as described above.\n\nOften, instead of `null`, there is some more meaningful value you can use as a default, for example:\n\n```sp-pre-placeholder grow-[2]\nconst ThemeContext = createContext('light');\n```\n\nThis way, if you accidentally render some component without a corresponding provider, it won’t break. This also helps your components work well in a test environment without setting up a lot of providers in the tests.\n\n## Overriding context for a part of the tree\n\nYou can override the context for a part of the tree by wrapping that part in a provider with a different value.\n\n```sp-pre-placeholder grow-[2]\n<ThemeContext.Provider value=\"dark\">\n\n  ...\n\n  <ThemeContext.Provider value=\"light\">\n\n    <Footer />\n\n  </ThemeContext.Provider>\n\n  ...\n\n</ThemeContext.Provider>\n```\n\nYou can nest and override providers as many times as you need.\n\n## Optimizing re-renders when passing objects and functions\n\nYou can pass any values via context, including objects and functions.\n\n```sp-pre-placeholder grow-[2]\nfunction MyApp() {\n\n  const [currentUser, setCurrentUser] = useState(null);\n\n  function login(response) {\n\n    storeCredentials(response.credentials);\n\n    setCurrentUser(response.user);\n\n  }\n\n  return (\n\n    <AuthContext.Provider value={{ currentUser, login }}>\n\n      <Page />\n\n    </AuthContext.Provider>\n\n  );\n}\n```\n\nHere, the context value is a JavaScript object with two properties, one of which is a function. Whenever `MyApp` re-renders (for example, on a route update), this will be a _different_ object pointing at a _different_ function, so React will also have to re-render all components deep in the tree that call `useContext(AuthContext)`. In smaller apps, this is not a problem. However, there is no need to re-render them if the underlying data, like `currentUser`, has not changed. To help React take advantage of that fact, you may wrap the `login` function with `useCallback` and wrap the object creation into `useMemo`. This is a performance optimization.\n\n## Troubleshooting\n\n### My component doesn’t see the value from my provider\nThere are a few common ways that this can happen:\n1. You’re rendering `<SomeContext.Provider>` in the same component (or below) as where you’re calling `useContext()`. Move `<SomeContext.Provider>` _above and outside_ the component calling `useContext()`.\n2. You may have forgotten to wrap your component with `<SomeContext.Provider>`, or you might have put it in a different part of the tree than you thought. Check whether the hierarchy is right using React DevTools.\n3. You might be running into some build issue with your tooling that causes `SomeContext` as seen from the providing component and `SomeContext` as seen by the reading component to be two different objects. This can happen if you use symlinks, for example. You can verify this by assigning them to globals like `window.SomeContext1` and `window.SomeContext2` and then checking whether `window.SomeContext1 === window.SomeContext2` in the console. If they’re not the same, fix that issue on the build tool level.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `useContext` at the top level of your component to read and subscribe to context.\n\n```sp-pre-placeholder grow-[2]\nimport { useContext } from 'react';\n\nfunction MyComponent() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n```\n\n### Parameters\n- `SomeContext`: The context that you’ve previously created with `createContext`. The context itself does not hold the information, it only represents the kind of information you can provide or read from components.\n\n### Returns\n`useContext` returns the context value for the calling component. It is determined as the `value` passed to the closest `SomeContext.Provider` above the calling component in the tree. If there is no such provider, then the returned value will be the `defaultValue` you have passed to `createContext` for that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes.\n\n### Caveats\n- `useContext()` call in a component is not affected by providers returned from the _same_ component. The corresponding `<Context.Provider>` **needs to be _above_** the component doing the `useContext()` call.\n- React **automatically re-renders** all the children that use a particular context starting from the provider that receives a different `value`. The previous and the next values are compared with the `Object.is` comparison. Skipping re-renders with `memo` does not prevent the children receiving fresh context values.\n- If your build system produces duplicates modules in the output (which can happen with symlinks), this can break context. Passing something via context only works if `SomeContext` that you use to provide context and `SomeContext` that you use to read it are **_exactly_ the same object**, as determined by a `===` comparison..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Passing data deeply into the tree\nCall `useContext` at the top level of your component to read and subscribe to context.\n\n```sp-pre-placeholder grow-[2]\nimport { useContext } from 'react';\n\nfunction Button() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n```\n\n`useContext` returns the context value for the context you passed. To determine the context value, React searches the component tree and finds **the closest context provider above** for that particular context.\n\nTo pass context to a `Button`, wrap it or one of its parent components into the corresponding context provider:\n\n```sp-pre-placeholder grow-[2]\nfunction MyPage() {\n\n  return (\n\n    <ThemeContext.Provider value=\"dark\">\n\n      <Form />\n\n    </ThemeContext.Provider>\n\n  );\n}\n\nfunction Form() {\n\n  // ... renders buttons inside ...\n}\n```\n\nIt doesn’t matter how many layers of components there are between the provider and the `Button`. When a `Button` _anywhere_ inside of `Form` calls `useContext(ThemeContext)`, it will receive \"dark\" as the value.\n\n### Pitfall\n`useContext()` always looks for the closest provider _above_ the component that calls it. It searches upwards and **does not** consider providers in the component from which you’re calling `useContext()`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I updating data passed via context in react-reference?\n\nAssistant: To updating data passed via context in react-reference, here's what you do:\nOften, you’ll want the context to change over time. To update context, combine it with state. Declare a state variable in the parent component, and pass the current state down as the context value to the provider.\n\n```sp-pre-placeholder grow-[2]\nfunction MyPage() {\n\n  const [theme, setTheme] = useState('dark');\n\n  return (\n\n    <ThemeContext.Provider value={theme}>\n\n      <Form />\n\n      <Button onClick={() => {\n\n        setTheme('light');\n\n      }}>\n\n        Switch to light theme\n\n      </Button>\n\n    </ThemeContext.Provider>\n\n  );\n}\n```\n\nNow any `Button` inside of the provider will receive the current `theme` value. If you call `setTheme` to update the `theme` value that you pass to the provider, all `Button` components will re-render with the new 'light' value..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I specifying a fallback default value in react-reference?\n\nAssistant: To specifying a fallback default value in react-reference, here's what you do:\nIf React can’t find any providers of that particular context in the parent tree, the context value returned by `useContext()` will be equal to the default value that you specified when you created that context:\n\n```sp-pre-placeholder grow-[2]\nconst ThemeContext = createContext(null);\n```\n\nThe default value **never changes**. If you want to update context, use it with state as described above.\n\nOften, instead of `null`, there is some more meaningful value you can use as a default, for example:\n\n```sp-pre-placeholder grow-[2]\nconst ThemeContext = createContext('light');\n```\n\nThis way, if you accidentally render some component without a corresponding provider, it won’t break. This also helps your components work well in a test environment without setting up a lot of providers in the tests..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I overriding context for a part of the tree in react-reference?\n\nAssistant: To overriding context for a part of the tree in react-reference, here's what you do:\nYou can override the context for a part of the tree by wrapping that part in a provider with a different value.\n\n```sp-pre-placeholder grow-[2]\n<ThemeContext.Provider value=\"dark\">\n\n  ...\n\n  <ThemeContext.Provider value=\"light\">\n\n    <Footer />\n\n  </ThemeContext.Provider>\n\n  ...\n\n</ThemeContext.Provider>\n```\n\nYou can nest and override providers as many times as you need..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I optimizing re-renders when passing objects and functions in react-reference?\n\nAssistant: To optimizing re-renders when passing objects and functions in react-reference, here's what you do:\nYou can pass any values via context, including objects and functions.\n\n```sp-pre-placeholder grow-[2]\nfunction MyApp() {\n\n  const [currentUser, setCurrentUser] = useState(null);\n\n  function login(response) {\n\n    storeCredentials(response.credentials);\n\n    setCurrentUser(response.user);\n\n  }\n\n  return (\n\n    <AuthContext.Provider value={{ currentUser, login }}>\n\n      <Page />\n\n    </AuthContext.Provider>\n\n  );\n}\n```\n\nHere, the context value is a JavaScript object with two properties, one of which is a function. Whenever `MyApp` re-renders (for example, on a route update), this will be a _different_ object pointing at a _different_ function, so React will also have to re-render all components deep in the tree that call `useContext(AuthContext)`. In smaller apps, this is not a problem. However, there is no need to re-render them if the underlying data, like `currentUser`, has not changed. To help React take advantage of that fact, you may wrap the `login` function with `useCallback` and wrap the object creation into `useMemo`. This is a performance optimization..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### My component doesn’t see the value from my provider\nThere are a few common ways that this can happen:\n1. You’re rendering `<SomeContext.Provider>` in the same component (or below) as where you’re calling `useContext()`. Move `<SomeContext.Provider>` _above and outside_ the component calling `useContext()`.\n2. You may have forgotten to wrap your component with `<SomeContext.Provider>`, or you might have put it in a different part of the tree than you thought. Check whether the hierarchy is right using React DevTools.\n3. You might be running into some build issue with your tooling that causes `SomeContext` as seen from the providing component and `SomeContext` as seen by the reading component to be two different objects. This can happen if you use symlinks, for example. You can verify this by assigning them to globals like `window.SomeContext1` and `window.SomeContext2` and then checking whether `window.SomeContext1 === window.SomeContext2` in the console. If they’re not the same, fix that issue on the build tool level..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useContext in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useContext Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nconst value = useContext(SomeContext)\n```\n```\n\nThis snippet shows you how to basic usecontext example, which is an important aspect of usecontext.\n\n**Using useContext in a Component**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nimport { useContext } from 'react';\n\nfunction MyComponent() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n```\n```\n\nThis snippet shows you how to using usecontext in a component, which is an important aspect of usecontext.\n\n**Updating Theme Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nfunction MyPage() {\n\n  const [theme, setTheme] = useState('dark');\n\n  return (\n\n    <ThemeContext.Provider value={theme}>\n\n      <Form />\n\n      <Button onClick={() => {\n\n        setTheme('light');\n\n      }}>\n\n        Switch to light theme\n\n      </Button>\n\n    </ThemeContext.Provider>\n\n  );\n}\n```\n```\n\nThis snippet shows you how to updating theme example, which is an important aspect of usecontext.\n\n**Specifying Default Value Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nconst ThemeContext = createContext('light');\n```\n```\n\nThis snippet shows you how to specifying default value example, which is an important aspect of usecontext.\n\n**Overriding Context Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\n<ThemeContext.Provider value=\"dark\">\n\n  ...\n\n  <ThemeContext.Provider value=\"light\">\n\n    <Footer />\n\n  </ThemeContext.Provider>\n\n  ...\n\n</ThemeContext.Provider>\n```\n```\n\nThis snippet shows you how to overriding context example, which is an important aspect of usecontext.\n\n**Optimizing Re-renders Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nimport { useCallback, useMemo } from 'react';\n\nfunction MyApp() {\n\n  const [currentUser, setCurrentUser] = useState(null);\n\n  const login = useCallback((response) => {\n\n    storeCredentials(response.credentials);\n\n    setCurrentUser(response.user);\n\n  }, []);\n\n  const contextValue = useMemo(() => ({\n\n    currentUser,\n\n    login\n\n  }), [currentUser, login]);\n\n  return (\n\n    <AuthContext.Provider value={contextValue}>\n\n      <Page />\n\n    </AuthContext.Provider>\n\n  );\n}\n```\n```\n\nThis snippet shows you how to optimizing re-renders example, which is an important aspect of usecontext.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useContext in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCall `useContext` at the top level of your component to read and subscribe to context.\n\nUse `useCallback` and `useMemo` to optimize re-renders when passing objects and functions via context.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useContext", "title": "useContext", "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 00:58:34", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "language": "en", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "useContext – React", "og:url": "https://react.dev/reference/react/useContext", "ogUrl": "https://react.dev/reference/react/useContext", "ogTitle": "useContext – React", "og:type": "website", "og:title": "useContext – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "title": "useContext – React", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "1f313ff5-c905-45e5-ae0c-596b0f47ed2f", "sourceURL": "https://react.dev/reference/react/useContext", "url": "https://react.dev/reference/react/useContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useInsertionEffect is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useInsertionEffect in react-reference.\n\n# useInsertionEffect\n\nThe useInsertionEffect hook is for CSS-in-JS library authors to insert styles into the DOM before any layout Effects fire.Here's a quick rundown of what this is about:\n\n## Pitfall\n\n`useInsertionEffect` is for CSS-in-JS library authors. Unless you are working on a CSS-in-JS library and need a place to inject the styles, you probably want [`useEffect`](https://react.dev/reference/react/useEffect) or [`useLayoutEffect`](https://react.dev/reference/react/useLayoutEffect) instead.\n\n`useInsertionEffect` allows inserting elements into the DOM before any layout Effects fire.\n\n## Reference\n\n### `useInsertionEffect(setup, dependencies?)`\n\nCall `useInsertionEffect` to insert styles before any Effects fire that may need to read layout:\n\n```sp-pre-placeholder grow-[2]\nimport { useInsertionEffect } from 'react';\n\n// Inside your CSS-in-JS library\n\nfunction useCSS(rule) {\n  useInsertionEffect(() => {\n    // ... inject <style> tags here ...\n  });\n  return rule;\n}\n```\n\n#### Parameters\n- `setup`: The function with your Effect’s logic. Your setup function may also optionally return a _cleanup_ function. When your component is added to the DOM, but before any layout Effects fire, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. When your component is removed from the DOM, React will run your cleanup function.\n- **optional** `dependencies`: The list of all reactive values referenced inside of the `setup` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](https://react.dev/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm. If you don’t specify the dependencies at all, your Effect will re-run after every re-render of the component.\n\n## Returns\n\n`useInsertionEffect` returns `undefined`.\n\n## Caveats\n\n- Effects only run on the client. They don’t run during server rendering.\n- You can’t update state from inside `useInsertionEffect`.\n- By the time `useInsertionEffect` runs, refs are not attached yet.\n- `useInsertionEffect` may run either before or after the DOM has been updated. You shouldn’t rely on the DOM being updated at any particular time.\n- Unlike other types of Effects, which fire cleanup for every Effect and then setup for every Effect, `useInsertionEffect` will fire both cleanup and setup one component at a time. This results in an “interleaving” of the cleanup and setup functions.\n\n## Usage\n\n### Injecting dynamic styles from CSS-in-JS libraries\n\nTraditionally, you would style React components using plain CSS.\n\n```sp-pre-placeholder grow-[2]\n// In your JS file:\n<button className=\"success\" />\n\n// In your CSS file:\n.success { color: green; }\n```\n\nSome teams prefer to author styles directly in JavaScript code instead of writing CSS files. This usually requires using a CSS-in-JS library or a tool. There are three common approaches to CSS-in-JS:\n\n1. Static extraction to CSS files with a compiler\n2. Inline styles, e.g. `<div style={{ opacity: 1 }}>`\n3. Runtime injection of `<style>` tags\n\nIf you use CSS-in-JS, we recommend a combination of the first two approaches (CSS files for static styles, inline styles for dynamic styles). **We don’t recommend runtime `<style>` tag injection for two reasons:**\n\n1. Runtime injection forces the browser to recalculate the styles a lot more often.\n2. Runtime injection can be very slow if it happens at the wrong time in the React lifecycle.\n\nThe first problem is not solvable, but `useInsertionEffect` helps you solve the second problem.\n\nCall `useInsertionEffect` to insert the styles before any layout Effects fire:\n\n```sp-pre-placeholder grow-[2]\n// Inside your CSS-in-JS library\nlet isInserted = new Set();\n\nfunction useCSS(rule) {\n  useInsertionEffect(() => {\n    // As explained earlier, we don't recommend runtime injection of <style> tags.\n    // But if you have to do it, then it's important to do in useInsertionEffect.\n    if (!isInserted.has(rule)) {\n      isInserted.add(rule);\n      document.head.appendChild(getStyleForRule(rule));\n    }\n  });\n  return rule;\n}\n\nfunction Button() {\n  const className = useCSS('...');\n  return <div className={className} />;\n}\n```\n\nSimilarly to `useEffect`, `useInsertionEffect` does not run on the server. If you need to collect which CSS rules have been used on the server, you can do it during rendering:\n\n```sp-pre-placeholder grow-[2]\nlet collectedRulesSet = new Set();\n\nfunction useCSS(rule) {\n  if (typeof window === 'undefined') {\n    collectedRulesSet.add(rule);\n  }\n  useInsertionEffect(() => {\n    // ...\n  });\n  return rule;\n}\n```\n\n[Read more about upgrading CSS-in-JS libraries with runtime injection to `useInsertionEffect`.](https://github.com/reactwg/react-18/discussions/110)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useInsertionEffect", "title": "useInsertionEffect", "description": "The useInsertionEffect hook is for CSS-in-JS library authors to insert styles into the DOM before any layout Effects fire.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:58:52", "type": "overview", "page_metadata": {"og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "useInsertionEffect – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useInsertionEffect", "ogUrl": "https://react.dev/reference/react/useInsertionEffect", "fb:app_id": "623268441017527", "og:title": "useInsertionEffect – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "ogTitle": "useInsertionEffect – React", "twitter:description": "The library for web and native user interfaces", "title": "useInsertionEffect – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "7ec2c31b-d0ec-4049-91cc-813e71dd3a2f", "sourceURL": "https://react.dev/reference/react/useInsertionEffect", "url": "https://react.dev/reference/react/useInsertionEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\n`useInsertionEffect` is for CSS-in-JS library authors. Unless you are working on a CSS-in-JS library and need a place to inject the styles, you probably want [`useEffect`](https://react.dev/reference/react/useEffect) or [`useLayoutEffect`](https://react.dev/reference/react/useLayoutEffect) instead.\n\n`useInsertionEffect` allows inserting elements into the DOM before any layout Effects fire..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useInsertionEffect", "title": "useInsertionEffect", "description": "The useInsertionEffect hook is for CSS-in-JS library authors to insert styles into the DOM before any layout Effects fire.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:58:52", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "useInsertionEffect – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useInsertionEffect", "ogUrl": "https://react.dev/reference/react/useInsertionEffect", "fb:app_id": "623268441017527", "og:title": "useInsertionEffect – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "ogTitle": "useInsertionEffect – React", "twitter:description": "The library for web and native user interfaces", "title": "useInsertionEffect – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "7ec2c31b-d0ec-4049-91cc-813e71dd3a2f", "sourceURL": "https://react.dev/reference/react/useInsertionEffect", "url": "https://react.dev/reference/react/useInsertionEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useInsertionEffect(setup, dependencies?)`\n\nCall `useInsertionEffect` to insert styles before any Effects fire that may need to read layout:\n\n```sp-pre-placeholder grow-[2]\nimport { useInsertionEffect } from 'react';\n\n// Inside your CSS-in-JS library\n\nfunction useCSS(rule) {\n  useInsertionEffect(() => {\n    // ... inject <style> tags here ...\n  });\n  return rule;\n}\n```\n\n#### Parameters\n- `setup`: The function with your Effect’s logic. Your setup function may also optionally return a _cleanup_ function. When your component is added to the DOM, but before any layout Effects fire, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. When your component is removed from the DOM, React will run your cleanup function.\n- **optional** `dependencies`: The list of all reactive values referenced inside of the `setup` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](https://react.dev/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm. If you don’t specify the dependencies at all, your Effect will re-run after every re-render of the component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useInsertionEffect", "title": "useInsertionEffect", "description": "The useInsertionEffect hook is for CSS-in-JS library authors to insert styles into the DOM before any layout Effects fire.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:58:52", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "useInsertionEffect – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useInsertionEffect", "ogUrl": "https://react.dev/reference/react/useInsertionEffect", "fb:app_id": "623268441017527", "og:title": "useInsertionEffect – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "ogTitle": "useInsertionEffect – React", "twitter:description": "The library for web and native user interfaces", "title": "useInsertionEffect – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "7ec2c31b-d0ec-4049-91cc-813e71dd3a2f", "sourceURL": "https://react.dev/reference/react/useInsertionEffect", "url": "https://react.dev/reference/react/useInsertionEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`useInsertionEffect` returns `undefined`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useInsertionEffect", "title": "useInsertionEffect", "description": "The useInsertionEffect hook is for CSS-in-JS library authors to insert styles into the DOM before any layout Effects fire.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:58:52", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "useInsertionEffect – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useInsertionEffect", "ogUrl": "https://react.dev/reference/react/useInsertionEffect", "fb:app_id": "623268441017527", "og:title": "useInsertionEffect – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "ogTitle": "useInsertionEffect – React", "twitter:description": "The library for web and native user interfaces", "title": "useInsertionEffect – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "7ec2c31b-d0ec-4049-91cc-813e71dd3a2f", "sourceURL": "https://react.dev/reference/react/useInsertionEffect", "url": "https://react.dev/reference/react/useInsertionEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- Effects only run on the client. They don’t run during server rendering.\n- You can’t update state from inside `useInsertionEffect`.\n- By the time `useInsertionEffect` runs, refs are not attached yet.\n- `useInsertionEffect` may run either before or after the DOM has been updated. You shouldn’t rely on the DOM being updated at any particular time.\n- Unlike other types of Effects, which fire cleanup for every Effect and then setup for every Effect, `useInsertionEffect` will fire both cleanup and setup one component at a time. This results in an “interleaving” of the cleanup and setup functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useInsertionEffect", "title": "useInsertionEffect", "description": "The useInsertionEffect hook is for CSS-in-JS library authors to insert styles into the DOM before any layout Effects fire.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:58:52", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "useInsertionEffect – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useInsertionEffect", "ogUrl": "https://react.dev/reference/react/useInsertionEffect", "fb:app_id": "623268441017527", "og:title": "useInsertionEffect – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "ogTitle": "useInsertionEffect – React", "twitter:description": "The library for web and native user interfaces", "title": "useInsertionEffect – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "7ec2c31b-d0ec-4049-91cc-813e71dd3a2f", "sourceURL": "https://react.dev/reference/react/useInsertionEffect", "url": "https://react.dev/reference/react/useInsertionEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Injecting dynamic styles from CSS-in-JS libraries\n\nTraditionally, you would style React components using plain CSS.\n\n```sp-pre-placeholder grow-[2]\n// In your JS file:\n<button className=\"success\" />\n\n// In your CSS file:\n.success { color: green; }\n```\n\nSome teams prefer to author styles directly in JavaScript code instead of writing CSS files. This usually requires using a CSS-in-JS library or a tool. There are three common approaches to CSS-in-JS:\n\n1. Static extraction to CSS files with a compiler\n2. Inline styles, e.g. `<div style={{ opacity: 1 }}>`\n3. Runtime injection of `<style>` tags\n\nIf you use CSS-in-JS, we recommend a combination of the first two approaches (CSS files for static styles, inline styles for dynamic styles). **We don’t recommend runtime `<style>` tag injection for two reasons:**\n\n1. Runtime injection forces the browser to recalculate the styles a lot more often.\n2. Runtime injection can be very slow if it happens at the wrong time in the React lifecycle.\n\nThe first problem is not solvable, but `useInsertionEffect` helps you solve the second problem.\n\nCall `useInsertionEffect` to insert the styles before any layout Effects fire:\n\n```sp-pre-placeholder grow-[2]\n// Inside your CSS-in-JS library\nlet isInserted = new Set();\n\nfunction useCSS(rule) {\n  useInsertionEffect(() => {\n    // As explained earlier, we don't recommend runtime injection of <style> tags.\n    // But if you have to do it, then it's important to do in useInsertionEffect.\n    if (!isInserted.has(rule)) {\n      isInserted.add(rule);\n      document.head.appendChild(getStyleForRule(rule));\n    }\n  });\n  return rule;\n}\n\nfunction Button() {\n  const className = useCSS('...');\n  return <div className={className} />;\n}\n```\n\nSimilarly to `useEffect`, `useInsertionEffect` does not run on the server. If you need to collect which CSS rules have been used on the server, you can do it during rendering:\n\n```sp-pre-placeholder grow-[2]\nlet collectedRulesSet = new Set();\n\nfunction useCSS(rule) {\n  if (typeof window === 'undefined') {\n    collectedRulesSet.add(rule);\n  }\n  useInsertionEffect(() => {\n    // ...\n  });\n  return rule;\n}\n```\n\n[Read more about upgrading CSS-in-JS libraries with runtime injection to `useInsertionEffect`.](https://github.com/reactwg/react-18/discussions/110).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useInsertionEffect", "title": "useInsertionEffect", "description": "The useInsertionEffect hook is for CSS-in-JS library authors to insert styles into the DOM before any layout Effects fire.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:58:52", "type": "section_detail", "page_metadata": {"og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "useInsertionEffect – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useInsertionEffect", "ogUrl": "https://react.dev/reference/react/useInsertionEffect", "fb:app_id": "623268441017527", "og:title": "useInsertionEffect – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "ogTitle": "useInsertionEffect – React", "twitter:description": "The library for web and native user interfaces", "title": "useInsertionEffect – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "7ec2c31b-d0ec-4049-91cc-813e71dd3a2f", "sourceURL": "https://react.dev/reference/react/useInsertionEffect", "url": "https://react.dev/reference/react/useInsertionEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useInsertionEffect in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useInsertionEffect Example**:\n\n```yaml\nuseInsertionEffect(setup, dependencies?)\n```\n\nThis snippet shows you how to basic useinsertioneffect example, which is an important aspect of useinsertioneffect.\n\n**Injecting Styles Example**:\n\n```yaml\nimport { useInsertionEffect } from 'react';\n\n// Inside your CSS-in-JS library\n\nfunction useCSS(rule) {\n  useInsertionEffect(() => {\n    // ... inject <style> tags here ...\n  });\n  return rule;\n}\n```\n\nThis snippet shows you how to injecting styles example, which is an important aspect of useinsertioneffect.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useInsertionEffect", "title": "useInsertionEffect", "description": "The useInsertionEffect hook is for CSS-in-JS library authors to insert styles into the DOM before any layout Effects fire.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:58:52", "type": "code_examples", "page_metadata": {"og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "useInsertionEffect – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useInsertionEffect", "ogUrl": "https://react.dev/reference/react/useInsertionEffect", "fb:app_id": "623268441017527", "og:title": "useInsertionEffect – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "ogTitle": "useInsertionEffect – React", "twitter:description": "The library for web and native user interfaces", "title": "useInsertionEffect – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "7ec2c31b-d0ec-4049-91cc-813e71dd3a2f", "sourceURL": "https://react.dev/reference/react/useInsertionEffect", "url": "https://react.dev/reference/react/useInsertionEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useInsertionEffect in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWe recommend a combination of static extraction to CSS files and inline styles for dynamic styles.\n\nAvoid runtime `<style>` tag injection due to performance issues.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useInsertionEffect", "title": "useInsertionEffect", "description": "The useInsertionEffect hook is for CSS-in-JS library authors to insert styles into the DOM before any layout Effects fire.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 00:58:52", "type": "best_practices", "page_metadata": {"og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "useInsertionEffect – React", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useInsertionEffect", "ogUrl": "https://react.dev/reference/react/useInsertionEffect", "fb:app_id": "623268441017527", "og:title": "useInsertionEffect – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "ogTitle": "useInsertionEffect – React", "twitter:description": "The library for web and native user interfaces", "title": "useInsertionEffect – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "7ec2c31b-d0ec-4049-91cc-813e71dd3a2f", "sourceURL": "https://react.dev/reference/react/useInsertionEffect", "url": "https://react.dev/reference/react/useInsertionEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what act is in react-reference?\n\nAssistant: Sure, I'd be happy to explain act in react-reference.\n\n# act\n\n`act` is a test helper to apply pending React updates before making assertions.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `await act(async actFn)`\n\nWhen writing UI tests, tasks like rendering, user events, or data fetching can be considered as “units” of interaction with a user interface. React provides a helper called `act()` that makes sure all updates related to these “units” have been processed and applied to the DOM before you make any assertions.\n\nThe name `act` comes from the [Arrange-Act-Assert](https://wiki.c2.com/?ArrangeActAssert) pattern.\n\n```sp-pre-placeholder grow-[2]\nit ('renders with button disabled', async () => {\n  await act(async () => {\n    root.render(<TestComponent />)\n  });\n  expect(container.querySelector('button')).toBeDisabled();\n});\n```\n\n### Note\n\nWe recommend using `act` with `await` and an `async` function. Although the sync version works in many cases, it doesn’t work in all cases and due to the way React schedules updates internally, it’s difficult to predict when you can use the sync version.\n\nWe will deprecate and remove the sync version in the future.\n\n#### Parameters\n\n- `async actFn`: An async function wrapping renders or interactions for components being tested. Any updates triggered within the `actFn`, are added to an internal act queue, which are then flushed together to process and apply any changes to the DOM. Since it is async, React will also run any code that crosses an async boundary, and flush any updates scheduled.\n\n#### Returns\n\n`act` does not return anything.\n\n## Usage\n\nWhen testing a component, you can use `act` to make assertions about its output.\n\nFor example, let’s say we have this `Counter` component, the usage examples below show how to test it:\n\n```sp-pre-placeholder grow-[2]\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const handleClick = () => {\n    setCount(prev => prev + 1);\n  }\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>\n        Click me\n      </button>\n    </div>\n  )\n}\n```\n\n### Rendering components in tests\n\nTo test the render output of a component, wrap the render inside `act()`:\n\n```sp-pre-placeholder grow-[2]\nimport {act} from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport Counter from './Counter';\nit('can render and update a counter', async () => {\n  container = document.createElement('div');\n  document.body.appendChild(container);\n  // ✅ Render the component inside act().\n  await act(() => {\n    ReactDOMClient.createRoot(container).render(<Counter />);\n  });\n  const button = container.querySelector('button');\n  const label = container.querySelector('p');\n  expect(label.textContent).toBe('You clicked 0 times');\n  expect(document.title).toBe('You clicked 0 times');\n});\n```\n\nHere, we create a container, append it to the document, and render the `Counter` component inside `act()`. This ensures that the component is rendered and its effects are applied before making assertions.\n\nUsing `act` ensures that all updates have been applied before we make assertions.\n\n### Dispatching events in tests\n\nTo test events, wrap the event dispatch inside `act()`:\n\n```sp-pre-placeholder grow-[2]\nimport {act} from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport Counter from './Counter';\nit.only('can render and update a counter', async () => {\n  const container = document.createElement('div');\n  document.body.appendChild(container);\n  await act( async () => {\n    ReactDOMClient.createRoot(container).render(<Counter />);\n  });\n  // ✅ Dispatch the event inside act().\n  await act(async () => {\n    button.dispatchEvent(new MouseEvent('click', { bubbles: true }));\n  });\n  const button = container.querySelector('button');\n  const label = container.querySelector('p');\n  expect(label.textContent).toBe('You clicked 1 times');\n  expect(document.title).toBe('You clicked 1 times');\n});\n```\n\nHere, we render the component with `act`, and then dispatch the event inside another `act()`. This ensures that all updates from the event are applied before making assertions.\n\n### Pitfall\n\nDon’t forget that dispatching DOM events only works when the DOM container is added to the document. You can use a library like [React Testing Library](https://testing-library.com/docs/react-testing-library/intro) to reduce the boilerplate code.\n\n## Troubleshooting\n\n### I’m getting an error: “The current testing environment is not configured to support act”(…)”\n\nUsing `act` requires setting `global.IS_REACT_ACT_ENVIRONMENT=true` in your test environment. This is to ensure that `act` is only used in the correct environment.\n\nIf you don’t set the global, you will see an error like this:\n\nConsole\n\nWarning: The current testing environment is not configured to support act(…)\n\nTo fix, add this to your global setup file for React tests:\n\n```sp-pre-placeholder grow-[2]\nglobal.IS_REACT_ACT_ENVIRONMENT=true\n```\n\n### Note\n\nIn testing frameworks like [React Testing Library](https://testing-library.com/docs/react-testing-library/intro), `IS_REACT_ACT_ENVIRONMENT` is already set for you.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/act", "title": "act", "description": "`act` is a test helper to apply pending React updates before making assertions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:59:18", "type": "overview", "page_metadata": {"msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/act", "og:title": "act – React", "og:url": "https://react.dev/reference/react/act", "ogTitle": "act – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "title": "act – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "twitter:title": "act – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "efe5b6b3-7558-4831-b138-6095953f449a", "sourceURL": "https://react.dev/reference/react/act", "url": "https://react.dev/reference/react/act", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `await act(async actFn)`\n\nWhen writing UI tests, tasks like rendering, user events, or data fetching can be considered as “units” of interaction with a user interface. React provides a helper called `act()` that makes sure all updates related to these “units” have been processed and applied to the DOM before you make any assertions.\n\nThe name `act` comes from the [Arrange-Act-Assert](https://wiki.c2.com/?ArrangeActAssert) pattern.\n\n```sp-pre-placeholder grow-[2]\nit ('renders with button disabled', async () => {\n  await act(async () => {\n    root.render(<TestComponent />)\n  });\n  expect(container.querySelector('button')).toBeDisabled();\n});\n```\n\n### Note\n\nWe recommend using `act` with `await` and an `async` function. Although the sync version works in many cases, it doesn’t work in all cases and due to the way React schedules updates internally, it’s difficult to predict when you can use the sync version.\n\nWe will deprecate and remove the sync version in the future.\n\n#### Parameters\n\n- `async actFn`: An async function wrapping renders or interactions for components being tested. Any updates triggered within the `actFn`, are added to an internal act queue, which are then flushed together to process and apply any changes to the DOM. Since it is async, React will also run any code that crosses an async boundary, and flush any updates scheduled.\n\n#### Returns\n\n`act` does not return anything..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/act", "title": "act", "description": "`act` is a test helper to apply pending React updates before making assertions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:59:18", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/act", "og:title": "act – React", "og:url": "https://react.dev/reference/react/act", "ogTitle": "act – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "title": "act – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "twitter:title": "act – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "efe5b6b3-7558-4831-b138-6095953f449a", "sourceURL": "https://react.dev/reference/react/act", "url": "https://react.dev/reference/react/act", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nWhen testing a component, you can use `act` to make assertions about its output.\n\nFor example, let’s say we have this `Counter` component, the usage examples below show how to test it:\n\n```sp-pre-placeholder grow-[2]\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const handleClick = () => {\n    setCount(prev => prev + 1);\n  }\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>\n        Click me\n      </button>\n    </div>\n  )\n}\n```\n\n### Rendering components in tests\n\nTo test the render output of a component, wrap the render inside `act()`:\n\n```sp-pre-placeholder grow-[2]\nimport {act} from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport Counter from './Counter';\nit('can render and update a counter', async () => {\n  container = document.createElement('div');\n  document.body.appendChild(container);\n  // ✅ Render the component inside act().\n  await act(() => {\n    ReactDOMClient.createRoot(container).render(<Counter />);\n  });\n  const button = container.querySelector('button');\n  const label = container.querySelector('p');\n  expect(label.textContent).toBe('You clicked 0 times');\n  expect(document.title).toBe('You clicked 0 times');\n});\n```\n\nHere, we create a container, append it to the document, and render the `Counter` component inside `act()`. This ensures that the component is rendered and its effects are applied before making assertions.\n\nUsing `act` ensures that all updates have been applied before we make assertions.\n\n### Dispatching events in tests\n\nTo test events, wrap the event dispatch inside `act()`:\n\n```sp-pre-placeholder grow-[2]\nimport {act} from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport Counter from './Counter';\nit.only('can render and update a counter', async () => {\n  const container = document.createElement('div');\n  document.body.appendChild(container);\n  await act( async () => {\n    ReactDOMClient.createRoot(container).render(<Counter />);\n  });\n  // ✅ Dispatch the event inside act().\n  await act(async () => {\n    button.dispatchEvent(new MouseEvent('click', { bubbles: true }));\n  });\n  const button = container.querySelector('button');\n  const label = container.querySelector('p');\n  expect(label.textContent).toBe('You clicked 1 times');\n  expect(document.title).toBe('You clicked 1 times');\n});\n```\n\nHere, we render the component with `act`, and then dispatch the event inside another `act()`. This ensures that all updates from the event are applied before making assertions.\n\n### Pitfall\n\nDon’t forget that dispatching DOM events only works when the DOM container is added to the document. You can use a library like [React Testing Library](https://testing-library.com/docs/react-testing-library/intro) to reduce the boilerplate code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/act", "title": "act", "description": "`act` is a test helper to apply pending React updates before making assertions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:59:18", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/act", "og:title": "act – React", "og:url": "https://react.dev/reference/react/act", "ogTitle": "act – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "title": "act – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "twitter:title": "act – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "efe5b6b3-7558-4831-b138-6095953f449a", "sourceURL": "https://react.dev/reference/react/act", "url": "https://react.dev/reference/react/act", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### I’m getting an error: “The current testing environment is not configured to support act”(…)”\n\nUsing `act` requires setting `global.IS_REACT_ACT_ENVIRONMENT=true` in your test environment. This is to ensure that `act` is only used in the correct environment.\n\nIf you don’t set the global, you will see an error like this:\n\nConsole\n\nWarning: The current testing environment is not configured to support act(…)\n\nTo fix, add this to your global setup file for React tests:\n\n```sp-pre-placeholder grow-[2]\nglobal.IS_REACT_ACT_ENVIRONMENT=true\n```\n\n### Note\n\nIn testing frameworks like [React Testing Library](https://testing-library.com/docs/react-testing-library/intro), `IS_REACT_ACT_ENVIRONMENT` is already set for you..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/act", "title": "act", "description": "`act` is a test helper to apply pending React updates before making assertions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:59:18", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/act", "og:title": "act – React", "og:url": "https://react.dev/reference/react/act", "ogTitle": "act – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "title": "act – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "twitter:title": "act – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "efe5b6b3-7558-4831-b138-6095953f449a", "sourceURL": "https://react.dev/reference/react/act", "url": "https://react.dev/reference/react/act", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for act in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic usage of act**:\n\n```yaml\nawait act(async actFn)\n```\n\nThis snippet shows you how to basic usage of act, which is an important aspect of act.\n\n**Testing a component with act**:\n\n```yaml\nit ('renders with button disabled', async () => {\n  await act(async () => {\n    root.render(<TestComponent />)\n  });\n  expect(container.querySelector('button')).toBeDisabled();\n});\n```\n\nThis snippet shows you how to testing a component with act, which is an important aspect of act.\n\n**Counter component example**:\n\n```yaml\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const handleClick = () => {\n    setCount(prev => prev + 1);\n  }\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleClick}>\n        Click me\n      </button>\n    </div>\n  )\n}\n```\n\nThis snippet shows you how to counter component example, which is an important aspect of act.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/act", "title": "act", "description": "`act` is a test helper to apply pending React updates before making assertions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:59:18", "type": "code_examples", "page_metadata": {"msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/act", "og:title": "act – React", "og:url": "https://react.dev/reference/react/act", "ogTitle": "act – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "title": "act – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "twitter:title": "act – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "efe5b6b3-7558-4831-b138-6095953f449a", "sourceURL": "https://react.dev/reference/react/act", "url": "https://react.dev/reference/react/act", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using act in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWe recommend using `act` with `await` and an `async` function.\n\nUsing a library like React Testing Library can help reduce boilerplate code.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/act", "title": "act", "description": "`act` is a test helper to apply pending React updates before making assertions.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 00:59:18", "type": "best_practices", "page_metadata": {"msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/act", "og:title": "act – React", "og:url": "https://react.dev/reference/react/act", "ogTitle": "act – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "title": "act – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "twitter:title": "act – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "efe5b6b3-7558-4831-b138-6095953f449a", "sourceURL": "https://react.dev/reference/react/act", "url": "https://react.dev/reference/react/act", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Children is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Children in react-reference.\n\n# Children\n\nThis page covers the React Children API, which allows manipulation and transformation of the JSX received as the children prop.Here's a quick rundown of what this is about:\n\n## Pitfall\n\nUsing `Children` is uncommon and can lead to fragile code. [See common alternatives.](https://react.dev/reference/react/Children#alternatives)\n\n`Children` lets you manipulate and transform the JSX you received as the [`children` prop.](https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children) \n\n```sp-pre-placeholder grow-[2]\nconst mappedChildren = Children.map(children, child =>\n  <div className=\"Row\">\n    {child}\n  </div>\n);\n```\n\n- [Reference](https://react.dev/reference/react/Children#reference)\n  - [`Children.count(children)`](https://react.dev/reference/react/Children#children-count)\n  - [`Children.forEach(children, fn, thisArg?)`](https://react.dev/reference/react/Children#children-foreach)\n  - [`Children.map(children, fn, thisArg?)`](https://react.dev/reference/react/Children#children-map)\n  - [`Children.only(children)`](https://react.dev/reference/react/Children#children-only)\n  - [`Children.toArray(children)`](https://react.dev/reference/react/Children#children-toarray)\n- [Usage](https://react.dev/reference/react/Children#usage)\n  - [Transforming children](https://react.dev/reference/react/Children#transforming-children)\n  - [Running some code for each child](https://react.dev/reference/react/Children#running-some-code-for-each-child)\n  - [Counting children](https://react.dev/reference/react/Children#counting-children)\n  - [Converting children to an array](https://react.dev/reference/react/Children#converting-children-to-an-array)\n- [Alternatives](https://react.dev/reference/react/Children#alternatives)\n  - [Exposing multiple components](https://react.dev/reference/react/Children#exposing-multiple-components)\n  - [Accepting an array of objects as a prop](https://react.dev/reference/react/Children#accepting-an-array-of-objects-as-a-prop)\n  - [Calling a render prop to customize rendering](https://react.dev/reference/react/Children#calling-a-render-prop-to-customize-rendering)\n- [Troubleshooting](https://react.dev/reference/react/Children#troubleshooting)\n  - [I pass a custom component, but the `Children` methods don’t show its render result](https://react.dev/reference/react/Children#i-pass-a-custom-component-but-the-children-methods-dont-show-its-render-result)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/Children", "title": "Children", "description": "This page covers the React Children API, which allows manipulation and transformation of the JSX received as the children prop.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:59:28", "type": "overview", "page_metadata": {"ogUrl": "https://react.dev/reference/react/Children", "og:description": "The library for web and native user interfaces", "title": "Children – React", "twitter:site": "@reactjs", "twitter:title": "Children – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "ogTitle": "Children – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react/Children", "og:title": "Children – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "scrapeId": "d6df3620-c69f-41df-a94b-754ad62dd62e", "sourceURL": "https://react.dev/reference/react/Children", "url": "https://react.dev/reference/react/Children", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\nUsing `Children` is uncommon and can lead to fragile code. [See common alternatives.](https://react.dev/reference/react/Children#alternatives)\n\n`Children` lets you manipulate and transform the JSX you received as the [`children` prop.](https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children) \n\n```sp-pre-placeholder grow-[2]\nconst mappedChildren = Children.map(children, child =>\n  <div className=\"Row\">\n    {child}\n  </div>\n);\n```\n\n- [Reference](https://react.dev/reference/react/Children#reference)\n  - [`Children.count(children)`](https://react.dev/reference/react/Children#children-count)\n  - [`Children.forEach(children, fn, thisArg?)`](https://react.dev/reference/react/Children#children-foreach)\n  - [`Children.map(children, fn, thisArg?)`](https://react.dev/reference/react/Children#children-map)\n  - [`Children.only(children)`](https://react.dev/reference/react/Children#children-only)\n  - [`Children.toArray(children)`](https://react.dev/reference/react/Children#children-toarray)\n- [Usage](https://react.dev/reference/react/Children#usage)\n  - [Transforming children](https://react.dev/reference/react/Children#transforming-children)\n  - [Running some code for each child](https://react.dev/reference/react/Children#running-some-code-for-each-child)\n  - [Counting children](https://react.dev/reference/react/Children#counting-children)\n  - [Converting children to an array](https://react.dev/reference/react/Children#converting-children-to-an-array)\n- [Alternatives](https://react.dev/reference/react/Children#alternatives)\n  - [Exposing multiple components](https://react.dev/reference/react/Children#exposing-multiple-components)\n  - [Accepting an array of objects as a prop](https://react.dev/reference/react/Children#accepting-an-array-of-objects-as-a-prop)\n  - [Calling a render prop to customize rendering](https://react.dev/reference/react/Children#calling-a-render-prop-to-customize-rendering)\n- [Troubleshooting](https://react.dev/reference/react/Children#troubleshooting)\n  - [I pass a custom component, but the `Children` methods don’t show its render result](https://react.dev/reference/react/Children#i-pass-a-custom-component-but-the-children-methods-dont-show-its-render-result).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Children", "title": "Children", "description": "This page covers the React Children API, which allows manipulation and transformation of the JSX received as the children prop.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:59:28", "type": "section_detail", "page_metadata": {"ogUrl": "https://react.dev/reference/react/Children", "og:description": "The library for web and native user interfaces", "title": "Children – React", "twitter:site": "@reactjs", "twitter:title": "Children – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "ogTitle": "Children – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react/Children", "og:title": "Children – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "scrapeId": "d6df3620-c69f-41df-a94b-754ad62dd62e", "sourceURL": "https://react.dev/reference/react/Children", "url": "https://react.dev/reference/react/Children", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Children in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Children.map Example**:\n\n```yaml\nconst mappedChildren = Children.map(children, child =>\n  <div className=\"Row\">\n    {child}\n  </div>\n);\n```\n\nThis snippet shows you how to children.map example, which is an important aspect of children.\n\n**Children.count Example**:\n\n```yaml\nimport { Children } from 'react';\n\nfunction RowList({ children }) {\n  return (\n    <>\n      <h1>Total rows: {Children.count(children)}</h1>\n      ...\n    </>\n  );\n}\n```\n\nThis snippet shows you how to children.count example, which is an important aspect of children.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/Children", "title": "Children", "description": "This page covers the React Children API, which allows manipulation and transformation of the JSX received as the children prop.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:59:28", "type": "code_examples", "page_metadata": {"ogUrl": "https://react.dev/reference/react/Children", "og:description": "The library for web and native user interfaces", "title": "Children – React", "twitter:site": "@reactjs", "twitter:title": "Children – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "ogTitle": "Children – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react/Children", "og:title": "Children – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "scrapeId": "d6df3620-c69f-41df-a94b-754ad62dd62e", "sourceURL": "https://react.dev/reference/react/Children", "url": "https://react.dev/reference/react/Children", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Children in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUsing `Children` is uncommon and can lead to fragile code. Consider using alternatives.\n\nWhen manipulating children, prefer to use the `Children` methods instead of directly accessing the `children` prop.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/Children", "title": "Children", "description": "This page covers the React Children API, which allows manipulation and transformation of the JSX received as the children prop.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 00:59:28", "type": "best_practices", "page_metadata": {"ogUrl": "https://react.dev/reference/react/Children", "og:description": "The library for web and native user interfaces", "title": "Children – React", "twitter:site": "@reactjs", "twitter:title": "Children – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "ogTitle": "Children – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react/Children", "og:title": "Children – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "scrapeId": "d6df3620-c69f-41df-a94b-754ad62dd62e", "sourceURL": "https://react.dev/reference/react/Children", "url": "https://react.dev/reference/react/Children", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useTransition is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useTransition in react-reference.\n\n# useTransition\n\n`useTransition` is a React Hook that lets you render a part of the UI in the background.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useTransition()`\nCall `useTransition` at the top level of your component to mark some state updates as Transitions.\n\n```javascript\nimport { useTransition } from 'react';\n\nfunction TabContainer() {\n\n  const [isPending, startTransition] = useTransition();\n\n  // ...\n}\n```\n\n#### Parameters\n`useTransition` does not take any parameters.\n\n#### Returns\n`useTransition` returns an array with exactly two items:\n\n1. The `isPending` flag that tells you whether there is a pending Transition.\n2. The `startTransition` function that lets you mark updates as a Transition.\n\n## startTransition(action)\n\nThe `startTransition` function returned by `useTransition` lets you mark an update as a Transition.\n\n```javascript\nfunction TabContainer() {\n\n  const [isPending, startTransition] = useTransition();\n\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n\n    startTransition(() => {\n\n      setTab(nextTab);\n\n    });\n\n  }\n\n  // ...\n}\n```\n\n### Note\n#### Functions called in `startTransition` are called “Actions”.\nThe function passed to `startTransition` is called an “Action”. By convention, any callback called inside `startTransition` (such as a callback prop) should be named `action` or include the “Action” suffix:\n\n```javascript\nfunction SubmitButton({ submitAction }) {\n\n  const [isPending, startTransition] = useTransition();\n\n  return (\n\n    <button\n\n      disabled={isPending}\n\n      onClick={() => {\n\n        startTransition(() => {\n\n          submitAction();\n\n        });\n\n      }}\n\n    >\n\n      Submit\n\n    </button>\n\n  );\n}\n```\n\n#### Parameters\n- `action`: A function that updates some state by calling one or more `set` functions. React calls `action` immediately with no parameters and marks all state updates scheduled synchronously during the `action` function call as Transitions. Any async calls that are awaited in the `action` will be included in the Transition, but currently require wrapping any `set` functions after the `await` in an additional `startTransition`.\n\n#### Returns\n`startTransition` does not return anything.\n\n## Usage\n\n### Perform non-blocking updates with Actions\nCall `useTransition` at the top of your component to create Actions, and access the pending state:\n\n```javascript\nimport {useState, useTransition} from 'react';\n\nfunction CheckoutForm() {\n\n  const [isPending, startTransition] = useTransition();\n\n  // ...\n}\n```\n\n`useTransition` returns an array with exactly two items:\n\n1. The `isPending` flag that tells you whether there is a pending Transition.\n2. The `startTransition` function that lets you create an Action.\n\nTo start a Transition, pass a function to `startTransition` like this:\n\n```javascript\nimport {useState, useTransition} from 'react';\n\nimport {updateQuantity} from './api';\n\nfunction CheckoutForm() {\n\n  const [isPending, startTransition] = useTransition();\n\n  const [quantity, setQuantity] = useState(1);\n\n  function onSubmit(newQuantity) {\n\n    startTransition(async function () {\n\n      const savedQuantity = await updateQuantity(newQuantity);\n\n      startTransition(() => {\n\n        setQuantity(savedQuantity);\n\n      });\n\n    });\n\n  }\n\n  // ...\n}\n```\n\nThe function passed to `startTransition` is called the “Action”. You can update state and (optionally) perform side effects within an Action, and the work will be done in the background without blocking user interactions on the page.\n\n## Troubleshooting\n\n### Updating an input in a Transition doesn’t work\nYou can’t use a Transition for a state variable that controls an input:\n\n```javascript\nconst [text, setText] = useState('');\n\n// ...\n\nfunction handleChange(e) {\n\n  // ❌ Can't use Transitions for controlled input state\n\n  startTransition(() => {\n\n    setText(e.target.value);\n\n  });\n\n}\n\n// ...\n\nreturn <input value={text} onChange={handleChange} />;\n```\n\nThis is because Transitions are non-blocking, but updating an input in response to the change event should happen synchronously.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useTransition", "title": "useTransition", "description": "`useTransition` is a React Hook that lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:46", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:title": "useTransition – React", "twitter:title": "useTransition – React", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useTransition", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "title": "useTransition – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "ogTitle": "useTransition – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "og:type": "website", "og:url": "https://react.dev/reference/react/useTransition", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "scrapeId": "34f2d62a-13bf-400f-a845-5ce84b43ddaa", "sourceURL": "https://react.dev/reference/react/useTransition", "url": "https://react.dev/reference/react/useTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useTransition()`\nCall `useTransition` at the top level of your component to mark some state updates as Transitions.\n\n```javascript\nimport { useTransition } from 'react';\n\nfunction TabContainer() {\n\n  const [isPending, startTransition] = useTransition();\n\n  // ...\n}\n```\n\n#### Parameters\n`useTransition` does not take any parameters.\n\n#### Returns\n`useTransition` returns an array with exactly two items:\n\n1. The `isPending` flag that tells you whether there is a pending Transition.\n2. The `startTransition` function that lets you mark updates as a Transition..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useTransition", "title": "useTransition", "description": "`useTransition` is a React Hook that lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:title": "useTransition – React", "twitter:title": "useTransition – React", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useTransition", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "title": "useTransition – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "ogTitle": "useTransition – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "og:type": "website", "og:url": "https://react.dev/reference/react/useTransition", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "scrapeId": "34f2d62a-13bf-400f-a845-5ce84b43ddaa", "sourceURL": "https://react.dev/reference/react/useTransition", "url": "https://react.dev/reference/react/useTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I starttransition(action) in react-reference?\n\nAssistant: To starttransition(action) in react-reference, here's what you do:\nThe `startTransition` function returned by `useTransition` lets you mark an update as a Transition.\n\n```javascript\nfunction TabContainer() {\n\n  const [isPending, startTransition] = useTransition();\n\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n\n    startTransition(() => {\n\n      setTab(nextTab);\n\n    });\n\n  }\n\n  // ...\n}\n```\n\n### Note\n#### Functions called in `startTransition` are called “Actions”.\nThe function passed to `startTransition` is called an “Action”. By convention, any callback called inside `startTransition` (such as a callback prop) should be named `action` or include the “Action” suffix:\n\n```javascript\nfunction SubmitButton({ submitAction }) {\n\n  const [isPending, startTransition] = useTransition();\n\n  return (\n\n    <button\n\n      disabled={isPending}\n\n      onClick={() => {\n\n        startTransition(() => {\n\n          submitAction();\n\n        });\n\n      }}\n\n    >\n\n      Submit\n\n    </button>\n\n  );\n}\n```\n\n#### Parameters\n- `action`: A function that updates some state by calling one or more `set` functions. React calls `action` immediately with no parameters and marks all state updates scheduled synchronously during the `action` function call as Transitions. Any async calls that are awaited in the `action` will be included in the Transition, but currently require wrapping any `set` functions after the `await` in an additional `startTransition`.\n\n#### Returns\n`startTransition` does not return anything..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useTransition", "title": "useTransition", "description": "`useTransition` is a React Hook that lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:title": "useTransition – React", "twitter:title": "useTransition – React", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useTransition", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "title": "useTransition – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "ogTitle": "useTransition – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "og:type": "website", "og:url": "https://react.dev/reference/react/useTransition", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "scrapeId": "34f2d62a-13bf-400f-a845-5ce84b43ddaa", "sourceURL": "https://react.dev/reference/react/useTransition", "url": "https://react.dev/reference/react/useTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Perform non-blocking updates with Actions\nCall `useTransition` at the top of your component to create Actions, and access the pending state:\n\n```javascript\nimport {useState, useTransition} from 'react';\n\nfunction CheckoutForm() {\n\n  const [isPending, startTransition] = useTransition();\n\n  // ...\n}\n```\n\n`useTransition` returns an array with exactly two items:\n\n1. The `isPending` flag that tells you whether there is a pending Transition.\n2. The `startTransition` function that lets you create an Action.\n\nTo start a Transition, pass a function to `startTransition` like this:\n\n```javascript\nimport {useState, useTransition} from 'react';\n\nimport {updateQuantity} from './api';\n\nfunction CheckoutForm() {\n\n  const [isPending, startTransition] = useTransition();\n\n  const [quantity, setQuantity] = useState(1);\n\n  function onSubmit(newQuantity) {\n\n    startTransition(async function () {\n\n      const savedQuantity = await updateQuantity(newQuantity);\n\n      startTransition(() => {\n\n        setQuantity(savedQuantity);\n\n      });\n\n    });\n\n  }\n\n  // ...\n}\n```\n\nThe function passed to `startTransition` is called the “Action”. You can update state and (optionally) perform side effects within an Action, and the work will be done in the background without blocking user interactions on the page..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useTransition", "title": "useTransition", "description": "`useTransition` is a React Hook that lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:title": "useTransition – React", "twitter:title": "useTransition – React", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useTransition", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "title": "useTransition – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "ogTitle": "useTransition – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "og:type": "website", "og:url": "https://react.dev/reference/react/useTransition", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "scrapeId": "34f2d62a-13bf-400f-a845-5ce84b43ddaa", "sourceURL": "https://react.dev/reference/react/useTransition", "url": "https://react.dev/reference/react/useTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### Updating an input in a Transition doesn’t work\nYou can’t use a Transition for a state variable that controls an input:\n\n```javascript\nconst [text, setText] = useState('');\n\n// ...\n\nfunction handleChange(e) {\n\n  // ❌ Can't use Transitions for controlled input state\n\n  startTransition(() => {\n\n    setText(e.target.value);\n\n  });\n\n}\n\n// ...\n\nreturn <input value={text} onChange={handleChange} />;\n```\n\nThis is because Transitions are non-blocking, but updating an input in response to the change event should happen synchronously..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useTransition", "title": "useTransition", "description": "`useTransition` is a React Hook that lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:46", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:title": "useTransition – React", "twitter:title": "useTransition – React", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useTransition", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "title": "useTransition – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "ogTitle": "useTransition – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "og:type": "website", "og:url": "https://react.dev/reference/react/useTransition", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "scrapeId": "34f2d62a-13bf-400f-a845-5ce84b43ddaa", "sourceURL": "https://react.dev/reference/react/useTransition", "url": "https://react.dev/reference/react/useTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useTransition in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useTransition Example**:\n\n```yaml\nconst [isPending, startTransition] = useTransition();\n```\n\nThis snippet shows you how to basic usetransition example, which is an important aspect of usetransition.\n\n**Using startTransition in a Component**:\n\n```yaml\nimport { useTransition } from 'react';\n\nfunction TabContainer() {\n  const [isPending, startTransition] = useTransition();\n  // ...\n}\n```\n\nThis snippet shows you how to using starttransition in a component, which is an important aspect of usetransition.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useTransition", "title": "useTransition", "description": "`useTransition` is a React Hook that lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:46", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:title": "useTransition – React", "twitter:title": "useTransition – React", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useTransition", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "title": "useTransition – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "ogTitle": "useTransition – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "og:type": "website", "og:url": "https://react.dev/reference/react/useTransition", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "scrapeId": "34f2d62a-13bf-400f-a845-5ce84b43ddaa", "sourceURL": "https://react.dev/reference/react/useTransition", "url": "https://react.dev/reference/react/useTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useTransition in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCall `useTransition` at the top level of your component to mark some state updates as Transitions.\n\nUse `startTransition` to mark updates as a Transition and keep the UI responsive.\n\nWrap any state updates after async requests in another `startTransition` to mark them as Transitions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useTransition", "title": "useTransition", "description": "`useTransition` is a React Hook that lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 00:59:46", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:title": "useTransition – React", "twitter:title": "useTransition – React", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useTransition", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "title": "useTransition – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "ogTitle": "useTransition – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "og:type": "website", "og:url": "https://react.dev/reference/react/useTransition", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "scrapeId": "34f2d62a-13bf-400f-a845-5ce84b43ddaa", "sourceURL": "https://react.dev/reference/react/useTransition", "url": "https://react.dev/reference/react/useTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what captureOwnerStack is in react-reference?\n\nAssistant: Sure, I'd be happy to explain captureOwnerStack in react-reference.\n\n# captureOwnerStack\n\nThe `captureOwnerStack` API is currently only available in React’s Canary and experimental channels. It reads the current Owner Stack in development and returns it as a string if available.Here's a quick rundown of what this is about:\n\n## Reference\n\nCall `captureOwnerStack` to get the current Owner Stack.\n\n```sp-pre-placeholder grow-[2]\nimport * as React from 'react';\n\nfunction Component() {\n\n  if (process.env.NODE_ENV !== 'production') {\n\n    const ownerStack = React.captureOwnerStack();\n\n    console.log(ownerStack);\n\n  }\n}\n```\n\n#### Parameters\n`captureOwnerStack` does not take any parameters.\n\n#### Returns\n`captureOwnerStack` returns `string | null`.\n\nOwner Stacks are available in\n\n- Component render\n- Effects (e.g. `useEffect`)\n- React’s event handlers (e.g. `<button onClick={...} />`)\n- React error handlers ( [React Root options](https://react.dev/reference/react-dom/client/createRoot#parameters) `onCaughtError`, `onRecoverableError`, and `onUncaughtError`)\n\nIf no Owner Stack is available, `null` is returned (see [Troubleshooting: The Owner Stack is `null`](https://react.dev/reference/react/captureOwnerStack#the-owner-stack-is-null)).\n\n#### Caveats\n- Owner Stacks are only available in development. `captureOwnerStack` will always return `null` outside of development.\n\n## Deep Dive\n\n#### Owner Stack vs Component Stack\nThe Owner Stack is different from the Component Stack available in React error handlers like [`errorInfo.componentStack` in `onUncaughtError`](https://react.dev/reference/react-dom/client/hydrateRoot#show-a-dialog-for-uncaught-errors).\n\nFor example, consider the following code:\n\n```sp-pre-placeholder grow-[2]\nimport {captureOwnerStack} from 'react';\nimport {createRoot} from 'react-dom/client';\nimport App, {Component} from './App.js';\nimport './styles.css';\n\ncreateRoot(document.createElement('div'), {\n  onUncaughtError: (error, errorInfo) => {\n    console.log(errorInfo.componentStack);\n    console.log(captureOwnerStack());\n  },\n}).render(\n  <App>\n    <Component label=\"disabled\" />\n  </App>\n);\n```\n\n`SubComponent` would throw an error. The Component Stack of that error would be\n\n```sp-pre-placeholder grow-[2]\nat SubComponent\n\nat fieldset\n\nat Component\n\nat main\n\nat React.Suspense\n\nat App\n```\n\nHowever, the Owner Stack would only read\n\n```sp-pre-placeholder grow-[2]\nat Component\n```\n\nNeither `App` nor the DOM components (e.g. `fieldset`) are considered Owners in this Stack since they didn’t contribute to “creating” the node containing `SubComponent`. `App` and DOM components only forwarded the node. `App` just rendered the `children` node as opposed to `Component` which created a node containing `SubComponent` via `<SubComponent />`.\n\n## Usage\n\n### Enhance a custom error overlay\n```sp-pre-placeholder grow-[2]\nimport { captureOwnerStack } from \"react\";\n\nimport { instrumentedConsoleError } from \"./errorOverlay\";\n\nconst originalConsoleError = console.error;\n\nconsole.error = function patchedConsoleError(...args) {\n  originalConsoleError.apply(console, args);\n\n  const ownerStack = captureOwnerStack();\n\n  onConsoleError({\n    consoleMessage: args[0],\n    ownerStack,\n  });\n};\n```\n\nIf you intercept `console.error` calls to highlight them in an error overlay, you can call `captureOwnerStack` to include the Owner Stack.\n\n## Troubleshooting\n\n### The Owner Stack is `null`\nThe call of `captureOwnerStack` happened outside of a React controlled function e.g. in a `setTimeout` callback, after a `fetch` call or in a custom DOM event handler. During render, Effects, React event handlers, and React error handlers (e.g. `hydrateRoot#options.onCaughtError`) Owner Stacks should be available.\n\nIn the example below, clicking the button will log an empty Owner Stack because `captureOwnerStack` was called during a custom DOM event handler. The Owner Stack must be captured earlier e.g. by moving the call of `captureOwnerStack` into the Effect body.\n\n```sp-pre-placeholder grow-[2]\nimport {captureOwnerStack, useEffect} from 'react';\n\nexport default function App() {\n  useEffect(() => {\n    function handleEvent() {\n      console.log('Owner Stack: ', captureOwnerStack());\n    }\n\n    document.addEventListener('click', handleEvent);\n\n    return () => {\n      document.removeEventListener('click', handleEvent);\n    }\n  })\n\n  return <button>Click me to see that Owner Stacks are not available in custom DOM event handlers</button>;\n}\n```\n\n### `captureOwnerStack` is not available\n`captureOwnerStack` is only exported in development builds. It will be `undefined` in production builds. If `captureOwnerStack` is used in files that are bundled for production and development, you should conditionally access it from a namespace import.\n\n```sp-pre-placeholder grow-[2]\nimport * as React from 'react';\n\nif (process.env.NODE_ENV !== 'production') {\n  const ownerStack = React.captureOwnerStack();\n  console.log('Owner Stack', ownerStack);\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/captureOwnerStack", "title": "captureOwnerStack", "description": "The `captureOwnerStack` API is currently only available in React’s Canary and experimental channels. It reads the current Owner Stack in development and returns it as a string if available.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:00:02", "type": "overview", "page_metadata": {"theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/captureOwnerStack", "favicon": "https://react.dev/favicon-32x32.png", "title": "captureOwnerStack – React", "ogUrl": "https://react.dev/reference/react/captureOwnerStack", "ogDescription": "The library for web and native user interfaces", "og:title": "captureOwnerStack – React", "language": "en", "twitter:site": "@reactjs", "ogTitle": "captureOwnerStack – React", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:title": "captureOwnerStack – React", "scrapeId": "66df929f-a9e6-48e9-bd61-b7cc669c9242", "sourceURL": "https://react.dev/reference/react/captureOwnerStack", "url": "https://react.dev/reference/react/captureOwnerStack", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `captureOwnerStack` to get the current Owner Stack.\n\n```sp-pre-placeholder grow-[2]\nimport * as React from 'react';\n\nfunction Component() {\n\n  if (process.env.NODE_ENV !== 'production') {\n\n    const ownerStack = React.captureOwnerStack();\n\n    console.log(ownerStack);\n\n  }\n}\n```\n\n#### Parameters\n`captureOwnerStack` does not take any parameters.\n\n#### Returns\n`captureOwnerStack` returns `string | null`.\n\nOwner Stacks are available in\n\n- Component render\n- Effects (e.g. `useEffect`)\n- React’s event handlers (e.g. `<button onClick={...} />`)\n- React error handlers ( [React Root options](https://react.dev/reference/react-dom/client/createRoot#parameters) `onCaughtError`, `onRecoverableError`, and `onUncaughtError`)\n\nIf no Owner Stack is available, `null` is returned (see [Troubleshooting: The Owner Stack is `null`](https://react.dev/reference/react/captureOwnerStack#the-owner-stack-is-null)).\n\n#### Caveats\n- Owner Stacks are only available in development. `captureOwnerStack` will always return `null` outside of development..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/captureOwnerStack", "title": "captureOwnerStack", "description": "The `captureOwnerStack` API is currently only available in React’s Canary and experimental channels. It reads the current Owner Stack in development and returns it as a string if available.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:00:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/captureOwnerStack", "favicon": "https://react.dev/favicon-32x32.png", "title": "captureOwnerStack – React", "ogUrl": "https://react.dev/reference/react/captureOwnerStack", "ogDescription": "The library for web and native user interfaces", "og:title": "captureOwnerStack – React", "language": "en", "twitter:site": "@reactjs", "ogTitle": "captureOwnerStack – React", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:title": "captureOwnerStack – React", "scrapeId": "66df929f-a9e6-48e9-bd61-b7cc669c9242", "sourceURL": "https://react.dev/reference/react/captureOwnerStack", "url": "https://react.dev/reference/react/captureOwnerStack", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deep dive in react-reference?\n\nAssistant: To deep dive in react-reference, here's what you do:\n#### Owner Stack vs Component Stack\nThe Owner Stack is different from the Component Stack available in React error handlers like [`errorInfo.componentStack` in `onUncaughtError`](https://react.dev/reference/react-dom/client/hydrateRoot#show-a-dialog-for-uncaught-errors).\n\nFor example, consider the following code:\n\n```sp-pre-placeholder grow-[2]\nimport {captureOwnerStack} from 'react';\nimport {createRoot} from 'react-dom/client';\nimport App, {Component} from './App.js';\nimport './styles.css';\n\ncreateRoot(document.createElement('div'), {\n  onUncaughtError: (error, errorInfo) => {\n    console.log(errorInfo.componentStack);\n    console.log(captureOwnerStack());\n  },\n}).render(\n  <App>\n    <Component label=\"disabled\" />\n  </App>\n);\n```\n\n`SubComponent` would throw an error. The Component Stack of that error would be\n\n```sp-pre-placeholder grow-[2]\nat SubComponent\n\nat fieldset\n\nat Component\n\nat main\n\nat React.Suspense\n\nat App\n```\n\nHowever, the Owner Stack would only read\n\n```sp-pre-placeholder grow-[2]\nat Component\n```\n\nNeither `App` nor the DOM components (e.g. `fieldset`) are considered Owners in this Stack since they didn’t contribute to “creating” the node containing `SubComponent`. `App` and DOM components only forwarded the node. `App` just rendered the `children` node as opposed to `Component` which created a node containing `SubComponent` via `<SubComponent />`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/captureOwnerStack", "title": "captureOwnerStack", "description": "The `captureOwnerStack` API is currently only available in React’s Canary and experimental channels. It reads the current Owner Stack in development and returns it as a string if available.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:00:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/captureOwnerStack", "favicon": "https://react.dev/favicon-32x32.png", "title": "captureOwnerStack – React", "ogUrl": "https://react.dev/reference/react/captureOwnerStack", "ogDescription": "The library for web and native user interfaces", "og:title": "captureOwnerStack – React", "language": "en", "twitter:site": "@reactjs", "ogTitle": "captureOwnerStack – React", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:title": "captureOwnerStack – React", "scrapeId": "66df929f-a9e6-48e9-bd61-b7cc669c9242", "sourceURL": "https://react.dev/reference/react/captureOwnerStack", "url": "https://react.dev/reference/react/captureOwnerStack", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Enhance a custom error overlay\n```sp-pre-placeholder grow-[2]\nimport { captureOwnerStack } from \"react\";\n\nimport { instrumentedConsoleError } from \"./errorOverlay\";\n\nconst originalConsoleError = console.error;\n\nconsole.error = function patchedConsoleError(...args) {\n  originalConsoleError.apply(console, args);\n\n  const ownerStack = captureOwnerStack();\n\n  onConsoleError({\n    consoleMessage: args[0],\n    ownerStack,\n  });\n};\n```\n\nIf you intercept `console.error` calls to highlight them in an error overlay, you can call `captureOwnerStack` to include the Owner Stack..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/captureOwnerStack", "title": "captureOwnerStack", "description": "The `captureOwnerStack` API is currently only available in React’s Canary and experimental channels. It reads the current Owner Stack in development and returns it as a string if available.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:00:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/captureOwnerStack", "favicon": "https://react.dev/favicon-32x32.png", "title": "captureOwnerStack – React", "ogUrl": "https://react.dev/reference/react/captureOwnerStack", "ogDescription": "The library for web and native user interfaces", "og:title": "captureOwnerStack – React", "language": "en", "twitter:site": "@reactjs", "ogTitle": "captureOwnerStack – React", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:title": "captureOwnerStack – React", "scrapeId": "66df929f-a9e6-48e9-bd61-b7cc669c9242", "sourceURL": "https://react.dev/reference/react/captureOwnerStack", "url": "https://react.dev/reference/react/captureOwnerStack", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### The Owner Stack is `null`\nThe call of `captureOwnerStack` happened outside of a React controlled function e.g. in a `setTimeout` callback, after a `fetch` call or in a custom DOM event handler. During render, Effects, React event handlers, and React error handlers (e.g. `hydrateRoot#options.onCaughtError`) Owner Stacks should be available.\n\nIn the example below, clicking the button will log an empty Owner Stack because `captureOwnerStack` was called during a custom DOM event handler. The Owner Stack must be captured earlier e.g. by moving the call of `captureOwnerStack` into the Effect body.\n\n```sp-pre-placeholder grow-[2]\nimport {captureOwnerStack, useEffect} from 'react';\n\nexport default function App() {\n  useEffect(() => {\n    function handleEvent() {\n      console.log('Owner Stack: ', captureOwnerStack());\n    }\n\n    document.addEventListener('click', handleEvent);\n\n    return () => {\n      document.removeEventListener('click', handleEvent);\n    }\n  })\n\n  return <button>Click me to see that Owner Stacks are not available in custom DOM event handlers</button>;\n}\n```\n\n### `captureOwnerStack` is not available\n`captureOwnerStack` is only exported in development builds. It will be `undefined` in production builds. If `captureOwnerStack` is used in files that are bundled for production and development, you should conditionally access it from a namespace import.\n\n```sp-pre-placeholder grow-[2]\nimport * as React from 'react';\n\nif (process.env.NODE_ENV !== 'production') {\n  const ownerStack = React.captureOwnerStack();\n  console.log('Owner Stack', ownerStack);\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/captureOwnerStack", "title": "captureOwnerStack", "description": "The `captureOwnerStack` API is currently only available in React’s Canary and experimental channels. It reads the current Owner Stack in development and returns it as a string if available.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:00:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/captureOwnerStack", "favicon": "https://react.dev/favicon-32x32.png", "title": "captureOwnerStack – React", "ogUrl": "https://react.dev/reference/react/captureOwnerStack", "ogDescription": "The library for web and native user interfaces", "og:title": "captureOwnerStack – React", "language": "en", "twitter:site": "@reactjs", "ogTitle": "captureOwnerStack – React", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:title": "captureOwnerStack – React", "scrapeId": "66df929f-a9e6-48e9-bd61-b7cc669c9242", "sourceURL": "https://react.dev/reference/react/captureOwnerStack", "url": "https://react.dev/reference/react/captureOwnerStack", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for captureOwnerStack in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of captureOwnerStack**:\n\n```yaml\nconst stack = captureOwnerStack();\n```\n\nThis snippet shows you how to basic usage of captureownerstack, which is an important aspect of captureownerstack.\n\n**Capture Owner Stack in Component**:\n\n```yaml\nimport * as React from 'react';\n\nfunction Component() {\n\n  if (process.env.NODE_ENV !== 'production') {\n\n    const ownerStack = React.captureOwnerStack();\n\n    console.log(ownerStack);\n  }\n}\n```\n\nThis snippet shows you how to capture owner stack in component, which is an important aspect of captureownerstack.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/captureOwnerStack", "title": "captureOwnerStack", "description": "The `captureOwnerStack` API is currently only available in React’s Canary and experimental channels. It reads the current Owner Stack in development and returns it as a string if available.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:00:02", "type": "code_examples", "page_metadata": {"theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/captureOwnerStack", "favicon": "https://react.dev/favicon-32x32.png", "title": "captureOwnerStack – React", "ogUrl": "https://react.dev/reference/react/captureOwnerStack", "ogDescription": "The library for web and native user interfaces", "og:title": "captureOwnerStack – React", "language": "en", "twitter:site": "@reactjs", "ogTitle": "captureOwnerStack – React", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:title": "captureOwnerStack – React", "scrapeId": "66df929f-a9e6-48e9-bd61-b7cc669c9242", "sourceURL": "https://react.dev/reference/react/captureOwnerStack", "url": "https://react.dev/reference/react/captureOwnerStack", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using captureOwnerStack in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOwner Stacks are only available in development. `captureOwnerStack` will always return `null` outside of development.\n\nIf you intercept `console.error` calls to highlight them in an error overlay, you can call `captureOwnerStack` to include the Owner Stack.\n\nWhen using `captureOwnerStack` in files that are bundled for production and development, conditionally access it from a namespace import.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/captureOwnerStack", "title": "captureOwnerStack", "description": "The `captureOwnerStack` API is currently only available in React’s Canary and experimental channels. It reads the current Owner Stack in development and returns it as a string if available.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:00:02", "type": "best_practices", "page_metadata": {"theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/captureOwnerStack", "favicon": "https://react.dev/favicon-32x32.png", "title": "captureOwnerStack – React", "ogUrl": "https://react.dev/reference/react/captureOwnerStack", "ogDescription": "The library for web and native user interfaces", "og:title": "captureOwnerStack – React", "language": "en", "twitter:site": "@reactjs", "ogTitle": "captureOwnerStack – React", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "twitter:title": "captureOwnerStack – React", "scrapeId": "66df929f-a9e6-48e9-bd61-b7cc669c9242", "sourceURL": "https://react.dev/reference/react/captureOwnerStack", "url": "https://react.dev/reference/react/captureOwnerStack", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useReducer is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useReducer in react-reference.\n\n# useReducer\n\nuseReducer is a React Hook that lets you add a reducer to your component.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useReducer(reducer, initialArg, init?)`\nCall `useReducer` at the top level of your component to manage its state with a [reducer.](https://react.dev/learn/extracting-state-logic-into-a-reducer)\n\n```sp-pre-placeholder grow-[2]\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n\n  // ...\n\n}\n\nfunction MyComponent() {\n\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n\n  // ...\n```\n\n[See more examples below.](https://react.dev/reference/react/useReducer#usage)\n\n#### Parameters\n- `reducer`: The reducer function that specifies how the state gets updated. It must be pure, should take the state and action as arguments, and should return the next state. State and action can be of any types.\n- `initialArg`: The value from which the initial state is calculated. It can be a value of any type. How the initial state is calculated from it depends on the next `init` argument.\n- **optional** `init`: The initializer function that should return the initial state. If it’s not specified, the initial state is set to `initialArg`. Otherwise, the initial state is set to the result of calling `init(initialArg)`.\n\n#### Returns\n`useReducer` returns an array with exactly two values:\n1. The current state. During the first render, it’s set to `init(initialArg)` or `initialArg` (if there’s no `init`).\n2. The [`dispatch` function](https://react.dev/reference/react/useReducer#dispatch) that lets you update the state to a different value and trigger a re-render.\n\n#### Caveats\n- `useReducer` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- The `dispatch` function has a stable identity, so you will often see it omitted from Effect dependencies, but including it will not cause the Effect to fire. If the linter lets you omit a dependency without errors, it is safe to do. [Learn more about removing Effect dependencies.](https://react.dev/learn/removing-effect-dependencies#move-dynamic-objects-and-functions-inside-your-effect)\n- In Strict Mode, React will **call your reducer and initializer twice** in order to [help you find accidental impurities.](https://react.dev/reference/react/useReducer#my-reducer-or-initializer-function-runs-twice) This is development-only behavior and does not affect production. If your reducer and initializer are pure (as they should be), this should not affect your logic. The result from one of the calls is ignored.\n\n## dispatch function\n\nThe `dispatch` function returned by `useReducer` lets you update the state to a different value and trigger a re-render. You need to pass the action as the only argument to the `dispatch` function:\n\n```sp-pre-placeholder grow-[2]\nconst [state, dispatch] = useReducer(reducer, { age: 42 });\n\nfunction handleClick() {\n\n  dispatch({ type: 'incremented_age' });\n\n  // ...\n```\n\n#### Parameters\n- `action`: The action performed by the user. It can be a value of any type. By convention, an action is usually an object with a `type` property identifying it and, optionally, other properties with additional information.\n\n#### Returns\n`dispatch` functions do not have a return value.\n\n#### Caveats\n- The `dispatch` function **only updates the state variable for the _next_ render**. If you read the state variable after calling the `dispatch` function, [you will still get the old value](https://react.dev/reference/react/useReducer#ive-dispatched-an-action-but-logging-gives-me-the-old-state-value) that was on the screen before your call.\n- If the new value you provide is identical to the current `state`, as determined by an [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison, React will **skip re-rendering the component and its children.** This is an optimization. React may still need to call your component before ignoring the result, but it shouldn’t affect your code.\n- React [batches state updates.](https://react.dev/learn/queueing-a-series-of-state-updates) It updates the screen **after all the event handlers have run** and have called their `set` functions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use [`flushSync`.](https://react.dev/reference/react-dom/flushSync)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useReducer", "title": "useReducer", "description": "useReducer is a React Hook that lets you add a reducer to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:00:23", "type": "overview", "page_metadata": {"og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:title": "useReducer – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "useReducer – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "useReducer – React", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react/useReducer", "language": "en", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/reference/react/useReducer", "twitter:card": "summary_large_image", "ogTitle": "useReducer – React", "og:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "b69fdd92-7c67-4399-8ad2-d03d808a2a69", "sourceURL": "https://react.dev/reference/react/useReducer", "url": "https://react.dev/reference/react/useReducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useReducer(reducer, initialArg, init?)`\nCall `useReducer` at the top level of your component to manage its state with a [reducer.](https://react.dev/learn/extracting-state-logic-into-a-reducer)\n\n```sp-pre-placeholder grow-[2]\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n\n  // ...\n\n}\n\nfunction MyComponent() {\n\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n\n  // ...\n```\n\n[See more examples below.](https://react.dev/reference/react/useReducer#usage)\n\n#### Parameters\n- `reducer`: The reducer function that specifies how the state gets updated. It must be pure, should take the state and action as arguments, and should return the next state. State and action can be of any types.\n- `initialArg`: The value from which the initial state is calculated. It can be a value of any type. How the initial state is calculated from it depends on the next `init` argument.\n- **optional** `init`: The initializer function that should return the initial state. If it’s not specified, the initial state is set to `initialArg`. Otherwise, the initial state is set to the result of calling `init(initialArg)`.\n\n#### Returns\n`useReducer` returns an array with exactly two values:\n1. The current state. During the first render, it’s set to `init(initialArg)` or `initialArg` (if there’s no `init`).\n2. The [`dispatch` function](https://react.dev/reference/react/useReducer#dispatch) that lets you update the state to a different value and trigger a re-render.\n\n#### Caveats\n- `useReducer` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- The `dispatch` function has a stable identity, so you will often see it omitted from Effect dependencies, but including it will not cause the Effect to fire. If the linter lets you omit a dependency without errors, it is safe to do. [Learn more about removing Effect dependencies.](https://react.dev/learn/removing-effect-dependencies#move-dynamic-objects-and-functions-inside-your-effect)\n- In Strict Mode, React will **call your reducer and initializer twice** in order to [help you find accidental impurities.](https://react.dev/reference/react/useReducer#my-reducer-or-initializer-function-runs-twice) This is development-only behavior and does not affect production. If your reducer and initializer are pure (as they should be), this should not affect your logic. The result from one of the calls is ignored..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useReducer", "title": "useReducer", "description": "useReducer is a React Hook that lets you add a reducer to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:00:23", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:title": "useReducer – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "useReducer – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "useReducer – React", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react/useReducer", "language": "en", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/reference/react/useReducer", "twitter:card": "summary_large_image", "ogTitle": "useReducer – React", "og:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "b69fdd92-7c67-4399-8ad2-d03d808a2a69", "sourceURL": "https://react.dev/reference/react/useReducer", "url": "https://react.dev/reference/react/useReducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I dispatch function in react-reference?\n\nAssistant: To dispatch function in react-reference, here's what you do:\nThe `dispatch` function returned by `useReducer` lets you update the state to a different value and trigger a re-render. You need to pass the action as the only argument to the `dispatch` function:\n\n```sp-pre-placeholder grow-[2]\nconst [state, dispatch] = useReducer(reducer, { age: 42 });\n\nfunction handleClick() {\n\n  dispatch({ type: 'incremented_age' });\n\n  // ...\n```\n\n#### Parameters\n- `action`: The action performed by the user. It can be a value of any type. By convention, an action is usually an object with a `type` property identifying it and, optionally, other properties with additional information.\n\n#### Returns\n`dispatch` functions do not have a return value.\n\n#### Caveats\n- The `dispatch` function **only updates the state variable for the _next_ render**. If you read the state variable after calling the `dispatch` function, [you will still get the old value](https://react.dev/reference/react/useReducer#ive-dispatched-an-action-but-logging-gives-me-the-old-state-value) that was on the screen before your call.\n- If the new value you provide is identical to the current `state`, as determined by an [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison, React will **skip re-rendering the component and its children.** This is an optimization. React may still need to call your component before ignoring the result, but it shouldn’t affect your code.\n- React [batches state updates.](https://react.dev/learn/queueing-a-series-of-state-updates) It updates the screen **after all the event handlers have run** and have called their `set` functions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use [`flushSync`.](https://react.dev/reference/react-dom/flushSync).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useReducer", "title": "useReducer", "description": "useReducer is a React Hook that lets you add a reducer to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:00:23", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:title": "useReducer – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "useReducer – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "useReducer – React", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react/useReducer", "language": "en", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/reference/react/useReducer", "twitter:card": "summary_large_image", "ogTitle": "useReducer – React", "og:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "b69fdd92-7c67-4399-8ad2-d03d808a2a69", "sourceURL": "https://react.dev/reference/react/useReducer", "url": "https://react.dev/reference/react/useReducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useReducer in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useReducer example**:\n\n```yaml\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n  if (action.type === 'incremented_age') {\n    return {\n      age: state.age + 1\n    };\n  }\n  throw Error('Unknown action.');\n}\n\nexport default function Counter() {\n  const [state, dispatch] = useReducer(reducer, { age: 42 });\n\n  return (\n    <>\n      <button onClick={() => {\n        dispatch({ type: 'incremented_age' })\n      }}>\n        Increment age\n      </button>\n      <p>Hello! You are {state.age}.</p>\n    </>\n  );\n}\n```\n\nThis snippet shows you how to basic usereducer example, which is an important aspect of usereducer.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useReducer", "title": "useReducer", "description": "useReducer is a React Hook that lets you add a reducer to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:00:23", "type": "code_examples", "page_metadata": {"og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:title": "useReducer – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "useReducer – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "useReducer – React", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react/useReducer", "language": "en", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/reference/react/useReducer", "twitter:card": "summary_large_image", "ogTitle": "useReducer – React", "og:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "b69fdd92-7c67-4399-8ad2-d03d808a2a69", "sourceURL": "https://react.dev/reference/react/useReducer", "url": "https://react.dev/reference/react/useReducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useReducer in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways return new objects from your reducer instead of mutating existing state objects.\n\nUse the `dispatch` function to update state and trigger re-renders, but remember that it only updates the state for the next render.\n\nIn Strict Mode, be aware that your reducer and initializer functions will be called twice to help identify impurities.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useReducer", "title": "useReducer", "description": "useReducer is a React Hook that lets you add a reducer to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:00:23", "type": "best_practices", "page_metadata": {"og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:title": "useReducer – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "useReducer – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "title": "useReducer – React", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react/useReducer", "language": "en", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/reference/react/useReducer", "twitter:card": "summary_large_image", "ogTitle": "useReducer – React", "og:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "b69fdd92-7c67-4399-8ad2-d03d808a2a69", "sourceURL": "https://react.dev/reference/react/useReducer", "url": "https://react.dev/reference/react/useReducer", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Built-in React Hooks is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Built-in React Hooks in react-reference.\n\n# Built-in React Hooks\n\nHooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.Here's a quick rundown of what this is about:\n\n## State Hooks\n\nState lets a component \"remember\" information like user input. For example, a form component can use state to store the input value, while an image gallery component can use state to store the selected image index.\n\nTo add state to a component, use one of these Hooks:\n\n- `useState` declares a state variable that you can update directly.\n- `useReducer` declares a state variable with the update logic inside a reducer function.\n\n## Context Hooks\n\nContext lets a component receive information from distant parents without passing it as props. For example, your app’s top-level component can pass the current UI theme to all components below, no matter how deep.\n\n- `useContext` reads and subscribes to a context.\n\n## Ref Hooks\n\nRefs let a component hold some information that isn’t used for rendering, like a DOM node or a timeout ID. Unlike with state, updating a ref does not re-render your component. Refs are an “escape hatch” from the React paradigm. They are useful when you need to work with non-React systems, such as the built-in browser APIs.\n\n- `useRef` declares a ref. You can hold any value in it, but most often it’s used to hold a DOM node.\n- `useImperativeHandle` lets you customize the ref exposed by your component. This is rarely used.\n\n## Effect Hooks\n\nEffects let a component connect to and synchronize with external systems. This includes dealing with network, browser DOM, animations, widgets written using a different UI library, and other non-React code.\n\n- `useEffect` connects a component to an external system.\n\nEffects are an “escape hatch” from the React paradigm. Don’t use Effects to orchestrate the data flow of your application. If you’re not interacting with an external system, you might not need an Effect.\n\n## Performance Hooks\n\nA common way to optimize re-rendering performance is to skip unnecessary work. For example, you can tell React to reuse a cached calculation or to skip a re-render if the data has not changed since the previous render.\n\nTo skip calculations and unnecessary re-rendering, use one of these Hooks:\n\n- `useMemo` lets you cache the result of an expensive calculation.\n- `useCallback` lets you cache a function definition before passing it down to an optimized component.\n\n## Other Hooks\n\nThese Hooks are mostly useful to library authors and aren’t commonly used in the application code.\n\n- `useDebugValue` lets you customize the label React DevTools displays for your custom Hook.\n- `useId` lets a component associate a unique ID with itself. Typically used with accessibility APIs.\n- `useSyncExternalStore` lets a component subscribe to an external store.\n\n## Your own Hooks\n\nYou can also define your own custom Hooks as JavaScript functions.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "overview", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I state hooks in react-reference?\n\nAssistant: To state hooks in react-reference, here's what you do:\nState lets a component \"remember\" information like user input. For example, a form component can use state to store the input value, while an image gallery component can use state to store the selected image index.\n\nTo add state to a component, use one of these Hooks:\n\n- `useState` declares a state variable that you can update directly.\n- `useReducer` declares a state variable with the update logic inside a reducer function..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "section_detail", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I context hooks in react-reference?\n\nAssistant: To context hooks in react-reference, here's what you do:\nContext lets a component receive information from distant parents without passing it as props. For example, your app’s top-level component can pass the current UI theme to all components below, no matter how deep.\n\n- `useContext` reads and subscribes to a context..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "section_detail", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I ref hooks in react-reference?\n\nAssistant: To ref hooks in react-reference, here's what you do:\nRefs let a component hold some information that isn’t used for rendering, like a DOM node or a timeout ID. Unlike with state, updating a ref does not re-render your component. Refs are an “escape hatch” from the React paradigm. They are useful when you need to work with non-React systems, such as the built-in browser APIs.\n\n- `useRef` declares a ref. You can hold any value in it, but most often it’s used to hold a DOM node.\n- `useImperativeHandle` lets you customize the ref exposed by your component. This is rarely used..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "section_detail", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I effect hooks in react-reference?\n\nAssistant: To effect hooks in react-reference, here's what you do:\nEffects let a component connect to and synchronize with external systems. This includes dealing with network, browser DOM, animations, widgets written using a different UI library, and other non-React code.\n\n- `useEffect` connects a component to an external system.\n\nEffects are an “escape hatch” from the React paradigm. Don’t use Effects to orchestrate the data flow of your application. If you’re not interacting with an external system, you might not need an Effect..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "section_detail", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I performance hooks in react-reference?\n\nAssistant: To performance hooks in react-reference, here's what you do:\nA common way to optimize re-rendering performance is to skip unnecessary work. For example, you can tell React to reuse a cached calculation or to skip a re-render if the data has not changed since the previous render.\n\nTo skip calculations and unnecessary re-rendering, use one of these Hooks:\n\n- `useMemo` lets you cache the result of an expensive calculation.\n- `useCallback` lets you cache a function definition before passing it down to an optimized component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "section_detail", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I other hooks in react-reference?\n\nAssistant: To other hooks in react-reference, here's what you do:\nThese Hooks are mostly useful to library authors and aren’t commonly used in the application code.\n\n- `useDebugValue` lets you customize the label React DevTools displays for your custom Hook.\n- `useId` lets a component associate a unique ID with itself. Typically used with accessibility APIs.\n- `useSyncExternalStore` lets a component subscribe to an external store..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "section_detail", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I your own hooks in react-reference?\n\nAssistant: To your own hooks in react-reference, here's what you do:\nYou can also define your own custom Hooks as JavaScript functions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "section_detail", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Built-in React Hooks in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**ImageGallery Component**:\n\n```yaml\nfunction ImageGallery() {\n\n  const [index, setIndex] = useState(0);\n\n  // ...\n}\n```\n\nThis snippet shows you how to imagegallery component, which is an important aspect of built-in react hooks.\n\n**Button Component**:\n\n```yaml\nfunction Button() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n}\n```\n\nThis snippet shows you how to button component, which is an important aspect of built-in react hooks.\n\n**Form Component**:\n\n```yaml\nfunction Form() {\n\n  const inputRef = useRef(null);\n\n  // ...\n}\n```\n\nThis snippet shows you how to form component, which is an important aspect of built-in react hooks.\n\n**ChatRoom Component**:\n\n```yaml\nfunction ChatRoom({ roomId }) {\n\n  useEffect(() => {\n\n    const connection = createConnection(roomId);\n\n    connection.connect();\n\n    return () => connection.disconnect();\n\n  }, [roomId]);\n\n  // ...\n}\n```\n\nThis snippet shows you how to chatroom component, which is an important aspect of built-in react hooks.\n\n**TodoList Component**:\n\n```yaml\nfunction TodoList({ todos, tab, theme }) {\n\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\n  // ...\n}\n```\n\nThis snippet shows you how to todolist component, which is an important aspect of built-in react hooks.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "code_examples", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Built-in React Hooks in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDon’t use Effects to orchestrate the data flow of your application. If you’re not interacting with an external system, you might not need an Effect.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/hooks", "title": "Built-in React Hooks", "description": "Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:00:35", "type": "best_practices", "page_metadata": {"title": "Built-in React Hooks – React", "og:title": "Built-in React Hooks – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/hooks", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "Built-in React Hooks – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "ogTitle": "Built-in React Hooks – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/hooks", "scrapeId": "1f362a75-218f-4c14-9fdf-5c95660ddebe", "sourceURL": "https://react.dev/reference/react/hooks", "url": "https://react.dev/reference/react/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what <Suspense> is in react-reference?\n\nAssistant: Sure, I'd be happy to explain <Suspense> in react-reference.\n\n# <Suspense>\n\n<Suspense> lets you display a fallback until its children have finished loading.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `<Suspense>`\n\n#### Props\n\n- `children`: The actual UI you intend to render. If `children` suspends while rendering, the Suspense boundary will switch to rendering `fallback`.\n- `fallback`: An alternate UI to render in place of the actual UI if it has not finished loading. Any valid React node is accepted, though in practice, a fallback is a lightweight placeholder view, such as a loading spinner or skeleton. Suspense will automatically switch to `fallback` when `children` suspends, and back to `children` when the data is ready. If `fallback` suspends while rendering, it will activate the closest parent Suspense boundary.\n\n#### Caveats\n\n- React does not preserve any state for renders that got suspended before they were able to mount for the first time. When the component has loaded, React will retry rendering the suspended tree from scratch.\n- If Suspense was displaying content for the tree, but then it suspended again, the `fallback` will be shown again unless the update causing it was caused by [`startTransition`](https://react.dev/reference/react/startTransition) or [`useDeferredValue`](https://react.dev/reference/react/useDeferredValue).\n- If React needs to hide the already visible content because it suspended again, it will clean up [layout Effects](https://react.dev/reference/react/useLayoutEffect) in the content tree. When the content is ready to be shown again, React will fire the layout Effects again. This ensures that Effects measuring the DOM layout don’t try to do this while the content is hidden.\n- React includes under-the-hood optimizations like _Streaming Server Rendering_ and _Selective Hydration_ that are integrated with Suspense. Read [an architectural overview](https://github.com/reactwg/react-18/discussions/37) and watch [a technical talk](https://www.youtube.com/watch?v=pj5N-Khihgc) to learn more.\n\n## Usage\n\n### Displaying a fallback while content is loading\n\nYou can wrap any part of your application with a Suspense boundary:\n\n```jsx\n<Suspense fallback={<Loading />}>  \n  <Albums />\n</Suspense>\n```\n\nReact will display your loading fallback until all the code and data needed by the children has been loaded.\n\nIn the example below, the `Albums` component _suspends_ while fetching the list of albums. Until it’s ready to render, React switches the closest Suspense boundary above to show the fallback—your `Loading` component. Then, when the data loads, React hides the `Loading` fallback and renders the `Albums` component with data.\n\n## Revealing content together at once\n\nBy default, the whole tree inside Suspense is treated as a single unit. For example, even if _only one_ of these components suspends waiting for some data, _all_ of them together will be replaced by the loading indicator:\n\n```jsx\n<Suspense fallback={<Loading />}>  \n  <Biography />\n  <Panel>\n    <Albums />\n  </Panel>\n</Suspense>\n```\n\nThen, after all of them are ready to be displayed, they will all appear together at once.\n\n## Revealing nested content as it loads\n\nWhen a component suspends, the closest parent Suspense component shows the fallback. This lets you nest multiple Suspense components to create a loading sequence. Each Suspense boundary’s fallback will be filled in as the next level of content becomes available. For example, you can give the album list its own fallback:\n\n```jsx\n<Suspense fallback={<BigSpinner />}>  \n  <Biography />\n  <Suspense fallback={<AlbumsGlimmer />}>  \n    <Panel>\n      <Albums />\n    </Panel>\n  </Suspense>\n</Suspense>\n```\n\n## Showing stale content while fresh content is loading\n\nIn this example, the `SearchResults` component suspends while fetching the search results. Type `\"a\"`, wait for the results, and then edit it to `\"ab\"`. The results for `\"a\"` will get replaced by the loading fallback.\n\n```jsx\nimport { Suspense, useState } from 'react';\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  return (\n    <>  \n      <label>\n        Search albums:\n        <input value={query} onChange={e => setQuery(e.target.value)} />\n      </label>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <SearchResults query={query} />\n      </Suspense>\n    </>\n  );\n}\n```\n\n## Preventing already revealed content from hiding\n\nWhen a component suspends, the closest parent Suspense boundary switches to showing the fallback. This can lead to a jarring user experience if it was already displaying some content. Try pressing this button:\n\n```jsx\nimport { Suspense, useState } from 'react';\nimport IndexPage from './IndexPage.js';\nimport ArtistPage from './ArtistPage.js';\nimport Layout from './Layout.js';\n\nexport default function App() {\n  return (\n    <Suspense fallback={<BigSpinner />}>  \n      <Router />\n    </Suspense>\n  );\n}\n\nfunction Router() {\n  const [page, setPage] = useState('/');\n\n  function navigate(url) {\n    setPage(url);\n  }\n\n  let content;\n  if (page === '/') {\n    content = (\n      <IndexPage navigate={navigate} />\n    );\n  } else if (page === '/the-beatles') {\n    content = (\n      <ArtistPage\n        artist={{\n          id: 'the-beatles',\n          name: 'The Beatles',\n        }}\n      />\n    );\n  }\n  return (\n    <Layout>\n      {content}\n    </Layout>\n  );\n}\n\nfunction BigSpinner() {\n  return <h2>🌀 Loading...</h2>;\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/Suspense", "title": "<Suspense>", "description": "<Suspense> lets you display a fallback until its children have finished loading.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:02", "type": "overview", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "twitter:site": "@reactjs", "title": "<Suspense> – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/Suspense", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "<Suspense> – React", "ogImage": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "<Suspense> – React", "twitter:title": "Suspense – React", "og:url": "https://react.dev/reference/react/Suspense", "twitter:description": "The library for web and native user interfaces", "scrapeId": "cebfc21c-e497-4584-bc60-4f7fddf66cd2", "sourceURL": "https://react.dev/reference/react/Suspense", "url": "https://react.dev/reference/react/Suspense", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `<Suspense>`\n\n#### Props\n\n- `children`: The actual UI you intend to render. If `children` suspends while rendering, the Suspense boundary will switch to rendering `fallback`.\n- `fallback`: An alternate UI to render in place of the actual UI if it has not finished loading. Any valid React node is accepted, though in practice, a fallback is a lightweight placeholder view, such as a loading spinner or skeleton. Suspense will automatically switch to `fallback` when `children` suspends, and back to `children` when the data is ready. If `fallback` suspends while rendering, it will activate the closest parent Suspense boundary.\n\n#### Caveats\n\n- React does not preserve any state for renders that got suspended before they were able to mount for the first time. When the component has loaded, React will retry rendering the suspended tree from scratch.\n- If Suspense was displaying content for the tree, but then it suspended again, the `fallback` will be shown again unless the update causing it was caused by [`startTransition`](https://react.dev/reference/react/startTransition) or [`useDeferredValue`](https://react.dev/reference/react/useDeferredValue).\n- If React needs to hide the already visible content because it suspended again, it will clean up [layout Effects](https://react.dev/reference/react/useLayoutEffect) in the content tree. When the content is ready to be shown again, React will fire the layout Effects again. This ensures that Effects measuring the DOM layout don’t try to do this while the content is hidden.\n- React includes under-the-hood optimizations like _Streaming Server Rendering_ and _Selective Hydration_ that are integrated with Suspense. Read [an architectural overview](https://github.com/reactwg/react-18/discussions/37) and watch [a technical talk](https://www.youtube.com/watch?v=pj5N-Khihgc) to learn more..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Suspense", "title": "<Suspense>", "description": "<Suspense> lets you display a fallback until its children have finished loading.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "twitter:site": "@reactjs", "title": "<Suspense> – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/Suspense", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "<Suspense> – React", "ogImage": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "<Suspense> – React", "twitter:title": "Suspense – React", "og:url": "https://react.dev/reference/react/Suspense", "twitter:description": "The library for web and native user interfaces", "scrapeId": "cebfc21c-e497-4584-bc60-4f7fddf66cd2", "sourceURL": "https://react.dev/reference/react/Suspense", "url": "https://react.dev/reference/react/Suspense", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Displaying a fallback while content is loading\n\nYou can wrap any part of your application with a Suspense boundary:\n\n```jsx\n<Suspense fallback={<Loading />}>  \n  <Albums />\n</Suspense>\n```\n\nReact will display your loading fallback until all the code and data needed by the children has been loaded.\n\nIn the example below, the `Albums` component _suspends_ while fetching the list of albums. Until it’s ready to render, React switches the closest Suspense boundary above to show the fallback—your `Loading` component. Then, when the data loads, React hides the `Loading` fallback and renders the `Albums` component with data..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Suspense", "title": "<Suspense>", "description": "<Suspense> lets you display a fallback until its children have finished loading.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "twitter:site": "@reactjs", "title": "<Suspense> – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/Suspense", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "<Suspense> – React", "ogImage": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "<Suspense> – React", "twitter:title": "Suspense – React", "og:url": "https://react.dev/reference/react/Suspense", "twitter:description": "The library for web and native user interfaces", "scrapeId": "cebfc21c-e497-4584-bc60-4f7fddf66cd2", "sourceURL": "https://react.dev/reference/react/Suspense", "url": "https://react.dev/reference/react/Suspense", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I revealing content together at once in react-reference?\n\nAssistant: To revealing content together at once in react-reference, here's what you do:\nBy default, the whole tree inside Suspense is treated as a single unit. For example, even if _only one_ of these components suspends waiting for some data, _all_ of them together will be replaced by the loading indicator:\n\n```jsx\n<Suspense fallback={<Loading />}>  \n  <Biography />\n  <Panel>\n    <Albums />\n  </Panel>\n</Suspense>\n```\n\nThen, after all of them are ready to be displayed, they will all appear together at once..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Suspense", "title": "<Suspense>", "description": "<Suspense> lets you display a fallback until its children have finished loading.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "twitter:site": "@reactjs", "title": "<Suspense> – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/Suspense", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "<Suspense> – React", "ogImage": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "<Suspense> – React", "twitter:title": "Suspense – React", "og:url": "https://react.dev/reference/react/Suspense", "twitter:description": "The library for web and native user interfaces", "scrapeId": "cebfc21c-e497-4584-bc60-4f7fddf66cd2", "sourceURL": "https://react.dev/reference/react/Suspense", "url": "https://react.dev/reference/react/Suspense", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I revealing nested content as it loads in react-reference?\n\nAssistant: To revealing nested content as it loads in react-reference, here's what you do:\nWhen a component suspends, the closest parent Suspense component shows the fallback. This lets you nest multiple Suspense components to create a loading sequence. Each Suspense boundary’s fallback will be filled in as the next level of content becomes available. For example, you can give the album list its own fallback:\n\n```jsx\n<Suspense fallback={<BigSpinner />}>  \n  <Biography />\n  <Suspense fallback={<AlbumsGlimmer />}>  \n    <Panel>\n      <Albums />\n    </Panel>\n  </Suspense>\n</Suspense>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Suspense", "title": "<Suspense>", "description": "<Suspense> lets you display a fallback until its children have finished loading.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "twitter:site": "@reactjs", "title": "<Suspense> – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/Suspense", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "<Suspense> – React", "ogImage": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "<Suspense> – React", "twitter:title": "Suspense – React", "og:url": "https://react.dev/reference/react/Suspense", "twitter:description": "The library for web and native user interfaces", "scrapeId": "cebfc21c-e497-4584-bc60-4f7fddf66cd2", "sourceURL": "https://react.dev/reference/react/Suspense", "url": "https://react.dev/reference/react/Suspense", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I showing stale content while fresh content is loading in react-reference?\n\nAssistant: To showing stale content while fresh content is loading in react-reference, here's what you do:\nIn this example, the `SearchResults` component suspends while fetching the search results. Type `\"a\"`, wait for the results, and then edit it to `\"ab\"`. The results for `\"a\"` will get replaced by the loading fallback.\n\n```jsx\nimport { Suspense, useState } from 'react';\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  return (\n    <>  \n      <label>\n        Search albums:\n        <input value={query} onChange={e => setQuery(e.target.value)} />\n      </label>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <SearchResults query={query} />\n      </Suspense>\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Suspense", "title": "<Suspense>", "description": "<Suspense> lets you display a fallback until its children have finished loading.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "twitter:site": "@reactjs", "title": "<Suspense> – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/Suspense", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "<Suspense> – React", "ogImage": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "<Suspense> – React", "twitter:title": "Suspense – React", "og:url": "https://react.dev/reference/react/Suspense", "twitter:description": "The library for web and native user interfaces", "scrapeId": "cebfc21c-e497-4584-bc60-4f7fddf66cd2", "sourceURL": "https://react.dev/reference/react/Suspense", "url": "https://react.dev/reference/react/Suspense", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I preventing already revealed content from hiding in react-reference?\n\nAssistant: To preventing already revealed content from hiding in react-reference, here's what you do:\nWhen a component suspends, the closest parent Suspense boundary switches to showing the fallback. This can lead to a jarring user experience if it was already displaying some content. Try pressing this button:\n\n```jsx\nimport { Suspense, useState } from 'react';\nimport IndexPage from './IndexPage.js';\nimport ArtistPage from './ArtistPage.js';\nimport Layout from './Layout.js';\n\nexport default function App() {\n  return (\n    <Suspense fallback={<BigSpinner />}>  \n      <Router />\n    </Suspense>\n  );\n}\n\nfunction Router() {\n  const [page, setPage] = useState('/');\n\n  function navigate(url) {\n    setPage(url);\n  }\n\n  let content;\n  if (page === '/') {\n    content = (\n      <IndexPage navigate={navigate} />\n    );\n  } else if (page === '/the-beatles') {\n    content = (\n      <ArtistPage\n        artist={{\n          id: 'the-beatles',\n          name: 'The Beatles',\n        }}\n      />\n    );\n  }\n  return (\n    <Layout>\n      {content}\n    </Layout>\n  );\n}\n\nfunction BigSpinner() {\n  return <h2>🌀 Loading...</h2>;\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Suspense", "title": "<Suspense>", "description": "<Suspense> lets you display a fallback until its children have finished loading.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:02", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "twitter:site": "@reactjs", "title": "<Suspense> – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/Suspense", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "<Suspense> – React", "ogImage": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "<Suspense> – React", "twitter:title": "Suspense – React", "og:url": "https://react.dev/reference/react/Suspense", "twitter:description": "The library for web and native user interfaces", "scrapeId": "cebfc21c-e497-4584-bc60-4f7fddf66cd2", "sourceURL": "https://react.dev/reference/react/Suspense", "url": "https://react.dev/reference/react/Suspense", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for <Suspense> in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Suspense Example**:\n\n```yaml\n<Suspense fallback={<Loading />}>\n  <SomeComponent />\n</Suspense>\n```\n\nThis snippet shows you how to basic suspense example, which is an important aspect of <suspense>.\n\n**Displaying a fallback while content is loading**:\n\n```yaml\n<Suspense fallback={<Loading />}>\n  <Albums />\n</Suspense>\n```\n\nThis snippet shows you how to displaying a fallback while content is loading, which is an important aspect of <suspense>.\n\n**Revealing content together at once**:\n\n```yaml\n<Suspense fallback={<Loading />}>\n  <Biography />\n  <Panel>\n    <Albums />\n  </Panel>\n</Suspense>\n```\n\nThis snippet shows you how to revealing content together at once, which is an important aspect of <suspense>.\n\n**Revealing nested content as it loads**:\n\n```yaml\n<Suspense fallback={<BigSpinner />}>\n  <Biography />\n  <Suspense fallback={<AlbumsGlimmer />}>\n    <Panel>\n      <Albums />\n    </Panel>\n  </Suspense>\n</Suspense>\n```\n\nThis snippet shows you how to revealing nested content as it loads, which is an important aspect of <suspense>.\n\n**Showing stale content while fresh content is loading**:\n\n```yaml\nimport { Suspense, useState } from 'react';\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  return (\n    <>\n      <label>\n        Search albums:\n        <input value={query} onChange={e => setQuery(e.target.value)} />\n      </label>\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <SearchResults query={query} />\n      </Suspense>\n    </>\n  );\n}\n```\n\nThis snippet shows you how to showing stale content while fresh content is loading, which is an important aspect of <suspense>.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/Suspense", "title": "<Suspense>", "description": "<Suspense> lets you display a fallback until its children have finished loading.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:02", "type": "code_examples", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "twitter:site": "@reactjs", "title": "<Suspense> – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/Suspense", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "<Suspense> – React", "ogImage": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "<Suspense> – React", "twitter:title": "Suspense – React", "og:url": "https://react.dev/reference/react/Suspense", "twitter:description": "The library for web and native user interfaces", "scrapeId": "cebfc21c-e497-4584-bc60-4f7fddf66cd2", "sourceURL": "https://react.dev/reference/react/Suspense", "url": "https://react.dev/reference/react/Suspense", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using <Suspense> in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDon’t put a Suspense boundary around every component. Suspense boundaries should not be more granular than the loading sequence that you want the user to experience.\n\nIf you work with a designer, ask them where the loading states should be placed—it’s likely that they’ve already included them in their design wireframes.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/Suspense", "title": "<Suspense>", "description": "<Suspense> lets you display a fallback until its children have finished loading.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:01:02", "type": "best_practices", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "twitter:site": "@reactjs", "title": "<Suspense> – React", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/Suspense", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "<Suspense> – React", "ogImage": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "<Suspense> – React", "twitter:title": "Suspense – React", "og:url": "https://react.dev/reference/react/Suspense", "twitter:description": "The library for web and native user interfaces", "scrapeId": "cebfc21c-e497-4584-bc60-4f7fddf66cd2", "sourceURL": "https://react.dev/reference/react/Suspense", "url": "https://react.dev/reference/react/Suspense", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what React DOM APIs is in react-reference?\n\nAssistant: Sure, I'd be happy to explain React DOM APIs in react-reference.\n\n# React DOM APIs\n\nThe `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.Here's a quick rundown of what this is about:\n\n## APIs\n\nThese APIs can be imported from your components. They are rarely used:\n\n- [`createPortal`](https://react.dev/reference/react-dom/createPortal) lets you render child components in a different part of the DOM tree.\n- [`flushSync`](https://react.dev/reference/react-dom/flushSync) lets you force React to flush a state update and update the DOM synchronously.\n\n## Resource Preloading APIs\n\nThese APIs can be used to make apps faster by pre-loading resources such as scripts, stylesheets, and fonts as soon as you know you need them, for example before navigating to another page where the resources will be used.\n\n[React-based frameworks](https://react.dev/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call these APIs yourself. Consult your framework’s documentation for details.\n\n- [`prefetchDNS`](https://react.dev/reference/react-dom/prefetchDNS) lets you prefetch the IP address of a DNS domain name that you expect to connect to.\n- [`preconnect`](https://react.dev/reference/react-dom/preconnect) lets you connect to a server you expect to request resources from, even if you don’t know what resources you’ll need yet.\n- [`preload`](https://react.dev/reference/react-dom/preload) lets you fetch a stylesheet, font, image, or external script that you expect to use.\n- [`preloadModule`](https://react.dev/reference/react-dom/preloadModule) lets you fetch an ESM module that you expect to use.\n- [`preinit`](https://react.dev/reference/react-dom/preinit) lets you fetch and evaluate an external script or fetch and insert a stylesheet.\n- [`preinitModule`](https://react.dev/reference/react-dom/preinitModule) lets you fetch and evaluate an ESM module.\n\n## Entry points\n\nThe `react-dom` package provides two additional entry points:\n\n- [`react-dom/client`](https://react.dev/reference/react-dom/client) contains APIs to render React components on the client (in the browser).\n- [`react-dom/server`](https://react.dev/reference/react-dom/server) contains APIs to render React components on the server.\n\n## Removed APIs\n\nThese APIs were removed in React 19:\n\n- [`findDOMNode`](https://18.react.dev/reference/react-dom/findDOMNode): see [alternatives](https://18.react.dev/reference/react-dom/findDOMNode#alternatives).\n- [`hydrate`](https://18.react.dev/reference/react-dom/hydrate): use [`hydrateRoot`](https://react.dev/reference/react-dom/client/hydrateRoot) instead.\n- [`render`](https://18.react.dev/reference/react-dom/render): use [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) instead.\n- [`unmountComponentAtNode`](https://react.dev/reference/react-dom/unmountComponentAtNode): use [`root.unmount()`](https://react.dev/reference/react-dom/client/createRoot#root-unmount) instead.\n- [`renderToNodeStream`](https://18.react.dev/reference/react-dom/server/renderToNodeStream): use [`react-dom/server`](https://react.dev/reference/react-dom/server) APIs instead.\n- [`renderToStaticNodeStream`](https://18.react.dev/reference/react-dom/server/renderToStaticNodeStream): use [`react-dom/server`](https://react.dev/reference/react-dom/server) APIs instead.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom", "title": "React DOM APIs", "description": "The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:01:12", "type": "overview", "page_metadata": {"title": "React DOM APIs – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react-dom", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/reference/react-dom", "ogTitle": "React DOM APIs – React", "twitter:card": "summary_large_image", "og:title": "React DOM APIs – React", "ogDescription": "The library for web and native user interfaces", "twitter:title": "React DOM APIs – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "scrapeId": "a6599162-1ee0-402a-9e31-c30343a37cdf", "sourceURL": "https://react.dev/reference/react-dom", "url": "https://react.dev/reference/react-dom", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I apis in react-reference?\n\nAssistant: To apis in react-reference, here's what you do:\nThese APIs can be imported from your components. They are rarely used:\n\n- [`createPortal`](https://react.dev/reference/react-dom/createPortal) lets you render child components in a different part of the DOM tree.\n- [`flushSync`](https://react.dev/reference/react-dom/flushSync) lets you force React to flush a state update and update the DOM synchronously..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom", "title": "React DOM APIs", "description": "The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:01:12", "type": "section_detail", "page_metadata": {"title": "React DOM APIs – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react-dom", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/reference/react-dom", "ogTitle": "React DOM APIs – React", "twitter:card": "summary_large_image", "og:title": "React DOM APIs – React", "ogDescription": "The library for web and native user interfaces", "twitter:title": "React DOM APIs – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "scrapeId": "a6599162-1ee0-402a-9e31-c30343a37cdf", "sourceURL": "https://react.dev/reference/react-dom", "url": "https://react.dev/reference/react-dom", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I resource preloading apis in react-reference?\n\nAssistant: To resource preloading apis in react-reference, here's what you do:\nThese APIs can be used to make apps faster by pre-loading resources such as scripts, stylesheets, and fonts as soon as you know you need them, for example before navigating to another page where the resources will be used.\n\n[React-based frameworks](https://react.dev/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call these APIs yourself. Consult your framework’s documentation for details.\n\n- [`prefetchDNS`](https://react.dev/reference/react-dom/prefetchDNS) lets you prefetch the IP address of a DNS domain name that you expect to connect to.\n- [`preconnect`](https://react.dev/reference/react-dom/preconnect) lets you connect to a server you expect to request resources from, even if you don’t know what resources you’ll need yet.\n- [`preload`](https://react.dev/reference/react-dom/preload) lets you fetch a stylesheet, font, image, or external script that you expect to use.\n- [`preloadModule`](https://react.dev/reference/react-dom/preloadModule) lets you fetch an ESM module that you expect to use.\n- [`preinit`](https://react.dev/reference/react-dom/preinit) lets you fetch and evaluate an external script or fetch and insert a stylesheet.\n- [`preinitModule`](https://react.dev/reference/react-dom/preinitModule) lets you fetch and evaluate an ESM module..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom", "title": "React DOM APIs", "description": "The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:01:12", "type": "section_detail", "page_metadata": {"title": "React DOM APIs – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react-dom", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/reference/react-dom", "ogTitle": "React DOM APIs – React", "twitter:card": "summary_large_image", "og:title": "React DOM APIs – React", "ogDescription": "The library for web and native user interfaces", "twitter:title": "React DOM APIs – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "scrapeId": "a6599162-1ee0-402a-9e31-c30343a37cdf", "sourceURL": "https://react.dev/reference/react-dom", "url": "https://react.dev/reference/react-dom", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I entry points in react-reference?\n\nAssistant: To entry points in react-reference, here's what you do:\nThe `react-dom` package provides two additional entry points:\n\n- [`react-dom/client`](https://react.dev/reference/react-dom/client) contains APIs to render React components on the client (in the browser).\n- [`react-dom/server`](https://react.dev/reference/react-dom/server) contains APIs to render React components on the server..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom", "title": "React DOM APIs", "description": "The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:01:12", "type": "section_detail", "page_metadata": {"title": "React DOM APIs – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react-dom", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/reference/react-dom", "ogTitle": "React DOM APIs – React", "twitter:card": "summary_large_image", "og:title": "React DOM APIs – React", "ogDescription": "The library for web and native user interfaces", "twitter:title": "React DOM APIs – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "scrapeId": "a6599162-1ee0-402a-9e31-c30343a37cdf", "sourceURL": "https://react.dev/reference/react-dom", "url": "https://react.dev/reference/react-dom", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I removed apis in react-reference?\n\nAssistant: To removed apis in react-reference, here's what you do:\nThese APIs were removed in React 19:\n\n- [`findDOMNode`](https://18.react.dev/reference/react-dom/findDOMNode): see [alternatives](https://18.react.dev/reference/react-dom/findDOMNode#alternatives).\n- [`hydrate`](https://18.react.dev/reference/react-dom/hydrate): use [`hydrateRoot`](https://react.dev/reference/react-dom/client/hydrateRoot) instead.\n- [`render`](https://18.react.dev/reference/react-dom/render): use [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) instead.\n- [`unmountComponentAtNode`](https://react.dev/reference/react-dom/unmountComponentAtNode): use [`root.unmount()`](https://react.dev/reference/react-dom/client/createRoot#root-unmount) instead.\n- [`renderToNodeStream`](https://18.react.dev/reference/react-dom/server/renderToNodeStream): use [`react-dom/server`](https://react.dev/reference/react-dom/server) APIs instead.\n- [`renderToStaticNodeStream`](https://18.react.dev/reference/react-dom/server/renderToStaticNodeStream): use [`react-dom/server`](https://react.dev/reference/react-dom/server) APIs instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom", "title": "React DOM APIs", "description": "The `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.", "has_code_examples": false, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 01:01:12", "type": "section_detail", "page_metadata": {"title": "React DOM APIs – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react-dom", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "language": "en", "og:url": "https://react.dev/reference/react-dom", "ogTitle": "React DOM APIs – React", "twitter:card": "summary_large_image", "og:title": "React DOM APIs – React", "ogDescription": "The library for web and native user interfaces", "twitter:title": "React DOM APIs – React", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "og:type": "website", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "scrapeId": "a6599162-1ee0-402a-9e31-c30343a37cdf", "sourceURL": "https://react.dev/reference/react-dom", "url": "https://react.dev/reference/react-dom", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useRef is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useRef in react-reference.\n\n# useRef\n\n`useRef` is a React Hook that lets you reference a value that’s not needed for rendering.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useRef(initialValue)`\n\nCall `useRef` at the top level of your component to declare a [ref.](https://react.dev/learn/referencing-values-with-refs)\n\n```sp-pre-placeholder grow-[2]\nimport { useRef } from 'react';\n\nfunction MyComponent() {\n\n  const intervalRef = useRef(0);\n\n  const inputRef = useRef(null);\n\n  // ...\n```\n\n#### Parameters\n- `initialValue`: The value you want the ref object’s `current` property to be initially. It can be a value of any type. This argument is ignored after the initial render.\n\n#### Returns\n`useRef` returns an object with a single property:\n- `current`: Initially, it’s set to the `initialValue` you have passed. You can later set it to something else. If you pass the ref object to React as a `ref` attribute to a JSX node, React will set its `current` property.\n\nOn the next renders, `useRef` will return the same object.\n\n#### Caveats\n- You can mutate the `ref.current` property. Unlike state, it is mutable. However, if it holds an object that is used for rendering (for example, a piece of your state), then you shouldn’t mutate that object.\n- When you change the `ref.current` property, React does not re-render your component. React is not aware of when you change it because a ref is a plain JavaScript object.\n- Do not write _or read_ `ref.current` during rendering, except for [initialization.](https://react.dev/reference/react/useRef#avoiding-recreating-the-ref-contents) This makes your component’s behavior unpredictable.\n- In Strict Mode, React will **call your component function twice** in order to [help you find accidental impurities.](https://react.dev/reference/react/useState#my-initializer-or-updater-function-runs-twice) This is development-only behavior and does not affect production. Each ref object will be created twice, but one of the versions will be discarded. If your component function is pure (as it should be), this should not affect the behavior.\n\n## Usage\n\n### Referencing a value with a ref\n\nCall `useRef` at the top level of your component to declare one or more [refs.](https://react.dev/learn/referencing-values-with-refs)\n\n```sp-pre-placeholder grow-[2]\nimport { useRef } from 'react';\n\nfunction Stopwatch() {\n\n  const intervalRef = useRef(0);\n\n  // ...\n```\n\n`useRef` returns a ref object with a single `current` property initially set to the initial value you provided.\n\nOn the next renders, `useRef` will return the same object. You can change its `current` property to store information and read it later. This might remind you of [state](https://react.dev/reference/react/useState), but there is an important difference.\n\n**Changing a ref does not trigger a re-render.** This means refs are perfect for storing information that doesn’t affect the visual output of your component. For example, if you need to store an [interval ID](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) and retrieve it later, you can put it in a ref. To update the value inside the ref, you need to manually change its `current` property:\n\n```sp-pre-placeholder grow-[2]\nfunction handleStartClick() {\n\n  const intervalId = setInterval(() => {\n\n    // ...\n\n  }, 1000);\n\n  intervalRef.current = intervalId;\n}\n```\n\nLater, you can read that interval ID from the ref so that you can call [clear that interval](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval):\n\n```sp-pre-placeholder grow-[2]\nfunction handleStopClick() {\n\n  const intervalId = intervalRef.current;\n\n  clearInterval(intervalId);\n}\n```\n\nBy using a ref, you ensure that:\n- You can **store information** between re-renders (unlike regular variables, which reset on every render).\n- Changing it **does not trigger a re-render** (unlike state variables, which trigger a re-render).\n- The **information is local** to each copy of your component (unlike the variables outside, which are shared).\n\nChanging a ref does not trigger a re-render, so refs are not appropriate for storing information you want to display on the screen. Use state for that instead. Read more about [choosing between `useRef` and `useState`.](https://react.dev/learn/referencing-values-with-refs#differences-between-refs-and-state)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useRef", "title": "useRef", "description": "`useRef` is a React Hook that lets you reference a value that’s not needed for rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:01:35", "type": "overview", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react/useRef", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "og:url": "https://react.dev/reference/react/useRef", "title": "useRef – React", "language": "en", "fb:app_id": "623268441017527", "ogTitle": "useRef – React", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useRef – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "useRef – React", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "scrapeId": "6bf15971-4dff-43de-a4e0-7aa85d8b2a7e", "sourceURL": "https://react.dev/reference/react/useRef", "url": "https://react.dev/reference/react/useRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useRef(initialValue)`\n\nCall `useRef` at the top level of your component to declare a [ref.](https://react.dev/learn/referencing-values-with-refs)\n\n```sp-pre-placeholder grow-[2]\nimport { useRef } from 'react';\n\nfunction MyComponent() {\n\n  const intervalRef = useRef(0);\n\n  const inputRef = useRef(null);\n\n  // ...\n```\n\n#### Parameters\n- `initialValue`: The value you want the ref object’s `current` property to be initially. It can be a value of any type. This argument is ignored after the initial render.\n\n#### Returns\n`useRef` returns an object with a single property:\n- `current`: Initially, it’s set to the `initialValue` you have passed. You can later set it to something else. If you pass the ref object to React as a `ref` attribute to a JSX node, React will set its `current` property.\n\nOn the next renders, `useRef` will return the same object.\n\n#### Caveats\n- You can mutate the `ref.current` property. Unlike state, it is mutable. However, if it holds an object that is used for rendering (for example, a piece of your state), then you shouldn’t mutate that object.\n- When you change the `ref.current` property, React does not re-render your component. React is not aware of when you change it because a ref is a plain JavaScript object.\n- Do not write _or read_ `ref.current` during rendering, except for [initialization.](https://react.dev/reference/react/useRef#avoiding-recreating-the-ref-contents) This makes your component’s behavior unpredictable.\n- In Strict Mode, React will **call your component function twice** in order to [help you find accidental impurities.](https://react.dev/reference/react/useState#my-initializer-or-updater-function-runs-twice) This is development-only behavior and does not affect production. Each ref object will be created twice, but one of the versions will be discarded. If your component function is pure (as it should be), this should not affect the behavior..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useRef", "title": "useRef", "description": "`useRef` is a React Hook that lets you reference a value that’s not needed for rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:01:35", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react/useRef", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "og:url": "https://react.dev/reference/react/useRef", "title": "useRef – React", "language": "en", "fb:app_id": "623268441017527", "ogTitle": "useRef – React", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useRef – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "useRef – React", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "scrapeId": "6bf15971-4dff-43de-a4e0-7aa85d8b2a7e", "sourceURL": "https://react.dev/reference/react/useRef", "url": "https://react.dev/reference/react/useRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Referencing a value with a ref\n\nCall `useRef` at the top level of your component to declare one or more [refs.](https://react.dev/learn/referencing-values-with-refs)\n\n```sp-pre-placeholder grow-[2]\nimport { useRef } from 'react';\n\nfunction Stopwatch() {\n\n  const intervalRef = useRef(0);\n\n  // ...\n```\n\n`useRef` returns a ref object with a single `current` property initially set to the initial value you provided.\n\nOn the next renders, `useRef` will return the same object. You can change its `current` property to store information and read it later. This might remind you of [state](https://react.dev/reference/react/useState), but there is an important difference.\n\n**Changing a ref does not trigger a re-render.** This means refs are perfect for storing information that doesn’t affect the visual output of your component. For example, if you need to store an [interval ID](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) and retrieve it later, you can put it in a ref. To update the value inside the ref, you need to manually change its `current` property:\n\n```sp-pre-placeholder grow-[2]\nfunction handleStartClick() {\n\n  const intervalId = setInterval(() => {\n\n    // ...\n\n  }, 1000);\n\n  intervalRef.current = intervalId;\n}\n```\n\nLater, you can read that interval ID from the ref so that you can call [clear that interval](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval):\n\n```sp-pre-placeholder grow-[2]\nfunction handleStopClick() {\n\n  const intervalId = intervalRef.current;\n\n  clearInterval(intervalId);\n}\n```\n\nBy using a ref, you ensure that:\n- You can **store information** between re-renders (unlike regular variables, which reset on every render).\n- Changing it **does not trigger a re-render** (unlike state variables, which trigger a re-render).\n- The **information is local** to each copy of your component (unlike the variables outside, which are shared).\n\nChanging a ref does not trigger a re-render, so refs are not appropriate for storing information you want to display on the screen. Use state for that instead. Read more about [choosing between `useRef` and `useState`.](https://react.dev/learn/referencing-values-with-refs#differences-between-refs-and-state).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useRef", "title": "useRef", "description": "`useRef` is a React Hook that lets you reference a value that’s not needed for rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:01:35", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react/useRef", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "og:url": "https://react.dev/reference/react/useRef", "title": "useRef – React", "language": "en", "fb:app_id": "623268441017527", "ogTitle": "useRef – React", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useRef – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "useRef – React", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "scrapeId": "6bf15971-4dff-43de-a4e0-7aa85d8b2a7e", "sourceURL": "https://react.dev/reference/react/useRef", "url": "https://react.dev/reference/react/useRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useRef in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example1 of2: Click counter**:\n\n```yaml\nimport { useRef } from 'react';\n\nexport default function Counter() {\n  let ref = useRef(0);\n\n  function handleClick() {\n    ref.current = ref.current + 1;\n    alert('You clicked ' + ref.current + ' times!');\n  }\n\n  return (\n    <button onClick={handleClick}>\n      Click me!\n    </button>\n  );\n}\n```\n\nThis snippet shows you how to example1 of2: click counter, which is an important aspect of useref.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useRef", "title": "useRef", "description": "`useRef` is a React Hook that lets you reference a value that’s not needed for rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:01:35", "type": "code_examples", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react/useRef", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "og:url": "https://react.dev/reference/react/useRef", "title": "useRef – React", "language": "en", "fb:app_id": "623268441017527", "ogTitle": "useRef – React", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useRef – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "useRef – React", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "scrapeId": "6bf15971-4dff-43de-a4e0-7aa85d8b2a7e", "sourceURL": "https://react.dev/reference/react/useRef", "url": "https://react.dev/reference/react/useRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useRef in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not write _or read_ `ref.current` during rendering.\n\nYou can read or write refs from event handlers or effects instead.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useRef", "title": "useRef", "description": "`useRef` is a React Hook that lets you reference a value that’s not needed for rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:01:35", "type": "best_practices", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react/useRef", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "og:url": "https://react.dev/reference/react/useRef", "title": "useRef – React", "language": "en", "fb:app_id": "623268441017527", "ogTitle": "useRef – React", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useRef – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "useRef – React", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "scrapeId": "6bf15971-4dff-43de-a4e0-7aa85d8b2a7e", "sourceURL": "https://react.dev/reference/react/useRef", "url": "https://react.dev/reference/react/useRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what API Reference is in react-reference?\n\nAssistant: Sure, I'd be happy to explain API Reference in react-reference.\n\n# API Reference\n\nThis page provides an overview of the lazy function in React, which allows for deferred loading of components until they are rendered for the first time.Here's a quick rundown of what this is about:\n\n## lazy\n\n`lazy` lets you defer loading component’s code until it is rendered for the first time.\n\n```sp-pre-placeholder grow-[2]\nconst SomeComponent = lazy(load)\n```\n\n- [Reference](https://react.dev/reference/react/lazy#reference)\n  - [`lazy(load)`](https://react.dev/reference/react/lazy#lazy)\n  - [`load` function](https://react.dev/reference/react/lazy#load)\n- [Usage](https://react.dev/reference/react/lazy#usage)\n  - [Lazy-loading components with Suspense](https://react.dev/reference/react/lazy#suspense-for-code-splitting)\n- [Troubleshooting](https://react.dev/reference/react/lazy#troubleshooting)\n  - [My `lazy` component’s state gets reset unexpectedly](https://react.dev/reference/react/lazy#my-lazy-components-state-gets-reset-unexpectedly)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/lazy", "title": "API Reference", "description": "This page provides an overview of the lazy function in React, which allows for deferred loading of components until they are rendered for the first time.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:01:50", "type": "overview", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/lazy", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogTitle": "lazy – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/lazy", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:title": "lazy – React", "title": "lazy – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:title": "lazy – React", "scrapeId": "10bb0087-83ff-4014-8522-14e2e15d7d28", "sourceURL": "https://react.dev/reference/react/lazy", "url": "https://react.dev/reference/react/lazy", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I lazy in react-reference?\n\nAssistant: To lazy in react-reference, here's what you do:\n`lazy` lets you defer loading component’s code until it is rendered for the first time.\n\n```sp-pre-placeholder grow-[2]\nconst SomeComponent = lazy(load)\n```\n\n- [Reference](https://react.dev/reference/react/lazy#reference)\n  - [`lazy(load)`](https://react.dev/reference/react/lazy#lazy)\n  - [`load` function](https://react.dev/reference/react/lazy#load)\n- [Usage](https://react.dev/reference/react/lazy#usage)\n  - [Lazy-loading components with Suspense](https://react.dev/reference/react/lazy#suspense-for-code-splitting)\n- [Troubleshooting](https://react.dev/reference/react/lazy#troubleshooting)\n  - [My `lazy` component’s state gets reset unexpectedly](https://react.dev/reference/react/lazy#my-lazy-components-state-gets-reset-unexpectedly).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/lazy", "title": "API Reference", "description": "This page provides an overview of the lazy function in React, which allows for deferred loading of components until they are rendered for the first time.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:01:50", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/lazy", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogTitle": "lazy – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/lazy", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:title": "lazy – React", "title": "lazy – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:title": "lazy – React", "scrapeId": "10bb0087-83ff-4014-8522-14e2e15d7d28", "sourceURL": "https://react.dev/reference/react/lazy", "url": "https://react.dev/reference/react/lazy", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for API Reference in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using lazy to load a component**:\n\n```yaml\nimport { lazy } from 'react';\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n```\n\nThis snippet shows you how to using lazy to load a component, which is an important aspect of api reference.\n\n**Lazy-loading components with Suspense**:\n\n```yaml\n<Suspense fallback={<Loading />}> \n  <h2>Preview</h2> \n  <MarkdownPreview /> \n</Suspense>\n```\n\nThis snippet shows you how to lazy-loading components with suspense, which is an important aspect of api reference.\n\n**MarkdownEditor component example**:\n\n```yaml\nimport { useState, Suspense, lazy } from 'react';\nimport Loading from './Loading.js';\n\nconst MarkdownPreview = lazy(() => delayForDemo(import('./MarkdownPreview.js')));\n\nexport default function MarkdownEditor() {\n  const [showPreview, setShowPreview] = useState(false);\n  const [markdown, setMarkdown] = useState('Hello, **world**!');\n  return (\n    <>\n      <textarea value={markdown} onChange={e => setMarkdown(e.target.value)} />\n      <label>\n        <input type=\"checkbox\" checked={showPreview} onChange={e => setShowPreview(e.target.checked)} />\n        Show preview\n      </label>\n      <hr />\n      {showPreview && (\n        <Suspense fallback={<Loading />}> \n          <h2>Preview</h2> \n          <MarkdownPreview markdown={markdown} /> \n        </Suspense>\n      )}\n    </>\n  );\n}\n\n// Add a fixed delay so you can see the loading state\nfunction delayForDemo(promise) {\n  return new Promise(resolve => {\n    setTimeout(resolve, 2000);\n  }).then(() => promise);\n}\n```\n\nThis snippet shows you how to markdowneditor component example, which is an important aspect of api reference.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/lazy", "title": "API Reference", "description": "This page provides an overview of the lazy function in React, which allows for deferred loading of components until they are rendered for the first time.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:01:50", "type": "code_examples", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/lazy", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogTitle": "lazy – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/lazy", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:title": "lazy – React", "title": "lazy – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:title": "lazy – React", "scrapeId": "10bb0087-83ff-4014-8522-14e2e15d7d28", "sourceURL": "https://react.dev/reference/react/lazy", "url": "https://react.dev/reference/react/lazy", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using API Reference in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not declare `lazy` components inside other components to avoid state resets on re-renders. Always declare them at the top level of your module.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/lazy", "title": "API Reference", "description": "This page provides an overview of the lazy function in React, which allows for deferred loading of components until they are rendered for the first time.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:01:50", "type": "best_practices", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/lazy", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "ogTitle": "lazy – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/lazy", "twitter:site": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "twitter:title": "lazy – React", "title": "lazy – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:title": "lazy – React", "scrapeId": "10bb0087-83ff-4014-8522-14e2e15d7d28", "sourceURL": "https://react.dev/reference/react/lazy", "url": "https://react.dev/reference/react/lazy", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useDebugValue is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useDebugValue in react-reference.\n\n# useDebugValue\n\n`useDebugValue` is a React Hook that lets you add a label to a custom Hook in React DevTools.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useDebugValue(value, format?)`\n\nCall `useDebugValue` at the top level of your [custom Hook](https://react.dev/learn/reusing-logic-with-custom-hooks) to display a readable debug value:\n\n```sp-pre-placeholder grow-[2]\nimport { useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n\n  // ...\n\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n\n  // ...\n}\n```\n\n#### Parameters\n\n- `value`: The value you want to display in React DevTools. It can have any type.\n- **optional** `format`: A formatting function. When the component is inspected, React DevTools will call the formatting function with the `value` as the argument, and then display the returned formatted value (which may have any type). If you don’t specify the formatting function, the original `value` itself will be displayed.\n\n#### Returns\n\n`useDebugValue` does not return anything.\n\n## Usage\n\n### Adding a label to a custom Hook\n\nCall `useDebugValue` at the top level of your [custom Hook](https://react.dev/learn/reusing-logic-with-custom-hooks) to display a readable debug value for [React DevTools.](https://react.dev/learn/react-developer-tools)\n\n```sp-pre-placeholder grow-[2]\nimport { useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n\n  // ...\n\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n\n  // ...\n}\n```\n\nThis gives components calling `useOnlineStatus` a label like `OnlineStatus: \"Online\"` when you inspect them:\n\n![A screenshot of React DevTools showing the debug value](https://react.dev/images/docs/react-devtools-usedebugvalue.png)\n\nWithout the `useDebugValue` call, only the underlying data (in this example, `true`) would be displayed.\n\n## Deferring formatting of a debug value\n\nYou can also pass a formatting function as the second argument to `useDebugValue`:\n\n```sp-pre-placeholder grow-[2]\nuseDebugValue(date, date => date.toDateString());\n```\n\nYour formatting function will receive the debug value as a parameter and should return a formatted display value. When your component is inspected, React DevTools will call this function and display its result.\n\nThis lets you avoid running potentially expensive formatting logic unless the component is actually inspected. For example, if `date` is a Date value, this avoids calling `toDateString()` on it for every render.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useDebugValue", "title": "useDebugValue", "description": "`useDebugValue` is a React Hook that lets you add a label to a custom Hook in React DevTools.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:02:06", "type": "overview", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "language": "en", "title": "useDebugValue – React", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "useDebugValue – React", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:type": "website", "og:url": "https://react.dev/reference/react/useDebugValue", "ogUrl": "https://react.dev/reference/react/useDebugValue", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "useDebugValue – React", "ogTitle": "useDebugValue – React", "scrapeId": "4b0342b8-aec2-4ad5-8c57-b94b9375b8fd", "sourceURL": "https://react.dev/reference/react/useDebugValue", "url": "https://react.dev/reference/react/useDebugValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useDebugValue(value, format?)`\n\nCall `useDebugValue` at the top level of your [custom Hook](https://react.dev/learn/reusing-logic-with-custom-hooks) to display a readable debug value:\n\n```sp-pre-placeholder grow-[2]\nimport { useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n\n  // ...\n\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n\n  // ...\n}\n```\n\n#### Parameters\n\n- `value`: The value you want to display in React DevTools. It can have any type.\n- **optional** `format`: A formatting function. When the component is inspected, React DevTools will call the formatting function with the `value` as the argument, and then display the returned formatted value (which may have any type). If you don’t specify the formatting function, the original `value` itself will be displayed.\n\n#### Returns\n\n`useDebugValue` does not return anything..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useDebugValue", "title": "useDebugValue", "description": "`useDebugValue` is a React Hook that lets you add a label to a custom Hook in React DevTools.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:02:06", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "language": "en", "title": "useDebugValue – React", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "useDebugValue – React", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:type": "website", "og:url": "https://react.dev/reference/react/useDebugValue", "ogUrl": "https://react.dev/reference/react/useDebugValue", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "useDebugValue – React", "ogTitle": "useDebugValue – React", "scrapeId": "4b0342b8-aec2-4ad5-8c57-b94b9375b8fd", "sourceURL": "https://react.dev/reference/react/useDebugValue", "url": "https://react.dev/reference/react/useDebugValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Adding a label to a custom Hook\n\nCall `useDebugValue` at the top level of your [custom Hook](https://react.dev/learn/reusing-logic-with-custom-hooks) to display a readable debug value for [React DevTools.](https://react.dev/learn/react-developer-tools)\n\n```sp-pre-placeholder grow-[2]\nimport { useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n\n  // ...\n\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n\n  // ...\n}\n```\n\nThis gives components calling `useOnlineStatus` a label like `OnlineStatus: \"Online\"` when you inspect them:\n\n![A screenshot of React DevTools showing the debug value](https://react.dev/images/docs/react-devtools-usedebugvalue.png)\n\nWithout the `useDebugValue` call, only the underlying data (in this example, `true`) would be displayed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useDebugValue", "title": "useDebugValue", "description": "`useDebugValue` is a React Hook that lets you add a label to a custom Hook in React DevTools.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:02:06", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "language": "en", "title": "useDebugValue – React", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "useDebugValue – React", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:type": "website", "og:url": "https://react.dev/reference/react/useDebugValue", "ogUrl": "https://react.dev/reference/react/useDebugValue", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "useDebugValue – React", "ogTitle": "useDebugValue – React", "scrapeId": "4b0342b8-aec2-4ad5-8c57-b94b9375b8fd", "sourceURL": "https://react.dev/reference/react/useDebugValue", "url": "https://react.dev/reference/react/useDebugValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deferring formatting of a debug value in react-reference?\n\nAssistant: To deferring formatting of a debug value in react-reference, here's what you do:\nYou can also pass a formatting function as the second argument to `useDebugValue`:\n\n```sp-pre-placeholder grow-[2]\nuseDebugValue(date, date => date.toDateString());\n```\n\nYour formatting function will receive the debug value as a parameter and should return a formatted display value. When your component is inspected, React DevTools will call this function and display its result.\n\nThis lets you avoid running potentially expensive formatting logic unless the component is actually inspected. For example, if `date` is a Date value, this avoids calling `toDateString()` on it for every render..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useDebugValue", "title": "useDebugValue", "description": "`useDebugValue` is a React Hook that lets you add a label to a custom Hook in React DevTools.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:02:06", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "language": "en", "title": "useDebugValue – React", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "useDebugValue – React", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:type": "website", "og:url": "https://react.dev/reference/react/useDebugValue", "ogUrl": "https://react.dev/reference/react/useDebugValue", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "useDebugValue – React", "ogTitle": "useDebugValue – React", "scrapeId": "4b0342b8-aec2-4ad5-8c57-b94b9375b8fd", "sourceURL": "https://react.dev/reference/react/useDebugValue", "url": "https://react.dev/reference/react/useDebugValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useDebugValue in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of useDebugValue in a custom Hook**:\n\n```yaml\nimport { useSyncExternalStore, useDebugValue } from 'react';\n\nexport function useOnlineStatus() {\n  const isOnline = useSyncExternalStore(subscribe, () => navigator.onLine, () => true);\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n  return isOnline;\n}\n\nfunction subscribe(callback) {\n  window.addEventListener('online', callback);\n  window.addEventListener('offline', callback);\n  return () => {\n    window.removeEventListener('online', callback);\n    window.removeEventListener('offline', callback);\n  };\n}\n```\n\nThis snippet shows you how to example of usedebugvalue in a custom hook, which is an important aspect of usedebugvalue.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useDebugValue", "title": "useDebugValue", "description": "`useDebugValue` is a React Hook that lets you add a label to a custom Hook in React DevTools.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:02:06", "type": "code_examples", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "language": "en", "title": "useDebugValue – React", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "useDebugValue – React", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:type": "website", "og:url": "https://react.dev/reference/react/useDebugValue", "ogUrl": "https://react.dev/reference/react/useDebugValue", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "useDebugValue – React", "ogTitle": "useDebugValue – React", "scrapeId": "4b0342b8-aec2-4ad5-8c57-b94b9375b8fd", "sourceURL": "https://react.dev/reference/react/useDebugValue", "url": "https://react.dev/reference/react/useDebugValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useDebugValue in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDon’t add debug values to every custom Hook. It’s most valuable for custom Hooks that are part of shared libraries and that have a complex internal data structure that’s difficult to inspect.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useDebugValue", "title": "useDebugValue", "description": "`useDebugValue` is a React Hook that lets you add a label to a custom Hook in React DevTools.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:02:06", "type": "best_practices", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "language": "en", "title": "useDebugValue – React", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://react.dev/images/og-reference.png", "og:title": "useDebugValue – React", "og:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:type": "website", "og:url": "https://react.dev/reference/react/useDebugValue", "ogUrl": "https://react.dev/reference/react/useDebugValue", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:title": "useDebugValue – React", "ogTitle": "useDebugValue – React", "scrapeId": "4b0342b8-aec2-4ad5-8c57-b94b9375b8fd", "sourceURL": "https://react.dev/reference/react/useDebugValue", "url": "https://react.dev/reference/react/useDebugValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what React Cache API Reference is in react-reference?\n\nAssistant: Sure, I'd be happy to explain React Cache API Reference in react-reference.\n\n# React Cache API Reference\n\nThis page covers the cache feature in React, specifically for use with React Server Components, detailing its usage, parameters, returns, and best practices.Here's a quick rundown of what this is about:\n\n## cache - This feature is available in the latest Canary\n\n### React Server Components\n\n`cache` is only for use with [React Server Components](https://react.dev/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components).\n\n`cache` lets you cache the result of a data fetch or computation.\n\n```sp-pre-placeholder grow-[2]\nconst cachedFn = cache(fn);\n```\n\n- [Reference](https://react.dev/reference/react/cache#reference)\n  - [`cache(fn)`](https://react.dev/reference/react/cache#cache)\n- [Usage](https://react.dev/reference/react/cache#usage)\n  - [Cache an expensive computation](https://react.dev/reference/react/cache#cache-expensive-computation)\n  - [Share a snapshot of data](https://react.dev/reference/react/cache#take-and-share-snapshot-of-data)\n  - [Preload data](https://react.dev/reference/react/cache#preload-data)\n- [Troubleshooting](https://react.dev/reference/react/cache#troubleshooting)\n  - [My memoized function still runs even though I’ve called it with the same arguments](https://react.dev/reference/react/cache#memoized-function-still-runs)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/cache", "title": "React Cache API Reference", "description": "This page covers the cache feature in React, specifically for use with React Server Components, detailing its usage, parameters, returns, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:02:31", "type": "overview", "page_metadata": {"msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cache – React", "og:url": "https://react.dev/reference/react/cache", "og:title": "cache – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "cache – React", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cache", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "title": "cache – React", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "5780517c-cf56-4e5d-b9f5-6994d00a7caf", "sourceURL": "https://react.dev/reference/react/cache", "url": "https://react.dev/reference/react/cache", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I cache - this feature is available in the latest canary in react-reference?\n\nAssistant: To cache - this feature is available in the latest canary in react-reference, here's what you do:\n### React Server Components\n\n`cache` is only for use with [React Server Components](https://react.dev/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components).\n\n`cache` lets you cache the result of a data fetch or computation.\n\n```sp-pre-placeholder grow-[2]\nconst cachedFn = cache(fn);\n```\n\n- [Reference](https://react.dev/reference/react/cache#reference)\n  - [`cache(fn)`](https://react.dev/reference/react/cache#cache)\n- [Usage](https://react.dev/reference/react/cache#usage)\n  - [Cache an expensive computation](https://react.dev/reference/react/cache#cache-expensive-computation)\n  - [Share a snapshot of data](https://react.dev/reference/react/cache#take-and-share-snapshot-of-data)\n  - [Preload data](https://react.dev/reference/react/cache#preload-data)\n- [Troubleshooting](https://react.dev/reference/react/cache#troubleshooting)\n  - [My memoized function still runs even though I’ve called it with the same arguments](https://react.dev/reference/react/cache#memoized-function-still-runs).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/cache", "title": "React Cache API Reference", "description": "This page covers the cache feature in React, specifically for use with React Server Components, detailing its usage, parameters, returns, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:02:31", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cache – React", "og:url": "https://react.dev/reference/react/cache", "og:title": "cache – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "cache – React", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cache", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "title": "cache – React", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "5780517c-cf56-4e5d-b9f5-6994d00a7caf", "sourceURL": "https://react.dev/reference/react/cache", "url": "https://react.dev/reference/react/cache", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for React Cache API Reference in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using cache to memoize a function**:\n\n```yaml\nimport {cache} from 'react';\n\nimport calculateMetrics from 'lib/metrics';\n\nconst getMetrics = cache(calculateMetrics);\n\nfunction Chart({data}) {\n\n  const report = getMetrics(data);\n\n  // ...\n}\n```\n\nThis snippet shows you how to using cache to memoize a function, which is an important aspect of react cache api reference.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/cache", "title": "React Cache API Reference", "description": "This page covers the cache feature in React, specifically for use with React Server Components, detailing its usage, parameters, returns, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:02:31", "type": "code_examples", "page_metadata": {"msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cache – React", "og:url": "https://react.dev/reference/react/cache", "og:title": "cache – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "cache – React", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cache", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "title": "cache – React", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "5780517c-cf56-4e5d-b9f5-6994d00a7caf", "sourceURL": "https://react.dev/reference/react/cache", "url": "https://react.dev/reference/react/cache", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using React Cache API Reference in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCall `cache` outside of any components to create a version of the function with caching.\n\nTo maximize cache hits and reduce work, components should call the same memoized function to access the same cache.\n\nDefine the memoized function in a dedicated module that can be imported across components.\n\nWhen calling a memoized function, ensure you're passing the same object reference for cache hits.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/cache", "title": "React Cache API Reference", "description": "This page covers the cache feature in React, specifically for use with React Server Components, detailing its usage, parameters, returns, and best practices.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:02:31", "type": "best_practices", "page_metadata": {"msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cache – React", "og:url": "https://react.dev/reference/react/cache", "og:title": "cache – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "cache – React", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cache", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "title": "cache – React", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "5780517c-cf56-4e5d-b9f5-6994d00a7caf", "sourceURL": "https://react.dev/reference/react/cache", "url": "https://react.dev/reference/react/cache", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what startTransition is in react-reference?\n\nAssistant: Sure, I'd be happy to explain startTransition in react-reference.\n\n# startTransition\n\nstartTransition lets you render a part of the UI in the background.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `startTransition(action)`\n\nThe `startTransition` function lets you mark a state update as a Transition.\n\n```sp-pre-placeholder grow-[2]\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n\n    startTransition(() => {\n\n      setTab(nextTab);\n\n    });\n\n  }\n\n  // ...\n\n}\n```\n\n#### Parameters\n\n- `action`: A function that updates some state by calling one or more [`set` functions](https://react.dev/reference/react/useState#setstate). React calls `action` immediately with no parameters and marks all state updates scheduled synchronously during the `action` function call as Transitions. Any async calls awaited in the `action` will be included in the transition, but currently require wrapping any `set` functions after the `await` in an additional `startTransition` (see [Troubleshooting](https://react.dev/reference/react/useTransition#react-doesnt-treat-my-state-update-after-await-as-a-transition)). State updates marked as Transitions will be [non-blocking](https://react.dev/reference/react/startTransition#marking-a-state-update-as-a-non-blocking-transition) and [will not display unwanted loading indicators.](https://react.dev/reference/react/useTransition#preventing-unwanted-loading-indicators).\n\n#### Returns\n\n`startTransition` does not return anything.\n\n#### Caveats\n\n- `startTransition` does not provide a way to track whether a Transition is pending. To show a pending indicator while the Transition is ongoing, you need [`useTransition`](https://react.dev/reference/react/useTransition) instead.\n\n- You can wrap an update into a Transition only if you have access to the `set` function of that state. If you want to start a Transition in response to some prop or a custom Hook return value, try [`useDeferredValue`](https://react.dev/reference/react/useDeferredValue) instead.\n\n- The function you pass to `startTransition` is called immediately, marking all state updates that happen while it executes as Transitions. If you try to perform state updates in a `setTimeout`, for example, they won’t be marked as Transitions.\n\n- You must wrap any state updates after any async requests in another `startTransition` to mark them as Transitions. This is a known limitation that we will fix in the future (see [Troubleshooting](https://react.dev/reference/react/useTransition#react-doesnt-treat-my-state-update-after-await-as-a-transition)).\n\n- A state update marked as a Transition will be interrupted by other state updates. For example, if you update a chart component inside a Transition, but then start typing into an input while the chart is in the middle of a re-render, React will restart the rendering work on the chart component after handling the input state update.\n\n- Transition updates can’t be used to control text inputs.\n\n- If there are multiple ongoing Transitions, React currently batches them together. This is a limitation that may be removed in a future release.\n\n## Usage\n\n### Marking a state update as a non-blocking Transition\n\nYou can mark a state update as a _Transition_ by wrapping it in a `startTransition` call:\n\n```sp-pre-placeholder grow-[2]\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n\n    startTransition(() => {\n\n      setTab(nextTab);\n\n    });\n\n  }\n\n  // ...\n\n}\n```\n\nTransitions let you keep the user interface updates responsive even on slow devices.\n\nWith a Transition, your UI stays responsive in the middle of a re-render. For example, if the user clicks a tab but then change their mind and click another tab, they can do that without waiting for the first re-render to finish.\n\n### Note\n\n`startTransition` is very similar to [`useTransition`](https://react.dev/reference/react/useTransition), except that it does not provide the `isPending` flag to track whether a Transition is ongoing. You can call `startTransition` when `useTransition` is not available. For example, `startTransition` works outside components, such as from a data library.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/startTransition", "title": "startTransition", "description": "startTransition lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:02:45", "type": "overview", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "startTransition – React", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/reference/react/startTransition", "og:url": "https://react.dev/reference/react/startTransition", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "startTransition – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "title": "startTransition – React", "twitter:title": "startTransition – React", "language": "en", "scrapeId": "63b07f46-001d-41cb-a7f5-7e5dcc55e8f6", "sourceURL": "https://react.dev/reference/react/startTransition", "url": "https://react.dev/reference/react/startTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `startTransition(action)`\n\nThe `startTransition` function lets you mark a state update as a Transition.\n\n```sp-pre-placeholder grow-[2]\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n\n    startTransition(() => {\n\n      setTab(nextTab);\n\n    });\n\n  }\n\n  // ...\n\n}\n```\n\n#### Parameters\n\n- `action`: A function that updates some state by calling one or more [`set` functions](https://react.dev/reference/react/useState#setstate). React calls `action` immediately with no parameters and marks all state updates scheduled synchronously during the `action` function call as Transitions. Any async calls awaited in the `action` will be included in the transition, but currently require wrapping any `set` functions after the `await` in an additional `startTransition` (see [Troubleshooting](https://react.dev/reference/react/useTransition#react-doesnt-treat-my-state-update-after-await-as-a-transition)). State updates marked as Transitions will be [non-blocking](https://react.dev/reference/react/startTransition#marking-a-state-update-as-a-non-blocking-transition) and [will not display unwanted loading indicators.](https://react.dev/reference/react/useTransition#preventing-unwanted-loading-indicators).\n\n#### Returns\n\n`startTransition` does not return anything.\n\n#### Caveats\n\n- `startTransition` does not provide a way to track whether a Transition is pending. To show a pending indicator while the Transition is ongoing, you need [`useTransition`](https://react.dev/reference/react/useTransition) instead.\n\n- You can wrap an update into a Transition only if you have access to the `set` function of that state. If you want to start a Transition in response to some prop or a custom Hook return value, try [`useDeferredValue`](https://react.dev/reference/react/useDeferredValue) instead.\n\n- The function you pass to `startTransition` is called immediately, marking all state updates that happen while it executes as Transitions. If you try to perform state updates in a `setTimeout`, for example, they won’t be marked as Transitions.\n\n- You must wrap any state updates after any async requests in another `startTransition` to mark them as Transitions. This is a known limitation that we will fix in the future (see [Troubleshooting](https://react.dev/reference/react/useTransition#react-doesnt-treat-my-state-update-after-await-as-a-transition)).\n\n- A state update marked as a Transition will be interrupted by other state updates. For example, if you update a chart component inside a Transition, but then start typing into an input while the chart is in the middle of a re-render, React will restart the rendering work on the chart component after handling the input state update.\n\n- Transition updates can’t be used to control text inputs.\n\n- If there are multiple ongoing Transitions, React currently batches them together. This is a limitation that may be removed in a future release..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/startTransition", "title": "startTransition", "description": "startTransition lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:02:45", "type": "section_detail", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "startTransition – React", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/reference/react/startTransition", "og:url": "https://react.dev/reference/react/startTransition", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "startTransition – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "title": "startTransition – React", "twitter:title": "startTransition – React", "language": "en", "scrapeId": "63b07f46-001d-41cb-a7f5-7e5dcc55e8f6", "sourceURL": "https://react.dev/reference/react/startTransition", "url": "https://react.dev/reference/react/startTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Marking a state update as a non-blocking Transition\n\nYou can mark a state update as a _Transition_ by wrapping it in a `startTransition` call:\n\n```sp-pre-placeholder grow-[2]\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n\n    startTransition(() => {\n\n      setTab(nextTab);\n\n    });\n\n  }\n\n  // ...\n\n}\n```\n\nTransitions let you keep the user interface updates responsive even on slow devices.\n\nWith a Transition, your UI stays responsive in the middle of a re-render. For example, if the user clicks a tab but then change their mind and click another tab, they can do that without waiting for the first re-render to finish.\n\n### Note\n\n`startTransition` is very similar to [`useTransition`](https://react.dev/reference/react/useTransition), except that it does not provide the `isPending` flag to track whether a Transition is ongoing. You can call `startTransition` when `useTransition` is not available. For example, `startTransition` works outside components, such as from a data library..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/startTransition", "title": "startTransition", "description": "startTransition lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:02:45", "type": "section_detail", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "startTransition – React", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/reference/react/startTransition", "og:url": "https://react.dev/reference/react/startTransition", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "startTransition – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "title": "startTransition – React", "twitter:title": "startTransition – React", "language": "en", "scrapeId": "63b07f46-001d-41cb-a7f5-7e5dcc55e8f6", "sourceURL": "https://react.dev/reference/react/startTransition", "url": "https://react.dev/reference/react/startTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for startTransition in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**startTransition Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nstartTransition(action)\n```\n```\n\nThis snippet shows you how to starttransition example, which is an important aspect of starttransition.\n\n**TabContainer Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n\n  const [tab, setTab] = useState('about');\n\n  function selectTab(nextTab) {\n\n    startTransition(() => {\n\n      setTab(nextTab);\n\n    });\n\n  }\n\n  // ...\n\n}\n```\n```\n\nThis snippet shows you how to tabcontainer example, which is an important aspect of starttransition.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/startTransition", "title": "startTransition", "description": "startTransition lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:02:45", "type": "code_examples", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "startTransition – React", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/reference/react/startTransition", "og:url": "https://react.dev/reference/react/startTransition", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "startTransition – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "title": "startTransition – React", "twitter:title": "startTransition – React", "language": "en", "scrapeId": "63b07f46-001d-41cb-a7f5-7e5dcc55e8f6", "sourceURL": "https://react.dev/reference/react/startTransition", "url": "https://react.dev/reference/react/startTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using startTransition in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `startTransition` to keep the UI responsive during state updates.\n\nWrap state updates after async requests in another `startTransition` to ensure they are marked as Transitions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/startTransition", "title": "startTransition", "description": "startTransition lets you render a part of the UI in the background.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:02:45", "type": "best_practices", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "startTransition – React", "twitter:site": "@reactjs", "ogUrl": "https://react.dev/reference/react/startTransition", "og:url": "https://react.dev/reference/react/startTransition", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "ogTitle": "startTransition – React", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "title": "startTransition – React", "twitter:title": "startTransition – React", "language": "en", "scrapeId": "63b07f46-001d-41cb-a7f5-7e5dcc55e8f6", "sourceURL": "https://react.dev/reference/react/startTransition", "url": "https://react.dev/reference/react/startTransition", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what experimental_useEffectEvent is in react-reference?\n\nAssistant: Sure, I'd be happy to explain experimental_useEffectEvent in react-reference.\n\n# experimental_useEffectEvent\n\nThis API is experimental and is not available in a stable version of React yet.Here's a quick rundown of what this is about:\n\n## Under Construction\n\nYou can try it by upgrading React packages to the most recent experimental version:\n\n- `react@experimental`\n- `react-dom@experimental`\n- `eslint-plugin-react-hooks@experimental`\n\nExperimental versions of React may contain bugs. Don’t use them in production.\n\n`useEffectEvent` is a React Hook that lets you extract non-reactive logic into an [Effect Event.](https://react.dev/learn/separating-events-from-effects#declaring-an-effect-event)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/experimental_useEffectEvent", "title": "experimental_useEffectEvent", "description": "This API is experimental and is not available in a stable version of React yet.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:02:52", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "experimental_useEffectEvent – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "ogTitle": "experimental_useEffectEvent – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/experimental_useEffectEvent", "title": "experimental_useEffectEvent – React", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:title": "experimental_useEffectEvent – React", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react/experimental_useEffectEvent", "twitter:creator": "@reactjs", "scrapeId": "c92faf00-93a5-48a2-9069-07ad68072e19", "sourceURL": "https://react.dev/reference/react/experimental_useEffectEvent", "url": "https://react.dev/reference/react/experimental_useEffectEvent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I under construction in react-reference?\n\nAssistant: To under construction in react-reference, here's what you do:\nYou can try it by upgrading React packages to the most recent experimental version:\n\n- `react@experimental`\n- `react-dom@experimental`\n- `eslint-plugin-react-hooks@experimental`\n\nExperimental versions of React may contain bugs. Don’t use them in production.\n\n`useEffectEvent` is a React Hook that lets you extract non-reactive logic into an [Effect Event.](https://react.dev/learn/separating-events-from-effects#declaring-an-effect-event).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_useEffectEvent", "title": "experimental_useEffectEvent", "description": "This API is experimental and is not available in a stable version of React yet.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:02:52", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "experimental_useEffectEvent – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "ogTitle": "experimental_useEffectEvent – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/experimental_useEffectEvent", "title": "experimental_useEffectEvent – React", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:title": "experimental_useEffectEvent – React", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react/experimental_useEffectEvent", "twitter:creator": "@reactjs", "scrapeId": "c92faf00-93a5-48a2-9069-07ad68072e19", "sourceURL": "https://react.dev/reference/react/experimental_useEffectEvent", "url": "https://react.dev/reference/react/experimental_useEffectEvent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for experimental_useEffectEvent in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**useEffectEvent Example**:\n\n```yaml\nconst onSomething = useEffectEvent(callback)\n```\n\nThis snippet shows you how to useeffectevent example, which is an important aspect of experimental_useeffectevent.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/experimental_useEffectEvent", "title": "experimental_useEffectEvent", "description": "This API is experimental and is not available in a stable version of React yet.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:02:52", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "experimental_useEffectEvent – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "ogTitle": "experimental_useEffectEvent – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/experimental_useEffectEvent", "title": "experimental_useEffectEvent – React", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:title": "experimental_useEffectEvent – React", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react/experimental_useEffectEvent", "twitter:creator": "@reactjs", "scrapeId": "c92faf00-93a5-48a2-9069-07ad68072e19", "sourceURL": "https://react.dev/reference/react/experimental_useEffectEvent", "url": "https://react.dev/reference/react/experimental_useEffectEvent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using experimental_useEffectEvent in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nExperimental versions of React may contain bugs. Don’t use them in production.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/experimental_useEffectEvent", "title": "experimental_useEffectEvent", "description": "This API is experimental and is not available in a stable version of React yet.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:02:52", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "experimental_useEffectEvent – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "ogTitle": "experimental_useEffectEvent – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "fb:app_id": "623268441017527", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/experimental_useEffectEvent", "title": "experimental_useEffectEvent – React", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:title": "experimental_useEffectEvent – React", "favicon": "https://react.dev/favicon-32x32.png", "ogUrl": "https://react.dev/reference/react/experimental_useEffectEvent", "twitter:creator": "@reactjs", "scrapeId": "c92faf00-93a5-48a2-9069-07ad68072e19", "sourceURL": "https://react.dev/reference/react/experimental_useEffectEvent", "url": "https://react.dev/reference/react/experimental_useEffectEvent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useEffect is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useEffect in react-reference.\n\n# useEffect\n\nuseEffect is a React Hook that lets you synchronize a component with an external system.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useEffect(setup, dependencies?)`\nCall `useEffect` at the top level of your component to declare an Effect:\n\n```sp-pre-placeholder grow-[2]\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n\n    const connection = createConnection(serverUrl, roomId);\n\n    connection.connect();\n\n    return () => {\n\n      connection.disconnect();\n\n    };\n\n  }, [serverUrl, roomId]);\n\n  // ...\n\n}\n```\n\n[See more examples below.](https://react.dev/reference/react/useEffect#usage) \n\n#### Parameters\n- `setup`: The function with your Effect’s logic. Your setup function may also optionally return a _cleanup_ function. When your component is added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. After your component is removed from the DOM, React will run your cleanup function.\n- **optional** `dependencies`: The list of all reactive values referenced inside of the `setup` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](https://react.dev/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison. If you omit this argument, your Effect will re-run after every re-render of the component. [See the difference between passing an array of dependencies, an empty array, and no dependencies at all.](https://react.dev/reference/react/useEffect#examples-dependencies) \n\n#### Returns\n`useEffect` returns `undefined`.\n\n#### Caveats\n- `useEffect` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- If you’re **not trying to synchronize with some external system,** [you probably don’t need an Effect.](https://react.dev/learn/you-might-not-need-an-effect)\n- When Strict Mode is on, React will **run one extra development-only setup+cleanup cycle** before the first real setup. This is a stress-test that ensures that your cleanup logic “mirrors” your setup logic and that it stops or undoes whatever the setup is doing. If this causes a problem, [implement the cleanup function.](https://react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)\n- If some of your dependencies are objects or functions defined inside the component, there is a risk that they will **cause the Effect to re-run more often than needed.** To fix this, remove unnecessary [object](https://react.dev/reference/react/useEffect#removing-unnecessary-object-dependencies) and [function](https://react.dev/reference/react/useEffect#removing-unnecessary-function-dependencies) dependencies. You can also [extract state updates](https://react.dev/reference/react/useEffect#updating-state-based-on-previous-state-from-an-effect) and [non-reactive logic](https://react.dev/reference/react/useEffect#reading-the-latest-props-and-state-from-an-effect) outside of your Effect.\n- If your Effect wasn’t caused by an interaction (like a click), React will generally let the browser **paint the updated screen first before running your Effect.** If your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), replace `useEffect` with [`useLayoutEffect`.](https://react.dev/reference/react/useLayoutEffect)\n- If your Effect is caused by an interaction (like a click), **React may run your Effect before the browser paints the updated screen**. This ensures that the result of the Effect can be observed by the event system. Usually, this works as expected. However, if you must defer the work until after paint, such as an `alert()`, you can use `setTimeout`. See [reactwg/react-18/128](https://github.com/reactwg/react-18/discussions/128) for more information.\n- Even if your Effect was caused by an interaction (like a click), **React may allow the browser to repaint the screen before processing the state updates inside your Effect.** Usually, this works as expected. However, if you must block the browser from repainting the screen, you need to replace `useEffect` with [`useLayoutEffect`.](https://react.dev/reference/react/useLayoutEffect)\n- Effects **only run on the client.** They don’t run during server rendering.\n\n## Usage\n\n### Connecting to an external system\nSome components need to stay connected to the network, some browser API, or a third-party library, while they are displayed on the page. These systems aren’t controlled by React, so they are called _external._\n\nTo [connect your component to some external system,](https://react.dev/learn/synchronizing-with-effects) call `useEffect` at the top level of your component:\n\n```sp-pre-placeholder grow-[2]\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n\n   const connection = createConnection(serverUrl, roomId);\n\n    connection.connect();\n\n   return () => {\n\n      connection.disconnect();\n\n   };\n\n  }, [serverUrl, roomId]);\n\n  // ...\n\n}\n```\n\nYou need to pass two arguments to `useEffect`:\n\n1. A _setup function_ with setup code that connects to that system.\n   - It should return a _cleanup function_ with cleanup code that disconnects from that system.\n2. A list of dependencies including every value from your component used inside of those functions.\n\n**React calls your setup and cleanup functions whenever it’s necessary, which may happen multiple times:**\n\n1. Your setup code runs when your component is added to the page _(mounts)_.\n2. After every re-render of your component where the dependencies have changed:\n   - First, your cleanup code runs with the old props and state.\n   - Then, your setup code runs with the new props and state.\n3. Your cleanup code runs one final time after your component is removed from the page _(unmounts)._ \n\n**Let’s illustrate this sequence for the example above.**\n\nWhen the `ChatRoom` component above gets added to the page, it will connect to the chat room with the initial `serverUrl` and `roomId`. If either `serverUrl` or `roomId` change as a result of a re-render (say, if the user picks a different chat room in a dropdown), your Effect will _disconnect from the previous room, and connect to the next one._ When the `ChatRoom` component is removed from the page, your Effect will disconnect one last time.\n\n**To [help you find bugs,](https://react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed) in development React runs setup and cleanup one extra time before the setup.** This is a stress-test that verifies your Effect’s logic is implemented correctly. If this causes visible issues, your cleanup function is missing some logic. The cleanup function should stop or undo whatever the setup function was doing. The rule of thumb is that the user shouldn’t be able to distinguish between the setup being called once (as in production) and a _setup_ → _cleanup_ → _setup_ sequence (as in development). [See common solutions.](https://react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)\n\n**Try to [write every Effect as an independent process](https://react.dev/learn/lifecycle-of-reactive-effects#each-effect-represents-a-separate-synchronization-process) and [think about a single setup/cleanup cycle at a time.](https://react.dev/learn/lifecycle-of-reactive-effects#thinking-from-the-effects-perspective)** It shouldn’t matter whether your component is mounting, updating, or unmounting. When your cleanup logic correctly “mirrors” the setup logic, your Effect is resilient to running setup and cleanup as often as needed.\n\n## Troubleshooting\n\n### My Effect runs twice when the component mounts\nWhen Strict Mode is on, in development, React runs setup and cleanup one extra time before the actual setup.\n\nThis is a stress-test that verifies your Effect’s logic is implemented correctly. If this causes visible issues, your cleanup function is missing some logic. The cleanup function should stop or undo whatever the setup function was doing. The rule of thumb is that the user shouldn’t be able to distinguish between the setup being called once (as in production) and a setup → cleanup → setup sequence (as in development).\n\nRead more about [how this helps find bugs](https://react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed) and [how to fix your logic.](https://react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useEffect", "title": "useEffect", "description": "useEffect is a React Hook that lets you synchronize a component with an external system.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:03:38", "type": "overview", "page_metadata": {"fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "title": "useEffect – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogTitle": "useEffect – React", "twitter:site": "@reactjs", "og:title": "useEffect – React", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useEffect", "og:url": "https://react.dev/reference/react/useEffect", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:title": "useEffect – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "scrapeId": "9d94053e-f419-4783-881f-45f5462c5f4b", "sourceURL": "https://react.dev/reference/react/useEffect", "url": "https://react.dev/reference/react/useEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useEffect(setup, dependencies?)`\nCall `useEffect` at the top level of your component to declare an Effect:\n\n```sp-pre-placeholder grow-[2]\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n\n    const connection = createConnection(serverUrl, roomId);\n\n    connection.connect();\n\n    return () => {\n\n      connection.disconnect();\n\n    };\n\n  }, [serverUrl, roomId]);\n\n  // ...\n\n}\n```\n\n[See more examples below.](https://react.dev/reference/react/useEffect#usage) \n\n#### Parameters\n- `setup`: The function with your Effect’s logic. Your setup function may also optionally return a _cleanup_ function. When your component is added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. After your component is removed from the DOM, React will run your cleanup function.\n- **optional** `dependencies`: The list of all reactive values referenced inside of the `setup` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](https://react.dev/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison. If you omit this argument, your Effect will re-run after every re-render of the component. [See the difference between passing an array of dependencies, an empty array, and no dependencies at all.](https://react.dev/reference/react/useEffect#examples-dependencies) \n\n#### Returns\n`useEffect` returns `undefined`.\n\n#### Caveats\n- `useEffect` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- If you’re **not trying to synchronize with some external system,** [you probably don’t need an Effect.](https://react.dev/learn/you-might-not-need-an-effect)\n- When Strict Mode is on, React will **run one extra development-only setup+cleanup cycle** before the first real setup. This is a stress-test that ensures that your cleanup logic “mirrors” your setup logic and that it stops or undoes whatever the setup is doing. If this causes a problem, [implement the cleanup function.](https://react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)\n- If some of your dependencies are objects or functions defined inside the component, there is a risk that they will **cause the Effect to re-run more often than needed.** To fix this, remove unnecessary [object](https://react.dev/reference/react/useEffect#removing-unnecessary-object-dependencies) and [function](https://react.dev/reference/react/useEffect#removing-unnecessary-function-dependencies) dependencies. You can also [extract state updates](https://react.dev/reference/react/useEffect#updating-state-based-on-previous-state-from-an-effect) and [non-reactive logic](https://react.dev/reference/react/useEffect#reading-the-latest-props-and-state-from-an-effect) outside of your Effect.\n- If your Effect wasn’t caused by an interaction (like a click), React will generally let the browser **paint the updated screen first before running your Effect.** If your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), replace `useEffect` with [`useLayoutEffect`.](https://react.dev/reference/react/useLayoutEffect)\n- If your Effect is caused by an interaction (like a click), **React may run your Effect before the browser paints the updated screen**. This ensures that the result of the Effect can be observed by the event system. Usually, this works as expected. However, if you must defer the work until after paint, such as an `alert()`, you can use `setTimeout`. See [reactwg/react-18/128](https://github.com/reactwg/react-18/discussions/128) for more information.\n- Even if your Effect was caused by an interaction (like a click), **React may allow the browser to repaint the screen before processing the state updates inside your Effect.** Usually, this works as expected. However, if you must block the browser from repainting the screen, you need to replace `useEffect` with [`useLayoutEffect`.](https://react.dev/reference/react/useLayoutEffect)\n- Effects **only run on the client.** They don’t run during server rendering..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useEffect", "title": "useEffect", "description": "useEffect is a React Hook that lets you synchronize a component with an external system.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:03:38", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "title": "useEffect – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogTitle": "useEffect – React", "twitter:site": "@reactjs", "og:title": "useEffect – React", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useEffect", "og:url": "https://react.dev/reference/react/useEffect", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:title": "useEffect – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "scrapeId": "9d94053e-f419-4783-881f-45f5462c5f4b", "sourceURL": "https://react.dev/reference/react/useEffect", "url": "https://react.dev/reference/react/useEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Connecting to an external system\nSome components need to stay connected to the network, some browser API, or a third-party library, while they are displayed on the page. These systems aren’t controlled by React, so they are called _external._\n\nTo [connect your component to some external system,](https://react.dev/learn/synchronizing-with-effects) call `useEffect` at the top level of your component:\n\n```sp-pre-placeholder grow-[2]\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n\n   const connection = createConnection(serverUrl, roomId);\n\n    connection.connect();\n\n   return () => {\n\n      connection.disconnect();\n\n   };\n\n  }, [serverUrl, roomId]);\n\n  // ...\n\n}\n```\n\nYou need to pass two arguments to `useEffect`:\n\n1. A _setup function_ with setup code that connects to that system.\n   - It should return a _cleanup function_ with cleanup code that disconnects from that system.\n2. A list of dependencies including every value from your component used inside of those functions.\n\n**React calls your setup and cleanup functions whenever it’s necessary, which may happen multiple times:**\n\n1. Your setup code runs when your component is added to the page _(mounts)_.\n2. After every re-render of your component where the dependencies have changed:\n   - First, your cleanup code runs with the old props and state.\n   - Then, your setup code runs with the new props and state.\n3. Your cleanup code runs one final time after your component is removed from the page _(unmounts)._ \n\n**Let’s illustrate this sequence for the example above.**\n\nWhen the `ChatRoom` component above gets added to the page, it will connect to the chat room with the initial `serverUrl` and `roomId`. If either `serverUrl` or `roomId` change as a result of a re-render (say, if the user picks a different chat room in a dropdown), your Effect will _disconnect from the previous room, and connect to the next one._ When the `ChatRoom` component is removed from the page, your Effect will disconnect one last time.\n\n**To [help you find bugs,](https://react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed) in development React runs setup and cleanup one extra time before the setup.** This is a stress-test that verifies your Effect’s logic is implemented correctly. If this causes visible issues, your cleanup function is missing some logic. The cleanup function should stop or undo whatever the setup function was doing. The rule of thumb is that the user shouldn’t be able to distinguish between the setup being called once (as in production) and a _setup_ → _cleanup_ → _setup_ sequence (as in development). [See common solutions.](https://react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)\n\n**Try to [write every Effect as an independent process](https://react.dev/learn/lifecycle-of-reactive-effects#each-effect-represents-a-separate-synchronization-process) and [think about a single setup/cleanup cycle at a time.](https://react.dev/learn/lifecycle-of-reactive-effects#thinking-from-the-effects-perspective)** It shouldn’t matter whether your component is mounting, updating, or unmounting. When your cleanup logic correctly “mirrors” the setup logic, your Effect is resilient to running setup and cleanup as often as needed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useEffect", "title": "useEffect", "description": "useEffect is a React Hook that lets you synchronize a component with an external system.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:03:38", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "title": "useEffect – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogTitle": "useEffect – React", "twitter:site": "@reactjs", "og:title": "useEffect – React", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useEffect", "og:url": "https://react.dev/reference/react/useEffect", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:title": "useEffect – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "scrapeId": "9d94053e-f419-4783-881f-45f5462c5f4b", "sourceURL": "https://react.dev/reference/react/useEffect", "url": "https://react.dev/reference/react/useEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### My Effect runs twice when the component mounts\nWhen Strict Mode is on, in development, React runs setup and cleanup one extra time before the actual setup.\n\nThis is a stress-test that verifies your Effect’s logic is implemented correctly. If this causes visible issues, your cleanup function is missing some logic. The cleanup function should stop or undo whatever the setup function was doing. The rule of thumb is that the user shouldn’t be able to distinguish between the setup being called once (as in production) and a setup → cleanup → setup sequence (as in development).\n\nRead more about [how this helps find bugs](https://react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed) and [how to fix your logic.](https://react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useEffect", "title": "useEffect", "description": "useEffect is a React Hook that lets you synchronize a component with an external system.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:03:38", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "title": "useEffect – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogTitle": "useEffect – React", "twitter:site": "@reactjs", "og:title": "useEffect – React", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useEffect", "og:url": "https://react.dev/reference/react/useEffect", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:title": "useEffect – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "scrapeId": "9d94053e-f419-4783-881f-45f5462c5f4b", "sourceURL": "https://react.dev/reference/react/useEffect", "url": "https://react.dev/reference/react/useEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useEffect in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useEffect Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nuseEffect(setup, dependencies?)\n```\n```\n\nThis snippet shows you how to basic useeffect example, which is an important aspect of useeffect.\n\n**ChatRoom Component Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n  useEffect(() => {\n\n    const connection = createConnection(serverUrl, roomId);\n\n    connection.connect();\n\n    return () => {\n\n      connection.disconnect();\n\n    };\n\n  }, [serverUrl, roomId]);\n\n  // ...\n\n}\n```\n```\n\nThis snippet shows you how to chatroom component example, which is an important aspect of useeffect.\n\n**Data Fetching Example**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nimport { useState, useEffect } from 'react';\n\nimport { fetchBio } from './api.js';\n\nexport default function Page() {\n\n  const [person, setPerson] = useState('Alice');\n\n  const [bio, setBio] = useState(null);\n\n  useEffect(() => {\n\n    let ignore = false;\n\n    setBio(null);\n\n    fetchBio(person).then(result => {\n\n      if (!ignore) {\n\n        setBio(result);\n\n      }\n\n    });\n\n    return () => {\n\n      ignore = true;\n\n    };\n\n  }, [person]);\n\n  // ...\n```\n```\n\nThis snippet shows you how to data fetching example, which is an important aspect of useeffect.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useEffect", "title": "useEffect", "description": "useEffect is a React Hook that lets you synchronize a component with an external system.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:03:38", "type": "code_examples", "page_metadata": {"fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "title": "useEffect – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogTitle": "useEffect – React", "twitter:site": "@reactjs", "og:title": "useEffect – React", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useEffect", "og:url": "https://react.dev/reference/react/useEffect", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:title": "useEffect – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "scrapeId": "9d94053e-f419-4783-881f-45f5462c5f4b", "sourceURL": "https://react.dev/reference/react/useEffect", "url": "https://react.dev/reference/react/useEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useEffect in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCall `useEffect` at the top level of your component to declare an Effect.\n\nIf you’re not trying to synchronize with some external system, you probably don’t need an Effect.\n\nWhen Strict Mode is on, React will run one extra development-only setup+cleanup cycle before the first real setup.\n\nIf your Effect wasn’t caused by an interaction (like a click), React will generally let the browser paint the updated screen first before running your Effect.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useEffect", "title": "useEffect", "description": "useEffect is a React Hook that lets you synchronize a component with an external system.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:03:38", "type": "best_practices", "page_metadata": {"fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "title": "useEffect – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "ogTitle": "useEffect – React", "twitter:site": "@reactjs", "og:title": "useEffect – React", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useEffect", "og:url": "https://react.dev/reference/react/useEffect", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:title": "useEffect – React", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "scrapeId": "9d94053e-f419-4783-881f-45f5462c5f4b", "sourceURL": "https://react.dev/reference/react/useEffect", "url": "https://react.dev/reference/react/useEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Directives is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Directives in react-reference.\n\n# Directives\n\nThis section covers the use of directives in React Server Components, providing instructions for bundlers compatible with React Server Components.Here's a quick rundown of what this is about:\n\n## React Server Components\n\nDirectives are for use in React Server Components. Directives provide instructions to bundlers compatible with React Server Components.\n\n## Source code directives\n\n- 'use client' lets you mark what code runs on the client.\n- 'use server' marks server-side functions that can be called from client-side code.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/rsc/directives", "title": "Directives", "description": "This section covers the use of directives in React Server Components, providing instructions for bundlers compatible with React Server Components.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 01:03:43", "type": "overview", "page_metadata": {"twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "Directives – React", "twitter:description": "The library for web and native user interfaces", "title": "Directives – React", "twitter:title": "Directives – React", "ogUrl": "https://react.dev/reference/rsc/directives", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/reference/rsc/directives", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Directives – React", "language": "en", "fb:app_id": "623268441017527", "scrapeId": "fbda7182-9c86-490d-adef-3705beaadff1", "sourceURL": "https://react.dev/reference/rsc/directives", "url": "https://react.dev/reference/rsc/directives", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I react server components in react-reference?\n\nAssistant: To react server components in react-reference, here's what you do:\nDirectives are for use in React Server Components. Directives provide instructions to bundlers compatible with React Server Components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/directives", "title": "Directives", "description": "This section covers the use of directives in React Server Components, providing instructions for bundlers compatible with React Server Components.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 01:03:43", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "Directives – React", "twitter:description": "The library for web and native user interfaces", "title": "Directives – React", "twitter:title": "Directives – React", "ogUrl": "https://react.dev/reference/rsc/directives", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/reference/rsc/directives", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Directives – React", "language": "en", "fb:app_id": "623268441017527", "scrapeId": "fbda7182-9c86-490d-adef-3705beaadff1", "sourceURL": "https://react.dev/reference/rsc/directives", "url": "https://react.dev/reference/rsc/directives", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I source code directives in react-reference?\n\nAssistant: To source code directives in react-reference, here's what you do:\n- 'use client' lets you mark what code runs on the client.\n- 'use server' marks server-side functions that can be called from client-side code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/directives", "title": "Directives", "description": "This section covers the use of directives in React Server Components, providing instructions for bundlers compatible with React Server Components.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 01:03:43", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "Directives – React", "twitter:description": "The library for web and native user interfaces", "title": "Directives – React", "twitter:title": "Directives – React", "ogUrl": "https://react.dev/reference/rsc/directives", "msapplication-TileColor": "#2b5797", "og:url": "https://react.dev/reference/rsc/directives", "og:type": "website", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Directives – React", "language": "en", "fb:app_id": "623268441017527", "scrapeId": "fbda7182-9c86-490d-adef-3705beaadff1", "sourceURL": "https://react.dev/reference/rsc/directives", "url": "https://react.dev/reference/rsc/directives", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useSyncExternalStore is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useSyncExternalStore in react-reference.\n\n# useSyncExternalStore\n\n`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.Here's a quick rundown of what this is about:\n\n## Reference\n\nCall `useSyncExternalStore` at the top level of your component to read a value from an external data store.\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nimport { todosStore } from './todoStore.js';\n\nfunction TodosApp() {\n\n  const todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n\n  // ...\n}\n```\n\nIt returns the snapshot of the data in the store. You need to pass two functions as arguments:\n\n1. The `subscribe` function should subscribe to the store and return a function that unsubscribes.\n2. The `getSnapshot` function should read a snapshot of the data from the store.\n\n## Parameters\n\n- `subscribe`: A function that takes a single `callback` argument and subscribes it to the store. When the store changes, it should invoke the provided `callback`, which will cause React to re-call `getSnapshot` and (if needed) re-render the component. The `subscribe` function should return a function that cleans up the subscription.\n\n- `getSnapshot`: A function that returns a snapshot of the data in the store that’s needed by the component. While the store has not changed, repeated calls to `getSnapshot` must return the same value. If the store changes and the returned value is different (as compared by [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), React re-renders the component.\n\n- **optional** `getServerSnapshot`: A function that returns the initial snapshot of the data in the store. It will be used only during server rendering and during hydration of server-rendered content on the client. The server snapshot must be the same between the client and the server, and is usually serialized and passed from the server to the client. If you omit this argument, rendering the component on the server will throw an error.\n\n## Returns\n\nThe current snapshot of the store which you can use in your rendering logic.\n\n## Caveats\n\n- The store snapshot returned by `getSnapshot` must be immutable. If the underlying store has mutable data, return a new immutable snapshot if the data has changed. Otherwise, return a cached last snapshot.\n\n- If a different `subscribe` function is passed during a re-render, React will re-subscribe to the store using the newly passed `subscribe` function. You can prevent this by declaring `subscribe` outside the component.\n\n- If the store is mutated during a [non-blocking Transition update](https://react.dev/reference/react/useTransition), React will fall back to performing that update as blocking. Specifically, for every Transition update, React will call `getSnapshot` a second time just before applying changes to the DOM. If it returns a different value than when it was called originally, React will restart the update from scratch, this time applying it as a blocking update, to ensure that every component on screen is reflecting the same version of the store.\n\n- It’s not recommended to _suspend_ a render based on a store value returned by `useSyncExternalStore`. The reason is that mutations to the external store cannot be marked as [non-blocking Transition updates](https://react.dev/reference/react/useTransition), so they will trigger the nearest [`Suspense` fallback](https://react.dev/reference/react/Suspense), replacing already-rendered content on screen with a loading spinner, which typically makes a poor UX.\n\n## Usage\n\n### Subscribing to an external store\nMost of your React components will only read data from their [props,](https://react.dev/learn/passing-props-to-a-component) [state,](https://react.dev/reference/react/useState) and [context.](https://react.dev/reference/react/useContext) However, sometimes a component needs to read some data from some store outside of React that changes over time. This includes:\n\n- Third-party state management libraries that hold state outside of React.\n- Browser APIs that expose a mutable value and events to subscribe to its changes.\n\nCall `useSyncExternalStore` at the top level of your component to read a value from an external data store.\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nimport { todosStore } from './todoStore.js';\n\nfunction TodosApp() {\n\n  const todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n\n  // ...\n}\n```\n\nIt returns the snapshot of the data in the store. You need to pass two functions as arguments:\n\n1. The `subscribe` function should subscribe to the store and return a function that unsubscribes.\n2. The `getSnapshot` function should read a snapshot of the data from the store.\n\n## Subscribing to a browser API\n\nAnother reason to add `useSyncExternalStore` is when you want to subscribe to some value exposed by the browser that changes over time. For example, suppose that you want your component to display whether the network connection is active. The browser exposes this information via a property called [`navigator.onLine`.](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine)\n\nThis value can change without React’s knowledge, so you should read it with `useSyncExternalStore`.\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nfunction ChatIndicator() {\n\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n  // ...\n}\n```\n\nTo implement the `getSnapshot` function, read the current value from the browser API:\n\n```sp-pre-placeholder grow-[2]\nfunction getSnapshot() {\n\n  return navigator.onLine;\n}\n```\n\nNext, you need to implement the `subscribe` function. For example, when `navigator.onLine` changes, the browser fires the [`online`](https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event) and [`offline`](https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event) events on the `window` object. You need to subscribe the `callback` argument to the corresponding events, and then return a function that cleans up the subscriptions:\n\n```sp-pre-placeholder grow-[2]\nfunction subscribe(callback) {\n\n  window.addEventListener('online', callback);\n\n  window.addEventListener('offline', callback);\n\n  return () => {\n\n    window.removeEventListener('online', callback);\n\n    window.removeEventListener('offline', callback);\n\n  };\n}\n```\n\nNow React knows how to read the value from the external `navigator.onLine` API and how to subscribe to its changes. Disconnect your device from the network and notice that the component re-renders in response.\n\n## Extracting the logic to a custom Hook\n\nUsually you won’t write `useSyncExternalStore` directly in your components. Instead, you’ll typically call it from your own custom Hook. This lets you use the same external store from different components.\n\nFor example, this custom `useOnlineStatus` Hook tracks whether the network is online:\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n  return isOnline;\n}\n\nfunction getSnapshot() {\n\n  // ...\n}\n\nfunction subscribe(callback) {\n\n  // ...\n}\n```\n\nNow different components can call `useOnlineStatus` without repeating the underlying implementation.\n\n## Adding support for server rendering\n\nIf your React app uses [server rendering,](https://react.dev/reference/react-dom/server) your React components will also run outside the browser environment to generate the initial HTML. This creates a few challenges when connecting to an external store:\n\n- If you’re connecting to a browser-only API, it won’t work because it does not exist on the server.\n- If you’re connecting to a third-party data store, you’ll need its data to match between the server and client.\n\nTo solve these issues, pass a `getServerSnapshot` function as the third argument to `useSyncExternalStore`:\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\n  return isOnline;\n}\n\nfunction getSnapshot() {\n\n  return navigator.onLine;\n}\n\nfunction getServerSnapshot() {\n\n  return true; // Always show \"Online\" for server-generated HTML\n}\n\nfunction subscribe(callback) {\n\n  // ...\n}\n```\n\nThe `getServerSnapshot` function is similar to `getSnapshot`, but it runs only in two situations:\n\n- It runs on the server when generating the HTML.\n- It runs on the client during [hydration](https://react.dev/reference/react-dom/client/hydrateRoot), i.e. when React takes the server HTML and makes it interactive.\n\n## Troubleshooting\n\n### I’m getting an error: “The result of `getSnapshot` should be cached”\nThis error means your `getSnapshot` function returns a new object every time it’s called, for example:\n\n```sp-pre-placeholder grow-[2]\nfunction getSnapshot() {\n\n  // 🔴 Do not return always different objects from getSnapshot\n\n  return {\n\n    todos: myStore.todos\n\n  };\n}\n```\n\nReact will re-render the component if `getSnapshot` return value is different from the last time. This is why, if you always return a different value, you will enter an infinite loop and get this error.\n\nYour `getSnapshot` object should only return a different object if something has actually changed. If your store contains immutable data, you can return that data directly:\n\n```sp-pre-placeholder grow-[2]\nfunction getSnapshot() {\n\n  // ✅ You can return immutable data\n\n  return myStore.todos;\n}\n```\n\nIf your store data is mutable, your `getSnapshot` function should return an immutable snapshot of it. This means it _does_ need to create new objects, but it shouldn’t do this for every single call. Instead, it should store the last calculated snapshot, and return the same snapshot as the last time if the data in the store has not changed.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `useSyncExternalStore` at the top level of your component to read a value from an external data store.\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nimport { todosStore } from './todoStore.js';\n\nfunction TodosApp() {\n\n  const todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n\n  // ...\n}\n```\n\nIt returns the snapshot of the data in the store. You need to pass two functions as arguments:\n\n1. The `subscribe` function should subscribe to the store and return a function that unsubscribes.\n2. The `getSnapshot` function should read a snapshot of the data from the store..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `subscribe`: A function that takes a single `callback` argument and subscribes it to the store. When the store changes, it should invoke the provided `callback`, which will cause React to re-call `getSnapshot` and (if needed) re-render the component. The `subscribe` function should return a function that cleans up the subscription.\n\n- `getSnapshot`: A function that returns a snapshot of the data in the store that’s needed by the component. While the store has not changed, repeated calls to `getSnapshot` must return the same value. If the store changes and the returned value is different (as compared by [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), React re-renders the component.\n\n- **optional** `getServerSnapshot`: A function that returns the initial snapshot of the data in the store. It will be used only during server rendering and during hydration of server-rendered content on the client. The server snapshot must be the same between the client and the server, and is usually serialized and passed from the server to the client. If you omit this argument, rendering the component on the server will throw an error..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\nThe current snapshot of the store which you can use in your rendering logic..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- The store snapshot returned by `getSnapshot` must be immutable. If the underlying store has mutable data, return a new immutable snapshot if the data has changed. Otherwise, return a cached last snapshot.\n\n- If a different `subscribe` function is passed during a re-render, React will re-subscribe to the store using the newly passed `subscribe` function. You can prevent this by declaring `subscribe` outside the component.\n\n- If the store is mutated during a [non-blocking Transition update](https://react.dev/reference/react/useTransition), React will fall back to performing that update as blocking. Specifically, for every Transition update, React will call `getSnapshot` a second time just before applying changes to the DOM. If it returns a different value than when it was called originally, React will restart the update from scratch, this time applying it as a blocking update, to ensure that every component on screen is reflecting the same version of the store.\n\n- It’s not recommended to _suspend_ a render based on a store value returned by `useSyncExternalStore`. The reason is that mutations to the external store cannot be marked as [non-blocking Transition updates](https://react.dev/reference/react/useTransition), so they will trigger the nearest [`Suspense` fallback](https://react.dev/reference/react/Suspense), replacing already-rendered content on screen with a loading spinner, which typically makes a poor UX..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Subscribing to an external store\nMost of your React components will only read data from their [props,](https://react.dev/learn/passing-props-to-a-component) [state,](https://react.dev/reference/react/useState) and [context.](https://react.dev/reference/react/useContext) However, sometimes a component needs to read some data from some store outside of React that changes over time. This includes:\n\n- Third-party state management libraries that hold state outside of React.\n- Browser APIs that expose a mutable value and events to subscribe to its changes.\n\nCall `useSyncExternalStore` at the top level of your component to read a value from an external data store.\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nimport { todosStore } from './todoStore.js';\n\nfunction TodosApp() {\n\n  const todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n\n  // ...\n}\n```\n\nIt returns the snapshot of the data in the store. You need to pass two functions as arguments:\n\n1. The `subscribe` function should subscribe to the store and return a function that unsubscribes.\n2. The `getSnapshot` function should read a snapshot of the data from the store..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I subscribing to a browser api in react-reference?\n\nAssistant: To subscribing to a browser api in react-reference, here's what you do:\nAnother reason to add `useSyncExternalStore` is when you want to subscribe to some value exposed by the browser that changes over time. For example, suppose that you want your component to display whether the network connection is active. The browser exposes this information via a property called [`navigator.onLine`.](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine)\n\nThis value can change without React’s knowledge, so you should read it with `useSyncExternalStore`.\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nfunction ChatIndicator() {\n\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n  // ...\n}\n```\n\nTo implement the `getSnapshot` function, read the current value from the browser API:\n\n```sp-pre-placeholder grow-[2]\nfunction getSnapshot() {\n\n  return navigator.onLine;\n}\n```\n\nNext, you need to implement the `subscribe` function. For example, when `navigator.onLine` changes, the browser fires the [`online`](https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event) and [`offline`](https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event) events on the `window` object. You need to subscribe the `callback` argument to the corresponding events, and then return a function that cleans up the subscriptions:\n\n```sp-pre-placeholder grow-[2]\nfunction subscribe(callback) {\n\n  window.addEventListener('online', callback);\n\n  window.addEventListener('offline', callback);\n\n  return () => {\n\n    window.removeEventListener('online', callback);\n\n    window.removeEventListener('offline', callback);\n\n  };\n}\n```\n\nNow React knows how to read the value from the external `navigator.onLine` API and how to subscribe to its changes. Disconnect your device from the network and notice that the component re-renders in response..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I extracting the logic to a custom hook in react-reference?\n\nAssistant: To extracting the logic to a custom hook in react-reference, here's what you do:\nUsually you won’t write `useSyncExternalStore` directly in your components. Instead, you’ll typically call it from your own custom Hook. This lets you use the same external store from different components.\n\nFor example, this custom `useOnlineStatus` Hook tracks whether the network is online:\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n  return isOnline;\n}\n\nfunction getSnapshot() {\n\n  // ...\n}\n\nfunction subscribe(callback) {\n\n  // ...\n}\n```\n\nNow different components can call `useOnlineStatus` without repeating the underlying implementation..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I adding support for server rendering in react-reference?\n\nAssistant: To adding support for server rendering in react-reference, here's what you do:\nIf your React app uses [server rendering,](https://react.dev/reference/react-dom/server) your React components will also run outside the browser environment to generate the initial HTML. This creates a few challenges when connecting to an external store:\n\n- If you’re connecting to a browser-only API, it won’t work because it does not exist on the server.\n- If you’re connecting to a third-party data store, you’ll need its data to match between the server and client.\n\nTo solve these issues, pass a `getServerSnapshot` function as the third argument to `useSyncExternalStore`:\n\n```sp-pre-placeholder grow-[2]\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n\n  const isOnline = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\n  return isOnline;\n}\n\nfunction getSnapshot() {\n\n  return navigator.onLine;\n}\n\nfunction getServerSnapshot() {\n\n  return true; // Always show \"Online\" for server-generated HTML\n}\n\nfunction subscribe(callback) {\n\n  // ...\n}\n```\n\nThe `getServerSnapshot` function is similar to `getSnapshot`, but it runs only in two situations:\n\n- It runs on the server when generating the HTML.\n- It runs on the client during [hydration](https://react.dev/reference/react-dom/client/hydrateRoot), i.e. when React takes the server HTML and makes it interactive..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### I’m getting an error: “The result of `getSnapshot` should be cached”\nThis error means your `getSnapshot` function returns a new object every time it’s called, for example:\n\n```sp-pre-placeholder grow-[2]\nfunction getSnapshot() {\n\n  // 🔴 Do not return always different objects from getSnapshot\n\n  return {\n\n    todos: myStore.todos\n\n  };\n}\n```\n\nReact will re-render the component if `getSnapshot` return value is different from the last time. This is why, if you always return a different value, you will enter an infinite loop and get this error.\n\nYour `getSnapshot` object should only return a different object if something has actually changed. If your store contains immutable data, you can return that data directly:\n\n```sp-pre-placeholder grow-[2]\nfunction getSnapshot() {\n\n  // ✅ You can return immutable data\n\n  return myStore.todos;\n}\n```\n\nIf your store data is mutable, your `getSnapshot` function should return an immutable snapshot of it. This means it _does_ need to create new objects, but it shouldn’t do this for every single call. Instead, it should store the last calculated snapshot, and return the same snapshot as the last time if the data in the store has not changed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useSyncExternalStore in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic usage of useSyncExternalStore**:\n\n```yaml\nconst snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)\n```\n\nThis snippet shows you how to basic usage of usesyncexternalstore, which is an important aspect of usesyncexternalstore.\n\n**Example of TodosApp**:\n\n```yaml\nimport { useSyncExternalStore } from 'react';\n\nimport { todosStore } from './todoStore.js';\n\nfunction TodosApp() {\n\n  const todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n\n  // ...\n}\n```\n\nThis snippet shows you how to example of todosapp, which is an important aspect of usesyncexternalstore.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useSyncExternalStore in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen possible, we recommend using built-in React state with `useState` and `useReducer` instead. The `useSyncExternalStore` API is mostly useful if you need to integrate with existing non-React code.\n\nMake sure that `getServerSnapshot` returns the same exact data on the initial client render as it returned on the server.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useSyncExternalStore", "title": "useSyncExternalStore", "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:04:32", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useSyncExternalStore", "ogUrl": "https://react.dev/reference/react/useSyncExternalStore", "fb:app_id": "623268441017527", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "title": "useSyncExternalStore – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:title": "useSyncExternalStore – React", "ogTitle": "useSyncExternalStore – React", "og:title": "useSyncExternalStore – React", "theme-color": "#23272f", "scrapeId": "054a454c-9a27-4cd6-8d0a-ca3a3b0d5cb9", "sourceURL": "https://react.dev/reference/react/useSyncExternalStore", "url": "https://react.dev/reference/react/useSyncExternalStore", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what experimental_taintUniqueValue is in react-reference?\n\nAssistant: Sure, I'd be happy to explain experimental_taintUniqueValue in react-reference.\n\n# experimental_taintUniqueValue\n\nThis API is experimental and is not available in a stable version of React yet. It allows you to prevent unique values from being passed to Client Components like passwords, keys, or tokens.Here's a quick rundown of what this is about:\n\n## Under Construction\n\nThis API is experimental and is not available in a stable version of React yet.\n\nYou can try it by upgrading React packages to the most recent experimental version:\n\n- `react@experimental`\n- `react-dom@experimental`\n- `eslint-plugin-react-hooks@experimental`\n\nExperimental versions of React may contain bugs. Don’t use them in production.\n\nThis API is only available inside [React Server Components](https://react.dev/reference/rsc/use-client).\n\n`taintUniqueValue` lets you prevent unique values from being passed to Client Components like passwords, keys, or tokens.\n\n## Reference\n\n### `taintUniqueValue(message, lifetime, value)`\n\nCall `taintUniqueValue` with a password, token, key or hash to register it with React as something that should not be allowed to be passed to the Client as is:\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass secret keys to the client.',\n  process,\n  process.env.SECRET_KEY\n);\n```\n\n#### Parameters\n- `message`: The message you want to display if `value` is passed to a Client Component. This message will be displayed as a part of the Error that will be thrown if `value` is passed to a Client Component.\n- `lifetime`: Any object that indicates how long `value` should be tainted. `value` will be blocked from being sent to any Client Component while this object still exists. For example, passing `globalThis` blocks the value for the lifetime of an app. `lifetime` is typically an object whose properties contains `value`.\n- `value`: A string, bigint or TypedArray. `value` must be a unique sequence of characters or bytes with high entropy such as a cryptographic token, private key, hash, or a long password. `value` will be blocked from being sent to any Client Component.\n\n#### Returns\n`experimental_taintUniqueValue` returns `undefined`.\n\n#### Caveats\n- Deriving new values from tainted values can compromise tainting protection. New values created by uppercasing tainted values, concatenating tainted string values into a larger string, converting tainted values to base64, substringing tainted values, and other similar transformations are not tainted unless you explicitly call `taintUniqueValue` on these newly created values.\n- Do not use `taintUniqueValue` to protect low-entropy values such as PIN codes or phone numbers. If any value in a request is controlled by an attacker, they could infer which value is tainted by enumerating all possible values of the secret.\n\n## Usage\n\n### Prevent a token from being passed to Client Components\n\nTo ensure that sensitive information such as passwords, session tokens, or other unique values do not inadvertently get passed to Client Components, the `taintUniqueValue` function provides a layer of protection. When a value is tainted, any attempt to pass it to a Client Component will result in an error.\n\nThe `lifetime` argument defines the duration for which the value remains tainted. For values that should remain tainted indefinitely, objects like [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) or `process` can serve as the `lifetime` argument. These objects have a lifespan that spans the entire duration of your app’s execution.\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass a user password to the client.',\n  globalThis,\n  process.env.SECRET_KEY\n);\n```\n\nIf the tainted value’s lifespan is tied to a object, the `lifetime` should be the object that encapsulates the value. This ensures the tainted value remains protected for the lifetime of the encapsulating object.\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintUniqueValue} from 'react';\n\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintUniqueValue(\n    'Do not pass a user session token to the client.',\n    user,\n    user.session.token\n  );\n  return user;\n}\n```\n\nIn this example, the `user` object serves as the `lifetime` argument. If this object gets stored in a global cache or is accessible by another request, the session token remains tainted.\n\n## Pitfall\n\n**Do not rely solely on tainting for security.** Tainting a value doesn’t block every possible derived value. For example, creating a new value by upper casing a tainted string will not taint the new value.\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintUniqueValue} from 'react';\n\nconst password = 'correct horse battery staple';\n\nexperimental_taintUniqueValue(\n  'Do not pass the password to the client.',\n  globalThis,\n  password\n);\n\nconst uppercasePassword = password.toUpperCase() // `uppercasePassword` is not tainted\n```\n\nIn this example, the constant `password` is tainted. Then `password` is used to create a new value `uppercasePassword` by calling the `toUpperCase` method on `password`. The newly created `uppercasePassword` is not tainted.\n\nOther similar ways of deriving new values from tainted values like concatenating it into a larger string, converting it to base64, or returning a substring create untained values.\nTainting only protects against simple mistakes like explicitly passing secret values to the client. Mistakes in calling the `taintUniqueValue` like using a global store outside of React, without the corresponding lifetime object, can cause the tainted value to become untainted. Tainting is a layer of protection; a secure app will have multiple layers of protection, well designed APIs, and isolation patterns.\n\n## Deep Dive\n\n#### Using `server-only` and `taintUniqueValue` to prevent leaking secrets\n\nIf you’re running a Server Components environment that has access to private keys or passwords such as database passwords, you have to be careful not to pass that to a Client Component.\n\n```sp-pre-placeholder grow-[2]\nexport async function Dashboard(props) {\n  // DO NOT DO THIS\n  return <Overview password={process.env.API_PASSWORD} />;\n}\n```\n\n```sp-pre-placeholder grow-[2]\n\"use client\";\nimport {useEffect} from '...'\n\nexport async function Overview({ password }) {\n  useEffect(() => {\n    const headers = { Authorization: password };\n    fetch(url, { headers }).then(...);\n  }, [password]);\n  ...\n}\n```\n\nThis example would leak the secret API token to the client. If this API token can be used to access data this particular user shouldn’t have access to, it could lead to a data breach.\n\nIdeally, secrets like this are abstracted into a single helper file that can only be imported by trusted data utilities on the server. The helper can even be tagged with [`server-only`](https://www.npmjs.com/package/server-only) to ensure that this file isn’t imported on the client.\n\n```sp-pre-placeholder grow-[2]\nimport \"server-only\";\n\nexport function fetchAPI(url) {\n  const headers = { Authorization: process.env.API_PASSWORD };\n  return fetch(url, { headers });\n}\n```\n\nSometimes mistakes happen during refactoring and not all of your colleagues might know about this.\nTo protect against this mistakes happening down the line we can “taint” the actual password:\n\n```sp-pre-placeholder grow-[2]\nimport \"server-only\";\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass the API token password to the client. ' +\n    'Instead do all fetches on the server.'\n  process,\n  process.env.API_PASSWORD\n);\n```\n\nNow whenever anyone tries to pass this password to a Client Component, or send the password to a Client Component with a Server Function, an error will be thrown with message you defined when you called `taintUniqueValue`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintUniqueValue", "title": "experimental_taintUniqueValue", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent unique values from being passed to Client Components like passwords, keys, or tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:05:07", "type": "overview", "page_metadata": {"ogTitle": "experimental_taintUniqueValue – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/experimental_taintUniqueValue", "og:title": "experimental_taintUniqueValue – React", "twitter:title": "experimental_taintUniqueValue – React", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/reference/react/experimental_taintUniqueValue", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "title": "experimental_taintUniqueValue – React", "fb:app_id": "623268441017527", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "scrapeId": "79af2eba-452d-4ba2-8373-ecb092773e9c", "sourceURL": "https://react.dev/reference/react/experimental_taintUniqueValue", "url": "https://react.dev/reference/react/experimental_taintUniqueValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I under construction in react-reference?\n\nAssistant: To under construction in react-reference, here's what you do:\nThis API is experimental and is not available in a stable version of React yet.\n\nYou can try it by upgrading React packages to the most recent experimental version:\n\n- `react@experimental`\n- `react-dom@experimental`\n- `eslint-plugin-react-hooks@experimental`\n\nExperimental versions of React may contain bugs. Don’t use them in production.\n\nThis API is only available inside [React Server Components](https://react.dev/reference/rsc/use-client).\n\n`taintUniqueValue` lets you prevent unique values from being passed to Client Components like passwords, keys, or tokens..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintUniqueValue", "title": "experimental_taintUniqueValue", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent unique values from being passed to Client Components like passwords, keys, or tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:05:07", "type": "section_detail", "page_metadata": {"ogTitle": "experimental_taintUniqueValue – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/experimental_taintUniqueValue", "og:title": "experimental_taintUniqueValue – React", "twitter:title": "experimental_taintUniqueValue – React", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/reference/react/experimental_taintUniqueValue", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "title": "experimental_taintUniqueValue – React", "fb:app_id": "623268441017527", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "scrapeId": "79af2eba-452d-4ba2-8373-ecb092773e9c", "sourceURL": "https://react.dev/reference/react/experimental_taintUniqueValue", "url": "https://react.dev/reference/react/experimental_taintUniqueValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `taintUniqueValue(message, lifetime, value)`\n\nCall `taintUniqueValue` with a password, token, key or hash to register it with React as something that should not be allowed to be passed to the Client as is:\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass secret keys to the client.',\n  process,\n  process.env.SECRET_KEY\n);\n```\n\n#### Parameters\n- `message`: The message you want to display if `value` is passed to a Client Component. This message will be displayed as a part of the Error that will be thrown if `value` is passed to a Client Component.\n- `lifetime`: Any object that indicates how long `value` should be tainted. `value` will be blocked from being sent to any Client Component while this object still exists. For example, passing `globalThis` blocks the value for the lifetime of an app. `lifetime` is typically an object whose properties contains `value`.\n- `value`: A string, bigint or TypedArray. `value` must be a unique sequence of characters or bytes with high entropy such as a cryptographic token, private key, hash, or a long password. `value` will be blocked from being sent to any Client Component.\n\n#### Returns\n`experimental_taintUniqueValue` returns `undefined`.\n\n#### Caveats\n- Deriving new values from tainted values can compromise tainting protection. New values created by uppercasing tainted values, concatenating tainted string values into a larger string, converting tainted values to base64, substringing tainted values, and other similar transformations are not tainted unless you explicitly call `taintUniqueValue` on these newly created values.\n- Do not use `taintUniqueValue` to protect low-entropy values such as PIN codes or phone numbers. If any value in a request is controlled by an attacker, they could infer which value is tainted by enumerating all possible values of the secret..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintUniqueValue", "title": "experimental_taintUniqueValue", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent unique values from being passed to Client Components like passwords, keys, or tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:05:07", "type": "section_detail", "page_metadata": {"ogTitle": "experimental_taintUniqueValue – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/experimental_taintUniqueValue", "og:title": "experimental_taintUniqueValue – React", "twitter:title": "experimental_taintUniqueValue – React", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/reference/react/experimental_taintUniqueValue", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "title": "experimental_taintUniqueValue – React", "fb:app_id": "623268441017527", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "scrapeId": "79af2eba-452d-4ba2-8373-ecb092773e9c", "sourceURL": "https://react.dev/reference/react/experimental_taintUniqueValue", "url": "https://react.dev/reference/react/experimental_taintUniqueValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Prevent a token from being passed to Client Components\n\nTo ensure that sensitive information such as passwords, session tokens, or other unique values do not inadvertently get passed to Client Components, the `taintUniqueValue` function provides a layer of protection. When a value is tainted, any attempt to pass it to a Client Component will result in an error.\n\nThe `lifetime` argument defines the duration for which the value remains tainted. For values that should remain tainted indefinitely, objects like [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) or `process` can serve as the `lifetime` argument. These objects have a lifespan that spans the entire duration of your app’s execution.\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass a user password to the client.',\n  globalThis,\n  process.env.SECRET_KEY\n);\n```\n\nIf the tainted value’s lifespan is tied to a object, the `lifetime` should be the object that encapsulates the value. This ensures the tainted value remains protected for the lifetime of the encapsulating object.\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintUniqueValue} from 'react';\n\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintUniqueValue(\n    'Do not pass a user session token to the client.',\n    user,\n    user.session.token\n  );\n  return user;\n}\n```\n\nIn this example, the `user` object serves as the `lifetime` argument. If this object gets stored in a global cache or is accessible by another request, the session token remains tainted..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintUniqueValue", "title": "experimental_taintUniqueValue", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent unique values from being passed to Client Components like passwords, keys, or tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:05:07", "type": "section_detail", "page_metadata": {"ogTitle": "experimental_taintUniqueValue – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/experimental_taintUniqueValue", "og:title": "experimental_taintUniqueValue – React", "twitter:title": "experimental_taintUniqueValue – React", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/reference/react/experimental_taintUniqueValue", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "title": "experimental_taintUniqueValue – React", "fb:app_id": "623268441017527", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "scrapeId": "79af2eba-452d-4ba2-8373-ecb092773e9c", "sourceURL": "https://react.dev/reference/react/experimental_taintUniqueValue", "url": "https://react.dev/reference/react/experimental_taintUniqueValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\n**Do not rely solely on tainting for security.** Tainting a value doesn’t block every possible derived value. For example, creating a new value by upper casing a tainted string will not taint the new value.\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintUniqueValue} from 'react';\n\nconst password = 'correct horse battery staple';\n\nexperimental_taintUniqueValue(\n  'Do not pass the password to the client.',\n  globalThis,\n  password\n);\n\nconst uppercasePassword = password.toUpperCase() // `uppercasePassword` is not tainted\n```\n\nIn this example, the constant `password` is tainted. Then `password` is used to create a new value `uppercasePassword` by calling the `toUpperCase` method on `password`. The newly created `uppercasePassword` is not tainted.\n\nOther similar ways of deriving new values from tainted values like concatenating it into a larger string, converting it to base64, or returning a substring create untained values.\nTainting only protects against simple mistakes like explicitly passing secret values to the client. Mistakes in calling the `taintUniqueValue` like using a global store outside of React, without the corresponding lifetime object, can cause the tainted value to become untainted. Tainting is a layer of protection; a secure app will have multiple layers of protection, well designed APIs, and isolation patterns..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintUniqueValue", "title": "experimental_taintUniqueValue", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent unique values from being passed to Client Components like passwords, keys, or tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:05:07", "type": "section_detail", "page_metadata": {"ogTitle": "experimental_taintUniqueValue – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/experimental_taintUniqueValue", "og:title": "experimental_taintUniqueValue – React", "twitter:title": "experimental_taintUniqueValue – React", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/reference/react/experimental_taintUniqueValue", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "title": "experimental_taintUniqueValue – React", "fb:app_id": "623268441017527", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "scrapeId": "79af2eba-452d-4ba2-8373-ecb092773e9c", "sourceURL": "https://react.dev/reference/react/experimental_taintUniqueValue", "url": "https://react.dev/reference/react/experimental_taintUniqueValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deep dive in react-reference?\n\nAssistant: To deep dive in react-reference, here's what you do:\n#### Using `server-only` and `taintUniqueValue` to prevent leaking secrets\n\nIf you’re running a Server Components environment that has access to private keys or passwords such as database passwords, you have to be careful not to pass that to a Client Component.\n\n```sp-pre-placeholder grow-[2]\nexport async function Dashboard(props) {\n  // DO NOT DO THIS\n  return <Overview password={process.env.API_PASSWORD} />;\n}\n```\n\n```sp-pre-placeholder grow-[2]\n\"use client\";\nimport {useEffect} from '...'\n\nexport async function Overview({ password }) {\n  useEffect(() => {\n    const headers = { Authorization: password };\n    fetch(url, { headers }).then(...);\n  }, [password]);\n  ...\n}\n```\n\nThis example would leak the secret API token to the client. If this API token can be used to access data this particular user shouldn’t have access to, it could lead to a data breach.\n\nIdeally, secrets like this are abstracted into a single helper file that can only be imported by trusted data utilities on the server. The helper can even be tagged with [`server-only`](https://www.npmjs.com/package/server-only) to ensure that this file isn’t imported on the client.\n\n```sp-pre-placeholder grow-[2]\nimport \"server-only\";\n\nexport function fetchAPI(url) {\n  const headers = { Authorization: process.env.API_PASSWORD };\n  return fetch(url, { headers });\n}\n```\n\nSometimes mistakes happen during refactoring and not all of your colleagues might know about this.\nTo protect against this mistakes happening down the line we can “taint” the actual password:\n\n```sp-pre-placeholder grow-[2]\nimport \"server-only\";\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass the API token password to the client. ' +\n    'Instead do all fetches on the server.'\n  process,\n  process.env.API_PASSWORD\n);\n```\n\nNow whenever anyone tries to pass this password to a Client Component, or send the password to a Client Component with a Server Function, an error will be thrown with message you defined when you called `taintUniqueValue`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintUniqueValue", "title": "experimental_taintUniqueValue", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent unique values from being passed to Client Components like passwords, keys, or tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:05:07", "type": "section_detail", "page_metadata": {"ogTitle": "experimental_taintUniqueValue – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/experimental_taintUniqueValue", "og:title": "experimental_taintUniqueValue – React", "twitter:title": "experimental_taintUniqueValue – React", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/reference/react/experimental_taintUniqueValue", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "title": "experimental_taintUniqueValue – React", "fb:app_id": "623268441017527", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "scrapeId": "79af2eba-452d-4ba2-8373-ecb092773e9c", "sourceURL": "https://react.dev/reference/react/experimental_taintUniqueValue", "url": "https://react.dev/reference/react/experimental_taintUniqueValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for experimental_taintUniqueValue in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of taintUniqueValue**:\n\n```yaml\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass secret keys to the client.',\n  process,\n  process.env.SECRET_KEY\n);\n```\n\nThis snippet shows you how to basic usage of taintuniquevalue, which is an important aspect of experimental_taintuniquevalue.\n\n**Prevent a user password from being passed to the client**:\n\n```yaml\nimport {experimental_taintUniqueValue} from 'react';\n\nexperimental_taintUniqueValue(\n  'Do not pass a user password to the client.',\n  globalThis,\n  process.env.SECRET_KEY\n);\n```\n\nThis snippet shows you how to prevent a user password from being passed to the client, which is an important aspect of experimental_taintuniquevalue.\n\n**Tainting a user session token**:\n\n```yaml\nimport {experimental_taintUniqueValue} from 'react';\n\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintUniqueValue(\n    'Do not pass a user session token to the client.',\n    user,\n    user.session.token\n  );\n  return user;\n}\n```\n\nThis snippet shows you how to tainting a user session token, which is an important aspect of experimental_taintuniquevalue.\n\n**Tainting a password example**:\n\n```yaml\nimport {experimental_taintUniqueValue} from 'react';\n\nconst password = 'correct horse battery staple';\n\nexperimental_taintUniqueValue(\n  'Do not pass the password to the client.',\n  globalThis,\n  password\n);\n\nconst uppercasePassword = password.toUpperCase() // `uppercasePassword` is not tainted\n```\n\nThis snippet shows you how to tainting a password example, which is an important aspect of experimental_taintuniquevalue.\n\n**Using server-only to prevent leaking secrets**:\n\n```yaml\nimport \"server-only\";\n\nexport function fetchAPI(url) {\n  const headers = { Authorization: process.env.API_PASSWORD };\n  return fetch(url, { headers });\n}\n```\n\nThis snippet shows you how to using server-only to prevent leaking secrets, which is an important aspect of experimental_taintuniquevalue.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintUniqueValue", "title": "experimental_taintUniqueValue", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent unique values from being passed to Client Components like passwords, keys, or tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:05:07", "type": "code_examples", "page_metadata": {"ogTitle": "experimental_taintUniqueValue – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/experimental_taintUniqueValue", "og:title": "experimental_taintUniqueValue – React", "twitter:title": "experimental_taintUniqueValue – React", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/reference/react/experimental_taintUniqueValue", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "title": "experimental_taintUniqueValue – React", "fb:app_id": "623268441017527", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "scrapeId": "79af2eba-452d-4ba2-8373-ecb092773e9c", "sourceURL": "https://react.dev/reference/react/experimental_taintUniqueValue", "url": "https://react.dev/reference/react/experimental_taintUniqueValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using experimental_taintUniqueValue in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not use experimental APIs in production as they may contain bugs.\n\nEnsure that sensitive information is not passed to Client Components by using `taintUniqueValue`.\n\nUse high-entropy values for `value` in `taintUniqueValue`.\n\nBe cautious of derived values from tainted values; they are not automatically tainted.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintUniqueValue", "title": "experimental_taintUniqueValue", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent unique values from being passed to Client Components like passwords, keys, or tokens.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:05:07", "type": "best_practices", "page_metadata": {"ogTitle": "experimental_taintUniqueValue – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogDescription": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/experimental_taintUniqueValue", "og:title": "experimental_taintUniqueValue – React", "twitter:title": "experimental_taintUniqueValue – React", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:url": "https://react.dev/reference/react/experimental_taintUniqueValue", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "language": "en", "title": "experimental_taintUniqueValue – React", "fb:app_id": "623268441017527", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "scrapeId": "79af2eba-452d-4ba2-8373-ecb092773e9c", "sourceURL": "https://react.dev/reference/react/experimental_taintUniqueValue", "url": "https://react.dev/reference/react/experimental_taintUniqueValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useOptimistic is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useOptimistic in react-reference.\n\n# useOptimistic\n\n`useOptimistic` is a React Hook that lets you optimistically update the UI.Here's a quick rundown of what this is about:\n\n## Reference\n\n`useOptimistic(state, updateFn)` is a React Hook that lets you show a different state while an async action is underway. It accepts some state as an argument and returns a copy of that state that can be different during the duration of an async action such as a network request. You provide a function that takes the current state and the input to the action, and returns the optimistic state to be used while the action is pending.\n\nThis state is called the “optimistic” state because it is usually used to immediately present the user with the result of performing an action, even though the action actually takes time to complete.\n\n## Usage\n\nThe `useOptimistic` Hook provides a way to optimistically update the user interface before a background operation, like a network request, completes. In the context of forms, this technique helps to make apps feel more responsive. When a user submits a form, instead of waiting for the server’s response to reflect the changes, the interface is immediately updated with the expected outcome.\n\nFor example, when a user types a message into the form and hits the “Send” button, the `useOptimistic` Hook allows the message to immediately appear in the list with a “Sending…” label, even before the message is actually sent to a server. This “optimistic” approach gives the impression of speed and responsiveness. The form then attempts to truly send the message in the background. Once the server confirms the message has been received, the “Sending…” label is removed.\n\n## Parameters\n\n- `state`: the value to be returned initially and whenever no action is pending.\n- `updateFn(currentState, optimisticValue)`: a function that takes the current state and the optimistic value passed to `addOptimistic` and returns the resulting optimistic state. It must be a pure function. `updateFn` takes in two parameters. The `currentState` and the `optimisticValue`. The return value will be the merged value of the `currentState` and `optimisticValue.\n\n## Returns\n\n- `optimisticState`: The resulting optimistic state. It is equal to `state` unless an action is pending, in which case it is equal to the value returned by `updateFn`.\n- `addOptimistic`: `addOptimistic` is the dispatching function to call when you have an optimistic update. It takes one argument, `optimisticValue`, of any type and will call the `updateFn` with `state` and `optimisticValue.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useOptimistic", "title": "useOptimistic", "description": "`useOptimistic` is a React Hook that lets you optimistically update the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:05:43", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "title": "useOptimistic – React", "twitter:title": "useOptimistic – React", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:title": "useOptimistic – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/useOptimistic", "twitter:card": "summary_large_image", "ogTitle": "useOptimistic – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useOptimistic", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "81890bc3-6012-4085-a885-1d8ef9509adc", "sourceURL": "https://react.dev/reference/react/useOptimistic", "url": "https://react.dev/reference/react/useOptimistic", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n`useOptimistic(state, updateFn)` is a React Hook that lets you show a different state while an async action is underway. It accepts some state as an argument and returns a copy of that state that can be different during the duration of an async action such as a network request. You provide a function that takes the current state and the input to the action, and returns the optimistic state to be used while the action is pending.\n\nThis state is called the “optimistic” state because it is usually used to immediately present the user with the result of performing an action, even though the action actually takes time to complete..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useOptimistic", "title": "useOptimistic", "description": "`useOptimistic` is a React Hook that lets you optimistically update the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:05:43", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "title": "useOptimistic – React", "twitter:title": "useOptimistic – React", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:title": "useOptimistic – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/useOptimistic", "twitter:card": "summary_large_image", "ogTitle": "useOptimistic – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useOptimistic", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "81890bc3-6012-4085-a885-1d8ef9509adc", "sourceURL": "https://react.dev/reference/react/useOptimistic", "url": "https://react.dev/reference/react/useOptimistic", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nThe `useOptimistic` Hook provides a way to optimistically update the user interface before a background operation, like a network request, completes. In the context of forms, this technique helps to make apps feel more responsive. When a user submits a form, instead of waiting for the server’s response to reflect the changes, the interface is immediately updated with the expected outcome.\n\nFor example, when a user types a message into the form and hits the “Send” button, the `useOptimistic` Hook allows the message to immediately appear in the list with a “Sending…” label, even before the message is actually sent to a server. This “optimistic” approach gives the impression of speed and responsiveness. The form then attempts to truly send the message in the background. Once the server confirms the message has been received, the “Sending…” label is removed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useOptimistic", "title": "useOptimistic", "description": "`useOptimistic` is a React Hook that lets you optimistically update the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:05:43", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "title": "useOptimistic – React", "twitter:title": "useOptimistic – React", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:title": "useOptimistic – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/useOptimistic", "twitter:card": "summary_large_image", "ogTitle": "useOptimistic – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useOptimistic", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "81890bc3-6012-4085-a885-1d8ef9509adc", "sourceURL": "https://react.dev/reference/react/useOptimistic", "url": "https://react.dev/reference/react/useOptimistic", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `state`: the value to be returned initially and whenever no action is pending.\n- `updateFn(currentState, optimisticValue)`: a function that takes the current state and the optimistic value passed to `addOptimistic` and returns the resulting optimistic state. It must be a pure function. `updateFn` takes in two parameters. The `currentState` and the `optimisticValue`. The return value will be the merged value of the `currentState` and `optimisticValue..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useOptimistic", "title": "useOptimistic", "description": "`useOptimistic` is a React Hook that lets you optimistically update the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:05:43", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "title": "useOptimistic – React", "twitter:title": "useOptimistic – React", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:title": "useOptimistic – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/useOptimistic", "twitter:card": "summary_large_image", "ogTitle": "useOptimistic – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useOptimistic", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "81890bc3-6012-4085-a885-1d8ef9509adc", "sourceURL": "https://react.dev/reference/react/useOptimistic", "url": "https://react.dev/reference/react/useOptimistic", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n- `optimisticState`: The resulting optimistic state. It is equal to `state` unless an action is pending, in which case it is equal to the value returned by `updateFn`.\n- `addOptimistic`: `addOptimistic` is the dispatching function to call when you have an optimistic update. It takes one argument, `optimisticValue`, of any type and will call the `updateFn` with `state` and `optimisticValue..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useOptimistic", "title": "useOptimistic", "description": "`useOptimistic` is a React Hook that lets you optimistically update the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:05:43", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "title": "useOptimistic – React", "twitter:title": "useOptimistic – React", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:title": "useOptimistic – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/useOptimistic", "twitter:card": "summary_large_image", "ogTitle": "useOptimistic – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useOptimistic", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "81890bc3-6012-4085-a885-1d8ef9509adc", "sourceURL": "https://react.dev/reference/react/useOptimistic", "url": "https://react.dev/reference/react/useOptimistic", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useOptimistic in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useOptimistic Example**:\n\n```yaml\nconst [optimisticState, addOptimistic] = useOptimistic(state, updateFn);\n```\n\nThis snippet shows you how to basic useoptimistic example, which is an important aspect of useoptimistic.\n\n**AppContainer Example**:\n\n```yaml\nimport { useOptimistic } from 'react';\n\nfunction AppContainer() {\n\n  const [optimisticState, addOptimistic] = useOptimistic(\n\n    state,\n\n    // updateFn\n\n    (currentState, optimisticValue) => {\n\n      // merge and return new state\n\n      // with optimistic value\n\n    }\n\n  );\n\n}\n```\n\nThis snippet shows you how to appcontainer example, which is an important aspect of useoptimistic.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useOptimistic", "title": "useOptimistic", "description": "`useOptimistic` is a React Hook that lets you optimistically update the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:05:43", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "title": "useOptimistic – React", "twitter:title": "useOptimistic – React", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:title": "useOptimistic – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/useOptimistic", "twitter:card": "summary_large_image", "ogTitle": "useOptimistic – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useOptimistic", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "81890bc3-6012-4085-a885-1d8ef9509adc", "sourceURL": "https://react.dev/reference/react/useOptimistic", "url": "https://react.dev/reference/react/useOptimistic", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useOptimistic in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse optimistic updates to enhance user experience by providing immediate feedback in the UI.\n\nEnsure that the update function is a pure function to avoid unintended side effects.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useOptimistic", "title": "useOptimistic", "description": "`useOptimistic` is a React Hook that lets you optimistically update the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:05:43", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "title": "useOptimistic – React", "twitter:title": "useOptimistic – React", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:title": "useOptimistic – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/useOptimistic", "twitter:card": "summary_large_image", "ogTitle": "useOptimistic – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/useOptimistic", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "81890bc3-6012-4085-a885-1d8ef9509adc", "sourceURL": "https://react.dev/reference/react/useOptimistic", "url": "https://react.dev/reference/react/useOptimistic", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what memo is in react-reference?\n\nAssistant: Sure, I'd be happy to explain memo in react-reference.\n\n# memo\n\n`memo` lets you skip re-rendering a component when its props are unchanged.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `memo(Component, arePropsEqual?)`\nWrap a component in `memo` to get a _memoized_ version of that component. This memoized version of your component will usually not be re-rendered when its parent component is re-rendered as long as its props have not changed. But React may still re-render it: memoization is a performance optimization, not a guarantee.\n\n```sp-pre-placeholder grow-[2]\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props) {\n\n  // ...\n});\n```\n\n#### Parameters\n- `Component`: The component that you want to memoize. The `memo` does not modify this component, but returns a new, memoized component instead. Any valid React component, including functions and [`forwardRef`](https://react.dev/reference/react/forwardRef) components, is accepted.\n- **optional** `arePropsEqual`: A function that accepts two arguments: the component’s previous props, and its new props. It should return `true` if the old and new props are equal: that is, if the component will render the same output and behave in the same way with the new props as with the old. Otherwise it should return `false`. Usually, you will not specify this function. By default, React will compare each prop with [`Object.is`.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n\n#### Returns\n`memo` returns a new React component. It behaves the same as the component provided to `memo` except that React will not always re-render it when its parent is being re-rendered unless its props have changed.\n\n## Usage\n\n### Skipping re-rendering when props are unchanged\nReact normally re-renders a component whenever its parent re-renders. With `memo`, you can create a component that React will not re-render when its parent re-renders so long as its new props are the same as the old props. Such a component is said to be _memoized_.\n\nTo memoize a component, wrap it in `memo` and use the value that it returns in place of your original component:\n\n```sp-pre-placeholder grow-[2]\nconst Greeting = memo(function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n});\n```\n\nA React component should always have [pure rendering logic.](https://react.dev/learn/keeping-components-pure) This means that it must return the same output if its props, state, and context haven’t changed. By using `memo`, you are telling React that your component complies with this requirement, so React doesn’t need to re-render as long as its props haven’t changed. Even with `memo`, your component will re-render if its own state changes or if a context that it’s using changes.\n\n## Updating a memoized component using state\n\nEven when a component is memoized, it will still re-render when its own state changes. Memoization only has to do with props that are passed to the component from its parent.\n\n## Updating a memoized component using a context\n\nEven when a component is memoized, it will still re-render when a context that it’s using changes. Memoization only has to do with props that are passed to the component from its parent.\n\n## Minimizing props changes\n\nWhen you use `memo`, your component re-renders whenever any prop is not _shallowly equal_ to what it was previously. This means that React compares every prop in your component with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison.\n\n## Specifying a custom comparison function\n\nIn rare cases it may be infeasible to minimize the props changes of a memoized component. In that case, you can provide a custom comparison function, which React will use to compare the old and new props instead of using shallow equality.\n\n## Troubleshooting\n\n### My component re-renders when a prop is an object, array, or function\nReact compares old and new props by shallow equality: that is, it considers whether each new prop is reference-equal to the old prop. If you create a new object or array each time the parent is re-rendered, even if the individual elements are each the same, React will still consider it to be changed.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "overview", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `memo(Component, arePropsEqual?)`\nWrap a component in `memo` to get a _memoized_ version of that component. This memoized version of your component will usually not be re-rendered when its parent component is re-rendered as long as its props have not changed. But React may still re-render it: memoization is a performance optimization, not a guarantee.\n\n```sp-pre-placeholder grow-[2]\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props) {\n\n  // ...\n});\n```\n\n#### Parameters\n- `Component`: The component that you want to memoize. The `memo` does not modify this component, but returns a new, memoized component instead. Any valid React component, including functions and [`forwardRef`](https://react.dev/reference/react/forwardRef) components, is accepted.\n- **optional** `arePropsEqual`: A function that accepts two arguments: the component’s previous props, and its new props. It should return `true` if the old and new props are equal: that is, if the component will render the same output and behave in the same way with the new props as with the old. Otherwise it should return `false`. Usually, you will not specify this function. By default, React will compare each prop with [`Object.is`.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n\n#### Returns\n`memo` returns a new React component. It behaves the same as the component provided to `memo` except that React will not always re-render it when its parent is being re-rendered unless its props have changed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Skipping re-rendering when props are unchanged\nReact normally re-renders a component whenever its parent re-renders. With `memo`, you can create a component that React will not re-render when its parent re-renders so long as its new props are the same as the old props. Such a component is said to be _memoized_.\n\nTo memoize a component, wrap it in `memo` and use the value that it returns in place of your original component:\n\n```sp-pre-placeholder grow-[2]\nconst Greeting = memo(function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n});\n```\n\nA React component should always have [pure rendering logic.](https://react.dev/learn/keeping-components-pure) This means that it must return the same output if its props, state, and context haven’t changed. By using `memo`, you are telling React that your component complies with this requirement, so React doesn’t need to re-render as long as its props haven’t changed. Even with `memo`, your component will re-render if its own state changes or if a context that it’s using changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I updating a memoized component using state in react-reference?\n\nAssistant: To updating a memoized component using state in react-reference, here's what you do:\nEven when a component is memoized, it will still re-render when its own state changes. Memoization only has to do with props that are passed to the component from its parent..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I updating a memoized component using a context in react-reference?\n\nAssistant: To updating a memoized component using a context in react-reference, here's what you do:\nEven when a component is memoized, it will still re-render when a context that it’s using changes. Memoization only has to do with props that are passed to the component from its parent..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I minimizing props changes in react-reference?\n\nAssistant: To minimizing props changes in react-reference, here's what you do:\nWhen you use `memo`, your component re-renders whenever any prop is not _shallowly equal_ to what it was previously. This means that React compares every prop in your component with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I specifying a custom comparison function in react-reference?\n\nAssistant: To specifying a custom comparison function in react-reference, here's what you do:\nIn rare cases it may be infeasible to minimize the props changes of a memoized component. In that case, you can provide a custom comparison function, which React will use to compare the old and new props instead of using shallow equality..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### My component re-renders when a prop is an object, array, or function\nReact compares old and new props by shallow equality: that is, it considers whether each new prop is reference-equal to the old prop. If you create a new object or array each time the parent is re-rendered, even if the individual elements are each the same, React will still consider it to be changed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for memo in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic memo usage**:\n\n```yaml\nconst MemoizedComponent = memo(SomeComponent, arePropsEqual?)\n```\n\nThis snippet shows you how to basic memo usage, which is an important aspect of memo.\n\n**Memoized Greeting Component**:\n\n```yaml\nconst Greeting = memo(function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n});\n```\n\nThis snippet shows you how to memoized greeting component, which is an important aspect of memo.\n\n**Updating a memoized component using state**:\n\n```yaml\nimport { memo, useState } from 'react';\n\nexport default function MyApp() {\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  return (\n    <>\n      <label>\n        Name{': '}\n        <input value={name} onChange={e => setName(e.target.value)} />\n      </label>\n      <label>\n        Address{': '}\n        <input value={address} onChange={e => setAddress(e.target.value)} />\n      </label>\n      <Greeting name={name} />\n    </>\n  );\n}\n\nconst Greeting = memo(function Greeting({ name }) {\n  console.log('Greeting was rendered at', new Date().toLocaleTimeString());\n  return <h3>Hello{name && ', '}{name}!</h3>;\n});\n```\n\nThis snippet shows you how to updating a memoized component using state, which is an important aspect of memo.\n\n**Updating a memoized component using a context**:\n\n```yaml\nimport { createContext, memo, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n  const [theme, setTheme] = useState('dark');\n\n  function handleClick() {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  }\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      <button onClick={handleClick}>\n        Switch theme\n      </button>\n      <Greeting name=\"Taylor\" />\n    </ThemeContext.Provider>\n  );\n}\n\nconst Greeting = memo(function Greeting({ name }) {\n  console.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n  const theme = useContext(ThemeContext);\n  return (\n    <h3 className={theme}>Hello, {name}!</h3>\n  );\n});\n```\n\nThis snippet shows you how to updating a memoized component using a context, which is an important aspect of memo.\n\n**Minimizing props changes with useMemo**:\n\n```yaml\nfunction Page() {\n  const [name, setName] = useState('Taylor');\n  const [age, setAge] = useState(42);\n  const person = useMemo(\n    () => ({ name, age }),\n    [name, age]\n  );\n  return <Profile person={person} />;\n}\n\nconst Profile = memo(function Profile({ person }) {\n  // ...\n});\n```\n\nThis snippet shows you how to minimizing props changes with usememo, which is an important aspect of memo.\n\n**Custom comparison function example**:\n\n```yaml\nconst Chart = memo(function Chart({ dataPoints }) {\n  // ...\n}, arePropsEqual);\n\nfunction arePropsEqual(oldProps, newProps) {\n  return (\n    oldProps.dataPoints.length === newProps.dataPoints.length &&\n    oldProps.dataPoints.every((oldPoint, index) => {\n      const newPoint = newProps.dataPoints[index];\n      return oldPoint.x === newPoint.x && oldPoint.y === newPoint.y;\n    })\n  );\n}\n```\n\nThis snippet shows you how to custom comparison function example, which is an important aspect of memo.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "code_examples", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using memo in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nYou should only rely on `memo` as a performance optimization. If your code doesn’t work without it, find the underlying problem and fix it first. Then you may add `memo` to improve performance.\n\nWhen a component visually wraps other components, let it accept JSX as children. This way, when the wrapper component updates its own state, React knows that its children don’t need to re-render.\n\nPrefer local state and don’t lift state up any further than necessary.\n\nKeep your rendering logic pure. If re-rendering a component causes a problem or produces some noticeable visual artifact, it’s a bug in your component! Fix the bug instead of adding memoization.\n\nAvoid unnecessary Effects that update state. Most performance problems in React apps are caused by chains of updates originating from Effects that cause your components to render over and over.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/memo", "title": "memo", "description": "`memo` lets you skip re-rendering a component when its props are unchanged.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:06:15", "type": "best_practices", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:title": "memo – React", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "memo – React", "og:title": "memo – React", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "og:type": "website", "title": "memo – React", "ogUrl": "https://react.dev/reference/react/memo", "twitter:card": "summary_large_image", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/memo", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "scrapeId": "59964a77-55db-416c-b451-3bd41bc7d118", "sourceURL": "https://react.dev/reference/react/memo", "url": "https://react.dev/reference/react/memo", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useState is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useState in react-reference.\n\n# useState\n\n`useState` is a React Hook that lets you add a state variable to your component.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useState(initialState)`\nCall `useState` at the top level of your component to declare a state variable.\n\n```sp-pre-placeholder grow-[2]\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\n  const [age, setAge] = useState(28);\n\n  const [name, setName] = useState('Taylor');\n\n  const [todos, setTodos] = useState(() => createTodos());\n\n  // ...\n```\n\n## Parameters\n\n- `initialState`: The value you want the state to be initially. It can be a value of any type, but there is a special behavior for functions. This argument is ignored after the initial render.\n  - If you pass a function as `initialState`, it will be treated as an _initializer function_. It should be pure, should take no arguments, and should return a value of any type. React will call your initializer function when initializing the component, and store its return value as the initial state.\n\n## Returns\n\n`useState` returns an array with exactly two values:\n\n1. The current state. During the first render, it will match the `initialState` you have passed.\n2. The `set` function that lets you update the state to a different value and trigger a re-render.\n\n## Caveats\n\n- `useState` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- In Strict Mode, React will **call your initializer function twice** in order to help you find accidental impurities. This is development-only behavior and does not affect production.\n\n## set functions, like setSomething(nextState)\n\nThe `set` function returned by `useState` lets you update the state to a different value and trigger a re-render. You can pass the next state directly, or a function that calculates it from the previous state:\n\n```sp-pre-placeholder grow-[2]\nconst [name, setName] = useState('Edward');\n\nfunction handleClick() {\n\n  setName('Taylor');\n\n  setAge(a => a + 1);\n\n  // ...\n```\n\n## Parameters\n\n- `nextState`: The value that you want the state to be. It can be a value of any type, but there is a special behavior for functions.\n  - If you pass a function as `nextState`, it will be treated as an _updater function_. It must be pure, should take the pending state as its only argument, and should return the next state.\n\n## Returns\n\n`set` functions do not have a return value.\n\n## Caveats\n\n- The `set` function **only updates the state variable for the _next_ render**. If you read the state variable after calling the `set` function, you will still get the old value that was on the screen before your call.\n- If the new value you provide is identical to the current `state`, React will **skip re-rendering the component and its children.** This is an optimization.\n\n## Usage\n\n### Adding state to a component\nCall `useState` at the top level of your component to declare one or more state variables.\n\n```sp-pre-placeholder grow-[2]\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\n  const [age, setAge] = useState(42);\n\n  const [name, setName] = useState('Taylor');\n\n  // ...\n```\n\n## Pitfall\n\nCalling the `set` function **does not** change the current state in the already executing code:\n\n```sp-pre-placeholder grow-[2]\nfunction handleClick() {\n\n  setName('Robin');\n\n  console.log(name); // Still \"Taylor\"!\n\n}\n```\n\n## Basic useState examples\n\n1. Counter (number) 2. Text field (string) 3. Checkbox (boolean) 4. Form (two variables)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "overview", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useState(initialState)`\nCall `useState` at the top level of your component to declare a state variable.\n\n```sp-pre-placeholder grow-[2]\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\n  const [age, setAge] = useState(28);\n\n  const [name, setName] = useState('Taylor');\n\n  const [todos, setTodos] = useState(() => createTodos());\n\n  // ...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `initialState`: The value you want the state to be initially. It can be a value of any type, but there is a special behavior for functions. This argument is ignored after the initial render.\n  - If you pass a function as `initialState`, it will be treated as an _initializer function_. It should be pure, should take no arguments, and should return a value of any type. React will call your initializer function when initializing the component, and store its return value as the initial state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`useState` returns an array with exactly two values:\n\n1. The current state. During the first render, it will match the `initialState` you have passed.\n2. The `set` function that lets you update the state to a different value and trigger a re-render..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- `useState` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n- In Strict Mode, React will **call your initializer function twice** in order to help you find accidental impurities. This is development-only behavior and does not affect production..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I set functions, like setsomething(nextstate) in react-reference?\n\nAssistant: To set functions, like setsomething(nextstate) in react-reference, here's what you do:\nThe `set` function returned by `useState` lets you update the state to a different value and trigger a re-render. You can pass the next state directly, or a function that calculates it from the previous state:\n\n```sp-pre-placeholder grow-[2]\nconst [name, setName] = useState('Edward');\n\nfunction handleClick() {\n\n  setName('Taylor');\n\n  setAge(a => a + 1);\n\n  // ...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `nextState`: The value that you want the state to be. It can be a value of any type, but there is a special behavior for functions.\n  - If you pass a function as `nextState`, it will be treated as an _updater function_. It must be pure, should take the pending state as its only argument, and should return the next state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`set` functions do not have a return value..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- The `set` function **only updates the state variable for the _next_ render**. If you read the state variable after calling the `set` function, you will still get the old value that was on the screen before your call.\n- If the new value you provide is identical to the current `state`, React will **skip re-rendering the component and its children.** This is an optimization..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Adding state to a component\nCall `useState` at the top level of your component to declare one or more state variables.\n\n```sp-pre-placeholder grow-[2]\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\n  const [age, setAge] = useState(42);\n\n  const [name, setName] = useState('Taylor');\n\n  // ...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\nCalling the `set` function **does not** change the current state in the already executing code:\n\n```sp-pre-placeholder grow-[2]\nfunction handleClick() {\n\n  setName('Robin');\n\n  console.log(name); // Still \"Taylor\"!\n\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I basic usestate examples in react-reference?\n\nAssistant: To basic usestate examples in react-reference, here's what you do:\n1. Counter (number) 2. Text field (string) 3. Checkbox (boolean) 4. Form (two variables).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useState in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Counter Example**:\n\n```yaml\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    <button onClick={handleClick}>\n      You pressed me {count} times\n    </button>\n  );\n}\n```\n\nThis snippet shows you how to counter example, which is an important aspect of usestate.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "code_examples", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useState in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways call `useState` at the top level of your component or your own Hooks.\n\nAvoid mutating state directly; always replace it with a new object or array.\n\nUse updater functions when the new state depends on the previous state to avoid stale closures.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useState", "title": "useState", "description": "`useState` is a React Hook that lets you add a state variable to your component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:06:36", "type": "best_practices", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useState", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:title": "useState – React", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useState – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "language": "en", "og:title": "useState – React", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/useState", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "ogTitle": "useState – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "c3ad8cf3-4d1f-4fc0-a9f8-20058ada3c88", "sourceURL": "https://react.dev/reference/react/useState", "url": "https://react.dev/reference/react/useState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Built-in React APIs is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Built-in React APIs in react-reference.\n\n# Built-in React APIs\n\nIn addition to Hooks and Components, the react package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.Here's a quick rundown of what this is about:\n\n## Built-in React APIs\n\nIn addition to Hooks and Components, the react package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.\n\n- `createContext` lets you define and provide context to the child components. Used with `useContext`.\n- `forwardRef` lets your component expose a DOM node as a ref to the parent. Used with `useRef`.\n- `lazy` lets you defer loading a component’s code until it’s rendered for the first time.\n- `memo` lets your component skip re-renders with same props. Used with `useMemo` and `useCallback`.\n- `startTransition` lets you mark a state update as non-urgent. Similar to `useTransition`.\n- `act` lets you wrap renders and interactions in tests to ensure updates have processed before making assertions.\n\n## Resource APIs\n\nResources can be accessed by a component without having them as part of their state. For example, a component can read a message from a Promise or read styling information from a context.\n\nTo read a value from a resource, use this API:\n\n- `use` lets you read the value of a resource like a Promise or context.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/apis", "title": "Built-in React APIs", "description": "In addition to Hooks and Components, the react package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:06:45", "type": "overview", "page_metadata": {"og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "Built-in React APIs – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Built-in React APIs – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Built-in React APIs – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Built-in React APIs – React", "og:url": "https://react.dev/reference/react/apis", "ogUrl": "https://react.dev/reference/react/apis", "scrapeId": "7dfdecb5-a977-47bb-aa6a-32f817e47d5d", "sourceURL": "https://react.dev/reference/react/apis", "url": "https://react.dev/reference/react/apis", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I built-in react apis in react-reference?\n\nAssistant: To built-in react apis in react-reference, here's what you do:\nIn addition to Hooks and Components, the react package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.\n\n- `createContext` lets you define and provide context to the child components. Used with `useContext`.\n- `forwardRef` lets your component expose a DOM node as a ref to the parent. Used with `useRef`.\n- `lazy` lets you defer loading a component’s code until it’s rendered for the first time.\n- `memo` lets your component skip re-renders with same props. Used with `useMemo` and `useCallback`.\n- `startTransition` lets you mark a state update as non-urgent. Similar to `useTransition`.\n- `act` lets you wrap renders and interactions in tests to ensure updates have processed before making assertions..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/apis", "title": "Built-in React APIs", "description": "In addition to Hooks and Components, the react package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:06:45", "type": "section_detail", "page_metadata": {"og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "Built-in React APIs – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Built-in React APIs – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Built-in React APIs – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Built-in React APIs – React", "og:url": "https://react.dev/reference/react/apis", "ogUrl": "https://react.dev/reference/react/apis", "scrapeId": "7dfdecb5-a977-47bb-aa6a-32f817e47d5d", "sourceURL": "https://react.dev/reference/react/apis", "url": "https://react.dev/reference/react/apis", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I resource apis in react-reference?\n\nAssistant: To resource apis in react-reference, here's what you do:\nResources can be accessed by a component without having them as part of their state. For example, a component can read a message from a Promise or read styling information from a context.\n\nTo read a value from a resource, use this API:\n\n- `use` lets you read the value of a resource like a Promise or context..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/apis", "title": "Built-in React APIs", "description": "In addition to Hooks and Components, the react package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:06:45", "type": "section_detail", "page_metadata": {"og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "Built-in React APIs – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Built-in React APIs – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Built-in React APIs – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Built-in React APIs – React", "og:url": "https://react.dev/reference/react/apis", "ogUrl": "https://react.dev/reference/react/apis", "scrapeId": "7dfdecb5-a977-47bb-aa6a-32f817e47d5d", "sourceURL": "https://react.dev/reference/react/apis", "url": "https://react.dev/reference/react/apis", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Built-in React APIs in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**MessageComponent Example**:\n\n```yaml\nfunction MessageComponent({ messagePromise }) {\n\n  const message = use(messagePromise);\n\n  const theme = use(ThemeContext);\n\n  // ...\n}\n```\n\nThis snippet shows you how to messagecomponent example, which is an important aspect of built-in react apis.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/apis", "title": "Built-in React APIs", "description": "In addition to Hooks and Components, the react package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:06:45", "type": "code_examples", "page_metadata": {"og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "Built-in React APIs – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Built-in React APIs – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Built-in React APIs – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Built-in React APIs – React", "og:url": "https://react.dev/reference/react/apis", "ogUrl": "https://react.dev/reference/react/apis", "scrapeId": "7dfdecb5-a977-47bb-aa6a-32f817e47d5d", "sourceURL": "https://react.dev/reference/react/apis", "url": "https://react.dev/reference/react/apis", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Built-in React APIs in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `createContext` to manage state across components without prop drilling.\n\nUtilize `forwardRef` to allow parent components to directly interact with child DOM nodes.\n\nImplement `lazy` for code-splitting to improve performance by loading components only when needed.\n\nApply `memo` to prevent unnecessary re-renders of components that receive the same props.\n\nMark state updates as non-urgent with `startTransition` to improve user experience during updates.\n\nUse `act` in tests to ensure that all updates have been processed before making assertions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/apis", "title": "Built-in React APIs", "description": "In addition to Hooks and Components, the react package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:06:45", "type": "best_practices", "page_metadata": {"og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "Built-in React APIs – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "og:title": "Built-in React APIs – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "theme-color": "#23272f", "fb:app_id": "623268441017527", "title": "Built-in React APIs – React", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "language": "en", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "Built-in React APIs – React", "og:url": "https://react.dev/reference/react/apis", "ogUrl": "https://react.dev/reference/react/apis", "scrapeId": "7dfdecb5-a977-47bb-aa6a-32f817e47d5d", "sourceURL": "https://react.dev/reference/react/apis", "url": "https://react.dev/reference/react/apis", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Component is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Component in react-reference.\n\n# Component\n\nThe base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.Here's a quick rundown of what this is about:\n\n## Pitfall\n\nWe recommend defining components as functions instead of classes. See how to migrate.\n\n## Reference\n\nTo define a React component as a class, extend the built-in `Component` class and define a `render` method.\n\n## context\n\nThe context of a class component is available as `this.context`. It is only available if you specify which context you want to receive using `static contextType`.\n\n## props\n\nThe props passed to a class component are available as `this.props`.\n\n## state\n\nThe state of a class component is available as `this.state`. The state field must be an object. Do not mutate the state directly.\n\n## constructor(props)\n\nThe constructor runs before your class component mounts. Typically, a constructor is only used for two purposes in React.\n\n## componentDidCatch(error, info)\n\nIf you define `componentDidCatch`, React will call it when some child component throws an error during rendering.\n\n## componentDidMount()\n\nIf you define the `componentDidMount` method, React will call it when your component is added to the screen.\n\n## componentDidUpdate(prevProps, prevState, snapshot?)\n\nIf you define the `componentDidUpdate` method, React will call it immediately after your component has been re-rendered with updated props or state.\n\n## componentWillMount()\n\nDeprecated. This API has been renamed from `componentWillMount` to `UNSAFE_componentWillMount`.\n\n## componentWillReceiveProps(nextProps)\n\nDeprecated. This API has been renamed from `componentWillReceiveProps` to `UNSAFE_componentWillReceiveProps`.\n\n## componentWillUpdate(nextProps, nextState)\n\nDeprecated. This API has been renamed from `componentWillUpdate` to `UNSAFE_componentWillUpdate`.\n\n## componentWillUnmount()\n\nIf you define the `componentWillUnmount` method, React will call it before your component is removed from the screen.\n\n## forceUpdate(callback?)\n\nForces a component to re-render.\n\n## getSnapshotBeforeUpdate(prevProps, prevState)\n\nIf you implement `getSnapshotBeforeUpdate`, React will call it immediately before React updates the DOM.\n\n## render()\n\nThe `render` method is the only required method in a class component.\n\n## setState(nextState, callback?)\n\nCall `setState` to update the state of your React component.\n\n## shouldComponentUpdate(nextProps, nextState, nextContext)\n\nIf you define `shouldComponentUpdate`, React will call it to determine whether a re-render can be skipped.\n\n## UNSAFE_componentWillMount()\n\nIf you define `UNSAFE_componentWillMount`, React will call it immediately after the constructor.\n\n## UNSAFE_componentWillReceiveProps(nextProps, nextContext)\n\nIf you define `UNSAFE_componentWillReceiveProps`, React will call it when the component receives new props.\n\n## UNSAFE_componentWillUpdate(nextProps, nextState)\n\nIf you define `UNSAFE_componentWillUpdate`, React will call it before rendering with the new props or state.\n\n## static contextType\n\nIf you want to read `this.context` from your class component, you must specify which context it needs to read.\n\n## static defaultProps\n\nYou can define `static defaultProps` to set the default props for the class.\n\n## static getDerivedStateFromError(error)\n\nIf you define `static getDerivedStateFromError`, React will call it when a child component throws an error during rendering.\n\n## static getDerivedStateFromProps(props, state)\n\nIf you define `static getDerivedStateFromProps`, React will call it right before calling `render`.\n\n## Usage\n\nTo define a React component as a class, extend the built-in `Component` class and define a `render` method.\n\n## Adding state to a class component\n\nTo add state to a class, assign an object to a property called `state`. To update state, call `this.setState`.\n\n## Adding lifecycle methods to a class component\n\nThere are a few special methods you can define on your class.\n\n## Catching rendering errors with an error boundary\n\nBy default, if your application throws an error during rendering, React will remove its UI from the screen.\n\n## Alternatives\n\nTypically, you will define components as functions instead.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "overview", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\nWe recommend defining components as functions instead of classes. See how to migrate..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nTo define a React component as a class, extend the built-in `Component` class and define a `render` method..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I context in react-reference?\n\nAssistant: To context in react-reference, here's what you do:\nThe context of a class component is available as `this.context`. It is only available if you specify which context you want to receive using `static contextType`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I props in react-reference?\n\nAssistant: To props in react-reference, here's what you do:\nThe props passed to a class component are available as `this.props`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I state in react-reference?\n\nAssistant: To state in react-reference, here's what you do:\nThe state of a class component is available as `this.state`. The state field must be an object. Do not mutate the state directly..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I constructor(props) in react-reference?\n\nAssistant: To constructor(props) in react-reference, here's what you do:\nThe constructor runs before your class component mounts. Typically, a constructor is only used for two purposes in React..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I componentdidcatch(error, info) in react-reference?\n\nAssistant: To componentdidcatch(error, info) in react-reference, here's what you do:\nIf you define `componentDidCatch`, React will call it when some child component throws an error during rendering..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I componentdidmount() in react-reference?\n\nAssistant: To componentdidmount() in react-reference, here's what you do:\nIf you define the `componentDidMount` method, React will call it when your component is added to the screen..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I componentdidupdate(prevprops, prevstate, snapshot?) in react-reference?\n\nAssistant: To componentdidupdate(prevprops, prevstate, snapshot?) in react-reference, here's what you do:\nIf you define the `componentDidUpdate` method, React will call it immediately after your component has been re-rendered with updated props or state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I componentwillmount() in react-reference?\n\nAssistant: To componentwillmount() in react-reference, here's what you do:\nDeprecated. This API has been renamed from `componentWillMount` to `UNSAFE_componentWillMount`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I componentwillreceiveprops(nextprops) in react-reference?\n\nAssistant: To componentwillreceiveprops(nextprops) in react-reference, here's what you do:\nDeprecated. This API has been renamed from `componentWillReceiveProps` to `UNSAFE_componentWillReceiveProps`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I componentwillupdate(nextprops, nextstate) in react-reference?\n\nAssistant: To componentwillupdate(nextprops, nextstate) in react-reference, here's what you do:\nDeprecated. This API has been renamed from `componentWillUpdate` to `UNSAFE_componentWillUpdate`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I componentwillunmount() in react-reference?\n\nAssistant: To componentwillunmount() in react-reference, here's what you do:\nIf you define the `componentWillUnmount` method, React will call it before your component is removed from the screen..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I forceupdate(callback?) in react-reference?\n\nAssistant: To forceupdate(callback?) in react-reference, here's what you do:\nForces a component to re-render..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I getsnapshotbeforeupdate(prevprops, prevstate) in react-reference?\n\nAssistant: To getsnapshotbeforeupdate(prevprops, prevstate) in react-reference, here's what you do:\nIf you implement `getSnapshotBeforeUpdate`, React will call it immediately before React updates the DOM..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I render() in react-reference?\n\nAssistant: To render() in react-reference, here's what you do:\nThe `render` method is the only required method in a class component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I setstate(nextstate, callback?) in react-reference?\n\nAssistant: To setstate(nextstate, callback?) in react-reference, here's what you do:\nCall `setState` to update the state of your React component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I shouldcomponentupdate(nextprops, nextstate, nextcontext) in react-reference?\n\nAssistant: To shouldcomponentupdate(nextprops, nextstate, nextcontext) in react-reference, here's what you do:\nIf you define `shouldComponentUpdate`, React will call it to determine whether a re-render can be skipped..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I unsafe_componentwillmount() in react-reference?\n\nAssistant: To unsafe_componentwillmount() in react-reference, here's what you do:\nIf you define `UNSAFE_componentWillMount`, React will call it immediately after the constructor..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I unsafe_componentwillreceiveprops(nextprops, nextcontext) in react-reference?\n\nAssistant: To unsafe_componentwillreceiveprops(nextprops, nextcontext) in react-reference, here's what you do:\nIf you define `UNSAFE_componentWillReceiveProps`, React will call it when the component receives new props..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I unsafe_componentwillupdate(nextprops, nextstate) in react-reference?\n\nAssistant: To unsafe_componentwillupdate(nextprops, nextstate) in react-reference, here's what you do:\nIf you define `UNSAFE_componentWillUpdate`, React will call it before rendering with the new props or state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I static contexttype in react-reference?\n\nAssistant: To static contexttype in react-reference, here's what you do:\nIf you want to read `this.context` from your class component, you must specify which context it needs to read..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I static defaultprops in react-reference?\n\nAssistant: To static defaultprops in react-reference, here's what you do:\nYou can define `static defaultProps` to set the default props for the class..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I static getderivedstatefromerror(error) in react-reference?\n\nAssistant: To static getderivedstatefromerror(error) in react-reference, here's what you do:\nIf you define `static getDerivedStateFromError`, React will call it when a child component throws an error during rendering..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I static getderivedstatefromprops(props, state) in react-reference?\n\nAssistant: To static getderivedstatefromprops(props, state) in react-reference, here's what you do:\nIf you define `static getDerivedStateFromProps`, React will call it right before calling `render`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nTo define a React component as a class, extend the built-in `Component` class and define a `render` method..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I adding state to a class component in react-reference?\n\nAssistant: To adding state to a class component in react-reference, here's what you do:\nTo add state to a class, assign an object to a property called `state`. To update state, call `this.setState`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I adding lifecycle methods to a class component in react-reference?\n\nAssistant: To adding lifecycle methods to a class component in react-reference, here's what you do:\nThere are a few special methods you can define on your class..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I catching rendering errors with an error boundary in react-reference?\n\nAssistant: To catching rendering errors with an error boundary in react-reference, here's what you do:\nBy default, if your application throws an error during rendering, React will remove its UI from the screen..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I alternatives in react-reference?\n\nAssistant: To alternatives in react-reference, here's what you do:\nTypically, you will define components as functions instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Component in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Greeting Component**:\n\n```yaml\nclass Greeting extends Component {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n```\n\nThis snippet shows you how to greeting component, which is an important aspect of component.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "code_examples", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Component in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWe recommend defining components as functions instead of classes. See how to migrate.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/Component", "title": "Component", "description": "The base class for the React components defined as JavaScript classes. Class components are still supported by React, but we don’t recommend using them in new code.", "has_code_examples": true, "has_best_practices": true, "section_count": 30, "timestamp": "2025-03-01 01:07:05", "type": "best_practices", "page_metadata": {"msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:site": "@reactjs", "og:url": "https://react.dev/reference/react/Component", "og:image": "https://react.dev/images/og-reference.png", "title": "Component – React", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Component – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "Component – React", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogTitle": "Component – React", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react/Component", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "og:type": "website", "scrapeId": "2af4d052-68b1-45d6-a93a-526aa2d1ff59", "sourceURL": "https://react.dev/reference/react/Component", "url": "https://react.dev/reference/react/Component", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useImperativeHandle is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useImperativeHandle in react-reference.\n\n# useImperativeHandle\n\n`useImperativeHandle` is a React Hook that lets you customize the handle exposed as a ref.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useImperativeHandle(ref, createHandle, dependencies?)`\n\nCall `useImperativeHandle` at the top level of your component to customize the ref handle it exposes:\n\n```sp-pre-placeholder grow-[2]\nimport { useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n\n  useImperativeHandle(ref, () => {\n\n    return {\n\n      // ... your methods ...\n\n    };\n\n  }, []);\n\n  // ...\n}\n```\n\n#### Parameters\n- `ref`: The `ref` you received as a prop to the `MyInput` component.\n- `createHandle`: A function that takes no arguments and returns the ref handle you want to expose. That ref handle can have any type. Usually, you will return an object with the methods you want to expose.\n- **optional** `dependencies`: The list of all reactive values referenced inside of the `createHandle` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is configured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the `Object.is` comparison. If a re-render resulted in a change to some dependency, or if you omitted this argument, your `createHandle` function will re-execute, and the newly created handle will be assigned to the ref.\n\n## Usage\n\n### Exposing a custom ref handle to the parent component\n\nTo expose a DOM node to the parent element, pass in the `ref` prop to the node.\n\n```sp-pre-placeholder grow-[2]\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n};\n```\n\nWith the code above, a ref to `MyInput` will receive the `<input>` DOM node. However, you can expose a custom value instead. To customize the exposed handle, call `useImperativeHandle` at the top level of your component:\n\n```sp-pre-placeholder grow-[2]\nimport { useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n  useImperativeHandle(ref, () => {\n    return {\n      // ... your methods ...\n    };\n  }, []);\n  return <input />;\n};\n```\n\nNote that in the code above, the `ref` is no longer passed to the `<input>`.\n\nFor example, suppose you don’t want to expose the entire `<input>` DOM node, but you want to expose two of its methods: `focus` and `scrollIntoView`. To do this, keep the real browser DOM in a separate ref. Then use `useImperativeHandle` to expose a handle with only the methods that you want the parent component to call:\n\n```sp-pre-placeholder grow-[2]\nimport { useRef, useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n  const inputRef = useRef(null);\n\n  useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus();\n      },\n      scrollIntoView() {\n        inputRef.current.scrollIntoView();\n      },\n    };\n  }, []);\n\n  return <input ref={inputRef} />;\n};\n```\n\nNow, if the parent component gets a ref to `MyInput`, it will be able to call the `focus` and `scrollIntoView` methods on it. However, it will not have full access to the underlying `<input>` DOM node.\n\n## Exposing your own imperative methods\n\nThe methods you expose via an imperative handle don’t have to match the DOM methods exactly. For example, this `Post` component exposes a `scrollAndFocusAddComment` method via an imperative handle. This lets the parent `Page` scroll the list of comments and focus the input field when you click the button:\n\n```sp-pre-placeholder grow-[2]\nimport { useRef } from 'react';\nimport Post from './Post.js';\n\nexport default function Page() {\n  const postRef = useRef(null);\n\n  function handleClick() {\n    postRef.current.scrollAndFocusAddComment();\n  }\n\n  return (\n    <> \n      <button onClick={handleClick}>Write a comment</button>\n      <Post ref={postRef} />\n    </>\n  );\n}\n```\n\n### Pitfall\n**Do not overuse refs.** You should only use refs for imperative behaviors that you can’t express as props: for example, scrolling to a node, focusing a node, triggering an animation, selecting text, and so on.\n\n**If you can express something as a prop, you should not use a ref.** For example, instead of exposing an imperative handle like `{ open, close }` from a `Modal` component, it is better to take `isOpen` as a prop like `<Modal isOpen={isOpen} />`. Effects can help you expose imperative behaviors via props.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useImperativeHandle", "title": "useImperativeHandle", "description": "`useImperativeHandle` is a React Hook that lets you customize the handle exposed as a ref.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:34", "type": "overview", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "useImperativeHandle – React", "og:type": "website", "theme-color": "#23272f", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "title": "useImperativeHandle – React", "og:url": "https://react.dev/reference/react/useImperativeHandle", "ogUrl": "https://react.dev/reference/react/useImperativeHandle", "language": "en", "twitter:title": "useImperativeHandle – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogTitle": "useImperativeHandle – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "ade60ca1-4ff8-4e9c-8db7-8bd976508756", "sourceURL": "https://react.dev/reference/react/useImperativeHandle", "url": "https://react.dev/reference/react/useImperativeHandle", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useImperativeHandle(ref, createHandle, dependencies?)`\n\nCall `useImperativeHandle` at the top level of your component to customize the ref handle it exposes:\n\n```sp-pre-placeholder grow-[2]\nimport { useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n\n  useImperativeHandle(ref, () => {\n\n    return {\n\n      // ... your methods ...\n\n    };\n\n  }, []);\n\n  // ...\n}\n```\n\n#### Parameters\n- `ref`: The `ref` you received as a prop to the `MyInput` component.\n- `createHandle`: A function that takes no arguments and returns the ref handle you want to expose. That ref handle can have any type. Usually, you will return an object with the methods you want to expose.\n- **optional** `dependencies`: The list of all reactive values referenced inside of the `createHandle` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is configured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the `Object.is` comparison. If a re-render resulted in a change to some dependency, or if you omitted this argument, your `createHandle` function will re-execute, and the newly created handle will be assigned to the ref..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useImperativeHandle", "title": "useImperativeHandle", "description": "`useImperativeHandle` is a React Hook that lets you customize the handle exposed as a ref.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:34", "type": "section_detail", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "useImperativeHandle – React", "og:type": "website", "theme-color": "#23272f", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "title": "useImperativeHandle – React", "og:url": "https://react.dev/reference/react/useImperativeHandle", "ogUrl": "https://react.dev/reference/react/useImperativeHandle", "language": "en", "twitter:title": "useImperativeHandle – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogTitle": "useImperativeHandle – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "ade60ca1-4ff8-4e9c-8db7-8bd976508756", "sourceURL": "https://react.dev/reference/react/useImperativeHandle", "url": "https://react.dev/reference/react/useImperativeHandle", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Exposing a custom ref handle to the parent component\n\nTo expose a DOM node to the parent element, pass in the `ref` prop to the node.\n\n```sp-pre-placeholder grow-[2]\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n};\n```\n\nWith the code above, a ref to `MyInput` will receive the `<input>` DOM node. However, you can expose a custom value instead. To customize the exposed handle, call `useImperativeHandle` at the top level of your component:\n\n```sp-pre-placeholder grow-[2]\nimport { useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n  useImperativeHandle(ref, () => {\n    return {\n      // ... your methods ...\n    };\n  }, []);\n  return <input />;\n};\n```\n\nNote that in the code above, the `ref` is no longer passed to the `<input>`.\n\nFor example, suppose you don’t want to expose the entire `<input>` DOM node, but you want to expose two of its methods: `focus` and `scrollIntoView`. To do this, keep the real browser DOM in a separate ref. Then use `useImperativeHandle` to expose a handle with only the methods that you want the parent component to call:\n\n```sp-pre-placeholder grow-[2]\nimport { useRef, useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n  const inputRef = useRef(null);\n\n  useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus();\n      },\n      scrollIntoView() {\n        inputRef.current.scrollIntoView();\n      },\n    };\n  }, []);\n\n  return <input ref={inputRef} />;\n};\n```\n\nNow, if the parent component gets a ref to `MyInput`, it will be able to call the `focus` and `scrollIntoView` methods on it. However, it will not have full access to the underlying `<input>` DOM node..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useImperativeHandle", "title": "useImperativeHandle", "description": "`useImperativeHandle` is a React Hook that lets you customize the handle exposed as a ref.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:34", "type": "section_detail", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "useImperativeHandle – React", "og:type": "website", "theme-color": "#23272f", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "title": "useImperativeHandle – React", "og:url": "https://react.dev/reference/react/useImperativeHandle", "ogUrl": "https://react.dev/reference/react/useImperativeHandle", "language": "en", "twitter:title": "useImperativeHandle – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogTitle": "useImperativeHandle – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "ade60ca1-4ff8-4e9c-8db7-8bd976508756", "sourceURL": "https://react.dev/reference/react/useImperativeHandle", "url": "https://react.dev/reference/react/useImperativeHandle", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I exposing your own imperative methods in react-reference?\n\nAssistant: To exposing your own imperative methods in react-reference, here's what you do:\nThe methods you expose via an imperative handle don’t have to match the DOM methods exactly. For example, this `Post` component exposes a `scrollAndFocusAddComment` method via an imperative handle. This lets the parent `Page` scroll the list of comments and focus the input field when you click the button:\n\n```sp-pre-placeholder grow-[2]\nimport { useRef } from 'react';\nimport Post from './Post.js';\n\nexport default function Page() {\n  const postRef = useRef(null);\n\n  function handleClick() {\n    postRef.current.scrollAndFocusAddComment();\n  }\n\n  return (\n    <> \n      <button onClick={handleClick}>Write a comment</button>\n      <Post ref={postRef} />\n    </>\n  );\n}\n```\n\n### Pitfall\n**Do not overuse refs.** You should only use refs for imperative behaviors that you can’t express as props: for example, scrolling to a node, focusing a node, triggering an animation, selecting text, and so on.\n\n**If you can express something as a prop, you should not use a ref.** For example, instead of exposing an imperative handle like `{ open, close }` from a `Modal` component, it is better to take `isOpen` as a prop like `<Modal isOpen={isOpen} />`. Effects can help you expose imperative behaviors via props..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useImperativeHandle", "title": "useImperativeHandle", "description": "`useImperativeHandle` is a React Hook that lets you customize the handle exposed as a ref.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:34", "type": "section_detail", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "useImperativeHandle – React", "og:type": "website", "theme-color": "#23272f", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "title": "useImperativeHandle – React", "og:url": "https://react.dev/reference/react/useImperativeHandle", "ogUrl": "https://react.dev/reference/react/useImperativeHandle", "language": "en", "twitter:title": "useImperativeHandle – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogTitle": "useImperativeHandle – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "ade60ca1-4ff8-4e9c-8db7-8bd976508756", "sourceURL": "https://react.dev/reference/react/useImperativeHandle", "url": "https://react.dev/reference/react/useImperativeHandle", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useImperativeHandle in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useImperativeHandle Example**:\n\n```yaml\nimport { useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n  useImperativeHandle(ref, () => {\n    return {\n      // ... your methods ...\n    };\n  }, []);\n  // ...\n}\n```\n\nThis snippet shows you how to basic useimperativehandle example, which is an important aspect of useimperativehandle.\n\n**Exposing a custom ref handle**:\n\n```yaml\nfunction MyInput({ ref }) {\n  return <input ref={ref} />;\n};\n```\n\nThis snippet shows you how to exposing a custom ref handle, which is an important aspect of useimperativehandle.\n\n**Exposing methods focus and scrollIntoView**:\n\n```yaml\nimport { useRef, useImperativeHandle } from 'react';\n\nfunction MyInput({ ref }) {\n  const inputRef = useRef(null);\n\n  useImperativeHandle(ref, () => {\n    return {\n      focus() {\n        inputRef.current.focus();\n      },\n      scrollIntoView() {\n        inputRef.current.scrollIntoView();\n      },\n    };\n  }, []);\n\n  return <input ref={inputRef} />;\n};\n```\n\nThis snippet shows you how to exposing methods focus and scrollintoview, which is an important aspect of useimperativehandle.\n\n**Page component using Post component**:\n\n```yaml\nimport { useRef } from 'react';\nimport Post from './Post.js';\n\nexport default function Page() {\n  const postRef = useRef(null);\n\n  function handleClick() {\n    postRef.current.scrollAndFocusAddComment();\n  }\n\n  return (\n    <> \n      <button onClick={handleClick}>Write a comment</button>\n      <Post ref={postRef} />\n    </>\n  );\n}\n```\n\nThis snippet shows you how to page component using post component, which is an important aspect of useimperativehandle.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useImperativeHandle", "title": "useImperativeHandle", "description": "`useImperativeHandle` is a React Hook that lets you customize the handle exposed as a ref.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:34", "type": "code_examples", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "useImperativeHandle – React", "og:type": "website", "theme-color": "#23272f", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "title": "useImperativeHandle – React", "og:url": "https://react.dev/reference/react/useImperativeHandle", "ogUrl": "https://react.dev/reference/react/useImperativeHandle", "language": "en", "twitter:title": "useImperativeHandle – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogTitle": "useImperativeHandle – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "ade60ca1-4ff8-4e9c-8db7-8bd976508756", "sourceURL": "https://react.dev/reference/react/useImperativeHandle", "url": "https://react.dev/reference/react/useImperativeHandle", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useImperativeHandle in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not overuse refs. You should only use refs for imperative behaviors that you can’t express as props: for example, scrolling to a node, focusing a node, triggering an animation, selecting text, and so on.\n\nIf you can express something as a prop, you should not use a ref. For example, instead of exposing an imperative handle like `{ open, close }` from a `Modal` component, it is better to take `isOpen` as a prop like `<Modal isOpen={isOpen} />`. Effects can help you expose imperative behaviors via props.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useImperativeHandle", "title": "useImperativeHandle", "description": "`useImperativeHandle` is a React Hook that lets you customize the handle exposed as a ref.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:07:34", "type": "best_practices", "page_metadata": {"twitter:creator": "@reactjs", "og:title": "useImperativeHandle – React", "og:type": "website", "theme-color": "#23272f", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "title": "useImperativeHandle – React", "og:url": "https://react.dev/reference/react/useImperativeHandle", "ogUrl": "https://react.dev/reference/react/useImperativeHandle", "language": "en", "twitter:title": "useImperativeHandle – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogTitle": "useImperativeHandle – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "ade60ca1-4ff8-4e9c-8db7-8bd976508756", "sourceURL": "https://react.dev/reference/react/useImperativeHandle", "url": "https://react.dev/reference/react/useImperativeHandle", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what PureComponent is in react-reference?\n\nAssistant: Sure, I'd be happy to explain PureComponent in react-reference.\n\n# PureComponent\n\nThis page covers the usage and details of the PureComponent in React, including its benefits, pitfalls, and alternatives.Here's a quick rundown of what this is about:\n\n## Pitfall\n\nWe recommend defining components as functions instead of classes. [See how to migrate.](https://react.dev/reference/react/PureComponent#alternatives) `PureComponent` is similar to [`Component`](https://react.dev/reference/react/Component) but it skips re-renders for same props and state. Class components are still supported by React, but we don’t recommend using them in new code.\n\n## Reference\n\nTo skip re-rendering a class component for same props and state, extend `PureComponent` instead of [`Component`:](https://react.dev/reference/react/Component) `PureComponent` is a subclass of `Component` and supports [all the `Component` APIs.](https://react.dev/reference/react/Component#reference) Extending `PureComponent` is equivalent to defining a custom [`shouldComponentUpdate`](https://react.dev/reference/react/Component#shouldcomponentupdate) method that shallowly compares props and state.\n\n## Usage\n\nReact normally re-renders a component whenever its parent re-renders. As an optimization, you can create a component that React will not re-render when its parent re-renders so long as its new props and state are the same as the old props and state. A React component should always have [pure rendering logic.](https://react.dev/learn/keeping-components-pure) This means that it must return the same output if its props, state, and context haven’t changed. By using `PureComponent`, you are telling React that your component complies with this requirement, so React doesn’t need to re-render as long as its props and state haven’t changed. However, your component will still re-render if a context that it’s using changes.\n\n## Alternatives\n\nWe recommend using function components instead of [class components](https://react.dev/reference/react/Component) in new code. If you have some existing class components using `PureComponent`, here is how you can convert them.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/PureComponent", "title": "PureComponent", "description": "This page covers the usage and details of the PureComponent in React, including its benefits, pitfalls, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:07:43", "type": "overview", "page_metadata": {"og:type": "website", "title": "PureComponent – React", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "PureComponent – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "PureComponent – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/PureComponent", "og:url": "https://react.dev/reference/react/PureComponent", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "ogTitle": "PureComponent – React", "og:description": "The library for web and native user interfaces", "scrapeId": "ebe67d22-0e9c-41ac-a3cf-a3a896de61f1", "sourceURL": "https://react.dev/reference/react/PureComponent", "url": "https://react.dev/reference/react/PureComponent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\nWe recommend defining components as functions instead of classes. [See how to migrate.](https://react.dev/reference/react/PureComponent#alternatives) `PureComponent` is similar to [`Component`](https://react.dev/reference/react/Component) but it skips re-renders for same props and state. Class components are still supported by React, but we don’t recommend using them in new code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/PureComponent", "title": "PureComponent", "description": "This page covers the usage and details of the PureComponent in React, including its benefits, pitfalls, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:07:43", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "PureComponent – React", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "PureComponent – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "PureComponent – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/PureComponent", "og:url": "https://react.dev/reference/react/PureComponent", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "ogTitle": "PureComponent – React", "og:description": "The library for web and native user interfaces", "scrapeId": "ebe67d22-0e9c-41ac-a3cf-a3a896de61f1", "sourceURL": "https://react.dev/reference/react/PureComponent", "url": "https://react.dev/reference/react/PureComponent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nTo skip re-rendering a class component for same props and state, extend `PureComponent` instead of [`Component`:](https://react.dev/reference/react/Component) `PureComponent` is a subclass of `Component` and supports [all the `Component` APIs.](https://react.dev/reference/react/Component#reference) Extending `PureComponent` is equivalent to defining a custom [`shouldComponentUpdate`](https://react.dev/reference/react/Component#shouldcomponentupdate) method that shallowly compares props and state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/PureComponent", "title": "PureComponent", "description": "This page covers the usage and details of the PureComponent in React, including its benefits, pitfalls, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:07:43", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "PureComponent – React", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "PureComponent – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "PureComponent – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/PureComponent", "og:url": "https://react.dev/reference/react/PureComponent", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "ogTitle": "PureComponent – React", "og:description": "The library for web and native user interfaces", "scrapeId": "ebe67d22-0e9c-41ac-a3cf-a3a896de61f1", "sourceURL": "https://react.dev/reference/react/PureComponent", "url": "https://react.dev/reference/react/PureComponent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nReact normally re-renders a component whenever its parent re-renders. As an optimization, you can create a component that React will not re-render when its parent re-renders so long as its new props and state are the same as the old props and state. A React component should always have [pure rendering logic.](https://react.dev/learn/keeping-components-pure) This means that it must return the same output if its props, state, and context haven’t changed. By using `PureComponent`, you are telling React that your component complies with this requirement, so React doesn’t need to re-render as long as its props and state haven’t changed. However, your component will still re-render if a context that it’s using changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/PureComponent", "title": "PureComponent", "description": "This page covers the usage and details of the PureComponent in React, including its benefits, pitfalls, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:07:43", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "PureComponent – React", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "PureComponent – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "PureComponent – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/PureComponent", "og:url": "https://react.dev/reference/react/PureComponent", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "ogTitle": "PureComponent – React", "og:description": "The library for web and native user interfaces", "scrapeId": "ebe67d22-0e9c-41ac-a3cf-a3a896de61f1", "sourceURL": "https://react.dev/reference/react/PureComponent", "url": "https://react.dev/reference/react/PureComponent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I alternatives in react-reference?\n\nAssistant: To alternatives in react-reference, here's what you do:\nWe recommend using function components instead of [class components](https://react.dev/reference/react/Component) in new code. If you have some existing class components using `PureComponent`, here is how you can convert them..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/PureComponent", "title": "PureComponent", "description": "This page covers the usage and details of the PureComponent in React, including its benefits, pitfalls, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:07:43", "type": "section_detail", "page_metadata": {"og:type": "website", "title": "PureComponent – React", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "PureComponent – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "PureComponent – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/PureComponent", "og:url": "https://react.dev/reference/react/PureComponent", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "ogTitle": "PureComponent – React", "og:description": "The library for web and native user interfaces", "scrapeId": "ebe67d22-0e9c-41ac-a3cf-a3a896de61f1", "sourceURL": "https://react.dev/reference/react/PureComponent", "url": "https://react.dev/reference/react/PureComponent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for PureComponent in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**PureComponent Example**:\n\n```yaml\nclass Greeting extends PureComponent {\n  render() {\n    return <h1>Hello, {this.props.name}!</h1>;\n  }\n}\n```\n\nThis snippet shows you how to purecomponent example, which is an important aspect of purecomponent.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/PureComponent", "title": "PureComponent", "description": "This page covers the usage and details of the PureComponent in React, including its benefits, pitfalls, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:07:43", "type": "code_examples", "page_metadata": {"og:type": "website", "title": "PureComponent – React", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "PureComponent – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "PureComponent – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/PureComponent", "og:url": "https://react.dev/reference/react/PureComponent", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "ogTitle": "PureComponent – React", "og:description": "The library for web and native user interfaces", "scrapeId": "ebe67d22-0e9c-41ac-a3cf-a3a896de61f1", "sourceURL": "https://react.dev/reference/react/PureComponent", "url": "https://react.dev/reference/react/PureComponent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using PureComponent in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDefine components as functions instead of classes.\n\nUse `memo` when converting class components to function components.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/PureComponent", "title": "PureComponent", "description": "This page covers the usage and details of the PureComponent in React, including its benefits, pitfalls, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:07:43", "type": "best_practices", "page_metadata": {"og:type": "website", "title": "PureComponent – React", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "PureComponent – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:title": "PureComponent – React", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "ogUrl": "https://react.dev/reference/react/PureComponent", "og:url": "https://react.dev/reference/react/PureComponent", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "ogTitle": "PureComponent – React", "og:description": "The library for web and native user interfaces", "scrapeId": "ebe67d22-0e9c-41ac-a3cf-a3a896de61f1", "sourceURL": "https://react.dev/reference/react/PureComponent", "url": "https://react.dev/reference/react/PureComponent", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what use is in react-reference?\n\nAssistant: Sure, I'd be happy to explain use in react-reference.\n\n# use\n\n`use` is a React API that lets you read the value of a resource like a Promise or context.Here's a quick rundown of what this is about:\n\n## Reference\n\nCall `use` in your component to read the value of a resource like a Promise or context.\n\n```sp-pre-placeholder grow-[2]\nimport { use } from 'react';\n\nfunction MessageComponent({ messagePromise }) {\n\n  const message = use(messagePromise);\n\n  const theme = use(ThemeContext);\n\n  // ...\n```\n\nUnlike React Hooks, `use` can be called within loops and conditional statements like `if`. Like React Hooks, the function that calls `use` must be a Component or Hook.\n\nWhen called with a Promise, the `use` API integrates with `Suspense` and error boundaries. The component calling `use` suspends while the Promise passed to `use` is pending. If the component that calls `use` is wrapped in a Suspense boundary, the fallback will be displayed. Once the Promise is resolved, the Suspense fallback is replaced by the rendered components using the data returned by the `use` API. If the Promise passed to `use` is rejected, the fallback of the nearest Error Boundary will be displayed.\n\n## Parameters\n\n- `resource`: this is the source of the data you want to read a value from. A resource can be a Promise or a context.\n\n## Returns\n\nThe `use` API returns the value that was read from the resource like the resolved value of a Promise or context.\n\n## Caveats\n\n- The `use` API must be called inside a Component or a Hook.\n- When fetching data in a Server Component, prefer `async` and `await` over `use`. `async` and `await` pick up rendering from the point where `await` was invoked, whereas `use` re-renders the component after the data is resolved.\n- Prefer creating Promises in Server Components and passing them to Client Components over creating Promises in Client Components. Promises created in Client Components are recreated on every render. Promises passed from a Server Component to a Client Component are stable across re-renders.\n\n## Usage\n\nWhen a context is passed to `use`, it works similarly to `useContext`. While `useContext` must be called at the top level of your component, `use` can be called inside conditionals like `if` and loops like `for`. `use` is preferred over `useContext` because it is more flexible.\n\n```sp-pre-placeholder grow-[2]\nimport { use } from 'react';\n\nfunction Button() {\n\n  const theme = use(ThemeContext);\n\n  // ...\n```\n\n`use` returns the context value for the context you passed. To determine the context value, React searches the component tree and finds the closest context provider above for that particular context.\n\n## Streaming data from the server to the client\n\nData can be streamed from the server to the client by passing a Promise as a prop from a Server Component to a Client Component.\n\n```sp-pre-placeholder grow-[2]\nimport { fetchMessage } from './lib.js';\n\nimport { Message } from './message.js';\n\nexport default function App() {\n\n  const messagePromise = fetchMessage();\n\n  return (\n\n    <Suspense fallback={<p>waiting for message...</p>}>\n\n      <Message messagePromise={messagePromise} />\n\n    </Suspense>\n\n  );\n}\n```\n\nThe Client Component then takes the Promise it received as a prop and passes it to the `use` API.\n\n## Dealing with rejected Promises\n\nIn some cases a Promise passed to `use` could be rejected. You can handle rejected Promises by either:\n\n1. Displaying an error to users with an error boundary.\n2. Providing an alternative value with `Promise.catch`.\n\n## Troubleshooting\n\nYou are either calling `use` outside of a React Component or Hook function, or calling `use` in a try–catch block. If you are calling `use` inside a try–catch block, wrap your component in an error boundary, or call the Promise’s `catch` to catch the error and resolve the Promise with another value.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `use` in your component to read the value of a resource like a Promise or context.\n\n```sp-pre-placeholder grow-[2]\nimport { use } from 'react';\n\nfunction MessageComponent({ messagePromise }) {\n\n  const message = use(messagePromise);\n\n  const theme = use(ThemeContext);\n\n  // ...\n```\n\nUnlike React Hooks, `use` can be called within loops and conditional statements like `if`. Like React Hooks, the function that calls `use` must be a Component or Hook.\n\nWhen called with a Promise, the `use` API integrates with `Suspense` and error boundaries. The component calling `use` suspends while the Promise passed to `use` is pending. If the component that calls `use` is wrapped in a Suspense boundary, the fallback will be displayed. Once the Promise is resolved, the Suspense fallback is replaced by the rendered components using the data returned by the `use` API. If the Promise passed to `use` is rejected, the fallback of the nearest Error Boundary will be displayed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `resource`: this is the source of the data you want to read a value from. A resource can be a Promise or a context..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\nThe `use` API returns the value that was read from the resource like the resolved value of a Promise or context..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- The `use` API must be called inside a Component or a Hook.\n- When fetching data in a Server Component, prefer `async` and `await` over `use`. `async` and `await` pick up rendering from the point where `await` was invoked, whereas `use` re-renders the component after the data is resolved.\n- Prefer creating Promises in Server Components and passing them to Client Components over creating Promises in Client Components. Promises created in Client Components are recreated on every render. Promises passed from a Server Component to a Client Component are stable across re-renders..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nWhen a context is passed to `use`, it works similarly to `useContext`. While `useContext` must be called at the top level of your component, `use` can be called inside conditionals like `if` and loops like `for`. `use` is preferred over `useContext` because it is more flexible.\n\n```sp-pre-placeholder grow-[2]\nimport { use } from 'react';\n\nfunction Button() {\n\n  const theme = use(ThemeContext);\n\n  // ...\n```\n\n`use` returns the context value for the context you passed. To determine the context value, React searches the component tree and finds the closest context provider above for that particular context..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I streaming data from the server to the client in react-reference?\n\nAssistant: To streaming data from the server to the client in react-reference, here's what you do:\nData can be streamed from the server to the client by passing a Promise as a prop from a Server Component to a Client Component.\n\n```sp-pre-placeholder grow-[2]\nimport { fetchMessage } from './lib.js';\n\nimport { Message } from './message.js';\n\nexport default function App() {\n\n  const messagePromise = fetchMessage();\n\n  return (\n\n    <Suspense fallback={<p>waiting for message...</p>}>\n\n      <Message messagePromise={messagePromise} />\n\n    </Suspense>\n\n  );\n}\n```\n\nThe Client Component then takes the Promise it received as a prop and passes it to the `use` API..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I dealing with rejected promises in react-reference?\n\nAssistant: To dealing with rejected promises in react-reference, here's what you do:\nIn some cases a Promise passed to `use` could be rejected. You can handle rejected Promises by either:\n\n1. Displaying an error to users with an error boundary.\n2. Providing an alternative value with `Promise.catch`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\nYou are either calling `use` outside of a React Component or Hook function, or calling `use` in a try–catch block. If you are calling `use` inside a try–catch block, wrap your component in an error boundary, or call the Promise’s `catch` to catch the error and resolve the Promise with another value..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for use in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic use example**:\n\n```yaml\nconst value = use(resource);\n```\n\nThis snippet shows you how to basic use example, which is an important aspect of use.\n\n**MessageComponent example**:\n\n```yaml\nimport { use } from 'react';\n\nfunction MessageComponent({ messagePromise }) {\n  const message = use(messagePromise);\n  const theme = use(ThemeContext);\n  // ...\n}\n```\n\nThis snippet shows you how to messagecomponent example, which is an important aspect of use.\n\n**Button example**:\n\n```yaml\nimport { use } from 'react';\n\nfunction Button() {\n  const theme = use(ThemeContext);\n  // ...\n}\n```\n\nThis snippet shows you how to button example, which is an important aspect of use.\n\n**Streaming data example**:\n\n```yaml\nimport { fetchMessage } from './lib.js';\nimport { Message } from './message.js';\n\nexport default function App() {\n  const messagePromise = fetchMessage();\n  return (\n    <Suspense fallback={<p>waiting for message...</p>}>\n      <Message messagePromise={messagePromise} />\n    </Suspense>\n  );\n}\n```\n\nThis snippet shows you how to streaming data example, which is an important aspect of use.\n\n**Error handling with Error Boundary**:\n\n```yaml\nimport { ErrorBoundary } from 'react-error-boundary';\n\nexport function MessageContainer({ messagePromise }) {\n  return (\n    <ErrorBoundary fallback={<p>⚠️Something went wrong</p>}>\n      <Suspense fallback={<p>⌛Downloading message...</p>}>\n        <Message messagePromise={messagePromise} />\n      </Suspense>\n    </ErrorBoundary>\n  );\n}\n```\n\nThis snippet shows you how to error handling with error boundary, which is an important aspect of use.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using use in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\n`use` can be called within loops and conditional statements like `if`.\n\nPrefer creating Promises in Server Components and passing them to Client Components over creating Promises in Client Components.\n\nWrap your component in an Error Boundary to handle rejected Promises.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/use", "title": "use", "description": "`use` is a React API that lets you read the value of a resource like a Promise or context.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:08:03", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "language": "en", "theme-color": "#23272f", "twitter:title": "use – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react/use", "og:title": "use – React", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "use – React", "twitter:creator": "@reactjs", "title": "use – React", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "ogUrl": "https://react.dev/reference/react/use", "twitter:site": "@reactjs", "scrapeId": "806560f7-75dc-4aba-b28f-f5627005f3c0", "sourceURL": "https://react.dev/reference/react/use", "url": "https://react.dev/reference/react/use", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what createContext is in react-reference?\n\nAssistant: Sure, I'd be happy to explain createContext in react-reference.\n\n# createContext\n\n`createContext` lets you create a context that components can provide or read.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `createContext(defaultValue)`\nCall `createContext` outside of any components to create a context.\n\n```sp-pre-placeholder grow-[2]\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n```\n\n[See more examples below.](https://react.dev/reference/react/createContext#usage)\n\n#### Parameters\n- `defaultValue`: The value that you want the context to have when there is no matching context provider in the tree above the component that reads context. If you don’t have any meaningful default value, specify `null`. The default value is meant as a “last resort” fallback. It is static and never changes over time.\n\n#### Returns\n`createContext` returns a context object.\n\n**The context object itself does not hold any information.** It represents _which_ context other components read or provide. Typically, you will use [`SomeContext.Provider`](https://react.dev/reference/react/createContext#provider) in components above to specify the context value, and call [`useContext(SomeContext)`](https://react.dev/reference/react/useContext) in components below to read it. The context object has a few properties:\n\n- `SomeContext.Provider` lets you provide the context value to components.\n- `SomeContext.Consumer` is an alternative and rarely used way to read the context value.\n\n## SomeContext.Provider\n\nWrap your components into a context provider to specify the value of this context for all components inside:\n\n```sp-pre-placeholder grow-[2]\nfunction App() {\n\n  const [theme, setTheme] = useState('light');\n\n  // ...\n\n  return (\n\n    <ThemeContext.Provider value={theme}>\n\n      <Page />\n\n    </ThemeContext.Provider>\n\n  );\n}\n```\n\n#### Props\n- `value`: The value that you want to pass to all the components reading this context inside this provider, no matter how deep. The context value can be of any type. A component calling [`useContext(SomeContext)`](https://react.dev/reference/react/useContext) inside of the provider receives the `value` of the innermost corresponding context provider above it.\n\n## SomeContext.Consumer\n\nBefore `useContext` existed, there was an older way to read context:\n\n```sp-pre-placeholder grow-[2]\nfunction Button() {\n\n  // 🟡 Legacy way (not recommended)\n\n  return (\n\n    <ThemeContext.Consumer>\n\n      {theme => (\n\n        <button className={theme} />\n\n      )}\n\n    </ThemeContext.Consumer>\n\n  );\n}\n```\n\nAlthough this older way still works, **newly written code should read context with [`useContext()`](https://react.dev/reference/react/useContext) instead:**\n\n```sp-pre-placeholder grow-[2]\nfunction Button() {\n\n  // ✅ Recommended way\n\n  const theme = useContext(ThemeContext);\n\n  return <button className={theme} />;\n}\n```\n\n#### Props\n- `children`: A function. React will call the function you pass with the current context value determined by the same algorithm as [`useContext()`](https://react.dev/reference/react/useContext) does, and render the result you return from this function. React will also re-run this function and update the UI whenever the context from the parent components changes.\n\n## Usage\n\n### Creating context\nContext lets components [pass information deep down](https://react.dev/learn/passing-data-deeply-with-context) without explicitly passing props.\n\nCall `createContext` outside any components to create one or more contexts.\n\n```sp-pre-placeholder grow-[2]\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n\nconst AuthContext = createContext(null);\n```\n\n`createContext` returns a context object. Components can read context by passing it to [`useContext()`](https://react.dev/reference/react/useContext):\n\n```sp-pre-placeholder grow-[2]\nfunction Button() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n}\n\nfunction Profile() {\n\n  const currentUser = useContext(AuthContext);\n\n  // ...\n}\n```\n\nBy default, the values they receive will be the default values you have specified when creating the contexts. However, by itself this isn’t useful because the default values never change.\n\nContext is useful because you can **provide other, dynamic values from your components:**\n\n```sp-pre-placeholder grow-[2]\nfunction App() {\n\n  const [theme, setTheme] = useState('dark');\n\n  const [currentUser, setCurrentUser] = useState({ name: 'Taylor' });\n\n  // ...\n\n  return (\n\n    <ThemeContext.Provider value={theme}>\n\n      <AuthContext.Provider value={currentUser}>\n\n        <Page />\n\n      </AuthContext.Provider>\n\n    </ThemeContext.Provider>\n\n  );\n}\n```\n\nNow the `Page` component and any components inside it, no matter how deep, will “see” the passed context values. If the passed context values change, React will re-render the components reading the context as well.\n\n## Importing and exporting context from a file\n\nOften, components in different files will need access to the same context. This is why it’s common to declare contexts in a separate file. Then you can use the [`export` statement](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) to make context available for other files:\n\n```sp-pre-placeholder grow-[2]\n// Contexts.js\n\nimport { createContext } from 'react';\n\nexport const ThemeContext = createContext('light');\n\nexport const AuthContext = createContext(null);\n```\n\nComponents declared in other files can then use the [`import`](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/import) statement to read or provide this context:\n\n```sp-pre-placeholder grow-[2]\n// Button.js\n\nimport { ThemeContext } from './Contexts.js';\n\nfunction Button() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n}\n```\n\n```sp-pre-placeholder grow-[2]\n// App.js\n\nimport { ThemeContext, AuthContext } from './Contexts.js';\n\nfunction App() {\n\n  // ...\n\n  return (\n\n    <ThemeContext.Provider value={theme}>\n\n      <AuthContext.Provider value={currentUser}>\n\n        <Page />\n\n      </AuthContext.Provider>\n\n    </ThemeContext.Provider>\n\n  );\n}\n```\n\nThis works similar to [importing and exporting components.](https://react.dev/learn/importing-and-exporting-components)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/createContext", "title": "createContext", "description": "`createContext` lets you create a context that components can provide or read.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:43", "type": "overview", "page_metadata": {"og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "title": "createContext – React", "language": "en", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "twitter:title": "createContext – React", "ogUrl": "https://react.dev/reference/react/createContext", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "createContext – React", "ogImage": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createContext", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "createContext – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "scrapeId": "e6e273ea-b9a7-402b-8877-69fd550fabae", "sourceURL": "https://react.dev/reference/react/createContext", "url": "https://react.dev/reference/react/createContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `createContext(defaultValue)`\nCall `createContext` outside of any components to create a context.\n\n```sp-pre-placeholder grow-[2]\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n```\n\n[See more examples below.](https://react.dev/reference/react/createContext#usage)\n\n#### Parameters\n- `defaultValue`: The value that you want the context to have when there is no matching context provider in the tree above the component that reads context. If you don’t have any meaningful default value, specify `null`. The default value is meant as a “last resort” fallback. It is static and never changes over time.\n\n#### Returns\n`createContext` returns a context object.\n\n**The context object itself does not hold any information.** It represents _which_ context other components read or provide. Typically, you will use [`SomeContext.Provider`](https://react.dev/reference/react/createContext#provider) in components above to specify the context value, and call [`useContext(SomeContext)`](https://react.dev/reference/react/useContext) in components below to read it. The context object has a few properties:\n\n- `SomeContext.Provider` lets you provide the context value to components.\n- `SomeContext.Consumer` is an alternative and rarely used way to read the context value..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createContext", "title": "createContext", "description": "`createContext` lets you create a context that components can provide or read.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:43", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "title": "createContext – React", "language": "en", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "twitter:title": "createContext – React", "ogUrl": "https://react.dev/reference/react/createContext", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "createContext – React", "ogImage": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createContext", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "createContext – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "scrapeId": "e6e273ea-b9a7-402b-8877-69fd550fabae", "sourceURL": "https://react.dev/reference/react/createContext", "url": "https://react.dev/reference/react/createContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I somecontext.provider in react-reference?\n\nAssistant: To somecontext.provider in react-reference, here's what you do:\nWrap your components into a context provider to specify the value of this context for all components inside:\n\n```sp-pre-placeholder grow-[2]\nfunction App() {\n\n  const [theme, setTheme] = useState('light');\n\n  // ...\n\n  return (\n\n    <ThemeContext.Provider value={theme}>\n\n      <Page />\n\n    </ThemeContext.Provider>\n\n  );\n}\n```\n\n#### Props\n- `value`: The value that you want to pass to all the components reading this context inside this provider, no matter how deep. The context value can be of any type. A component calling [`useContext(SomeContext)`](https://react.dev/reference/react/useContext) inside of the provider receives the `value` of the innermost corresponding context provider above it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createContext", "title": "createContext", "description": "`createContext` lets you create a context that components can provide or read.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:43", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "title": "createContext – React", "language": "en", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "twitter:title": "createContext – React", "ogUrl": "https://react.dev/reference/react/createContext", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "createContext – React", "ogImage": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createContext", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "createContext – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "scrapeId": "e6e273ea-b9a7-402b-8877-69fd550fabae", "sourceURL": "https://react.dev/reference/react/createContext", "url": "https://react.dev/reference/react/createContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I somecontext.consumer in react-reference?\n\nAssistant: To somecontext.consumer in react-reference, here's what you do:\nBefore `useContext` existed, there was an older way to read context:\n\n```sp-pre-placeholder grow-[2]\nfunction Button() {\n\n  // 🟡 Legacy way (not recommended)\n\n  return (\n\n    <ThemeContext.Consumer>\n\n      {theme => (\n\n        <button className={theme} />\n\n      )}\n\n    </ThemeContext.Consumer>\n\n  );\n}\n```\n\nAlthough this older way still works, **newly written code should read context with [`useContext()`](https://react.dev/reference/react/useContext) instead:**\n\n```sp-pre-placeholder grow-[2]\nfunction Button() {\n\n  // ✅ Recommended way\n\n  const theme = useContext(ThemeContext);\n\n  return <button className={theme} />;\n}\n```\n\n#### Props\n- `children`: A function. React will call the function you pass with the current context value determined by the same algorithm as [`useContext()`](https://react.dev/reference/react/useContext) does, and render the result you return from this function. React will also re-run this function and update the UI whenever the context from the parent components changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createContext", "title": "createContext", "description": "`createContext` lets you create a context that components can provide or read.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:43", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "title": "createContext – React", "language": "en", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "twitter:title": "createContext – React", "ogUrl": "https://react.dev/reference/react/createContext", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "createContext – React", "ogImage": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createContext", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "createContext – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "scrapeId": "e6e273ea-b9a7-402b-8877-69fd550fabae", "sourceURL": "https://react.dev/reference/react/createContext", "url": "https://react.dev/reference/react/createContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Creating context\nContext lets components [pass information deep down](https://react.dev/learn/passing-data-deeply-with-context) without explicitly passing props.\n\nCall `createContext` outside any components to create one or more contexts.\n\n```sp-pre-placeholder grow-[2]\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n\nconst AuthContext = createContext(null);\n```\n\n`createContext` returns a context object. Components can read context by passing it to [`useContext()`](https://react.dev/reference/react/useContext):\n\n```sp-pre-placeholder grow-[2]\nfunction Button() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n}\n\nfunction Profile() {\n\n  const currentUser = useContext(AuthContext);\n\n  // ...\n}\n```\n\nBy default, the values they receive will be the default values you have specified when creating the contexts. However, by itself this isn’t useful because the default values never change.\n\nContext is useful because you can **provide other, dynamic values from your components:**\n\n```sp-pre-placeholder grow-[2]\nfunction App() {\n\n  const [theme, setTheme] = useState('dark');\n\n  const [currentUser, setCurrentUser] = useState({ name: 'Taylor' });\n\n  // ...\n\n  return (\n\n    <ThemeContext.Provider value={theme}>\n\n      <AuthContext.Provider value={currentUser}>\n\n        <Page />\n\n      </AuthContext.Provider>\n\n    </ThemeContext.Provider>\n\n  );\n}\n```\n\nNow the `Page` component and any components inside it, no matter how deep, will “see” the passed context values. If the passed context values change, React will re-render the components reading the context as well..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createContext", "title": "createContext", "description": "`createContext` lets you create a context that components can provide or read.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:43", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "title": "createContext – React", "language": "en", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "twitter:title": "createContext – React", "ogUrl": "https://react.dev/reference/react/createContext", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "createContext – React", "ogImage": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createContext", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "createContext – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "scrapeId": "e6e273ea-b9a7-402b-8877-69fd550fabae", "sourceURL": "https://react.dev/reference/react/createContext", "url": "https://react.dev/reference/react/createContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I importing and exporting context from a file in react-reference?\n\nAssistant: To importing and exporting context from a file in react-reference, here's what you do:\nOften, components in different files will need access to the same context. This is why it’s common to declare contexts in a separate file. Then you can use the [`export` statement](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) to make context available for other files:\n\n```sp-pre-placeholder grow-[2]\n// Contexts.js\n\nimport { createContext } from 'react';\n\nexport const ThemeContext = createContext('light');\n\nexport const AuthContext = createContext(null);\n```\n\nComponents declared in other files can then use the [`import`](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/import) statement to read or provide this context:\n\n```sp-pre-placeholder grow-[2]\n// Button.js\n\nimport { ThemeContext } from './Contexts.js';\n\nfunction Button() {\n\n  const theme = useContext(ThemeContext);\n\n  // ...\n}\n```\n\n```sp-pre-placeholder grow-[2]\n// App.js\n\nimport { ThemeContext, AuthContext } from './Contexts.js';\n\nfunction App() {\n\n  // ...\n\n  return (\n\n    <ThemeContext.Provider value={theme}>\n\n      <AuthContext.Provider value={currentUser}>\n\n        <Page />\n\n      </AuthContext.Provider>\n\n    </ThemeContext.Provider>\n\n  );\n}\n```\n\nThis works similar to [importing and exporting components.](https://react.dev/learn/importing-and-exporting-components).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createContext", "title": "createContext", "description": "`createContext` lets you create a context that components can provide or read.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:43", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "title": "createContext – React", "language": "en", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "twitter:title": "createContext – React", "ogUrl": "https://react.dev/reference/react/createContext", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "createContext – React", "ogImage": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createContext", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "createContext – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "scrapeId": "e6e273ea-b9a7-402b-8877-69fd550fabae", "sourceURL": "https://react.dev/reference/react/createContext", "url": "https://react.dev/reference/react/createContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for createContext in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating a context**:\n\n```yaml\nconst SomeContext = createContext(defaultValue)\n```\n\nThis snippet shows you how to creating a context, which is an important aspect of createcontext.\n\n**Using a context provider**:\n\n```yaml\n<ThemeContext.Provider value={theme}>\\n  <Page />\\n</ThemeContext.Provider>\n```\n\nThis snippet shows you how to using a context provider, which is an important aspect of createcontext.\n\n**Using a context consumer (legacy)**:\n\n```yaml\n<ThemeContext.Consumer>\\n  {theme => (\\n    <button className={theme} />\\n  )} \\n</ThemeContext.Consumer>\n```\n\nThis snippet shows you how to using a context consumer (legacy), which is an important aspect of createcontext.\n\n**Using a context consumer (recommended)**:\n\n```yaml\nconst theme = useContext(ThemeContext);\\nreturn <button className={theme} />;\n```\n\nThis snippet shows you how to using a context consumer (recommended), which is an important aspect of createcontext.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/createContext", "title": "createContext", "description": "`createContext` lets you create a context that components can provide or read.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:43", "type": "code_examples", "page_metadata": {"og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "title": "createContext – React", "language": "en", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "twitter:title": "createContext – React", "ogUrl": "https://react.dev/reference/react/createContext", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "createContext – React", "ogImage": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createContext", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "createContext – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "scrapeId": "e6e273ea-b9a7-402b-8877-69fd550fabae", "sourceURL": "https://react.dev/reference/react/createContext", "url": "https://react.dev/reference/react/createContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using createContext in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCall `createContext` outside of any components to create a context.\n\nUse `SomeContext.Provider` to provide the context value to components.\n\nPrefer using `useContext()` over `SomeContext.Consumer` for reading context values.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/createContext", "title": "createContext", "description": "`createContext` lets you create a context that components can provide or read.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:08:43", "type": "best_practices", "page_metadata": {"og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "og:type": "website", "title": "createContext – React", "language": "en", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "twitter:title": "createContext – React", "ogUrl": "https://react.dev/reference/react/createContext", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogTitle": "createContext – React", "ogImage": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createContext", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "createContext – React", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "scrapeId": "e6e273ea-b9a7-402b-8877-69fd550fabae", "sourceURL": "https://react.dev/reference/react/createContext", "url": "https://react.dev/reference/react/createContext", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useLayoutEffect is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useLayoutEffect in react-reference.\n\n# useLayoutEffect\n\nA hook that fires before the browser repaints the screen, allowing for layout measurements.Here's a quick rundown of what this is about:\n\n## Pitfall\n\n`useLayoutEffect` can hurt performance. Prefer [`useEffect`](https://react.dev/reference/react/useEffect) when possible.\n\n`useLayoutEffect` is a version of [`useEffect`](https://react.dev/reference/react/useEffect) that fires before the browser repaints the screen.\n\n## Reference\n\nCall `useLayoutEffect` to perform the layout measurements before the browser repaints the screen:\n\n```sp-pre-placeholder grow-[2]\nuseLayoutEffect(setup, dependencies?)\n```\n\n- [Reference](https://react.dev/reference/react/useLayoutEffect#reference)\n  - [`useLayoutEffect(setup, dependencies?)`](https://react.dev/reference/react/useLayoutEffect#useinsertioneffect)\n- [Usage](https://react.dev/reference/react/useLayoutEffect#usage)\n  - [Measuring layout before the browser repaints the screen](https://react.dev/reference/react/useLayoutEffect#measuring-layout-before-the-browser-repaints-the-screen)\n- [Troubleshooting](https://react.dev/reference/react/useLayoutEffect#troubleshooting)\n  - [I’m getting an error: “ `useLayoutEffect` does nothing on the server”](https://react.dev/reference/react/useLayoutEffect#im-getting-an-error-uselayouteffect-does-nothing-on-the-server)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useLayoutEffect", "title": "useLayoutEffect", "description": "A hook that fires before the browser repaints the screen, allowing for layout measurements.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:03", "type": "overview", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:title": "useLayoutEffect – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useLayoutEffect", "viewport": "width=device-width, initial-scale=1", "og:title": "useLayoutEffect – React", "ogUrl": "https://react.dev/reference/react/useLayoutEffect", "og:type": "website", "twitter:creator": "@reactjs", "title": "useLayoutEffect – React", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "useLayoutEffect – React", "scrapeId": "96a1d8dd-e0fb-401a-baf0-ec04fb05d5b6", "sourceURL": "https://react.dev/reference/react/useLayoutEffect", "url": "https://react.dev/reference/react/useLayoutEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\n`useLayoutEffect` can hurt performance. Prefer [`useEffect`](https://react.dev/reference/react/useEffect) when possible.\n\n`useLayoutEffect` is a version of [`useEffect`](https://react.dev/reference/react/useEffect) that fires before the browser repaints the screen..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useLayoutEffect", "title": "useLayoutEffect", "description": "A hook that fires before the browser repaints the screen, allowing for layout measurements.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:03", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:title": "useLayoutEffect – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useLayoutEffect", "viewport": "width=device-width, initial-scale=1", "og:title": "useLayoutEffect – React", "ogUrl": "https://react.dev/reference/react/useLayoutEffect", "og:type": "website", "twitter:creator": "@reactjs", "title": "useLayoutEffect – React", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "useLayoutEffect – React", "scrapeId": "96a1d8dd-e0fb-401a-baf0-ec04fb05d5b6", "sourceURL": "https://react.dev/reference/react/useLayoutEffect", "url": "https://react.dev/reference/react/useLayoutEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `useLayoutEffect` to perform the layout measurements before the browser repaints the screen:\n\n```sp-pre-placeholder grow-[2]\nuseLayoutEffect(setup, dependencies?)\n```\n\n- [Reference](https://react.dev/reference/react/useLayoutEffect#reference)\n  - [`useLayoutEffect(setup, dependencies?)`](https://react.dev/reference/react/useLayoutEffect#useinsertioneffect)\n- [Usage](https://react.dev/reference/react/useLayoutEffect#usage)\n  - [Measuring layout before the browser repaints the screen](https://react.dev/reference/react/useLayoutEffect#measuring-layout-before-the-browser-repaints-the-screen)\n- [Troubleshooting](https://react.dev/reference/react/useLayoutEffect#troubleshooting)\n  - [I’m getting an error: “ `useLayoutEffect` does nothing on the server”](https://react.dev/reference/react/useLayoutEffect#im-getting-an-error-uselayouteffect-does-nothing-on-the-server).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useLayoutEffect", "title": "useLayoutEffect", "description": "A hook that fires before the browser repaints the screen, allowing for layout measurements.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:03", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:title": "useLayoutEffect – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useLayoutEffect", "viewport": "width=device-width, initial-scale=1", "og:title": "useLayoutEffect – React", "ogUrl": "https://react.dev/reference/react/useLayoutEffect", "og:type": "website", "twitter:creator": "@reactjs", "title": "useLayoutEffect – React", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "useLayoutEffect – React", "scrapeId": "96a1d8dd-e0fb-401a-baf0-ec04fb05d5b6", "sourceURL": "https://react.dev/reference/react/useLayoutEffect", "url": "https://react.dev/reference/react/useLayoutEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useLayoutEffect in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useLayoutEffect Example**:\n\n```yaml\nimport { useState, useRef, useLayoutEffect } from 'react';\n\nfunction Tooltip() {\n\n  const ref = useRef(null);\n\n  const [tooltipHeight, setTooltipHeight] = useState(0);\n\n  useLayoutEffect(() => {\n\n    const { height } = ref.current.getBoundingClientRect();\n\n    setTooltipHeight(height);\n\n  }, []);\n\n  // ...\n}\n```\n\nThis snippet shows you how to basic uselayouteffect example, which is an important aspect of uselayouteffect.\n\n**Tooltip Component Example**:\n\n```yaml\nimport { useRef, useLayoutEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport TooltipContainer from './TooltipContainer.js';\n\nexport default function Tooltip({ children, targetRect }) {\n  const ref = useRef(null);\n  const [tooltipHeight, setTooltipHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { height } = ref.current.getBoundingClientRect();\n    setTooltipHeight(height);\n    console.log('Measured tooltip height: ' + height);\n  }, []);\n\n  let tooltipX = 0;\n  let tooltipY = 0;\n  if (targetRect !== null) {\n    tooltipX = targetRect.left;\n    tooltipY = targetRect.top - tooltipHeight;\n    if (tooltipY < 0) {\n      // It doesn't fit above, so place below.\n      tooltipY = targetRect.bottom;\n    }\n  }\n\n  return createPortal(\n    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n      {children}\n    </TooltipContainer>,\n    document.body\n  );\n}\n```\n\nThis snippet shows you how to tooltip component example, which is an important aspect of uselayouteffect.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useLayoutEffect", "title": "useLayoutEffect", "description": "A hook that fires before the browser repaints the screen, allowing for layout measurements.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:03", "type": "code_examples", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:title": "useLayoutEffect – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useLayoutEffect", "viewport": "width=device-width, initial-scale=1", "og:title": "useLayoutEffect – React", "ogUrl": "https://react.dev/reference/react/useLayoutEffect", "og:type": "website", "twitter:creator": "@reactjs", "title": "useLayoutEffect – React", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "useLayoutEffect – React", "scrapeId": "96a1d8dd-e0fb-401a-baf0-ec04fb05d5b6", "sourceURL": "https://react.dev/reference/react/useLayoutEffect", "url": "https://react.dev/reference/react/useLayoutEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useLayoutEffect in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nPrefer `useEffect` over `useLayoutEffect` when possible to avoid performance issues.\n\nEnsure that `useLayoutEffect` is called at the top level of your component or custom hooks, not inside loops or conditions.\n\nBe cautious with dependencies that are objects or functions defined inside the component, as they may cause unnecessary re-renders.\n\nEffects only run on the client and do not run during server rendering.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useLayoutEffect", "title": "useLayoutEffect", "description": "A hook that fires before the browser repaints the screen, allowing for layout measurements.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:09:03", "type": "best_practices", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "twitter:title": "useLayoutEffect – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "language": "en", "og:url": "https://react.dev/reference/react/useLayoutEffect", "viewport": "width=device-width, initial-scale=1", "og:title": "useLayoutEffect – React", "ogUrl": "https://react.dev/reference/react/useLayoutEffect", "og:type": "website", "twitter:creator": "@reactjs", "title": "useLayoutEffect – React", "twitter:site": "@reactjs", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogTitle": "useLayoutEffect – React", "scrapeId": "96a1d8dd-e0fb-401a-baf0-ec04fb05d5b6", "sourceURL": "https://react.dev/reference/react/useLayoutEffect", "url": "https://react.dev/reference/react/useLayoutEffect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what experimental_taintObjectReference is in react-reference?\n\nAssistant: Sure, I'd be happy to explain experimental_taintObjectReference in react-reference.\n\n# experimental_taintObjectReference\n\nThis API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.Here's a quick rundown of what this is about:\n\n## Under Construction\n\nThis API is experimental and is not available in a stable version of React yet.\n\nYou can try it by upgrading React packages to the most recent experimental version:\n\n- `react@experimental`\n- `react-dom@experimental`\n- `eslint-plugin-react-hooks@experimental`\n\nExperimental versions of React may contain bugs. Don’t use them in production.\n\nThis API is only available inside React Server Components.\n\n`taintObjectReference` lets you prevent a specific object instance from being passed to a Client Component like a `user` object.\n\n## Reference\n\nCall `taintObjectReference` with an object to register it with React as something that should not be allowed to be passed to the Client as is:\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintObjectReference} from 'react';\n\nexperimental_taintObjectReference(\n  'Do not pass ALL environment variables to the client.',\n  process.env\n);\n```\n\n#### Parameters\n- `message`: The message you want to display if the object gets passed to a Client Component. This message will be displayed as a part of the Error that will be thrown if the object gets passed to a Client Component.\n- `object`: The object to be tainted. Functions and class instances can be passed to `taintObjectReference` as `object`. Functions and classes are already blocked from being passed to Client Components but the React’s default error message will be replaced by what you defined in `message`. When a specific instance of a Typed Array is passed to `taintObjectReference` as `object`, any other copies of the Typed Array will not be tainted.\n\n## Caveats\n\nRecreating or cloning a tainted object creates a new untainted object which may contain sensitive data. For example, if you have a tainted `user` object, `const userInfo = {name: user.name, ssn: user.ssn}` or `{...user}` will create new objects which are not tainted. `taintObjectReference` only protects against simple mistakes when the object is passed through to a Client Component unchanged.\n\n## Pitfall\n\nDo not rely on just tainting for security. Tainting an object doesn’t prevent leaking of every possible derived value. For example, the clone of a tainted object will create a new untainted object. Using data from a tainted object (e.g. `{secret: taintedObj.secret}`) will create a new value or object that is not tainted. Tainting is a layer of protection; a secure app will have multiple layers of protection, well designed APIs, and isolation patterns.\n\n## Usage\n\nA Client Component should never accept objects that carry sensitive data. Ideally, the data fetching functions should not expose data that the current user should not have access to. Sometimes mistakes happen during refactoring. To protect against these mistakes happening down the line we can “taint” the user object in our data API.\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintObjectReference} from 'react';\n\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintObjectReference(\n    'Do not pass the entire user object to the client. ' +\n      'Instead, pick off the specific properties you need for this use case.',\n    user,\n  );\n  return user;\n}\n```\n\nNow whenever anyone tries to pass this object to a Client Component, an error will be thrown with the passed in error message instead.\n\n## Protecting against leaks in data fetching\n\nIf you’re running a Server Components environment that has access to sensitive data, you have to be careful not to pass objects straight through:\n\n```sp-pre-placeholder grow-[2]\n// api.js\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  return user;\n}\n```\n\n```sp-pre-placeholder grow-[2]\nimport { getUser } from 'api.js';\nimport { InfoCard } from 'components.js';\n\nexport async function Profile(props) {\n  const user = await getUser(props.userId);\n  // DO NOT DO THIS\n  return <InfoCard user={user} />;\n}\n```\n\n```sp-pre-placeholder grow-[2]\n// components.js\n\"use client\";\nexport async function InfoCard({ user }) {\n  return <div>{user.name}</div>;\n}\n```\n\nIdeally, the `getUser` should not expose data that the current user should not have access to. To prevent passing the `user` object to a Client Component down the line we can “taint” the user object:\n\n```sp-pre-placeholder grow-[2]\n// api.js\nimport {experimental_taintObjectReference} from 'react';\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintObjectReference(\n    'Do not pass the entire user object to the client. ' +\n      'Instead, pick off the specific properties you need for this use case.',\n    user,\n  );\n  return user;\n}\n```\n\nNow if anyone tries to pass the `user` object to a Client Component, an error will be thrown with the passed in error message.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintObjectReference", "title": "experimental_taintObjectReference", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:09:27", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:title": "experimental_taintObjectReference – React", "og:url": "https://react.dev/reference/react/experimental_taintObjectReference", "fb:app_id": "623268441017527", "ogTitle": "experimental_taintObjectReference – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:title": "experimental_taintObjectReference – React", "twitter:description": "The library for web and native user interfaces", "title": "experimental_taintObjectReference – React", "ogUrl": "https://react.dev/reference/react/experimental_taintObjectReference", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "scrapeId": "a1c72686-4438-444c-875e-fd98e010ca4e", "sourceURL": "https://react.dev/reference/react/experimental_taintObjectReference", "url": "https://react.dev/reference/react/experimental_taintObjectReference", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I under construction in react-reference?\n\nAssistant: To under construction in react-reference, here's what you do:\nThis API is experimental and is not available in a stable version of React yet.\n\nYou can try it by upgrading React packages to the most recent experimental version:\n\n- `react@experimental`\n- `react-dom@experimental`\n- `eslint-plugin-react-hooks@experimental`\n\nExperimental versions of React may contain bugs. Don’t use them in production.\n\nThis API is only available inside React Server Components.\n\n`taintObjectReference` lets you prevent a specific object instance from being passed to a Client Component like a `user` object..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintObjectReference", "title": "experimental_taintObjectReference", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:09:27", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:title": "experimental_taintObjectReference – React", "og:url": "https://react.dev/reference/react/experimental_taintObjectReference", "fb:app_id": "623268441017527", "ogTitle": "experimental_taintObjectReference – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:title": "experimental_taintObjectReference – React", "twitter:description": "The library for web and native user interfaces", "title": "experimental_taintObjectReference – React", "ogUrl": "https://react.dev/reference/react/experimental_taintObjectReference", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "scrapeId": "a1c72686-4438-444c-875e-fd98e010ca4e", "sourceURL": "https://react.dev/reference/react/experimental_taintObjectReference", "url": "https://react.dev/reference/react/experimental_taintObjectReference", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `taintObjectReference` with an object to register it with React as something that should not be allowed to be passed to the Client as is:\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintObjectReference} from 'react';\n\nexperimental_taintObjectReference(\n  'Do not pass ALL environment variables to the client.',\n  process.env\n);\n```\n\n#### Parameters\n- `message`: The message you want to display if the object gets passed to a Client Component. This message will be displayed as a part of the Error that will be thrown if the object gets passed to a Client Component.\n- `object`: The object to be tainted. Functions and class instances can be passed to `taintObjectReference` as `object`. Functions and classes are already blocked from being passed to Client Components but the React’s default error message will be replaced by what you defined in `message`. When a specific instance of a Typed Array is passed to `taintObjectReference` as `object`, any other copies of the Typed Array will not be tainted..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintObjectReference", "title": "experimental_taintObjectReference", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:09:27", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:title": "experimental_taintObjectReference – React", "og:url": "https://react.dev/reference/react/experimental_taintObjectReference", "fb:app_id": "623268441017527", "ogTitle": "experimental_taintObjectReference – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:title": "experimental_taintObjectReference – React", "twitter:description": "The library for web and native user interfaces", "title": "experimental_taintObjectReference – React", "ogUrl": "https://react.dev/reference/react/experimental_taintObjectReference", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "scrapeId": "a1c72686-4438-444c-875e-fd98e010ca4e", "sourceURL": "https://react.dev/reference/react/experimental_taintObjectReference", "url": "https://react.dev/reference/react/experimental_taintObjectReference", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\nRecreating or cloning a tainted object creates a new untainted object which may contain sensitive data. For example, if you have a tainted `user` object, `const userInfo = {name: user.name, ssn: user.ssn}` or `{...user}` will create new objects which are not tainted. `taintObjectReference` only protects against simple mistakes when the object is passed through to a Client Component unchanged..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintObjectReference", "title": "experimental_taintObjectReference", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:09:27", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:title": "experimental_taintObjectReference – React", "og:url": "https://react.dev/reference/react/experimental_taintObjectReference", "fb:app_id": "623268441017527", "ogTitle": "experimental_taintObjectReference – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:title": "experimental_taintObjectReference – React", "twitter:description": "The library for web and native user interfaces", "title": "experimental_taintObjectReference – React", "ogUrl": "https://react.dev/reference/react/experimental_taintObjectReference", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "scrapeId": "a1c72686-4438-444c-875e-fd98e010ca4e", "sourceURL": "https://react.dev/reference/react/experimental_taintObjectReference", "url": "https://react.dev/reference/react/experimental_taintObjectReference", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\nDo not rely on just tainting for security. Tainting an object doesn’t prevent leaking of every possible derived value. For example, the clone of a tainted object will create a new untainted object. Using data from a tainted object (e.g. `{secret: taintedObj.secret}`) will create a new value or object that is not tainted. Tainting is a layer of protection; a secure app will have multiple layers of protection, well designed APIs, and isolation patterns..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintObjectReference", "title": "experimental_taintObjectReference", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:09:27", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:title": "experimental_taintObjectReference – React", "og:url": "https://react.dev/reference/react/experimental_taintObjectReference", "fb:app_id": "623268441017527", "ogTitle": "experimental_taintObjectReference – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:title": "experimental_taintObjectReference – React", "twitter:description": "The library for web and native user interfaces", "title": "experimental_taintObjectReference – React", "ogUrl": "https://react.dev/reference/react/experimental_taintObjectReference", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "scrapeId": "a1c72686-4438-444c-875e-fd98e010ca4e", "sourceURL": "https://react.dev/reference/react/experimental_taintObjectReference", "url": "https://react.dev/reference/react/experimental_taintObjectReference", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nA Client Component should never accept objects that carry sensitive data. Ideally, the data fetching functions should not expose data that the current user should not have access to. Sometimes mistakes happen during refactoring. To protect against these mistakes happening down the line we can “taint” the user object in our data API.\n\n```sp-pre-placeholder grow-[2]\nimport {experimental_taintObjectReference} from 'react';\n\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintObjectReference(\n    'Do not pass the entire user object to the client. ' +\n      'Instead, pick off the specific properties you need for this use case.',\n    user,\n  );\n  return user;\n}\n```\n\nNow whenever anyone tries to pass this object to a Client Component, an error will be thrown with the passed in error message instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintObjectReference", "title": "experimental_taintObjectReference", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:09:27", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:title": "experimental_taintObjectReference – React", "og:url": "https://react.dev/reference/react/experimental_taintObjectReference", "fb:app_id": "623268441017527", "ogTitle": "experimental_taintObjectReference – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:title": "experimental_taintObjectReference – React", "twitter:description": "The library for web and native user interfaces", "title": "experimental_taintObjectReference – React", "ogUrl": "https://react.dev/reference/react/experimental_taintObjectReference", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "scrapeId": "a1c72686-4438-444c-875e-fd98e010ca4e", "sourceURL": "https://react.dev/reference/react/experimental_taintObjectReference", "url": "https://react.dev/reference/react/experimental_taintObjectReference", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I protecting against leaks in data fetching in react-reference?\n\nAssistant: To protecting against leaks in data fetching in react-reference, here's what you do:\nIf you’re running a Server Components environment that has access to sensitive data, you have to be careful not to pass objects straight through:\n\n```sp-pre-placeholder grow-[2]\n// api.js\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  return user;\n}\n```\n\n```sp-pre-placeholder grow-[2]\nimport { getUser } from 'api.js';\nimport { InfoCard } from 'components.js';\n\nexport async function Profile(props) {\n  const user = await getUser(props.userId);\n  // DO NOT DO THIS\n  return <InfoCard user={user} />;\n}\n```\n\n```sp-pre-placeholder grow-[2]\n// components.js\n\"use client\";\nexport async function InfoCard({ user }) {\n  return <div>{user.name}</div>;\n}\n```\n\nIdeally, the `getUser` should not expose data that the current user should not have access to. To prevent passing the `user` object to a Client Component down the line we can “taint” the user object:\n\n```sp-pre-placeholder grow-[2]\n// api.js\nimport {experimental_taintObjectReference} from 'react';\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintObjectReference(\n    'Do not pass the entire user object to the client. ' +\n      'Instead, pick off the specific properties you need for this use case.',\n    user,\n  );\n  return user;\n}\n```\n\nNow if anyone tries to pass the `user` object to a Client Component, an error will be thrown with the passed in error message..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintObjectReference", "title": "experimental_taintObjectReference", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:09:27", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:title": "experimental_taintObjectReference – React", "og:url": "https://react.dev/reference/react/experimental_taintObjectReference", "fb:app_id": "623268441017527", "ogTitle": "experimental_taintObjectReference – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:title": "experimental_taintObjectReference – React", "twitter:description": "The library for web and native user interfaces", "title": "experimental_taintObjectReference – React", "ogUrl": "https://react.dev/reference/react/experimental_taintObjectReference", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "scrapeId": "a1c72686-4438-444c-875e-fd98e010ca4e", "sourceURL": "https://react.dev/reference/react/experimental_taintObjectReference", "url": "https://react.dev/reference/react/experimental_taintObjectReference", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for experimental_taintObjectReference in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Tainting an Object Reference**:\n\n```yaml\nimport {experimental_taintObjectReference} from 'react';\n\nexperimental_taintObjectReference(\n  'Do not pass ALL environment variables to the client.',\n  process.env\n);\n```\n\nThis snippet shows you how to tainting an object reference, which is an important aspect of experimental_taintobjectreference.\n\n**Tainting User Object**:\n\n```yaml\nimport {experimental_taintObjectReference} from 'react';\n\nexport async function getUser(id) {\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\n  experimental_taintObjectReference(\n    'Do not pass the entire user object to the client. ' +\n      'Instead, pick off the specific properties you need for this use case.',\n    user,\n  );\n  return user;\n}\n```\n\nThis snippet shows you how to tainting user object, which is an important aspect of experimental_taintobjectreference.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintObjectReference", "title": "experimental_taintObjectReference", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:09:27", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:title": "experimental_taintObjectReference – React", "og:url": "https://react.dev/reference/react/experimental_taintObjectReference", "fb:app_id": "623268441017527", "ogTitle": "experimental_taintObjectReference – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:title": "experimental_taintObjectReference – React", "twitter:description": "The library for web and native user interfaces", "title": "experimental_taintObjectReference – React", "ogUrl": "https://react.dev/reference/react/experimental_taintObjectReference", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "scrapeId": "a1c72686-4438-444c-875e-fd98e010ca4e", "sourceURL": "https://react.dev/reference/react/experimental_taintObjectReference", "url": "https://react.dev/reference/react/experimental_taintObjectReference", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using experimental_taintObjectReference in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nExperimental versions of React may contain bugs. Don’t use them in production.\n\nDo not rely on just tainting for security. Tainting is a layer of protection; a secure app will have multiple layers of protection, well designed APIs, and isolation patterns.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/experimental_taintObjectReference", "title": "experimental_taintObjectReference", "description": "This API is experimental and is not available in a stable version of React yet. It allows you to prevent a specific object instance from being passed to a Client Component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:09:27", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:title": "experimental_taintObjectReference – React", "og:url": "https://react.dev/reference/react/experimental_taintObjectReference", "fb:app_id": "623268441017527", "ogTitle": "experimental_taintObjectReference – React", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "twitter:title": "experimental_taintObjectReference – React", "twitter:description": "The library for web and native user interfaces", "title": "experimental_taintObjectReference – React", "ogUrl": "https://react.dev/reference/react/experimental_taintObjectReference", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "language": "en", "scrapeId": "a1c72686-4438-444c-875e-fd98e010ca4e", "sourceURL": "https://react.dev/reference/react/experimental_taintObjectReference", "url": "https://react.dev/reference/react/experimental_taintObjectReference", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Legacy React APIs is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Legacy React APIs in react-reference.\n\n# Legacy React APIs\n\nThese APIs are exported from the react package, but they are not recommended for use in newly written code. See the linked individual API pages for the suggested alternatives.Here's a quick rundown of what this is about:\n\n## Legacy APIs\n\n- [`Children`](https://react.dev/reference/react/Children) lets you manipulate and transform the JSX received as the `children` prop. [See alternatives.](https://react.dev/reference/react/Children#alternatives)\n- [`cloneElement`](https://react.dev/reference/react/cloneElement) lets you create a React element using another element as a starting point. [See alternatives.](https://react.dev/reference/react/cloneElement#alternatives)\n- [`Component`](https://react.dev/reference/react/Component) lets you define a React component as a JavaScript class. [See alternatives.](https://react.dev/reference/react/Component#alternatives)\n- [`createElement`](https://react.dev/reference/react/createElement) lets you create a React element. Typically, you’ll use JSX instead.\n- [`createRef`](https://react.dev/reference/react/createRef) creates a ref object which can contain arbitrary value. [See alternatives.](https://react.dev/reference/react/createRef#alternatives)\n- [`forwardRef`](https://react.dev/reference/react/forwardRef) lets your component expose a DOM node to parent component with a [ref.](https://react.dev/learn/manipulating-the-dom-with-refs)\n- [`isValidElement`](https://react.dev/reference/react/isValidElement) checks whether a value is a React element. Typically used with [`cloneElement`.](https://react.dev/reference/react/cloneElement)\n- [`PureComponent`](https://react.dev/reference/react/PureComponent) is similar to [`Component`,](https://react.dev/reference/react/Component) but it skip re-renders with same props. [See alternatives.](https://react.dev/reference/react/PureComponent#alternatives)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/legacy", "title": "Legacy React APIs", "description": "These APIs are exported from the react package, but they are not recommended for use in newly written code. See the linked individual API pages for the suggested alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:09:43", "type": "overview", "page_metadata": {"twitter:title": "Legacy React APIs – React", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react/legacy", "title": "Legacy React APIs – React", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/legacy", "language": "en", "og:title": "Legacy React APIs – React", "ogTitle": "Legacy React APIs – React", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "scrapeId": "0591c2fe-ce2f-4349-8c0e-730879a6ed16", "sourceURL": "https://react.dev/reference/react/legacy", "url": "https://react.dev/reference/react/legacy", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I legacy apis in react-reference?\n\nAssistant: To legacy apis in react-reference, here's what you do:\n- [`Children`](https://react.dev/reference/react/Children) lets you manipulate and transform the JSX received as the `children` prop. [See alternatives.](https://react.dev/reference/react/Children#alternatives)\n- [`cloneElement`](https://react.dev/reference/react/cloneElement) lets you create a React element using another element as a starting point. [See alternatives.](https://react.dev/reference/react/cloneElement#alternatives)\n- [`Component`](https://react.dev/reference/react/Component) lets you define a React component as a JavaScript class. [See alternatives.](https://react.dev/reference/react/Component#alternatives)\n- [`createElement`](https://react.dev/reference/react/createElement) lets you create a React element. Typically, you’ll use JSX instead.\n- [`createRef`](https://react.dev/reference/react/createRef) creates a ref object which can contain arbitrary value. [See alternatives.](https://react.dev/reference/react/createRef#alternatives)\n- [`forwardRef`](https://react.dev/reference/react/forwardRef) lets your component expose a DOM node to parent component with a [ref.](https://react.dev/learn/manipulating-the-dom-with-refs)\n- [`isValidElement`](https://react.dev/reference/react/isValidElement) checks whether a value is a React element. Typically used with [`cloneElement`.](https://react.dev/reference/react/cloneElement)\n- [`PureComponent`](https://react.dev/reference/react/PureComponent) is similar to [`Component`,](https://react.dev/reference/react/Component) but it skip re-renders with same props. [See alternatives.](https://react.dev/reference/react/PureComponent#alternatives).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/legacy", "title": "Legacy React APIs", "description": "These APIs are exported from the react package, but they are not recommended for use in newly written code. See the linked individual API pages for the suggested alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:09:43", "type": "section_detail", "page_metadata": {"twitter:title": "Legacy React APIs – React", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react/legacy", "title": "Legacy React APIs – React", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/legacy", "language": "en", "og:title": "Legacy React APIs – React", "ogTitle": "Legacy React APIs – React", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "scrapeId": "0591c2fe-ce2f-4349-8c0e-730879a6ed16", "sourceURL": "https://react.dev/reference/react/legacy", "url": "https://react.dev/reference/react/legacy", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Legacy React APIs in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Removed APIs**:\n\n```yaml\nThese APIs were removed in React 19:\n\n- [`createFactory`](https://18.react.dev/reference/react/createFactory): use JSX instead.\n- Class Components: [`static contextTypes`](https://18.react.dev//reference/react/Component#static-contexttypes): use [`static contextType`](https://react.dev/reference/react/legacy#static-contexttype) instead.\n- Class Components: [`static childContextTypes`](https://18.react.dev//reference/react/Component#static-childcontexttypes): use [`static contextType`](https://react.dev/reference/react/legacy#static-contexttype) instead.\n- Class Components: [`static getChildContext`](https://18.react.dev//reference/react/Component#getchildcontext): use [`Context.Provider`](https://react.dev/reference/react/createContext#provider) instead.\n- Class Components: [`static propTypes`](https://18.react.dev//reference/react/Component#static-proptypes): use a type system like [TypeScript](https://www.typescriptlang.org/) instead.\n- Class Components: [`this.refs`](https://18.react.dev//reference/react/Component#refs): use [`createRef`](https://react.dev/reference/react/createRef) instead.\n```\n\nThis snippet shows you how to removed apis, which is an important aspect of legacy react apis.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/legacy", "title": "Legacy React APIs", "description": "These APIs are exported from the react package, but they are not recommended for use in newly written code. See the linked individual API pages for the suggested alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:09:43", "type": "code_examples", "page_metadata": {"twitter:title": "Legacy React APIs – React", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react/legacy", "title": "Legacy React APIs – React", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/legacy", "language": "en", "og:title": "Legacy React APIs – React", "ogTitle": "Legacy React APIs – React", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "scrapeId": "0591c2fe-ce2f-4349-8c0e-730879a6ed16", "sourceURL": "https://react.dev/reference/react/legacy", "url": "https://react.dev/reference/react/legacy", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Legacy React APIs in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThese APIs are not recommended for use in newly written code. See the linked individual API pages for the suggested alternatives.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/legacy", "title": "Legacy React APIs", "description": "These APIs are exported from the react package, but they are not recommended for use in newly written code. See the linked individual API pages for the suggested alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:09:43", "type": "best_practices", "page_metadata": {"twitter:title": "Legacy React APIs – React", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "og:type": "website", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react/legacy", "title": "Legacy React APIs – React", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/legacy", "language": "en", "og:title": "Legacy React APIs – React", "ogTitle": "Legacy React APIs – React", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "scrapeId": "0591c2fe-ce2f-4349-8c0e-730879a6ed16", "sourceURL": "https://react.dev/reference/react/legacy", "url": "https://react.dev/reference/react/legacy", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Profiler is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Profiler in react-reference.\n\n# Profiler\n\n<Profiler> lets you measure rendering performance of a React tree programmatically.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `<Profiler>`\nWrap a component tree in a `<Profiler>` to measure its rendering performance.\n\n```sp-pre-placeholder grow-[2]\n<Profiler id=\"App\" onRender={onRender}>\n  <App />\n</Profiler>\n```\n\n#### Props\n- `id`: A string identifying the part of the UI you are measuring.\n- `onRender`: An [`onRender` callback](https://react.dev/reference/react/Profiler#onrender-callback) that React calls every time components within the profiled tree update. It receives information about what was rendered and how much time it took.\n\n#### Caveats\n- Profiling adds some additional overhead, so **it is disabled in the production build by default.** To opt into production profiling, you need to enable a [special production build with profiling enabled.](https://fb.me/react-profiling)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/Profiler", "title": "Profiler", "description": "<Profiler> lets you measure rendering performance of a React tree programmatically.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:09:50", "type": "overview", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/Profiler", "og:title": "<Profiler> – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogTitle": "<Profiler> – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Profiler – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:type": "website", "twitter:site": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "title": "<Profiler> – React", "ogUrl": "https://react.dev/reference/react/Profiler", "scrapeId": "b35da856-1d1a-4b5a-980b-2ba119b50fc5", "sourceURL": "https://react.dev/reference/react/Profiler", "url": "https://react.dev/reference/react/Profiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `<Profiler>`\nWrap a component tree in a `<Profiler>` to measure its rendering performance.\n\n```sp-pre-placeholder grow-[2]\n<Profiler id=\"App\" onRender={onRender}>\n  <App />\n</Profiler>\n```\n\n#### Props\n- `id`: A string identifying the part of the UI you are measuring.\n- `onRender`: An [`onRender` callback](https://react.dev/reference/react/Profiler#onrender-callback) that React calls every time components within the profiled tree update. It receives information about what was rendered and how much time it took.\n\n#### Caveats\n- Profiling adds some additional overhead, so **it is disabled in the production build by default.** To opt into production profiling, you need to enable a [special production build with profiling enabled.](https://fb.me/react-profiling).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Profiler", "title": "Profiler", "description": "<Profiler> lets you measure rendering performance of a React tree programmatically.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:09:50", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/Profiler", "og:title": "<Profiler> – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogTitle": "<Profiler> – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Profiler – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:type": "website", "twitter:site": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "title": "<Profiler> – React", "ogUrl": "https://react.dev/reference/react/Profiler", "scrapeId": "b35da856-1d1a-4b5a-980b-2ba119b50fc5", "sourceURL": "https://react.dev/reference/react/Profiler", "url": "https://react.dev/reference/react/Profiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Profiler in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Profiler Example**:\n\n```yaml\n<Profiler id=\"App\" onRender={onRender}>\n  <App />\n</Profiler>\n```\n\nThis snippet shows you how to profiler example, which is an important aspect of profiler.\n\n**onRender Callback Example**:\n\n```yaml\nfunction onRender(id, phase, actualDuration, baseDuration, startTime, commitTime) {\n  // Aggregate or log render timings...\n}\n```\n\nThis snippet shows you how to onrender callback example, which is an important aspect of profiler.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/Profiler", "title": "Profiler", "description": "<Profiler> lets you measure rendering performance of a React tree programmatically.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:09:50", "type": "code_examples", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/Profiler", "og:title": "<Profiler> – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogTitle": "<Profiler> – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Profiler – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:type": "website", "twitter:site": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "title": "<Profiler> – React", "ogUrl": "https://react.dev/reference/react/Profiler", "scrapeId": "b35da856-1d1a-4b5a-980b-2ba119b50fc5", "sourceURL": "https://react.dev/reference/react/Profiler", "url": "https://react.dev/reference/react/Profiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Profiler in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nProfiling adds some additional overhead, so it is disabled in the production build by default. To opt into production profiling, you need to enable a special production build with profiling enabled.\n\n<Profiler> lets you gather measurements programmatically. If you’re looking for an interactive profiler, try the Profiler tab in React Developer Tools. It exposes similar functionality as a browser extension.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/Profiler", "title": "Profiler", "description": "<Profiler> lets you measure rendering performance of a React tree programmatically.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:09:50", "type": "best_practices", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react/Profiler", "og:title": "<Profiler> – React", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "theme-color": "#23272f", "ogTitle": "<Profiler> – React", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:title": "Profiler – React", "og:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "og:type": "website", "twitter:site": "@reactjs", "language": "en", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "title": "<Profiler> – React", "ogUrl": "https://react.dev/reference/react/Profiler", "scrapeId": "b35da856-1d1a-4b5a-980b-2ba119b50fc5", "sourceURL": "https://react.dev/reference/react/Profiler", "url": "https://react.dev/reference/react/Profiler", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what createElement is in react-reference?\n\nAssistant: Sure, I'd be happy to explain createElement in react-reference.\n\n# createElement\n\n`createElement` lets you create a React element. It serves as an alternative to writing JSX.Here's a quick rundown of what this is about:\n\n## Reference\n\nCall `createElement` to create a React element with the given `type`, `props`, and `children`.\n\n```sp-pre-placeholder grow-[2]\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n\n  return createElement(\n\n    'h1',\n\n    { className: 'greeting' },\n\n    'Hello'\n\n  );\n\n}\n```\n\n[See more examples below.](https://react.dev/reference/react/createElement#usage)\n\n#### Parameters\n\n- `type`: The `type` argument must be a valid React component type. For example, it could be a tag name string (such as `'div'` or `'span'`), or a React component (a function, a class, or a special component like [`Fragment`](https://react.dev/reference/react/Fragment)).\n\n- `props`: The `props` argument must either be an object or `null`. If you pass `null`, it will be treated the same as an empty object. React will create an element with props matching the `props` you have passed. Note that `ref` and `key` from your `props` object are special and will _not_ be available as `element.props.ref` and `element.props.key` on the returned `element`. They will be available as `element.ref` and `element.key`.\n\n- **optional** `...children`: Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers, [portals](https://react.dev/reference/react-dom/createPortal), empty nodes ( `null`, `undefined`, `true`, and `false`), and arrays of React nodes.\n\n#### Returns\n\n`createElement` returns a React element object with a few properties:\n\n- `type`: The `type` you have passed.\n- `props`: The `props` you have passed except for `ref` and `key`.\n- `ref`: The `ref` you have passed. If missing, `null`.\n- `key`: The `key` you have passed, coerced to a string. If missing, `null`.\n\nUsually, you’ll return the element from your component or make it a child of another element. Although you may read the element’s properties, it’s best to treat every element as opaque after it’s created, and only render it.\n\n#### Caveats\n\n- You must **treat React elements and their props as [immutable](https://en.wikipedia.org/wiki/Immutable_object)** and never change their contents after creation. In development, React will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) the returned element and its `props` property shallowly to enforce this.\n\n- When you use JSX, **you must start a tag with a capital letter to render your own custom component.** In other words, `<Something />` is equivalent to `createElement(Something)`, but `<something />` (lowercase) is equivalent to `createElement('something')` (note it’s a string, so it will be treated as a built-in HTML tag).\n\n- You should only **pass children as multiple arguments to `createElement` if they are all statically known,** like `createElement('h1', {}, child1, child2, child3)`. If your children are dynamic, pass the entire array as the third argument: `createElement('ul', {}, listItems)`. This ensures that React will [warn you about missing `key` s](https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key) for any dynamic lists. For static lists this is not necessary because they never reorder.\n\n## Usage\n\nIf you don’t like [JSX](https://react.dev/learn/writing-markup-with-jsx) or can’t use it in your project, you can use `createElement` as an alternative.\n\nTo create an element without JSX, call `createElement` with some type, props, and children:\n\n```sp-pre-placeholder grow-[2]\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n\n  return createElement(\n\n    'h1',\n\n    { className: 'greeting' },\n\n    'Hello ',\n\n    createElement('i', null, name),\n\n    '. Welcome!'\n\n  );\n\n}\n```\n\nThe children are optional, and you can pass as many as you need (the example above has three children). This code will display a `<h1>` header with a greeting. For comparison, here is the same example rewritten with JSX:\n\n```sp-pre-placeholder grow-[2]\nfunction Greeting({ name }) {\n  return (\n    <h1 className=\"greeting\">\n      Hello <i>{name}</i>. Welcome!\n    </h1>\n  );\n}\n```\n\nTo render your own React component, pass a function like `Greeting` as the type instead of a string like `'h1'`:\n\n```sp-pre-placeholder grow-[2]\nexport default function App() {\n  return createElement(Greeting, { name: 'Taylor' });\n}\n```\n\nWith JSX, it would look like this:\n\n```sp-pre-placeholder grow-[2]\nexport default function App() {\n  return <Greeting name=\"Taylor\" />;\n}\n```\n\nHere is a complete example written with `createElement`:\n\nApp.js\n\n```sp-pre-placeholder grow-[2]\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n  return createElement(\n    'h1',\n    { className: 'greeting' },\n    'Hello ',\n    createElement('i', null, name),\n    '. Welcome!'\n  );\n}\n\nexport default function App() {\n  return createElement(\n    Greeting,\n    { name: 'Taylor' }\n  );\n}\n```\n\nAnd here is the same example written using JSX:\n\n```sp-pre-placeholder grow-[2]\nfunction Greeting({ name }) {\n  return (\n    <h1 className=\"greeting\">\n      Hello <i>{name}</i>. Welcome!\n    </h1>\n  );\n}\n\nexport default function App() {\n  return <Greeting name=\"Taylor\" />;\n}\n```\n\nBoth coding styles are fine, so you can use whichever one you prefer for your project. The main benefit of using JSX compared to `createElement` is that it’s easy to see which closing tag corresponds to which opening tag.\n\n## Deep Dive\n\n#### What is a React element, exactly?\n\nAn element is a lightweight description of a piece of the user interface. For example, both `<Greeting name=\"Taylor\" />` and `createElement(Greeting, { name: 'Taylor' })` produce an object like this:\n\n```sp-pre-placeholder grow-[2]\n// Slightly simplified\n{\n  type: Greeting,\n  props: {\n    name: 'Taylor'\n  },\n  key: null,\n  ref: null,\n}\n```\n\n**Note that creating this object does not render the `Greeting` component or create any DOM elements.**\n\nA React element is more like a description—an instruction for React to later render the `Greeting` component. By returning this object from your `App` component, you tell React what to do next.\n\nCreating elements is extremely cheap so you don’t need to try to optimize or avoid it.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/createElement", "title": "createElement", "description": "`createElement` lets you create a React element. It serves as an alternative to writing JSX.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:27", "type": "overview", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:title": "createElement – React", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogTitle": "createElement – React", "ogUrl": "https://react.dev/reference/react/createElement", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:url": "https://react.dev/reference/react/createElement", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "title": "createElement – React", "og:title": "createElement – React", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "scrapeId": "c46654d5-5c3f-4ce8-af6c-a602e5210247", "sourceURL": "https://react.dev/reference/react/createElement", "url": "https://react.dev/reference/react/createElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `createElement` to create a React element with the given `type`, `props`, and `children`.\n\n```sp-pre-placeholder grow-[2]\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n\n  return createElement(\n\n    'h1',\n\n    { className: 'greeting' },\n\n    'Hello'\n\n  );\n\n}\n```\n\n[See more examples below.](https://react.dev/reference/react/createElement#usage)\n\n#### Parameters\n\n- `type`: The `type` argument must be a valid React component type. For example, it could be a tag name string (such as `'div'` or `'span'`), or a React component (a function, a class, or a special component like [`Fragment`](https://react.dev/reference/react/Fragment)).\n\n- `props`: The `props` argument must either be an object or `null`. If you pass `null`, it will be treated the same as an empty object. React will create an element with props matching the `props` you have passed. Note that `ref` and `key` from your `props` object are special and will _not_ be available as `element.props.ref` and `element.props.key` on the returned `element`. They will be available as `element.ref` and `element.key`.\n\n- **optional** `...children`: Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers, [portals](https://react.dev/reference/react-dom/createPortal), empty nodes ( `null`, `undefined`, `true`, and `false`), and arrays of React nodes.\n\n#### Returns\n\n`createElement` returns a React element object with a few properties:\n\n- `type`: The `type` you have passed.\n- `props`: The `props` you have passed except for `ref` and `key`.\n- `ref`: The `ref` you have passed. If missing, `null`.\n- `key`: The `key` you have passed, coerced to a string. If missing, `null`.\n\nUsually, you’ll return the element from your component or make it a child of another element. Although you may read the element’s properties, it’s best to treat every element as opaque after it’s created, and only render it.\n\n#### Caveats\n\n- You must **treat React elements and their props as [immutable](https://en.wikipedia.org/wiki/Immutable_object)** and never change their contents after creation. In development, React will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) the returned element and its `props` property shallowly to enforce this.\n\n- When you use JSX, **you must start a tag with a capital letter to render your own custom component.** In other words, `<Something />` is equivalent to `createElement(Something)`, but `<something />` (lowercase) is equivalent to `createElement('something')` (note it’s a string, so it will be treated as a built-in HTML tag).\n\n- You should only **pass children as multiple arguments to `createElement` if they are all statically known,** like `createElement('h1', {}, child1, child2, child3)`. If your children are dynamic, pass the entire array as the third argument: `createElement('ul', {}, listItems)`. This ensures that React will [warn you about missing `key` s](https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key) for any dynamic lists. For static lists this is not necessary because they never reorder..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createElement", "title": "createElement", "description": "`createElement` lets you create a React element. It serves as an alternative to writing JSX.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:27", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:title": "createElement – React", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogTitle": "createElement – React", "ogUrl": "https://react.dev/reference/react/createElement", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:url": "https://react.dev/reference/react/createElement", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "title": "createElement – React", "og:title": "createElement – React", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "scrapeId": "c46654d5-5c3f-4ce8-af6c-a602e5210247", "sourceURL": "https://react.dev/reference/react/createElement", "url": "https://react.dev/reference/react/createElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nIf you don’t like [JSX](https://react.dev/learn/writing-markup-with-jsx) or can’t use it in your project, you can use `createElement` as an alternative.\n\nTo create an element without JSX, call `createElement` with some type, props, and children:\n\n```sp-pre-placeholder grow-[2]\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n\n  return createElement(\n\n    'h1',\n\n    { className: 'greeting' },\n\n    'Hello ',\n\n    createElement('i', null, name),\n\n    '. Welcome!'\n\n  );\n\n}\n```\n\nThe children are optional, and you can pass as many as you need (the example above has three children). This code will display a `<h1>` header with a greeting. For comparison, here is the same example rewritten with JSX:\n\n```sp-pre-placeholder grow-[2]\nfunction Greeting({ name }) {\n  return (\n    <h1 className=\"greeting\">\n      Hello <i>{name}</i>. Welcome!\n    </h1>\n  );\n}\n```\n\nTo render your own React component, pass a function like `Greeting` as the type instead of a string like `'h1'`:\n\n```sp-pre-placeholder grow-[2]\nexport default function App() {\n  return createElement(Greeting, { name: 'Taylor' });\n}\n```\n\nWith JSX, it would look like this:\n\n```sp-pre-placeholder grow-[2]\nexport default function App() {\n  return <Greeting name=\"Taylor\" />;\n}\n```\n\nHere is a complete example written with `createElement`:\n\nApp.js\n\n```sp-pre-placeholder grow-[2]\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n  return createElement(\n    'h1',\n    { className: 'greeting' },\n    'Hello ',\n    createElement('i', null, name),\n    '. Welcome!'\n  );\n}\n\nexport default function App() {\n  return createElement(\n    Greeting,\n    { name: 'Taylor' }\n  );\n}\n```\n\nAnd here is the same example written using JSX:\n\n```sp-pre-placeholder grow-[2]\nfunction Greeting({ name }) {\n  return (\n    <h1 className=\"greeting\">\n      Hello <i>{name}</i>. Welcome!\n    </h1>\n  );\n}\n\nexport default function App() {\n  return <Greeting name=\"Taylor\" />;\n}\n```\n\nBoth coding styles are fine, so you can use whichever one you prefer for your project. The main benefit of using JSX compared to `createElement` is that it’s easy to see which closing tag corresponds to which opening tag..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createElement", "title": "createElement", "description": "`createElement` lets you create a React element. It serves as an alternative to writing JSX.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:27", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:title": "createElement – React", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogTitle": "createElement – React", "ogUrl": "https://react.dev/reference/react/createElement", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:url": "https://react.dev/reference/react/createElement", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "title": "createElement – React", "og:title": "createElement – React", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "scrapeId": "c46654d5-5c3f-4ce8-af6c-a602e5210247", "sourceURL": "https://react.dev/reference/react/createElement", "url": "https://react.dev/reference/react/createElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deep dive in react-reference?\n\nAssistant: To deep dive in react-reference, here's what you do:\n#### What is a React element, exactly?\n\nAn element is a lightweight description of a piece of the user interface. For example, both `<Greeting name=\"Taylor\" />` and `createElement(Greeting, { name: 'Taylor' })` produce an object like this:\n\n```sp-pre-placeholder grow-[2]\n// Slightly simplified\n{\n  type: Greeting,\n  props: {\n    name: 'Taylor'\n  },\n  key: null,\n  ref: null,\n}\n```\n\n**Note that creating this object does not render the `Greeting` component or create any DOM elements.**\n\nA React element is more like a description—an instruction for React to later render the `Greeting` component. By returning this object from your `App` component, you tell React what to do next.\n\nCreating elements is extremely cheap so you don’t need to try to optimize or avoid it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createElement", "title": "createElement", "description": "`createElement` lets you create a React element. It serves as an alternative to writing JSX.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:27", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:title": "createElement – React", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogTitle": "createElement – React", "ogUrl": "https://react.dev/reference/react/createElement", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:url": "https://react.dev/reference/react/createElement", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "title": "createElement – React", "og:title": "createElement – React", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "scrapeId": "c46654d5-5c3f-4ce8-af6c-a602e5210247", "sourceURL": "https://react.dev/reference/react/createElement", "url": "https://react.dev/reference/react/createElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for createElement in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Creating an element without JSX**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n\n  return createElement(\n\n    'h1',\n\n    { className: 'greeting' },\n\n    'Hello ',\n\n    createElement('i', null, name),\n\n    '. Welcome!'\n\n  );\n\n}\n```\n```\n\nThis snippet shows you how to creating an element without jsx, which is an important aspect of createelement.\n\n**Complete example with createElement**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n  return createElement(\n    'h1',\n    { className: 'greeting' },\n    'Hello ',\n    createElement('i', null, name),\n    '. Welcome!'\n  );\n}\n\nexport default function App() {\n  return createElement(\n    Greeting,\n    { name: 'Taylor' }\n  );\n}\n```\n```\n\nThis snippet shows you how to complete example with createelement, which is an important aspect of createelement.\n\n**Complete example with JSX**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nfunction Greeting({ name }) {\n  return (\n    <h1 className=\"greeting\">\n      Hello <i>{name}</i>. Welcome!\n    </h1>\n  );\n}\n\nexport default function App() {\n  return <Greeting name=\"Taylor\" />;\n}\n```\n```\n\nThis snippet shows you how to complete example with jsx, which is an important aspect of createelement.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/createElement", "title": "createElement", "description": "`createElement` lets you create a React element. It serves as an alternative to writing JSX.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:27", "type": "code_examples", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:title": "createElement – React", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogTitle": "createElement – React", "ogUrl": "https://react.dev/reference/react/createElement", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:url": "https://react.dev/reference/react/createElement", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "title": "createElement – React", "og:title": "createElement – React", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "scrapeId": "c46654d5-5c3f-4ce8-af6c-a602e5210247", "sourceURL": "https://react.dev/reference/react/createElement", "url": "https://react.dev/reference/react/createElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using createElement in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTreat React elements and their props as immutable and never change their contents after creation.\n\nWhen using JSX, start a tag with a capital letter to render your own custom component.\n\nPass children as multiple arguments to `createElement` only if they are all statically known; otherwise, pass the entire array as the third argument.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/createElement", "title": "createElement", "description": "`createElement` lets you create a React element. It serves as an alternative to writing JSX.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:27", "type": "best_practices", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:title": "createElement – React", "og:type": "website", "ogDescription": "The library for web and native user interfaces", "language": "en", "ogTitle": "createElement – React", "ogUrl": "https://react.dev/reference/react/createElement", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:url": "https://react.dev/reference/react/createElement", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "title": "createElement – React", "og:title": "createElement – React", "ogImage": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "scrapeId": "c46654d5-5c3f-4ce8-af6c-a602e5210247", "sourceURL": "https://react.dev/reference/react/createElement", "url": "https://react.dev/reference/react/createElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what isValidElement is in react-reference?\n\nAssistant: Sure, I'd be happy to explain isValidElement in react-reference.\n\n# isValidElement\n\n`isValidElement` checks whether a value is a React element.Here's a quick rundown of what this is about:\n\n## Reference\n\nCall `isValidElement(value)` to check whether `value` is a React element.\n\n```sp-pre-placeholder grow-[2]\nimport { isValidElement, createElement } from 'react';\n\n// ✅ React elements\n\nconsole.log(isValidElement(<p />)); // true\n\nconsole.log(isValidElement(createElement('p'))); // true\n\n// ❌ Not React elements\n\nconsole.log(isValidElement(25)); // false\n\nconsole.log(isValidElement('Hello')); // false\n\nconsole.log(isValidElement({ age: 42 })); // false\n```\n\n#### Parameters\n- `value`: The `value` you want to check. It can be any a value of any type.\n\n#### Returns\n`isValidElement` returns `true` if the `value` is a React element. Otherwise, it returns `false`.\n\n#### Caveats\n- **Only [JSX tags](https://react.dev/learn/writing-markup-with-jsx) and objects returned by [`createElement`](https://react.dev/reference/react/createElement) are considered to be React elements.** For example, even though a number like `42` is a valid React _node_ (and can be returned from a component), it is not a valid React element. Arrays and portals created with [`createPortal`](https://react.dev/reference/react-dom/createPortal) are also _not_ considered to be React elements.\n\n## Usage\n\nCall `isValidElement` to check if some value is a _React element._\n\nReact elements are:\n\n- Values produced by writing a [JSX tag](https://react.dev/learn/writing-markup-with-jsx)\n- Values produced by calling [`createElement`](https://react.dev/reference/react/createElement)\n\nFor React elements, `isValidElement` returns `true`:\n\n```sp-pre-placeholder grow-[2]\nimport { isValidElement, createElement } from 'react';\n\n// ✅ JSX tags are React elements\n\nconsole.log(isValidElement(<p />)); // true\n\nconsole.log(isValidElement(<MyComponent />)); // true\n\n// ✅ Values returned by createElement are React elements\n\nconsole.log(isValidElement(createElement('p'))); // true\n\nconsole.log(isValidElement(createElement(MyComponent))); // true\n```\n\nAny other values, such as strings, numbers, or arbitrary objects and arrays, are not React elements.\n\nFor them, `isValidElement` returns `false`:\n\n```sp-pre-placeholder grow-[2]\n// ❌ These are *not* React elements\n\nconsole.log(isValidElement(null)); // false\n\nconsole.log(isValidElement(25)); // false\n\nconsole.log(isValidElement('Hello')); // false\n\nconsole.log(isValidElement({ age: 42 })); // false\n\nconsole.log(isValidElement([<div />, <div />])); // false\n\nconsole.log(isValidElement(MyComponent)); // false\n```\n\nIt is very uncommon to need `isValidElement`. It’s mostly useful if you’re calling another API that _only_ accepts elements (like [`cloneElement`](https://react.dev/reference/react/cloneElement) does) and you want to avoid an error when your argument is not a React element.\n\nUnless you have some very specific reason to add an `isValidElement` check, you probably don’t need it.\n\n## Deep Dive\n\n#### React elements vs React nodes\n\nWhen you write a component, you can return any kind of _React node_ from it:\n\n```sp-pre-placeholder grow-[2]\nfunction MyComponent() {\n\n  // ... you can return any React node ...\n}\n```\n\nA React node can be:\n- A React element created like `<div />` or `createElement('div')`\n- A portal created with [`createPortal`](https://react.dev/reference/react-dom/createPortal)\n- A string\n- A number\n- `true`, `false`, `null`, or `undefined` (which are not displayed)\n- An array of other React nodes\n\n**Note `isValidElement` checks whether the argument is a _React element,_ not whether it’s a React node.** For example, `42` is not a valid React element. However, it is a perfectly valid React node:\n\n```sp-pre-placeholder grow-[2]\nfunction MyComponent() {\n\n  return 42; // It's ok to return a number from component\n}\n```\n\nThis is why you shouldn’t use `isValidElement` as a way to check whether something can be rendered.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/isValidElement", "title": "isValidElement", "description": "`isValidElement` checks whether a value is a React element.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:51", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/isValidElement", "title": "isValidElement – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "isValidElement – React", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/isValidElement", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "isValidElement – React", "twitter:title": "isValidElement – React", "scrapeId": "8954b7f1-ca4b-4f49-972f-99ba7bc70aff", "sourceURL": "https://react.dev/reference/react/isValidElement", "url": "https://react.dev/reference/react/isValidElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `isValidElement(value)` to check whether `value` is a React element.\n\n```sp-pre-placeholder grow-[2]\nimport { isValidElement, createElement } from 'react';\n\n// ✅ React elements\n\nconsole.log(isValidElement(<p />)); // true\n\nconsole.log(isValidElement(createElement('p'))); // true\n\n// ❌ Not React elements\n\nconsole.log(isValidElement(25)); // false\n\nconsole.log(isValidElement('Hello')); // false\n\nconsole.log(isValidElement({ age: 42 })); // false\n```\n\n#### Parameters\n- `value`: The `value` you want to check. It can be any a value of any type.\n\n#### Returns\n`isValidElement` returns `true` if the `value` is a React element. Otherwise, it returns `false`.\n\n#### Caveats\n- **Only [JSX tags](https://react.dev/learn/writing-markup-with-jsx) and objects returned by [`createElement`](https://react.dev/reference/react/createElement) are considered to be React elements.** For example, even though a number like `42` is a valid React _node_ (and can be returned from a component), it is not a valid React element. Arrays and portals created with [`createPortal`](https://react.dev/reference/react-dom/createPortal) are also _not_ considered to be React elements..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/isValidElement", "title": "isValidElement", "description": "`isValidElement` checks whether a value is a React element.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:51", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/isValidElement", "title": "isValidElement – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "isValidElement – React", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/isValidElement", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "isValidElement – React", "twitter:title": "isValidElement – React", "scrapeId": "8954b7f1-ca4b-4f49-972f-99ba7bc70aff", "sourceURL": "https://react.dev/reference/react/isValidElement", "url": "https://react.dev/reference/react/isValidElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nCall `isValidElement` to check if some value is a _React element._\n\nReact elements are:\n\n- Values produced by writing a [JSX tag](https://react.dev/learn/writing-markup-with-jsx)\n- Values produced by calling [`createElement`](https://react.dev/reference/react/createElement)\n\nFor React elements, `isValidElement` returns `true`:\n\n```sp-pre-placeholder grow-[2]\nimport { isValidElement, createElement } from 'react';\n\n// ✅ JSX tags are React elements\n\nconsole.log(isValidElement(<p />)); // true\n\nconsole.log(isValidElement(<MyComponent />)); // true\n\n// ✅ Values returned by createElement are React elements\n\nconsole.log(isValidElement(createElement('p'))); // true\n\nconsole.log(isValidElement(createElement(MyComponent))); // true\n```\n\nAny other values, such as strings, numbers, or arbitrary objects and arrays, are not React elements.\n\nFor them, `isValidElement` returns `false`:\n\n```sp-pre-placeholder grow-[2]\n// ❌ These are *not* React elements\n\nconsole.log(isValidElement(null)); // false\n\nconsole.log(isValidElement(25)); // false\n\nconsole.log(isValidElement('Hello')); // false\n\nconsole.log(isValidElement({ age: 42 })); // false\n\nconsole.log(isValidElement([<div />, <div />])); // false\n\nconsole.log(isValidElement(MyComponent)); // false\n```\n\nIt is very uncommon to need `isValidElement`. It’s mostly useful if you’re calling another API that _only_ accepts elements (like [`cloneElement`](https://react.dev/reference/react/cloneElement) does) and you want to avoid an error when your argument is not a React element.\n\nUnless you have some very specific reason to add an `isValidElement` check, you probably don’t need it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/isValidElement", "title": "isValidElement", "description": "`isValidElement` checks whether a value is a React element.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:51", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/isValidElement", "title": "isValidElement – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "isValidElement – React", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/isValidElement", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "isValidElement – React", "twitter:title": "isValidElement – React", "scrapeId": "8954b7f1-ca4b-4f49-972f-99ba7bc70aff", "sourceURL": "https://react.dev/reference/react/isValidElement", "url": "https://react.dev/reference/react/isValidElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deep dive in react-reference?\n\nAssistant: To deep dive in react-reference, here's what you do:\n#### React elements vs React nodes\n\nWhen you write a component, you can return any kind of _React node_ from it:\n\n```sp-pre-placeholder grow-[2]\nfunction MyComponent() {\n\n  // ... you can return any React node ...\n}\n```\n\nA React node can be:\n- A React element created like `<div />` or `createElement('div')`\n- A portal created with [`createPortal`](https://react.dev/reference/react-dom/createPortal)\n- A string\n- A number\n- `true`, `false`, `null`, or `undefined` (which are not displayed)\n- An array of other React nodes\n\n**Note `isValidElement` checks whether the argument is a _React element,_ not whether it’s a React node.** For example, `42` is not a valid React element. However, it is a perfectly valid React node:\n\n```sp-pre-placeholder grow-[2]\nfunction MyComponent() {\n\n  return 42; // It's ok to return a number from component\n}\n```\n\nThis is why you shouldn’t use `isValidElement` as a way to check whether something can be rendered..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/isValidElement", "title": "isValidElement", "description": "`isValidElement` checks whether a value is a React element.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:51", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/isValidElement", "title": "isValidElement – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "isValidElement – React", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/isValidElement", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "isValidElement – React", "twitter:title": "isValidElement – React", "scrapeId": "8954b7f1-ca4b-4f49-972f-99ba7bc70aff", "sourceURL": "https://react.dev/reference/react/isValidElement", "url": "https://react.dev/reference/react/isValidElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for isValidElement in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**isValidElement Example**:\n\n```yaml\nconst isElement = isValidElement(value)\n```\n\nThis snippet shows you how to isvalidelement example, which is an important aspect of isvalidelement.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/isValidElement", "title": "isValidElement", "description": "`isValidElement` checks whether a value is a React element.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:51", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/isValidElement", "title": "isValidElement – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "isValidElement – React", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/isValidElement", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "isValidElement – React", "twitter:title": "isValidElement – React", "scrapeId": "8954b7f1-ca4b-4f49-972f-99ba7bc70aff", "sourceURL": "https://react.dev/reference/react/isValidElement", "url": "https://react.dev/reference/react/isValidElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using isValidElement in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIt is very uncommon to need `isValidElement`.\n\nUnless you have some very specific reason to add an `isValidElement` check, you probably don’t need it.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/isValidElement", "title": "isValidElement", "description": "`isValidElement` checks whether a value is a React element.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:10:51", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "twitter:site": "@reactjs", "language": "en", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react/isValidElement", "title": "isValidElement – React", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "ogTitle": "isValidElement – React", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/isValidElement", "og:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:title": "isValidElement – React", "twitter:title": "isValidElement – React", "scrapeId": "8954b7f1-ca4b-4f49-972f-99ba7bc70aff", "sourceURL": "https://react.dev/reference/react/isValidElement", "url": "https://react.dev/reference/react/isValidElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what createRef is in react-reference?\n\nAssistant: Sure, I'd be happy to explain createRef in react-reference.\n\n# createRef\n\nDocumentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.Here's a quick rundown of what this is about:\n\n## Pitfall\n\n`createRef` is mostly used for [class components.](https://react.dev/reference/react/Component) Function components typically rely on [`useRef`](https://react.dev/reference/react/useRef) instead.\n\n`createRef` creates a [ref](https://react.dev/learn/referencing-values-with-refs) object which can contain arbitrary value.\n\n```sp-pre-placeholder grow-[2]\n\nclass MyInput extends Component {\n\n  inputRef = createRef();\n\n  // ...\n\n}\n```\n\n## Reference\n\n### `createRef()`\n\nCall `createRef` to declare a [ref](https://react.dev/learn/referencing-values-with-refs) inside a [class component.](https://react.dev/reference/react/Component)\n\n```sp-pre-placeholder grow-[2]\n\nimport { createRef, Component } from 'react';\n\nclass MyComponent extends Component {\n\n  intervalRef = createRef();\n\n  inputRef = createRef();\n\n  // ...\n```\n\n## Parameters\n\n`createRef` takes no parameters.\n\n## Returns\n\n`createRef` returns an object with a single property:\n\n- `current`: Initially, it’s set to the `null`. You can later set it to something else. If you pass the ref object to React as a `ref` attribute to a JSX node, React will set its `current` property.\n\n## Caveats\n\n- `createRef` always returns a _different_ object. It’s equivalent to writing `{ current: null }` yourself.\n- In a function component, you probably want [`useRef`](https://react.dev/reference/react/useRef) instead which always returns the same object.\n- `const ref = useRef()` is equivalent to `const [ref, _] = useState(() => createRef(null))`.\n\n## Usage\n\n### Declaring a ref in a class component\n\nTo declare a ref inside a [class component,](https://react.dev/reference/react/Component) call `createRef` and assign its result to a class field:\n\n```sp-pre-placeholder grow-[2]\n\nimport { Component, createRef } from 'react';\n\nclass Form extends Component {\n\n  inputRef = createRef();\n\n  // ...\n\n}\n```\n\nIf you now pass `ref={this.inputRef}` to an `<input>` in your JSX, React will populate `this.inputRef.current` with the input DOM node. For example, here is how you make a button that focuses the input:\n\nApp.js\n\n```javascript\nimport { Component, createRef } from 'react';\n\nexport default class Form extends Component {\n  inputRef = createRef();\n\n  handleClick = () => {\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    return (\n      <>\n        <input ref={this.inputRef} />\n        <button onClick={this.handleClick}>\n          Focus the input\n        </button>\n      </>\n    );\n  }\n}\n```\n\n### Pitfall\n\n`createRef` is mostly used for [class components.](https://react.dev/reference/react/Component) Function components typically rely on [`useRef`](https://react.dev/reference/react/useRef) instead.\n\n## Alternatives\n\n### Migrating from a class with `createRef` to a function with `useRef`\n\nWe recommend using function components instead of [class components](https://react.dev/reference/react/Component) in new code. If you have some existing class components using `createRef`, here is how you can convert them. This is the original code:\n\nApp.js\n\n```javascript\nimport { Component, createRef } from 'react';\n\nexport default class Form extends Component {\n  inputRef = createRef();\n\n  handleClick = () => {\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    return (\n      <>\n        <input ref={this.inputRef} />\n        <button onClick={this.handleClick}>\n          Focus the input\n        </button>\n      </>\n    );\n  }\n}\n```\n\nWhen you [convert this component from a class to a function,](https://react.dev/reference/react/Component#alternatives) replace calls to `createRef` with calls to [`useRef`:](https://react.dev/reference/react/useRef)\n\nApp.js\n\n```javascript\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n```\n\n[PreviouscreateElement](https://react.dev/reference/react/createElement) [NextforwardRef](https://react.dev/reference/react/forwardRef)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "overview", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\n`createRef` is mostly used for [class components.](https://react.dev/reference/react/Component) Function components typically rely on [`useRef`](https://react.dev/reference/react/useRef) instead.\n\n`createRef` creates a [ref](https://react.dev/learn/referencing-values-with-refs) object which can contain arbitrary value.\n\n```sp-pre-placeholder grow-[2]\n\nclass MyInput extends Component {\n\n  inputRef = createRef();\n\n  // ...\n\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `createRef()`\n\nCall `createRef` to declare a [ref](https://react.dev/learn/referencing-values-with-refs) inside a [class component.](https://react.dev/reference/react/Component)\n\n```sp-pre-placeholder grow-[2]\n\nimport { createRef, Component } from 'react';\n\nclass MyComponent extends Component {\n\n  intervalRef = createRef();\n\n  inputRef = createRef();\n\n  // ...\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n`createRef` takes no parameters..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`createRef` returns an object with a single property:\n\n- `current`: Initially, it’s set to the `null`. You can later set it to something else. If you pass the ref object to React as a `ref` attribute to a JSX node, React will set its `current` property..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- `createRef` always returns a _different_ object. It’s equivalent to writing `{ current: null }` yourself.\n- In a function component, you probably want [`useRef`](https://react.dev/reference/react/useRef) instead which always returns the same object.\n- `const ref = useRef()` is equivalent to `const [ref, _] = useState(() => createRef(null))`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Declaring a ref in a class component\n\nTo declare a ref inside a [class component,](https://react.dev/reference/react/Component) call `createRef` and assign its result to a class field:\n\n```sp-pre-placeholder grow-[2]\n\nimport { Component, createRef } from 'react';\n\nclass Form extends Component {\n\n  inputRef = createRef();\n\n  // ...\n\n}\n```\n\nIf you now pass `ref={this.inputRef}` to an `<input>` in your JSX, React will populate `this.inputRef.current` with the input DOM node. For example, here is how you make a button that focuses the input:\n\nApp.js\n\n```javascript\nimport { Component, createRef } from 'react';\n\nexport default class Form extends Component {\n  inputRef = createRef();\n\n  handleClick = () => {\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    return (\n      <>\n        <input ref={this.inputRef} />\n        <button onClick={this.handleClick}>\n          Focus the input\n        </button>\n      </>\n    );\n  }\n}\n```\n\n### Pitfall\n\n`createRef` is mostly used for [class components.](https://react.dev/reference/react/Component) Function components typically rely on [`useRef`](https://react.dev/reference/react/useRef) instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I alternatives in react-reference?\n\nAssistant: To alternatives in react-reference, here's what you do:\n### Migrating from a class with `createRef` to a function with `useRef`\n\nWe recommend using function components instead of [class components](https://react.dev/reference/react/Component) in new code. If you have some existing class components using `createRef`, here is how you can convert them. This is the original code:\n\nApp.js\n\n```javascript\nimport { Component, createRef } from 'react';\n\nexport default class Form extends Component {\n  inputRef = createRef();\n\n  handleClick = () => {\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    return (\n      <>\n        <input ref={this.inputRef} />\n        <button onClick={this.handleClick}>\n          Focus the input\n        </button>\n      </>\n    );\n  }\n}\n```\n\nWhen you [convert this component from a class to a function,](https://react.dev/reference/react/Component#alternatives) replace calls to `createRef` with calls to [`useRef`:](https://react.dev/reference/react/useRef)\n\nApp.js\n\n```javascript\nimport { useRef } from 'react';\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <input ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n```\n\n[PreviouscreateElement](https://react.dev/reference/react/createElement) [NextforwardRef](https://react.dev/reference/react/forwardRef).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for createRef in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Declaring a ref in a class component**:\n\n```yaml\nimport { Component, createRef } from 'react';\n\nclass Form extends Component {\n  inputRef = createRef();\n\n  // ...\n}\n```\n\nThis snippet shows you how to declaring a ref in a class component, which is an important aspect of createref.\n\n**Using createRef in a class component**:\n\n```yaml\nimport { Component, createRef } from 'react';\n\nexport default class Form extends Component {\n  inputRef = createRef();\n\n  handleClick = () => {\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    return (\n      <>\n        <input ref={this.inputRef} />\n        <button onClick={this.handleClick}>\n          Focus the input\n        </button>\n      </>\n    );\n  }\n}\n```\n\nThis snippet shows you how to using createref in a class component, which is an important aspect of createref.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "code_examples", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using createRef in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\n`createRef` is mostly used for class components. Function components typically rely on `useRef` instead.\n\nWhen converting from class components to function components, replace `createRef` with `useRef`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/createRef", "title": "createRef", "description": "Documentation for the createRef API in React, detailing its usage, parameters, returns, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:11:14", "type": "best_practices", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "createRef – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:card": "summary_large_image", "ogTitle": "createRef – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/createRef", "twitter:creator": "@reactjs", "title": "createRef – React", "theme-color": "#23272f", "twitter:title": "createRef – React", "og:description": "The library for web and native user interfaces", "language": "en", "ogUrl": "https://react.dev/reference/react/createRef", "fb:app_id": "623268441017527", "scrapeId": "4f30c0e9-c5d8-4fd5-a0f2-32705c886f0e", "sourceURL": "https://react.dev/reference/react/createRef", "url": "https://react.dev/reference/react/createRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what <Fragment> (<>...</>) is in react-reference?\n\nAssistant: Sure, I'd be happy to explain <Fragment> (<>...</>) in react-reference.\n\n# <Fragment> (<>...</>)\n\n<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.Here's a quick rundown of what this is about:\n\n## Reference\n\nWrap elements in <Fragment> to group them together in situations where you need a single element. Grouping elements in Fragment has no effect on the resulting DOM; it is the same as if the elements were not grouped. The empty JSX tag <></> is shorthand for <Fragment></Fragment> in most cases.\n\n#### Props\n- **optional** `key`: Fragments declared with the explicit <Fragment> syntax may have [keys.](https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key)\n\n#### Caveats\n- If you want to pass `key` to a Fragment, you can’t use the `<>...</>` syntax. You have to explicitly import `Fragment` from 'react' and render <Fragment key={yourKey}>...</Fragment>.\n\n- React does not [reset state](https://react.dev/learn/preserving-and-resetting-state) when you go from rendering <><Child /></> to [<Child />] or back, or when you go from rendering <><Child /></> to <Child /> and back. This only works a single level deep: for example, going from <><><Child /></></> to <Child /> resets the state. See the precise semantics [here.](https://gist.github.com/clemmy/b3ef00f9507909429d8aa0d3ee4f986b)\n\n## Usage\n\nUse Fragment, or the equivalent <>...</> syntax, to group multiple elements together. You can use it to put multiple elements in any place where a single element can go. For example, a component can only return one element, but by using a Fragment you can group multiple elements together and then return them as a group:\n\n```javascript\nfunction Post() {\n  return (\n    <>\n      <PostTitle />\n      <PostBody />\n    </>\n  );\n}\n```\n\nFragments are useful because grouping elements with a Fragment has no effect on layout or styles, unlike if you wrapped the elements in another container like a DOM element. If you inspect this example with the browser tools, you’ll see that all <h1> and <article> DOM nodes appear as siblings without wrappers around them:\n\n```javascript\nexport default function Blog() {\n  return (\n    <>\n      <Post title=\"An update\" body=\"It's been a while since I posted...\" />\n      <Post title=\"My new blog\" body=\"I am starting a new blog!\" />\n    </>\n  )\n}\n\nfunction Post({ title, body }) {\n  return (\n    <>\n      <PostTitle title={title} />\n      <PostBody body={body} />\n    </>\n  );\n}\n\nfunction PostTitle({ title }) {\n  return <h1>{title}</h1>\n}\n\nfunction PostBody({ body }) {\n  return (\n    <article>\n      <p>{body}</p>\n    </article>\n  );\n}\n}\n```\n\n## Deep Dive\n\n#### How to write a Fragment without the special syntax?\nShow Details\n\nThe example above is equivalent to importing Fragment from React:\n\n```javascript\nimport { Fragment } from 'react';\n\nfunction Post() {\n  return (\n    <Fragment>\n      <PostTitle />\n      <PostBody />\n    </Fragment>\n  );\n}\n```\n\nUsually you won’t need this unless you need to [pass a `key` to your `Fragment`.](https://react.dev/reference/react/Fragment#rendering-a-list-of-fragments)\n\n## Assigning multiple elements to a variable\n\nLike any other element, you can assign Fragment elements to variables, pass them as props, and so on:\n\n```javascript\nfunction CloseDialog() {\n  const buttons = (\n    <>\n      <OKButton />\n      <CancelButton />\n    </>\n  );\n\n  return (\n    <AlertDialog buttons={buttons}>\n      Are you sure you want to leave this page?\n    </AlertDialog>\n  );\n}\n```\n\n## Grouping elements with text\n\nYou can use Fragment to group text together with components:\n\n```javascript\nfunction DateRangePicker({ start, end }) {\n  return (\n    <>\n      From\n      <DatePicker date={start} />\n      to\n      <DatePicker date={end} />\n    </>\n  );\n}\n```\n\n## Rendering a list of Fragments\n\nHere’s a situation where you need to write Fragment explicitly instead of using the <>...</> syntax. When you [render multiple elements in a loop](https://react.dev/learn/rendering-lists), you need to assign a key to each element. If the elements within the loop are Fragments, you need to use the normal JSX element syntax in order to provide the key attribute:\n\n```javascript\nfunction Blog() {\n  return posts.map(post =>\n    <Fragment key={post.id}>\n      <PostTitle title={post.title} />\n      <PostBody body={post.body} />\n    </Fragment>\n  );\n}\n```\n\nYou can inspect the DOM to verify that there are no wrapper elements around the Fragment children:\n\n```javascript\nimport { Fragment } from 'react';\n\nconst posts = [\n  { id: 1, title: 'An update', body: \"It's been a while since I posted...\" },\n  { id: 2, title: 'My new blog', body: 'I am starting a new blog!' }\n];\n\nexport default function Blog() {\n  return posts.map(post =>\n    <Fragment key={post.id}>\n      <PostTitle title={post.title} />\n      <PostBody body={post.body} />\n    </Fragment>\n  );\n}\n\nfunction PostTitle({ title }) {\n  return <h1>{title}</h1>\n}\n\nfunction PostBody({ body }) {\n  return (\n    <article>\n      <p>{body}</p>\n    </article>\n  );\n}\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "description": "<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:41", "type": "overview", "page_metadata": {"og:url": "https://react.dev/reference/react/Fragment", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:title": "<Fragment> (<>...</>) – React", "title": "<Fragment> (<>...</>) – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Fragment (.../) – React", "twitter:creator": "@reactjs", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react/Fragment", "ogTitle": "<Fragment> (<>...</>) – React", "msapplication-TileColor": "#2b5797", "scrapeId": "bcec6e35-7dc8-4e24-ad9b-266e46628d98", "sourceURL": "https://react.dev/reference/react/Fragment", "url": "https://react.dev/reference/react/Fragment", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nWrap elements in <Fragment> to group them together in situations where you need a single element. Grouping elements in Fragment has no effect on the resulting DOM; it is the same as if the elements were not grouped. The empty JSX tag <></> is shorthand for <Fragment></Fragment> in most cases.\n\n#### Props\n- **optional** `key`: Fragments declared with the explicit <Fragment> syntax may have [keys.](https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key)\n\n#### Caveats\n- If you want to pass `key` to a Fragment, you can’t use the `<>...</>` syntax. You have to explicitly import `Fragment` from 'react' and render <Fragment key={yourKey}>...</Fragment>.\n\n- React does not [reset state](https://react.dev/learn/preserving-and-resetting-state) when you go from rendering <><Child /></> to [<Child />] or back, or when you go from rendering <><Child /></> to <Child /> and back. This only works a single level deep: for example, going from <><><Child /></></> to <Child /> resets the state. See the precise semantics [here.](https://gist.github.com/clemmy/b3ef00f9507909429d8aa0d3ee4f986b).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "description": "<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:41", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react/Fragment", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:title": "<Fragment> (<>...</>) – React", "title": "<Fragment> (<>...</>) – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Fragment (.../) – React", "twitter:creator": "@reactjs", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react/Fragment", "ogTitle": "<Fragment> (<>...</>) – React", "msapplication-TileColor": "#2b5797", "scrapeId": "bcec6e35-7dc8-4e24-ad9b-266e46628d98", "sourceURL": "https://react.dev/reference/react/Fragment", "url": "https://react.dev/reference/react/Fragment", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nUse Fragment, or the equivalent <>...</> syntax, to group multiple elements together. You can use it to put multiple elements in any place where a single element can go. For example, a component can only return one element, but by using a Fragment you can group multiple elements together and then return them as a group:\n\n```javascript\nfunction Post() {\n  return (\n    <>\n      <PostTitle />\n      <PostBody />\n    </>\n  );\n}\n```\n\nFragments are useful because grouping elements with a Fragment has no effect on layout or styles, unlike if you wrapped the elements in another container like a DOM element. If you inspect this example with the browser tools, you’ll see that all <h1> and <article> DOM nodes appear as siblings without wrappers around them:\n\n```javascript\nexport default function Blog() {\n  return (\n    <>\n      <Post title=\"An update\" body=\"It's been a while since I posted...\" />\n      <Post title=\"My new blog\" body=\"I am starting a new blog!\" />\n    </>\n  )\n}\n\nfunction Post({ title, body }) {\n  return (\n    <>\n      <PostTitle title={title} />\n      <PostBody body={body} />\n    </>\n  );\n}\n\nfunction PostTitle({ title }) {\n  return <h1>{title}</h1>\n}\n\nfunction PostBody({ body }) {\n  return (\n    <article>\n      <p>{body}</p>\n    </article>\n  );\n}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "description": "<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:41", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react/Fragment", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:title": "<Fragment> (<>...</>) – React", "title": "<Fragment> (<>...</>) – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Fragment (.../) – React", "twitter:creator": "@reactjs", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react/Fragment", "ogTitle": "<Fragment> (<>...</>) – React", "msapplication-TileColor": "#2b5797", "scrapeId": "bcec6e35-7dc8-4e24-ad9b-266e46628d98", "sourceURL": "https://react.dev/reference/react/Fragment", "url": "https://react.dev/reference/react/Fragment", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deep dive in react-reference?\n\nAssistant: To deep dive in react-reference, here's what you do:\n#### How to write a Fragment without the special syntax?\nShow Details\n\nThe example above is equivalent to importing Fragment from React:\n\n```javascript\nimport { Fragment } from 'react';\n\nfunction Post() {\n  return (\n    <Fragment>\n      <PostTitle />\n      <PostBody />\n    </Fragment>\n  );\n}\n```\n\nUsually you won’t need this unless you need to [pass a `key` to your `Fragment`.](https://react.dev/reference/react/Fragment#rendering-a-list-of-fragments).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "description": "<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:41", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react/Fragment", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:title": "<Fragment> (<>...</>) – React", "title": "<Fragment> (<>...</>) – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Fragment (.../) – React", "twitter:creator": "@reactjs", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react/Fragment", "ogTitle": "<Fragment> (<>...</>) – React", "msapplication-TileColor": "#2b5797", "scrapeId": "bcec6e35-7dc8-4e24-ad9b-266e46628d98", "sourceURL": "https://react.dev/reference/react/Fragment", "url": "https://react.dev/reference/react/Fragment", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I assigning multiple elements to a variable in react-reference?\n\nAssistant: To assigning multiple elements to a variable in react-reference, here's what you do:\nLike any other element, you can assign Fragment elements to variables, pass them as props, and so on:\n\n```javascript\nfunction CloseDialog() {\n  const buttons = (\n    <>\n      <OKButton />\n      <CancelButton />\n    </>\n  );\n\n  return (\n    <AlertDialog buttons={buttons}>\n      Are you sure you want to leave this page?\n    </AlertDialog>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "description": "<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:41", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react/Fragment", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:title": "<Fragment> (<>...</>) – React", "title": "<Fragment> (<>...</>) – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Fragment (.../) – React", "twitter:creator": "@reactjs", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react/Fragment", "ogTitle": "<Fragment> (<>...</>) – React", "msapplication-TileColor": "#2b5797", "scrapeId": "bcec6e35-7dc8-4e24-ad9b-266e46628d98", "sourceURL": "https://react.dev/reference/react/Fragment", "url": "https://react.dev/reference/react/Fragment", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I grouping elements with text in react-reference?\n\nAssistant: To grouping elements with text in react-reference, here's what you do:\nYou can use Fragment to group text together with components:\n\n```javascript\nfunction DateRangePicker({ start, end }) {\n  return (\n    <>\n      From\n      <DatePicker date={start} />\n      to\n      <DatePicker date={end} />\n    </>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "description": "<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:41", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react/Fragment", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:title": "<Fragment> (<>...</>) – React", "title": "<Fragment> (<>...</>) – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Fragment (.../) – React", "twitter:creator": "@reactjs", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react/Fragment", "ogTitle": "<Fragment> (<>...</>) – React", "msapplication-TileColor": "#2b5797", "scrapeId": "bcec6e35-7dc8-4e24-ad9b-266e46628d98", "sourceURL": "https://react.dev/reference/react/Fragment", "url": "https://react.dev/reference/react/Fragment", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I rendering a list of fragments in react-reference?\n\nAssistant: To rendering a list of fragments in react-reference, here's what you do:\nHere’s a situation where you need to write Fragment explicitly instead of using the <>...</> syntax. When you [render multiple elements in a loop](https://react.dev/learn/rendering-lists), you need to assign a key to each element. If the elements within the loop are Fragments, you need to use the normal JSX element syntax in order to provide the key attribute:\n\n```javascript\nfunction Blog() {\n  return posts.map(post =>\n    <Fragment key={post.id}>\n      <PostTitle title={post.title} />\n      <PostBody body={post.body} />\n    </Fragment>\n  );\n}\n```\n\nYou can inspect the DOM to verify that there are no wrapper elements around the Fragment children:\n\n```javascript\nimport { Fragment } from 'react';\n\nconst posts = [\n  { id: 1, title: 'An update', body: \"It's been a while since I posted...\" },\n  { id: 2, title: 'My new blog', body: 'I am starting a new blog!' }\n];\n\nexport default function Blog() {\n  return posts.map(post =>\n    <Fragment key={post.id}>\n      <PostTitle title={post.title} />\n      <PostBody body={post.body} />\n    </Fragment>\n  );\n}\n\nfunction PostTitle({ title }) {\n  return <h1>{title}</h1>\n}\n\nfunction PostBody({ body }) {\n  return (\n    <article>\n      <p>{body}</p>\n    </article>\n  );\n}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "description": "<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:41", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react/Fragment", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:title": "<Fragment> (<>...</>) – React", "title": "<Fragment> (<>...</>) – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Fragment (.../) – React", "twitter:creator": "@reactjs", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react/Fragment", "ogTitle": "<Fragment> (<>...</>) – React", "msapplication-TileColor": "#2b5797", "scrapeId": "bcec6e35-7dc8-4e24-ad9b-266e46628d98", "sourceURL": "https://react.dev/reference/react/Fragment", "url": "https://react.dev/reference/react/Fragment", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for <Fragment> (<>...</>) in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Fragment Usage**:\n\n```yaml\n<>\n  <OneChild />\n  <AnotherChild />\n</>\n```\n\nThis snippet shows you how to basic fragment usage, which is an important aspect of <fragment> (<>...</>).\n\n**Post Component with Fragment**:\n\n```yaml\nfunction Post() {\n  return (\n    <>\n      <PostTitle />\n      <PostBody />\n    </>\n  );\n}\n```\n\nThis snippet shows you how to post component with fragment, which is an important aspect of <fragment> (<>...</>).\n\n", "metadata": {"source_url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "description": "<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:41", "type": "code_examples", "page_metadata": {"og:url": "https://react.dev/reference/react/Fragment", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:title": "<Fragment> (<>...</>) – React", "title": "<Fragment> (<>...</>) – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Fragment (.../) – React", "twitter:creator": "@reactjs", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react/Fragment", "ogTitle": "<Fragment> (<>...</>) – React", "msapplication-TileColor": "#2b5797", "scrapeId": "bcec6e35-7dc8-4e24-ad9b-266e46628d98", "sourceURL": "https://react.dev/reference/react/Fragment", "url": "https://react.dev/reference/react/Fragment", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using <Fragment> (<>...</>) in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nGrouping elements with a Fragment has no effect on layout or styles, unlike if you wrapped the elements in another container like a DOM element.\n\nIf you want to pass `key` to a Fragment, you can’t use the `<>...</>` syntax. You have to explicitly import `Fragment` from 'react' and render <Fragment key={yourKey}>...</Fragment>.\n\nReact does not reset state when you go from rendering <><Child /></> to [<Child />] or back.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "description": "<Fragment>, often used via <>...</> syntax, lets you group elements without a wrapper node.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:11:41", "type": "best_practices", "page_metadata": {"og:url": "https://react.dev/reference/react/Fragment", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:title": "<Fragment> (<>...</>) – React", "title": "<Fragment> (<>...</>) – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:title": "Fragment (.../) – React", "twitter:creator": "@reactjs", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react/Fragment", "ogTitle": "<Fragment> (<>...</>) – React", "msapplication-TileColor": "#2b5797", "scrapeId": "bcec6e35-7dc8-4e24-ad9b-266e46628d98", "sourceURL": "https://react.dev/reference/react/Fragment", "url": "https://react.dev/reference/react/Fragment", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what cloneElement is in react-reference?\n\nAssistant: Sure, I'd be happy to explain cloneElement in react-reference.\n\n# cloneElement\n\n`cloneElement` lets you create a new React element using another element as a starting point.Here's a quick rundown of what this is about:\n\n## Pitfall\n\nUsing `cloneElement` is uncommon and can lead to fragile code. [See common alternatives.](https://react.dev/reference/react/cloneElement#alternatives) \n\n`cloneElement` lets you create a new React element using another element as a starting point.\n\n## Reference\n\n### `cloneElement(element, props, ...children)`\n\nCall `cloneElement` to create a React element based on the `element`, but with different `props` and `children`:\n\n```javascript\nimport { cloneElement } from 'react';\n\n// ...\n\nconst clonedElement = cloneElement(\n\n  <Row title=\"Cabbage\">\n\n    Hello\n\n  </Row>,\n\n  { isHighlighted: true },\n\n  'Goodbye'\n);\n\nconsole.log(clonedElement); // <Row title=\"Cabbage\" isHighlighted={true}>Goodbye</Row>\n```\n\n[See more examples below.](https://react.dev/reference/react/cloneElement#usage) \n\n#### Parameters\n\n- `element`: The `element` argument must be a valid React element. For example, it could be a JSX node like `<Something />`, the result of calling [`createElement`](https://react.dev/reference/react/createElement), or the result of another `cloneElement` call.\n\n- `props`: The `props` argument must either be an object or `null`. If you pass `null`, the cloned element will retain all of the original `element.props`. Otherwise, for every prop in the `props` object, the returned element will “prefer” the value from `props` over the value from `element.props`. The rest of the props will be filled from the original `element.props`. If you pass `props.key` or `props.ref`, they will replace the original ones.\n\n- **optional** `...children`: Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers, [portals](https://react.dev/reference/react-dom/createPortal), empty nodes ( `null`, `undefined`, `true`, and `false`), and arrays of React nodes. If you don’t pass any `...children` arguments, the original `element.props.children` will be preserved.\n\n## Returns\n\n`cloneElement` returns a React element object with a few properties:\n\n- `type`: Same as `element.type`.\n- `props`: The result of shallowly merging `element.props` with the overriding `props` you have passed.\n- `ref`: The original `element.ref`, unless it was overridden by `props.ref`.\n- `key`: The original `element.key`, unless it was overridden by `props.key`.\n\nUsually, you’ll return the element from your component or make it a child of another element. Although you may read the element’s properties, it’s best to treat every element as opaque after it’s created, and only render it.\n\n## Caveats\n\n- Cloning an element **does not modify the original element.**\n\n- You should only **pass children as multiple arguments to `cloneElement` if they are all statically known,** like `cloneElement(element, null, child1, child2, child3)`. If your children are dynamic, pass the entire array as the third argument: `cloneElement(element, null, listItems)`. This ensures that React will [warn you about missing `key` s](https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key) for any dynamic lists. For static lists this is not necessary because they never reorder.\n\n- `cloneElement` makes it harder to trace the data flow, so **try the [alternatives](https://react.dev/reference/react/cloneElement#alternatives) instead.\n\n## Usage\n\n### Overriding props of an element\n\nTo override the props of some React element, pass it to `cloneElement` with the props you want to override:\n\n```javascript\nimport { cloneElement } from 'react';\n\n// ...\n\nconst clonedElement = cloneElement(\n\n  <Row title=\"Cabbage\" />,\n\n  { isHighlighted: true }\n);\n```\n\nHere, the resulting cloned element will be `<Row title=\"Cabbage\" isHighlighted={true} />`.\n\n**Let’s walk through an example to see when it’s useful.**\n\nImagine a `List` component that renders its [`children`](https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children) as a list of selectable rows with a “Next” button that changes which row is selected. The `List` component needs to render the selected `Row` differently, so it clones every `<Row>` child that it has received, and adds an extra `isHighlighted: true` or `isHighlighted: false` prop:\n\n```javascript\nexport default function List({ children }) {\n\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  return (\n\n    <div className=\"List\">\n\n      {Children.map(children, (child, index) =>\n\n        cloneElement(child, {\n\n          isHighlighted: index === selectedIndex\n\n        })\n\n      )}\n```\n\nLet’s say the original JSX received by `List` looks like this:\n\n```javascript\n<List>\n\n  <Row title=\"Cabbage\" />\n\n  <Row title=\"Garlic\" />\n\n  <Row title=\"Apple\" />\n\n</List>\n```\n\nBy cloning its children, the `List` can pass extra information to every `Row` inside. The result looks like this:\n\n```javascript\n<List>\n\n  <Row\n\n    title=\"Cabbage\"\n\n    isHighlighted={true}\n\n  />\n\n  <Row\n\n    title=\"Garlic\"\n\n    isHighlighted={false}\n\n  />\n\n  <Row\n\n    title=\"Apple\"\n\n    isHighlighted={false}\n\n  />\n\n</List>\n```\n\nNotice how pressing “Next” updates the state of the `List`, and highlights a different row.\n\n## Alternatives\n\n### Passing data with a render prop\n\nInstead of using `cloneElement`, consider accepting a _render prop_ like `renderItem`. Here, `List` receives `renderItem` as a prop. `List` calls `renderItem` for every item and passes `isHighlighted` as an argument:\n\n```javascript\nexport default function List({ items, renderItem }) {\n\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  return (\n\n    <div className=\"List\">\n\n      {items.map((item, index) => {\n\n        const isHighlighted = index === selectedIndex;\n\n        return renderItem(item, isHighlighted);\n\n      })}\n```\n\nThe `renderItem` prop is called a “render prop” because it’s a prop that specifies how to render something. For example, you can pass a `renderItem` implementation that renders a `<Row>` with the given `isHighlighted` value:\n\n```javascript\n<List\n\n  items={products}\n\n  renderItem={(product, isHighlighted) =>\n\n    <Row\n\n      key={product.id}\n\n      title={product.title}\n\n      isHighlighted={isHighlighted}\n\n    />\n\n  }\n\n/>\n```\n\nThe end result is the same as with `cloneElement`:\n\n```javascript\n<List>\n\n  <Row\n\n    title=\"Cabbage\"\n\n    isHighlighted={true}\n\n  />\n\n  <Row\n\n    title=\"Garlic\"\n\n    isHighlighted={false}\n\n  />\n\n  <Row\n\n    title=\"Apple\"\n\n    isHighlighted={false}\n\n  />\n\n</List>\n```\n\nHowever, you can clearly trace where the `isHighlighted` value is coming from.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "description": "`cloneElement` lets you create a new React element using another element as a starting point.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:12:31", "type": "overview", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "cloneElement – React", "twitter:title": "cloneElement – React", "og:title": "cloneElement – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cloneElement", "language": "en", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/cloneElement", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cloneElement – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "5aced859-93ea-4324-8252-874085dae1d7", "sourceURL": "https://react.dev/reference/react/cloneElement", "url": "https://react.dev/reference/react/cloneElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\nUsing `cloneElement` is uncommon and can lead to fragile code. [See common alternatives.](https://react.dev/reference/react/cloneElement#alternatives) \n\n`cloneElement` lets you create a new React element using another element as a starting point..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "description": "`cloneElement` lets you create a new React element using another element as a starting point.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:12:31", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "cloneElement – React", "twitter:title": "cloneElement – React", "og:title": "cloneElement – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cloneElement", "language": "en", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/cloneElement", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cloneElement – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "5aced859-93ea-4324-8252-874085dae1d7", "sourceURL": "https://react.dev/reference/react/cloneElement", "url": "https://react.dev/reference/react/cloneElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `cloneElement(element, props, ...children)`\n\nCall `cloneElement` to create a React element based on the `element`, but with different `props` and `children`:\n\n```javascript\nimport { cloneElement } from 'react';\n\n// ...\n\nconst clonedElement = cloneElement(\n\n  <Row title=\"Cabbage\">\n\n    Hello\n\n  </Row>,\n\n  { isHighlighted: true },\n\n  'Goodbye'\n);\n\nconsole.log(clonedElement); // <Row title=\"Cabbage\" isHighlighted={true}>Goodbye</Row>\n```\n\n[See more examples below.](https://react.dev/reference/react/cloneElement#usage) \n\n#### Parameters\n\n- `element`: The `element` argument must be a valid React element. For example, it could be a JSX node like `<Something />`, the result of calling [`createElement`](https://react.dev/reference/react/createElement), or the result of another `cloneElement` call.\n\n- `props`: The `props` argument must either be an object or `null`. If you pass `null`, the cloned element will retain all of the original `element.props`. Otherwise, for every prop in the `props` object, the returned element will “prefer” the value from `props` over the value from `element.props`. The rest of the props will be filled from the original `element.props`. If you pass `props.key` or `props.ref`, they will replace the original ones.\n\n- **optional** `...children`: Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers, [portals](https://react.dev/reference/react-dom/createPortal), empty nodes ( `null`, `undefined`, `true`, and `false`), and arrays of React nodes. If you don’t pass any `...children` arguments, the original `element.props.children` will be preserved..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "description": "`cloneElement` lets you create a new React element using another element as a starting point.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:12:31", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "cloneElement – React", "twitter:title": "cloneElement – React", "og:title": "cloneElement – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cloneElement", "language": "en", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/cloneElement", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cloneElement – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "5aced859-93ea-4324-8252-874085dae1d7", "sourceURL": "https://react.dev/reference/react/cloneElement", "url": "https://react.dev/reference/react/cloneElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`cloneElement` returns a React element object with a few properties:\n\n- `type`: Same as `element.type`.\n- `props`: The result of shallowly merging `element.props` with the overriding `props` you have passed.\n- `ref`: The original `element.ref`, unless it was overridden by `props.ref`.\n- `key`: The original `element.key`, unless it was overridden by `props.key`.\n\nUsually, you’ll return the element from your component or make it a child of another element. Although you may read the element’s properties, it’s best to treat every element as opaque after it’s created, and only render it..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "description": "`cloneElement` lets you create a new React element using another element as a starting point.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:12:31", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "cloneElement – React", "twitter:title": "cloneElement – React", "og:title": "cloneElement – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cloneElement", "language": "en", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/cloneElement", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cloneElement – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "5aced859-93ea-4324-8252-874085dae1d7", "sourceURL": "https://react.dev/reference/react/cloneElement", "url": "https://react.dev/reference/react/cloneElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- Cloning an element **does not modify the original element.**\n\n- You should only **pass children as multiple arguments to `cloneElement` if they are all statically known,** like `cloneElement(element, null, child1, child2, child3)`. If your children are dynamic, pass the entire array as the third argument: `cloneElement(element, null, listItems)`. This ensures that React will [warn you about missing `key` s](https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key) for any dynamic lists. For static lists this is not necessary because they never reorder.\n\n- `cloneElement` makes it harder to trace the data flow, so **try the [alternatives](https://react.dev/reference/react/cloneElement#alternatives) instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "description": "`cloneElement` lets you create a new React element using another element as a starting point.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:12:31", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "cloneElement – React", "twitter:title": "cloneElement – React", "og:title": "cloneElement – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cloneElement", "language": "en", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/cloneElement", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cloneElement – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "5aced859-93ea-4324-8252-874085dae1d7", "sourceURL": "https://react.dev/reference/react/cloneElement", "url": "https://react.dev/reference/react/cloneElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Overriding props of an element\n\nTo override the props of some React element, pass it to `cloneElement` with the props you want to override:\n\n```javascript\nimport { cloneElement } from 'react';\n\n// ...\n\nconst clonedElement = cloneElement(\n\n  <Row title=\"Cabbage\" />,\n\n  { isHighlighted: true }\n);\n```\n\nHere, the resulting cloned element will be `<Row title=\"Cabbage\" isHighlighted={true} />`.\n\n**Let’s walk through an example to see when it’s useful.**\n\nImagine a `List` component that renders its [`children`](https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children) as a list of selectable rows with a “Next” button that changes which row is selected. The `List` component needs to render the selected `Row` differently, so it clones every `<Row>` child that it has received, and adds an extra `isHighlighted: true` or `isHighlighted: false` prop:\n\n```javascript\nexport default function List({ children }) {\n\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  return (\n\n    <div className=\"List\">\n\n      {Children.map(children, (child, index) =>\n\n        cloneElement(child, {\n\n          isHighlighted: index === selectedIndex\n\n        })\n\n      )}\n```\n\nLet’s say the original JSX received by `List` looks like this:\n\n```javascript\n<List>\n\n  <Row title=\"Cabbage\" />\n\n  <Row title=\"Garlic\" />\n\n  <Row title=\"Apple\" />\n\n</List>\n```\n\nBy cloning its children, the `List` can pass extra information to every `Row` inside. The result looks like this:\n\n```javascript\n<List>\n\n  <Row\n\n    title=\"Cabbage\"\n\n    isHighlighted={true}\n\n  />\n\n  <Row\n\n    title=\"Garlic\"\n\n    isHighlighted={false}\n\n  />\n\n  <Row\n\n    title=\"Apple\"\n\n    isHighlighted={false}\n\n  />\n\n</List>\n```\n\nNotice how pressing “Next” updates the state of the `List`, and highlights a different row..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "description": "`cloneElement` lets you create a new React element using another element as a starting point.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:12:31", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "cloneElement – React", "twitter:title": "cloneElement – React", "og:title": "cloneElement – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cloneElement", "language": "en", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/cloneElement", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cloneElement – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "5aced859-93ea-4324-8252-874085dae1d7", "sourceURL": "https://react.dev/reference/react/cloneElement", "url": "https://react.dev/reference/react/cloneElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I alternatives in react-reference?\n\nAssistant: To alternatives in react-reference, here's what you do:\n### Passing data with a render prop\n\nInstead of using `cloneElement`, consider accepting a _render prop_ like `renderItem`. Here, `List` receives `renderItem` as a prop. `List` calls `renderItem` for every item and passes `isHighlighted` as an argument:\n\n```javascript\nexport default function List({ items, renderItem }) {\n\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  return (\n\n    <div className=\"List\">\n\n      {items.map((item, index) => {\n\n        const isHighlighted = index === selectedIndex;\n\n        return renderItem(item, isHighlighted);\n\n      })}\n```\n\nThe `renderItem` prop is called a “render prop” because it’s a prop that specifies how to render something. For example, you can pass a `renderItem` implementation that renders a `<Row>` with the given `isHighlighted` value:\n\n```javascript\n<List\n\n  items={products}\n\n  renderItem={(product, isHighlighted) =>\n\n    <Row\n\n      key={product.id}\n\n      title={product.title}\n\n      isHighlighted={isHighlighted}\n\n    />\n\n  }\n\n/>\n```\n\nThe end result is the same as with `cloneElement`:\n\n```javascript\n<List>\n\n  <Row\n\n    title=\"Cabbage\"\n\n    isHighlighted={true}\n\n  />\n\n  <Row\n\n    title=\"Garlic\"\n\n    isHighlighted={false}\n\n  />\n\n  <Row\n\n    title=\"Apple\"\n\n    isHighlighted={false}\n\n  />\n\n</List>\n```\n\nHowever, you can clearly trace where the `isHighlighted` value is coming from..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "description": "`cloneElement` lets you create a new React element using another element as a starting point.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:12:31", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "cloneElement – React", "twitter:title": "cloneElement – React", "og:title": "cloneElement – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cloneElement", "language": "en", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/cloneElement", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cloneElement – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "5aced859-93ea-4324-8252-874085dae1d7", "sourceURL": "https://react.dev/reference/react/cloneElement", "url": "https://react.dev/reference/react/cloneElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for cloneElement in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Cloning an Element**:\n\n```yaml\nconst clonedElement = cloneElement(element, props, ...children)\n```\n\nThis snippet shows you how to cloning an element, which is an important aspect of cloneelement.\n\n**Overriding Props Example**:\n\n```yaml\nconst clonedElement = cloneElement(\n  <Row title=\"Cabbage\" />,\n  { isHighlighted: true }\n);\n```\n\nThis snippet shows you how to overriding props example, which is an important aspect of cloneelement.\n\n**List Component Example**:\n\n```yaml\nexport default function List({ children }) {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  return (\n    <div className=\"List\">\n      {Children.map(children, (child, index) =>\n        cloneElement(child, {\n          isHighlighted: index === selectedIndex\n        })\n      )}\n      <hr />\n      <button onClick={() => {\n        setSelectedIndex(i =>\n          (i + 1) % Children.count(children)\n        );\n      }}>\n        Next\n      </button>\n    </div>\n  );\n}\n```\n\nThis snippet shows you how to list component example, which is an important aspect of cloneelement.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "description": "`cloneElement` lets you create a new React element using another element as a starting point.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:12:31", "type": "code_examples", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "cloneElement – React", "twitter:title": "cloneElement – React", "og:title": "cloneElement – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cloneElement", "language": "en", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/cloneElement", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cloneElement – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "5aced859-93ea-4324-8252-874085dae1d7", "sourceURL": "https://react.dev/reference/react/cloneElement", "url": "https://react.dev/reference/react/cloneElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using cloneElement in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCloning children makes it hard to tell how the data flows through your app. Try one of the alternatives.\n\nYou should only pass children as multiple arguments to `cloneElement` if they are all statically known. If your children are dynamic, pass the entire array as the third argument.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "description": "`cloneElement` lets you create a new React element using another element as a starting point.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:12:31", "type": "best_practices", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "cloneElement – React", "twitter:title": "cloneElement – React", "og:title": "cloneElement – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react/cloneElement", "language": "en", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react/cloneElement", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "cloneElement – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "scrapeId": "5aced859-93ea-4324-8252-874085dae1d7", "sourceURL": "https://react.dev/reference/react/cloneElement", "url": "https://react.dev/reference/react/cloneElement", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what StrictMode is in react-reference?\n\nAssistant: Sure, I'd be happy to explain StrictMode in react-reference.\n\n# StrictMode\n\n<StrictMode> lets you find common bugs in your components early during development.Here's a quick rundown of what this is about:\n\n## Reference\n\nUse `StrictMode` to enable additional development behaviors and warnings for the component tree inside:\n\n```javascript\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n```\n\nStrict Mode enables the following development-only behaviors:\n\n- Your components will [re-render an extra time](https://react.dev/reference/react/StrictMode#fixing-bugs-found-by-double-rendering-in-development) to find bugs caused by impure rendering.\n- Your components will [re-run Effects an extra time](https://react.dev/reference/react/StrictMode#fixing-bugs-found-by-re-running-effects-in-development) to find bugs caused by missing Effect cleanup.\n- Your components will [re-run refs callbacks an extra time](https://react.dev/reference/react/StrictMode#fixing-bugs-found-by-re-running-ref-callbacks-in-development) to find bugs caused by missing ref cleanup.\n- Your components will [be checked for usage of deprecated APIs.](https://react.dev/reference/react/StrictMode#fixing-deprecation-warnings-enabled-by-strict-mode) \n\n#### Props\n\n`StrictMode` accepts no props.\n\n#### Caveats\n\n- There is no way to opt out of Strict Mode inside a tree wrapped in `<StrictMode>`. This gives you confidence that all components inside `<StrictMode>` are checked. If two teams working on a product disagree whether they find the checks valuable, they need to either reach consensus or move `<StrictMode>` down in the tree.\n\n## Usage\n\n### Enabling Strict Mode for entire app\n\nStrict Mode enables extra development-only checks for the entire component tree inside the `<StrictMode>` component. These checks help you find common bugs in your components early in the development process.\n\nTo enable Strict Mode for your entire app, wrap your root component with `<StrictMode>` when you render it:\n\n```javascript\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n```\n\nWe recommend wrapping your entire app in Strict Mode, especially for newly created apps. If you use a framework that calls [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) for you, check its documentation for how to enable Strict Mode.\n\nAlthough the Strict Mode checks **only run in development,** they help you find bugs that already exist in your code but can be tricky to reliably reproduce in production. Strict Mode lets you fix bugs before your users report them.\n\n## Enabling Strict Mode for a part of the app\n\nYou can also enable Strict Mode for any part of your application:\n\n```javascript\nimport { StrictMode } from 'react';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <StrictMode>\n        <main>\n          <Sidebar />\n          <Content />\n        </main>\n      </StrictMode>\n      <Footer />\n    </>\n  );\n}\n```\n\nIn this example, Strict Mode checks will not run against the `Header` and `Footer` components. However, they will run on `Sidebar` and `Content`, as well as all of the components inside them, no matter how deep.\n\n## Fixing bugs found by double rendering in development\n\n[React assumes that every component you write is a pure function.](https://react.dev/learn/keeping-components-pure) This means that React components you write must always return the same JSX given the same inputs (props, state, and context).\n\nComponents breaking this rule behave unpredictably and cause bugs. To help you find accidentally impure code, Strict Mode calls some of your functions (only the ones that should be pure) **twice in development.** This includes:\n\n- Your component function body (only top-level logic, so this doesn’t include code inside event handlers)\n- Functions that you pass to [`useState`](https://react.dev/reference/react/useState), [`set` functions](https://react.dev/reference/react/useState#setstate), [`useMemo`](https://react.dev/reference/react/useMemo), or [`useReducer`](https://react.dev/reference/react/useReducer)\n- Some class component methods like [`constructor`](https://react.dev/reference/react/Component#constructor), [`render`](https://react.dev/reference/react/Component#render), [`shouldComponentUpdate`](https://react.dev/reference/react/Component#shouldcomponentupdate) ( [see the whole list](https://reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects))\n\nIf a function is pure, running it twice does not change its behavior because a pure function produces the same result every time. However, if a function is impure (for example, it mutates the data it receives), running it twice tends to be noticeable (that’s what makes it impure!) This helps you spot and fix the bug early.\n\n## Fixing bugs found by re-running Effects in development\n\nStrict Mode can also help find bugs in [Effects.](https://react.dev/learn/synchronizing-with-effects)\n\nEvery Effect has some setup code and may have some cleanup code. Normally, React calls setup when the component _mounts_ (is added to the screen) and calls cleanup when the component _unmounts_ (is removed from the screen). React then calls cleanup and setup again if its dependencies changed since the last render.\n\nWhen Strict Mode is on, React will also run **one extra setup+cleanup cycle in development for every Effect.** This may feel surprising, but it helps reveal subtle bugs that are hard to catch manually.\n\n## Fixing bugs found by re-running ref callbacks in development\n\nStrict Mode can also help find bugs in [callbacks refs.](https://react.dev/learn/manipulating-the-dom-with-refs)\n\nEvery callback `ref` has some setup code and may have some cleanup code. Normally, React calls setup when the element is _created_ (is added to the DOM) and calls cleanup when the element is _removed_ (is removed from the DOM).\n\nWhen Strict Mode is on, React will also run **one extra setup+cleanup cycle in development for every callback `ref`.** This may feel surprising, but it helps reveal subtle bugs that are hard to catch manually.\n\n## Fixing deprecation warnings enabled by Strict Mode\n\nReact warns if some component anywhere inside a `<StrictMode>` tree uses one of these deprecated APIs:\n\n- `UNSAFE_` class lifecycle methods like [`UNSAFE_componentWillMount`](https://react.dev/reference/react/Component#unsafe_componentwillmount). [See alternatives.](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#migrating-from-legacy-lifecycles)\n\nThese APIs are primarily used in older [class components](https://react.dev/reference/react/Component) so they rarely appear in modern apps.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "overview", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nUse `StrictMode` to enable additional development behaviors and warnings for the component tree inside:\n\n```javascript\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n```\n\nStrict Mode enables the following development-only behaviors:\n\n- Your components will [re-render an extra time](https://react.dev/reference/react/StrictMode#fixing-bugs-found-by-double-rendering-in-development) to find bugs caused by impure rendering.\n- Your components will [re-run Effects an extra time](https://react.dev/reference/react/StrictMode#fixing-bugs-found-by-re-running-effects-in-development) to find bugs caused by missing Effect cleanup.\n- Your components will [re-run refs callbacks an extra time](https://react.dev/reference/react/StrictMode#fixing-bugs-found-by-re-running-ref-callbacks-in-development) to find bugs caused by missing ref cleanup.\n- Your components will [be checked for usage of deprecated APIs.](https://react.dev/reference/react/StrictMode#fixing-deprecation-warnings-enabled-by-strict-mode) \n\n#### Props\n\n`StrictMode` accepts no props.\n\n#### Caveats\n\n- There is no way to opt out of Strict Mode inside a tree wrapped in `<StrictMode>`. This gives you confidence that all components inside `<StrictMode>` are checked. If two teams working on a product disagree whether they find the checks valuable, they need to either reach consensus or move `<StrictMode>` down in the tree..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Enabling Strict Mode for entire app\n\nStrict Mode enables extra development-only checks for the entire component tree inside the `<StrictMode>` component. These checks help you find common bugs in your components early in the development process.\n\nTo enable Strict Mode for your entire app, wrap your root component with `<StrictMode>` when you render it:\n\n```javascript\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n```\n\nWe recommend wrapping your entire app in Strict Mode, especially for newly created apps. If you use a framework that calls [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) for you, check its documentation for how to enable Strict Mode.\n\nAlthough the Strict Mode checks **only run in development,** they help you find bugs that already exist in your code but can be tricky to reliably reproduce in production. Strict Mode lets you fix bugs before your users report them..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I enabling strict mode for a part of the app in react-reference?\n\nAssistant: To enabling strict mode for a part of the app in react-reference, here's what you do:\nYou can also enable Strict Mode for any part of your application:\n\n```javascript\nimport { StrictMode } from 'react';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <StrictMode>\n        <main>\n          <Sidebar />\n          <Content />\n        </main>\n      </StrictMode>\n      <Footer />\n    </>\n  );\n}\n```\n\nIn this example, Strict Mode checks will not run against the `Header` and `Footer` components. However, they will run on `Sidebar` and `Content`, as well as all of the components inside them, no matter how deep..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I fixing bugs found by double rendering in development in react-reference?\n\nAssistant: To fixing bugs found by double rendering in development in react-reference, here's what you do:\n[React assumes that every component you write is a pure function.](https://react.dev/learn/keeping-components-pure) This means that React components you write must always return the same JSX given the same inputs (props, state, and context).\n\nComponents breaking this rule behave unpredictably and cause bugs. To help you find accidentally impure code, Strict Mode calls some of your functions (only the ones that should be pure) **twice in development.** This includes:\n\n- Your component function body (only top-level logic, so this doesn’t include code inside event handlers)\n- Functions that you pass to [`useState`](https://react.dev/reference/react/useState), [`set` functions](https://react.dev/reference/react/useState#setstate), [`useMemo`](https://react.dev/reference/react/useMemo), or [`useReducer`](https://react.dev/reference/react/useReducer)\n- Some class component methods like [`constructor`](https://react.dev/reference/react/Component#constructor), [`render`](https://react.dev/reference/react/Component#render), [`shouldComponentUpdate`](https://react.dev/reference/react/Component#shouldcomponentupdate) ( [see the whole list](https://reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects))\n\nIf a function is pure, running it twice does not change its behavior because a pure function produces the same result every time. However, if a function is impure (for example, it mutates the data it receives), running it twice tends to be noticeable (that’s what makes it impure!) This helps you spot and fix the bug early..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I fixing bugs found by re-running effects in development in react-reference?\n\nAssistant: To fixing bugs found by re-running effects in development in react-reference, here's what you do:\nStrict Mode can also help find bugs in [Effects.](https://react.dev/learn/synchronizing-with-effects)\n\nEvery Effect has some setup code and may have some cleanup code. Normally, React calls setup when the component _mounts_ (is added to the screen) and calls cleanup when the component _unmounts_ (is removed from the screen). React then calls cleanup and setup again if its dependencies changed since the last render.\n\nWhen Strict Mode is on, React will also run **one extra setup+cleanup cycle in development for every Effect.** This may feel surprising, but it helps reveal subtle bugs that are hard to catch manually..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I fixing bugs found by re-running ref callbacks in development in react-reference?\n\nAssistant: To fixing bugs found by re-running ref callbacks in development in react-reference, here's what you do:\nStrict Mode can also help find bugs in [callbacks refs.](https://react.dev/learn/manipulating-the-dom-with-refs)\n\nEvery callback `ref` has some setup code and may have some cleanup code. Normally, React calls setup when the element is _created_ (is added to the DOM) and calls cleanup when the element is _removed_ (is removed from the DOM).\n\nWhen Strict Mode is on, React will also run **one extra setup+cleanup cycle in development for every callback `ref`.** This may feel surprising, but it helps reveal subtle bugs that are hard to catch manually..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I fixing deprecation warnings enabled by strict mode in react-reference?\n\nAssistant: To fixing deprecation warnings enabled by strict mode in react-reference, here's what you do:\nReact warns if some component anywhere inside a `<StrictMode>` tree uses one of these deprecated APIs:\n\n- `UNSAFE_` class lifecycle methods like [`UNSAFE_componentWillMount`](https://react.dev/reference/react/Component#unsafe_componentwillmount). [See alternatives.](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#migrating-from-legacy-lifecycles)\n\nThese APIs are primarily used in older [class components](https://react.dev/reference/react/Component) so they rarely appear in modern apps..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "section_detail", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for StrictMode in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of StrictMode**:\n\n```yaml\n<StrictMode>\n  <App />\n</StrictMode>\n```\n\nThis snippet shows you how to basic usage of strictmode, which is an important aspect of strictmode.\n\n**Enabling Strict Mode for entire app**:\n\n```yaml\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n```\n\nThis snippet shows you how to enabling strict mode for entire app, which is an important aspect of strictmode.\n\n**Enabling Strict Mode for a part of the app**:\n\n```yaml\nimport { StrictMode } from 'react';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <StrictMode>\n        <main>\n          <Sidebar />\n          <Content />\n        </main>\n      </StrictMode>\n      <Footer />\n    </>\n  );\n}\n```\n\nThis snippet shows you how to enabling strict mode for a part of the app, which is an important aspect of strictmode.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "code_examples", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using StrictMode in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWrap your entire app in Strict Mode, especially for newly created apps.\n\nIf you use a framework that calls createRoot for you, check its documentation for how to enable Strict Mode.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/StrictMode", "title": "StrictMode", "description": "<StrictMode> lets you find common bugs in your components early during development.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:14:14", "type": "best_practices", "page_metadata": {"twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react/StrictMode", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:title": "<StrictMode> – React", "og:type": "website", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "title": "<StrictMode> – React", "ogTitle": "<StrictMode> – React", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogUrl": "https://react.dev/reference/react/StrictMode", "twitter:title": "StrictMode – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:creator": "@reactjs", "scrapeId": "ee5ba99e-de77-4a1e-89ec-87b21737041c", "sourceURL": "https://react.dev/reference/react/StrictMode", "url": "https://react.dev/reference/react/StrictMode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what forwardRef is in react-reference?\n\nAssistant: Sure, I'd be happy to explain forwardRef in react-reference.\n\n# forwardRef\n\nThe forwardRef API in React allows components to forward refs to their children, enabling parent components to directly interact with child DOM nodes or components.Here's a quick rundown of what this is about:\n\n## Deprecated\n\nIn React 19, `forwardRef` is no longer necessary. Pass `ref` as a prop instead.\n\n`forwardRef` will deprecated in a future release. Learn more [here](https://react.dev/blog/2024/04/25/react-19#ref-as-a-prop).\n\n`forwardRef` lets your component expose a DOM node to parent component with a [ref.](https://react.dev/learn/manipulating-the-dom-with-refs)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/forwardRef", "title": "forwardRef", "description": "The forwardRef API in React allows components to forward refs to their children, enabling parent components to directly interact with child DOM nodes or components.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:14:20", "type": "overview", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "ogTitle": "forwardRef – React", "ogUrl": "https://react.dev/reference/react/forwardRef", "og:url": "https://react.dev/reference/react/forwardRef", "twitter:title": "forwardRef – React", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "forwardRef – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "theme-color": "#23272f", "language": "en", "title": "forwardRef – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "53649200-3e09-483e-9251-2f4d631b2bd3", "sourceURL": "https://react.dev/reference/react/forwardRef", "url": "https://react.dev/reference/react/forwardRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deprecated in react-reference?\n\nAssistant: To deprecated in react-reference, here's what you do:\nIn React 19, `forwardRef` is no longer necessary. Pass `ref` as a prop instead.\n\n`forwardRef` will deprecated in a future release. Learn more [here](https://react.dev/blog/2024/04/25/react-19#ref-as-a-prop).\n\n`forwardRef` lets your component expose a DOM node to parent component with a [ref.](https://react.dev/learn/manipulating-the-dom-with-refs).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/forwardRef", "title": "forwardRef", "description": "The forwardRef API in React allows components to forward refs to their children, enabling parent components to directly interact with child DOM nodes or components.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:14:20", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "ogTitle": "forwardRef – React", "ogUrl": "https://react.dev/reference/react/forwardRef", "og:url": "https://react.dev/reference/react/forwardRef", "twitter:title": "forwardRef – React", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "forwardRef – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "theme-color": "#23272f", "language": "en", "title": "forwardRef – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "53649200-3e09-483e-9251-2f4d631b2bd3", "sourceURL": "https://react.dev/reference/react/forwardRef", "url": "https://react.dev/reference/react/forwardRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for forwardRef in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of forwardRef**:\n\n```yaml\nconst SomeComponent = forwardRef(render)\n```\n\nThis snippet shows you how to basic usage of forwardref, which is an important aspect of forwardref.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/forwardRef", "title": "forwardRef", "description": "The forwardRef API in React allows components to forward refs to their children, enabling parent components to directly interact with child DOM nodes or components.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:14:20", "type": "code_examples", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "ogTitle": "forwardRef – React", "ogUrl": "https://react.dev/reference/react/forwardRef", "og:url": "https://react.dev/reference/react/forwardRef", "twitter:title": "forwardRef – React", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "forwardRef – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "theme-color": "#23272f", "language": "en", "title": "forwardRef – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "53649200-3e09-483e-9251-2f4d631b2bd3", "sourceURL": "https://react.dev/reference/react/forwardRef", "url": "https://react.dev/reference/react/forwardRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using forwardRef in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDo not overuse refs. You should only use refs for imperative behaviors that you can’t express as props: for example, scrolling to a node, focusing a node, triggering an animation, selecting text, and so on.\n\nIf you can express something as a prop, you should not use a ref. For example, instead of exposing an imperative handle like { open, close } from a Modal component, it is better to take isOpen as a prop like <Modal isOpen={isOpen} />.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/forwardRef", "title": "forwardRef", "description": "The forwardRef API in React allows components to forward refs to their children, enabling parent components to directly interact with child DOM nodes or components.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:14:20", "type": "best_practices", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "ogTitle": "forwardRef – React", "ogUrl": "https://react.dev/reference/react/forwardRef", "og:url": "https://react.dev/reference/react/forwardRef", "twitter:title": "forwardRef – React", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "og:type": "website", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "forwardRef – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "theme-color": "#23272f", "language": "en", "title": "forwardRef – React", "viewport": "width=device-width, initial-scale=1", "scrapeId": "53649200-3e09-483e-9251-2f4d631b2bd3", "sourceURL": "https://react.dev/reference/react/forwardRef", "url": "https://react.dev/reference/react/forwardRef", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useActionState is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useActionState in react-reference.\n\n# useActionState\n\n`useActionState` is a Hook that allows you to update state based on the result of a form action.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useActionState(action, initialState, permalink?)`\n\nCall `useActionState` at the top level of your component to create component state that is updated [when a form action is invoked](https://react.dev/reference/react-dom/components/form). You pass `useActionState` an existing form action function as well as an initial state, and it returns a new action that you use in your form, along with the latest form state and whether the Action is still pending. The latest form state is also passed to the function that you provided.\n\n```sp-pre-placeholder grow-[2]\n\nimport { useActionState } from \"react\";\n\nasync function increment(previousState, formData) {\n\n  return previousState + 1;\n\n}\n\nfunction StatefulForm({}) {\n\n  const [state, formAction] = useActionState(increment, 0);\n\n  return (\n\n    <form>\n\n      {state}\n\n      <button formAction={formAction}>Increment</button>\n\n    </form>\n\n  )\n\n}\n```\n\nThe form state is the value returned by the action when the form was last submitted. If the form has not yet been submitted, it is the initial state that you pass.\n\nIf used with a Server Function, `useActionState` allows the server’s response from submitting the form to be shown even before hydration has completed.\n\n## Parameters\n\n- `fn`: The function to be called when the form is submitted or button pressed. When the function is called, it will receive the previous state of the form (initially the `initialState` that you pass, subsequently its previous return value) as its initial argument, followed by the arguments that a form action normally receives.\n- `initialState`: The value you want the state to be initially. It can be any serializable value. This argument is ignored after the action is first invoked.\n- **optional** `permalink`: A string containing the unique page URL that this form modifies. For use on pages with dynamic content (eg: feeds) in conjunction with progressive enhancement: if `fn` is a [server function](https://react.dev/reference/rsc/server-functions) and the form is submitted before the JavaScript bundle loads, the browser will navigate to the specified permalink URL, rather than the current page’s URL. Ensure that the same form component is rendered on the destination page (including the same action `fn` and `permalink`) so that React knows how to pass the state through. Once the form has been hydrated, this parameter has no effect.\n\n## Returns\n\n`useActionState` returns an array with the following values:\n\n1. The current state. During the first render, it will match the `initialState` you have passed. After the action is invoked, it will match the value returned by the action.\n2. A new action that you can pass as the `action` prop to your `form` component or `formAction` prop to any `button` component within the form. The action can also be called manually within [`startTransition`](https://react.dev/reference/react/startTransition).\n3. The `isPending` flag that tells you whether there is a pending Transition.\n\n## Caveats\n\n- When used with a framework that supports React Server Components, `useActionState` lets you make forms interactive before JavaScript has executed on the client. When used without Server Components, it is equivalent to component local state.\n- The function passed to `useActionState` receives an extra argument, the previous or initial state, as its first argument. This makes its signature different than if it were used directly as a form action without using `useActionState`.\n\n## Usage\n\n### Using information returned by a form action\n\nCall `useActionState` at the top level of your component to access the return value of an action from the last time a form was submitted.\n\n```sp-pre-placeholder grow-[2]\n\nimport { useActionState } from 'react';\n\nimport { action } from './actions.js';\n\nfunction MyComponent() {\n\n  const [state, formAction] = useActionState(action, null);\n\n  // ...\n\n  return (\n\n    <form action={formAction}>\n\n      {/* ... */}\n\n    </form>\n\n  );\n}\n```\n\n`useActionState` returns an array with the following items:\n\n1. The current state of the form, which is initially set to the initial state you provided, and after the form is submitted is set to the return value of the action you provided.\n2. A new action that you pass to `<form>` as its `action` prop or call manually within `startTransition`.\n3. A pending state that you can utilise while your action is processing.\n\nWhen the form is submitted, the action function that you provided will be called. Its return value will become the new current state of the form.\n\nThe action that you provide will also receive a new first argument, namely the current state of the form. The first time the form is submitted, this will be the initial state you provided, while with subsequent submissions, it will be the return value from the last time the action was called. The rest of the arguments are the same as if `useActionState` had not been used.\n\n## Troubleshooting\n\n### My action can no longer read the submitted form data\n\nWhen you wrap an action with `useActionState`, it gets an extra argument _as its first argument_. The submitted form data is therefore its _second_ argument instead of its first as it would usually be. The new first argument that gets added is the current state of the form.\n\n```sp-pre-placeholder grow-[2]\n\nfunction action(currentState, formData) {\n\n  // ...\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useActionState", "title": "useActionState", "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:14:45", "type": "overview", "page_metadata": {"theme-color": "#23272f", "twitter:title": "useActionState – React", "ogTitle": "useActionState – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useActionState", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useActionState", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "title": "useActionState – React", "og:title": "useActionState – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "9b241d0d-b403-4420-bb4f-f727f2b71a98", "sourceURL": "https://react.dev/reference/react/useActionState", "url": "https://react.dev/reference/react/useActionState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useActionState(action, initialState, permalink?)`\n\nCall `useActionState` at the top level of your component to create component state that is updated [when a form action is invoked](https://react.dev/reference/react-dom/components/form). You pass `useActionState` an existing form action function as well as an initial state, and it returns a new action that you use in your form, along with the latest form state and whether the Action is still pending. The latest form state is also passed to the function that you provided.\n\n```sp-pre-placeholder grow-[2]\n\nimport { useActionState } from \"react\";\n\nasync function increment(previousState, formData) {\n\n  return previousState + 1;\n\n}\n\nfunction StatefulForm({}) {\n\n  const [state, formAction] = useActionState(increment, 0);\n\n  return (\n\n    <form>\n\n      {state}\n\n      <button formAction={formAction}>Increment</button>\n\n    </form>\n\n  )\n\n}\n```\n\nThe form state is the value returned by the action when the form was last submitted. If the form has not yet been submitted, it is the initial state that you pass.\n\nIf used with a Server Function, `useActionState` allows the server’s response from submitting the form to be shown even before hydration has completed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useActionState", "title": "useActionState", "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:14:45", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "twitter:title": "useActionState – React", "ogTitle": "useActionState – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useActionState", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useActionState", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "title": "useActionState – React", "og:title": "useActionState – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "9b241d0d-b403-4420-bb4f-f727f2b71a98", "sourceURL": "https://react.dev/reference/react/useActionState", "url": "https://react.dev/reference/react/useActionState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `fn`: The function to be called when the form is submitted or button pressed. When the function is called, it will receive the previous state of the form (initially the `initialState` that you pass, subsequently its previous return value) as its initial argument, followed by the arguments that a form action normally receives.\n- `initialState`: The value you want the state to be initially. It can be any serializable value. This argument is ignored after the action is first invoked.\n- **optional** `permalink`: A string containing the unique page URL that this form modifies. For use on pages with dynamic content (eg: feeds) in conjunction with progressive enhancement: if `fn` is a [server function](https://react.dev/reference/rsc/server-functions) and the form is submitted before the JavaScript bundle loads, the browser will navigate to the specified permalink URL, rather than the current page’s URL. Ensure that the same form component is rendered on the destination page (including the same action `fn` and `permalink`) so that React knows how to pass the state through. Once the form has been hydrated, this parameter has no effect..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useActionState", "title": "useActionState", "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:14:45", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "twitter:title": "useActionState – React", "ogTitle": "useActionState – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useActionState", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useActionState", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "title": "useActionState – React", "og:title": "useActionState – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "9b241d0d-b403-4420-bb4f-f727f2b71a98", "sourceURL": "https://react.dev/reference/react/useActionState", "url": "https://react.dev/reference/react/useActionState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`useActionState` returns an array with the following values:\n\n1. The current state. During the first render, it will match the `initialState` you have passed. After the action is invoked, it will match the value returned by the action.\n2. A new action that you can pass as the `action` prop to your `form` component or `formAction` prop to any `button` component within the form. The action can also be called manually within [`startTransition`](https://react.dev/reference/react/startTransition).\n3. The `isPending` flag that tells you whether there is a pending Transition..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useActionState", "title": "useActionState", "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:14:45", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "twitter:title": "useActionState – React", "ogTitle": "useActionState – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useActionState", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useActionState", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "title": "useActionState – React", "og:title": "useActionState – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "9b241d0d-b403-4420-bb4f-f727f2b71a98", "sourceURL": "https://react.dev/reference/react/useActionState", "url": "https://react.dev/reference/react/useActionState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- When used with a framework that supports React Server Components, `useActionState` lets you make forms interactive before JavaScript has executed on the client. When used without Server Components, it is equivalent to component local state.\n- The function passed to `useActionState` receives an extra argument, the previous or initial state, as its first argument. This makes its signature different than if it were used directly as a form action without using `useActionState`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useActionState", "title": "useActionState", "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:14:45", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "twitter:title": "useActionState – React", "ogTitle": "useActionState – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useActionState", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useActionState", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "title": "useActionState – React", "og:title": "useActionState – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "9b241d0d-b403-4420-bb4f-f727f2b71a98", "sourceURL": "https://react.dev/reference/react/useActionState", "url": "https://react.dev/reference/react/useActionState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Using information returned by a form action\n\nCall `useActionState` at the top level of your component to access the return value of an action from the last time a form was submitted.\n\n```sp-pre-placeholder grow-[2]\n\nimport { useActionState } from 'react';\n\nimport { action } from './actions.js';\n\nfunction MyComponent() {\n\n  const [state, formAction] = useActionState(action, null);\n\n  // ...\n\n  return (\n\n    <form action={formAction}>\n\n      {/* ... */}\n\n    </form>\n\n  );\n}\n```\n\n`useActionState` returns an array with the following items:\n\n1. The current state of the form, which is initially set to the initial state you provided, and after the form is submitted is set to the return value of the action you provided.\n2. A new action that you pass to `<form>` as its `action` prop or call manually within `startTransition`.\n3. A pending state that you can utilise while your action is processing.\n\nWhen the form is submitted, the action function that you provided will be called. Its return value will become the new current state of the form.\n\nThe action that you provide will also receive a new first argument, namely the current state of the form. The first time the form is submitted, this will be the initial state you provided, while with subsequent submissions, it will be the return value from the last time the action was called. The rest of the arguments are the same as if `useActionState` had not been used..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useActionState", "title": "useActionState", "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:14:45", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "twitter:title": "useActionState – React", "ogTitle": "useActionState – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useActionState", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useActionState", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "title": "useActionState – React", "og:title": "useActionState – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "9b241d0d-b403-4420-bb4f-f727f2b71a98", "sourceURL": "https://react.dev/reference/react/useActionState", "url": "https://react.dev/reference/react/useActionState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### My action can no longer read the submitted form data\n\nWhen you wrap an action with `useActionState`, it gets an extra argument _as its first argument_. The submitted form data is therefore its _second_ argument instead of its first as it would usually be. The new first argument that gets added is the current state of the form.\n\n```sp-pre-placeholder grow-[2]\n\nfunction action(currentState, formData) {\n\n  // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useActionState", "title": "useActionState", "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:14:45", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "twitter:title": "useActionState – React", "ogTitle": "useActionState – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useActionState", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useActionState", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "title": "useActionState – React", "og:title": "useActionState – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "9b241d0d-b403-4420-bb4f-f727f2b71a98", "sourceURL": "https://react.dev/reference/react/useActionState", "url": "https://react.dev/reference/react/useActionState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useActionState in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useActionState Example**:\n\n```yaml\nconst [state, formAction, isPending] = useActionState(fn, initialState, permalink?);\n```\n\nThis snippet shows you how to basic useactionstate example, which is an important aspect of useactionstate.\n\n**StatefulForm Example**:\n\n```yaml\nimport { useActionState } from \"react\";\n\nasync function increment(previousState, formData) {\n  return previousState + 1;\n}\n\nfunction StatefulForm({}) {\n  const [state, formAction] = useActionState(increment, 0);\n  return (\n    <form>\n      {state}\n      <button formAction={formAction}>Increment</button>\n    </form>\n  )\n}\n```\n\nThis snippet shows you how to statefulform example, which is an important aspect of useactionstate.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useActionState", "title": "useActionState", "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:14:45", "type": "code_examples", "page_metadata": {"theme-color": "#23272f", "twitter:title": "useActionState – React", "ogTitle": "useActionState – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useActionState", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useActionState", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "title": "useActionState – React", "og:title": "useActionState – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "9b241d0d-b403-4420-bb4f-f727f2b71a98", "sourceURL": "https://react.dev/reference/react/useActionState", "url": "https://react.dev/reference/react/useActionState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useActionState in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCall `useActionState` at the top level of your component to create component state that is updated when a form action is invoked.\n\nEnsure that the same form component is rendered on the destination page (including the same action `fn` and `permalink`) so that React knows how to pass the state through.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useActionState", "title": "useActionState", "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:14:45", "type": "best_practices", "page_metadata": {"theme-color": "#23272f", "twitter:title": "useActionState – React", "ogTitle": "useActionState – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "ogUrl": "https://react.dev/reference/react/useActionState", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/react/useActionState", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "title": "useActionState – React", "og:title": "useActionState – React", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "9b241d0d-b403-4420-bb4f-f727f2b71a98", "sourceURL": "https://react.dev/reference/react/useActionState", "url": "https://react.dev/reference/react/useActionState", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useDeferredValue is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useDeferredValue in react-reference.\n\n# useDeferredValue\n\n`useDeferredValue` is a React Hook that lets you defer updating a part of the UI.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `useDeferredValue(value, initialValue?)`\n\nCall `useDeferredValue` at the top level of your component to get a deferred version of that value.\n\n```sp-pre-placeholder grow-[2]\nimport { useState, useDeferredValue } from 'react';\n\nfunction SearchPage() {\n\n  const [query, setQuery] = useState('');\n\n  const deferredQuery = useDeferredValue(query);\n\n  // ...\n}\n```\n\n#### Parameters\n- `value`: The value you want to defer. It can have any type.\n- **optional** `initialValue`: A value to use during the initial render of a component. If this option is omitted, `useDeferredValue` will not defer during the initial render, because there’s no previous version of `value` that it can render instead.\n\n#### Returns\n- `currentValue`: During the initial render, the returned deferred value will be the `initialValue`, or the same as the value you provided. During updates, React will first attempt a re-render with the old value (so it will return the old value), and then try another re-render in the background with the new value (so it will return the updated value).\n\n## Caveats\n\n- When an update is inside a Transition, `useDeferredValue` always returns the new `value` and does not spawn a deferred render, since the update is already deferred.\n\n- The values you pass to `useDeferredValue` should either be primitive values (like strings and numbers) or objects created outside of rendering. If you create a new object during rendering and immediately pass it to `useDeferredValue`, it will be different on every render, causing unnecessary background re-renders.\n\n- When `useDeferredValue` receives a different value (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), in addition to the current render (when it still uses the previous value), it schedules a re-render in the background with the new value. The background re-render is interruptible: if there’s another update to the `value`, React will restart the background re-render from scratch. For example, if the user is typing into an input faster than a chart receiving its deferred value can re-render, the chart will only re-render after the user stops typing.\n\n- `useDeferredValue` is integrated with [`<Suspense>`.](https://react.dev/reference/react/Suspense) If the background update caused by a new value suspends the UI, the user will not see the fallback. They will see the old deferred value until the data loads.\n\n- `useDeferredValue` does not by itself prevent extra network requests.\n\n- There is no fixed delay caused by `useDeferredValue` itself. As soon as React finishes the original re-render, React will immediately start working on the background re-render with the new deferred value. Any updates caused by events (like typing) will interrupt the background re-render and get prioritized over it.\n\n- The background re-render caused by `useDeferredValue` does not fire Effects until it’s committed to the screen. If the background re-render suspends, its Effects will run after the data loads and the UI updates.\n\n## Usage\n\n### Showing stale content while fresh content is loading\n\nCall `useDeferredValue` at the top level of your component to defer updating some part of your UI.\n\n```sp-pre-placeholder grow-[2]\nimport { useState, useDeferredValue } from 'react';\n\nfunction SearchPage() {\n\n  const [query, setQuery] = useState('');\n\n  const deferredQuery = useDeferredValue(query);\n\n  // ...\n}\n```\n\nDuring the initial render, the deferred value will be the same as the value you provided.\n\nDuring updates, the deferred value will “lag behind” the latest value. In particular, React will first re-render _without_ updating the deferred value, and then try to re-render with the newly received value in the background.\n\n**Let’s walk through an example to see when this is useful.**\n\n### Note\n\nThis example assumes you use a Suspense-enabled data source:\n\n- Data fetching with Suspense-enabled frameworks like [Relay](https://relay.dev/docs/guided-tour/rendering/loading-states/) and [Next.js](https://nextjs.org/docs/app/getting-started/fetching-data#with-suspense)\n- Lazy-loading component code with [`lazy`](https://react.dev/reference/react/lazy)\n- Reading the value of a Promise with [`use`](https://react.dev/reference/react/use)\n\n[Learn more about Suspense and its limitations.](https://react.dev/reference/react/Suspense)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react/useDeferredValue", "title": "useDeferredValue", "description": "`useDeferredValue` is a React Hook that lets you defer updating a part of the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:05", "type": "overview", "page_metadata": {"msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogTitle": "useDeferredValue – React", "ogUrl": "https://react.dev/reference/react/useDeferredValue", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useDeferredValue – React", "og:url": "https://react.dev/reference/react/useDeferredValue", "viewport": "width=device-width, initial-scale=1", "og:title": "useDeferredValue – React", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:title": "useDeferredValue – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e8f08016-c2f8-4cb2-99c2-31eae7f5f020", "sourceURL": "https://react.dev/reference/react/useDeferredValue", "url": "https://react.dev/reference/react/useDeferredValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `useDeferredValue(value, initialValue?)`\n\nCall `useDeferredValue` at the top level of your component to get a deferred version of that value.\n\n```sp-pre-placeholder grow-[2]\nimport { useState, useDeferredValue } from 'react';\n\nfunction SearchPage() {\n\n  const [query, setQuery] = useState('');\n\n  const deferredQuery = useDeferredValue(query);\n\n  // ...\n}\n```\n\n#### Parameters\n- `value`: The value you want to defer. It can have any type.\n- **optional** `initialValue`: A value to use during the initial render of a component. If this option is omitted, `useDeferredValue` will not defer during the initial render, because there’s no previous version of `value` that it can render instead.\n\n#### Returns\n- `currentValue`: During the initial render, the returned deferred value will be the `initialValue`, or the same as the value you provided. During updates, React will first attempt a re-render with the old value (so it will return the old value), and then try another re-render in the background with the new value (so it will return the updated value)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useDeferredValue", "title": "useDeferredValue", "description": "`useDeferredValue` is a React Hook that lets you defer updating a part of the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogTitle": "useDeferredValue – React", "ogUrl": "https://react.dev/reference/react/useDeferredValue", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useDeferredValue – React", "og:url": "https://react.dev/reference/react/useDeferredValue", "viewport": "width=device-width, initial-scale=1", "og:title": "useDeferredValue – React", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:title": "useDeferredValue – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e8f08016-c2f8-4cb2-99c2-31eae7f5f020", "sourceURL": "https://react.dev/reference/react/useDeferredValue", "url": "https://react.dev/reference/react/useDeferredValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- When an update is inside a Transition, `useDeferredValue` always returns the new `value` and does not spawn a deferred render, since the update is already deferred.\n\n- The values you pass to `useDeferredValue` should either be primitive values (like strings and numbers) or objects created outside of rendering. If you create a new object during rendering and immediately pass it to `useDeferredValue`, it will be different on every render, causing unnecessary background re-renders.\n\n- When `useDeferredValue` receives a different value (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), in addition to the current render (when it still uses the previous value), it schedules a re-render in the background with the new value. The background re-render is interruptible: if there’s another update to the `value`, React will restart the background re-render from scratch. For example, if the user is typing into an input faster than a chart receiving its deferred value can re-render, the chart will only re-render after the user stops typing.\n\n- `useDeferredValue` is integrated with [`<Suspense>`.](https://react.dev/reference/react/Suspense) If the background update caused by a new value suspends the UI, the user will not see the fallback. They will see the old deferred value until the data loads.\n\n- `useDeferredValue` does not by itself prevent extra network requests.\n\n- There is no fixed delay caused by `useDeferredValue` itself. As soon as React finishes the original re-render, React will immediately start working on the background re-render with the new deferred value. Any updates caused by events (like typing) will interrupt the background re-render and get prioritized over it.\n\n- The background re-render caused by `useDeferredValue` does not fire Effects until it’s committed to the screen. If the background re-render suspends, its Effects will run after the data loads and the UI updates..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useDeferredValue", "title": "useDeferredValue", "description": "`useDeferredValue` is a React Hook that lets you defer updating a part of the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogTitle": "useDeferredValue – React", "ogUrl": "https://react.dev/reference/react/useDeferredValue", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useDeferredValue – React", "og:url": "https://react.dev/reference/react/useDeferredValue", "viewport": "width=device-width, initial-scale=1", "og:title": "useDeferredValue – React", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:title": "useDeferredValue – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e8f08016-c2f8-4cb2-99c2-31eae7f5f020", "sourceURL": "https://react.dev/reference/react/useDeferredValue", "url": "https://react.dev/reference/react/useDeferredValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Showing stale content while fresh content is loading\n\nCall `useDeferredValue` at the top level of your component to defer updating some part of your UI.\n\n```sp-pre-placeholder grow-[2]\nimport { useState, useDeferredValue } from 'react';\n\nfunction SearchPage() {\n\n  const [query, setQuery] = useState('');\n\n  const deferredQuery = useDeferredValue(query);\n\n  // ...\n}\n```\n\nDuring the initial render, the deferred value will be the same as the value you provided.\n\nDuring updates, the deferred value will “lag behind” the latest value. In particular, React will first re-render _without_ updating the deferred value, and then try to re-render with the newly received value in the background.\n\n**Let’s walk through an example to see when this is useful.**\n\n### Note\n\nThis example assumes you use a Suspense-enabled data source:\n\n- Data fetching with Suspense-enabled frameworks like [Relay](https://relay.dev/docs/guided-tour/rendering/loading-states/) and [Next.js](https://nextjs.org/docs/app/getting-started/fetching-data#with-suspense)\n- Lazy-loading component code with [`lazy`](https://react.dev/reference/react/lazy)\n- Reading the value of a Promise with [`use`](https://react.dev/reference/react/use)\n\n[Learn more about Suspense and its limitations.](https://react.dev/reference/react/Suspense).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react/useDeferredValue", "title": "useDeferredValue", "description": "`useDeferredValue` is a React Hook that lets you defer updating a part of the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:05", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogTitle": "useDeferredValue – React", "ogUrl": "https://react.dev/reference/react/useDeferredValue", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useDeferredValue – React", "og:url": "https://react.dev/reference/react/useDeferredValue", "viewport": "width=device-width, initial-scale=1", "og:title": "useDeferredValue – React", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:title": "useDeferredValue – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e8f08016-c2f8-4cb2-99c2-31eae7f5f020", "sourceURL": "https://react.dev/reference/react/useDeferredValue", "url": "https://react.dev/reference/react/useDeferredValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useDeferredValue in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic useDeferredValue Example**:\n\n```yaml\nconst deferredValue = useDeferredValue(value)\n```\n\nThis snippet shows you how to basic usedeferredvalue example, which is an important aspect of usedeferredvalue.\n\n", "metadata": {"source_url": "https://react.dev/reference/react/useDeferredValue", "title": "useDeferredValue", "description": "`useDeferredValue` is a React Hook that lets you defer updating a part of the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:05", "type": "code_examples", "page_metadata": {"msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogTitle": "useDeferredValue – React", "ogUrl": "https://react.dev/reference/react/useDeferredValue", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useDeferredValue – React", "og:url": "https://react.dev/reference/react/useDeferredValue", "viewport": "width=device-width, initial-scale=1", "og:title": "useDeferredValue – React", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:title": "useDeferredValue – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e8f08016-c2f8-4cb2-99c2-31eae7f5f020", "sourceURL": "https://react.dev/reference/react/useDeferredValue", "url": "https://react.dev/reference/react/useDeferredValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useDeferredValue in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCall `useDeferredValue` at the top level of your component to get a deferred version of that value.\n\nUse `useDeferredValue` to prioritize updating the input over updating the result list to keep the UI responsive.\n\nWrap components that receive deferred values in `memo` to prevent unnecessary re-renders.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react/useDeferredValue", "title": "useDeferredValue", "description": "`useDeferredValue` is a React Hook that lets you defer updating a part of the UI.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:05", "type": "best_practices", "page_metadata": {"msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "ogTitle": "useDeferredValue – React", "ogUrl": "https://react.dev/reference/react/useDeferredValue", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "title": "useDeferredValue – React", "og:url": "https://react.dev/reference/react/useDeferredValue", "viewport": "width=device-width, initial-scale=1", "og:title": "useDeferredValue – React", "fb:app_id": "623268441017527", "twitter:creator": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "twitter:title": "useDeferredValue – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e8f08016-c2f8-4cb2-99c2-31eae7f5f020", "sourceURL": "https://react.dev/reference/react/useDeferredValue", "url": "https://react.dev/reference/react/useDeferredValue", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what preloadModule is in react-reference?\n\nAssistant: Sure, I'd be happy to explain preloadModule in react-reference.\n\n# preloadModule\n\nThe preloadModule API allows you to eagerly fetch an ESM module that you expect to use.Here's a quick rundown of what this is about:\n\n## Note\n\nReact-based frameworks frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details.\n\n## Reference\n\nTo preload an ESM module, call the preloadModule function from react-dom.\n\nThe preloadModule function provides the browser with a hint that it should start downloading the given module, which can save time.\n\n#### Parameters\n- `href`: a string. The URL of the module you want to download.\n- `options`: an object. It contains the following properties:\n  - `as`: a required string. It must be 'script'.\n  - `crossOrigin`: a string. The CORS policy to use. Its possible values are `anonymous` and `use-credentials`.\n  - `integrity`: a string. A cryptographic hash of the module, to verify its authenticity.\n  - `nonce`: a string. A cryptographic nonce to allow the module when using a strict Content Security Policy.\n\n#### Returns\n`preloadModule` returns nothing.\n\n#### Caveats\n- Multiple calls to `preloadModule` with the same `href` have the same effect as a single call.\n- In the browser, you can call `preloadModule` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `preloadModule` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n\n## Usage\n\nCall `preloadModule` when rendering a component if you know that it or its children will use a specific module.\n\nIf you want the browser to start executing the module immediately (rather than just downloading it), use `preinitModule` instead. If you want to load a script that isn’t an ESM module, use `preload`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preloadModule", "title": "preloadModule", "description": "The preloadModule API allows you to eagerly fetch an ESM module that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:17", "type": "overview", "page_metadata": {"title": "preloadModule – React", "ogTitle": "preloadModule – React", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react-dom/preloadModule", "twitter:title": "preloadModule – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "preloadModule – React", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/preloadModule", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "language": "en", "scrapeId": "8a5ab0f3-9027-47e7-baef-0634cd2b1e4e", "sourceURL": "https://react.dev/reference/react-dom/preloadModule", "url": "https://react.dev/reference/react-dom/preloadModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I note in react-reference?\n\nAssistant: To note in react-reference, here's what you do:\nReact-based frameworks frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preloadModule", "title": "preloadModule", "description": "The preloadModule API allows you to eagerly fetch an ESM module that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:17", "type": "section_detail", "page_metadata": {"title": "preloadModule – React", "ogTitle": "preloadModule – React", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react-dom/preloadModule", "twitter:title": "preloadModule – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "preloadModule – React", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/preloadModule", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "language": "en", "scrapeId": "8a5ab0f3-9027-47e7-baef-0634cd2b1e4e", "sourceURL": "https://react.dev/reference/react-dom/preloadModule", "url": "https://react.dev/reference/react-dom/preloadModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nTo preload an ESM module, call the preloadModule function from react-dom.\n\nThe preloadModule function provides the browser with a hint that it should start downloading the given module, which can save time.\n\n#### Parameters\n- `href`: a string. The URL of the module you want to download.\n- `options`: an object. It contains the following properties:\n  - `as`: a required string. It must be 'script'.\n  - `crossOrigin`: a string. The CORS policy to use. Its possible values are `anonymous` and `use-credentials`.\n  - `integrity`: a string. A cryptographic hash of the module, to verify its authenticity.\n  - `nonce`: a string. A cryptographic nonce to allow the module when using a strict Content Security Policy.\n\n#### Returns\n`preloadModule` returns nothing.\n\n#### Caveats\n- Multiple calls to `preloadModule` with the same `href` have the same effect as a single call.\n- In the browser, you can call `preloadModule` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `preloadModule` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preloadModule", "title": "preloadModule", "description": "The preloadModule API allows you to eagerly fetch an ESM module that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:17", "type": "section_detail", "page_metadata": {"title": "preloadModule – React", "ogTitle": "preloadModule – React", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react-dom/preloadModule", "twitter:title": "preloadModule – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "preloadModule – React", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/preloadModule", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "language": "en", "scrapeId": "8a5ab0f3-9027-47e7-baef-0634cd2b1e4e", "sourceURL": "https://react.dev/reference/react-dom/preloadModule", "url": "https://react.dev/reference/react-dom/preloadModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nCall `preloadModule` when rendering a component if you know that it or its children will use a specific module.\n\nIf you want the browser to start executing the module immediately (rather than just downloading it), use `preinitModule` instead. If you want to load a script that isn’t an ESM module, use `preload`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preloadModule", "title": "preloadModule", "description": "The preloadModule API allows you to eagerly fetch an ESM module that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:17", "type": "section_detail", "page_metadata": {"title": "preloadModule – React", "ogTitle": "preloadModule – React", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react-dom/preloadModule", "twitter:title": "preloadModule – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "preloadModule – React", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/preloadModule", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "language": "en", "scrapeId": "8a5ab0f3-9027-47e7-baef-0634cd2b1e4e", "sourceURL": "https://react.dev/reference/react-dom/preloadModule", "url": "https://react.dev/reference/react-dom/preloadModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for preloadModule in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of preloadModule**:\n\n```yaml\npreloadModule(\"https://example.com/module.js\", {as: \"script\"});\n```\n\nThis snippet shows you how to basic usage of preloadmodule, which is an important aspect of preloadmodule.\n\n**Preloading when rendering**:\n\n```yaml\nimport { preloadModule } from 'react-dom';\n\nfunction AppRoot() {\n    preloadModule(\"https://example.com/module.js\", {as: \"script\"});\n    return ...;\n}\n```\n\nThis snippet shows you how to preloading when rendering, which is an important aspect of preloadmodule.\n\n**Preloading in an event handler**:\n\n```yaml\nimport { preloadModule } from 'react-dom';\n\nfunction CallToAction() {\n    const onClick = () => {\n        preloadModule(\"https://example.com/module.js\", {as: \"script\"});\n        startWizard();\n    }\n    return (\n        <button onClick={onClick}>Start Wizard</button>\n    );\n}\n```\n\nThis snippet shows you how to preloading in an event handler, which is an important aspect of preloadmodule.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/preloadModule", "title": "preloadModule", "description": "The preloadModule API allows you to eagerly fetch an ESM module that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:17", "type": "code_examples", "page_metadata": {"title": "preloadModule – React", "ogTitle": "preloadModule – React", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react-dom/preloadModule", "twitter:title": "preloadModule – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "preloadModule – React", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/preloadModule", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "language": "en", "scrapeId": "8a5ab0f3-9027-47e7-baef-0634cd2b1e4e", "sourceURL": "https://react.dev/reference/react-dom/preloadModule", "url": "https://react.dev/reference/react-dom/preloadModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using preloadModule in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReact-based frameworks frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details.\n\nIf you want the browser to start executing the module immediately, use `preinitModule` instead.\n\nIf you want to load a script that isn’t an ESM module, use `preload` instead.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preloadModule", "title": "preloadModule", "description": "The preloadModule API allows you to eagerly fetch an ESM module that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:15:17", "type": "best_practices", "page_metadata": {"title": "preloadModule – React", "ogTitle": "preloadModule – React", "twitter:card": "summary_large_image", "ogUrl": "https://react.dev/reference/react-dom/preloadModule", "twitter:title": "preloadModule – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:title": "preloadModule – React", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/preloadModule", "ogDescription": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "language": "en", "scrapeId": "8a5ab0f3-9027-47e7-baef-0634cd2b1e4e", "sourceURL": "https://react.dev/reference/react-dom/preloadModule", "url": "https://react.dev/reference/react-dom/preloadModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Server Components is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Server Components in react-reference.\n\n# Server Components\n\nThis page covers the concept of React Server Components, their usage, and how they differ from traditional components.Here's a quick rundown of what this is about:\n\n## React Server Components\n\nServer Components are for use in React Server Components. Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.\n\n- [Server Components without a Server](https://react.dev/reference/rsc/server-components#server-components-without-a-server)\n- [Server Components with a Server](https://react.dev/reference/rsc/server-components#server-components-with-a-server)\n- [Adding interactivity to Server Components](https://react.dev/reference/rsc/server-components#adding-interactivity-to-server-components)\n- [Async components with Server Components](https://react.dev/reference/rsc/server-components#async-components-with-server-components)\n\n## Note\n\nWhile React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.\n\nTo support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future.\n\n## Server Components without a Server\n\nServer components can run at build time to read from the filesystem or fetch static content, so a web server is not required. For example, you may want to read static data from a content management system.\n\nWithout Server Components, it’s common to fetch static data on the client with an Effect:\n\n```javascript\n// bundle.js\n\nimport marked from 'marked'; // 35.9K (11.2K gzipped)\n\nimport sanitizeHtml from 'sanitize-html'; // 206K (63.3K gzipped)\n\nfunction Page({page}) {\n\n  const [content, setContent] = useState('');\n\n  // NOTE: loads *after* first page render.\n\n  useEffect(() => {\n\n    fetch(`/api/content/${page}`).then((data) => {\n\n      setContent(data.content);\n\n    });\n\n  }, [page]);\n\n\n  return <div>{sanitizeHtml(marked(content))}</div>;\n}\n```\n\n```javascript\n// api.js\n\napp.get(`/api/content/:page`, async (req, res) => {\n\n  const page = req.params.page;\n\n  const content = await file.readFile(`${page}.md`);\n\n  res.send({content});\n});\n```\n\nThis pattern means users need to download and parse an additional 75K (gzipped) of libraries, and wait for a second request to fetch the data after the page loads, just to render static content that will not change for the lifetime of the page.\n\nWith Server Components, you can render these components once at build time:\n\n```javascript\nimport marked from 'marked'; // Not included in bundle\n\nimport sanitizeHtml from 'sanitize-html'; // Not included in bundle\n\nasync function Page({page}) {\n\n  // NOTE: loads *during* render, when the app is built.\n\n  const content = await file.readFile(`${page}.md`);\n\n\n  return <div>{sanitizeHtml(marked(content))}</div>;\n}\n```\n\nThe rendered output can then be server-side rendered (SSR) to HTML and uploaded to a CDN. When the app loads, the client will not see the original `Page` component, or the expensive libraries for rendering the markdown. The client will only see the rendered output:\n\n```html\n<div><!-- html for markdown --></div>\n```\n\nThis means the content is visible during first page load, and the bundle does not include the expensive libraries needed to render the static content.\n\n## Note\n\nYou may notice that the Server Component above is an async function:\n\n```javascript\nasync function Page({page}) {\n\n  //...\n}\n```\n\nAsync Components are a new feature of Server Components that allow you to `await` in render.\n\n## Server Components with a Server\n\nServer Components can also run on a web server during a request for a page, letting you access your data layer without having to build an API. They are rendered before your application is bundled, and can pass data and JSX as props to Client Components.\n\nWithout Server Components, it’s common to fetch dynamic data on the client in an Effect:\n\n```javascript\n// bundle.js\n\nfunction Note({id}) {\n\n  const [note, setNote] = useState('');\n\n  // NOTE: loads *after* first render.\n\n  useEffect(() => {\n\n    fetch(`/api/notes/${id}`).then(data => {\n\n      setNote(data.note);\n\n    });\n\n  }, [id]);\n\n\n  return (\n\n    <div>\n\n      <Author id={note.authorId} />\n\n      <p>{note}</p>\n\n    </div>\n\n  );\n}\n\nfunction Author({id}) {\n\n  const [author, setAuthor] = useState('');\n\n  // NOTE: loads *after* Note renders.\n\n  // Causing an expensive client-server waterfall.\n\n  useEffect(() => {\n\n    fetch(`/api/authors/${id}`).then(data => {\n\n      setAuthor(data.author);\n\n    });\n\n  }, [id]);\n\n  return <span>By: {author.name}</span>;\n}\n```\n\n```javascript\n// api\n\nimport db from './database';\n\napp.get(`/api/notes/:id`, async (req, res) => {\n\n  const note = await db.notes.get(id);\n\n  res.send({note});\n});\n\napp.get(`/api/authors/:id`, async (req, res) => {\n\n  const author = await db.authors.get(id);\n\n  res.send({author});\n});\n```\n\nWith Server Components, you can read the data and render it in the component:\n\n```javascript\nimport db from './database';\n\nasync function Note({id}) {\n\n  // NOTE: loads *during* render.\n\n  const note = await db.notes.get(id);\n\n  return (\n\n    <div>\n\n      <Author id={note.authorId} />\n\n      <p>{note}</p>\n\n    </div>\n\n  );\n}\n\nasync function Author({id}) {\n\n  // NOTE: loads *after* Note,\n\n  // but is fast if data is co-located.\n\n  const author = await db.authors.get(id);\n\n  return <span>By: {author.name}</span>;\n}\n```\n\nThe bundler then combines the data, rendered Server Components and dynamic Client Components into a bundle. Optionally, that bundle can then be server-side rendered (SSR) to create the initial HTML for the page. When the page loads, the browser does not see the original `Note` and `Author` components; only the rendered output is sent to the client:\n\n```html\n<div>\n\n  <span>By: The React Team</span>\n\n  <p>React 19 is...</p>\n\n</div>\n```\n\nServer Components can be made dynamic by re-fetching them from a server, where they can access the data and render again. This new application architecture combines the simple “request/response” mental model of server-centric Multi-Page Apps with the seamless interactivity of client-centric Single-Page Apps, giving you the best of both worlds.\n\n## Adding interactivity to Server Components\n\nServer Components are not sent to the browser, so they cannot use interactive APIs like `useState`. To add interactivity to Server Components, you can compose them with Client Component using the \"use client\" directive.\n\n## Note\n\nA common misunderstanding is that Server Components are denoted by \"use server\", but there is no directive for Server Components. The \"use server\" directive is used for Server Functions.\n\nFor more info, see the docs for [Directives](https://react.dev/reference/rsc/directives).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/rsc/server-components", "title": "Server Components", "description": "This page covers the concept of React Server Components, their usage, and how they differ from traditional components.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 01:15:52", "type": "overview", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/rsc/server-components", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:creator": "@reactjs", "og:type": "website", "title": "Server Components – React", "ogUrl": "https://react.dev/reference/rsc/server-components", "og:title": "Server Components – React", "ogTitle": "Server Components – React", "twitter:site": "@reactjs", "twitter:title": "Server Components – React", "scrapeId": "8f3d49f4-271c-4186-bdd6-1182d8e21025", "sourceURL": "https://react.dev/reference/rsc/server-components", "url": "https://react.dev/reference/rsc/server-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I react server components in react-reference?\n\nAssistant: To react server components in react-reference, here's what you do:\nServer Components are for use in React Server Components. Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server. This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server.\n\n- [Server Components without a Server](https://react.dev/reference/rsc/server-components#server-components-without-a-server)\n- [Server Components with a Server](https://react.dev/reference/rsc/server-components#server-components-with-a-server)\n- [Adding interactivity to Server Components](https://react.dev/reference/rsc/server-components#adding-interactivity-to-server-components)\n- [Async components with Server Components](https://react.dev/reference/rsc/server-components#async-components-with-server-components).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/server-components", "title": "Server Components", "description": "This page covers the concept of React Server Components, their usage, and how they differ from traditional components.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 01:15:52", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/rsc/server-components", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:creator": "@reactjs", "og:type": "website", "title": "Server Components – React", "ogUrl": "https://react.dev/reference/rsc/server-components", "og:title": "Server Components – React", "ogTitle": "Server Components – React", "twitter:site": "@reactjs", "twitter:title": "Server Components – React", "scrapeId": "8f3d49f4-271c-4186-bdd6-1182d8e21025", "sourceURL": "https://react.dev/reference/rsc/server-components", "url": "https://react.dev/reference/rsc/server-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I note in react-reference?\n\nAssistant: To note in react-reference, here's what you do:\nWhile React Server Components in React 19 are stable and will not break between minor versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x.\n\nTo support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/server-components", "title": "Server Components", "description": "This page covers the concept of React Server Components, their usage, and how they differ from traditional components.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 01:15:52", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/rsc/server-components", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:creator": "@reactjs", "og:type": "website", "title": "Server Components – React", "ogUrl": "https://react.dev/reference/rsc/server-components", "og:title": "Server Components – React", "ogTitle": "Server Components – React", "twitter:site": "@reactjs", "twitter:title": "Server Components – React", "scrapeId": "8f3d49f4-271c-4186-bdd6-1182d8e21025", "sourceURL": "https://react.dev/reference/rsc/server-components", "url": "https://react.dev/reference/rsc/server-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I server components without a server in react-reference?\n\nAssistant: To server components without a server in react-reference, here's what you do:\nServer components can run at build time to read from the filesystem or fetch static content, so a web server is not required. For example, you may want to read static data from a content management system.\n\nWithout Server Components, it’s common to fetch static data on the client with an Effect:\n\n```javascript\n// bundle.js\n\nimport marked from 'marked'; // 35.9K (11.2K gzipped)\n\nimport sanitizeHtml from 'sanitize-html'; // 206K (63.3K gzipped)\n\nfunction Page({page}) {\n\n  const [content, setContent] = useState('');\n\n  // NOTE: loads *after* first page render.\n\n  useEffect(() => {\n\n    fetch(`/api/content/${page}`).then((data) => {\n\n      setContent(data.content);\n\n    });\n\n  }, [page]);\n\n\n  return <div>{sanitizeHtml(marked(content))}</div>;\n}\n```\n\n```javascript\n// api.js\n\napp.get(`/api/content/:page`, async (req, res) => {\n\n  const page = req.params.page;\n\n  const content = await file.readFile(`${page}.md`);\n\n  res.send({content});\n});\n```\n\nThis pattern means users need to download and parse an additional 75K (gzipped) of libraries, and wait for a second request to fetch the data after the page loads, just to render static content that will not change for the lifetime of the page.\n\nWith Server Components, you can render these components once at build time:\n\n```javascript\nimport marked from 'marked'; // Not included in bundle\n\nimport sanitizeHtml from 'sanitize-html'; // Not included in bundle\n\nasync function Page({page}) {\n\n  // NOTE: loads *during* render, when the app is built.\n\n  const content = await file.readFile(`${page}.md`);\n\n\n  return <div>{sanitizeHtml(marked(content))}</div>;\n}\n```\n\nThe rendered output can then be server-side rendered (SSR) to HTML and uploaded to a CDN. When the app loads, the client will not see the original `Page` component, or the expensive libraries for rendering the markdown. The client will only see the rendered output:\n\n```html\n<div><!-- html for markdown --></div>\n```\n\nThis means the content is visible during first page load, and the bundle does not include the expensive libraries needed to render the static content..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/server-components", "title": "Server Components", "description": "This page covers the concept of React Server Components, their usage, and how they differ from traditional components.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 01:15:52", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/rsc/server-components", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:creator": "@reactjs", "og:type": "website", "title": "Server Components – React", "ogUrl": "https://react.dev/reference/rsc/server-components", "og:title": "Server Components – React", "ogTitle": "Server Components – React", "twitter:site": "@reactjs", "twitter:title": "Server Components – React", "scrapeId": "8f3d49f4-271c-4186-bdd6-1182d8e21025", "sourceURL": "https://react.dev/reference/rsc/server-components", "url": "https://react.dev/reference/rsc/server-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I note in react-reference?\n\nAssistant: To note in react-reference, here's what you do:\nYou may notice that the Server Component above is an async function:\n\n```javascript\nasync function Page({page}) {\n\n  //...\n}\n```\n\nAsync Components are a new feature of Server Components that allow you to `await` in render..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/server-components", "title": "Server Components", "description": "This page covers the concept of React Server Components, their usage, and how they differ from traditional components.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 01:15:52", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/rsc/server-components", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:creator": "@reactjs", "og:type": "website", "title": "Server Components – React", "ogUrl": "https://react.dev/reference/rsc/server-components", "og:title": "Server Components – React", "ogTitle": "Server Components – React", "twitter:site": "@reactjs", "twitter:title": "Server Components – React", "scrapeId": "8f3d49f4-271c-4186-bdd6-1182d8e21025", "sourceURL": "https://react.dev/reference/rsc/server-components", "url": "https://react.dev/reference/rsc/server-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I server components with a server in react-reference?\n\nAssistant: To server components with a server in react-reference, here's what you do:\nServer Components can also run on a web server during a request for a page, letting you access your data layer without having to build an API. They are rendered before your application is bundled, and can pass data and JSX as props to Client Components.\n\nWithout Server Components, it’s common to fetch dynamic data on the client in an Effect:\n\n```javascript\n// bundle.js\n\nfunction Note({id}) {\n\n  const [note, setNote] = useState('');\n\n  // NOTE: loads *after* first render.\n\n  useEffect(() => {\n\n    fetch(`/api/notes/${id}`).then(data => {\n\n      setNote(data.note);\n\n    });\n\n  }, [id]);\n\n\n  return (\n\n    <div>\n\n      <Author id={note.authorId} />\n\n      <p>{note}</p>\n\n    </div>\n\n  );\n}\n\nfunction Author({id}) {\n\n  const [author, setAuthor] = useState('');\n\n  // NOTE: loads *after* Note renders.\n\n  // Causing an expensive client-server waterfall.\n\n  useEffect(() => {\n\n    fetch(`/api/authors/${id}`).then(data => {\n\n      setAuthor(data.author);\n\n    });\n\n  }, [id]);\n\n  return <span>By: {author.name}</span>;\n}\n```\n\n```javascript\n// api\n\nimport db from './database';\n\napp.get(`/api/notes/:id`, async (req, res) => {\n\n  const note = await db.notes.get(id);\n\n  res.send({note});\n});\n\napp.get(`/api/authors/:id`, async (req, res) => {\n\n  const author = await db.authors.get(id);\n\n  res.send({author});\n});\n```\n\nWith Server Components, you can read the data and render it in the component:\n\n```javascript\nimport db from './database';\n\nasync function Note({id}) {\n\n  // NOTE: loads *during* render.\n\n  const note = await db.notes.get(id);\n\n  return (\n\n    <div>\n\n      <Author id={note.authorId} />\n\n      <p>{note}</p>\n\n    </div>\n\n  );\n}\n\nasync function Author({id}) {\n\n  // NOTE: loads *after* Note,\n\n  // but is fast if data is co-located.\n\n  const author = await db.authors.get(id);\n\n  return <span>By: {author.name}</span>;\n}\n```\n\nThe bundler then combines the data, rendered Server Components and dynamic Client Components into a bundle. Optionally, that bundle can then be server-side rendered (SSR) to create the initial HTML for the page. When the page loads, the browser does not see the original `Note` and `Author` components; only the rendered output is sent to the client:\n\n```html\n<div>\n\n  <span>By: The React Team</span>\n\n  <p>React 19 is...</p>\n\n</div>\n```\n\nServer Components can be made dynamic by re-fetching them from a server, where they can access the data and render again. This new application architecture combines the simple “request/response” mental model of server-centric Multi-Page Apps with the seamless interactivity of client-centric Single-Page Apps, giving you the best of both worlds..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/server-components", "title": "Server Components", "description": "This page covers the concept of React Server Components, their usage, and how they differ from traditional components.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 01:15:52", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/rsc/server-components", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:creator": "@reactjs", "og:type": "website", "title": "Server Components – React", "ogUrl": "https://react.dev/reference/rsc/server-components", "og:title": "Server Components – React", "ogTitle": "Server Components – React", "twitter:site": "@reactjs", "twitter:title": "Server Components – React", "scrapeId": "8f3d49f4-271c-4186-bdd6-1182d8e21025", "sourceURL": "https://react.dev/reference/rsc/server-components", "url": "https://react.dev/reference/rsc/server-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I adding interactivity to server components in react-reference?\n\nAssistant: To adding interactivity to server components in react-reference, here's what you do:\nServer Components are not sent to the browser, so they cannot use interactive APIs like `useState`. To add interactivity to Server Components, you can compose them with Client Component using the \"use client\" directive..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/server-components", "title": "Server Components", "description": "This page covers the concept of React Server Components, their usage, and how they differ from traditional components.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 01:15:52", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/rsc/server-components", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:creator": "@reactjs", "og:type": "website", "title": "Server Components – React", "ogUrl": "https://react.dev/reference/rsc/server-components", "og:title": "Server Components – React", "ogTitle": "Server Components – React", "twitter:site": "@reactjs", "twitter:title": "Server Components – React", "scrapeId": "8f3d49f4-271c-4186-bdd6-1182d8e21025", "sourceURL": "https://react.dev/reference/rsc/server-components", "url": "https://react.dev/reference/rsc/server-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I note in react-reference?\n\nAssistant: To note in react-reference, here's what you do:\nA common misunderstanding is that Server Components are denoted by \"use server\", but there is no directive for Server Components. The \"use server\" directive is used for Server Functions.\n\nFor more info, see the docs for [Directives](https://react.dev/reference/rsc/directives)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/server-components", "title": "Server Components", "description": "This page covers the concept of React Server Components, their usage, and how they differ from traditional components.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 01:15:52", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/rsc/server-components", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:creator": "@reactjs", "og:type": "website", "title": "Server Components – React", "ogUrl": "https://react.dev/reference/rsc/server-components", "og:title": "Server Components – React", "ogTitle": "Server Components – React", "twitter:site": "@reactjs", "twitter:title": "Server Components – React", "scrapeId": "8f3d49f4-271c-4186-bdd6-1182d8e21025", "sourceURL": "https://react.dev/reference/rsc/server-components", "url": "https://react.dev/reference/rsc/server-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Server Components in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Static Data Fetching Without Server Components**:\n\n```yaml\n// bundle.js\n\nimport marked from 'marked'; // 35.9K (11.2K gzipped)\n\nimport sanitizeHtml from 'sanitize-html'; // 206K (63.3K gzipped)\n\nfunction Page({page}) {\n\n  const [content, setContent] = useState('');\n\n  // NOTE: loads *after* first page render.\n\n  useEffect(() => {\n\n    fetch(`/api/content/${page}`).then((data) => {\n\n      setContent(data.content);\n\n    });\n\n  }, [page]);\n\n\n  return <div>{sanitizeHtml(marked(content))}</div>;\n}\n```\n\nThis snippet shows you how to static data fetching without server components, which is an important aspect of server components.\n\n", "metadata": {"source_url": "https://react.dev/reference/rsc/server-components", "title": "Server Components", "description": "This page covers the concept of React Server Components, their usage, and how they differ from traditional components.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-03-01 01:15:52", "type": "code_examples", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:description": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/rsc/server-components", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "ogDescription": "The library for web and native user interfaces", "theme-color": "#23272f", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "twitter:creator": "@reactjs", "og:type": "website", "title": "Server Components – React", "ogUrl": "https://react.dev/reference/rsc/server-components", "og:title": "Server Components – React", "ogTitle": "Server Components – React", "twitter:site": "@reactjs", "twitter:title": "Server Components – React", "scrapeId": "8f3d49f4-271c-4186-bdd6-1182d8e21025", "sourceURL": "https://react.dev/reference/rsc/server-components", "url": "https://react.dev/reference/rsc/server-components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what 'use server' is in react-reference?\n\nAssistant: Sure, I'd be happy to explain 'use server' in react-reference.\n\n# 'use server'\n\nThis section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.Here's a quick rundown of what this is about:\n\n## React Server Components\n\n'use server' is for use with using React Server Components. 'use server' marks server-side functions that can be called from client-side code.\n\n## Reference\n\nAdd 'use server' at the top of an async function body to mark the function as callable by the client. We call these functions _Server Functions_. When calling a Server Function on the client, it will make a network request to the server that includes a serialized copy of any arguments passed. If the Server Function returns a value, that value will be serialized and returned to the client. Instead of individually marking functions with 'use server', you can add the directive to the top of a file to mark all exports within that file as Server Functions that can be used anywhere, including imported in client code.\n\n## Caveats\n\n'use server' must be at the very beginning of their function or module; above any other code including imports (comments above directives are OK). They must be written with single or double quotes, not backticks. 'use server' can only be used in server-side files. The resulting Server Functions can be passed to Client Components through props. See supported types for serialization. To import a Server Functions from client code, the directive must be used on a module level. Because the underlying network calls are always asynchronous, 'use server' can only be used on async functions. Always treat arguments to Server Functions as untrusted input and authorize any mutations. Server Functions should be called in a Transition. Server Functions passed to <form action> or formAction will automatically be called in a transition. Server Functions are designed for mutations that update server-side state; they are not recommended for data fetching.\n\n## Security considerations\n\nArguments to Server Functions are fully client-controlled. For security, always treat them as untrusted input, and make sure to validate and escape arguments as appropriate. In any Server Function, make sure to validate that the logged-in user is allowed to perform that action.\n\n## Under Construction\n\nTo prevent sending sensitive data from a Server Function, there are experimental taint APIs to prevent unique values and objects from being passed to client code.\n\n## Serializable arguments and return values\n\nSince client code calls the Server Function over the network, any arguments passed will need to be serializable. Here are supported types for Server Function arguments: Primitives: string, number, bigint, boolean, undefined, null, symbol (only symbols registered in the global Symbol registry). Iterables containing serializable values: String, Array, Map, Set, TypedArray and ArrayBuffer. Date, FormData instances, Plain objects (those created with object initializers, with serializable properties), Functions that are Server Functions, Promises. Notably, these are not supported: React elements, or JSX, Functions (including component functions or any other function that is not a Server Function), Classes, Objects that are instances of any class (other than the built-ins mentioned) or objects with a null prototype, Symbols not registered globally, Events from event handlers.\n\n## Usage\n\nThe most common use case of Server Functions will be calling functions that mutate data. On the browser, the HTML form element is the traditional approach for a user to submit a mutation. With React Server Components, React introduces first-class support for Server Functions as Actions in forms.\n\n## Server Functions in forms\n\nHere is a form that allows a user to request a username. In this example requestUsername is a Server Function passed to a <form>. When a user submits this form, there is a network request to the server function requestUsername. When calling a Server Function in a form, React will supply the form’s FormData as the first argument to the Server Function.\n\n## Handling return values in forms\n\nIn the username request form, there might be the chance that a username is not available. requestUsername should tell us if it fails or not. To update the UI based on the result of a Server Function while supporting progressive enhancement, use useActionState.\n\n## Calling a Server Function outside of <form>\n\nServer Functions are exposed server endpoints and can be called anywhere in client code. When using a Server Function outside a form, call the Server Function in a Transition, which allows you to display a loading indicator, show optimistic state updates, and handle unexpected errors.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "overview", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I react server components in react-reference?\n\nAssistant: To react server components in react-reference, here's what you do:\n'use server' is for use with using React Server Components. 'use server' marks server-side functions that can be called from client-side code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nAdd 'use server' at the top of an async function body to mark the function as callable by the client. We call these functions _Server Functions_. When calling a Server Function on the client, it will make a network request to the server that includes a serialized copy of any arguments passed. If the Server Function returns a value, that value will be serialized and returned to the client. Instead of individually marking functions with 'use server', you can add the directive to the top of a file to mark all exports within that file as Server Functions that can be used anywhere, including imported in client code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n'use server' must be at the very beginning of their function or module; above any other code including imports (comments above directives are OK). They must be written with single or double quotes, not backticks. 'use server' can only be used in server-side files. The resulting Server Functions can be passed to Client Components through props. See supported types for serialization. To import a Server Functions from client code, the directive must be used on a module level. Because the underlying network calls are always asynchronous, 'use server' can only be used on async functions. Always treat arguments to Server Functions as untrusted input and authorize any mutations. Server Functions should be called in a Transition. Server Functions passed to <form action> or formAction will automatically be called in a transition. Server Functions are designed for mutations that update server-side state; they are not recommended for data fetching..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I security considerations in react-reference?\n\nAssistant: To security considerations in react-reference, here's what you do:\nArguments to Server Functions are fully client-controlled. For security, always treat them as untrusted input, and make sure to validate and escape arguments as appropriate. In any Server Function, make sure to validate that the logged-in user is allowed to perform that action..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I under construction in react-reference?\n\nAssistant: To under construction in react-reference, here's what you do:\nTo prevent sending sensitive data from a Server Function, there are experimental taint APIs to prevent unique values and objects from being passed to client code..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I serializable arguments and return values in react-reference?\n\nAssistant: To serializable arguments and return values in react-reference, here's what you do:\nSince client code calls the Server Function over the network, any arguments passed will need to be serializable. Here are supported types for Server Function arguments: Primitives: string, number, bigint, boolean, undefined, null, symbol (only symbols registered in the global Symbol registry). Iterables containing serializable values: String, Array, Map, Set, TypedArray and ArrayBuffer. Date, FormData instances, Plain objects (those created with object initializers, with serializable properties), Functions that are Server Functions, Promises. Notably, these are not supported: React elements, or JSX, Functions (including component functions or any other function that is not a Server Function), Classes, Objects that are instances of any class (other than the built-ins mentioned) or objects with a null prototype, Symbols not registered globally, Events from event handlers..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nThe most common use case of Server Functions will be calling functions that mutate data. On the browser, the HTML form element is the traditional approach for a user to submit a mutation. With React Server Components, React introduces first-class support for Server Functions as Actions in forms..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I server functions in forms in react-reference?\n\nAssistant: To server functions in forms in react-reference, here's what you do:\nHere is a form that allows a user to request a username. In this example requestUsername is a Server Function passed to a <form>. When a user submits this form, there is a network request to the server function requestUsername. When calling a Server Function in a form, React will supply the form’s FormData as the first argument to the Server Function..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I handling return values in forms in react-reference?\n\nAssistant: To handling return values in forms in react-reference, here's what you do:\nIn the username request form, there might be the chance that a username is not available. requestUsername should tell us if it fails or not. To update the UI based on the result of a Server Function while supporting progressive enhancement, use useActionState..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I calling a server function outside of <form> in react-reference?\n\nAssistant: To calling a server function outside of <form> in react-reference, here's what you do:\nServer Functions are exposed server endpoints and can be called anywhere in client code. When using a Server Function outside a form, call the Server Function in a Transition, which allows you to display a loading indicator, show optimistic state updates, and handle unexpected errors..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "section_detail", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for 'use server' in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of a Server Function**:\n\n```yaml\nasync function addToCart(data) {\n  'use server';\n  // ...\n}\n```\n\nThis snippet shows you how to example of a server function, which is an important aspect of 'use server'.\n\n**Example of a Server Function in a form**:\n\n```yaml\nasync function requestUsername(formData) {\n  'use server';\n  const username = formData.get('username');\n  // ...\n}\n\nexport default function App() {\n  return (\n    <form action={requestUsername}>\n      <input type=\"text\" name=\"username\" />\n      <button type=\"submit\">Request</button>\n    </form>\n  );\n}\n```\n\nThis snippet shows you how to example of a server function in a form, which is an important aspect of 'use server'.\n\n", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "code_examples", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using 'use server' in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAlways treat arguments to Server Functions as untrusted input and authorize any mutations.\n\nServer Functions should be called in a Transition to handle loading states and errors effectively.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/rsc/use-server", "title": "'use server'", "description": "This section covers the usage of the 'use server' directive in React Server Components, including its reference, usage in forms, security considerations, and serialization of arguments and return values.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:16:11", "type": "best_practices", "page_metadata": {"favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:url": "https://react.dev/reference/rsc/use-server", "og:title": "'use server' directive – React", "ogUrl": "https://react.dev/reference/rsc/use-server", "ogTitle": "'use server' directive – React", "twitter:creator": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "twitter:title": "'use server' directive – React", "og:description": "The library for web and native user interfaces", "language": "en", "title": "'use server' directive – React", "twitter:image": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "ogDescription": "The library for web and native user interfaces", "og:type": "website", "msapplication-TileColor": "#2b5797", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "scrapeId": "95b5057a-c84f-460c-9bb0-f2d02e34fcfa", "sourceURL": "https://react.dev/reference/rsc/use-server", "url": "https://react.dev/reference/rsc/use-server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what unmountComponentAtNode is in react-reference?\n\nAssistant: Sure, I'd be happy to explain unmountComponentAtNode in react-reference.\n\n# unmountComponentAtNode\n\nThis API will be removed in a future major version of React. In React 18, `unmountComponentAtNode` was replaced by `root.unmount()`. `unmountComponentAtNode` removes a mounted React component from the DOM.Here's a quick rundown of what this is about:\n\n## Reference\n\nCall `unmountComponentAtNode` to remove a mounted React component from the DOM and clean up its event handlers and state.\n\n```sp-pre-placeholder grow-[2]\nimport { unmountComponentAtNode } from 'react-dom';\n\nconst domNode = document.getElementById('root');\n\nrender(<App />, domNode);\n\nunmountComponentAtNode(domNode);\n```\n\n#### Parameters\n- `domNode`: A [DOM element.](https://developer.mozilla.org/en-US/docs/Web/API/Element) React will remove a mounted React component from this element.\n\n#### Returns\n`unmountComponentAtNode` returns `true` if a component was unmounted and `false` otherwise.\n\n## Usage\n\nCall `unmountComponentAtNode` to remove a mounted React component from a browser DOM node and clean up its event handlers and state.\n\n```sp-pre-placeholder grow-[2]\nimport { render, unmountComponentAtNode } from 'react-dom';\n\nimport App from './App.js';\n\nconst rootNode = document.getElementById('root');\n\nrender(<App />, rootNode);\n\n// ...\n\nunmountComponentAtNode(rootNode);\n```\n\n### Removing a React app from a DOM element\nOccasionally, you may want to “sprinkle” React on an existing page, or a page that is not fully written in React. In those cases, you may need to “stop” the React app, by removing all of the UI, state, and listeners from the DOM node it was rendered to.\n\nIn this example, clicking “Render React App” will render a React app. Click “Unmount React App” to destroy it:\n\n```javascript\nimport './styles.css';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport App from './App.js';\n\nconst domNode = document.getElementById('root');\n\ndocument.getElementById('render').addEventListener('click', () => {\n  render(<App />, domNode);\n});\n\ndocument.getElementById('unmount').addEventListener('click', () => {\n  unmountComponentAtNode(domNode);\n});\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode", "description": "This API will be removed in a future major version of React. In React 18, `unmountComponentAtNode` was replaced by `root.unmount()`. `unmountComponentAtNode` removes a mounted React component from the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:16:29", "type": "overview", "page_metadata": {"msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/unmountComponentAtNode", "favicon": "https://18.react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "unmountComponentAtNode – React", "next-head-count": "35", "og:type": "website", "theme-color": "#23272f", "ogTitle": "unmountComponentAtNode – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:title": "unmountComponentAtNode – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "405a8256-fcfb-406c-a932-887ea57074a5", "sourceURL": "https://react.dev/reference/react-dom/unmountComponentAtNode", "url": "https://18.react.dev/reference/react-dom/unmountComponentAtNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `unmountComponentAtNode` to remove a mounted React component from the DOM and clean up its event handlers and state.\n\n```sp-pre-placeholder grow-[2]\nimport { unmountComponentAtNode } from 'react-dom';\n\nconst domNode = document.getElementById('root');\n\nrender(<App />, domNode);\n\nunmountComponentAtNode(domNode);\n```\n\n#### Parameters\n- `domNode`: A [DOM element.](https://developer.mozilla.org/en-US/docs/Web/API/Element) React will remove a mounted React component from this element.\n\n#### Returns\n`unmountComponentAtNode` returns `true` if a component was unmounted and `false` otherwise..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode", "description": "This API will be removed in a future major version of React. In React 18, `unmountComponentAtNode` was replaced by `root.unmount()`. `unmountComponentAtNode` removes a mounted React component from the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:16:29", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/unmountComponentAtNode", "favicon": "https://18.react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "unmountComponentAtNode – React", "next-head-count": "35", "og:type": "website", "theme-color": "#23272f", "ogTitle": "unmountComponentAtNode – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:title": "unmountComponentAtNode – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "405a8256-fcfb-406c-a932-887ea57074a5", "sourceURL": "https://react.dev/reference/react-dom/unmountComponentAtNode", "url": "https://18.react.dev/reference/react-dom/unmountComponentAtNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nCall `unmountComponentAtNode` to remove a mounted React component from a browser DOM node and clean up its event handlers and state.\n\n```sp-pre-placeholder grow-[2]\nimport { render, unmountComponentAtNode } from 'react-dom';\n\nimport App from './App.js';\n\nconst rootNode = document.getElementById('root');\n\nrender(<App />, rootNode);\n\n// ...\n\nunmountComponentAtNode(rootNode);\n```\n\n### Removing a React app from a DOM element\nOccasionally, you may want to “sprinkle” React on an existing page, or a page that is not fully written in React. In those cases, you may need to “stop” the React app, by removing all of the UI, state, and listeners from the DOM node it was rendered to.\n\nIn this example, clicking “Render React App” will render a React app. Click “Unmount React App” to destroy it:\n\n```javascript\nimport './styles.css';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport App from './App.js';\n\nconst domNode = document.getElementById('root');\n\ndocument.getElementById('render').addEventListener('click', () => {\n  render(<App />, domNode);\n});\n\ndocument.getElementById('unmount').addEventListener('click', () => {\n  unmountComponentAtNode(domNode);\n});\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode", "description": "This API will be removed in a future major version of React. In React 18, `unmountComponentAtNode` was replaced by `root.unmount()`. `unmountComponentAtNode` removes a mounted React component from the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:16:29", "type": "section_detail", "page_metadata": {"msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/unmountComponentAtNode", "favicon": "https://18.react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "unmountComponentAtNode – React", "next-head-count": "35", "og:type": "website", "theme-color": "#23272f", "ogTitle": "unmountComponentAtNode – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:title": "unmountComponentAtNode – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "405a8256-fcfb-406c-a932-887ea57074a5", "sourceURL": "https://react.dev/reference/react-dom/unmountComponentAtNode", "url": "https://18.react.dev/reference/react-dom/unmountComponentAtNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for unmountComponentAtNode in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**unmountComponentAtNode Example**:\n\n```yaml\nimport { unmountComponentAtNode } from 'react-dom';\n\nconst domNode = document.getElementById('root');\n\nrender(<App />, domNode);\n\nunmountComponentAtNode(domNode);\n```\n\nThis snippet shows you how to unmountcomponentatnode example, which is an important aspect of unmountcomponentatnode.\n\n**Usage Example**:\n\n```yaml\nimport { render, unmountComponentAtNode } from 'react-dom';\n\nimport App from './App.js';\n\nconst rootNode = document.getElementById('root');\n\nrender(<App />, rootNode);\n\n// ...\n\nunmountComponentAtNode(rootNode);\n```\n\nThis snippet shows you how to usage example, which is an important aspect of unmountcomponentatnode.\n\n**Removing a React app from a DOM element Example**:\n\n```yaml\nimport './styles.css';\nimport { render, unmountComponentAtNode } from 'react-dom';\nimport App from './App.js';\n\nconst domNode = document.getElementById('root');\n\ndocument.getElementById('render').addEventListener('click', () => {\n  render(<App />, domNode);\n});\n\ndocument.getElementById('unmount').addEventListener('click', () => {\n  unmountComponentAtNode(domNode);\n});\n```\n\nThis snippet shows you how to removing a react app from a dom element example, which is an important aspect of unmountcomponentatnode.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode", "description": "This API will be removed in a future major version of React. In React 18, `unmountComponentAtNode` was replaced by `root.unmount()`. `unmountComponentAtNode` removes a mounted React component from the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:16:29", "type": "code_examples", "page_metadata": {"msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/unmountComponentAtNode", "favicon": "https://18.react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "unmountComponentAtNode – React", "next-head-count": "35", "og:type": "website", "theme-color": "#23272f", "ogTitle": "unmountComponentAtNode – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:title": "unmountComponentAtNode – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "405a8256-fcfb-406c-a932-887ea57074a5", "sourceURL": "https://react.dev/reference/react-dom/unmountComponentAtNode", "url": "https://18.react.dev/reference/react-dom/unmountComponentAtNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using unmountComponentAtNode in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis API is deprecated and will be removed in a future major version of React. Use `root.unmount()` instead.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode", "description": "This API will be removed in a future major version of React. In React 18, `unmountComponentAtNode` was replaced by `root.unmount()`. `unmountComponentAtNode` removes a mounted React component from the DOM.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:16:29", "type": "best_practices", "page_metadata": {"msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "og:url": "https://react.dev/reference/react-dom/unmountComponentAtNode", "title": "unmountComponentAtNode – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/unmountComponentAtNode", "favicon": "https://18.react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "twitter:title": "unmountComponentAtNode – React", "next-head-count": "35", "og:type": "website", "theme-color": "#23272f", "ogTitle": "unmountComponentAtNode – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "og:title": "unmountComponentAtNode – React", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "scrapeId": "405a8256-fcfb-406c-a932-887ea57074a5", "sourceURL": "https://react.dev/reference/react-dom/unmountComponentAtNode", "url": "https://18.react.dev/reference/react-dom/unmountComponentAtNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Static React DOM APIs is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Static React DOM APIs in react-reference.\n\n# Static React DOM APIs\n\nThe `react-dom/static` APIs let you generate static HTML for React components. They have limited functionality compared to the streaming APIs. A framework may call them for you. Most of your components don’t need to import or use them.Here's a quick rundown of what this is about:\n\n## Static APIs for Web Streams\n\nThese methods are only available in the environments with Web Streams, which includes browsers, Deno, and some modern edge runtimes:\n\n- `prerender` renders a React tree to static HTML with a Readable Web Stream.\n\n## Static APIs for Node.js Streams\n\nThese methods are only available in the environments with Node.js Streams:\n\n- `prerenderToNodeStream` renders a React tree to static HTML with a Node.js Stream.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/static", "title": "Static React DOM APIs", "description": "The `react-dom/static` APIs let you generate static HTML for React components. They have limited functionality compared to the streaming APIs. A framework may call them for you. Most of your components don’t need to import or use them.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 01:16:33", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/static", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "Static React DOM APIs – React", "og:type": "website", "theme-color": "#23272f", "language": "en", "og:title": "Static React DOM APIs – React", "title": "Static React DOM APIs – React", "ogTitle": "Static React DOM APIs – React", "og:url": "https://react.dev/reference/react-dom/static", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "scrapeId": "d3e5a8ea-b17f-48e9-b85f-63b4a590fb31", "sourceURL": "https://react.dev/reference/react-dom/static", "url": "https://react.dev/reference/react-dom/static", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I static apis for web streams in react-reference?\n\nAssistant: To static apis for web streams in react-reference, here's what you do:\nThese methods are only available in the environments with Web Streams, which includes browsers, Deno, and some modern edge runtimes:\n\n- `prerender` renders a React tree to static HTML with a Readable Web Stream..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/static", "title": "Static React DOM APIs", "description": "The `react-dom/static` APIs let you generate static HTML for React components. They have limited functionality compared to the streaming APIs. A framework may call them for you. Most of your components don’t need to import or use them.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 01:16:33", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/static", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "Static React DOM APIs – React", "og:type": "website", "theme-color": "#23272f", "language": "en", "og:title": "Static React DOM APIs – React", "title": "Static React DOM APIs – React", "ogTitle": "Static React DOM APIs – React", "og:url": "https://react.dev/reference/react-dom/static", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "scrapeId": "d3e5a8ea-b17f-48e9-b85f-63b4a590fb31", "sourceURL": "https://react.dev/reference/react-dom/static", "url": "https://react.dev/reference/react-dom/static", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I static apis for node.js streams in react-reference?\n\nAssistant: To static apis for node.js streams in react-reference, here's what you do:\nThese methods are only available in the environments with Node.js Streams:\n\n- `prerenderToNodeStream` renders a React tree to static HTML with a Node.js Stream..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/static", "title": "Static React DOM APIs", "description": "The `react-dom/static` APIs let you generate static HTML for React components. They have limited functionality compared to the streaming APIs. A framework may call them for you. Most of your components don’t need to import or use them.", "has_code_examples": false, "has_best_practices": false, "section_count": 2, "timestamp": "2025-03-01 01:16:33", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/static", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "og:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "Static React DOM APIs – React", "og:type": "website", "theme-color": "#23272f", "language": "en", "og:title": "Static React DOM APIs – React", "title": "Static React DOM APIs – React", "ogTitle": "Static React DOM APIs – React", "og:url": "https://react.dev/reference/react-dom/static", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "scrapeId": "d3e5a8ea-b17f-48e9-b85f-63b4a590fb31", "sourceURL": "https://react.dev/reference/react-dom/static", "url": "https://react.dev/reference/react-dom/static", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what preinitModule is in react-reference?\n\nAssistant: Sure, I'd be happy to explain preinitModule in react-reference.\n\n# preinitModule\n\n`preinitModule` lets you eagerly fetch and evaluate an ESM module.Here's a quick rundown of what this is about:\n\n## Note\n\n[React-based frameworks](https://react.dev/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details.\n\n## Reference\n\n### `preinitModule(href, options)`\nTo preinit an ESM module, call the `preinitModule` function from `react-dom`.\n\n```sp-pre-placeholder grow-[2]\nimport { preinitModule } from 'react-dom';\n\nfunction AppRoot() {\n\n  preinitModule(\"https://example.com/module.js\", {as: \"script\"});\n\n  // ...\n}\n```\n\nThe `preinitModule` function provides the browser with a hint that it should start downloading and executing the given module, which can save time. Modules that you `preinit` are executed when they finish downloading.\n\n## Parameters\n\n- `href`: a string. The URL of the module you want to download and execute.\n- `options`: an object. It contains the following properties:\n  - `as`: a required string. It must be `'script'`.\n  - `crossOrigin`: a string. The [CORS policy](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) to use. Its possible values are `anonymous` and `use-credentials`.\n  - `integrity`: a string. A cryptographic hash of the module, to [verify its authenticity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).\n  - `nonce`: a string. A cryptographic [nonce to allow the module](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) when using a strict Content Security Policy.\n\n## Returns\n\n`preinitModule` returns nothing.\n\n## Caveats\n\n- Multiple calls to `preinitModule` with the same `href` have the same effect as a single call.\n- In the browser, you can call `preinitModule` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `preinitModule` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n\n## Usage\n\n### Preloading when rendering\nCall `preinitModule` when rendering a component if you know that it or its children will use a specific module and you’re OK with the module being evaluated and thereby taking effect immediately upon being downloaded.\n\n```sp-pre-placeholder grow-[2]\nimport { preinitModule } from 'react-dom';\n\nfunction AppRoot() {\n\n  preinitModule(\"https://example.com/module.js\", {as: \"script\"});\n\n  return ...;\n}\n```\n\nIf you want the browser to download the module but not to execute it right away, use [`preloadModule`](https://react.dev/reference/react-dom/preloadModule) instead. If you want to preinit a script that isn’t an ESM module, use [`preinit`](https://react.dev/reference/react-dom/preinit).\n\n### Preloading in an event handler\nCall `preinitModule` in an event handler before transitioning to a page or state where the module will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state.\n\n```sp-pre-placeholder grow-[2]\nimport { preinitModule } from 'react-dom';\n\nfunction CallToAction() {\n\n  const onClick = () => {\n\n    preinitModule(\"https://example.com/module.js\", {as: \"script\"});\n\n    startWizard();\n  }\n\n  return (\n\n    <button onClick={onClick}>Start Wizard</button>\n\n  );\n}\n```\n\n[Previouspreinit](https://react.dev/reference/react-dom/preinit) [Nextpreload](https://react.dev/reference/react-dom/preload)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinitModule", "title": "preinitModule", "description": "`preinitModule` lets you eagerly fetch and evaluate an ESM module.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:53", "type": "overview", "page_metadata": {"ogTitle": "preinitModule – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "title": "preinitModule – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/preinitModule", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:title": "preinitModule – React", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:type": "website", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react-dom/preinitModule", "og:title": "preinitModule – React", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "scrapeId": "d08701b7-6a54-4fe0-8297-73c78c0e3d02", "sourceURL": "https://react.dev/reference/react-dom/preinitModule", "url": "https://react.dev/reference/react-dom/preinitModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I note in react-reference?\n\nAssistant: To note in react-reference, here's what you do:\n[React-based frameworks](https://react.dev/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinitModule", "title": "preinitModule", "description": "`preinitModule` lets you eagerly fetch and evaluate an ESM module.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:53", "type": "section_detail", "page_metadata": {"ogTitle": "preinitModule – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "title": "preinitModule – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/preinitModule", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:title": "preinitModule – React", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:type": "website", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react-dom/preinitModule", "og:title": "preinitModule – React", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "scrapeId": "d08701b7-6a54-4fe0-8297-73c78c0e3d02", "sourceURL": "https://react.dev/reference/react-dom/preinitModule", "url": "https://react.dev/reference/react-dom/preinitModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `preinitModule(href, options)`\nTo preinit an ESM module, call the `preinitModule` function from `react-dom`.\n\n```sp-pre-placeholder grow-[2]\nimport { preinitModule } from 'react-dom';\n\nfunction AppRoot() {\n\n  preinitModule(\"https://example.com/module.js\", {as: \"script\"});\n\n  // ...\n}\n```\n\nThe `preinitModule` function provides the browser with a hint that it should start downloading and executing the given module, which can save time. Modules that you `preinit` are executed when they finish downloading..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinitModule", "title": "preinitModule", "description": "`preinitModule` lets you eagerly fetch and evaluate an ESM module.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:53", "type": "section_detail", "page_metadata": {"ogTitle": "preinitModule – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "title": "preinitModule – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/preinitModule", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:title": "preinitModule – React", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:type": "website", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react-dom/preinitModule", "og:title": "preinitModule – React", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "scrapeId": "d08701b7-6a54-4fe0-8297-73c78c0e3d02", "sourceURL": "https://react.dev/reference/react-dom/preinitModule", "url": "https://react.dev/reference/react-dom/preinitModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `href`: a string. The URL of the module you want to download and execute.\n- `options`: an object. It contains the following properties:\n  - `as`: a required string. It must be `'script'`.\n  - `crossOrigin`: a string. The [CORS policy](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) to use. Its possible values are `anonymous` and `use-credentials`.\n  - `integrity`: a string. A cryptographic hash of the module, to [verify its authenticity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).\n  - `nonce`: a string. A cryptographic [nonce to allow the module](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) when using a strict Content Security Policy..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinitModule", "title": "preinitModule", "description": "`preinitModule` lets you eagerly fetch and evaluate an ESM module.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:53", "type": "section_detail", "page_metadata": {"ogTitle": "preinitModule – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "title": "preinitModule – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/preinitModule", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:title": "preinitModule – React", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:type": "website", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react-dom/preinitModule", "og:title": "preinitModule – React", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "scrapeId": "d08701b7-6a54-4fe0-8297-73c78c0e3d02", "sourceURL": "https://react.dev/reference/react-dom/preinitModule", "url": "https://react.dev/reference/react-dom/preinitModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`preinitModule` returns nothing..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinitModule", "title": "preinitModule", "description": "`preinitModule` lets you eagerly fetch and evaluate an ESM module.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:53", "type": "section_detail", "page_metadata": {"ogTitle": "preinitModule – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "title": "preinitModule – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/preinitModule", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:title": "preinitModule – React", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:type": "website", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react-dom/preinitModule", "og:title": "preinitModule – React", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "scrapeId": "d08701b7-6a54-4fe0-8297-73c78c0e3d02", "sourceURL": "https://react.dev/reference/react-dom/preinitModule", "url": "https://react.dev/reference/react-dom/preinitModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- Multiple calls to `preinitModule` with the same `href` have the same effect as a single call.\n- In the browser, you can call `preinitModule` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `preinitModule` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinitModule", "title": "preinitModule", "description": "`preinitModule` lets you eagerly fetch and evaluate an ESM module.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:53", "type": "section_detail", "page_metadata": {"ogTitle": "preinitModule – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "title": "preinitModule – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/preinitModule", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:title": "preinitModule – React", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:type": "website", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react-dom/preinitModule", "og:title": "preinitModule – React", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "scrapeId": "d08701b7-6a54-4fe0-8297-73c78c0e3d02", "sourceURL": "https://react.dev/reference/react-dom/preinitModule", "url": "https://react.dev/reference/react-dom/preinitModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Preloading when rendering\nCall `preinitModule` when rendering a component if you know that it or its children will use a specific module and you’re OK with the module being evaluated and thereby taking effect immediately upon being downloaded.\n\n```sp-pre-placeholder grow-[2]\nimport { preinitModule } from 'react-dom';\n\nfunction AppRoot() {\n\n  preinitModule(\"https://example.com/module.js\", {as: \"script\"});\n\n  return ...;\n}\n```\n\nIf you want the browser to download the module but not to execute it right away, use [`preloadModule`](https://react.dev/reference/react-dom/preloadModule) instead. If you want to preinit a script that isn’t an ESM module, use [`preinit`](https://react.dev/reference/react-dom/preinit).\n\n### Preloading in an event handler\nCall `preinitModule` in an event handler before transitioning to a page or state where the module will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state.\n\n```sp-pre-placeholder grow-[2]\nimport { preinitModule } from 'react-dom';\n\nfunction CallToAction() {\n\n  const onClick = () => {\n\n    preinitModule(\"https://example.com/module.js\", {as: \"script\"});\n\n    startWizard();\n  }\n\n  return (\n\n    <button onClick={onClick}>Start Wizard</button>\n\n  );\n}\n```\n\n[Previouspreinit](https://react.dev/reference/react-dom/preinit) [Nextpreload](https://react.dev/reference/react-dom/preload).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinitModule", "title": "preinitModule", "description": "`preinitModule` lets you eagerly fetch and evaluate an ESM module.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:53", "type": "section_detail", "page_metadata": {"ogTitle": "preinitModule – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "title": "preinitModule – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/preinitModule", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:title": "preinitModule – React", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:type": "website", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react-dom/preinitModule", "og:title": "preinitModule – React", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "scrapeId": "d08701b7-6a54-4fe0-8297-73c78c0e3d02", "sourceURL": "https://react.dev/reference/react-dom/preinitModule", "url": "https://react.dev/reference/react-dom/preinitModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for preinitModule in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of preinitModule**:\n\n```yaml\npreinitModule(\"https://example.com/module.js\", {as: \"script\"});\n```\n\nThis snippet shows you how to basic usage of preinitmodule, which is an important aspect of preinitmodule.\n\n**Importing preinitModule in a Component**:\n\n```yaml\nimport { preinitModule } from 'react-dom';\n\nfunction AppRoot() {\n  preinitModule(\"https://example.com/module.js\", {as: \"script\"});\n  // ...\n}\n```\n\nThis snippet shows you how to importing preinitmodule in a component, which is an important aspect of preinitmodule.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinitModule", "title": "preinitModule", "description": "`preinitModule` lets you eagerly fetch and evaluate an ESM module.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:53", "type": "code_examples", "page_metadata": {"ogTitle": "preinitModule – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "title": "preinitModule – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/preinitModule", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:title": "preinitModule – React", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:type": "website", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react-dom/preinitModule", "og:title": "preinitModule – React", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "scrapeId": "d08701b7-6a54-4fe0-8297-73c78c0e3d02", "sourceURL": "https://react.dev/reference/react-dom/preinitModule", "url": "https://react.dev/reference/react-dom/preinitModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using preinitModule in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReact-based frameworks frequently handle resource loading for you, so consult your framework’s documentation for details.\n\nUse `preloadModule` if you want the browser to download the module but not execute it right away.\n\nIn server-side rendering, call `preinitModule` while rendering a component or in an async context originating from rendering a component.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinitModule", "title": "preinitModule", "description": "`preinitModule` lets you eagerly fetch and evaluate an ESM module.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:16:53", "type": "best_practices", "page_metadata": {"ogTitle": "preinitModule – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "title": "preinitModule – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/preinitModule", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "twitter:title": "preinitModule – React", "msapplication-TileColor": "#2b5797", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "og:type": "website", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/react-dom/preinitModule", "og:title": "preinitModule – React", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "scrapeId": "d08701b7-6a54-4fe0-8297-73c78c0e3d02", "sourceURL": "https://react.dev/reference/react-dom/preinitModule", "url": "https://react.dev/reference/react-dom/preinitModule", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Built-in React DOM Hooks is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Built-in React DOM Hooks in react-reference.\n\n# Built-in React DOM Hooks\n\nThe react-dom package contains Hooks that are only supported for web applications (which run in the browser DOM environment). These Hooks are not supported in non-browser environments like iOS, Android, or Windows applications. If you are looking for Hooks that are supported in web browsers and other environments see the React Hooks page. This page lists all the Hooks in the react-dom package.Here's a quick rundown of what this is about:\n\n## Form Hooks\n\nForms let you create interactive controls for submitting information. To manage forms in your components, use one of these Hooks:\n\n- `useFormStatus` allows you to make updates to the UI based on the status of the a form.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks", "title": "Built-in React DOM Hooks", "description": "The react-dom package contains Hooks that are only supported for web applications (which run in the browser DOM environment). These Hooks are not supported in non-browser environments like iOS, Android, or Windows applications. If you are looking for Hooks that are supported in web browsers and other environments see the React Hooks page. This page lists all the Hooks in the react-dom package.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:17:01", "type": "overview", "page_metadata": {"og:title": "Built-in React DOM Hooks – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react-dom/hooks", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "title": "Built-in React DOM Hooks – React", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/hooks", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:title": "Built-in React DOM Hooks – React", "ogTitle": "Built-in React DOM Hooks – React", "scrapeId": "59efa9f0-4253-4647-9a1a-d68456dbcefe", "sourceURL": "https://react.dev/reference/react-dom/hooks", "url": "https://react.dev/reference/react-dom/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I form hooks in react-reference?\n\nAssistant: To form hooks in react-reference, here's what you do:\nForms let you create interactive controls for submitting information. To manage forms in your components, use one of these Hooks:\n\n- `useFormStatus` allows you to make updates to the UI based on the status of the a form..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks", "title": "Built-in React DOM Hooks", "description": "The react-dom package contains Hooks that are only supported for web applications (which run in the browser DOM environment). These Hooks are not supported in non-browser environments like iOS, Android, or Windows applications. If you are looking for Hooks that are supported in web browsers and other environments see the React Hooks page. This page lists all the Hooks in the react-dom package.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:17:01", "type": "section_detail", "page_metadata": {"og:title": "Built-in React DOM Hooks – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react-dom/hooks", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "title": "Built-in React DOM Hooks – React", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/hooks", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:title": "Built-in React DOM Hooks – React", "ogTitle": "Built-in React DOM Hooks – React", "scrapeId": "59efa9f0-4253-4647-9a1a-d68456dbcefe", "sourceURL": "https://react.dev/reference/react-dom/hooks", "url": "https://react.dev/reference/react-dom/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Built-in React DOM Hooks in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Form Example using useFormStatus**:\n\n```yaml\nfunction Form({ action }) {\n\n  async function increment(n) {\n\n    return n + 1;\n\n  }\n\n  const [count, incrementFormAction] = useActionState(increment, 0);\n\n  return (\n\n    <form action={action}>\n\n      <button formAction={incrementFormAction}>Count: {count}</button>\n\n      <Button />\n\n    </form>\n\n  );\n\n}\n\nfunction Button() {\n\n  const { pending } = useFormStatus();\n\n  return (\n\n    <button disabled={pending} type=\"submit\">\n\n      Submit\n\n    </button>\n\n  );\n\n}\n```\n\nThis snippet shows you how to form example using useformstatus, which is an important aspect of built-in react dom hooks.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks", "title": "Built-in React DOM Hooks", "description": "The react-dom package contains Hooks that are only supported for web applications (which run in the browser DOM environment). These Hooks are not supported in non-browser environments like iOS, Android, or Windows applications. If you are looking for Hooks that are supported in web browsers and other environments see the React Hooks page. This page lists all the Hooks in the react-dom package.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 01:17:01", "type": "code_examples", "page_metadata": {"og:title": "Built-in React DOM Hooks – React", "twitter:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "msapplication-TileColor": "#2b5797", "favicon": "https://react.dev/favicon-32x32.png", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "ogUrl": "https://react.dev/reference/react-dom/hooks", "og:image": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "language": "en", "title": "Built-in React DOM Hooks – React", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/hooks", "ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "twitter:title": "Built-in React DOM Hooks – React", "ogTitle": "Built-in React DOM Hooks – React", "scrapeId": "59efa9f0-4253-4647-9a1a-d68456dbcefe", "sourceURL": "https://react.dev/reference/react-dom/hooks", "url": "https://react.dev/reference/react-dom/hooks", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what prefetchDNS is in react-reference?\n\nAssistant: Sure, I'd be happy to explain prefetchDNS in react-reference.\n\n# prefetchDNS\n\n`prefetchDNS` lets you eagerly look up the IP of a server that you expect to load resources from.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `prefetchDNS(href)`\nTo look up a host, call the `prefetchDNS` function from `react-dom`.\n\n```sp-pre-placeholder grow-[2]\nimport { prefetchDNS } from 'react-dom';\n\nfunction AppRoot() {\n\n  prefetchDNS(\"https://example.com\");\n\n  // ...\n}\n```\n\nThe prefetchDNS function provides the browser with a hint that it should look up the IP address of a given server. If the browser chooses to do so, this can speed up the loading of resources from that server.\n\n#### Parameters\n- `href`: a string. The URL of the server you want to connect to.\n\n#### Returns\n`prefetchDNS` returns nothing.\n\n#### Caveats\n- Multiple calls to `prefetchDNS` with the same server have the same effect as a single call.\n- In the browser, you can call `prefetchDNS` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `prefetchDNS` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n- If you know the specific resources you’ll need, you can call [other functions](https://react.dev/reference/react-dom#resource-preloading-apis) instead that will start loading the resources right away.\n- There is no benefit to prefetching the same server the webpage itself is hosted from because it’s already been looked up by the time the hint would be given.\n- Compared with [`preconnect`](https://react.dev/reference/react-dom/preconnect), `prefetchDNS` may be better if you are speculatively connecting to a large number of domains, in which case the overhead of preconnections might outweigh the benefit.\n\n## Usage\n\n### Prefetching DNS when rendering\nCall `prefetchDNS` when rendering a component if you know that its children will load external resources from that host.\n\n```sp-pre-placeholder grow-[2]\nimport { prefetchDNS } from 'react-dom';\n\nfunction AppRoot() {\n\n  prefetchDNS(\"https://example.com\");\n\n  return ...;\n}\n```\n\n### Prefetching DNS in an event handler\nCall `prefetchDNS` in an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state.\n\n```sp-pre-placeholder grow-[2]\nimport { prefetchDNS } from 'react-dom';\n\nfunction CallToAction() {\n\n  const onClick = () => {\n\n    prefetchDNS('http://example.com');\n\n    startWizard();\n\n  }\n\n  return (\n\n    <button onClick={onClick}>Start Wizard</button>\n\n  );\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/prefetchDNS", "title": "prefetchDNS", "description": "`prefetchDNS` lets you eagerly look up the IP of a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:18", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/prefetchDNS", "twitter:creator": "@reactjs", "twitter:title": "prefetchDNS – React", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "title": "prefetchDNS – React", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogTitle": "prefetchDNS – React", "language": "en", "og:title": "prefetchDNS – React", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/prefetchDNS", "scrapeId": "38430aac-cc32-45cf-a1c5-4f23e0d2edc9", "sourceURL": "https://react.dev/reference/react-dom/prefetchDNS", "url": "https://react.dev/reference/react-dom/prefetchDNS", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `prefetchDNS(href)`\nTo look up a host, call the `prefetchDNS` function from `react-dom`.\n\n```sp-pre-placeholder grow-[2]\nimport { prefetchDNS } from 'react-dom';\n\nfunction AppRoot() {\n\n  prefetchDNS(\"https://example.com\");\n\n  // ...\n}\n```\n\nThe prefetchDNS function provides the browser with a hint that it should look up the IP address of a given server. If the browser chooses to do so, this can speed up the loading of resources from that server.\n\n#### Parameters\n- `href`: a string. The URL of the server you want to connect to.\n\n#### Returns\n`prefetchDNS` returns nothing.\n\n#### Caveats\n- Multiple calls to `prefetchDNS` with the same server have the same effect as a single call.\n- In the browser, you can call `prefetchDNS` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `prefetchDNS` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n- If you know the specific resources you’ll need, you can call [other functions](https://react.dev/reference/react-dom#resource-preloading-apis) instead that will start loading the resources right away.\n- There is no benefit to prefetching the same server the webpage itself is hosted from because it’s already been looked up by the time the hint would be given.\n- Compared with [`preconnect`](https://react.dev/reference/react-dom/preconnect), `prefetchDNS` may be better if you are speculatively connecting to a large number of domains, in which case the overhead of preconnections might outweigh the benefit..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/prefetchDNS", "title": "prefetchDNS", "description": "`prefetchDNS` lets you eagerly look up the IP of a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:18", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/prefetchDNS", "twitter:creator": "@reactjs", "twitter:title": "prefetchDNS – React", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "title": "prefetchDNS – React", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogTitle": "prefetchDNS – React", "language": "en", "og:title": "prefetchDNS – React", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/prefetchDNS", "scrapeId": "38430aac-cc32-45cf-a1c5-4f23e0d2edc9", "sourceURL": "https://react.dev/reference/react-dom/prefetchDNS", "url": "https://react.dev/reference/react-dom/prefetchDNS", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Prefetching DNS when rendering\nCall `prefetchDNS` when rendering a component if you know that its children will load external resources from that host.\n\n```sp-pre-placeholder grow-[2]\nimport { prefetchDNS } from 'react-dom';\n\nfunction AppRoot() {\n\n  prefetchDNS(\"https://example.com\");\n\n  return ...;\n}\n```\n\n### Prefetching DNS in an event handler\nCall `prefetchDNS` in an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state.\n\n```sp-pre-placeholder grow-[2]\nimport { prefetchDNS } from 'react-dom';\n\nfunction CallToAction() {\n\n  const onClick = () => {\n\n    prefetchDNS('http://example.com');\n\n    startWizard();\n\n  }\n\n  return (\n\n    <button onClick={onClick}>Start Wizard</button>\n\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/prefetchDNS", "title": "prefetchDNS", "description": "`prefetchDNS` lets you eagerly look up the IP of a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:18", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/prefetchDNS", "twitter:creator": "@reactjs", "twitter:title": "prefetchDNS – React", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "title": "prefetchDNS – React", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogTitle": "prefetchDNS – React", "language": "en", "og:title": "prefetchDNS – React", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/prefetchDNS", "scrapeId": "38430aac-cc32-45cf-a1c5-4f23e0d2edc9", "sourceURL": "https://react.dev/reference/react-dom/prefetchDNS", "url": "https://react.dev/reference/react-dom/prefetchDNS", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for prefetchDNS in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using prefetchDNS in a component**:\n\n```yaml\nimport { prefetchDNS } from 'react-dom';\n\nfunction AppRoot() {\n\n  prefetchDNS(\"https://example.com\");\n\n  // ...\n}\n```\n\nThis snippet shows you how to using prefetchdns in a component, which is an important aspect of prefetchdns.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/prefetchDNS", "title": "prefetchDNS", "description": "`prefetchDNS` lets you eagerly look up the IP of a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:18", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/prefetchDNS", "twitter:creator": "@reactjs", "twitter:title": "prefetchDNS – React", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "title": "prefetchDNS – React", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogTitle": "prefetchDNS – React", "language": "en", "og:title": "prefetchDNS – React", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/prefetchDNS", "scrapeId": "38430aac-cc32-45cf-a1c5-4f23e0d2edc9", "sourceURL": "https://react.dev/reference/react-dom/prefetchDNS", "url": "https://react.dev/reference/react-dom/prefetchDNS", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using prefetchDNS in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMultiple calls to `prefetchDNS` with the same server have the same effect as a single call.\n\nIn the browser, you can call `prefetchDNS` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n\nIn server-side rendering or when rendering Server Components, `prefetchDNS` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n\nIf you know the specific resources you’ll need, you can call other functions instead that will start loading the resources right away.\n\nThere is no benefit to prefetching the same server the webpage itself is hosted from because it’s already been looked up by the time the hint would be given.\n\nCompared with `preconnect`, `prefetchDNS` may be better if you are speculatively connecting to a large number of domains, in which case the overhead of preconnections might outweigh the benefit.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/prefetchDNS", "title": "prefetchDNS", "description": "`prefetchDNS` lets you eagerly look up the IP of a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:18", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/prefetchDNS", "twitter:creator": "@reactjs", "twitter:title": "prefetchDNS – React", "twitter:description": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "title": "prefetchDNS – React", "og:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogTitle": "prefetchDNS – React", "language": "en", "og:title": "prefetchDNS – React", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/prefetchDNS", "scrapeId": "38430aac-cc32-45cf-a1c5-4f23e0d2edc9", "sourceURL": "https://react.dev/reference/react-dom/prefetchDNS", "url": "https://react.dev/reference/react-dom/prefetchDNS", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what preconnect is in react-reference?\n\nAssistant: Sure, I'd be happy to explain preconnect in react-reference.\n\n# preconnect\n\n`preconnect` lets you eagerly connect to a server that you expect to load resources from.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `preconnect(href)`\nTo preconnect to a host, call the `preconnect` function from `react-dom`.\n\n```sp-pre-placeholder grow-[2]\nimport { preconnect } from 'react-dom';\n\nfunction AppRoot() {\n\n  preconnect(\"https://example.com\");\n\n  // ...\n}\n```\n\nThe `preconnect` function provides the browser with a hint that it should open a connection to the given server. If the browser chooses to do so, this can speed up the loading of resources from that server.\n\n#### Parameters\n- `href`: a string. The URL of the server you want to connect to.\n\n#### Returns\n`preconnect` returns nothing.\n\n#### Caveats\n- Multiple calls to `preconnect` with the same server have the same effect as a single call.\n- In the browser, you can call `preconnect` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `preconnect` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n- If you know the specific resources you’ll need, you can call [other functions](https://react.dev/reference/react-dom#resource-preloading-apis) instead that will start loading the resources right away.\n- There is no benefit to preconnecting to the same server the webpage itself is hosted from because it’s already been connected to by the time the hint would be given.\n\n## Usage\n\n### Preconnecting when rendering\nCall `preconnect` when rendering a component if you know that its children will load external resources from that host.\n\n```sp-pre-placeholder grow-[2]\nimport { preconnect } from 'react-dom';\n\nfunction AppRoot() {\n\n  preconnect(\"https://example.com\");\n\n  return ...;\n}\n```\n\n### Preconnecting in an event handler\nCall `preconnect` in an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state.\n\n```sp-pre-placeholder grow-[2]\nimport { preconnect } from 'react-dom';\n\nfunction CallToAction() {\n\n  const onClick = () => {\n\n    preconnect('http://example.com');\n\n    startWizard();\n\n  }\n\n  return (\n\n    <button onClick={onClick}>Start Wizard</button>\n\n  );\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preconnect", "title": "preconnect", "description": "`preconnect` lets you eagerly connect to a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:34", "type": "overview", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preconnect", "fb:app_id": "623268441017527", "ogTitle": "preconnect – React", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogUrl": "https://react.dev/reference/react-dom/preconnect", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "preconnect – React", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "title": "preconnect – React", "twitter:card": "summary_large_image", "twitter:title": "preconnect – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "scrapeId": "4937d7dd-3841-4eb2-83a1-5d81c8b5c733", "sourceURL": "https://react.dev/reference/react-dom/preconnect", "url": "https://react.dev/reference/react-dom/preconnect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `preconnect(href)`\nTo preconnect to a host, call the `preconnect` function from `react-dom`.\n\n```sp-pre-placeholder grow-[2]\nimport { preconnect } from 'react-dom';\n\nfunction AppRoot() {\n\n  preconnect(\"https://example.com\");\n\n  // ...\n}\n```\n\nThe `preconnect` function provides the browser with a hint that it should open a connection to the given server. If the browser chooses to do so, this can speed up the loading of resources from that server.\n\n#### Parameters\n- `href`: a string. The URL of the server you want to connect to.\n\n#### Returns\n`preconnect` returns nothing.\n\n#### Caveats\n- Multiple calls to `preconnect` with the same server have the same effect as a single call.\n- In the browser, you can call `preconnect` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `preconnect` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n- If you know the specific resources you’ll need, you can call [other functions](https://react.dev/reference/react-dom#resource-preloading-apis) instead that will start loading the resources right away.\n- There is no benefit to preconnecting to the same server the webpage itself is hosted from because it’s already been connected to by the time the hint would be given..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preconnect", "title": "preconnect", "description": "`preconnect` lets you eagerly connect to a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:34", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preconnect", "fb:app_id": "623268441017527", "ogTitle": "preconnect – React", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogUrl": "https://react.dev/reference/react-dom/preconnect", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "preconnect – React", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "title": "preconnect – React", "twitter:card": "summary_large_image", "twitter:title": "preconnect – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "scrapeId": "4937d7dd-3841-4eb2-83a1-5d81c8b5c733", "sourceURL": "https://react.dev/reference/react-dom/preconnect", "url": "https://react.dev/reference/react-dom/preconnect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Preconnecting when rendering\nCall `preconnect` when rendering a component if you know that its children will load external resources from that host.\n\n```sp-pre-placeholder grow-[2]\nimport { preconnect } from 'react-dom';\n\nfunction AppRoot() {\n\n  preconnect(\"https://example.com\");\n\n  return ...;\n}\n```\n\n### Preconnecting in an event handler\nCall `preconnect` in an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state.\n\n```sp-pre-placeholder grow-[2]\nimport { preconnect } from 'react-dom';\n\nfunction CallToAction() {\n\n  const onClick = () => {\n\n    preconnect('http://example.com');\n\n    startWizard();\n\n  }\n\n  return (\n\n    <button onClick={onClick}>Start Wizard</button>\n\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preconnect", "title": "preconnect", "description": "`preconnect` lets you eagerly connect to a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:34", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preconnect", "fb:app_id": "623268441017527", "ogTitle": "preconnect – React", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogUrl": "https://react.dev/reference/react-dom/preconnect", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "preconnect – React", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "title": "preconnect – React", "twitter:card": "summary_large_image", "twitter:title": "preconnect – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "scrapeId": "4937d7dd-3841-4eb2-83a1-5d81c8b5c733", "sourceURL": "https://react.dev/reference/react-dom/preconnect", "url": "https://react.dev/reference/react-dom/preconnect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for preconnect in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Preconnecting Example**:\n\n```yaml\npreconnect(\"https://example.com\");\n```\n\nThis snippet shows you how to preconnecting example, which is an important aspect of preconnect.\n\n**Preconnecting in Component**:\n\n```yaml\nimport { preconnect } from 'react-dom';\n\nfunction AppRoot() {\n  preconnect(\"https://example.com\");\n  // ...\n}\n```\n\nThis snippet shows you how to preconnecting in component, which is an important aspect of preconnect.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/preconnect", "title": "preconnect", "description": "`preconnect` lets you eagerly connect to a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:34", "type": "code_examples", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preconnect", "fb:app_id": "623268441017527", "ogTitle": "preconnect – React", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogUrl": "https://react.dev/reference/react-dom/preconnect", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "preconnect – React", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "title": "preconnect – React", "twitter:card": "summary_large_image", "twitter:title": "preconnect – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "scrapeId": "4937d7dd-3841-4eb2-83a1-5d81c8b5c733", "sourceURL": "https://react.dev/reference/react-dom/preconnect", "url": "https://react.dev/reference/react-dom/preconnect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using preconnect in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMultiple calls to `preconnect` with the same server have the same effect as a single call.\n\nIn the browser, you can call `preconnect` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n\nIn server-side rendering or when rendering Server Components, `preconnect` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n\nIf you know the specific resources you’ll need, you can call other functions instead that will start loading the resources right away.\n\nThere is no benefit to preconnecting to the same server the webpage itself is hosted from because it’s already been connected to by the time the hint would be given.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preconnect", "title": "preconnect", "description": "`preconnect` lets you eagerly connect to a server that you expect to load resources from.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 01:17:34", "type": "best_practices", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preconnect", "fb:app_id": "623268441017527", "ogTitle": "preconnect – React", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "ogUrl": "https://react.dev/reference/react-dom/preconnect", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "msapplication-TileColor": "#2b5797", "language": "en", "og:title": "preconnect – React", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "title": "preconnect – React", "twitter:card": "summary_large_image", "twitter:title": "preconnect – React", "viewport": "width=device-width, initial-scale=1", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "scrapeId": "4937d7dd-3841-4eb2-83a1-5d81c8b5c733", "sourceURL": "https://react.dev/reference/react-dom/preconnect", "url": "https://react.dev/reference/react-dom/preconnect", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what preload is in react-reference?\n\nAssistant: Sure, I'd be happy to explain preload in react-reference.\n\n# preload\n\nThe preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.Here's a quick rundown of what this is about:\n\n## Note\n\nReact-based frameworks frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details.\n\n## Reference\n\nTo preload a resource, call the preload function from react-dom.\n\nThe preload function provides the browser with a hint that it should start downloading the given resource, which can save time.\n\n## Parameters\n\n- `href`: a string. The URL of the resource you want to download.\n- `options`: an object. It contains the following properties:\n  - `as`: a required string. The type of resource. Its possible values are `audio`, `document`, `embed`, `fetch`, `font`, `image`, `object`, `script`, `style`, `track`, `video`, `worker`.\n  - `crossOrigin`: a string. The CORS policy to use. Its possible values are `anonymous` and `use-credentials`. It is required when `as` is set to `fetch`.\n  - `referrerPolicy`: a string. The Referrer header to send when fetching. Its possible values are `no-referrer-when-downgrade` (the default), `no-referrer`, `origin`, `origin-when-cross-origin`, and `unsafe-url`.\n  - `integrity`: a string. A cryptographic hash of the resource, to verify its authenticity.\n  - `type`: a string. The MIME type of the resource.\n  - `nonce`: a string. A cryptographic nonce to allow the resource when using a strict Content Security Policy.\n  - `fetchPriority`: a string. Suggests a relative priority for fetching the resource. The possible values are `auto` (the default), `high`, and `low`.\n  - `imageSrcSet`: a string. For use only with `as: \"image\"`. Specifies the source set of the image.\n  - `imageSizes`: a string. For use only with `as: \"image\"`. Specifies the sizes of the image.\n\n## Returns\n\npreload returns nothing.\n\n## Caveats\n\n- Multiple equivalent calls to preload have the same effect as a single call. Calls to preload are considered equivalent according to the following rules:\n  - Two calls are equivalent if they have the same `href`, except:\n  - If `as` is set to `image`, two calls are equivalent if they have the same `href`, `imageSrcSet`, and `imageSizes`.\n- In the browser, you can call preload in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, preload only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n\n## Usage\n\nCall preload when rendering a component if you know that it or its children will use a specific resource.\n\n## Examples of preloading\n\n1. Preloading an external script 2. Preloading a stylesheet 3. Preloading a font 4. Preloading an image\n\n## Example1 of4: Preloading an external script\n\nIf you want the browser to start executing the script immediately (rather than just downloading it), use preinit instead. If you want to load an ESM module, use preloadModule.\n\n## Preloading in an event handler\n\nCall preload in an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "overview", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I note in react-reference?\n\nAssistant: To note in react-reference, here's what you do:\nReact-based frameworks frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nTo preload a resource, call the preload function from react-dom.\n\nThe preload function provides the browser with a hint that it should start downloading the given resource, which can save time..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `href`: a string. The URL of the resource you want to download.\n- `options`: an object. It contains the following properties:\n  - `as`: a required string. The type of resource. Its possible values are `audio`, `document`, `embed`, `fetch`, `font`, `image`, `object`, `script`, `style`, `track`, `video`, `worker`.\n  - `crossOrigin`: a string. The CORS policy to use. Its possible values are `anonymous` and `use-credentials`. It is required when `as` is set to `fetch`.\n  - `referrerPolicy`: a string. The Referrer header to send when fetching. Its possible values are `no-referrer-when-downgrade` (the default), `no-referrer`, `origin`, `origin-when-cross-origin`, and `unsafe-url`.\n  - `integrity`: a string. A cryptographic hash of the resource, to verify its authenticity.\n  - `type`: a string. The MIME type of the resource.\n  - `nonce`: a string. A cryptographic nonce to allow the resource when using a strict Content Security Policy.\n  - `fetchPriority`: a string. Suggests a relative priority for fetching the resource. The possible values are `auto` (the default), `high`, and `low`.\n  - `imageSrcSet`: a string. For use only with `as: \"image\"`. Specifies the source set of the image.\n  - `imageSizes`: a string. For use only with `as: \"image\"`. Specifies the sizes of the image..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\npreload returns nothing..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- Multiple equivalent calls to preload have the same effect as a single call. Calls to preload are considered equivalent according to the following rules:\n  - Two calls are equivalent if they have the same `href`, except:\n  - If `as` is set to `image`, two calls are equivalent if they have the same `href`, `imageSrcSet`, and `imageSizes`.\n- In the browser, you can call preload in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, preload only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nCall preload when rendering a component if you know that it or its children will use a specific resource..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I examples of preloading in react-reference?\n\nAssistant: To examples of preloading in react-reference, here's what you do:\n1. Preloading an external script 2. Preloading a stylesheet 3. Preloading a font 4. Preloading an image.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I example1 of4: preloading an external script in react-reference?\n\nAssistant: To example1 of4: preloading an external script in react-reference, here's what you do:\nIf you want the browser to start executing the script immediately (rather than just downloading it), use preinit instead. If you want to load an ESM module, use preloadModule..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I preloading in an event handler in react-reference?\n\nAssistant: To preloading in an event handler in react-reference, here's what you do:\nCall preload in an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for preload in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Preload Example**:\n\n```yaml\npreload(\"https://example.com/font.woff2\", {as: \"font\"});\n```\n\nThis snippet shows you how to preload example, which is an important aspect of preload.\n\n**Preload in AppRoot**:\n\n```yaml\nimport { preload } from 'react-dom';\n\nfunction AppRoot() {\n  preload(\"https://example.com/font.woff2\", {as: \"font\"});\n  // ...\n}\n```\n\nThis snippet shows you how to preload in approot, which is an important aspect of preload.\n\n**Preload External Script Example**:\n\n```yaml\nimport { preload } from 'react-dom';\n\nfunction AppRoot() {\n  preload(\"https://example.com/script.js\", {as: \"script\"});\n  return ...;\n}\n```\n\nThis snippet shows you how to preload external script example, which is an important aspect of preload.\n\n**Preload in Event Handler Example**:\n\n```yaml\nimport { preload } from 'react-dom';\n\nfunction CallToAction() {\n  const onClick = () => {\n    preload(\"https://example.com/wizardStyles.css\", {as: \"style\"});\n    startWizard();\n  }\n\n  return (\n    <button onClick={onClick}>Start Wizard</button>\n  );\n}\n```\n\nThis snippet shows you how to preload in event handler example, which is an important aspect of preload.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "code_examples", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using preload in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReact-based frameworks frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preload", "title": "preload", "description": "The preload API allows you to eagerly fetch resources like stylesheets, fonts, or external scripts that you expect to use.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:17:50", "type": "best_practices", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/preload", "fb:app_id": "623268441017527", "language": "en", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "title": "preload – React", "ogDescription": "The library for web and native user interfaces", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "preload – React", "ogUrl": "https://react.dev/reference/react-dom/preload", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "twitter:site": "@reactjs", "og:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "og:type": "website", "ogTitle": "preload – React", "og:title": "preload – React", "favicon": "https://react.dev/favicon-32x32.png", "scrapeId": "87a82bb7-4958-4e8e-b29a-853330503ea6", "sourceURL": "https://react.dev/reference/react-dom/preload", "url": "https://react.dev/reference/react-dom/preload", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Server React DOM APIs is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Server React DOM APIs in react-reference.\n\n# Server React DOM APIs\n\nThe `react-dom/server` APIs let you server-side render React components to HTML. These APIs are only used on the server at the top level of your app to generate the initial HTML.Here's a quick rundown of what this is about:\n\n## Server APIs for Node.js Streams\n\nThese methods are only available in the environments with Node.js Streams:\n\n- [`renderToPipeableStream`](https://react.dev/reference/react-dom/server/renderToPipeableStream) renders a React tree to a pipeable [Node.js Stream.](https://nodejs.org/api/stream.html)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/server", "title": "Server React DOM APIs", "description": "The `react-dom/server` APIs let you server-side render React components to HTML. These APIs are only used on the server at the top level of your app to generate the initial HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:17:59", "type": "overview", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:title": "Server React DOM APIs – React", "title": "Server React DOM APIs – React", "ogTitle": "Server React DOM APIs – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/server", "og:url": "https://react.dev/reference/react-dom/server", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "theme-color": "#23272f", "twitter:title": "Server React DOM APIs – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "2348af40-2762-4256-b977-063bd8c3407f", "sourceURL": "https://react.dev/reference/react-dom/server", "url": "https://react.dev/reference/react-dom/server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I server apis for node.js streams in react-reference?\n\nAssistant: To server apis for node.js streams in react-reference, here's what you do:\nThese methods are only available in the environments with Node.js Streams:\n\n- [`renderToPipeableStream`](https://react.dev/reference/react-dom/server/renderToPipeableStream) renders a React tree to a pipeable [Node.js Stream.](https://nodejs.org/api/stream.html).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/server", "title": "Server React DOM APIs", "description": "The `react-dom/server` APIs let you server-side render React components to HTML. These APIs are only used on the server at the top level of your app to generate the initial HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:17:59", "type": "section_detail", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:title": "Server React DOM APIs – React", "title": "Server React DOM APIs – React", "ogTitle": "Server React DOM APIs – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/server", "og:url": "https://react.dev/reference/react-dom/server", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "theme-color": "#23272f", "twitter:title": "Server React DOM APIs – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "2348af40-2762-4256-b977-063bd8c3407f", "sourceURL": "https://react.dev/reference/react-dom/server", "url": "https://react.dev/reference/react-dom/server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Server React DOM APIs in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**renderToPipeableStream**:\n\n```yaml\nrenderToPipeableStream\n```\n\nThis snippet shows you how to rendertopipeablestream, which is an important aspect of server react dom apis.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/server", "title": "Server React DOM APIs", "description": "The `react-dom/server` APIs let you server-side render React components to HTML. These APIs are only used on the server at the top level of your app to generate the initial HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:17:59", "type": "code_examples", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:title": "Server React DOM APIs – React", "title": "Server React DOM APIs – React", "ogTitle": "Server React DOM APIs – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/server", "og:url": "https://react.dev/reference/react-dom/server", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "theme-color": "#23272f", "twitter:title": "Server React DOM APIs – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "2348af40-2762-4256-b977-063bd8c3407f", "sourceURL": "https://react.dev/reference/react-dom/server", "url": "https://react.dev/reference/react-dom/server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Server React DOM APIs in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nMost of your components don’t need to import or use them.\n\nThese methods can be used in the environments that don’t support streams.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/server", "title": "Server React DOM APIs", "description": "The `react-dom/server` APIs let you server-side render React components to HTML. These APIs are only used on the server at the top level of your app to generate the initial HTML.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:17:59", "type": "best_practices", "page_metadata": {"twitter:description": "The library for web and native user interfaces", "og:type": "website", "og:image": "https://react.dev/images/og-reference.png", "og:title": "Server React DOM APIs – React", "title": "Server React DOM APIs – React", "ogTitle": "Server React DOM APIs – React", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/server", "og:url": "https://react.dev/reference/react-dom/server", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "twitter:card": "summary_large_image", "twitter:site": "@reactjs", "theme-color": "#23272f", "twitter:title": "Server React DOM APIs – React", "viewport": "width=device-width, initial-scale=1", "og:description": "The library for web and native user interfaces", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "fb:app_id": "623268441017527", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "2348af40-2762-4256-b977-063bd8c3407f", "sourceURL": "https://react.dev/reference/react-dom/server", "url": "https://react.dev/reference/react-dom/server", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what render is in react-reference?\n\nAssistant: Sure, I'd be happy to explain render in react-reference.\n\n# render\n\nThis API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.Here's a quick rundown of what this is about:\n\n## Deprecated\n\nThis API will be removed in a future major version of React.\n\nIn React 18, `render` was replaced by [`createRoot`.](https://18.react.dev/reference/react-dom/client/createRoot) Using `render` in React 18 will warn that your app will behave as if it’s running React 17. Learn more [here.](https://18.react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis)\n\n`render` renders a piece of [JSX](https://18.react.dev/learn/writing-markup-with-jsx) (“React node”) into a browser DOM node.\n\n## Reference\n\nCall `render` to display a React component inside a browser DOM element.\n\n```sp-pre-placeholder grow-[2]\nimport { render } from 'react-dom';\n\nconst domNode = document.getElementById('root');\n\nrender(<App />, domNode);\n```\n\nReact will display `<App />` in the `domNode`, and take over managing the DOM inside it.\n\nAn app fully built with React will usually only have one `render` call with its root component. A page that uses “sprinkles” of React for parts of the page may have as many `render` calls as needed.\n\n## Parameters\n\n- `reactNode`: A _React node_ that you want to display. This will usually be a piece of JSX like `<App />`, but you can also pass a React element constructed with [`createElement()`](https://18.react.dev/reference/react/createElement), a string, a number, `null`, or `undefined`.\n\n- `domNode`: A [DOM element.](https://developer.mozilla.org/en-US/docs/Web/API/Element) React will display the `reactNode` you pass inside this DOM element. From this moment, React will manage the DOM inside the `domNode` and update it when your React tree changes.\n\n- **optional** `callback`: A function. If passed, React will call it after your component is placed into the DOM.\n\n## Returns\n\n`render` usually returns `null`. However, if the `reactNode` you pass is a _class component_, then it will return an instance of that component.\n\n## Caveats\n\n- In React 18, `render` was replaced by [`createRoot`.](https://18.react.dev/reference/react-dom/client/createRoot) Please use `createRoot` for React 18 and beyond.\n\n- The first time you call `render`, React will clear all the existing HTML content inside the `domNode` before rendering the React component into it. If your `domNode` contains HTML generated by React on the server or during the build, use [`hydrate()`](https://18.react.dev/reference/react-dom/hydrate) instead, which attaches the event handlers to the existing HTML.\n\n- If you call `render` on the same `domNode` more than once, React will update the DOM as necessary to reflect the latest JSX you passed. React will decide which parts of the DOM can be reused and which need to be recreated by [“matching it up”](https://18.react.dev/learn/preserving-and-resetting-state) with the previously rendered tree. Calling `render` on the same `domNode` again is similar to calling the [`set` function](https://18.react.dev/reference/react/useState#setstate) on the root component: React avoids unnecessary DOM updates.\n\n- If your app is fully built with React, you’ll likely have only one `render` call in your app. (If you use a framework, it might do this call for you.) When you want to render a piece of JSX in a different part of the DOM tree that isn’t a child of your component (for example, a modal or a tooltip), use [`createPortal`](https://18.react.dev/reference/react-dom/createPortal) instead of `render`.\n\n## Usage\n\nCall `render` to display a React component inside a browser DOM node.\n\n```sp-pre-placeholder grow-[2]\nimport { render } from 'react-dom';\n\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n```\n\nIn apps fully built with React, **you will usually only do this once at startup**—to render the “root” component.\n\n## Rendering the root component\n\nIn apps fully built with React, **you will usually only do this once at startup**—to render the “root” component.\n\n```javascript\nimport './styles.css';\nimport { render } from 'react-dom';\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n```\n\nUsually you shouldn’t need to call `render` again or to call it in more places. From this point on, React will be managing the DOM of your application. To update the UI, your components will [use state.](https://18.react.dev/reference/react/useState)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "overview", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deprecated in react-reference?\n\nAssistant: To deprecated in react-reference, here's what you do:\nThis API will be removed in a future major version of React.\n\nIn React 18, `render` was replaced by [`createRoot`.](https://18.react.dev/reference/react-dom/client/createRoot) Using `render` in React 18 will warn that your app will behave as if it’s running React 17. Learn more [here.](https://18.react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis)\n\n`render` renders a piece of [JSX](https://18.react.dev/learn/writing-markup-with-jsx) (“React node”) into a browser DOM node..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `render` to display a React component inside a browser DOM element.\n\n```sp-pre-placeholder grow-[2]\nimport { render } from 'react-dom';\n\nconst domNode = document.getElementById('root');\n\nrender(<App />, domNode);\n```\n\nReact will display `<App />` in the `domNode`, and take over managing the DOM inside it.\n\nAn app fully built with React will usually only have one `render` call with its root component. A page that uses “sprinkles” of React for parts of the page may have as many `render` calls as needed..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `reactNode`: A _React node_ that you want to display. This will usually be a piece of JSX like `<App />`, but you can also pass a React element constructed with [`createElement()`](https://18.react.dev/reference/react/createElement), a string, a number, `null`, or `undefined`.\n\n- `domNode`: A [DOM element.](https://developer.mozilla.org/en-US/docs/Web/API/Element) React will display the `reactNode` you pass inside this DOM element. From this moment, React will manage the DOM inside the `domNode` and update it when your React tree changes.\n\n- **optional** `callback`: A function. If passed, React will call it after your component is placed into the DOM..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`render` usually returns `null`. However, if the `reactNode` you pass is a _class component_, then it will return an instance of that component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- In React 18, `render` was replaced by [`createRoot`.](https://18.react.dev/reference/react-dom/client/createRoot) Please use `createRoot` for React 18 and beyond.\n\n- The first time you call `render`, React will clear all the existing HTML content inside the `domNode` before rendering the React component into it. If your `domNode` contains HTML generated by React on the server or during the build, use [`hydrate()`](https://18.react.dev/reference/react-dom/hydrate) instead, which attaches the event handlers to the existing HTML.\n\n- If you call `render` on the same `domNode` more than once, React will update the DOM as necessary to reflect the latest JSX you passed. React will decide which parts of the DOM can be reused and which need to be recreated by [“matching it up”](https://18.react.dev/learn/preserving-and-resetting-state) with the previously rendered tree. Calling `render` on the same `domNode` again is similar to calling the [`set` function](https://18.react.dev/reference/react/useState#setstate) on the root component: React avoids unnecessary DOM updates.\n\n- If your app is fully built with React, you’ll likely have only one `render` call in your app. (If you use a framework, it might do this call for you.) When you want to render a piece of JSX in a different part of the DOM tree that isn’t a child of your component (for example, a modal or a tooltip), use [`createPortal`](https://18.react.dev/reference/react-dom/createPortal) instead of `render`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nCall `render` to display a React component inside a browser DOM node.\n\n```sp-pre-placeholder grow-[2]\nimport { render } from 'react-dom';\n\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n```\n\nIn apps fully built with React, **you will usually only do this once at startup**—to render the “root” component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I rendering the root component in react-reference?\n\nAssistant: To rendering the root component in react-reference, here's what you do:\nIn apps fully built with React, **you will usually only do this once at startup**—to render the “root” component.\n\n```javascript\nimport './styles.css';\nimport { render } from 'react-dom';\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n```\n\nUsually you shouldn’t need to call `render` again or to call it in more places. From this point on, React will be managing the DOM of your application. To update the UI, your components will [use state.](https://18.react.dev/reference/react/useState).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "section_detail", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for render in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic render example**:\n\n```yaml\nimport { render } from 'react-dom';\n\nconst domNode = document.getElementById('root');\n\nrender(<App />, domNode);\n```\n\nThis snippet shows you how to basic render example, which is an important aspect of render.\n\n**Rendering the root component**:\n\n```yaml\nimport './styles.css';\nimport { render } from 'react-dom';\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n```\n\nThis snippet shows you how to rendering the root component, which is an important aspect of render.\n\n**Rendering multiple roots**:\n\n```yaml\nimport './styles.css';\nimport { render } from 'react-dom';\nimport { Comments, Navigation } from './Components.js';\n\nrender(\n  <Navigation />, \n  document.getElementById('navigation')\n);\n\nrender(\n  <Comments />, \n  document.getElementById('comments')\n);\n```\n\nThis snippet shows you how to rendering multiple roots, which is an important aspect of render.\n\n**Updating the rendered tree**:\n\n```yaml\nimport { render } from 'react-dom';\nimport './styles.css';\nimport App from './App.js';\n\nlet i = 0;\nsetInterval(() => {\n  render(\n    <App counter={i} />, \n    document.getElementById('root')\n  );\n  i++;\n}, 1000);\n```\n\nThis snippet shows you how to updating the rendered tree, which is an important aspect of render.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "code_examples", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using render in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIn React 18, use `createRoot` instead of `render`.\n\nUse `hydrate()` if your `domNode` contains HTML generated by React on the server or during the build.\n\nTo render a piece of JSX in a different part of the DOM tree, use `createPortal` instead of `render`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/render", "title": "render", "description": "This API will be removed in a future major version of React. In React 18, `render` was replaced by `createRoot`. Using `render` in React 18 will warn that your app will behave as if it’s running React 17.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:18:30", "type": "best_practices", "page_metadata": {"twitter:site": "@reactjs", "favicon": "https://18.react.dev/favicon-32x32.png", "fb:app_id": "623268441017527", "title": "render – React", "og:url": "https://react.dev/reference/react-dom/render", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "ogUrl": "https://react.dev/reference/react-dom/render", "twitter:card": "summary_large_image", "ogImage": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "language": "en", "ogDescription": "The library for web and native user interfaces", "ogTitle": "render – React", "og:title": "render – React", "viewport": "width=device-width, initial-scale=1", "twitter:creator": "@reactjs", "twitter:title": "render – React", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "og:description": "The library for web and native user interfaces", "scrapeId": "b1e5d2d8-f74a-4f71-a890-286abc9432b5", "sourceURL": "https://react.dev/reference/react-dom/render", "url": "https://18.react.dev/reference/react-dom/render", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what preinit is in react-reference?\n\nAssistant: Sure, I'd be happy to explain preinit in react-reference.\n\n# preinit\n\n`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.Here's a quick rundown of what this is about:\n\n## Note\n\n[React-based frameworks](https://react.dev/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details.\n\n## Reference\n\nTo preinit a script or stylesheet, call the `preinit` function from `react-dom`.\n\n```sp-pre-placeholder grow-[2]\nimport { preinit } from 'react-dom';\n\nfunction AppRoot() {\n\n  preinit(\"https://example.com/script.js\", {as: \"script\"});\n\n  // ...\n}\n```\n\nThe `preinit` function provides the browser with a hint that it should start downloading and executing the given resource, which can save time. Scripts that you `preinit` are executed when they finish downloading. Stylesheets that you preinit are inserted into the document, which causes them to go into effect right away.\n\n## Parameters\n\n- `href`: a string. The URL of the resource you want to download and execute.\n- `options`: an object. It contains the following properties:\n  - `as`: a required string. The type of resource. Its possible values are `script` and `style`.\n  - `precedence`: a string. Required with stylesheets. Says where to insert the stylesheet relative to others. Stylesheets with higher precedence can override those with lower precedence. The possible values are `reset`, `low`, `medium`, `high`.\n  - `crossOrigin`: a string. The [CORS policy](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) to use. Its possible values are `anonymous` and `use-credentials`. It is required when `as` is set to `\"fetch\"`.\n  - `integrity`: a string. A cryptographic hash of the resource, to [verify its authenticity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).\n  - `nonce`: a string. A cryptographic [nonce to allow the resource](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) when using a strict Content Security Policy.\n  - `fetchPriority`: a string. Suggests a relative priority for fetching the resource. The possible values are `auto` (the default), `high`, and `low`.\n\n## Returns\n\n`preinit` returns nothing.\n\n## Caveats\n\n- Multiple calls to `preinit` with the same `href` have the same effect as a single call.\n- In the browser, you can call `preinit` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `preinit` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.\n\n## Usage\n\nCall `preinit` when rendering a component if you know that it or its children will use a specific resource, and you’re OK with the resource being evaluated and thereby taking effect immediately upon being downloaded.\n\n## Examples of preiniting\n\n1. Preiniting an external script 2. Preiniting a stylesheet\n\n## Example1 of2:   Preiniting an external script\n\n```sp-pre-placeholder grow-[2]\nimport { preinit } from 'react-dom';\n\nfunction AppRoot() {\n\n  preinit(\"https://example.com/script.js\", {as: \"script\"});\n\n  return ...;\n}\n```\n\nIf you want the browser to download the script but not to execute it right away, use [`preload`](https://react.dev/reference/react-dom/preload) instead. If you want to load an ESM module, use [`preinitModule`](https://react.dev/reference/react-dom/preinitModule).\n\n## Preiniting in an event handler\n\nCall `preinit` in an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state.\n\n## Example of Preiniting in an event handler\n\n```sp-pre-placeholder grow-[2]\nimport { preinit } from 'react-dom';\n\nfunction CallToAction() {\n\n  const onClick = () => {\n\n    preinit(\"https://example.com/wizardStyles.css\", {as: \"style\"});\n\n    startWizard();\n\n  }\n\n  return (\n\n    <button onClick={onClick}>Start Wizard</button>\n\n  );\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "overview", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I note in react-reference?\n\nAssistant: To note in react-reference, here's what you do:\n[React-based frameworks](https://react.dev/learn/start-a-new-react-project) frequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nTo preinit a script or stylesheet, call the `preinit` function from `react-dom`.\n\n```sp-pre-placeholder grow-[2]\nimport { preinit } from 'react-dom';\n\nfunction AppRoot() {\n\n  preinit(\"https://example.com/script.js\", {as: \"script\"});\n\n  // ...\n}\n```\n\nThe `preinit` function provides the browser with a hint that it should start downloading and executing the given resource, which can save time. Scripts that you `preinit` are executed when they finish downloading. Stylesheets that you preinit are inserted into the document, which causes them to go into effect right away..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `href`: a string. The URL of the resource you want to download and execute.\n- `options`: an object. It contains the following properties:\n  - `as`: a required string. The type of resource. Its possible values are `script` and `style`.\n  - `precedence`: a string. Required with stylesheets. Says where to insert the stylesheet relative to others. Stylesheets with higher precedence can override those with lower precedence. The possible values are `reset`, `low`, `medium`, `high`.\n  - `crossOrigin`: a string. The [CORS policy](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) to use. Its possible values are `anonymous` and `use-credentials`. It is required when `as` is set to `\"fetch\"`.\n  - `integrity`: a string. A cryptographic hash of the resource, to [verify its authenticity](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).\n  - `nonce`: a string. A cryptographic [nonce to allow the resource](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) when using a strict Content Security Policy.\n  - `fetchPriority`: a string. Suggests a relative priority for fetching the resource. The possible values are `auto` (the default), `high`, and `low`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`preinit` returns nothing..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- Multiple calls to `preinit` with the same `href` have the same effect as a single call.\n- In the browser, you can call `preinit` in any situation: while rendering a component, in an Effect, in an event handler, and so on.\n- In server-side rendering or when rendering Server Components, `preinit` only has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nCall `preinit` when rendering a component if you know that it or its children will use a specific resource, and you’re OK with the resource being evaluated and thereby taking effect immediately upon being downloaded..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I examples of preiniting in react-reference?\n\nAssistant: To examples of preiniting in react-reference, here's what you do:\n1. Preiniting an external script 2. Preiniting a stylesheet.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I example1 of2:   preiniting an external script in react-reference?\n\nAssistant: To example1 of2:   preiniting an external script in react-reference, here's what you do:\n```sp-pre-placeholder grow-[2]\nimport { preinit } from 'react-dom';\n\nfunction AppRoot() {\n\n  preinit(\"https://example.com/script.js\", {as: \"script\"});\n\n  return ...;\n}\n```\n\nIf you want the browser to download the script but not to execute it right away, use [`preload`](https://react.dev/reference/react-dom/preload) instead. If you want to load an ESM module, use [`preinitModule`](https://react.dev/reference/react-dom/preinitModule)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I preiniting in an event handler in react-reference?\n\nAssistant: To preiniting in an event handler in react-reference, here's what you do:\nCall `preinit` in an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I example of preiniting in an event handler in react-reference?\n\nAssistant: To example of preiniting in an event handler in react-reference, here's what you do:\n```sp-pre-placeholder grow-[2]\nimport { preinit } from 'react-dom';\n\nfunction CallToAction() {\n\n  const onClick = () => {\n\n    preinit(\"https://example.com/wizardStyles.css\", {as: \"style\"});\n\n    startWizard();\n\n  }\n\n  return (\n\n    <button onClick={onClick}>Start Wizard</button>\n\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "section_detail", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for preinit in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic preinit usage**:\n\n```yaml\npreinit(\"https://example.com/script.js\", {as: \"script\"});\n```\n\nThis snippet shows you how to basic preinit usage, which is an important aspect of preinit.\n\n**Importing preinit from react-dom**:\n\n```yaml\nimport { preinit } from 'react-dom';\n\nfunction AppRoot() {\n  preinit(\"https://example.com/script.js\", {as: \"script\"});\n}\n```\n\nThis snippet shows you how to importing preinit from react-dom, which is an important aspect of preinit.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "code_examples", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using preinit in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nConsult your framework’s documentation for details on resource loading.\n\nUse `preload` if you want the browser to download the script but not execute it right away.\n\nUse `preinitModule` if you want to load an ESM module.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/preinit", "title": "preinit", "description": "`preinit` lets you eagerly fetch and evaluate a stylesheet or external script.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-03-01 01:18:52", "type": "best_practices", "page_metadata": {"ogDescription": "The library for web and native user interfaces", "og:title": "preinit – React", "twitter:creator": "@reactjs", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/preinit", "language": "en", "twitter:description": "The library for web and native user interfaces", "og:description": "The library for web and native user interfaces", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "title": "preinit – React", "ogTitle": "preinit – React", "twitter:title": "preinit – React", "msapplication-TileColor": "#2b5797", "ogImage": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/preinit", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "theme-color": "#23272f", "scrapeId": "3a4faa29-46de-42ed-9a06-ae256c7f1474", "sourceURL": "https://react.dev/reference/react-dom/preinit", "url": "https://react.dev/reference/react-dom/preinit", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what 'use client' is in react-reference?\n\nAssistant: Sure, I'd be happy to explain 'use client' in react-reference.\n\n# 'use client'\n\n'use client' is for use with React Server Components, allowing you to mark what code runs on the client.Here's a quick rundown of what this is about:\n\n## React Server Components\n\n'use client' is for use with [React Server Components](https://react.dev/learn/start-a-new-react-project#bleeding-edge-react-frameworks).\n\n'use client' lets you mark what code runs on the client.\n\n- [Reference](https://react.dev/reference/rsc/use-client#reference)\n  - [`'use client'`](https://react.dev/reference/rsc/use-client#use-client)\n  - [How `'use client'` marks client code](https://react.dev/reference/rsc/use-client#how-use-client-marks-client-code)\n  - [When to use `'use client'`](https://react.dev/reference/rsc/use-client#when-to-use-use-client)\n  - [Serializable types returned by Server Components](https://react.dev/reference/rsc/use-client#serializable-types)\n- [Usage](https://react.dev/reference/rsc/use-client#usage)\n  - [Building with interactivity and state](https://react.dev/reference/rsc/use-client#building-with-interactivity-and-state)\n  - [Using client APIs](https://react.dev/reference/rsc/use-client#using-client-apis)\n  - [Using third-party libraries](https://react.dev/reference/rsc/use-client#using-third-party-libraries)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/rsc/use-client", "title": "'use client'", "description": "'use client' is for use with React Server Components, allowing you to mark what code runs on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:19:02", "type": "overview", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "title": "'use client' directive – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "'use client' directive – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "'use client' directive – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/rsc/use-client", "viewport": "width=device-width, initial-scale=1", "ogTitle": "'use client' directive – React", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/rsc/use-client", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e7b99fca-88d4-499a-9dc6-efa290c4c7c2", "sourceURL": "https://react.dev/reference/rsc/use-client", "url": "https://react.dev/reference/rsc/use-client", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I react server components in react-reference?\n\nAssistant: To react server components in react-reference, here's what you do:\n'use client' is for use with [React Server Components](https://react.dev/learn/start-a-new-react-project#bleeding-edge-react-frameworks).\n\n'use client' lets you mark what code runs on the client.\n\n- [Reference](https://react.dev/reference/rsc/use-client#reference)\n  - [`'use client'`](https://react.dev/reference/rsc/use-client#use-client)\n  - [How `'use client'` marks client code](https://react.dev/reference/rsc/use-client#how-use-client-marks-client-code)\n  - [When to use `'use client'`](https://react.dev/reference/rsc/use-client#when-to-use-use-client)\n  - [Serializable types returned by Server Components](https://react.dev/reference/rsc/use-client#serializable-types)\n- [Usage](https://react.dev/reference/rsc/use-client#usage)\n  - [Building with interactivity and state](https://react.dev/reference/rsc/use-client#building-with-interactivity-and-state)\n  - [Using client APIs](https://react.dev/reference/rsc/use-client#using-client-apis)\n  - [Using third-party libraries](https://react.dev/reference/rsc/use-client#using-third-party-libraries).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/rsc/use-client", "title": "'use client'", "description": "'use client' is for use with React Server Components, allowing you to mark what code runs on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:19:02", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "title": "'use client' directive – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "'use client' directive – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "'use client' directive – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/rsc/use-client", "viewport": "width=device-width, initial-scale=1", "ogTitle": "'use client' directive – React", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/rsc/use-client", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e7b99fca-88d4-499a-9dc6-efa290c4c7c2", "sourceURL": "https://react.dev/reference/rsc/use-client", "url": "https://react.dev/reference/rsc/use-client", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for 'use client' in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**'use client' Example**:\n\n```yaml\n'use client';\n\nimport { useState } from 'react';\n\nimport { formatDate } from './formatters';\n\nimport Button from './button';\n\nexport default function RichTextEditor({ timestamp, text }) {\n\n  const date = formatDate(timestamp);\n\n  // ...\n\n  const editButton = <Button />;\n\n  // ...\n}\n```\n\nThis snippet shows you how to 'use client' example, which is an important aspect of 'use client'.\n\n", "metadata": {"source_url": "https://react.dev/reference/rsc/use-client", "title": "'use client'", "description": "'use client' is for use with React Server Components, allowing you to mark what code runs on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:19:02", "type": "code_examples", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "title": "'use client' directive – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "'use client' directive – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "'use client' directive – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/rsc/use-client", "viewport": "width=device-width, initial-scale=1", "ogTitle": "'use client' directive – React", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/rsc/use-client", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e7b99fca-88d4-499a-9dc6-efa290c4c7c2", "sourceURL": "https://react.dev/reference/rsc/use-client", "url": "https://react.dev/reference/rsc/use-client", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using 'use client' in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\n'use client' must be at the very beginning of a file, above any imports or other code (comments are OK). They must be written with single or double quotes, but not backticks.\n\nWhen a 'use client' module is imported from another client-rendered module, the directive has no effect.\n\nCode that is marked for client evaluation is not limited to components. All code that is a part of the Client module sub-tree is sent to and run by the client.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/rsc/use-client", "title": "'use client'", "description": "'use client' is for use with React Server Components, allowing you to mark what code runs on the client.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:19:02", "type": "best_practices", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "language": "en", "title": "'use client' directive – React", "ogImage": "https://react.dev/images/og-reference.png", "twitter:title": "'use client' directive – React", "og:description": "The library for web and native user interfaces", "og:type": "website", "twitter:card": "summary_large_image", "favicon": "https://react.dev/favicon-32x32.png", "twitter:site": "@reactjs", "ogDescription": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:title": "'use client' directive – React", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/rsc/use-client", "viewport": "width=device-width, initial-scale=1", "ogTitle": "'use client' directive – React", "fb:app_id": "623268441017527", "og:url": "https://react.dev/reference/rsc/use-client", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "e7b99fca-88d4-499a-9dc6-efa290c4c7c2", "sourceURL": "https://react.dev/reference/rsc/use-client", "url": "https://react.dev/reference/rsc/use-client", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what renderToNodeStream is in react-reference?\n\nAssistant: Sure, I'd be happy to explain renderToNodeStream in react-reference.\n\n# renderToNodeStream\n\nThis API will be removed in a future major version of React. Use `renderToPipeableStream` instead. `renderToNodeStream` renders a React tree to a Node.js Readable Stream.Here's a quick rundown of what this is about:\n\n## Reference\n\nOn the server, call `renderToNodeStream` to get a [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) which you can pipe into the response.\n\n```sp-pre-placeholder grow-[2]\nimport { renderToNodeStream } from 'react-dom/server';\n\nconst stream = renderToNodeStream(<App />);\n\nstream.pipe(response);\n```\n\nOn the client, call [`hydrateRoot`](https://18.react.dev/reference/react-dom/client/hydrateRoot) to make the server-generated HTML interactive.\n\n## Parameters\n\n- `reactNode`: A React node you want to render to HTML. For example, a JSX element like `<App />`.\n\n- **optional** `options`: An object for server render.\n  - **optional** `identifierPrefix`: A string prefix React uses for IDs generated by [`useId`.](https://18.react.dev/reference/react/useId) Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed to [`hydrateRoot`.](https://18.react.dev/reference/react-dom/client/hydrateRoot#parameters)\n\n## Returns\n\nA [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) that outputs an HTML string.\n\n## Caveats\n\n- This method will wait for all [Suspense boundaries](https://18.react.dev/reference/react/Suspense) to complete before returning any output.\n\n- As of React 18, this method buffers all of its output, so it doesn’t actually provide any streaming benefits. This is why it’s recommended that you migrate to [`renderToPipeableStream`](https://18.react.dev/reference/react-dom/server/renderToPipeableStream) instead.\n\n- The returned stream is a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like [iconv-lite](https://www.npmjs.com/package/iconv-lite), which provides transform streams for transcoding text.\n\n## Usage\n\nCall `renderToNodeStream` to get a [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) which you can pipe to your server response:\n\n```sp-pre-placeholder grow-[2]\nimport { renderToNodeStream } from 'react-dom/server';\n\n// The route handler syntax depends on your backend framework\n\napp.use('/', (request, response) => {\n\n  const stream = renderToNodeStream(<App />);\n\n  stream.pipe(response);\n});\n```\n\nThe stream will produce the initial non-interactive HTML output of your React components. On the client, you will need to call [`hydrateRoot`](https://18.react.dev/reference/react-dom/client/hydrateRoot) to _hydrate_ that server-generated HTML and make it interactive.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "title": "renderToNodeStream", "description": "This API will be removed in a future major version of React. Use `renderToPipeableStream` instead. `renderToNodeStream` renders a React tree to a Node.js Readable Stream.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:19:15", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:title": "renderToNodeStream – React", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "renderToNodeStream – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "renderToNodeStream – React", "twitter:title": "renderToNodeStream – React", "ogUrl": "https://react.dev/reference/react-dom/server/renderToNodeStream", "fb:app_id": "623268441017527", "scrapeId": "c306b5d9-967f-457e-9325-eb1f49fbfebc", "sourceURL": "https://react.dev/reference/react-dom/server/renderToNodeStream", "url": "https://18.react.dev/reference/react-dom/server/renderToNodeStream", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nOn the server, call `renderToNodeStream` to get a [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) which you can pipe into the response.\n\n```sp-pre-placeholder grow-[2]\nimport { renderToNodeStream } from 'react-dom/server';\n\nconst stream = renderToNodeStream(<App />);\n\nstream.pipe(response);\n```\n\nOn the client, call [`hydrateRoot`](https://18.react.dev/reference/react-dom/client/hydrateRoot) to make the server-generated HTML interactive..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "title": "renderToNodeStream", "description": "This API will be removed in a future major version of React. Use `renderToPipeableStream` instead. `renderToNodeStream` renders a React tree to a Node.js Readable Stream.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:19:15", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:title": "renderToNodeStream – React", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "renderToNodeStream – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "renderToNodeStream – React", "twitter:title": "renderToNodeStream – React", "ogUrl": "https://react.dev/reference/react-dom/server/renderToNodeStream", "fb:app_id": "623268441017527", "scrapeId": "c306b5d9-967f-457e-9325-eb1f49fbfebc", "sourceURL": "https://react.dev/reference/react-dom/server/renderToNodeStream", "url": "https://18.react.dev/reference/react-dom/server/renderToNodeStream", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `reactNode`: A React node you want to render to HTML. For example, a JSX element like `<App />`.\n\n- **optional** `options`: An object for server render.\n  - **optional** `identifierPrefix`: A string prefix React uses for IDs generated by [`useId`.](https://18.react.dev/reference/react/useId) Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed to [`hydrateRoot`.](https://18.react.dev/reference/react-dom/client/hydrateRoot#parameters).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "title": "renderToNodeStream", "description": "This API will be removed in a future major version of React. Use `renderToPipeableStream` instead. `renderToNodeStream` renders a React tree to a Node.js Readable Stream.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:19:15", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:title": "renderToNodeStream – React", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "renderToNodeStream – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "renderToNodeStream – React", "twitter:title": "renderToNodeStream – React", "ogUrl": "https://react.dev/reference/react-dom/server/renderToNodeStream", "fb:app_id": "623268441017527", "scrapeId": "c306b5d9-967f-457e-9325-eb1f49fbfebc", "sourceURL": "https://react.dev/reference/react-dom/server/renderToNodeStream", "url": "https://18.react.dev/reference/react-dom/server/renderToNodeStream", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\nA [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) that outputs an HTML string..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "title": "renderToNodeStream", "description": "This API will be removed in a future major version of React. Use `renderToPipeableStream` instead. `renderToNodeStream` renders a React tree to a Node.js Readable Stream.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:19:15", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:title": "renderToNodeStream – React", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "renderToNodeStream – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "renderToNodeStream – React", "twitter:title": "renderToNodeStream – React", "ogUrl": "https://react.dev/reference/react-dom/server/renderToNodeStream", "fb:app_id": "623268441017527", "scrapeId": "c306b5d9-967f-457e-9325-eb1f49fbfebc", "sourceURL": "https://react.dev/reference/react-dom/server/renderToNodeStream", "url": "https://18.react.dev/reference/react-dom/server/renderToNodeStream", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- This method will wait for all [Suspense boundaries](https://18.react.dev/reference/react/Suspense) to complete before returning any output.\n\n- As of React 18, this method buffers all of its output, so it doesn’t actually provide any streaming benefits. This is why it’s recommended that you migrate to [`renderToPipeableStream`](https://18.react.dev/reference/react-dom/server/renderToPipeableStream) instead.\n\n- The returned stream is a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like [iconv-lite](https://www.npmjs.com/package/iconv-lite), which provides transform streams for transcoding text..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "title": "renderToNodeStream", "description": "This API will be removed in a future major version of React. Use `renderToPipeableStream` instead. `renderToNodeStream` renders a React tree to a Node.js Readable Stream.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:19:15", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:title": "renderToNodeStream – React", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "renderToNodeStream – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "renderToNodeStream – React", "twitter:title": "renderToNodeStream – React", "ogUrl": "https://react.dev/reference/react-dom/server/renderToNodeStream", "fb:app_id": "623268441017527", "scrapeId": "c306b5d9-967f-457e-9325-eb1f49fbfebc", "sourceURL": "https://react.dev/reference/react-dom/server/renderToNodeStream", "url": "https://18.react.dev/reference/react-dom/server/renderToNodeStream", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nCall `renderToNodeStream` to get a [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) which you can pipe to your server response:\n\n```sp-pre-placeholder grow-[2]\nimport { renderToNodeStream } from 'react-dom/server';\n\n// The route handler syntax depends on your backend framework\n\napp.use('/', (request, response) => {\n\n  const stream = renderToNodeStream(<App />);\n\n  stream.pipe(response);\n});\n```\n\nThe stream will produce the initial non-interactive HTML output of your React components. On the client, you will need to call [`hydrateRoot`](https://18.react.dev/reference/react-dom/client/hydrateRoot) to _hydrate_ that server-generated HTML and make it interactive..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "title": "renderToNodeStream", "description": "This API will be removed in a future major version of React. Use `renderToPipeableStream` instead. `renderToNodeStream` renders a React tree to a Node.js Readable Stream.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:19:15", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:title": "renderToNodeStream – React", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "renderToNodeStream – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "renderToNodeStream – React", "twitter:title": "renderToNodeStream – React", "ogUrl": "https://react.dev/reference/react-dom/server/renderToNodeStream", "fb:app_id": "623268441017527", "scrapeId": "c306b5d9-967f-457e-9325-eb1f49fbfebc", "sourceURL": "https://react.dev/reference/react-dom/server/renderToNodeStream", "url": "https://18.react.dev/reference/react-dom/server/renderToNodeStream", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for renderToNodeStream in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of renderToNodeStream**:\n\n```yaml\nconst stream = renderToNodeStream(reactNode, options?)\n```\n\nThis snippet shows you how to basic usage of rendertonodestream, which is an important aspect of rendertonodestream.\n\n**Server Example**:\n\n```yaml\nimport { renderToNodeStream } from 'react-dom/server';\n\nconst stream = renderToNodeStream(<App />);\n\nstream.pipe(response);\n```\n\nThis snippet shows you how to server example, which is an important aspect of rendertonodestream.\n\n**Route Handler Example**:\n\n```yaml\napp.use('/', (request, response) => {\n  const stream = renderToNodeStream(<App />);\n  stream.pipe(response);\n});\n```\n\nThis snippet shows you how to route handler example, which is an important aspect of rendertonodestream.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "title": "renderToNodeStream", "description": "This API will be removed in a future major version of React. Use `renderToPipeableStream` instead. `renderToNodeStream` renders a React tree to a Node.js Readable Stream.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:19:15", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:title": "renderToNodeStream – React", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "renderToNodeStream – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "renderToNodeStream – React", "twitter:title": "renderToNodeStream – React", "ogUrl": "https://react.dev/reference/react-dom/server/renderToNodeStream", "fb:app_id": "623268441017527", "scrapeId": "c306b5d9-967f-457e-9325-eb1f49fbfebc", "sourceURL": "https://react.dev/reference/react-dom/server/renderToNodeStream", "url": "https://18.react.dev/reference/react-dom/server/renderToNodeStream", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using renderToNodeStream in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `renderToPipeableStream` instead of `renderToNodeStream` as the former is recommended for future versions of React.\n\nEnsure to call `hydrateRoot` on the client to make the server-generated HTML interactive.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "title": "renderToNodeStream", "description": "This API will be removed in a future major version of React. Use `renderToPipeableStream` instead. `renderToNodeStream` renders a React tree to a Node.js Readable Stream.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 01:19:15", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/server/renderToNodeStream", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "next-head-count": "35", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "og:title": "renderToNodeStream – React", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "renderToNodeStream – React", "og:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "ogTitle": "renderToNodeStream – React", "twitter:title": "renderToNodeStream – React", "ogUrl": "https://react.dev/reference/react-dom/server/renderToNodeStream", "fb:app_id": "623268441017527", "scrapeId": "c306b5d9-967f-457e-9325-eb1f49fbfebc", "sourceURL": "https://react.dev/reference/react-dom/server/renderToNodeStream", "url": "https://18.react.dev/reference/react-dom/server/renderToNodeStream", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what findDOMNode is in react-reference?\n\nAssistant: Sure, I'd be happy to explain findDOMNode in react-reference.\n\n# findDOMNode\n\nThis API will be removed in a future major version of React. It finds the browser DOM node for a React class component instance.Here's a quick rundown of what this is about:\n\n## Deprecated\n\nThis API will be removed in a future major version of React. [See the alternatives.](https://18.react.dev/reference/react-dom/findDOMNode#alternatives) `findDOMNode` finds the browser DOM node for a React [class component](https://18.react.dev/reference/react/Component) instance.\n\n## Reference\n\n### `findDOMNode(componentInstance)` Call `findDOMNode` to find the browser DOM node for a given React [class component](https://18.react.dev/reference/react/Component) instance.\n\n```sp-pre-placeholder grow-[2]\nimport { findDOMNode } from 'react-dom';\n\nconst domNode = findDOMNode(componentInstance);\n```\n\n#### Parameters\n- `componentInstance`: An instance of the [`Component`](https://18.react.dev/reference/react/Component) subclass. For example, `this` inside a class component.\n\n#### Returns\n`findDOMNode` returns the first closest browser DOM node within the given `componentInstance`. When a component renders to `null`, or renders `false`, `findDOMNode` returns `null`. When a component renders to a string, `findDOMNode` returns a text DOM node containing that value.\n\n#### Caveats\n- A component may return an array or a [Fragment](https://18.react.dev/reference/react/Fragment) with multiple children. In that case `findDOMNode`, will return the DOM node corresponding to the first non-empty child.\n- `findDOMNode` only works on mounted components (that is, components that have been placed in the DOM). If you try to call this on a component that has not been mounted yet (like calling `findDOMNode()` in `render()` on a component that has yet to be created), an exception will be thrown.\n- `findDOMNode` only returns the result at the time of your call. If a child component renders a different node later, there is no way for you to be notified of this change.\n- `findDOMNode` accepts a class component instance, so it can’t be used with function components.\n\n## Usage\n\n### Finding the root DOM node of a class component\nCall `findDOMNode` with a [class component](https://18.react.dev/reference/react/Component) instance (usually, `this`) to find the DOM node it has rendered.\n\n```sp-pre-placeholder grow-[2]\nclass AutoselectingInput extends Component {\n  componentDidMount() {\n    const input = findDOMNode(this);\n    input.select()\n  }\n  render() {\n    return <input defaultValue=\"Hello\" />\n  }\n}\n```\n\nHere, the `input` variable will be set to the `<input>` DOM element. This lets you do something with it. For example, when clicking “Show example” below mounts the input, [`input.select()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select) selects all text in the input.\n\n## Alternatives\n\n### Reading component’s own DOM node from a ref\nCode using `findDOMNode` is fragile because the connection between the JSX node and the code manipulating the corresponding DOM node is not explicit. For example, try wrapping this `<input />` into a `<div>`:\n\n```sp-pre-placeholder grow-[2]\nimport { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\n\nclass AutoselectingInput extends Component {\n  componentDidMount() {\n    const input = findDOMNode(this);\n    input.select()\n  }\n  render() {\n    return <input defaultValue=\"Hello\" />\n  }\n}\n\nexport default AutoselectingInput;\n```\n\nThis will break the code because now, `findDOMNode(this)` finds the `<div>` DOM node, but the code expects an `<input>` DOM node. To avoid these kinds of problems, use [`createRef`](https://18.react.dev/reference/react/createRef) to manage a specific DOM node.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/findDOMNode", "title": "findDOMNode", "description": "This API will be removed in a future major version of React. It finds the browser DOM node for a React class component instance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:19:30", "type": "overview", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/findDOMNode", "ogTitle": "findDOMNode – React", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/findDOMNode", "next-head-count": "35", "theme-color": "#23272f", "title": "findDOMNode – React", "favicon": "https://18.react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "findDOMNode – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "language": "en", "twitter:card": "summary_large_image", "twitter:title": "findDOMNode – React", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "8366d7c7-ee03-4d48-b9c0-fdc9b5a8a0ca", "sourceURL": "https://react.dev/reference/react-dom/findDOMNode", "url": "https://18.react.dev/reference/react-dom/findDOMNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deprecated in react-reference?\n\nAssistant: To deprecated in react-reference, here's what you do:\nThis API will be removed in a future major version of React. [See the alternatives.](https://18.react.dev/reference/react-dom/findDOMNode#alternatives) `findDOMNode` finds the browser DOM node for a React [class component](https://18.react.dev/reference/react/Component) instance..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/findDOMNode", "title": "findDOMNode", "description": "This API will be removed in a future major version of React. It finds the browser DOM node for a React class component instance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:19:30", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/findDOMNode", "ogTitle": "findDOMNode – React", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/findDOMNode", "next-head-count": "35", "theme-color": "#23272f", "title": "findDOMNode – React", "favicon": "https://18.react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "findDOMNode – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "language": "en", "twitter:card": "summary_large_image", "twitter:title": "findDOMNode – React", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "8366d7c7-ee03-4d48-b9c0-fdc9b5a8a0ca", "sourceURL": "https://react.dev/reference/react-dom/findDOMNode", "url": "https://18.react.dev/reference/react-dom/findDOMNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `findDOMNode(componentInstance)` Call `findDOMNode` to find the browser DOM node for a given React [class component](https://18.react.dev/reference/react/Component) instance.\n\n```sp-pre-placeholder grow-[2]\nimport { findDOMNode } from 'react-dom';\n\nconst domNode = findDOMNode(componentInstance);\n```\n\n#### Parameters\n- `componentInstance`: An instance of the [`Component`](https://18.react.dev/reference/react/Component) subclass. For example, `this` inside a class component.\n\n#### Returns\n`findDOMNode` returns the first closest browser DOM node within the given `componentInstance`. When a component renders to `null`, or renders `false`, `findDOMNode` returns `null`. When a component renders to a string, `findDOMNode` returns a text DOM node containing that value.\n\n#### Caveats\n- A component may return an array or a [Fragment](https://18.react.dev/reference/react/Fragment) with multiple children. In that case `findDOMNode`, will return the DOM node corresponding to the first non-empty child.\n- `findDOMNode` only works on mounted components (that is, components that have been placed in the DOM). If you try to call this on a component that has not been mounted yet (like calling `findDOMNode()` in `render()` on a component that has yet to be created), an exception will be thrown.\n- `findDOMNode` only returns the result at the time of your call. If a child component renders a different node later, there is no way for you to be notified of this change.\n- `findDOMNode` accepts a class component instance, so it can’t be used with function components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/findDOMNode", "title": "findDOMNode", "description": "This API will be removed in a future major version of React. It finds the browser DOM node for a React class component instance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:19:30", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/findDOMNode", "ogTitle": "findDOMNode – React", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/findDOMNode", "next-head-count": "35", "theme-color": "#23272f", "title": "findDOMNode – React", "favicon": "https://18.react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "findDOMNode – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "language": "en", "twitter:card": "summary_large_image", "twitter:title": "findDOMNode – React", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "8366d7c7-ee03-4d48-b9c0-fdc9b5a8a0ca", "sourceURL": "https://react.dev/reference/react-dom/findDOMNode", "url": "https://18.react.dev/reference/react-dom/findDOMNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Finding the root DOM node of a class component\nCall `findDOMNode` with a [class component](https://18.react.dev/reference/react/Component) instance (usually, `this`) to find the DOM node it has rendered.\n\n```sp-pre-placeholder grow-[2]\nclass AutoselectingInput extends Component {\n  componentDidMount() {\n    const input = findDOMNode(this);\n    input.select()\n  }\n  render() {\n    return <input defaultValue=\"Hello\" />\n  }\n}\n```\n\nHere, the `input` variable will be set to the `<input>` DOM element. This lets you do something with it. For example, when clicking “Show example” below mounts the input, [`input.select()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select) selects all text in the input..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/findDOMNode", "title": "findDOMNode", "description": "This API will be removed in a future major version of React. It finds the browser DOM node for a React class component instance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:19:30", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/findDOMNode", "ogTitle": "findDOMNode – React", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/findDOMNode", "next-head-count": "35", "theme-color": "#23272f", "title": "findDOMNode – React", "favicon": "https://18.react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "findDOMNode – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "language": "en", "twitter:card": "summary_large_image", "twitter:title": "findDOMNode – React", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "8366d7c7-ee03-4d48-b9c0-fdc9b5a8a0ca", "sourceURL": "https://react.dev/reference/react-dom/findDOMNode", "url": "https://18.react.dev/reference/react-dom/findDOMNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I alternatives in react-reference?\n\nAssistant: To alternatives in react-reference, here's what you do:\n### Reading component’s own DOM node from a ref\nCode using `findDOMNode` is fragile because the connection between the JSX node and the code manipulating the corresponding DOM node is not explicit. For example, try wrapping this `<input />` into a `<div>`:\n\n```sp-pre-placeholder grow-[2]\nimport { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\n\nclass AutoselectingInput extends Component {\n  componentDidMount() {\n    const input = findDOMNode(this);\n    input.select()\n  }\n  render() {\n    return <input defaultValue=\"Hello\" />\n  }\n}\n\nexport default AutoselectingInput;\n```\n\nThis will break the code because now, `findDOMNode(this)` finds the `<div>` DOM node, but the code expects an `<input>` DOM node. To avoid these kinds of problems, use [`createRef`](https://18.react.dev/reference/react/createRef) to manage a specific DOM node..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/findDOMNode", "title": "findDOMNode", "description": "This API will be removed in a future major version of React. It finds the browser DOM node for a React class component instance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:19:30", "type": "section_detail", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/findDOMNode", "ogTitle": "findDOMNode – React", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/findDOMNode", "next-head-count": "35", "theme-color": "#23272f", "title": "findDOMNode – React", "favicon": "https://18.react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "findDOMNode – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "language": "en", "twitter:card": "summary_large_image", "twitter:title": "findDOMNode – React", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "8366d7c7-ee03-4d48-b9c0-fdc9b5a8a0ca", "sourceURL": "https://react.dev/reference/react-dom/findDOMNode", "url": "https://18.react.dev/reference/react-dom/findDOMNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for findDOMNode in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Finding the root DOM node of a class component**:\n\n```yaml\nclass AutoselectingInput extends Component {\n  componentDidMount() {\n    const input = findDOMNode(this);\n    input.select()\n  }\n  render() {\n    return <input defaultValue=\"Hello\" />\n  }\n}\n```\n\nThis snippet shows you how to finding the root dom node of a class component, which is an important aspect of finddomnode.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/findDOMNode", "title": "findDOMNode", "description": "This API will be removed in a future major version of React. It finds the browser DOM node for a React class component instance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:19:30", "type": "code_examples", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/findDOMNode", "ogTitle": "findDOMNode – React", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/findDOMNode", "next-head-count": "35", "theme-color": "#23272f", "title": "findDOMNode – React", "favicon": "https://18.react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "findDOMNode – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "language": "en", "twitter:card": "summary_large_image", "twitter:title": "findDOMNode – React", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "8366d7c7-ee03-4d48-b9c0-fdc9b5a8a0ca", "sourceURL": "https://react.dev/reference/react-dom/findDOMNode", "url": "https://18.react.dev/reference/react-dom/findDOMNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using findDOMNode in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse createRef to manage a specific DOM node instead of findDOMNode.\n\nIn modern React without class components, use useRef instead of findDOMNode.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/findDOMNode", "title": "findDOMNode", "description": "This API will be removed in a future major version of React. It finds the browser DOM node for a React class component instance.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 01:19:30", "type": "best_practices", "page_metadata": {"og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/findDOMNode", "ogTitle": "findDOMNode – React", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/findDOMNode", "next-head-count": "35", "theme-color": "#23272f", "title": "findDOMNode – React", "favicon": "https://18.react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "og:title": "findDOMNode – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "language": "en", "twitter:card": "summary_large_image", "twitter:title": "findDOMNode – React", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "scrapeId": "8366d7c7-ee03-4d48-b9c0-fdc9b5a8a0ca", "sourceURL": "https://react.dev/reference/react-dom/findDOMNode", "url": "https://18.react.dev/reference/react-dom/findDOMNode", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what renderToStaticMarkup is in react-reference?\n\nAssistant: Sure, I'd be happy to explain renderToStaticMarkup in react-reference.\n\n# renderToStaticMarkup\n\n`renderToStaticMarkup` renders a non-interactive React tree to an HTML string.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `renderToStaticMarkup(reactNode, options?)`\n\nOn the server, call `renderToStaticMarkup` to render your app to HTML.\n\n```sp-pre-placeholder grow-[2]\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nconst html = renderToStaticMarkup(<Page />);\n```\n\nIt will produce non-interactive HTML output of your React components.\n\n#### Parameters\n- `reactNode`: A React node you want to render to HTML. For example, a JSX node like `<Page />`.\n- **optional** `options`: An object for server render.\n  - **optional** `identifierPrefix`: A string prefix React uses for IDs generated by [`useId`](https://react.dev/reference/react/useId). Useful to avoid conflicts when using multiple roots on the same page.\n\n#### Returns\nAn HTML string.\n\n#### Caveats\n- `renderToStaticMarkup` output cannot be hydrated.\n- `renderToStaticMarkup` has limited Suspense support. If a component suspends, `renderToStaticMarkup` immediately sends its fallback as HTML.\n- `renderToStaticMarkup` works in the browser, but using it in the client code is not recommended. If you need to render a component to HTML in the browser, [get the HTML by rendering it into a DOM node.](https://react.dev/reference/react-dom/server/renderToString#removing-rendertostring-from-the-client-code)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "title": "renderToStaticMarkup", "description": "`renderToStaticMarkup` renders a non-interactive React tree to an HTML string.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:19:42", "type": "overview", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "ogTitle": "renderToStaticMarkup – React", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "renderToStaticMarkup – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "renderToStaticMarkup – React", "og:description": "The library for web and native user interfaces", "og:title": "renderToStaticMarkup – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "scrapeId": "b679b271-e89d-4c8e-8b63-9a7e24f639cf", "sourceURL": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `renderToStaticMarkup(reactNode, options?)`\n\nOn the server, call `renderToStaticMarkup` to render your app to HTML.\n\n```sp-pre-placeholder grow-[2]\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nconst html = renderToStaticMarkup(<Page />);\n```\n\nIt will produce non-interactive HTML output of your React components.\n\n#### Parameters\n- `reactNode`: A React node you want to render to HTML. For example, a JSX node like `<Page />`.\n- **optional** `options`: An object for server render.\n  - **optional** `identifierPrefix`: A string prefix React uses for IDs generated by [`useId`](https://react.dev/reference/react/useId). Useful to avoid conflicts when using multiple roots on the same page.\n\n#### Returns\nAn HTML string.\n\n#### Caveats\n- `renderToStaticMarkup` output cannot be hydrated.\n- `renderToStaticMarkup` has limited Suspense support. If a component suspends, `renderToStaticMarkup` immediately sends its fallback as HTML.\n- `renderToStaticMarkup` works in the browser, but using it in the client code is not recommended. If you need to render a component to HTML in the browser, [get the HTML by rendering it into a DOM node.](https://react.dev/reference/react-dom/server/renderToString#removing-rendertostring-from-the-client-code).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "title": "renderToStaticMarkup", "description": "`renderToStaticMarkup` renders a non-interactive React tree to an HTML string.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:19:42", "type": "section_detail", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "ogTitle": "renderToStaticMarkup – React", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "renderToStaticMarkup – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "renderToStaticMarkup – React", "og:description": "The library for web and native user interfaces", "og:title": "renderToStaticMarkup – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "scrapeId": "b679b271-e89d-4c8e-8b63-9a7e24f639cf", "sourceURL": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for renderToStaticMarkup in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage**:\n\n```yaml\nconst html = renderToStaticMarkup(reactNode, options?)\n```\n\nThis snippet shows you how to basic usage, which is an important aspect of rendertostaticmarkup.\n\n**Server Example**:\n\n```yaml\nimport { renderToStaticMarkup } from 'react-dom/server';\n\napp.use('/', (request, response) => {\n  const html = renderToStaticMarkup(<Page />);\n  response.send(html);\n});\n```\n\nThis snippet shows you how to server example, which is an important aspect of rendertostaticmarkup.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "title": "renderToStaticMarkup", "description": "`renderToStaticMarkup` renders a non-interactive React tree to an HTML string.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:19:42", "type": "code_examples", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "ogTitle": "renderToStaticMarkup – React", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "renderToStaticMarkup – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "renderToStaticMarkup – React", "og:description": "The library for web and native user interfaces", "og:title": "renderToStaticMarkup – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "scrapeId": "b679b271-e89d-4c8e-8b63-9a7e24f639cf", "sourceURL": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using renderToStaticMarkup in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis method renders non-interactive HTML that cannot be hydrated. This is useful if you want to use React as a simple static page generator, or if you’re rendering completely static content like emails.\n\nInteractive apps should use `renderToString` on the server and `hydrateRoot` on the client.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "title": "renderToStaticMarkup", "description": "`renderToStaticMarkup` renders a non-interactive React tree to an HTML string.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:19:42", "type": "best_practices", "page_metadata": {"og:url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "ogTitle": "renderToStaticMarkup – React", "twitter:site": "@reactjs", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "renderToStaticMarkup – React", "language": "en", "favicon": "https://react.dev/favicon-32x32.png", "twitter:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:type": "website", "twitter:card": "summary_large_image", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "renderToStaticMarkup – React", "og:description": "The library for web and native user interfaces", "og:title": "renderToStaticMarkup – React", "og:image": "https://react.dev/images/og-reference.png", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "scrapeId": "b679b271-e89d-4c8e-8b63-9a7e24f639cf", "sourceURL": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what flushSync is in react-reference?\n\nAssistant: Sure, I'd be happy to explain flushSync in react-reference.\n\n# flushSync\n\nUsing flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.Here's a quick rundown of what this is about:\n\n## Pitfall\n\nUsing `flushSync` is uncommon and can hurt the performance of your app.\n\n`flushSync` lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.\n\n## Reference\n\nCall `flushSync` to force React to flush any pending work and update the DOM synchronously.\n\nMost of the time, `flushSync` can be avoided. Use `flushSync` as last resort.\n\n## Parameters\n\n- `callback`: A function. React will immediately call this callback and flush any updates it contains synchronously. It may also flush any pending updates, or Effects, or updates inside of Effects. If an update suspends as a result of this `flushSync` call, the fallbacks may be re-shown.\n\n## Returns\n\n`flushSync` returns `undefined`.\n\n## Caveats\n\n- `flushSync` can significantly hurt performance. Use sparingly.\n- `flushSync` may force pending Suspense boundaries to show their `fallback` state.\n- `flushSync` may run pending Effects and synchronously apply any updates they contain before returning.\n- `flushSync` may flush updates outside the callback when necessary to flush the updates inside the callback. For example, if there are pending updates from a click, React may flush those before flushing the updates inside the callback.\n\n## Usage\n\nWhen integrating with third-party code such as browser APIs or UI libraries, it may be necessary to force React to flush updates. Use `flushSync` to force React to flush any state updates inside the callback synchronously.\n\n## Example\n\nThis ensures that, by the time the next line of code runs, React has already updated the DOM.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "overview", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\nUsing `flushSync` is uncommon and can hurt the performance of your app.\n\n`flushSync` lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nCall `flushSync` to force React to flush any pending work and update the DOM synchronously.\n\nMost of the time, `flushSync` can be avoided. Use `flushSync` as last resort..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n- `callback`: A function. React will immediately call this callback and flush any updates it contains synchronously. It may also flush any pending updates, or Effects, or updates inside of Effects. If an update suspends as a result of this `flushSync` call, the fallbacks may be re-shown..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\n`flushSync` returns `undefined`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- `flushSync` can significantly hurt performance. Use sparingly.\n- `flushSync` may force pending Suspense boundaries to show their `fallback` state.\n- `flushSync` may run pending Effects and synchronously apply any updates they contain before returning.\n- `flushSync` may flush updates outside the callback when necessary to flush the updates inside the callback. For example, if there are pending updates from a click, React may flush those before flushing the updates inside the callback..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nWhen integrating with third-party code such as browser APIs or UI libraries, it may be necessary to force React to flush updates. Use `flushSync` to force React to flush any state updates inside the callback synchronously..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I example in react-reference?\n\nAssistant: To example in react-reference, here's what you do:\nThis ensures that, by the time the next line of code runs, React has already updated the DOM..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "section_detail", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for flushSync in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Usage of flushSync**:\n\n```yaml\nflushSync(callback)\n```\n\nThis snippet shows you how to basic usage of flushsync, which is an important aspect of flushsync.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "code_examples", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using flushSync in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUsing flushSync is uncommon, and using it often can significantly hurt the performance of your app.\n\nIf your app only uses React APIs, and does not integrate with third-party libraries, flushSync should be unnecessary.\n\nHowever, it can be helpful for integrating with third-party code like browser APIs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync", "description": "Using flushSync is uncommon and can hurt the performance of your app. flushSync lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 01:20:15", "type": "best_practices", "page_metadata": {"fb:app_id": "623268441017527", "theme-color": "#23272f", "twitter:creator": "@reactjs", "msapplication-TileColor": "#2b5797", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/flushSync", "title": "flushSync – React", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "og:type": "website", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:title": "flushSync – React", "og:url": "https://react.dev/reference/react-dom/flushSync", "twitter:image": "https://react.dev/images/og-reference.png", "og:image": "https://react.dev/images/og-reference.png", "viewport": "width=device-width, initial-scale=1", "og:title": "flushSync – React", "ogTitle": "flushSync – React", "twitter:card": "summary_large_image", "scrapeId": "ef5ae01e-17d9-4130-8868-cf214e1b8229", "sourceURL": "https://react.dev/reference/react-dom/flushSync", "url": "https://react.dev/reference/react-dom/flushSync", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Client React DOM APIs is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Client React DOM APIs in react-reference.\n\n# Client React DOM APIs\n\nThe `react-dom/client` APIs let you render React components on the client (in the browser). These APIs are typically used at the top level of your app to initialize your React tree. A framework may call them for you. Most of your components don’t need to import or use them.Here's a quick rundown of what this is about:\n\n## Client APIs\n\n- [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) lets you create a root to display React components inside a browser DOM node.\n- [`hydrateRoot`](https://react.dev/reference/react-dom/client/hydrateRoot) lets you display React components inside a browser DOM node whose HTML content was previously generated by [`react-dom/server`.](https://react.dev/reference/react-dom/server)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/client", "title": "Client React DOM APIs", "description": "The `react-dom/client` APIs let you render React components on the client (in the browser). These APIs are typically used at the top level of your app to initialize your React tree. A framework may call them for you. Most of your components don’t need to import or use them.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:23:26", "type": "overview", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/reference/react-dom/client", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "Client React DOM APIs – React", "og:type": "website", "ogTitle": "Client React DOM APIs – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "title": "Client React DOM APIs – React", "twitter:creator": "@reactjs", "ogUrl": "https://react.dev/reference/react-dom/client", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Client React DOM APIs – React", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "scrapeId": "71d09b17-2303-4e39-aba0-28c59298640a", "sourceURL": "https://react.dev/reference/react-dom/client", "url": "https://react.dev/reference/react-dom/client", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I client apis in react-reference?\n\nAssistant: To client apis in react-reference, here's what you do:\n- [`createRoot`](https://react.dev/reference/react-dom/client/createRoot) lets you create a root to display React components inside a browser DOM node.\n- [`hydrateRoot`](https://react.dev/reference/react-dom/client/hydrateRoot) lets you display React components inside a browser DOM node whose HTML content was previously generated by [`react-dom/server`.](https://react.dev/reference/react-dom/server).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/client", "title": "Client React DOM APIs", "description": "The `react-dom/client` APIs let you render React components on the client (in the browser). These APIs are typically used at the top level of your app to initialize your React tree. A framework may call them for you. Most of your components don’t need to import or use them.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:23:26", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/reference/react-dom/client", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "Client React DOM APIs – React", "og:type": "website", "ogTitle": "Client React DOM APIs – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "title": "Client React DOM APIs – React", "twitter:creator": "@reactjs", "ogUrl": "https://react.dev/reference/react-dom/client", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Client React DOM APIs – React", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "scrapeId": "71d09b17-2303-4e39-aba0-28c59298640a", "sourceURL": "https://react.dev/reference/react-dom/client", "url": "https://react.dev/reference/react-dom/client", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Client React DOM APIs in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReact supports all popular browsers, including Internet Explorer 9 and above. Some polyfills are required for older browsers such as IE 9 and IE 10.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/client", "title": "Client React DOM APIs", "description": "The `react-dom/client` APIs let you render React components on the client (in the browser). These APIs are typically used at the top level of your app to initialize your React tree. A framework may call them for you. Most of your components don’t need to import or use them.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 01:23:26", "type": "best_practices", "page_metadata": {"theme-color": "#23272f", "og:url": "https://react.dev/reference/react-dom/client", "twitter:site": "@reactjs", "twitter:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "favicon": "https://react.dev/favicon-32x32.png", "og:title": "Client React DOM APIs – React", "og:type": "website", "ogTitle": "Client React DOM APIs – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "title": "Client React DOM APIs – React", "twitter:creator": "@reactjs", "ogUrl": "https://react.dev/reference/react-dom/client", "og:image": "https://react.dev/images/og-reference.png", "twitter:title": "Client React DOM APIs – React", "twitter:image": "https://react.dev/images/og-reference.png", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:card": "summary_large_image", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "scrapeId": "71d09b17-2303-4e39-aba0-28c59298640a", "sourceURL": "https://react.dev/reference/react-dom/client", "url": "https://react.dev/reference/react-dom/client", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Input Component Reference is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Input Component Reference in react-reference.\n\n# Input Component Reference\n\nThe built-in browser `<input>` component lets you render different kinds of form inputs.Here's a quick rundown of what this is about:\n\n## Reference\n\nTo display an input, render the built-in browser `<input>` component.\n\n```sp-pre-placeholder grow-[2]\n<input name=\"myInput\" />\n```\n\n## Props\n\n`<input>` supports all common element props.\n\n- `formAction`: A string or function. Overrides the parent `<form action>` for `type=\"submit\"` and `type=\"image\"`. When a URL is passed to `action` the form will behave like a standard HTML form. When a function is passed to `formAction` the function will handle the form submission. See `<form action>`.\n\nYou can make an input controlled by passing one of these props:\n\n- `checked`: A boolean. For a checkbox input or a radio button, controls whether it is selected.\n- `value`: A string. For a text input, controls its text. (For a radio button, specifies its form data.)\n\nWhen you pass either of them, you must also pass an `onChange` handler that updates the passed value.\n\nThese `<input>` props are only relevant for uncontrolled inputs:\n\n- `defaultChecked`: A boolean. Specifies the initial value for `type=\"checkbox\"` and `type=\"radio\"` inputs.\n- `defaultValue`: A string. Specifies the initial value for a text input.\n\nThese `<input>` props are relevant both for uncontrolled and controlled inputs:\n\n- `accept`: A string. Specifies which filetypes are accepted by a `type=\"file\"` input.\n- `alt`: A string. Specifies the alternative image text for a `type=\"image\"` input.\n- `capture`: A string. Specifies the media (microphone, video, or camera) captured by a `type=\"file\"` input.\n- `autoComplete`: A string. Specifies one of the possible autocomplete behaviors.\n- `autoFocus`: A boolean. If `true`, React will focus the element on mount.\n- `dirname`: A string. Specifies the form field name for the element’s directionality.\n- `disabled`: A boolean. If `true`, the input will not be interactive and will appear dimmed.\n- `children`: `<input>` does not accept children.\n- `form`: A string. Specifies the `id` of the `<form>` this input belongs to. If omitted, it’s the closest parent form.\n- `formAction`: A string. Overrides the parent `<form action>` for `type=\"submit\"` and `type=\"image\"`.\n- `formEnctype`: A string. Overrides the parent `<form enctype>` for `type=\"submit\"` and `type=\"image\"`.\n- `formMethod`: A string. Overrides the parent `<form method>` for `type=\"submit\"` and `type=\"image\"`.\n- `formNoValidate`: A string. Overrides the parent `<form noValidate>` for `type=\"submit\"` and `type=\"image\"`.\n- `formTarget`: A string. Overrides the parent `<form target>` for `type=\"submit\"` and `type=\"image\"`.\n- `height`: A string. Specifies the image height for `type=\"image\"`.\n- `list`: A string. Specifies the `id` of the `<datalist>` with the autocomplete options.\n- `max`: A number. Specifies the maximum value of numerical and datetime inputs.\n- `maxLength`: A number. Specifies the maximum length of text and other inputs.\n- `min`: A number. Specifies the minimum value of numerical and datetime inputs.\n- `minLength`: A number. Specifies the minimum length of text and other inputs.\n- `multiple`: A boolean. Specifies whether multiple values are allowed for `<type=\"file\"` and `type=\"email\"`.\n- `name`: A string. Specifies the name for this input that’s submitted with the form.\n- `onChange`: An Event handler function. Required for controlled inputs. Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser `input` event.\n- `onChangeCapture`: A version of `onChange` that fires in the capture phase.\n- `onInput`: An Event handler function. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to use `onChange` instead which works similarly.\n- `onInputCapture`: A version of `onInput` that fires in the capture phase.\n- `onInvalid`: An Event handler function. Fires if an input fails validation on form submit. Unlike the built-in `invalid` event, the React `onInvalid` event bubbles.\n- `onInvalidCapture`: A version of `onInvalid` that fires in the capture phase.\n- `onSelect`: An Event handler function. Fires after the selection inside the `<input>` changes. React extends the `onSelect` event to also fire for empty selection and on edits (which may affect the selection).\n- `onSelectCapture`: A version of `onSelect` that fires in the capture phase.\n- `pattern`: A string. Specifies the pattern that the `value` must match.\n- `placeholder`: A string. Displayed in a dimmed color when the input value is empty.\n- `readOnly`: A boolean. If `true`, the input is not editable by the user.\n- `required`: A boolean. If `true`, the value must be provided for the form to submit.\n- `size`: A number. Similar to setting width, but the unit depends on the control.\n- `src`: A string. Specifies the image source for a `type=\"image\"` input.\n- `step`: A positive number or an 'any' string. Specifies the distance between valid values.\n- `type`: A string. One of the input types.\n- `width`: A string. Specifies the image width for a `type=\"image\"` input.\n\n## Caveats\n\n- Checkboxes need `checked` (or `defaultChecked`), not `value` (or `defaultValue`).\n- If a text input receives a string `value` prop, it will be treated as controlled.\n- If a checkbox or a radio button receives a boolean `checked` prop, it will be treated as controlled.\n- An input can’t be both controlled and uncontrolled at the same time.\n- An input cannot switch between being controlled or uncontrolled over its lifetime.\n- Every controlled input needs an `onChange` event handler that synchronously updates its backing value.\n\n## Usage\n\nTo display an input, render an `<input>` component. By default, it will be a text input. You can pass `type=\"checkbox\"` for a checkbox, `type=\"radio\"` for a radio button, or one of the other input types.\n\n## Displaying inputs of different types\n\nTo display an input, render an `<input>` component. By default, it will be a text input. You can pass `type=\"checkbox\"` for a checkbox, `type=\"radio\"` for a radio button, or one of the other input types.\n\n## Providing a label for an input\n\nTypically, you will place every `<input>` inside a `<label>` tag. This tells the browser that this label is associated with that input. When the user clicks the label, the browser will automatically focus the input. It’s also essential for accessibility: a screen reader will announce the label caption when the user focuses the associated input.\n\n## Providing an initial value for an input\n\nYou can optionally specify the initial value for any input. Pass it as the `defaultValue` string for text inputs. Checkboxes and radio buttons should specify the initial value with the `defaultChecked` boolean instead.\n\n## Reading the input values when submitting a form\n\nAdd a `<form>` around your inputs with a `<button type=\"submit\">` inside. It will call your `<form onSubmit>` event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by calling `e.preventDefault()`. Read the form data with `new FormData(e.target)`.\n\n## Controlling an input with a state variable\n\nAn input like `<input />` is uncontrolled. Even if you pass an initial value like `<input defaultValue=\"Initial text\" />`, your JSX only specifies the initial value. It does not control what the value should be right now.\n\n## Optimizing re-rendering on every keystroke\n\nWhen you use a controlled input, you set the state on every keystroke. If the component containing your state re-renders a large tree, this can get slow. There’s a few ways you can optimize re-rendering performance.\n\n## Troubleshooting\n\nIf you render an input with `value` but no `onChange`, you will see an error in the console.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "overview", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nTo display an input, render the built-in browser `<input>` component.\n\n```sp-pre-placeholder grow-[2]\n<input name=\"myInput\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I props in react-reference?\n\nAssistant: To props in react-reference, here's what you do:\n`<input>` supports all common element props.\n\n- `formAction`: A string or function. Overrides the parent `<form action>` for `type=\"submit\"` and `type=\"image\"`. When a URL is passed to `action` the form will behave like a standard HTML form. When a function is passed to `formAction` the function will handle the form submission. See `<form action>`.\n\nYou can make an input controlled by passing one of these props:\n\n- `checked`: A boolean. For a checkbox input or a radio button, controls whether it is selected.\n- `value`: A string. For a text input, controls its text. (For a radio button, specifies its form data.)\n\nWhen you pass either of them, you must also pass an `onChange` handler that updates the passed value.\n\nThese `<input>` props are only relevant for uncontrolled inputs:\n\n- `defaultChecked`: A boolean. Specifies the initial value for `type=\"checkbox\"` and `type=\"radio\"` inputs.\n- `defaultValue`: A string. Specifies the initial value for a text input.\n\nThese `<input>` props are relevant both for uncontrolled and controlled inputs:\n\n- `accept`: A string. Specifies which filetypes are accepted by a `type=\"file\"` input.\n- `alt`: A string. Specifies the alternative image text for a `type=\"image\"` input.\n- `capture`: A string. Specifies the media (microphone, video, or camera) captured by a `type=\"file\"` input.\n- `autoComplete`: A string. Specifies one of the possible autocomplete behaviors.\n- `autoFocus`: A boolean. If `true`, React will focus the element on mount.\n- `dirname`: A string. Specifies the form field name for the element’s directionality.\n- `disabled`: A boolean. If `true`, the input will not be interactive and will appear dimmed.\n- `children`: `<input>` does not accept children.\n- `form`: A string. Specifies the `id` of the `<form>` this input belongs to. If omitted, it’s the closest parent form.\n- `formAction`: A string. Overrides the parent `<form action>` for `type=\"submit\"` and `type=\"image\"`.\n- `formEnctype`: A string. Overrides the parent `<form enctype>` for `type=\"submit\"` and `type=\"image\"`.\n- `formMethod`: A string. Overrides the parent `<form method>` for `type=\"submit\"` and `type=\"image\"`.\n- `formNoValidate`: A string. Overrides the parent `<form noValidate>` for `type=\"submit\"` and `type=\"image\"`.\n- `formTarget`: A string. Overrides the parent `<form target>` for `type=\"submit\"` and `type=\"image\"`.\n- `height`: A string. Specifies the image height for `type=\"image\"`.\n- `list`: A string. Specifies the `id` of the `<datalist>` with the autocomplete options.\n- `max`: A number. Specifies the maximum value of numerical and datetime inputs.\n- `maxLength`: A number. Specifies the maximum length of text and other inputs.\n- `min`: A number. Specifies the minimum value of numerical and datetime inputs.\n- `minLength`: A number. Specifies the minimum length of text and other inputs.\n- `multiple`: A boolean. Specifies whether multiple values are allowed for `<type=\"file\"` and `type=\"email\"`.\n- `name`: A string. Specifies the name for this input that’s submitted with the form.\n- `onChange`: An Event handler function. Required for controlled inputs. Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser `input` event.\n- `onChangeCapture`: A version of `onChange` that fires in the capture phase.\n- `onInput`: An Event handler function. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to use `onChange` instead which works similarly.\n- `onInputCapture`: A version of `onInput` that fires in the capture phase.\n- `onInvalid`: An Event handler function. Fires if an input fails validation on form submit. Unlike the built-in `invalid` event, the React `onInvalid` event bubbles.\n- `onInvalidCapture`: A version of `onInvalid` that fires in the capture phase.\n- `onSelect`: An Event handler function. Fires after the selection inside the `<input>` changes. React extends the `onSelect` event to also fire for empty selection and on edits (which may affect the selection).\n- `onSelectCapture`: A version of `onSelect` that fires in the capture phase.\n- `pattern`: A string. Specifies the pattern that the `value` must match.\n- `placeholder`: A string. Displayed in a dimmed color when the input value is empty.\n- `readOnly`: A boolean. If `true`, the input is not editable by the user.\n- `required`: A boolean. If `true`, the value must be provided for the form to submit.\n- `size`: A number. Similar to setting width, but the unit depends on the control.\n- `src`: A string. Specifies the image source for a `type=\"image\"` input.\n- `step`: A positive number or an 'any' string. Specifies the distance between valid values.\n- `type`: A string. One of the input types.\n- `width`: A string. Specifies the image width for a `type=\"image\"` input..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- Checkboxes need `checked` (or `defaultChecked`), not `value` (or `defaultValue`).\n- If a text input receives a string `value` prop, it will be treated as controlled.\n- If a checkbox or a radio button receives a boolean `checked` prop, it will be treated as controlled.\n- An input can’t be both controlled and uncontrolled at the same time.\n- An input cannot switch between being controlled or uncontrolled over its lifetime.\n- Every controlled input needs an `onChange` event handler that synchronously updates its backing value..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nTo display an input, render an `<input>` component. By default, it will be a text input. You can pass `type=\"checkbox\"` for a checkbox, `type=\"radio\"` for a radio button, or one of the other input types..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I displaying inputs of different types in react-reference?\n\nAssistant: To displaying inputs of different types in react-reference, here's what you do:\nTo display an input, render an `<input>` component. By default, it will be a text input. You can pass `type=\"checkbox\"` for a checkbox, `type=\"radio\"` for a radio button, or one of the other input types..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I providing a label for an input in react-reference?\n\nAssistant: To providing a label for an input in react-reference, here's what you do:\nTypically, you will place every `<input>` inside a `<label>` tag. This tells the browser that this label is associated with that input. When the user clicks the label, the browser will automatically focus the input. It’s also essential for accessibility: a screen reader will announce the label caption when the user focuses the associated input..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I providing an initial value for an input in react-reference?\n\nAssistant: To providing an initial value for an input in react-reference, here's what you do:\nYou can optionally specify the initial value for any input. Pass it as the `defaultValue` string for text inputs. Checkboxes and radio buttons should specify the initial value with the `defaultChecked` boolean instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reading the input values when submitting a form in react-reference?\n\nAssistant: To reading the input values when submitting a form in react-reference, here's what you do:\nAdd a `<form>` around your inputs with a `<button type=\"submit\">` inside. It will call your `<form onSubmit>` event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by calling `e.preventDefault()`. Read the form data with `new FormData(e.target)`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I controlling an input with a state variable in react-reference?\n\nAssistant: To controlling an input with a state variable in react-reference, here's what you do:\nAn input like `<input />` is uncontrolled. Even if you pass an initial value like `<input defaultValue=\"Initial text\" />`, your JSX only specifies the initial value. It does not control what the value should be right now..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I optimizing re-rendering on every keystroke in react-reference?\n\nAssistant: To optimizing re-rendering on every keystroke in react-reference, here's what you do:\nWhen you use a controlled input, you set the state on every keystroke. If the component containing your state re-renders a large tree, this can get slow. There’s a few ways you can optimize re-rendering performance..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\nIf you render an input with `value` but no `onChange`, you will see an error in the console..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "section_detail", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Input Component Reference in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Input Example**:\n\n```yaml\n<input />\n```\n\nThis snippet shows you how to basic input example, which is an important aspect of input component reference.\n\n**Controlled Input Example**:\n\n```yaml\n<input name=\"myInput\" />\n```\n\nThis snippet shows you how to controlled input example, which is an important aspect of input component reference.\n\n**Controlled Input with State Example**:\n\n```yaml\nfunction Form() {\n  const [firstName, setFirstName] = useState('');\n  return (\n    <input\n      value={firstName}\n      onChange={e => setFirstName(e.target.value)}\n    />\n  );\n}\n```\n\nThis snippet shows you how to controlled input with state example, which is an important aspect of input component reference.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "code_examples", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Input Component Reference in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nGive a name to every `<input>` for form data submission.\n\nIf you pass `value` without `onChange`, it will be impossible to type into the input.\n\nIf you want to control this input with a state variable, specify an `onChange` handler.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/input", "title": "Input Component Reference", "description": "The built-in browser `<input>` component lets you render different kinds of form inputs.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:23:58", "type": "best_practices", "page_metadata": {"ogTitle": "<input> – React", "ogImage": "https://react.dev/images/og-reference.png", "fb:app_id": "623268441017527", "twitter:card": "summary_large_image", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "title": "<input> – React", "og:title": "<input> – React", "favicon": "https://react.dev/favicon-32x32.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogDescription": "The library for web and native user interfaces", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:description": "The library for web and native user interfaces", "twitter:title": "input – React", "theme-color": "#23272f", "twitter:image": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/input", "og:type": "website", "og:url": "https://react.dev/reference/react-dom/components/input", "og:image": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:site": "@reactjs", "scrapeId": "ec4be06d-3b68-405c-9af6-069be214a9aa", "sourceURL": "https://react.dev/reference/react-dom/components/input", "url": "https://react.dev/reference/react-dom/components/input", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what useFormStatus is in react-reference?\n\nAssistant: Sure, I'd be happy to explain useFormStatus in react-reference.\n\n# useFormStatus\n\n`useFormStatus` is a Hook that gives you status information of the last form submission.Here's a quick rundown of what this is about:\n\n## Reference\n\nThe `useFormStatus` Hook provides status information of the last form submission.\n\n```sp-pre-placeholder grow-[2]\nimport { useFormStatus } from \"react-dom\";\n\nimport action from './actions';\n\nfunction Submit() {\n\n  const status = useFormStatus();\n\n  return <button disabled={status.pending}>Submit</button>\n}\n\nexport default function App() {\n\n  return (\n\n    <form action={action}>\n\n      <Submit />\n\n    </form>\n\n  );\n}\n\n```\n\nTo get status information, the `Submit` component must be rendered within a `<form>`. The Hook returns information like the `pending` property which tells you if the form is actively submitting.\n\nIn the above example, `Submit` uses this information to disable `<button>` presses while the form is submitting.\n\n## Parameters\n\n`useFormStatus` does not take any parameters.\n\n## Returns\n\nA `status` object with the following properties:\n\n- `pending`: A boolean. If `true`, this means the parent `<form>` is pending submission. Otherwise, `false`.\n\n- `data`: An object implementing the [`FormData interface`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) that contains the data the parent `<form>` is submitting. If there is no active submission or no parent `<form>`, it will be `null`.\n\n- `method`: A string value of either `'get'` or `'post'`. This represents whether the parent `<form>` is submitting with either a `GET` or `POST` [HTTP method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods). By default, a `<form>` will use the `GET` method and can be specified by the [`method`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#method) property.\n\n- `action`: A reference to the function passed to the `action` prop on the parent `<form>`. If there is no parent `<form>`, the property is `null`. If there is a URI value provided to the `action` prop, or no `action` prop specified, `status.action` will be `null`.\n\n## Caveats\n\n- The `useFormStatus` Hook must be called from a component that is rendered inside a `<form>`.\n- `useFormStatus` will only return status information for a parent `<form>`. It will not return status information for any `<form>` rendered in that same component or children components.\n\n## Usage\n\nTo display a pending state while a form is submitting, you can call the `useFormStatus` Hook in a component rendered in a `<form>` and read the `pending` property returned.\n\nHere, we use the `pending` property to indicate the form is submitting.\n\n```javascript\nimport { useFormStatus } from \"react-dom\";\nimport { submitForm } from \"./actions.js\";\n\nfunction Submit() {\n  const { pending } = useFormStatus();\n  return (\n    <button type=\"submit\" disabled={pending}>\n      {pending ? \"Submitting...\" : \"Submit\"}\n    </button>\n  );\n}\n\nfunction Form({ action }) {\n  return (\n    <form action={action}>\n      <Submit />\n    </form>\n  );\n}\n\nexport default function App() {\n  return <Form action={submitForm} />;\n}\n```\n\n## Pitfall\n\nThe `useFormStatus` Hook only returns status information for a parent `<form>` and not for any `<form>` rendered in the same component calling the Hook, or child components.\n\n```javascript\nfunction Form() {\n  // 🚩 `pending` will never be true\n  // useFormStatus does not track the form rendered in this component\n  const { pending } = useFormStatus();\n  return <form action={submit}></form>;\n}\n```\n\nInstead call `useFormStatus` from inside a component that is located inside `<form>`.\n\n```javascript\nfunction Submit() {\n  // ✅ `pending` will be derived from the form that wraps the Submit component\n  const { pending } = useFormStatus();\n  return <button disabled={pending}>...</button>;\n}\n\nfunction Form() {\n  // This is the <form> `useFormStatus` tracks\n  return (\n    <form action={submit}>\n      <Submit />\n    </form>\n  );\n}\n```\n\n## Read the form data being submitted\n\nYou can use the `data` property of the status information returned from `useFormStatus` to display what data is being submitted by the user.\n\nHere, we have a form where users can request a username. We can use `useFormStatus` to display a temporary status message confirming what username they have requested.\n\n```javascript\nimport {useState, useMemo, useRef} from 'react';\nimport {useFormStatus} from 'react-dom';\n\nexport default function UsernameForm() {\n  const {pending, data} = useFormStatus();\n\n  return (\n    <div>\n      <h3>Request a Username: </h3>\n      <input type=\"text\" name=\"username\" disabled={pending}/>\n      <button type=\"submit\" disabled={pending}>\n        Submit\n      </button>\n      <br />\n      <p>{data ? `Requesting ${data?.get(\"username\")}...`: ''}</p>\n    </div>\n  );\n}\n```\n\n## Troubleshooting\n\n`useFormStatus` will only return status information for a parent `<form>`.\n\nIf the component that calls `useFormStatus` is not nested in a `<form>`, `status.pending` will always return `false`. Verify `useFormStatus` is called in a component that is a child of a `<form>` element.\n\n`useFormStatus` will not track the status of a `<form>` rendered in the same component. See [Pitfall](https://react.dev/reference/react-dom/hooks/useFormStatus#useformstatus-will-not-return-status-information-for-a-form-rendered-in-the-same-component) for more details.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nThe `useFormStatus` Hook provides status information of the last form submission.\n\n```sp-pre-placeholder grow-[2]\nimport { useFormStatus } from \"react-dom\";\n\nimport action from './actions';\n\nfunction Submit() {\n\n  const status = useFormStatus();\n\n  return <button disabled={status.pending}>Submit</button>\n}\n\nexport default function App() {\n\n  return (\n\n    <form action={action}>\n\n      <Submit />\n\n    </form>\n\n  );\n}\n\n```\n\nTo get status information, the `Submit` component must be rendered within a `<form>`. The Hook returns information like the `pending` property which tells you if the form is actively submitting.\n\nIn the above example, `Submit` uses this information to disable `<button>` presses while the form is submitting..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I parameters in react-reference?\n\nAssistant: To parameters in react-reference, here's what you do:\n`useFormStatus` does not take any parameters..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I returns in react-reference?\n\nAssistant: To returns in react-reference, here's what you do:\nA `status` object with the following properties:\n\n- `pending`: A boolean. If `true`, this means the parent `<form>` is pending submission. Otherwise, `false`.\n\n- `data`: An object implementing the [`FormData interface`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) that contains the data the parent `<form>` is submitting. If there is no active submission or no parent `<form>`, it will be `null`.\n\n- `method`: A string value of either `'get'` or `'post'`. This represents whether the parent `<form>` is submitting with either a `GET` or `POST` [HTTP method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods). By default, a `<form>` will use the `GET` method and can be specified by the [`method`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#method) property.\n\n- `action`: A reference to the function passed to the `action` prop on the parent `<form>`. If there is no parent `<form>`, the property is `null`. If there is a URI value provided to the `action` prop, or no `action` prop specified, `status.action` will be `null`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- The `useFormStatus` Hook must be called from a component that is rendered inside a `<form>`.\n- `useFormStatus` will only return status information for a parent `<form>`. It will not return status information for any `<form>` rendered in that same component or children components..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nTo display a pending state while a form is submitting, you can call the `useFormStatus` Hook in a component rendered in a `<form>` and read the `pending` property returned.\n\nHere, we use the `pending` property to indicate the form is submitting.\n\n```javascript\nimport { useFormStatus } from \"react-dom\";\nimport { submitForm } from \"./actions.js\";\n\nfunction Submit() {\n  const { pending } = useFormStatus();\n  return (\n    <button type=\"submit\" disabled={pending}>\n      {pending ? \"Submitting...\" : \"Submit\"}\n    </button>\n  );\n}\n\nfunction Form({ action }) {\n  return (\n    <form action={action}>\n      <Submit />\n    </form>\n  );\n}\n\nexport default function App() {\n  return <Form action={submitForm} />;\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I pitfall in react-reference?\n\nAssistant: To pitfall in react-reference, here's what you do:\nThe `useFormStatus` Hook only returns status information for a parent `<form>` and not for any `<form>` rendered in the same component calling the Hook, or child components.\n\n```javascript\nfunction Form() {\n  // 🚩 `pending` will never be true\n  // useFormStatus does not track the form rendered in this component\n  const { pending } = useFormStatus();\n  return <form action={submit}></form>;\n}\n```\n\nInstead call `useFormStatus` from inside a component that is located inside `<form>`.\n\n```javascript\nfunction Submit() {\n  // ✅ `pending` will be derived from the form that wraps the Submit component\n  const { pending } = useFormStatus();\n  return <button disabled={pending}>...</button>;\n}\n\nfunction Form() {\n  // This is the <form> `useFormStatus` tracks\n  return (\n    <form action={submit}>\n      <Submit />\n    </form>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I read the form data being submitted in react-reference?\n\nAssistant: To read the form data being submitted in react-reference, here's what you do:\nYou can use the `data` property of the status information returned from `useFormStatus` to display what data is being submitted by the user.\n\nHere, we have a form where users can request a username. We can use `useFormStatus` to display a temporary status message confirming what username they have requested.\n\n```javascript\nimport {useState, useMemo, useRef} from 'react';\nimport {useFormStatus} from 'react-dom';\n\nexport default function UsernameForm() {\n  const {pending, data} = useFormStatus();\n\n  return (\n    <div>\n      <h3>Request a Username: </h3>\n      <input type=\"text\" name=\"username\" disabled={pending}/>\n      <button type=\"submit\" disabled={pending}>\n        Submit\n      </button>\n      <br />\n      <p>{data ? `Requesting ${data?.get(\"username\")}...`: ''}</p>\n    </div>\n  );\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n`useFormStatus` will only return status information for a parent `<form>`.\n\nIf the component that calls `useFormStatus` is not nested in a `<form>`, `status.pending` will always return `false`. Verify `useFormStatus` is called in a component that is a child of a `<form>` element.\n\n`useFormStatus` will not track the status of a `<form>` rendered in the same component. See [Pitfall](https://react.dev/reference/react-dom/hooks/useFormStatus#useformstatus-will-not-return-status-information-for-a-form-rendered-in-the-same-component) for more details..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for useFormStatus in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic usage of useFormStatus**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nconst { pending, data, method, action } = useFormStatus();\n```\n```\n\nThis snippet shows you how to basic usage of useformstatus, which is an important aspect of useformstatus.\n\n**Example of Submit component**:\n\n```yaml\n```sp-pre-placeholder grow-[2]\nimport { useFormStatus } from \"react-dom\";\n\nimport action from './actions';\n\nfunction Submit() {\n\n  const status = useFormStatus();\n\n  return <button disabled={status.pending}>Submit</button>\n}\n\nexport default function App() {\n\n  return (\n\n    <form action={action}>\n\n      <Submit />\n\n    </form>\n\n  );\n}\n\n```\n```\n\nThis snippet shows you how to example of submit component, which is an important aspect of useformstatus.\n\n**Example of displaying pending state**:\n\n```yaml\n```javascript\nimport { useFormStatus } from \"react-dom\";\nimport { submitForm } from \"./actions.js\";\n\nfunction Submit() {\n  const { pending } = useFormStatus();\n  return (\n    <button type=\"submit\" disabled={pending}>\n      {pending ? \"Submitting...\" : \"Submit\"}\n    </button>\n  );\n}\n\nfunction Form({ action }) {\n  return (\n    <form action={action}>\n      <Submit />\n    </form>\n  );\n}\n\nexport default function App() {\n  return <Form action={submitForm} />;\n}\n```\n```\n\nThis snippet shows you how to example of displaying pending state, which is an important aspect of useformstatus.\n\n**Example of UsernameForm component**:\n\n```yaml\n```javascript\nimport {useState, useMemo, useRef} from 'react';\nimport {useFormStatus} from 'react-dom';\n\nexport default function UsernameForm() {\n  const {pending, data} = useFormStatus();\n\n  return (\n    <div>\n      <h3>Request a Username: </h3>\n      <input type=\"text\" name=\"username\" disabled={pending}/>\n      <button type=\"submit\" disabled={pending}>\n        Submit\n      </button>\n      <br />\n      <p>{data ? `Requesting ${data?.get(\"username\")}...`: ''}</p>\n    </div>\n  );\n}\n```\n```\n\nThis snippet shows you how to example of usernameform component, which is an important aspect of useformstatus.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using useFormStatus in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that `useFormStatus` is called from a component that is rendered inside a `<form>` to get accurate status information.\n\nUse the `pending` property to disable buttons during form submission to enhance user experience.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "title": "useFormStatus", "description": "`useFormStatus` is a Hook that gives you status information of the last form submission.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 01:24:30", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "ogTitle": "useFormStatus – React", "twitter:site": "@reactjs", "ogImage": "https://react.dev/images/og-reference.png", "twitter:description": "The library for web and native user interfaces", "twitter:image": "https://react.dev/images/og-reference.png", "favicon": "https://react.dev/favicon-32x32.png", "og:description": "The library for web and native user interfaces", "twitter:title": "useFormStatus – React", "language": "en", "og:url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "twitter:creator": "@reactjs", "fb:app_id": "623268441017527", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "title": "useFormStatus – React", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:type": "website", "theme-color": "#23272f", "ogUrl": "https://react.dev/reference/react-dom/hooks/useFormStatus", "viewport": "width=device-width, initial-scale=1", "og:title": "useFormStatus – React", "og:image": "https://react.dev/images/og-reference.png", "scrapeId": "c87c7d2d-267c-45cb-9c18-a5e179feabe8", "sourceURL": "https://react.dev/reference/react-dom/hooks/useFormStatus", "url": "https://react.dev/reference/react-dom/hooks/useFormStatus", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what Link Component is in react-reference?\n\nAssistant: Sure, I'd be happy to explain Link Component in react-reference.\n\n# Link Component\n\nThe built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.Here's a quick rundown of what this is about:\n\n## Reference\n\nTo link to external resources such as stylesheets, fonts, and icons, or to annotate the document with link metadata, render the built-in browser `<link>` component. You can render `<link>` from any component and React will place the corresponding DOM element in the document head.\n\n## Props\n\n`<link>` supports all common element props. - `rel`: a string, required. Specifies the relationship to the resource. React treats links with `rel=\"stylesheet\"` differently from other links. These props apply when `rel=\"stylesheet\"`: - `precedence`: a string. Tells React where to rank the `<link>` DOM node relative to others in the document `<head>`. - `media`: a string. Restricts the stylesheet to a certain media query. - `title`: a string. Specifies the name of an alternative stylesheet. These props apply when `rel=\"stylesheet\"` but disable React’s special treatment of stylesheets: - `disabled`: a boolean. Disables the stylesheet. - `onError`: a function. Called when the stylesheet fails to load. - `onLoad`: a function. Called when the stylesheet finishes being loaded. These props apply when `rel=\"preload\"` or `rel=\"modulepreload\"`: - `as`: a string. The type of resource. - `imageSrcSet`: a string. Applicable only when `as=\"image\"`. - `imageSizes`: a string. Applicable only when `as=\"image\"`. These props apply when `rel=\"icon\"` or `rel=\"apple-touch-icon\"`: - `sizes`: a string. The sizes of the icon. These props apply in all cases: - `href`: a string. The URL of the linked resource. - `crossOrigin`: a string. The CORS policy to use. - `referrerPolicy`: a string. The Referrer header to send when fetching. - `fetchPriority`: a string. Suggests a relative priority for fetching the resource. - `hrefLang`: a string. The language of the linked resource. - `integrity`: a string. A cryptographic hash of the resource. - `type`: a string. The MIME type of the linked resource.\n\n## Special rendering behavior\n\nReact will always place the DOM element corresponding to the `<link>` component within the document’s `<head>`, regardless of where in the React tree it is rendered. There are a few exceptions to this: - If the `<link>` has a `rel=\"stylesheet\"` prop, then it has to also have a `precedence` prop to get this special behavior. - If the `<link>` has an `itemProp` prop, there is no special behavior. - If the `<link>` has an `onLoad` or `onError` prop, because in that case you are managing the loading of the linked resource manually within your React component.\n\n## Special behavior for stylesheets\n\nIn addition, if the `<link>` is to a stylesheet (namely, it has `rel=\"stylesheet\"` in its props), React treats it specially in the following ways: - The component that renders `<link>` will suspend while the stylesheet is loading. - If multiple components render links to the same stylesheet, React will de-duplicate them and only put a single link into the DOM.\n\n## Usage\n\nYou can annotate the document with links to related resources such as an icon, canonical URL, or pingback. React will place this metadata within the document `<head>` regardless of where in the React tree it is rendered.\n\n## Linking to a stylesheet\n\nIf a component depends on a certain stylesheet in order to be displayed correctly, you can render a link to that stylesheet within the component. Your component will suspend while the stylesheet is loading. You must supply the `precedence` prop.\n\n## Controlling stylesheet precedence\n\nStylesheets can conflict with each other, and when they do, the browser goes with the one that comes later in the document. React lets you control the order of stylesheets with the `precedence` prop.\n\n## Deduplicated stylesheet rendering\n\nIf you render the same stylesheet from multiple components, React will place only a single `<link>` in the document head.\n\n## Annotating specific items within the document with links\n\nYou can use the `<link>` component with the `itemProp` prop to annotate specific items within the document with links to related resources.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "overview", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nTo link to external resources such as stylesheets, fonts, and icons, or to annotate the document with link metadata, render the built-in browser `<link>` component. You can render `<link>` from any component and React will place the corresponding DOM element in the document head..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I props in react-reference?\n\nAssistant: To props in react-reference, here's what you do:\n`<link>` supports all common element props. - `rel`: a string, required. Specifies the relationship to the resource. React treats links with `rel=\"stylesheet\"` differently from other links. These props apply when `rel=\"stylesheet\"`: - `precedence`: a string. Tells React where to rank the `<link>` DOM node relative to others in the document `<head>`. - `media`: a string. Restricts the stylesheet to a certain media query. - `title`: a string. Specifies the name of an alternative stylesheet. These props apply when `rel=\"stylesheet\"` but disable React’s special treatment of stylesheets: - `disabled`: a boolean. Disables the stylesheet. - `onError`: a function. Called when the stylesheet fails to load. - `onLoad`: a function. Called when the stylesheet finishes being loaded. These props apply when `rel=\"preload\"` or `rel=\"modulepreload\"`: - `as`: a string. The type of resource. - `imageSrcSet`: a string. Applicable only when `as=\"image\"`. - `imageSizes`: a string. Applicable only when `as=\"image\"`. These props apply when `rel=\"icon\"` or `rel=\"apple-touch-icon\"`: - `sizes`: a string. The sizes of the icon. These props apply in all cases: - `href`: a string. The URL of the linked resource. - `crossOrigin`: a string. The CORS policy to use. - `referrerPolicy`: a string. The Referrer header to send when fetching. - `fetchPriority`: a string. Suggests a relative priority for fetching the resource. - `hrefLang`: a string. The language of the linked resource. - `integrity`: a string. A cryptographic hash of the resource. - `type`: a string. The MIME type of the linked resource..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I special rendering behavior in react-reference?\n\nAssistant: To special rendering behavior in react-reference, here's what you do:\nReact will always place the DOM element corresponding to the `<link>` component within the document’s `<head>`, regardless of where in the React tree it is rendered. There are a few exceptions to this: - If the `<link>` has a `rel=\"stylesheet\"` prop, then it has to also have a `precedence` prop to get this special behavior. - If the `<link>` has an `itemProp` prop, there is no special behavior. - If the `<link>` has an `onLoad` or `onError` prop, because in that case you are managing the loading of the linked resource manually within your React component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I special behavior for stylesheets in react-reference?\n\nAssistant: To special behavior for stylesheets in react-reference, here's what you do:\nIn addition, if the `<link>` is to a stylesheet (namely, it has `rel=\"stylesheet\"` in its props), React treats it specially in the following ways: - The component that renders `<link>` will suspend while the stylesheet is loading. - If multiple components render links to the same stylesheet, React will de-duplicate them and only put a single link into the DOM..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nYou can annotate the document with links to related resources such as an icon, canonical URL, or pingback. React will place this metadata within the document `<head>` regardless of where in the React tree it is rendered..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I linking to a stylesheet in react-reference?\n\nAssistant: To linking to a stylesheet in react-reference, here's what you do:\nIf a component depends on a certain stylesheet in order to be displayed correctly, you can render a link to that stylesheet within the component. Your component will suspend while the stylesheet is loading. You must supply the `precedence` prop..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I controlling stylesheet precedence in react-reference?\n\nAssistant: To controlling stylesheet precedence in react-reference, here's what you do:\nStylesheets can conflict with each other, and when they do, the browser goes with the one that comes later in the document. React lets you control the order of stylesheets with the `precedence` prop..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I deduplicated stylesheet rendering in react-reference?\n\nAssistant: To deduplicated stylesheet rendering in react-reference, here's what you do:\nIf you render the same stylesheet from multiple components, React will place only a single `<link>` in the document head..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I annotating specific items within the document with links in react-reference?\n\nAssistant: To annotating specific items within the document with links in react-reference, here's what you do:\nYou can use the `<link>` component with the `itemProp` prop to annotate specific items within the document with links to related resources..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "section_detail", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for Link Component in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Link Example**:\n\n```yaml\n<link rel=\"icon\" href=\"favicon.ico\" />\n```\n\nThis snippet shows you how to basic link example, which is an important aspect of link component.\n\n**Linking to related resources Example**:\n\n```yaml\nimport ShowRenderedHTML from './ShowRenderedHTML.js';\n\nexport default function BlogPage() {\n  return (\n    <ShowRenderedHTML>\n      <link rel=\"icon\" href=\"favicon.ico\" />\n      <link rel=\"pingback\" href=\"http://www.example.com/xmlrpc.php\" />\n      <h1>My Blog</h1>\n      <p>...</p>\n    </ShowRenderedHTML>\n  );\n}\n```\n\nThis snippet shows you how to linking to related resources example, which is an important aspect of link component.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "code_examples", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using Link Component in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen you want to use a stylesheet, it can be beneficial to call the preinit function to allow the browser to start fetching the stylesheet earlier.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/link", "title": "Link Component", "description": "The built-in browser `<link>` component lets you use external resources such as stylesheets or annotate the document with link metadata.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-03-01 01:27:51", "type": "best_practices", "page_metadata": {"theme-color": "#23272f", "og:type": "website", "ogTitle": "<link> – React", "og:url": "https://react.dev/reference/react-dom/components/link", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "twitter:card": "summary_large_image", "title": "<link> – React", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "twitter:creator": "@reactjs", "og:title": "<link> – React", "language": "en", "ogImage": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "viewport": "width=device-width, initial-scale=1", "fb:app_id": "623268441017527", "twitter:title": "link – React", "twitter:image": "https://react.dev/images/og-reference.png", "ogDescription": "The library for web and native user interfaces", "ogUrl": "https://react.dev/reference/react-dom/components/link", "og:description": "The library for web and native user interfaces", "twitter:description": "The library for web and native user interfaces", "scrapeId": "58598b59-0865-4993-b672-33c58d0e3521", "sourceURL": "https://react.dev/reference/react-dom/components/link", "url": "https://react.dev/reference/react-dom/components/link", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what <form> is in react-reference?\n\nAssistant: Sure, I'd be happy to explain <form> in react-reference.\n\n# <form>\n\nThe built-in browser `<form>` component lets you create interactive controls for submitting information.Here's a quick rundown of what this is about:\n\n## Reference\n\nTo create interactive controls for submitting information, render the [built-in browser `<form>` component](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form).\n\n## Props\n\n`<form>` supports all [common element props.](https://react.dev/reference/react-dom/components/common#props)\n\n[`action`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#action): a URL or function. When a URL is passed to `action` the form will behave like the HTML form component. When a function is passed to `action` the function will handle the form submission. The function passed to `action` may be async and will be called with a single argument containing the [form data](https://developer.mozilla.org/en-US/docs/Web/API/FormData) of the submitted form. The `action` prop can be overridden by a `formAction` attribute on a `<button>`, `<input type=\"submit\">`, or `<input type=\"image\">` component.\n\n## Caveats\n\n- When a function is passed to `action` or `formAction` the HTTP method will be POST regardless of value of the `method` prop.\n\n## Usage\n\nPass a function to the `action` prop of form to run the function when the form is submitted. [`formData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) will be passed to the function as an argument so you can access the data submitted by the form. This differs from the conventional [HTML action](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#action), which only accepts URLs. After the `action` function succeeds, all uncontrolled field elements in the form are reset.\n\n## Handle form submission on the client\n\nApp.js\n\n```javascript\nexport default function Search() {\n  function search(formData) {\n    const query = formData.get(\"query\");\n    alert(`You searched for '${query}'`);\n  }\n  return (\n    <form action={search}>\n      <input name=\"query\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n```\n\n\n## Handle form submission with a Server Function\n\nRender a `<form>` with an input and submit button. Pass a Server Function (a function marked with [`'use server'`](https://react.dev/reference/rsc/use-server)) to the `action` prop of form to run the function when the form is submitted.\n\n```javascript\nimport { updateCart } from './lib.js';\n\nfunction AddToCart({productId}) {\n\n  async function addToCart(formData) {\n\n    'use server'\n\n    const productId = formData.get('productId')\n\n    await updateCart(productId)\n\n  }\n\n  return (\n\n    <form action={addToCart}>\n\n        <input type=\"hidden\" name=\"productId\" value={productId} />\n\n        <button type=\"submit\">Add to Cart</button>\n\n    </form>\n\n  );\n}\n```\n\n\n## Display a pending state during form submission\n\nTo display a pending state when a form is being submitted, you can call the `useFormStatus` Hook in a component rendered in a `<form>` and read the `pending` property returned.\n\n```javascript\nimport { useFormStatus } from \"react-dom\";\nimport { submitForm } from \"./actions.js\";\n\nfunction Submit() {\n  const { pending } = useFormStatus();\n  return (\n    <button type=\"submit\" disabled={pending}>\n      {pending ? \"Submitting...\" : \"Submit\"}\n    </button>\n  );\n}\n\nfunction Form({ action }) {\n  return (\n    <form action={action}>\n      <Submit />\n    </form>\n  );\n}\n\nexport default function App() {\n  return <Form action={submitForm} />;\n}\n```\n\n\n## Optimistically updating form data\n\nThe `useOptimistic` Hook provides a way to optimistically update the user interface before a background operation, like a network request, completes. In the context of forms, this technique helps to make apps feel more responsive. When a user submits a form, instead of waiting for the server’s response to reflect the changes, the interface is immediately updated with the expected outcome.\n\n```javascript\nimport { useOptimistic, useState, useRef } from \"react\";\nimport { deliverMessage } from \"./actions.js\";\n\nfunction Thread({ messages, sendMessage }) {\n  const formRef = useRef();\n  async function formAction(formData) {\n    addOptimisticMessage(formData.get(\"message\"));\n    formRef.current.reset();\n    await sendMessage(formData);\n  }\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic(\n    messages,\n    (state, newMessage) => [\n      ...state,\n      {\n        text: newMessage,\n        sending: true\n      }\n    ]\n  );\n\n  return (\n    <>\n      {optimisticMessages.map((message, index) => (\n        <div key={index}>\n          {message.text}\n          {!!message.sending && <small> (Sending...)</small>}\n        </div>\n      ))}\n      <form action={formAction} ref={formRef}>\n        <input type=\"text\" name=\"message\" placeholder=\"Hello!\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  );\n}\n\nexport default function App() {\n  const [messages, setMessages] = useState([\n    { text: \"Hello there!\", sending: false, key: 1 }\n  ]);\n  async function sendMessage(formData) {\n    const sentMessage = await deliverMessage(formData.get(\"message\"));\n    setMessages((messages) => [...messages, { text: sentMessage }]);\n  }\n  return <Thread messages={messages} sendMessage={sendMessage} />;\n}\n```\n\n\n## Handling form submission errors\n\nIn some cases the function called by a `<form>`’s `action` prop throws an error. You can handle these errors by wrapping `<form>` in an Error Boundary.\n\n```javascript\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nexport default function Search() {\n  function search() {\n    throw new Error(\"search error\");\n  }\n  return (\n    <ErrorBoundary\n      fallback={<p>There was an error while submitting the form</p>}\n    >\n      <form action={search}>\n        <input name=\"query\" />\n        <button type=\"submit\">Search</button>\n      </form>\n    </ErrorBoundary>\n  );\n}\n```\n\n\n## Display a form submission error without JavaScript\n\nDisplaying a form submission error message before the JavaScript bundle loads for progressive enhancement requires that:\n\n1. `<form>` be rendered by a [Server Component](https://react.dev/reference/rsc/use-client)\n2. the function passed to the `<form>`’s `action` prop be a [Server Function](https://react.dev/reference/rsc/server-functions)\n3. the `useActionState` Hook be used to display the error message\n\n```javascript\nimport { useActionState } from \"react\";\nimport { signUpNewUser } from \"./api\";\n\nexport default function Page() {\n  async function signup(prevState, formData) {\n    \"use server\";\n    const email = formData.get(\"email\");\n    try {\n      await signUpNewUser(email);\n      alert(`Added \"${email}\"`);\n    } catch (err) {\n      return err.toString();\n    }\n  }\n  const [message, signupAction] = useActionState(signup, null);\n  return (\n    <>\n      <h1>Signup for my newsletter</h1>\n      <p>Signup with the same email twice to see an error</p>\n      <form action={signupAction} id=\"signup-form\">\n        <label htmlFor=\"email\">Email: </label>\n        <input name=\"email\" id=\"email\" placeholder=\"react@example.com\" />\n        <button>Sign up</button>\n        {!!message && <p>{message}</p>}\n      </form>\n    </>\n  );\n}\n```\n\n\n## Handling multiple submission types\n\nForms can be designed to handle multiple submission actions based on the button pressed by the user. Each button inside a form can be associated with a distinct action or behavior by setting the `formAction` prop.\n\n```javascript\nexport default function Search() {\n  function publish(formData) {\n    const content = formData.get(\"content\");\n    const button = formData.get(\"button\");\n    alert(`'${content}' was published with the '${button}' button`);\n  }\n\n  function save(formData) {\n    const content = formData.get(\"content\");\n    alert(`Your draft of '${content}' has been saved!`);\n  }\n\n  return (\n    <form action={publish}>\n      <textarea name=\"content\" rows={4} cols={40} />\n      <br />\n      <button type=\"submit\" name=\"button\" value=\"submit\">Publish</button>\n      <button formAction={save}>Save draft</button>\n    </form>\n  );\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "overview", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\nTo create interactive controls for submitting information, render the [built-in browser `<form>` component](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I props in react-reference?\n\nAssistant: To props in react-reference, here's what you do:\n`<form>` supports all [common element props.](https://react.dev/reference/react-dom/components/common#props)\n\n[`action`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#action): a URL or function. When a URL is passed to `action` the form will behave like the HTML form component. When a function is passed to `action` the function will handle the form submission. The function passed to `action` may be async and will be called with a single argument containing the [form data](https://developer.mozilla.org/en-US/docs/Web/API/FormData) of the submitted form. The `action` prop can be overridden by a `formAction` attribute on a `<button>`, `<input type=\"submit\">`, or `<input type=\"image\">` component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I caveats in react-reference?\n\nAssistant: To caveats in react-reference, here's what you do:\n- When a function is passed to `action` or `formAction` the HTTP method will be POST regardless of value of the `method` prop..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\nPass a function to the `action` prop of form to run the function when the form is submitted. [`formData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) will be passed to the function as an argument so you can access the data submitted by the form. This differs from the conventional [HTML action](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#action), which only accepts URLs. After the `action` function succeeds, all uncontrolled field elements in the form are reset..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I handle form submission on the client in react-reference?\n\nAssistant: To handle form submission on the client in react-reference, here's what you do:\nApp.js\n\n```javascript\nexport default function Search() {\n  function search(formData) {\n    const query = formData.get(\"query\");\n    alert(`You searched for '${query}'`);\n  }\n  return (\n    <form action={search}>\n      <input name=\"query\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I handle form submission with a server function in react-reference?\n\nAssistant: To handle form submission with a server function in react-reference, here's what you do:\nRender a `<form>` with an input and submit button. Pass a Server Function (a function marked with [`'use server'`](https://react.dev/reference/rsc/use-server)) to the `action` prop of form to run the function when the form is submitted.\n\n```javascript\nimport { updateCart } from './lib.js';\n\nfunction AddToCart({productId}) {\n\n  async function addToCart(formData) {\n\n    'use server'\n\n    const productId = formData.get('productId')\n\n    await updateCart(productId)\n\n  }\n\n  return (\n\n    <form action={addToCart}>\n\n        <input type=\"hidden\" name=\"productId\" value={productId} />\n\n        <button type=\"submit\">Add to Cart</button>\n\n    </form>\n\n  );\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I display a pending state during form submission in react-reference?\n\nAssistant: To display a pending state during form submission in react-reference, here's what you do:\nTo display a pending state when a form is being submitted, you can call the `useFormStatus` Hook in a component rendered in a `<form>` and read the `pending` property returned.\n\n```javascript\nimport { useFormStatus } from \"react-dom\";\nimport { submitForm } from \"./actions.js\";\n\nfunction Submit() {\n  const { pending } = useFormStatus();\n  return (\n    <button type=\"submit\" disabled={pending}>\n      {pending ? \"Submitting...\" : \"Submit\"}\n    </button>\n  );\n}\n\nfunction Form({ action }) {\n  return (\n    <form action={action}>\n      <Submit />\n    </form>\n  );\n}\n\nexport default function App() {\n  return <Form action={submitForm} />;\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I optimistically updating form data in react-reference?\n\nAssistant: To optimistically updating form data in react-reference, here's what you do:\nThe `useOptimistic` Hook provides a way to optimistically update the user interface before a background operation, like a network request, completes. In the context of forms, this technique helps to make apps feel more responsive. When a user submits a form, instead of waiting for the server’s response to reflect the changes, the interface is immediately updated with the expected outcome.\n\n```javascript\nimport { useOptimistic, useState, useRef } from \"react\";\nimport { deliverMessage } from \"./actions.js\";\n\nfunction Thread({ messages, sendMessage }) {\n  const formRef = useRef();\n  async function formAction(formData) {\n    addOptimisticMessage(formData.get(\"message\"));\n    formRef.current.reset();\n    await sendMessage(formData);\n  }\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic(\n    messages,\n    (state, newMessage) => [\n      ...state,\n      {\n        text: newMessage,\n        sending: true\n      }\n    ]\n  );\n\n  return (\n    <>\n      {optimisticMessages.map((message, index) => (\n        <div key={index}>\n          {message.text}\n          {!!message.sending && <small> (Sending...)</small>}\n        </div>\n      ))}\n      <form action={formAction} ref={formRef}>\n        <input type=\"text\" name=\"message\" placeholder=\"Hello!\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  );\n}\n\nexport default function App() {\n  const [messages, setMessages] = useState([\n    { text: \"Hello there!\", sending: false, key: 1 }\n  ]);\n  async function sendMessage(formData) {\n    const sentMessage = await deliverMessage(formData.get(\"message\"));\n    setMessages((messages) => [...messages, { text: sentMessage }]);\n  }\n  return <Thread messages={messages} sendMessage={sendMessage} />;\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I handling form submission errors in react-reference?\n\nAssistant: To handling form submission errors in react-reference, here's what you do:\nIn some cases the function called by a `<form>`’s `action` prop throws an error. You can handle these errors by wrapping `<form>` in an Error Boundary.\n\n```javascript\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nexport default function Search() {\n  function search() {\n    throw new Error(\"search error\");\n  }\n  return (\n    <ErrorBoundary\n      fallback={<p>There was an error while submitting the form</p>}\n    >\n      <form action={search}>\n        <input name=\"query\" />\n        <button type=\"submit\">Search</button>\n      </form>\n    </ErrorBoundary>\n  );\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I display a form submission error without javascript in react-reference?\n\nAssistant: To display a form submission error without javascript in react-reference, here's what you do:\nDisplaying a form submission error message before the JavaScript bundle loads for progressive enhancement requires that:\n\n1. `<form>` be rendered by a [Server Component](https://react.dev/reference/rsc/use-client)\n2. the function passed to the `<form>`’s `action` prop be a [Server Function](https://react.dev/reference/rsc/server-functions)\n3. the `useActionState` Hook be used to display the error message\n\n```javascript\nimport { useActionState } from \"react\";\nimport { signUpNewUser } from \"./api\";\n\nexport default function Page() {\n  async function signup(prevState, formData) {\n    \"use server\";\n    const email = formData.get(\"email\");\n    try {\n      await signUpNewUser(email);\n      alert(`Added \"${email}\"`);\n    } catch (err) {\n      return err.toString();\n    }\n  }\n  const [message, signupAction] = useActionState(signup, null);\n  return (\n    <>\n      <h1>Signup for my newsletter</h1>\n      <p>Signup with the same email twice to see an error</p>\n      <form action={signupAction} id=\"signup-form\">\n        <label htmlFor=\"email\">Email: </label>\n        <input name=\"email\" id=\"email\" placeholder=\"react@example.com\" />\n        <button>Sign up</button>\n        {!!message && <p>{message}</p>}\n      </form>\n    </>\n  );\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I handling multiple submission types in react-reference?\n\nAssistant: To handling multiple submission types in react-reference, here's what you do:\nForms can be designed to handle multiple submission actions based on the button pressed by the user. Each button inside a form can be associated with a distinct action or behavior by setting the `formAction` prop.\n\n```javascript\nexport default function Search() {\n  function publish(formData) {\n    const content = formData.get(\"content\");\n    const button = formData.get(\"button\");\n    alert(`'${content}' was published with the '${button}' button`);\n  }\n\n  function save(formData) {\n    const content = formData.get(\"content\");\n    alert(`Your draft of '${content}' has been saved!`);\n  }\n\n  return (\n    <form action={publish}>\n      <textarea name=\"content\" rows={4} cols={40} />\n      <br />\n      <button type=\"submit\" name=\"button\" value=\"submit\">Publish</button>\n      <button formAction={save}>Save draft</button>\n    </form>\n  );\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "section_detail", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for <form> in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Form Example**:\n\n```yaml\n<form action={search}>\n    <input name=\"query\" />\n    <button type=\"submit\">Search</button>\n</form>\n```\n\nThis snippet shows you how to basic form example, which is an important aspect of <form>.\n\n**Handle Form Submission on Client**:\n\n```yaml\nexport default function Search() {\n  function search(formData) {\n    const query = formData.get(\"query\");\n    alert(`You searched for '${query}'`);\n  }\n  return (\n    <form action={search}>\n      <input name=\"query\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n```\n\nThis snippet shows you how to handle form submission on client, which is an important aspect of <form>.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "code_examples", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using <form> in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhen using a function for the action prop, ensure it handles form data correctly.\n\nUtilize the useFormStatus hook to manage pending states during form submissions.\n\nConsider using the useOptimistic hook for a better user experience during form submissions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/components/form", "title": "<form>", "description": "The built-in browser `<form>` component lets you create interactive controls for submitting information.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-03-01 01:28:28", "type": "best_practices", "page_metadata": {"ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/components/form", "favicon": "https://react.dev/favicon-32x32.png", "msapplication-TileColor": "#2b5797", "og:image": "https://react.dev/images/og-reference.png", "twitter:site": "@reactjs", "og:type": "website", "twitter:description": "The library for web and native user interfaces", "ogDescription": "The library for web and native user interfaces", "og:url": "https://react.dev/reference/react-dom/components/form", "twitter:card": "summary_large_image", "theme-color": "#23272f", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:creator": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "og:description": "The library for web and native user interfaces", "ogTitle": "<form> – React", "og:title": "<form> – React", "fb:app_id": "623268441017527", "viewport": "width=device-width, initial-scale=1", "twitter:title": "form – React", "language": "en", "title": "<form> – React", "scrapeId": "0a0a5787-d545-4f10-bf47-e2cf4c077ecc", "sourceURL": "https://react.dev/reference/react-dom/components/form", "url": "https://react.dev/reference/react-dom/components/form", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what hydrateRoot is in react-reference?\n\nAssistant: Sure, I'd be happy to explain hydrateRoot in react-reference.\n\n# hydrateRoot\n\n`hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by `react-dom/server`.Here's a quick rundown of what this is about:\n\n## Reference\n\n### `hydrateRoot(domNode, reactNode, options?)`\nCall `hydrateRoot` to “attach” React to existing HTML that was already rendered by React in a server environment.\n\n```sp-pre-placeholder grow-[2]\nimport { hydrateRoot } from 'react-dom/client';\n\nconst domNode = document.getElementById('root');\n\nconst root = hydrateRoot(domNode, reactNode);\n```\n\nReact will attach to the HTML that exists inside the `domNode`, and take over managing the DOM inside it. An app fully built with React will usually only have one `hydrateRoot` call with its root component.\n\n#### Parameters\n- `domNode`: A [DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element) that was rendered as the root element on the server.\n- `reactNode`: The “React node” used to render the existing HTML. This will usually be a piece of JSX like `<App />` which was rendered with a `ReactDOM Server` method such as `renderToPipeableStream(<App />)`.\n- **optional** `options`: An object with options for this React root.\n  - **optional** `onCaughtError`: Callback called when React catches an error in an Error Boundary. Called with the `error` caught by the Error Boundary, and an `errorInfo` object containing the `componentStack`.\n  - **optional** `onUncaughtError`: Callback called when an error is thrown and not caught by an Error Boundary. Called with the `error` that was thrown and an `errorInfo` object containing the `componentStack`.\n  - **optional** `onRecoverableError`: Callback called when React automatically recovers from errors. Called with the `error` React throws, and an `errorInfo` object containing the `componentStack`. Some recoverable errors may include the original error cause as `error.cause`.\n  - **optional** `identifierPrefix`: A string prefix React uses for IDs generated by [`useId`](https://react.dev/reference/react/useId). Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as used on the server.\n\n#### Returns\n`hydrateRoot` returns an object with two methods: [`render`](https://react.dev/reference/react-dom/client/hydrateRoot#root-render) and [`unmount`](https://react.dev/reference/react-dom/client/hydrateRoot#root-unmount).\n\n#### Caveats\n- `hydrateRoot()` expects the rendered content to be identical with the server-rendered content. You should treat mismatches as bugs and fix them.\n- In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\n- You’ll likely have only one `hydrateRoot` call in your app. If you use a framework, it might do this call for you.\n- If your app is client-rendered with no HTML rendered already, using `hydrateRoot()` is not supported. Use [`createRoot()`](https://react.dev/reference/react-dom/client/createRoot) instead.\n\n## Usage\n\n### Hydrating server-rendered HTML\nIf your app’s HTML was generated by [`react-dom/server`](https://react.dev/reference/react-dom/client/createRoot), you need to _hydrate_ it on the client.\n\n```sp-pre-placeholder grow-[2]\nimport { hydrateRoot } from 'react-dom/client';\nhydrateRoot(document.getElementById('root'), <App />);\n```\n\nThis will hydrate the server HTML inside the browser DOM node with the React component for your app. Usually, you will do it once at startup. If you use a framework, it might do this behind the scenes for you.\n\nTo hydrate your app, React will “attach” your components’ logic to the initial generated HTML from the server. Hydration turns the initial HTML snapshot from the server into a fully interactive app that runs in the browser.\n\n### Pitfall\nThe React tree you pass to `hydrateRoot` needs to produce **the same output** as it did on the server.\n\nThis is important for the user experience. The user will spend some time looking at the server-generated HTML before your JavaScript code loads. Server rendering creates an illusion that the app loads faster by showing the HTML snapshot of its output. Suddenly showing different content breaks that illusion. This is why the server render output must match the initial render output on the client.\n\nThe most common causes leading to hydration errors include:\n- Extra whitespace (like newlines) around the React-generated HTML inside the root node.\n- Using checks like `typeof window !== 'undefined'` in your rendering logic.\n- Using browser-only APIs like [`window.matchMedia`](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your rendering logic.\n- Rendering different data on the server and the client.\n\nReact recovers from some hydration errors, but **you must fix them like other bugs.** In the best case, they’ll lead to a slowdown; in the worst case, event handlers can get attached to the wrong elements.\n\n## Troubleshooting\n\n### I’m getting an error: “You passed a second argument to root.render”\nA common mistake is to pass the options for `hydrateRoot` to `root.render(...)`:\n\n```sp-pre-placeholder grow-[2]\n// 🚩 Wrong: root.render only takes one argument.\nroot.render(App, {onUncaughtError});\n\n// ✅ Correct: pass options to createRoot.\nconst root = hydrateRoot(container, <App />, {onUncaughtError});\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot", "description": "`hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by `react-dom/server`.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:29:05", "type": "overview", "page_metadata": {"ogTitle": "hydrateRoot – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/client/hydrateRoot", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "hydrateRoot – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "og:title": "hydrateRoot – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "scrapeId": "b8f2ba32-70b5-425c-88bd-71d841d9896e", "sourceURL": "https://react.dev/reference/react-dom/client/hydrateRoot", "url": "https://react.dev/reference/react-dom/client/hydrateRoot", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I reference in react-reference?\n\nAssistant: To reference in react-reference, here's what you do:\n### `hydrateRoot(domNode, reactNode, options?)`\nCall `hydrateRoot` to “attach” React to existing HTML that was already rendered by React in a server environment.\n\n```sp-pre-placeholder grow-[2]\nimport { hydrateRoot } from 'react-dom/client';\n\nconst domNode = document.getElementById('root');\n\nconst root = hydrateRoot(domNode, reactNode);\n```\n\nReact will attach to the HTML that exists inside the `domNode`, and take over managing the DOM inside it. An app fully built with React will usually only have one `hydrateRoot` call with its root component.\n\n#### Parameters\n- `domNode`: A [DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element) that was rendered as the root element on the server.\n- `reactNode`: The “React node” used to render the existing HTML. This will usually be a piece of JSX like `<App />` which was rendered with a `ReactDOM Server` method such as `renderToPipeableStream(<App />)`.\n- **optional** `options`: An object with options for this React root.\n  - **optional** `onCaughtError`: Callback called when React catches an error in an Error Boundary. Called with the `error` caught by the Error Boundary, and an `errorInfo` object containing the `componentStack`.\n  - **optional** `onUncaughtError`: Callback called when an error is thrown and not caught by an Error Boundary. Called with the `error` that was thrown and an `errorInfo` object containing the `componentStack`.\n  - **optional** `onRecoverableError`: Callback called when React automatically recovers from errors. Called with the `error` React throws, and an `errorInfo` object containing the `componentStack`. Some recoverable errors may include the original error cause as `error.cause`.\n  - **optional** `identifierPrefix`: A string prefix React uses for IDs generated by [`useId`](https://react.dev/reference/react/useId). Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as used on the server.\n\n#### Returns\n`hydrateRoot` returns an object with two methods: [`render`](https://react.dev/reference/react-dom/client/hydrateRoot#root-render) and [`unmount`](https://react.dev/reference/react-dom/client/hydrateRoot#root-unmount).\n\n#### Caveats\n- `hydrateRoot()` expects the rendered content to be identical with the server-rendered content. You should treat mismatches as bugs and fix them.\n- In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\n- You’ll likely have only one `hydrateRoot` call in your app. If you use a framework, it might do this call for you.\n- If your app is client-rendered with no HTML rendered already, using `hydrateRoot()` is not supported. Use [`createRoot()`](https://react.dev/reference/react-dom/client/createRoot) instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot", "description": "`hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by `react-dom/server`.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:29:05", "type": "section_detail", "page_metadata": {"ogTitle": "hydrateRoot – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/client/hydrateRoot", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "hydrateRoot – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "og:title": "hydrateRoot – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "scrapeId": "b8f2ba32-70b5-425c-88bd-71d841d9896e", "sourceURL": "https://react.dev/reference/react-dom/client/hydrateRoot", "url": "https://react.dev/reference/react-dom/client/hydrateRoot", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I usage in react-reference?\n\nAssistant: To usage in react-reference, here's what you do:\n### Hydrating server-rendered HTML\nIf your app’s HTML was generated by [`react-dom/server`](https://react.dev/reference/react-dom/client/createRoot), you need to _hydrate_ it on the client.\n\n```sp-pre-placeholder grow-[2]\nimport { hydrateRoot } from 'react-dom/client';\nhydrateRoot(document.getElementById('root'), <App />);\n```\n\nThis will hydrate the server HTML inside the browser DOM node with the React component for your app. Usually, you will do it once at startup. If you use a framework, it might do this behind the scenes for you.\n\nTo hydrate your app, React will “attach” your components’ logic to the initial generated HTML from the server. Hydration turns the initial HTML snapshot from the server into a fully interactive app that runs in the browser.\n\n### Pitfall\nThe React tree you pass to `hydrateRoot` needs to produce **the same output** as it did on the server.\n\nThis is important for the user experience. The user will spend some time looking at the server-generated HTML before your JavaScript code loads. Server rendering creates an illusion that the app loads faster by showing the HTML snapshot of its output. Suddenly showing different content breaks that illusion. This is why the server render output must match the initial render output on the client.\n\nThe most common causes leading to hydration errors include:\n- Extra whitespace (like newlines) around the React-generated HTML inside the root node.\n- Using checks like `typeof window !== 'undefined'` in your rendering logic.\n- Using browser-only APIs like [`window.matchMedia`](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your rendering logic.\n- Rendering different data on the server and the client.\n\nReact recovers from some hydration errors, but **you must fix them like other bugs.** In the best case, they’ll lead to a slowdown; in the worst case, event handlers can get attached to the wrong elements..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot", "description": "`hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by `react-dom/server`.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:29:05", "type": "section_detail", "page_metadata": {"ogTitle": "hydrateRoot – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/client/hydrateRoot", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "hydrateRoot – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "og:title": "hydrateRoot – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "scrapeId": "b8f2ba32-70b5-425c-88bd-71d841d9896e", "sourceURL": "https://react.dev/reference/react-dom/client/hydrateRoot", "url": "https://react.dev/reference/react-dom/client/hydrateRoot", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I troubleshooting in react-reference?\n\nAssistant: To troubleshooting in react-reference, here's what you do:\n### I’m getting an error: “You passed a second argument to root.render”\nA common mistake is to pass the options for `hydrateRoot` to `root.render(...)`:\n\n```sp-pre-placeholder grow-[2]\n// 🚩 Wrong: root.render only takes one argument.\nroot.render(App, {onUncaughtError});\n\n// ✅ Correct: pass options to createRoot.\nconst root = hydrateRoot(container, <App />, {onUncaughtError});\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot", "description": "`hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by `react-dom/server`.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:29:05", "type": "section_detail", "page_metadata": {"ogTitle": "hydrateRoot – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/client/hydrateRoot", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "hydrateRoot – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "og:title": "hydrateRoot – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "scrapeId": "b8f2ba32-70b5-425c-88bd-71d841d9896e", "sourceURL": "https://react.dev/reference/react-dom/client/hydrateRoot", "url": "https://react.dev/reference/react-dom/client/hydrateRoot", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you give me some code examples for hydrateRoot in react-reference?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**hydrateRoot Example**:\n\n```yaml\nconst root = hydrateRoot(domNode, reactNode, options?)\n```\n\nThis snippet shows you how to hydrateroot example, which is an important aspect of hydrateroot.\n\n**root.render Example**:\n\n```yaml\nroot.render(<App />);\n```\n\nThis snippet shows you how to root.render example, which is an important aspect of hydrateroot.\n\n**root.unmount Example**:\n\n```yaml\nroot.unmount();\n```\n\nThis snippet shows you how to root.unmount example, which is an important aspect of hydrateroot.\n\n**Hydrating server-rendered HTML Example**:\n\n```yaml\nhydrateRoot(document.getElementById('root'), <App />);\n```\n\nThis snippet shows you how to hydrating server-rendered html example, which is an important aspect of hydrateroot.\n\n**Suppressing hydration mismatch warning Example**:\n\n```yaml\n<h1 suppressHydrationWarning={true}>Current Date: {new Date().toLocaleDateString()}</h1>\n```\n\nThis snippet shows you how to suppressing hydration mismatch warning example, which is an important aspect of hydrateroot.\n\n**Handling different client and server content Example**:\n\n```yaml\nconst [isClient, setIsClient] = useState(false);\nuseEffect(() => {\n  setIsClient(true);\n}, []);\nreturn <h1>{isClient ? 'Is Client' : 'Is Server'}</h1>;\n```\n\nThis snippet shows you how to handling different client and server content example, which is an important aspect of hydrateroot.\n\n**Error logging in production Example**:\n\n```yaml\nconst root = hydrateRoot(container, <App />, {\n  onCaughtError: (error, errorInfo) => {\n    if (error.message !== \"Known error\") {\n      reportCaughtError({\n        error,\n        componentStack: errorInfo.componentStack,\n      });\n    }\n  },\n});\n```\n\nThis snippet shows you how to error logging in production example, which is an important aspect of hydrateroot.\n\n", "metadata": {"source_url": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot", "description": "`hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by `react-dom/server`.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:29:05", "type": "code_examples", "page_metadata": {"ogTitle": "hydrateRoot – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/client/hydrateRoot", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "hydrateRoot – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "og:title": "hydrateRoot – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "scrapeId": "b8f2ba32-70b5-425c-88bd-71d841d9896e", "sourceURL": "https://react.dev/reference/react-dom/client/hydrateRoot", "url": "https://react.dev/reference/react-dom/client/hydrateRoot", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using hydrateRoot in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure the React tree passed to hydrateRoot produces the same output as on the server to avoid hydration errors.\n\nUse suppressHydrationWarning sparingly to avoid mismatches in text content.\n\nHandle different client and server content with a two-pass rendering approach, but be mindful of user experience on slow connections.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot", "description": "`hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by `react-dom/server`.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 01:29:05", "type": "best_practices", "page_metadata": {"ogTitle": "hydrateRoot – React", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/client/hydrateRoot", "og:description": "The library for web and native user interfaces", "fb:app_id": "623268441017527", "og:type": "website", "twitter:site": "@reactjs", "twitter:image": "https://react.dev/images/og-reference.png", "msapplication-TileColor": "#2b5797", "theme-color": "#23272f", "ogImage": "https://react.dev/images/og-reference.png", "ogUrl": "https://react.dev/reference/react-dom/client/hydrateRoot", "title": "hydrateRoot – React", "favicon": "https://react.dev/favicon-32x32.png", "twitter:title": "hydrateRoot – React", "twitter:card": "summary_large_image", "twitter:description": "The library for web and native user interfaces", "twitter:creator": "@reactjs", "google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "og:image": "https://react.dev/images/og-reference.png", "og:title": "hydrateRoot – React", "ogDescription": "The library for web and native user interfaces", "language": "en", "scrapeId": "b8f2ba32-70b5-425c-88bd-71d841d9896e", "sourceURL": "https://react.dev/reference/react-dom/client/hydrateRoot", "url": "https://react.dev/reference/react-dom/client/hydrateRoot", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: Can you explain what React DOM Components is in react-reference?\n\nAssistant: Sure, I'd be happy to explain React DOM Components in react-reference.\n\n# React DOM Components\n\nReact supports all of the browser built-in HTML and SVG components.Here's a quick rundown of what this is about:\n\n## Common components\n\nAll of the built-in browser components support some props and events.\n\n- [Common components (e.g. `<div>`)](https://react.dev/reference/react-dom/components/common)\n\nThis includes React-specific props like `ref` and `dangerouslySetInnerHTML.\n\n## Form components\n\nThese built-in browser components accept user input:\n\n- [`<input>`](https://react.dev/reference/react-dom/components/input)\n- [`<select>`](https://react.dev/reference/react-dom/components/select)\n- [`<textarea>`](https://react.dev/reference/react-dom/components/textarea)\n\nThey are special in React because passing the `value` prop to them makes them _[controlled.](https://react.dev/reference/react-dom/components/input#controlling-an-input-with-a-state-variable)_\n\n## Resource and Metadata Components\n\nThese built-in browser components let you load external resources or annotate the document with metadata:\n\n- [`<link>`](https://react.dev/reference/react-dom/components/link)\n- [`<meta>`](https://react.dev/reference/react-dom/components/meta)\n- [`<script>`](https://react.dev/reference/react-dom/components/script)\n- [`<style>`](https://react.dev/reference/react-dom/components/style)\n- [`<title>`](https://react.dev/reference/react-dom/components/title)\n\nThey are special in React because React can render them into the document head, suspend while resources are loading, and enact other behaviors that are described on the reference page for each specific component.\n\n## All HTML components\n\nReact supports all built-in browser HTML components. This includes:\n\n- [`<aside>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside)\n- [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio)\n- [`<b>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b)\n- [`<base>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base)\n- [`<bdi>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi)\n- [`<bdo>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo)\n- [`<blockquote>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote)\n- [`<body>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body)\n- [`<br>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br)\n- [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button)\n- [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas)\n- [`<caption>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption)\n- [`<cite>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite)\n- [`<code>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code)\n- [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col)\n- [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup)\n- [`<data>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data)\n- [`<datalist>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist)\n- [`<dd>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd)\n- [`<del>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del)\n- [`<details>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details)\n- [`<dfn>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn)\n- [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog)\n- [`<div>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div)\n- [`<dl>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl)\n- [`<dt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt)\n- [`<em>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em)\n- [`<embed>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed)\n- [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset)\n- [`<figcaption>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption)\n- [`<figure>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure)\n- [`<footer>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer)\n- [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)\n- [`<h1>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1)\n- [`<head>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head)\n- [`<header>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header)\n- [`<hgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup)\n- [`<hr>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr)\n- [`<html>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html)\n- [`<i>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i)\n- [`<iframe>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)\n- [`<img>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)\n- [`<input>`](https://react.dev/reference/react-dom/components/input)\n- [`<ins>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins)\n- [`<kbd>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd)\n- [`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label)\n- [`<legend>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend)\n- [`<li>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li)\n- [`<link>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link)\n- [`<main>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main)\n- [`<map>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map)\n- [`<mark>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark)\n- [`<menu>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu)\n- [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta)\n- [`<meter>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter)\n- [`<nav>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav)\n- [`<noscript>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript)\n- [`<object>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object)\n- [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol)\n- [`<optgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup)\n- [`<option>`](https://react.dev/reference/react-dom/components/option)\n- [`<output>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output)\n- [`<p>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p)\n- [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture)\n- [`<pre>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre)\n- [`<progress>`](https://react.dev/reference/react-dom/components/progress)\n- [`<q>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q)\n- [`<rp>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp)\n- [`<rt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt)\n- [`<ruby>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby)\n- [`<s>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s)\n- [`<samp>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp)\n- [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script)\n- [`<section>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section)\n- [`<select>`](https://react.dev/reference/react-dom/components/select)\n- [`<slot>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot)\n- [`<small>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small)\n- [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source)\n- [`<span>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span)\n- [`<strong>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong)\n- [`<style>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style)\n- [`<sub>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub)\n- [`<summary>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary)\n- [`<sup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup)\n- [`<table>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)\n- [`<tbody>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody)\n- [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td)\n- [`<template>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)\n- [`<textarea>`](https://react.dev/reference/react-dom/components/textarea)\n- [`<tfoot>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot)\n- [`<th>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th)\n- [`<thead>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead)\n- [`<time>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time)\n- [`<title>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title)\n- [`<tr>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr)\n- [`<track>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track)\n- [`<u>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u)\n- [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul)\n- [`<var>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var)\n- [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video)\n- [`<wbr>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr) \n\n### Note\n\nSimilar to the [DOM standard,](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) React uses a `camelCase` convention for prop names. For example, you’ll write `tabIndex` instead of `tabindex`. You can convert existing HTML to JSX with an [online converter.](https://transform.tools/html-to-jsx)\n\n## Custom HTML elements\n\nIf you render a tag with a dash, like `<my-element>`, React will assume you want to render a [custom HTML element.](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) In React, rendering custom elements works differently from rendering built-in browser tags:\n\n- All custom element props are serialized to strings and are always set using attributes.\n- Custom elements accept `class` rather than `className`, and `for` rather than `htmlFor`.\n\nIf you render a built-in browser HTML element with an [`is`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is) attribute, it will also be treated as a custom element.\n\n### Note\n\n[A future version of React will include more comprehensive support for custom elements.](https://github.com/facebook/react/issues/11347#issuecomment-1122275286)\n\nYou can try it by upgrading React packages to the most recent experimental version:\n\n- `react@experimental`\n- `react-dom@experimental`\n\nExperimental versions of React may contain bugs. Don’t use them in production.\n\n## All SVG components\n\nReact supports all built-in browser SVG components. This includes:\n\n- [`<a>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/a)\n- [`<animate>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate)\n- [`<animateMotion>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateMotion)\n- [`<animateTransform>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform)\n- [`<circle>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle)\n- [`<clipPath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath)\n- [`<defs>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs)\n- [`<desc>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/desc)\n- [`<discard>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/discard)\n- [`<ellipse>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse)\n- [`<feBlend>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feBlend)\n- [`<feColorMatrix>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix)\n- [`<feComponentTransfer>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComponentTransfer)\n- [`<feComposite>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComposite)\n- [`<feConvolveMatrix>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feConvolveMatrix)\n- [`<feDiffuseLighting>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDiffuseLighting)\n- [`<feDisplacementMap>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDisplacementMap)\n- [`<feDistantLight>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDistantLight)\n- [`<feDropShadow>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDropShadow)\n- [`<feFlood>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFlood)\n- [`<feFuncA>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncA)\n- [`<feFuncB>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncB)\n- [`<feFuncG>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncG)\n- [`<feFuncR>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncR)\n- [`<feGaussianBlur>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feGaussianBlur)\n- [`<feImage>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feImage)\n- [`<feMerge>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMerge)\n- [`<feMergeNode>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMergeNode)\n- [`<feMorphology>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMorphology)\n- [`<feOffset>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feOffset)\n- [`<fePointLight>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/fePointLight)\n- [`<feSpecularLighting>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpecularLighting)\n- [`<feSpotLight>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpotLight)\n- [`<feTile>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTile)\n- [`<feTurbulence>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTurbulence)\n- [`<filter>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter)\n- [`<foreignObject>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject)\n- [`<g>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g)\n- `<hatch>`\n- `<hatchpath>`\n- [`<image>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image)\n- [`<line>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line)\n- [`<linearGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient)\n- [`<marker>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/marker)\n- [`<mask>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask)\n- [`<metadata>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/metadata)\n- [`<mpath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mpath)\n- [`<path>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path)\n- [`<pattern>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern)\n- [`<polygon>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon)\n- [`<polyline>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline)\n- [`<radialGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient)\n- [`<rect>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect)\n- [`<script>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/script)\n- [`<set>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/set)\n- [`<stop>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop)\n- [`<style>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/style)\n- [`<svg>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg)\n- [`<switch>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/switch)\n- [`<symbol>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/symbol)\n- [`<text>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text)\n- [`<textPath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/textPath)\n- [`<title>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title)\n- [`<tspan>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/tspan)\n- [`<use>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use)\n- [`<view>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view)\n\n### Note\n\nSimilar to the [DOM standard,](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) React uses a `camelCase` convention for prop names. For example, you’ll write `tabIndex` instead of `tabindex`. You can convert existing SVG to JSX with an [online converter.](https://transform.tools/)\n\nNamespaced attributes also have to be written without the colon:\n\n- `xlink:actuate` becomes `xlinkActuate`.\n- `xlink:arcrole` becomes `xlinkArcrole`.\n- `xlink:href` becomes `xlinkHref`.\n- `xlink:role` becomes `xlinkRole`.\n- `xlink:show` becomes `xlinkShow`.\n- `xlink:title` becomes `xlinkTitle`.\n- `xlink:type` becomes `xlinkType`.\n- `xml:base` becomes `xmlBase`.\n- `xml:lang` becomes `xmlLang`.\n- `xml:space` becomes `xmlSpace`.\n- `xmlns:xlink` becomes `xmlnsXlink`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://react.dev/reference/react-dom/components", "title": "React DOM Components", "description": "React supports all of the browser built-in HTML and SVG components.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:38:24", "type": "overview", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "og:title": "React DOM Components – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogTitle": "React DOM Components – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/components", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "title": "React DOM Components – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/components", "twitter:title": "React DOM Components – React", "scrapeId": "0109dfea-995a-4e6e-8d4f-b4ce46aac53e", "sourceURL": "https://react.dev/reference/react-dom/components", "url": "https://react.dev/reference/react-dom/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I common components in react-reference?\n\nAssistant: To common components in react-reference, here's what you do:\nAll of the built-in browser components support some props and events.\n\n- [Common components (e.g. `<div>`)](https://react.dev/reference/react-dom/components/common)\n\nThis includes React-specific props like `ref` and `dangerouslySetInnerHTML..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components", "title": "React DOM Components", "description": "React supports all of the browser built-in HTML and SVG components.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:38:24", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "og:title": "React DOM Components – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogTitle": "React DOM Components – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/components", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "title": "React DOM Components – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/components", "twitter:title": "React DOM Components – React", "scrapeId": "0109dfea-995a-4e6e-8d4f-b4ce46aac53e", "sourceURL": "https://react.dev/reference/react-dom/components", "url": "https://react.dev/reference/react-dom/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I form components in react-reference?\n\nAssistant: To form components in react-reference, here's what you do:\nThese built-in browser components accept user input:\n\n- [`<input>`](https://react.dev/reference/react-dom/components/input)\n- [`<select>`](https://react.dev/reference/react-dom/components/select)\n- [`<textarea>`](https://react.dev/reference/react-dom/components/textarea)\n\nThey are special in React because passing the `value` prop to them makes them _[controlled.](https://react.dev/reference/react-dom/components/input#controlling-an-input-with-a-state-variable)_.\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components", "title": "React DOM Components", "description": "React supports all of the browser built-in HTML and SVG components.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:38:24", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "og:title": "React DOM Components – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogTitle": "React DOM Components – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/components", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "title": "React DOM Components – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/components", "twitter:title": "React DOM Components – React", "scrapeId": "0109dfea-995a-4e6e-8d4f-b4ce46aac53e", "sourceURL": "https://react.dev/reference/react-dom/components", "url": "https://react.dev/reference/react-dom/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I resource and metadata components in react-reference?\n\nAssistant: To resource and metadata components in react-reference, here's what you do:\nThese built-in browser components let you load external resources or annotate the document with metadata:\n\n- [`<link>`](https://react.dev/reference/react-dom/components/link)\n- [`<meta>`](https://react.dev/reference/react-dom/components/meta)\n- [`<script>`](https://react.dev/reference/react-dom/components/script)\n- [`<style>`](https://react.dev/reference/react-dom/components/style)\n- [`<title>`](https://react.dev/reference/react-dom/components/title)\n\nThey are special in React because React can render them into the document head, suspend while resources are loading, and enact other behaviors that are described on the reference page for each specific component..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components", "title": "React DOM Components", "description": "React supports all of the browser built-in HTML and SVG components.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:38:24", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "og:title": "React DOM Components – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogTitle": "React DOM Components – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/components", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "title": "React DOM Components – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/components", "twitter:title": "React DOM Components – React", "scrapeId": "0109dfea-995a-4e6e-8d4f-b4ce46aac53e", "sourceURL": "https://react.dev/reference/react-dom/components", "url": "https://react.dev/reference/react-dom/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I all html components in react-reference?\n\nAssistant: To all html components in react-reference, here's what you do:\nReact supports all built-in browser HTML components. This includes:\n\n- [`<aside>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside)\n- [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio)\n- [`<b>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b)\n- [`<base>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base)\n- [`<bdi>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi)\n- [`<bdo>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo)\n- [`<blockquote>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote)\n- [`<body>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body)\n- [`<br>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br)\n- [`<button>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button)\n- [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas)\n- [`<caption>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption)\n- [`<cite>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite)\n- [`<code>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code)\n- [`<col>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col)\n- [`<colgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup)\n- [`<data>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data)\n- [`<datalist>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist)\n- [`<dd>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd)\n- [`<del>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del)\n- [`<details>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details)\n- [`<dfn>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn)\n- [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog)\n- [`<div>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div)\n- [`<dl>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl)\n- [`<dt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt)\n- [`<em>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em)\n- [`<embed>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed)\n- [`<fieldset>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset)\n- [`<figcaption>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption)\n- [`<figure>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure)\n- [`<footer>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer)\n- [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)\n- [`<h1>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1)\n- [`<head>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head)\n- [`<header>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header)\n- [`<hgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup)\n- [`<hr>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr)\n- [`<html>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html)\n- [`<i>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i)\n- [`<iframe>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)\n- [`<img>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)\n- [`<input>`](https://react.dev/reference/react-dom/components/input)\n- [`<ins>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins)\n- [`<kbd>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd)\n- [`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label)\n- [`<legend>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend)\n- [`<li>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li)\n- [`<link>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link)\n- [`<main>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main)\n- [`<map>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map)\n- [`<mark>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark)\n- [`<menu>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu)\n- [`<meta>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta)\n- [`<meter>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter)\n- [`<nav>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav)\n- [`<noscript>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript)\n- [`<object>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object)\n- [`<ol>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol)\n- [`<optgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup)\n- [`<option>`](https://react.dev/reference/react-dom/components/option)\n- [`<output>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output)\n- [`<p>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p)\n- [`<picture>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture)\n- [`<pre>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre)\n- [`<progress>`](https://react.dev/reference/react-dom/components/progress)\n- [`<q>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q)\n- [`<rp>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp)\n- [`<rt>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt)\n- [`<ruby>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby)\n- [`<s>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s)\n- [`<samp>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp)\n- [`<script>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script)\n- [`<section>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section)\n- [`<select>`](https://react.dev/reference/react-dom/components/select)\n- [`<slot>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot)\n- [`<small>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small)\n- [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source)\n- [`<span>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span)\n- [`<strong>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong)\n- [`<style>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style)\n- [`<sub>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub)\n- [`<summary>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary)\n- [`<sup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup)\n- [`<table>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)\n- [`<tbody>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody)\n- [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td)\n- [`<template>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)\n- [`<textarea>`](https://react.dev/reference/react-dom/components/textarea)\n- [`<tfoot>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot)\n- [`<th>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th)\n- [`<thead>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead)\n- [`<time>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time)\n- [`<title>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title)\n- [`<tr>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr)\n- [`<track>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track)\n- [`<u>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u)\n- [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul)\n- [`<var>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var)\n- [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video)\n- [`<wbr>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr) \n\n### Note\n\nSimilar to the [DOM standard,](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) React uses a `camelCase` convention for prop names. For example, you’ll write `tabIndex` instead of `tabindex`. You can convert existing HTML to JSX with an [online converter.](https://transform.tools/html-to-jsx).\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components", "title": "React DOM Components", "description": "React supports all of the browser built-in HTML and SVG components.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:38:24", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "og:title": "React DOM Components – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogTitle": "React DOM Components – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/components", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "title": "React DOM Components – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/components", "twitter:title": "React DOM Components – React", "scrapeId": "0109dfea-995a-4e6e-8d4f-b4ce46aac53e", "sourceURL": "https://react.dev/reference/react-dom/components", "url": "https://react.dev/reference/react-dom/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I custom html elements in react-reference?\n\nAssistant: To custom html elements in react-reference, here's what you do:\nIf you render a tag with a dash, like `<my-element>`, React will assume you want to render a [custom HTML element.](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) In React, rendering custom elements works differently from rendering built-in browser tags:\n\n- All custom element props are serialized to strings and are always set using attributes.\n- Custom elements accept `class` rather than `className`, and `for` rather than `htmlFor`.\n\nIf you render a built-in browser HTML element with an [`is`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is) attribute, it will also be treated as a custom element.\n\n### Note\n\n[A future version of React will include more comprehensive support for custom elements.](https://github.com/facebook/react/issues/11347#issuecomment-1122275286)\n\nYou can try it by upgrading React packages to the most recent experimental version:\n\n- `react@experimental`\n- `react-dom@experimental`\n\nExperimental versions of React may contain bugs. Don’t use them in production..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components", "title": "React DOM Components", "description": "React supports all of the browser built-in HTML and SVG components.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:38:24", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "og:title": "React DOM Components – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogTitle": "React DOM Components – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/components", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "title": "React DOM Components – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/components", "twitter:title": "React DOM Components – React", "scrapeId": "0109dfea-995a-4e6e-8d4f-b4ce46aac53e", "sourceURL": "https://react.dev/reference/react-dom/components", "url": "https://react.dev/reference/react-dom/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: How do I all svg components in react-reference?\n\nAssistant: To all svg components in react-reference, here's what you do:\nReact supports all built-in browser SVG components. This includes:\n\n- [`<a>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/a)\n- [`<animate>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate)\n- [`<animateMotion>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateMotion)\n- [`<animateTransform>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform)\n- [`<circle>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle)\n- [`<clipPath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath)\n- [`<defs>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs)\n- [`<desc>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/desc)\n- [`<discard>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/discard)\n- [`<ellipse>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse)\n- [`<feBlend>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feBlend)\n- [`<feColorMatrix>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix)\n- [`<feComponentTransfer>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComponentTransfer)\n- [`<feComposite>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComposite)\n- [`<feConvolveMatrix>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feConvolveMatrix)\n- [`<feDiffuseLighting>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDiffuseLighting)\n- [`<feDisplacementMap>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDisplacementMap)\n- [`<feDistantLight>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDistantLight)\n- [`<feDropShadow>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDropShadow)\n- [`<feFlood>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFlood)\n- [`<feFuncA>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncA)\n- [`<feFuncB>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncB)\n- [`<feFuncG>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncG)\n- [`<feFuncR>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncR)\n- [`<feGaussianBlur>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feGaussianBlur)\n- [`<feImage>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feImage)\n- [`<feMerge>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMerge)\n- [`<feMergeNode>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMergeNode)\n- [`<feMorphology>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMorphology)\n- [`<feOffset>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feOffset)\n- [`<fePointLight>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/fePointLight)\n- [`<feSpecularLighting>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpecularLighting)\n- [`<feSpotLight>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpotLight)\n- [`<feTile>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTile)\n- [`<feTurbulence>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTurbulence)\n- [`<filter>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter)\n- [`<foreignObject>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject)\n- [`<g>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g)\n- `<hatch>`\n- `<hatchpath>`\n- [`<image>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image)\n- [`<line>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line)\n- [`<linearGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient)\n- [`<marker>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/marker)\n- [`<mask>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask)\n- [`<metadata>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/metadata)\n- [`<mpath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mpath)\n- [`<path>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path)\n- [`<pattern>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern)\n- [`<polygon>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon)\n- [`<polyline>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline)\n- [`<radialGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient)\n- [`<rect>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect)\n- [`<script>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/script)\n- [`<set>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/set)\n- [`<stop>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop)\n- [`<style>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/style)\n- [`<svg>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg)\n- [`<switch>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/switch)\n- [`<symbol>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/symbol)\n- [`<text>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text)\n- [`<textPath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/textPath)\n- [`<title>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title)\n- [`<tspan>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/tspan)\n- [`<use>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use)\n- [`<view>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view)\n\n### Note\n\nSimilar to the [DOM standard,](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) React uses a `camelCase` convention for prop names. For example, you’ll write `tabIndex` instead of `tabindex`. You can convert existing SVG to JSX with an [online converter.](https://transform.tools/)\n\nNamespaced attributes also have to be written without the colon:\n\n- `xlink:actuate` becomes `xlinkActuate`.\n- `xlink:arcrole` becomes `xlinkArcrole`.\n- `xlink:href` becomes `xlinkHref`.\n- `xlink:role` becomes `xlinkRole`.\n- `xlink:show` becomes `xlinkShow`.\n- `xlink:title` becomes `xlinkTitle`.\n- `xlink:type` becomes `xlinkType`.\n- `xml:base` becomes `xmlBase`.\n- `xml:lang` becomes `xmlLang`.\n- `xml:space` becomes `xmlSpace`.\n- `xmlns:xlink` becomes `xmlnsXlink`..\nPretty straightforward, right?", "metadata": {"source_url": "https://react.dev/reference/react-dom/components", "title": "React DOM Components", "description": "React supports all of the browser built-in HTML and SVG components.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:38:24", "type": "section_detail", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "og:title": "React DOM Components – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogTitle": "React DOM Components – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/components", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "title": "React DOM Components – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/components", "twitter:title": "React DOM Components – React", "scrapeId": "0109dfea-995a-4e6e-8d4f-b4ce46aac53e", "sourceURL": "https://react.dev/reference/react-dom/components", "url": "https://react.dev/reference/react-dom/components", "statusCode": 200}}}
{"text": "System: You are a helpful react-reference expert.\n\nUser: What are some tips for using React DOM Components in react-reference effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nReact uses a camelCase convention for prop names. For example, you’ll write tabIndex instead of tabindex.\n\nYou can convert existing HTML to JSX with an online converter.\n\nA future version of React will include more comprehensive support for custom elements.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://react.dev/reference/react-dom/components", "title": "React DOM Components", "description": "React supports all of the browser built-in HTML and SVG components.", "has_code_examples": false, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 01:38:24", "type": "best_practices", "page_metadata": {"google-site-verification": "sIlAGs48RulR4DdP95YSWNKZIEtCqQmRjzn-Zq-CcD0", "twitter:site": "@reactjs", "og:title": "React DOM Components – React", "og:image": "https://react.dev/images/og-reference.png", "ogImage": "https://react.dev/images/og-reference.png", "twitter:image": "https://react.dev/images/og-reference.png", "twitter:creator": "@reactjs", "twitter:card": "summary_large_image", "fb:app_id": "623268441017527", "og:description": "The library for web and native user interfaces", "ogTitle": "React DOM Components – React", "twitter:description": "The library for web and native user interfaces", "theme-color": "#23272f", "language": "en", "ogUrl": "https://react.dev/reference/react-dom/components", "msapplication-TileColor": "#2b5797", "ogDescription": "The library for web and native user interfaces", "favicon": "https://react.dev/favicon-32x32.png", "title": "React DOM Components – React", "og:type": "website", "viewport": "width=device-width, initial-scale=1", "og:url": "https://react.dev/reference/react-dom/components", "twitter:title": "React DOM Components – React", "scrapeId": "0109dfea-995a-4e6e-8d4f-b4ce46aac53e", "sourceURL": "https://react.dev/reference/react-dom/components", "url": "https://react.dev/reference/react-dom/components", "statusCode": 200}}}
