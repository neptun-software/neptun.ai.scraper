{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what templ - build HTML with Go is in templ?\n\nAssistant: Sure, I'd be happy to explain templ - build HTML with Go in templ.\n\n# templ - build HTML with Go\n\nCreate components that render fragments of HTML and compose them to create screens, pages, documents, or apps.Here's a quick rundown of what this is about:\n\n## Overview\n\n- Server-side rendering: Deploy as a serverless function, Docker container, or standard Go program.\n- Static rendering: Create static HTML files to deploy however you choose.\n- Compiled code: Components are compiled into performant Go code.\n- Use Go: Call any Go code, and use standard `if`, `switch`, and `for` statements.\n- No JavaScript: Does not require any client or server-side JavaScript.\n- Great developer experience: Ships with IDE autocompletion.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide", "title": "templ - build HTML with Go", "description": "Create components that render fragments of HTML and compose them to create screens, pages, documents, or apps.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 02:51:02", "type": "overview", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://templ.guide/", "ogLocale": "en", "docusaurus_locale": "en", "ogDescription": "templ - build HTML with Go", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/", "og:description": "templ - build HTML with Go", "ogTitle": "Introduction | templ docs", "title": "Introduction | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "language": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:title": "Introduction | templ docs", "description": "templ - build HTML with Go", "og:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "ba8a5eda-f957-4fee-b60b-9cf086fde20c", "sourceURL": "https://templ.guide", "url": "https://templ.guide/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I overview in templ?\n\nAssistant: To overview in templ, here's what you do:\n- Server-side rendering: Deploy as a serverless function, Docker container, or standard Go program.\n- Static rendering: Create static HTML files to deploy however you choose.\n- Compiled code: Components are compiled into performant Go code.\n- Use Go: Call any Go code, and use standard `if`, `switch`, and `for` statements.\n- No JavaScript: Does not require any client or server-side JavaScript.\n- Great developer experience: Ships with IDE autocompletion..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide", "title": "templ - build HTML with Go", "description": "Create components that render fragments of HTML and compose them to create screens, pages, documents, or apps.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 02:51:02", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://templ.guide/", "ogLocale": "en", "docusaurus_locale": "en", "ogDescription": "templ - build HTML with Go", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/", "og:description": "templ - build HTML with Go", "ogTitle": "Introduction | templ docs", "title": "Introduction | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "language": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:title": "Introduction | templ docs", "description": "templ - build HTML with Go", "og:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "ba8a5eda-f957-4fee-b60b-9cf086fde20c", "sourceURL": "https://templ.guide", "url": "https://templ.guide/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for templ - build HTML with Go in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic templ usage**:\n\n```yaml\npackage main\n\ntempl Hello(name string) {\n  <div>Hello, { name }</div>\n}\n\ntempl Greeting(person Person) {\n  <div class=\"greeting\">\n    @Hello(person.Name)\n  </div>\n}\n```\n\nThis snippet shows you how to basic templ usage, which is an important aspect of templ - build html with go.\n\n", "metadata": {"source_url": "https://templ.guide", "title": "templ - build HTML with Go", "description": "Create components that render fragments of HTML and compose them to create screens, pages, documents, or apps.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 02:51:02", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "ogUrl": "https://templ.guide/", "ogLocale": "en", "docusaurus_locale": "en", "ogDescription": "templ - build HTML with Go", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/", "og:description": "templ - build HTML with Go", "ogTitle": "Introduction | templ docs", "title": "Introduction | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "language": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:title": "Introduction | templ docs", "description": "templ - build HTML with Go", "og:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "ba8a5eda-f957-4fee-b60b-9cf086fde20c", "sourceURL": "https://templ.guide", "url": "https://templ.guide/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Search the documentation is in templ?\n\nAssistant: Sure, I'd be happy to explain Search the documentation in templ.\n\n# Search the documentation\n\nThis page provides a search functionality for the documentation using Algolia.Here's a quick rundown of what this is about:\n\n## Search by Algolia\n\nThis section allows users to search the documentation using Algolia's search capabilities.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/search", "title": "Search the documentation", "description": "This page provides a search functionality for the documentation using Algolia.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 02:51:49", "type": "overview", "page_metadata": {"docusaurus_tag": "default", "og:title": "templ docs", "ogLocale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "robots": "noindex, follow", "ogUrl": "https://templ.guide/search/", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "templ docs", "docusaurus_locale": "en", "title": "Search the documentation | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/search/", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "default", "scrapeId": "d34c444c-48a2-4bbc-bf2a-92dc67ba329f", "sourceURL": "https://templ.guide/search", "url": "https://templ.guide/search/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I search by algolia in templ?\n\nAssistant: To search by algolia in templ, here's what you do:\nThis section allows users to search the documentation using Algolia's search capabilities..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/search", "title": "Search the documentation", "description": "This page provides a search functionality for the documentation using Algolia.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 02:51:49", "type": "section_detail", "page_metadata": {"docusaurus_tag": "default", "og:title": "templ docs", "ogLocale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "robots": "noindex, follow", "ogUrl": "https://templ.guide/search/", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "templ docs", "docusaurus_locale": "en", "title": "Search the documentation | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/search/", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "default", "scrapeId": "d34c444c-48a2-4bbc-bf2a-92dc67ba329f", "sourceURL": "https://templ.guide/search", "url": "https://templ.guide/search/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what templ Components is in templ?\n\nAssistant: Sure, I'd be happy to explain templ Components in templ.\n\n# templ Components\n\nThis page covers the templ components, their structure, and how to implement them in Go.Here's a quick rundown of what this is about:\n\n## Overview\n\ntempl Components are markup and code that is compiled into functions that return a `templ.Component` interface by running the `templ generate` command.\n\nComponents can contain templ elements that render HTML, text, expressions that output text or include other templates, and branching statements such as `if` and `switch`, and `for` loops.\n\n## header.templ\n\n```go\npackage main\n\ntempl headerTemplate(name string) {\n  <header data-testid=\"headerTemplate\">\n    <h1>{ name }</h1>\n  </header>\n}\n``` \n\nThe generated code is a Go function that returns a `templ.Component`.\n\n## header_templ.go\n\n```go\nfunc headerTemplate(name string) templ.Component {\n  // Generated contents\n}\n```\n\n## templ.Component Interface\n\n`templ.Component` is an interface that has a `Render` method on it that is used to render the component to an `io.Writer`.\n\n```go\ntype Component interface {\n\tRender(ctx context.Context, w io.Writer) error\n}\n```\n\n## Tips\n\nSince templ produces Go code, you can share templates the same way that you share Go code - by sharing your Go module.\n\ntempl follows the same rules as Go. If a `templ` block starts with an uppercase letter, then it is public, otherwise, it is private.\n\nA `templ.Component` may write partial output to the `io.Writer` if it returns an error. If you want to ensure you only get complete output or nothing, write to a buffer first and then write the buffer to an `io.Writer`.\n\n## Code-only components\n\nSince templ Components ultimately implement the `templ.Component` interface, any code that implements the interface can be used in place of a templ component generated from a `*.templ` file.\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc button(text string) templ.Component {\n\treturn templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n\t\t_, err := io.WriteString(w, \"<button>\"+text+\"</button>\")\n\t\treturn err\n\t})\n}\n\nfunc main() {\n\tbutton(\"Click me\").Render(context.Background(), os.Stdout)\n}\n```\n\nOutput\n\n```html\n<button>\n Click me\n</button>\n```\n\n## Warnings\n\nThis code is unsafe! In code-only components, you're responsible for escaping the HTML content yourself, e.g. with the `templ.EscapeString` function.\n\n## Method components\n\ntempl components can be returned from methods (functions attached to types).\n\nGo code:\n\n```go\npackage main\n\nimport \"os\"\n\ntype Data struct {\n\tmessage string\n}\n\ntempl (d Data) Method() {\n\t<div>{ d.message }</div>\n}\n\nfunc main() {\n\td := Data{\n\t\tmessage: \"You can implement methods on a type.\",\n\t}\n\td.Method().Render(context.Background(), os.Stdout)\n}\n```\n\nIt is also possible to initialize a struct and call its component method inline.\n\n```go\npackage main\n\nimport \"os\"\n\ntype Data struct {\n\tmessage string\n}\n\ntempl (d Data) Method() {\n\t<div>{ d.message }</div>\n}\n\ntempl Message() {\n    <div>\n        @Data{\n            message: \"You can implement methods on a type.\",\n        }.Method()\n    </div>\n}\n\nfunc main() {\n\tMessage().Render(context.Background(), os.Stdout)\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "overview", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I overview in templ?\n\nAssistant: To overview in templ, here's what you do:\ntempl Components are markup and code that is compiled into functions that return a `templ.Component` interface by running the `templ generate` command.\n\nComponents can contain templ elements that render HTML, text, expressions that output text or include other templates, and branching statements such as `if` and `switch`, and `for` loops..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I header.templ in templ?\n\nAssistant: To header.templ in templ, here's what you do:\n```go\npackage main\n\ntempl headerTemplate(name string) {\n  <header data-testid=\"headerTemplate\">\n    <h1>{ name }</h1>\n  </header>\n}\n``` \n\nThe generated code is a Go function that returns a `templ.Component`..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I header_templ.go in templ?\n\nAssistant: To header_templ.go in templ, here's what you do:\n```go\nfunc headerTemplate(name string) templ.Component {\n  // Generated contents\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I templ.component interface in templ?\n\nAssistant: To templ.component interface in templ, here's what you do:\n`templ.Component` is an interface that has a `Render` method on it that is used to render the component to an `io.Writer`.\n\n```go\ntype Component interface {\n\tRender(ctx context.Context, w io.Writer) error\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I tips in templ?\n\nAssistant: To tips in templ, here's what you do:\nSince templ produces Go code, you can share templates the same way that you share Go code - by sharing your Go module.\n\ntempl follows the same rules as Go. If a `templ` block starts with an uppercase letter, then it is public, otherwise, it is private.\n\nA `templ.Component` may write partial output to the `io.Writer` if it returns an error. If you want to ensure you only get complete output or nothing, write to a buffer first and then write the buffer to an `io.Writer`..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I code-only components in templ?\n\nAssistant: To code-only components in templ, here's what you do:\nSince templ Components ultimately implement the `templ.Component` interface, any code that implements the interface can be used in place of a templ component generated from a `*.templ` file.\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc button(text string) templ.Component {\n\treturn templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n\t\t_, err := io.WriteString(w, \"<button>\"+text+\"</button>\")\n\t\treturn err\n\t})\n}\n\nfunc main() {\n\tbutton(\"Click me\").Render(context.Background(), os.Stdout)\n}\n```\n\nOutput\n\n```html\n<button>\n Click me\n</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I warnings in templ?\n\nAssistant: To warnings in templ, here's what you do:\nThis code is unsafe! In code-only components, you're responsible for escaping the HTML content yourself, e.g. with the `templ.EscapeString` function..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I method components in templ?\n\nAssistant: To method components in templ, here's what you do:\ntempl components can be returned from methods (functions attached to types).\n\nGo code:\n\n```go\npackage main\n\nimport \"os\"\n\ntype Data struct {\n\tmessage string\n}\n\ntempl (d Data) Method() {\n\t<div>{ d.message }</div>\n}\n\nfunc main() {\n\td := Data{\n\t\tmessage: \"You can implement methods on a type.\",\n\t}\n\td.Method().Render(context.Background(), os.Stdout)\n}\n```\n\nIt is also possible to initialize a struct and call its component method inline.\n\n```go\npackage main\n\nimport \"os\"\n\ntype Data struct {\n\tmessage string\n}\n\ntempl (d Data) Method() {\n\t<div>{ d.message }</div>\n}\n\ntempl Message() {\n    <div>\n        @Data{\n            message: \"You can implement methods on a type.\",\n        }.Method()\n    </div>\n}\n\nfunc main() {\n\tMessage().Render(context.Background(), os.Stdout)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for templ Components in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**header.templ**:\n\n```yaml\n```go\npackage main\n\ntempl headerTemplate(name string) {\n  <header data-testid=\"headerTemplate\">\n    <h1>{ name }</h1>\n  </header>\n}\n```\n```\n\nThis snippet shows you how to header.templ, which is an important aspect of templ components.\n\n**header_templ.go**:\n\n```yaml\n```go\nfunc headerTemplate(name string) templ.Component {\n  // Generated contents\n}\n```\n```\n\nThis snippet shows you how to header_templ.go, which is an important aspect of templ components.\n\n**templ.Component Interface**:\n\n```yaml\n```go\ntype Component interface {\n\tRender(ctx context.Context, w io.Writer) error\n}\n```\n```\n\nThis snippet shows you how to templ.component interface, which is an important aspect of templ components.\n\n**Code-only components example**:\n\n```yaml\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc button(text string) templ.Component {\n\treturn templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n\t\t_, err := io.WriteString(w, \"<button>\"+text+\"</button>\")\n\t\treturn err\n\t})\n}\n\nfunc main() {\n\tbutton(\"Click me\").Render(context.Background(), os.Stdout)\n}\n```\n```\n\nThis snippet shows you how to code-only components example, which is an important aspect of templ components.\n\n**Method components example**:\n\n```yaml\n```go\npackage main\n\nimport \"os\"\n\ntype Data struct {\n\tmessage string\n}\n\ntempl (d Data) Method() {\n\t<div>{ d.message }</div>\n}\n\nfunc main() {\n\td := Data{\n\t\tmessage: \"You can implement methods on a type.\",\n\t}\n\td.Method().Render(context.Background(), os.Stdout)\n}\n```\n```\n\nThis snippet shows you how to method components example, which is an important aspect of templ components.\n\n", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "code_examples", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using templ Components in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSince templ produces Go code, you can share templates the same way that you share Go code - by sharing your Go module.\n\ntempl follows the same rules as Go. If a templ block starts with an uppercase letter, then it is public, otherwise, it is private.\n\nA templ.Component may write partial output to the io.Writer if it returns an error. If you want to ensure you only get complete output or nothing, write to a buffer first and then write the buffer to an io.Writer.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/core-concepts/components", "title": "templ Components", "description": "This page covers the templ components, their structure, and how to implement them in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-03-01 02:53:09", "type": "best_practices", "page_metadata": {"docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:title": "Components | templ docs", "docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "docsearch:language": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/components/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Components | templ docs", "description": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "og:url": "https://templ.guide/core-concepts/components/", "ogDescription": "templ Components are markup and code that is compiled into functions that return a templ.Component interface by running the templ generate command.", "title": "Components | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "27d5ceb0-fafd-474a-90de-8b159389bb1f", "sourceURL": "https://templ.guide/core-concepts/components", "url": "https://templ.guide/core-concepts/components/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Template Generation is in templ?\n\nAssistant: Sure, I'd be happy to explain Template Generation in templ.\n\n# Template Generation\n\nThis page covers how to generate Go code from *.templ files using the templ command line tool.Here's a quick rundown of what this is about:\n\n## Generating Go Code\n\nTo generate Go code from `*.templ` files, use the `templ` command line tool.\n\n```codeBlockLines_e6Vv\ntempl generate\n```\n\nThe `templ generate` recurses into subdirectories and generates Go code for each `*.templ` file it finds.\n\nThe command outputs warnings, and a summary of updates.\n\n```codeBlockLines_e6Vv\n(!) void element <input> should not have child content [ from=12:2 to=12:7 ]\n(✓) Complete [ updates=62 duration=144.677334ms ]\n```\n\n## Advanced options\n\nThe `templ generate` command has a `--help` option that prints advanced options.\n\nThese include the ability to generate code for a single file and to choose the number of parallel workers that `templ generate` uses to create Go files.\n\nBy default `templ generate` uses the number of CPUs that your machine has installed.\n\n```codeBlockLines_e6Vv\ntempl generate --help\n```\n\n```codeBlockLines_e6Vv\nusage: templ generate [<args>...]\n\nGenerates Go code from templ files.\n\nArgs:\n  -path <path>\n    Generates code for all files in path. (default .)\n  -f <file>\n    Optionally generates code for a single file, e.g. -f header.templ\n  -stdout\n    Prints to stdout instead of writing generated files to the filesystem.\n    Only applicable when -f is used.\n  -source-map-visualisations\n    Set to true to generate HTML files to visualise the templ code and its corresponding Go code.\n  -include-version\n    Set to false to skip inclusion of the templ version in the generated code. (default true)\n  -include-timestamp\n    Set to true to include the current time in the generated code.\n  -watch\n    Set to true to watch the path for changes and regenerate code.\n  -cmd <cmd>\n    Set the command to run after generating code.\n  -proxy\n    Set the URL to proxy after generating code and executing the command.\n  -proxyport\n    The port the proxy will listen on. (default 7331)\n  -proxybind\n    The address the proxy will listen on. (default 127.0.0.1)\n  -notify-proxy\n    If present, the command will issue a reload event to the proxy 127.0.0.1:7331, or use proxyport and proxybind to specify a different address.\n  -w\n    Number of workers to use when generating code. (default runtime.NumCPUs)\n  -lazy\n    Only generate .go files if the source .templ file is newer.\n  -pprof\n    Port to run the pprof server on.\n  -keep-orphaned-files\n    Keeps orphaned generated templ files. (default false)\n  -v\n    Set log verbosity level to \"debug\". (default \"info\")\n  -log-level\n    Set log verbosity level. (default \"info\", options: \"debug\", \"info\", \"warn\", \"error\")\n  -help\n    Print help and exit.\n\nExamples:\n\n  Generate code for all files in the current directory and subdirectories:\n\n    templ generate\n\n  Generate code for a single file:\n\n    templ generate -f header.templ\n\n  Watch the current directory and subdirectories for changes and regenerate code:\n\n    templ generate -watch\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/core-concepts/template-generation", "title": "Template Generation", "description": "This page covers how to generate Go code from *.templ files using the templ command line tool.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:03:52", "type": "overview", "page_metadata": {"og:description": "To generate Go code from *.templ files, use the templ command line tool.", "docsearch:language": "en", "og:url": "https://templ.guide/core-concepts/template-generation/", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "title": "Template generation | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Template generation | templ docs", "language": "en", "ogDescription": "To generate Go code from *.templ files, use the templ command line tool.", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/template-generation/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Template generation | templ docs", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "description": "To generate Go code from *.templ files, use the templ command line tool.", "twitter:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "78b1da0a-34f0-425d-9c50-19864d859363", "sourceURL": "https://templ.guide/core-concepts/template-generation", "url": "https://templ.guide/core-concepts/template-generation/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I generating go code in templ?\n\nAssistant: To generating go code in templ, here's what you do:\nTo generate Go code from `*.templ` files, use the `templ` command line tool.\n\n```codeBlockLines_e6Vv\ntempl generate\n```\n\nThe `templ generate` recurses into subdirectories and generates Go code for each `*.templ` file it finds.\n\nThe command outputs warnings, and a summary of updates.\n\n```codeBlockLines_e6Vv\n(!) void element <input> should not have child content [ from=12:2 to=12:7 ]\n(✓) Complete [ updates=62 duration=144.677334ms ]\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/template-generation", "title": "Template Generation", "description": "This page covers how to generate Go code from *.templ files using the templ command line tool.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:03:52", "type": "section_detail", "page_metadata": {"og:description": "To generate Go code from *.templ files, use the templ command line tool.", "docsearch:language": "en", "og:url": "https://templ.guide/core-concepts/template-generation/", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "title": "Template generation | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Template generation | templ docs", "language": "en", "ogDescription": "To generate Go code from *.templ files, use the templ command line tool.", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/template-generation/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Template generation | templ docs", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "description": "To generate Go code from *.templ files, use the templ command line tool.", "twitter:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "78b1da0a-34f0-425d-9c50-19864d859363", "sourceURL": "https://templ.guide/core-concepts/template-generation", "url": "https://templ.guide/core-concepts/template-generation/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I advanced options in templ?\n\nAssistant: To advanced options in templ, here's what you do:\nThe `templ generate` command has a `--help` option that prints advanced options.\n\nThese include the ability to generate code for a single file and to choose the number of parallel workers that `templ generate` uses to create Go files.\n\nBy default `templ generate` uses the number of CPUs that your machine has installed.\n\n```codeBlockLines_e6Vv\ntempl generate --help\n```\n\n```codeBlockLines_e6Vv\nusage: templ generate [<args>...]\n\nGenerates Go code from templ files.\n\nArgs:\n  -path <path>\n    Generates code for all files in path. (default .)\n  -f <file>\n    Optionally generates code for a single file, e.g. -f header.templ\n  -stdout\n    Prints to stdout instead of writing generated files to the filesystem.\n    Only applicable when -f is used.\n  -source-map-visualisations\n    Set to true to generate HTML files to visualise the templ code and its corresponding Go code.\n  -include-version\n    Set to false to skip inclusion of the templ version in the generated code. (default true)\n  -include-timestamp\n    Set to true to include the current time in the generated code.\n  -watch\n    Set to true to watch the path for changes and regenerate code.\n  -cmd <cmd>\n    Set the command to run after generating code.\n  -proxy\n    Set the URL to proxy after generating code and executing the command.\n  -proxyport\n    The port the proxy will listen on. (default 7331)\n  -proxybind\n    The address the proxy will listen on. (default 127.0.0.1)\n  -notify-proxy\n    If present, the command will issue a reload event to the proxy 127.0.0.1:7331, or use proxyport and proxybind to specify a different address.\n  -w\n    Number of workers to use when generating code. (default runtime.NumCPUs)\n  -lazy\n    Only generate .go files if the source .templ file is newer.\n  -pprof\n    Port to run the pprof server on.\n  -keep-orphaned-files\n    Keeps orphaned generated templ files. (default false)\n  -v\n    Set log verbosity level to \"debug\". (default \"info\")\n  -log-level\n    Set log verbosity level. (default \"info\", options: \"debug\", \"info\", \"warn\", \"error\")\n  -help\n    Print help and exit.\n\nExamples:\n\n  Generate code for all files in the current directory and subdirectories:\n\n    templ generate\n\n  Generate code for a single file:\n\n    templ generate -f header.templ\n\n  Watch the current directory and subdirectories for changes and regenerate code:\n\n    templ generate -watch\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/template-generation", "title": "Template Generation", "description": "This page covers how to generate Go code from *.templ files using the templ command line tool.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:03:52", "type": "section_detail", "page_metadata": {"og:description": "To generate Go code from *.templ files, use the templ command line tool.", "docsearch:language": "en", "og:url": "https://templ.guide/core-concepts/template-generation/", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "title": "Template generation | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Template generation | templ docs", "language": "en", "ogDescription": "To generate Go code from *.templ files, use the templ command line tool.", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/template-generation/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Template generation | templ docs", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "description": "To generate Go code from *.templ files, use the templ command line tool.", "twitter:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "78b1da0a-34f0-425d-9c50-19864d859363", "sourceURL": "https://templ.guide/core-concepts/template-generation", "url": "https://templ.guide/core-concepts/template-generation/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Template Generation in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Basic Generate Command**:\n\n```yaml\ntempl generate\n```\n\nThis snippet shows you how to basic generate command, which is an important aspect of template generation.\n\n**Generate Command with Help Option**:\n\n```yaml\ntempl generate --help\n```\n\nThis snippet shows you how to generate command with help option, which is an important aspect of template generation.\n\n**Usage of Generate Command**:\n\n```yaml\nusage: templ generate [<args>...]\n\nGenerates Go code from templ files.\n\nArgs:\n  -path <path>\n    Generates code for all files in path. (default .)\n  -f <file>\n    Optionally generates code for a single file, e.g. -f header.templ\n  -stdout\n    Prints to stdout instead of writing generated files to the filesystem.\n    Only applicable when -f is used.\n  -source-map-visualisations\n    Set to true to generate HTML files to visualise the templ code and its corresponding Go code.\n  -include-version\n    Set to false to skip inclusion of the templ version in the generated code. (default true)\n  -include-timestamp\n    Set to true to include the current time in the generated code.\n  -watch\n    Set to true to watch the path for changes and regenerate code.\n  -cmd <cmd>\n    Set the command to run after generating code.\n  -proxy\n    Set the URL to proxy after generating code and executing the command.\n  -proxyport\n    The port the proxy will listen on. (default 7331)\n  -proxybind\n    The address the proxy will listen on. (default 127.0.0.1)\n  -notify-proxy\n    If present, the command will issue a reload event to the proxy 127.0.0.1:7331, or use proxyport and proxybind to specify a different address.\n  -w\n    Number of workers to use when generating code. (default runtime.NumCPUs)\n  -lazy\n    Only generate .go files if the source .templ file is newer.\n  -pprof\n    Port to run the pprof server on.\n  -keep-orphaned-files\n    Keeps orphaned generated templ files. (default false)\n  -v\n    Set log verbosity level to \"debug\". (default \"info\")\n  -log-level\n    Set log verbosity level. (default \"info\", options: \"debug\", \"info\", \"warn\", \"error\")\n  -help\n    Print help and exit.\n```\n\nThis snippet shows you how to usage of generate command, which is an important aspect of template generation.\n\n", "metadata": {"source_url": "https://templ.guide/core-concepts/template-generation", "title": "Template Generation", "description": "This page covers how to generate Go code from *.templ files using the templ command line tool.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:03:52", "type": "code_examples", "page_metadata": {"og:description": "To generate Go code from *.templ files, use the templ command line tool.", "docsearch:language": "en", "og:url": "https://templ.guide/core-concepts/template-generation/", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "title": "Template generation | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Template generation | templ docs", "language": "en", "ogDescription": "To generate Go code from *.templ files, use the templ command line tool.", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/template-generation/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Template generation | templ docs", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "description": "To generate Go code from *.templ files, use the templ command line tool.", "twitter:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "78b1da0a-34f0-425d-9c50-19864d859363", "sourceURL": "https://templ.guide/core-concepts/template-generation", "url": "https://templ.guide/core-concepts/template-generation/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Template Generation in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe `templ generate --watch` option watches files for changes and runs templ generate when required. However, the code generated in this mode is not optimised for production use.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/core-concepts/template-generation", "title": "Template Generation", "description": "This page covers how to generate Go code from *.templ files using the templ command line tool.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:03:52", "type": "best_practices", "page_metadata": {"og:description": "To generate Go code from *.templ files, use the templ command line tool.", "docsearch:language": "en", "og:url": "https://templ.guide/core-concepts/template-generation/", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "title": "Template generation | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Template generation | templ docs", "language": "en", "ogDescription": "To generate Go code from *.templ files, use the templ command line tool.", "ogLocale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/core-concepts/template-generation/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Template generation | templ docs", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "description": "To generate Go code from *.templ files, use the templ command line tool.", "twitter:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "78b1da0a-34f0-425d-9c50-19864d859363", "sourceURL": "https://templ.guide/core-concepts/template-generation", "url": "https://templ.guide/core-concepts/template-generation/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Testing in Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Testing in Templ in templ.\n\n# Testing in Templ\n\nThis page covers the methods of testing in Templ, including expectation testing and snapshot testing.Here's a quick rundown of what this is about:\n\n## Expectation testing\n\nExpectation testing validates that the right data appears in the output in the right format and position.\n\nThe example at https://github.com/a-h/templ/blob/main/examples/blog/posts_test.go shows how to test that a list of posts is rendered correctly.\n\nThese tests use the `goquery` library to parse HTML and check that expected elements are present. `goquery` is a jQuery-like library for Go, that is useful for parsing and querying HTML. You’ll need to run `go get github.com/PuerkitoBio/goquery` to add it to your `go.mod` file.\n\n## Testing components\n\nThe test sets up a pipe to write templ's HTML output to, and reads the output from the pipe, parsing it with `goquery`.\n\nFirst, we test the page header. To use `goquery` to inspect the output, we’ll need to connect the header component’s `Render` method to the `goquery.NewDocumentFromReader` function with an `io.Pipe`.\n\n```go\nfunc TestHeader(t *testing.T) {\n    // Pipe the rendered template into goquery.\n    r, w := io.Pipe()\n    go func () {\n        _ = headerTemplate(\"Posts\").Render(context.Background(), w)\n        _ = w.Close()\n    }()\n    doc, err := goquery.NewDocumentFromReader(r)\n    if err != nil {\n        t.Fatalf(\"failed to read template: %v\", err)\n    }\n    // Expect the component to be present.\n    if doc.Find(`[data-testid=\"headerTemplate\"]`).Length() == 0 {\n        t.Error(\"expected data-testid attribute to be rendered, but it wasn't\")\n    }\n    // Expect the page name to be set correctly.\n    expectedPageName := \"Posts\"\n    if actualPageName := doc.Find(\"h1\").Text(); actualPageName != expectedPageName {\n        t.Errorf(\"expected page name %q, got %q\", expectedPageName, actualPageName)\n    }\n}\n```\n\nThe header template (the \"subject under test\") includes a placeholder for the page name, and a `data-testid` attribute that makes it easier to locate the `headerTemplate` within the HTML using a CSS selector of `[data-testid=\"headerTemplate\"]`.\n\n```go\ntempl headerTemplate(name string) {\n    <header data-testid=\"headerTemplate\">\n        <h1>{ name }</h1>\n    </header>\n}\n```\n\nWe can also test that the navigation bar was rendered.\n\n```go\nfunc TestNav(t *testing.T) {\n    r, w := io.Pipe()\n    go func() {\n        _ = navTemplate().Render(context.Background(), w)\n        _ = w.Close()\n    }()\n    doc, err := goquery.NewDocumentFromReader(r)\n    if err != nil {\n        t.Fatalf(\"failed to read template: %v\", err)\n    }\n    // Expect the component to include a testid.\n    if doc.Find(`[data-testid=\"navTemplate\"]`).Length() == 0 {\n        t.Error(\"expected data-testid attribute to be rendered, but it wasn't\")\n    }\n}\n```\n\nTesting that it was rendered is useful, but it's even better to test that the navigation includes the correct `nav` items.\n\nIn this test, we find all of the `a` elements within the `nav` element, and check that they match the expected items.\n\n```go\nnavItems := []string{\"Home\", \"Posts\"}\n\ndoc.Find(\"nav a\").Each(func(i int, s *goquery.Selection) {\n    expected := navItems[i]\n    if actual := s.Text(); actual != expected {\n        t.Errorf(\"expected nav item %q, got %q\", expected, actual)\n    }\n})\n```\n\nTo test the posts, we can use the same approach. We test that the posts are rendered correctly, and that the expected data is present.\n\n## Testing whole pages\n\nNext, we may want to go a level higher and test the entire page.\n\nPages are also templ components, so the tests are structured in the same way.\n\nThere’s no need to test for the specifics about what gets rendered in the `navTemplate` or `homeTemplate` at the page level, because they’re already covered in other tests.\n\nSome developers prefer to only test the external facing part of their code (e.g. at a page level), rather than testing each individual component, on the basis that it’s slower to make changes if the implementation is too tightly controlled.\n\nFor example, if a component is reused across pages, then it makes sense to test that in detail in its own test. In the pages or higher-order components that use it, there’s no point testing it again at that level, so we only check that it was rendered to the output by looking for its data-testid attribute, unless we also need to check what we're passing to it.\n\n## Testing the HTTP handler\n\nFinally, we want to test the posts HTTP handler. This requires a different approach.\n\nWe can use the `httptest` package to create a test server, and use the `net/http` package to make a request to the server and check the response.\n\nThe tests configure the `GetPosts` function on the `PostsHandler` with a mock that returns a \"database error\", while the other returns a list of two posts. Here's what the `PostsHandler` looks like:\n\n```go\ntype PostsHandler struct {\n    Log      *log.Logger\n    GetPosts func() ([]Post, error)\n}\n```\n\nIn the error case, the test asserts that the error message was displayed, while in the success case, it checks that the `postsTemplate` is present. It does not check that the posts have actually been rendered properly or that specific fields are visible, because that’s already tested at the component level.\n\nTesting it again here would make the code resistant to refactoring and rework, but then again, we might have missed actually passing the posts we got back from the database to the posts template, so it’s a matter of risk appetite vs refactor resistance.\n\nNote the switch to the table-driven testing format, a popular approach in Go for testing multiple scenarios with the same test code.\n\n```go\nfunc TestPostsHandler(t *testing.T) {\n    tests := []struct {\n        name           string\n        postGetter     func() (posts []Post, err error)\n        expectedStatus int\n        assert         func(doc *goquery.Document)\n    }{\n        {\n            name: \"database errors result in a 500 error\",\n            postGetter: func() (posts []Post, err error) {\n                return nil, errors.New(\"database error\")\n            },\n            expectedStatus: http.StatusInternalServerError,\n            assert: func(doc *goquery.Document) {\n                expected := \"failed to retrieve posts\\n\"\n                if actual := doc.Text(); actual != expected {\n                    t.Errorf(\"expected error message %q, got %q\", expected, actual)\n                }\n            },\n        },\n        {\n            name: \"database success renders the posts\",\n            postGetter: func() (posts []Post, err error) {\n                return []Post{\n                    {Name: \"Name1\", Author: \"Author1\"},\n                    {Name: \"Name2\", Author: \"Author2\"},\n                }, nil\n            },\n            expectedStatus: http.StatusInternalServerError,\n            assert: func(doc *goquery.Document) {\n                if doc.Find(`[data-testid=\"postsTemplate\"]`).Length() == 0 {\n                    t.Error(\"expected posts to be rendered, but it wasn't\")\n                }\n            },\n        },\n    }\n    for _, test := range tests {\n        // Arrange.\n        w := httptest.NewRecorder()\n        r := httptest.NewRequest(http.MethodGet, \"/posts\", nil)\n\n        ph := NewPostsHandler()\n        ph.Log = log.New(io.Discard, \"\", 0) // Suppress logging.\n        ph.GetPosts = test.postGetter\n\n        // Act.\n        ph.ServeHTTP(w, r)\n        doc, err := goquery.NewDocumentFromReader(w.Result().Body)\n        if err != nil {\n            t.Fatalf(\"failed to read template: %v\", err)\n        }\n\n        // Assert.\n        test.assert(doc)\n    }\n}\n```\n\n### Summary\n\n- goquery can be used effectively with templ for writing component level tests.\n- Adding `data-testid` attributes to your code simplifies the test expressions you need to write to find elements within the output and makes your tests less brittle.\n- Testing can be split between the two concerns of template rendering, and HTTP handlers.\n\n## Snapshot testing\n\nSnapshot testing is a more broad check. It simply checks that the output hasn't changed since the last time you took a copy of the output.\n\nIt relies on manually checking the output to make sure it's correct, and then \"locking it in\" by using the snapshot.\n\ntempl uses this strategy to check for regressions in behaviour between releases, as per https://github.com/a-h/templ/blob/main/generator/test-html-comment/render_test.go\n\nTo make it easier to compare the output against the expected HTML, templ uses a HTML formatting library before executing the diff.\n\n```go\npackage testcomment\n\nimport (\n\t_ \"embed\"\n\t\"testing\"\n\n\t\"github.com/a-h/templ/generator/htmldiff\"\n)\n\n//go:embed expected.html\nvar expected string\n\nfunc Test(t *testing.T) {\n\tcomponent := render(\"sample content\")\n\n\tdiff, err := htmldiff.Diff(component, expected)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif diff != \"\" {\n\t\tt.Error(diff)\n\t}\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/core-concepts/testing", "title": "Testing in Templ", "description": "This page covers the methods of testing in Templ, including expectation testing and snapshot testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:05:41", "type": "overview", "page_metadata": {"og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/core-concepts/testing/", "og:description": "To test that data is rendered as expected, there are two main ways to do it:", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "description": "To test that data is rendered as expected, there are two main ways to do it:", "ogDescription": "To test that data is rendered as expected, there are two main ways to do it:", "docusaurus_locale": "en", "language": "en", "ogUrl": "https://templ.guide/core-concepts/testing/", "docsearch:language": "en", "docusaurus_version": "current", "title": "Testing | templ docs", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Testing | templ docs", "og:title": "Testing | templ docs", "docsearch:version": "current", "scrapeId": "d2c97604-233c-4803-b8d7-85d570e0fcc6", "sourceURL": "https://templ.guide/core-concepts/testing", "url": "https://templ.guide/core-concepts/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I expectation testing in templ?\n\nAssistant: To expectation testing in templ, here's what you do:\nExpectation testing validates that the right data appears in the output in the right format and position.\n\nThe example at https://github.com/a-h/templ/blob/main/examples/blog/posts_test.go shows how to test that a list of posts is rendered correctly.\n\nThese tests use the `goquery` library to parse HTML and check that expected elements are present. `goquery` is a jQuery-like library for Go, that is useful for parsing and querying HTML. You’ll need to run `go get github.com/PuerkitoBio/goquery` to add it to your `go.mod` file..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/testing", "title": "Testing in Templ", "description": "This page covers the methods of testing in Templ, including expectation testing and snapshot testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:05:41", "type": "section_detail", "page_metadata": {"og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/core-concepts/testing/", "og:description": "To test that data is rendered as expected, there are two main ways to do it:", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "description": "To test that data is rendered as expected, there are two main ways to do it:", "ogDescription": "To test that data is rendered as expected, there are two main ways to do it:", "docusaurus_locale": "en", "language": "en", "ogUrl": "https://templ.guide/core-concepts/testing/", "docsearch:language": "en", "docusaurus_version": "current", "title": "Testing | templ docs", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Testing | templ docs", "og:title": "Testing | templ docs", "docsearch:version": "current", "scrapeId": "d2c97604-233c-4803-b8d7-85d570e0fcc6", "sourceURL": "https://templ.guide/core-concepts/testing", "url": "https://templ.guide/core-concepts/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I testing components in templ?\n\nAssistant: To testing components in templ, here's what you do:\nThe test sets up a pipe to write templ's HTML output to, and reads the output from the pipe, parsing it with `goquery`.\n\nFirst, we test the page header. To use `goquery` to inspect the output, we’ll need to connect the header component’s `Render` method to the `goquery.NewDocumentFromReader` function with an `io.Pipe`.\n\n```go\nfunc TestHeader(t *testing.T) {\n    // Pipe the rendered template into goquery.\n    r, w := io.Pipe()\n    go func () {\n        _ = headerTemplate(\"Posts\").Render(context.Background(), w)\n        _ = w.Close()\n    }()\n    doc, err := goquery.NewDocumentFromReader(r)\n    if err != nil {\n        t.Fatalf(\"failed to read template: %v\", err)\n    }\n    // Expect the component to be present.\n    if doc.Find(`[data-testid=\"headerTemplate\"]`).Length() == 0 {\n        t.Error(\"expected data-testid attribute to be rendered, but it wasn't\")\n    }\n    // Expect the page name to be set correctly.\n    expectedPageName := \"Posts\"\n    if actualPageName := doc.Find(\"h1\").Text(); actualPageName != expectedPageName {\n        t.Errorf(\"expected page name %q, got %q\", expectedPageName, actualPageName)\n    }\n}\n```\n\nThe header template (the \"subject under test\") includes a placeholder for the page name, and a `data-testid` attribute that makes it easier to locate the `headerTemplate` within the HTML using a CSS selector of `[data-testid=\"headerTemplate\"]`.\n\n```go\ntempl headerTemplate(name string) {\n    <header data-testid=\"headerTemplate\">\n        <h1>{ name }</h1>\n    </header>\n}\n```\n\nWe can also test that the navigation bar was rendered.\n\n```go\nfunc TestNav(t *testing.T) {\n    r, w := io.Pipe()\n    go func() {\n        _ = navTemplate().Render(context.Background(), w)\n        _ = w.Close()\n    }()\n    doc, err := goquery.NewDocumentFromReader(r)\n    if err != nil {\n        t.Fatalf(\"failed to read template: %v\", err)\n    }\n    // Expect the component to include a testid.\n    if doc.Find(`[data-testid=\"navTemplate\"]`).Length() == 0 {\n        t.Error(\"expected data-testid attribute to be rendered, but it wasn't\")\n    }\n}\n```\n\nTesting that it was rendered is useful, but it's even better to test that the navigation includes the correct `nav` items.\n\nIn this test, we find all of the `a` elements within the `nav` element, and check that they match the expected items.\n\n```go\nnavItems := []string{\"Home\", \"Posts\"}\n\ndoc.Find(\"nav a\").Each(func(i int, s *goquery.Selection) {\n    expected := navItems[i]\n    if actual := s.Text(); actual != expected {\n        t.Errorf(\"expected nav item %q, got %q\", expected, actual)\n    }\n})\n```\n\nTo test the posts, we can use the same approach. We test that the posts are rendered correctly, and that the expected data is present..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/testing", "title": "Testing in Templ", "description": "This page covers the methods of testing in Templ, including expectation testing and snapshot testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:05:41", "type": "section_detail", "page_metadata": {"og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/core-concepts/testing/", "og:description": "To test that data is rendered as expected, there are two main ways to do it:", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "description": "To test that data is rendered as expected, there are two main ways to do it:", "ogDescription": "To test that data is rendered as expected, there are two main ways to do it:", "docusaurus_locale": "en", "language": "en", "ogUrl": "https://templ.guide/core-concepts/testing/", "docsearch:language": "en", "docusaurus_version": "current", "title": "Testing | templ docs", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Testing | templ docs", "og:title": "Testing | templ docs", "docsearch:version": "current", "scrapeId": "d2c97604-233c-4803-b8d7-85d570e0fcc6", "sourceURL": "https://templ.guide/core-concepts/testing", "url": "https://templ.guide/core-concepts/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I testing whole pages in templ?\n\nAssistant: To testing whole pages in templ, here's what you do:\nNext, we may want to go a level higher and test the entire page.\n\nPages are also templ components, so the tests are structured in the same way.\n\nThere’s no need to test for the specifics about what gets rendered in the `navTemplate` or `homeTemplate` at the page level, because they’re already covered in other tests.\n\nSome developers prefer to only test the external facing part of their code (e.g. at a page level), rather than testing each individual component, on the basis that it’s slower to make changes if the implementation is too tightly controlled.\n\nFor example, if a component is reused across pages, then it makes sense to test that in detail in its own test. In the pages or higher-order components that use it, there’s no point testing it again at that level, so we only check that it was rendered to the output by looking for its data-testid attribute, unless we also need to check what we're passing to it..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/testing", "title": "Testing in Templ", "description": "This page covers the methods of testing in Templ, including expectation testing and snapshot testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:05:41", "type": "section_detail", "page_metadata": {"og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/core-concepts/testing/", "og:description": "To test that data is rendered as expected, there are two main ways to do it:", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "description": "To test that data is rendered as expected, there are two main ways to do it:", "ogDescription": "To test that data is rendered as expected, there are two main ways to do it:", "docusaurus_locale": "en", "language": "en", "ogUrl": "https://templ.guide/core-concepts/testing/", "docsearch:language": "en", "docusaurus_version": "current", "title": "Testing | templ docs", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Testing | templ docs", "og:title": "Testing | templ docs", "docsearch:version": "current", "scrapeId": "d2c97604-233c-4803-b8d7-85d570e0fcc6", "sourceURL": "https://templ.guide/core-concepts/testing", "url": "https://templ.guide/core-concepts/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I testing the http handler in templ?\n\nAssistant: To testing the http handler in templ, here's what you do:\nFinally, we want to test the posts HTTP handler. This requires a different approach.\n\nWe can use the `httptest` package to create a test server, and use the `net/http` package to make a request to the server and check the response.\n\nThe tests configure the `GetPosts` function on the `PostsHandler` with a mock that returns a \"database error\", while the other returns a list of two posts. Here's what the `PostsHandler` looks like:\n\n```go\ntype PostsHandler struct {\n    Log      *log.Logger\n    GetPosts func() ([]Post, error)\n}\n```\n\nIn the error case, the test asserts that the error message was displayed, while in the success case, it checks that the `postsTemplate` is present. It does not check that the posts have actually been rendered properly or that specific fields are visible, because that’s already tested at the component level.\n\nTesting it again here would make the code resistant to refactoring and rework, but then again, we might have missed actually passing the posts we got back from the database to the posts template, so it’s a matter of risk appetite vs refactor resistance.\n\nNote the switch to the table-driven testing format, a popular approach in Go for testing multiple scenarios with the same test code.\n\n```go\nfunc TestPostsHandler(t *testing.T) {\n    tests := []struct {\n        name           string\n        postGetter     func() (posts []Post, err error)\n        expectedStatus int\n        assert         func(doc *goquery.Document)\n    }{\n        {\n            name: \"database errors result in a 500 error\",\n            postGetter: func() (posts []Post, err error) {\n                return nil, errors.New(\"database error\")\n            },\n            expectedStatus: http.StatusInternalServerError,\n            assert: func(doc *goquery.Document) {\n                expected := \"failed to retrieve posts\\n\"\n                if actual := doc.Text(); actual != expected {\n                    t.Errorf(\"expected error message %q, got %q\", expected, actual)\n                }\n            },\n        },\n        {\n            name: \"database success renders the posts\",\n            postGetter: func() (posts []Post, err error) {\n                return []Post{\n                    {Name: \"Name1\", Author: \"Author1\"},\n                    {Name: \"Name2\", Author: \"Author2\"},\n                }, nil\n            },\n            expectedStatus: http.StatusInternalServerError,\n            assert: func(doc *goquery.Document) {\n                if doc.Find(`[data-testid=\"postsTemplate\"]`).Length() == 0 {\n                    t.Error(\"expected posts to be rendered, but it wasn't\")\n                }\n            },\n        },\n    }\n    for _, test := range tests {\n        // Arrange.\n        w := httptest.NewRecorder()\n        r := httptest.NewRequest(http.MethodGet, \"/posts\", nil)\n\n        ph := NewPostsHandler()\n        ph.Log = log.New(io.Discard, \"\", 0) // Suppress logging.\n        ph.GetPosts = test.postGetter\n\n        // Act.\n        ph.ServeHTTP(w, r)\n        doc, err := goquery.NewDocumentFromReader(w.Result().Body)\n        if err != nil {\n            t.Fatalf(\"failed to read template: %v\", err)\n        }\n\n        // Assert.\n        test.assert(doc)\n    }\n}\n```\n\n### Summary\n\n- goquery can be used effectively with templ for writing component level tests.\n- Adding `data-testid` attributes to your code simplifies the test expressions you need to write to find elements within the output and makes your tests less brittle.\n- Testing can be split between the two concerns of template rendering, and HTTP handlers..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/testing", "title": "Testing in Templ", "description": "This page covers the methods of testing in Templ, including expectation testing and snapshot testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:05:41", "type": "section_detail", "page_metadata": {"og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/core-concepts/testing/", "og:description": "To test that data is rendered as expected, there are two main ways to do it:", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "description": "To test that data is rendered as expected, there are two main ways to do it:", "ogDescription": "To test that data is rendered as expected, there are two main ways to do it:", "docusaurus_locale": "en", "language": "en", "ogUrl": "https://templ.guide/core-concepts/testing/", "docsearch:language": "en", "docusaurus_version": "current", "title": "Testing | templ docs", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Testing | templ docs", "og:title": "Testing | templ docs", "docsearch:version": "current", "scrapeId": "d2c97604-233c-4803-b8d7-85d570e0fcc6", "sourceURL": "https://templ.guide/core-concepts/testing", "url": "https://templ.guide/core-concepts/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I snapshot testing in templ?\n\nAssistant: To snapshot testing in templ, here's what you do:\nSnapshot testing is a more broad check. It simply checks that the output hasn't changed since the last time you took a copy of the output.\n\nIt relies on manually checking the output to make sure it's correct, and then \"locking it in\" by using the snapshot.\n\ntempl uses this strategy to check for regressions in behaviour between releases, as per https://github.com/a-h/templ/blob/main/generator/test-html-comment/render_test.go\n\nTo make it easier to compare the output against the expected HTML, templ uses a HTML formatting library before executing the diff.\n\n```go\npackage testcomment\n\nimport (\n\t_ \"embed\"\n\t\"testing\"\n\n\t\"github.com/a-h/templ/generator/htmldiff\"\n)\n\n//go:embed expected.html\nvar expected string\n\nfunc Test(t *testing.T) {\n\tcomponent := render(\"sample content\")\n\n\tdiff, err := htmldiff.Diff(component, expected)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif diff != \"\" {\n\t\tt.Error(diff)\n\t}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/testing", "title": "Testing in Templ", "description": "This page covers the methods of testing in Templ, including expectation testing and snapshot testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:05:41", "type": "section_detail", "page_metadata": {"og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/core-concepts/testing/", "og:description": "To test that data is rendered as expected, there are two main ways to do it:", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "description": "To test that data is rendered as expected, there are two main ways to do it:", "ogDescription": "To test that data is rendered as expected, there are two main ways to do it:", "docusaurus_locale": "en", "language": "en", "ogUrl": "https://templ.guide/core-concepts/testing/", "docsearch:language": "en", "docusaurus_version": "current", "title": "Testing | templ docs", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Testing | templ docs", "og:title": "Testing | templ docs", "docsearch:version": "current", "scrapeId": "d2c97604-233c-4803-b8d7-85d570e0fcc6", "sourceURL": "https://templ.guide/core-concepts/testing", "url": "https://templ.guide/core-concepts/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Testing in Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**TestHeader**:\n\n```yaml\nfunc TestHeader(t *testing.T) {\n    // Pipe the rendered template into goquery.\n    r, w := io.Pipe()\n    go func () {\n        _ = headerTemplate(\"Posts\").Render(context.Background(), w)\n        _ = w.Close()\n    }()\n    doc, err := goquery.NewDocumentFromReader(r)\n    if err != nil {\n        t.Fatalf(\"failed to read template: %v\", err)\n    }\n    // Expect the component to be present.\n    if doc.Find(`[data-testid=\"headerTemplate\"]`).Length() == 0 {\n        t.Error(\"expected data-testid attribute to be rendered, but it wasn't\")\n    }\n    // Expect the page name to be set correctly.\n    expectedPageName := \"Posts\"\n    if actualPageName := doc.Find(\"h1\").Text(); actualPageName != expectedPageName {\n        t.Errorf(\"expected page name %q, got %q\", expectedPageName, actualPageName)\n    }\n}\n```\n\nThis snippet shows you how to testheader, which is an important aspect of testing in templ.\n\n**headerTemplate**:\n\n```yaml\ntempl headerTemplate(name string) {\n    <header data-testid=\"headerTemplate\">\n        <h1>{ name }</h1>\n    </header>\n}\n```\n\nThis snippet shows you how to headertemplate, which is an important aspect of testing in templ.\n\n", "metadata": {"source_url": "https://templ.guide/core-concepts/testing", "title": "Testing in Templ", "description": "This page covers the methods of testing in Templ, including expectation testing and snapshot testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:05:41", "type": "code_examples", "page_metadata": {"og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/core-concepts/testing/", "og:description": "To test that data is rendered as expected, there are two main ways to do it:", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "description": "To test that data is rendered as expected, there are two main ways to do it:", "ogDescription": "To test that data is rendered as expected, there are two main ways to do it:", "docusaurus_locale": "en", "language": "en", "ogUrl": "https://templ.guide/core-concepts/testing/", "docsearch:language": "en", "docusaurus_version": "current", "title": "Testing | templ docs", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Testing | templ docs", "og:title": "Testing | templ docs", "docsearch:version": "current", "scrapeId": "d2c97604-233c-4803-b8d7-85d570e0fcc6", "sourceURL": "https://templ.guide/core-concepts/testing", "url": "https://templ.guide/core-concepts/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Testing in Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\ngoquery can be used effectively with templ for writing component level tests.\n\nAdding data-testid attributes to your code simplifies the test expressions you need to write to find elements within the output and makes your tests less brittle.\n\nTesting can be split between the two concerns of template rendering, and HTTP handlers.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/core-concepts/testing", "title": "Testing in Templ", "description": "This page covers the methods of testing in Templ, including expectation testing and snapshot testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:05:41", "type": "best_practices", "page_metadata": {"og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/core-concepts/testing/", "og:description": "To test that data is rendered as expected, there are two main ways to do it:", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "description": "To test that data is rendered as expected, there are two main ways to do it:", "ogDescription": "To test that data is rendered as expected, there are two main ways to do it:", "docusaurus_locale": "en", "language": "en", "ogUrl": "https://templ.guide/core-concepts/testing/", "docsearch:language": "en", "docusaurus_version": "current", "title": "Testing | templ docs", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Testing | templ docs", "og:title": "Testing | templ docs", "docsearch:version": "current", "scrapeId": "d2c97604-233c-4803-b8d7-85d570e0fcc6", "sourceURL": "https://templ.guide/core-concepts/testing", "url": "https://templ.guide/core-concepts/testing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what View Models in Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain View Models in Templ in templ.\n\n# View Models in Templ\n\nThis page discusses the use of view models in templ to simplify template rendering and testing.Here's a quick rundown of what this is about:\n\n## Introduction\n\nWith templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions. However, if the parameters of your template don't closely map to what you're displaying to users, you may find yourself calling a lot of functions within your templ files to reshape or adjust data, or to carry out complex repeated string interpolation or URL constructions.\n\n## Challenges with Template Rendering\n\nThis can make template rendering hard to test, because you need to set up complex data structures in the right way in order to render the HTML. If the template calls APIs or accesses databases from within the templates, it's even harder to test, because then testing your templates becomes an integration test.\n\n## Solution: View Model\n\nA more reliable approach can be to create a \"View model\" that only contains the fields that you intend to display, and where the data structure closely matches the structure of the visual layout.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/core-concepts/view-models", "title": "View Models in Templ", "description": "This page discusses the use of view models in templ to simplify template rendering and testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:07:00", "type": "overview", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docsearch:language": "en", "ogUrl": "https://templ.guide/core-concepts/view-models/", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:title": "View models | templ docs", "og:url": "https://templ.guide/core-concepts/view-models/", "language": "en", "title": "View models | templ docs", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogTitle": "View models | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:locale": "en", "scrapeId": "8a4fc819-df6a-473c-a7ab-5da5157a6b2d", "sourceURL": "https://templ.guide/core-concepts/view-models", "url": "https://templ.guide/core-concepts/view-models/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I introduction in templ?\n\nAssistant: To introduction in templ, here's what you do:\nWith templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions. However, if the parameters of your template don't closely map to what you're displaying to users, you may find yourself calling a lot of functions within your templ files to reshape or adjust data, or to carry out complex repeated string interpolation or URL constructions..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/view-models", "title": "View Models in Templ", "description": "This page discusses the use of view models in templ to simplify template rendering and testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:07:00", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docsearch:language": "en", "ogUrl": "https://templ.guide/core-concepts/view-models/", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:title": "View models | templ docs", "og:url": "https://templ.guide/core-concepts/view-models/", "language": "en", "title": "View models | templ docs", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogTitle": "View models | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:locale": "en", "scrapeId": "8a4fc819-df6a-473c-a7ab-5da5157a6b2d", "sourceURL": "https://templ.guide/core-concepts/view-models", "url": "https://templ.guide/core-concepts/view-models/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I challenges with template rendering in templ?\n\nAssistant: To challenges with template rendering in templ, here's what you do:\nThis can make template rendering hard to test, because you need to set up complex data structures in the right way in order to render the HTML. If the template calls APIs or accesses databases from within the templates, it's even harder to test, because then testing your templates becomes an integration test..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/view-models", "title": "View Models in Templ", "description": "This page discusses the use of view models in templ to simplify template rendering and testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:07:00", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docsearch:language": "en", "ogUrl": "https://templ.guide/core-concepts/view-models/", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:title": "View models | templ docs", "og:url": "https://templ.guide/core-concepts/view-models/", "language": "en", "title": "View models | templ docs", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogTitle": "View models | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:locale": "en", "scrapeId": "8a4fc819-df6a-473c-a7ab-5da5157a6b2d", "sourceURL": "https://templ.guide/core-concepts/view-models", "url": "https://templ.guide/core-concepts/view-models/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I solution: view model in templ?\n\nAssistant: To solution: view model in templ, here's what you do:\nA more reliable approach can be to create a \"View model\" that only contains the fields that you intend to display, and where the data structure closely matches the structure of the visual layout..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/core-concepts/view-models", "title": "View Models in Templ", "description": "This page discusses the use of view models in templ to simplify template rendering and testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:07:00", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docsearch:language": "en", "ogUrl": "https://templ.guide/core-concepts/view-models/", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:title": "View models | templ docs", "og:url": "https://templ.guide/core-concepts/view-models/", "language": "en", "title": "View models | templ docs", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogTitle": "View models | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:locale": "en", "scrapeId": "8a4fc819-df6a-473c-a7ab-5da5157a6b2d", "sourceURL": "https://templ.guide/core-concepts/view-models", "url": "https://templ.guide/core-concepts/view-models/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for View Models in Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Invite Handler Example**:\n\n```yaml\npackage invitesget\n\ntype Handler struct {\n  Invites *InviteService\n}\n\nfunc (h Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n  invites, err := h.Invites.Get(getUserIDFromContext(r.Context()))\n  if err != nil {\n     //TODO: Log error server side.\n  }\n  m := NewInviteComponentViewModel(invites, err)\n  teamInviteComponent(m).Render(r.Context(), w)\n}\n\nfunc NewInviteComponentViewModel(invites []models.Invite, err error) (m InviteComponentViewModel) {\n  m.InviteCount = len(invites)\n  if err != nil {\n    m.ErrorMessage = \"Failed to load invites, please try again\"\n  }\n  return m\n}\n\ntype InviteComponentViewModel struct {\n  InviteCount int\n  ErrorMessage string\n}\n\ntempl teamInviteComponent(model InviteComponentViewModel) {\n\tif model.InviteCount > 0 {\n\t\t<div>You have { fmt.Sprintf(\"%d\", model.InviteCount) } pending invites</div>\n\t}\n        if model.ErrorMessage != \"\" {\n\t\t<div class=\"error\">{ model.ErrorMessage }</div>\n        }\n}\n```\n\nThis snippet shows you how to invite handler example, which is an important aspect of view models in templ.\n\n", "metadata": {"source_url": "https://templ.guide/core-concepts/view-models", "title": "View Models in Templ", "description": "This page discusses the use of view models in templ to simplify template rendering and testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:07:00", "type": "code_examples", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docsearch:language": "en", "ogUrl": "https://templ.guide/core-concepts/view-models/", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:title": "View models | templ docs", "og:url": "https://templ.guide/core-concepts/view-models/", "language": "en", "title": "View models | templ docs", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogTitle": "View models | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:locale": "en", "scrapeId": "8a4fc819-df6a-473c-a7ab-5da5157a6b2d", "sourceURL": "https://templ.guide/core-concepts/view-models", "url": "https://templ.guide/core-concepts/view-models/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using View Models in Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCreate view models that closely match the visual layout to simplify template rendering and testing.\n\nAvoid complex data structures in templates to make testing easier.\n\nLimit the use of functions within templates to reduce complexity.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/core-concepts/view-models", "title": "View Models in Templ", "description": "This page discusses the use of view models in templ to simplify template rendering and testing.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:07:00", "type": "best_practices", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "docsearch:language": "en", "ogUrl": "https://templ.guide/core-concepts/view-models/", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:title": "View models | templ docs", "og:url": "https://templ.guide/core-concepts/view-models/", "language": "en", "title": "View models | templ docs", "docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogTitle": "View models | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "og:description": "With templ, you can pass any Go type into your template as parameters, and you can call arbitrary functions.", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "og:locale": "en", "scrapeId": "8a4fc819-df6a-473c-a7ab-5da5157a6b2d", "sourceURL": "https://templ.guide/core-concepts/view-models", "url": "https://templ.guide/core-concepts/view-models/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what CI/CD Best Practices for Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain CI/CD Best Practices for Templ in templ.\n\n# CI/CD Best Practices for Templ\n\nGuidelines for managing generated files in your CI/CD pipeline using Templ.Here's a quick rundown of what this is about:\n\n## Committing Generated Files\n\nIt's common practice to commit generated `*_templ.go` files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run `templ generate`, e.g. by running `go install` on your project, or by importing it as a dependency in another project.\n\n## CI/CD Pipeline Checks\n\nIn your CI/CD pipeline, if you want to check that `templ generate` has been ran on all templ files (with the same version of templ used by the CI/CD pipeline), you can run `templ generate` again. If any files have changed, then the pipeline should fail, as this would indicate that the generated files are not up-to-date with the templ files.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/developer-tools/cicd", "title": "CI/CD Best Practices for Templ", "description": "Guidelines for managing generated files in your CI/CD pipeline using Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:41", "type": "overview", "page_metadata": {"og:url": "https://templ.guide/developer-tools/cicd/", "docusaurus_locale": "en", "docusaurus_version": "current", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Ensuring templ files have been committed | templ docs", "ogDescription": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:version": "current", "og:description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/developer-tools/cicd/", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docusaurus_tag": "docs-default-current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Ensuring templ files have been committed | templ docs", "viewport": "width=device-width, initial-scale=1.0", "title": "Ensuring templ files have been committed | templ docs", "scrapeId": "8fe5210a-810c-4d12-9de4-1b9a0a45bb10", "sourceURL": "https://templ.guide/developer-tools/cicd", "url": "https://templ.guide/developer-tools/cicd/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I committing generated files in templ?\n\nAssistant: To committing generated files in templ, here's what you do:\nIt's common practice to commit generated `*_templ.go` files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run `templ generate`, e.g. by running `go install` on your project, or by importing it as a dependency in another project..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/cicd", "title": "CI/CD Best Practices for Templ", "description": "Guidelines for managing generated files in your CI/CD pipeline using Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:41", "type": "section_detail", "page_metadata": {"og:url": "https://templ.guide/developer-tools/cicd/", "docusaurus_locale": "en", "docusaurus_version": "current", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Ensuring templ files have been committed | templ docs", "ogDescription": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:version": "current", "og:description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/developer-tools/cicd/", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docusaurus_tag": "docs-default-current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Ensuring templ files have been committed | templ docs", "viewport": "width=device-width, initial-scale=1.0", "title": "Ensuring templ files have been committed | templ docs", "scrapeId": "8fe5210a-810c-4d12-9de4-1b9a0a45bb10", "sourceURL": "https://templ.guide/developer-tools/cicd", "url": "https://templ.guide/developer-tools/cicd/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I ci/cd pipeline checks in templ?\n\nAssistant: To ci/cd pipeline checks in templ, here's what you do:\nIn your CI/CD pipeline, if you want to check that `templ generate` has been ran on all templ files (with the same version of templ used by the CI/CD pipeline), you can run `templ generate` again. If any files have changed, then the pipeline should fail, as this would indicate that the generated files are not up-to-date with the templ files..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/cicd", "title": "CI/CD Best Practices for Templ", "description": "Guidelines for managing generated files in your CI/CD pipeline using Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:41", "type": "section_detail", "page_metadata": {"og:url": "https://templ.guide/developer-tools/cicd/", "docusaurus_locale": "en", "docusaurus_version": "current", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Ensuring templ files have been committed | templ docs", "ogDescription": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:version": "current", "og:description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/developer-tools/cicd/", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docusaurus_tag": "docs-default-current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Ensuring templ files have been committed | templ docs", "viewport": "width=device-width, initial-scale=1.0", "title": "Ensuring templ files have been committed | templ docs", "scrapeId": "8fe5210a-810c-4d12-9de4-1b9a0a45bb10", "sourceURL": "https://templ.guide/developer-tools/cicd", "url": "https://templ.guide/developer-tools/cicd/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for CI/CD Best Practices for Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Check Generated Files in CI/CD**:\n\n```yaml\ntempl generate\ngit diff --exit-code\n```\n\nThis snippet shows you how to check generated files in ci/cd, which is an important aspect of ci/cd best practices for templ.\n\n", "metadata": {"source_url": "https://templ.guide/developer-tools/cicd", "title": "CI/CD Best Practices for Templ", "description": "Guidelines for managing generated files in your CI/CD pipeline using Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:41", "type": "code_examples", "page_metadata": {"og:url": "https://templ.guide/developer-tools/cicd/", "docusaurus_locale": "en", "docusaurus_version": "current", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Ensuring templ files have been committed | templ docs", "ogDescription": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:version": "current", "og:description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/developer-tools/cicd/", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docusaurus_tag": "docs-default-current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Ensuring templ files have been committed | templ docs", "viewport": "width=device-width, initial-scale=1.0", "title": "Ensuring templ files have been committed | templ docs", "scrapeId": "8fe5210a-810c-4d12-9de4-1b9a0a45bb10", "sourceURL": "https://templ.guide/developer-tools/cicd", "url": "https://templ.guide/developer-tools/cicd/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using CI/CD Best Practices for Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCommit generated *_templ.go files to your source code repository.\n\nEnsure your codebase can be built and run without needing to run templ generate.\n\nRun templ generate in your CI/CD pipeline to check for outdated files.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/developer-tools/cicd", "title": "CI/CD Best Practices for Templ", "description": "Guidelines for managing generated files in your CI/CD pipeline using Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:07:41", "type": "best_practices", "page_metadata": {"og:url": "https://templ.guide/developer-tools/cicd/", "docusaurus_locale": "en", "docusaurus_version": "current", "ogLocale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Ensuring templ files have been committed | templ docs", "ogDescription": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:version": "current", "og:description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/developer-tools/cicd/", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "It's common practice to commit generated *_templ.go files to your source code repository, so that your codebase is always in a state where it can be built and run without needing to run templ generate, e.g. by running go install on your project, or by importing it as a dependency in another project.", "docusaurus_tag": "docs-default-current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Ensuring templ files have been committed | templ docs", "viewport": "width=device-width, initial-scale=1.0", "title": "Ensuring templ files have been committed | templ docs", "scrapeId": "8fe5210a-810c-4d12-9de4-1b9a0a45bb10", "sourceURL": "https://templ.guide/developer-tools/cicd", "url": "https://templ.guide/developer-tools/cicd/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Command Line Interface for Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Command Line Interface for Templ in templ.\n\n# Command Line Interface for Templ\n\n`templ` provides a command line interface. Most users will only need to run the `templ generate` command to generate Go code from `*.templ` files.Here's a quick rundown of what this is about:\n\n## Generating Go code from templ files\n\nThe `templ generate` command generates Go code from `*.templ` files in the current directory tree.\n\nThe command provides additional options:\n\n```codeBlockLines_e6Vv\nusage: templ generate [<args>...]\n\nGenerates Go code from templ files.\n\nArgs:\n  -path <path>\n    Generates code for all files in path. (default .)\n  -f <file>\n    Optionally generates code for a single file, e.g. -f header.templ\n  -source-map-visualisations\n    Set to true to generate HTML files to visualise the templ code and its corresponding Go code.\n  -include-version\n    Set to false to skip inclusion of the templ version in the generated code. (default true)\n  -include-timestamp\n    Set to true to include the current time in the generated code.\n  -watch\n    Set to true to watch the path for changes and regenerate code.\n  -cmd <cmd>\n    Set the command to run after generating code.\n  -proxy\n    Set the URL to proxy after generating code and executing the command.\n  -proxyport\n    The port the proxy will listen on. (default 7331)\n  -proxybind\n    The address the proxy will listen on. (default 127.0.0.1)\n  -w\n    Number of workers to use when generating code. (default runtime.NumCPUs)\n  -lazy\n    Only generate .go files if the source .templ file is newer.\n  -pprof\n    Port to run the pprof server on.\n  -keep-orphaned-files\n    Keeps orphaned generated templ files. (default false)\n  -v\n    Set log verbosity level to \"debug\". (default \"info\")\n  -log-level\n    Set log verbosity level. (default \"info\", options: \"debug\", \"info\", \"warn\", \"error\")\n  -help\n    Print help and exit.\n\n```\n\nFor example, to generate code for a single file:\n\n```codeBlockLines_e6Vv\ntempl generate -f header.templ\n\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/developer-tools/cli", "title": "Command Line Interface for Templ", "description": "`templ` provides a command line interface. Most users will only need to run the `templ generate` command to generate Go code from `*.templ` files.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:09:09", "type": "overview", "page_metadata": {"docusaurus_locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "og:locale": "en", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "CLI | templ docs", "ogDescription": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "ogTitle": "CLI | templ docs", "og:url": "https://templ.guide/developer-tools/cli/", "language": "en", "ogUrl": "https://templ.guide/developer-tools/cli/", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "title": "CLI | templ docs", "og:description": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "ogLocale": "en", "scrapeId": "16b0af57-718e-4201-a3f1-a86b84334f44", "sourceURL": "https://templ.guide/developer-tools/cli", "url": "https://templ.guide/developer-tools/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I generating go code from templ files in templ?\n\nAssistant: To generating go code from templ files in templ, here's what you do:\nThe `templ generate` command generates Go code from `*.templ` files in the current directory tree.\n\nThe command provides additional options:\n\n```codeBlockLines_e6Vv\nusage: templ generate [<args>...]\n\nGenerates Go code from templ files.\n\nArgs:\n  -path <path>\n    Generates code for all files in path. (default .)\n  -f <file>\n    Optionally generates code for a single file, e.g. -f header.templ\n  -source-map-visualisations\n    Set to true to generate HTML files to visualise the templ code and its corresponding Go code.\n  -include-version\n    Set to false to skip inclusion of the templ version in the generated code. (default true)\n  -include-timestamp\n    Set to true to include the current time in the generated code.\n  -watch\n    Set to true to watch the path for changes and regenerate code.\n  -cmd <cmd>\n    Set the command to run after generating code.\n  -proxy\n    Set the URL to proxy after generating code and executing the command.\n  -proxyport\n    The port the proxy will listen on. (default 7331)\n  -proxybind\n    The address the proxy will listen on. (default 127.0.0.1)\n  -w\n    Number of workers to use when generating code. (default runtime.NumCPUs)\n  -lazy\n    Only generate .go files if the source .templ file is newer.\n  -pprof\n    Port to run the pprof server on.\n  -keep-orphaned-files\n    Keeps orphaned generated templ files. (default false)\n  -v\n    Set log verbosity level to \"debug\". (default \"info\")\n  -log-level\n    Set log verbosity level. (default \"info\", options: \"debug\", \"info\", \"warn\", \"error\")\n  -help\n    Print help and exit.\n\n```\n\nFor example, to generate code for a single file:\n\n```codeBlockLines_e6Vv\ntempl generate -f header.templ\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/cli", "title": "Command Line Interface for Templ", "description": "`templ` provides a command line interface. Most users will only need to run the `templ generate` command to generate Go code from `*.templ` files.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:09:09", "type": "section_detail", "page_metadata": {"docusaurus_locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "og:locale": "en", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "CLI | templ docs", "ogDescription": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "ogTitle": "CLI | templ docs", "og:url": "https://templ.guide/developer-tools/cli/", "language": "en", "ogUrl": "https://templ.guide/developer-tools/cli/", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "title": "CLI | templ docs", "og:description": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "ogLocale": "en", "scrapeId": "16b0af57-718e-4201-a3f1-a86b84334f44", "sourceURL": "https://templ.guide/developer-tools/cli", "url": "https://templ.guide/developer-tools/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Command Line Interface for Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Usage of templ command**:\n\n```yaml\nusage: templ <command> [<args>...]\n\ntempl - build HTML UIs with Go\n\nSee docs at https://templ.guide\n\ncommands:\n  generate   Generates Go code from templ files\n  fmt        Formats templ files\n  lsp        Starts a language server for templ files\n  info       Displays information about the templ environment\n  version    Prints the version\n\n```\n\nThis snippet shows you how to usage of templ command, which is an important aspect of command line interface for templ.\n\n**Generating Go code from templ files**:\n\n```yaml\ntempl generate -f header.templ\n\n```\n\nThis snippet shows you how to generating go code from templ files, which is an important aspect of command line interface for templ.\n\n**Formatting all template files**:\n\n```yaml\ntempl fmt .\n\n```\n\nThis snippet shows you how to formatting all template files, which is an important aspect of command line interface for templ.\n\n**Formatting input from stdin**:\n\n```yaml\ntempl fmt\n\n```\n\nThis snippet shows you how to formatting input from stdin, which is an important aspect of command line interface for templ.\n\n**Failing on invalidly formatted templates**:\n\n```yaml\ntempl fmt -fail .\n\n```\n\nThis snippet shows you how to failing on invalidly formatted templates, which is an important aspect of command line interface for templ.\n\n", "metadata": {"source_url": "https://templ.guide/developer-tools/cli", "title": "Command Line Interface for Templ", "description": "`templ` provides a command line interface. Most users will only need to run the `templ generate` command to generate Go code from `*.templ` files.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:09:09", "type": "code_examples", "page_metadata": {"docusaurus_locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "og:locale": "en", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "CLI | templ docs", "ogDescription": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "ogTitle": "CLI | templ docs", "og:url": "https://templ.guide/developer-tools/cli/", "language": "en", "ogUrl": "https://templ.guide/developer-tools/cli/", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "title": "CLI | templ docs", "og:description": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "ogLocale": "en", "scrapeId": "16b0af57-718e-4201-a3f1-a86b84334f44", "sourceURL": "https://templ.guide/developer-tools/cli", "url": "https://templ.guide/developer-tools/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Command Line Interface for Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `templ generate` command to generate Go code from `*.templ` files.\n\nRun `templ fmt` in CI to ensure that invalidly formatted templates do not pass CI.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/developer-tools/cli", "title": "Command Line Interface for Templ", "description": "`templ` provides a command line interface. Most users will only need to run the `templ generate` command to generate Go code from `*.templ` files.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:09:09", "type": "best_practices", "page_metadata": {"docusaurus_locale": "en", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "og:locale": "en", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "CLI | templ docs", "ogDescription": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "ogTitle": "CLI | templ docs", "og:url": "https://templ.guide/developer-tools/cli/", "language": "en", "ogUrl": "https://templ.guide/developer-tools/cli/", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "title": "CLI | templ docs", "og:description": "templ provides a command line interface. Most users will only need to run the templ generate command to generate Go code from *.templ files.", "ogLocale": "en", "scrapeId": "16b0af57-718e-4201-a3f1-a86b84334f44", "sourceURL": "https://templ.guide/developer-tools/cli", "url": "https://templ.guide/developer-tools/cli/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Live Reload for Go Applications is in templ?\n\nAssistant: Sure, I'd be happy to explain Live Reload for Go Applications in templ.\n\n# Live Reload for Go Applications\n\nThis page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.Here's a quick rundown of what this is about:\n\n## Overview\n\nTo access a Go web application that uses templ in a web browser, a few things must happen:\n\n1. `templ generate` must be executed, to create Go code ( `*_templ.go` files) from the `*.templ` files.\n2. The Go code must start a web server on a port, e.g. ( `http.ListenAndServe(\"localhost:8080\", nil)`).\n3. The Go program must be ran, e.g. by running `go run .`.\n4. The web browser must access or reload the page, e.g. `http://localhost:8080`.\n5. Content-Type must be text/html.\n\nIf the `*.templ` files change, #1 and #2 must be ran.\n\nIf the `*.go` files change, #3 and #4 must be ran.\n\n## Built-in\n\n`templ generate --watch` watches the current directory for changes and generates Go code if changes are detected.\n\nTo re-run your app automatically, add the `--cmd` argument to `templ generate`, and templ will start or restart your app using the command provided once template code generation is complete (#3).\n\nTo trigger your web browser to reload automatically (without pressing F5), set the `--proxy` argument (#4) to point at your app, and browse to the proxy address (default `http://localhost:7331`).\n\nThe `--proxy` argument starts a HTTP proxy which proxies requests to your app. For example, if your app runs on port 8080, you would use `--proxy=\"http://localhost:8080\"`. The proxy inserts client-side JavaScript before the `</body>` tag that will cause the browser to reload the window when the app is restarted instead of you having to reload the page manually. Note that the html being served by the webserver MUST have a `<body>` tag, otherwise there will be no javascript injection thus making the browser not reload automatically. In addition, the script might not be inserted if templ cannot read and modify the http response, e.g. due to middleware implementation.\n\nBy default, the proxy binds to `127.0.0.1`. You can use `--proxybind` to bind to another address, e.g., `--proxybind=\"0.0.0.0\"`.\n\nAltogether, to setup live reload on an app that listens on port 8080, run the following:\n\n```codeBlockLines_e6Vv\ntempl generate --watch --proxy=\"http://localhost:8080\" --cmd=\"go run .\"\n```\n\nThis will start the proxy server on port `7331` and open it in your default browser. If you'd like to prevent it from opening in your browser add the flag `--open-browser=false`.\n\n## Code Examples\n\nmain.go\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\tcomponent := hello(\"World\")\n\n\thttp.Handle(\"/\", templ.Handler(component))\n\n\tfmt.Println(\"Listening on :8080\")\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\nhello.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl hello(name string) {\n  <body>\n\t    <div>Hello, { name }</div>\n  </body>\n}\n```\n\nThe live reload process can be shown in the following diagram:\n\ngenerateapptempl_proxybrowsergenerateapptempl_proxybrowserHTTPHTTPHTMLadd reload scriptHTMLSSE request to /_templ/reload/eventsrun templ generate if *.templ files have changedrestart app if *.go files have changednotify browser to reload page\n\n## Triggering live reload from outside `templ generate --watch`\n\nIf you want to trigger a live reload from outside `templ generate --watch` (e.g. if you're using `air`, `wgo` or another tool to build, but you want to use the templ live reload proxy), you can use the `--notify-proxy` argument.\n\n```codeBlockLines_e6Vv\ntempl generate --notify-proxy\n```\n\nThis will default to the default templ proxy address of `localhost:7331`, but can be changed with the `--proxybind` and `--proxyport` arguments.\n\n```codeBlockLines_e6Vv\ntempl generate --notify-proxy --proxybind=\"localhost\" --proxyport=\"8080\"\n```\n\n## Alternative 1: wgo\n\n[wgo](https://github.com/bokwoon95/wgo):\n\n> Live reload for Go apps. Watch arbitrary files and respond with arbitrary commands. Supports running multiple invocations in parallel.\n\n```codeBlockLines_e6Vv\nwgo -file=.go -file=.templ -xfile=_templ.go templ generate :: go run main.go\n```\n\nTo avoid a continuous reloading files ending with `_templ.go` should be skipped via `-xfile`.\n\n## Alternative 2: air\n\nAir can also monitor the filesystem for changes, and provides a proxy to automatically reload pages.\n\nIt uses a `toml` configuration file.\n\nSee [https://github.com/cosmtrek/air](https://github.com/cosmtrek/air) for details.\n\n## Example configuration\n\n.air.toml\n\n```codeBlockLines_e6Vv\nroot = \".\"\ntmp_dir = \"tmp\"\n\n[build]\n  bin = \"./tmp/main\"\n  cmd = \"templ generate && go build -o ./tmp/main .\"\n  delay = 1000\n  exclude_dir = [\"assets\", \"tmp\", \"vendor\"]\n  exclude_file = []\n  exclude_regex = [\".*_templ.go\"]\n  exclude_unchanged = false\n  follow_symlink = false\n  full_bin = \"\"\n  include_dir = []\n  include_ext = [\"go\", \"tpl\", \"tmpl\", \"templ\", \"html\"]\n  kill_delay = \"0s\"\n  log = \"build-errors.log\"\n  send_interrupt = false\n  stop_on_error = true\n\n[color]\n  app = \"\"\n  build = \"yellow\"\n  main = \"magenta\"\n  runner = \"green\"\n  watcher = \"cyan\"\n\n[log]\n  time = false\n\n[misc]\n  clean_on_exit = false\n\n[proxy]\n  enabled = true\n  proxy_port = 8383\n  app_port = 8282\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "overview", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I overview in templ?\n\nAssistant: To overview in templ, here's what you do:\nTo access a Go web application that uses templ in a web browser, a few things must happen:\n\n1. `templ generate` must be executed, to create Go code ( `*_templ.go` files) from the `*.templ` files.\n2. The Go code must start a web server on a port, e.g. ( `http.ListenAndServe(\"localhost:8080\", nil)`).\n3. The Go program must be ran, e.g. by running `go run .`.\n4. The web browser must access or reload the page, e.g. `http://localhost:8080`.\n5. Content-Type must be text/html.\n\nIf the `*.templ` files change, #1 and #2 must be ran.\n\nIf the `*.go` files change, #3 and #4 must be ran..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I built-in in templ?\n\nAssistant: To built-in in templ, here's what you do:\n`templ generate --watch` watches the current directory for changes and generates Go code if changes are detected.\n\nTo re-run your app automatically, add the `--cmd` argument to `templ generate`, and templ will start or restart your app using the command provided once template code generation is complete (#3).\n\nTo trigger your web browser to reload automatically (without pressing F5), set the `--proxy` argument (#4) to point at your app, and browse to the proxy address (default `http://localhost:7331`).\n\nThe `--proxy` argument starts a HTTP proxy which proxies requests to your app. For example, if your app runs on port 8080, you would use `--proxy=\"http://localhost:8080\"`. The proxy inserts client-side JavaScript before the `</body>` tag that will cause the browser to reload the window when the app is restarted instead of you having to reload the page manually. Note that the html being served by the webserver MUST have a `<body>` tag, otherwise there will be no javascript injection thus making the browser not reload automatically. In addition, the script might not be inserted if templ cannot read and modify the http response, e.g. due to middleware implementation.\n\nBy default, the proxy binds to `127.0.0.1`. You can use `--proxybind` to bind to another address, e.g., `--proxybind=\"0.0.0.0\"`.\n\nAltogether, to setup live reload on an app that listens on port 8080, run the following:\n\n```codeBlockLines_e6Vv\ntempl generate --watch --proxy=\"http://localhost:8080\" --cmd=\"go run .\"\n```\n\nThis will start the proxy server on port `7331` and open it in your default browser. If you'd like to prevent it from opening in your browser add the flag `--open-browser=false`..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I code examples in templ?\n\nAssistant: To code examples in templ, here's what you do:\nmain.go\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\tcomponent := hello(\"World\")\n\n\thttp.Handle(\"/\", templ.Handler(component))\n\n\tfmt.Println(\"Listening on :8080\")\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\nhello.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl hello(name string) {\n  <body>\n\t    <div>Hello, { name }</div>\n  </body>\n}\n```\n\nThe live reload process can be shown in the following diagram:\n\ngenerateapptempl_proxybrowsergenerateapptempl_proxybrowserHTTPHTTPHTMLadd reload scriptHTMLSSE request to /_templ/reload/eventsrun templ generate if *.templ files have changedrestart app if *.go files have changednotify browser to reload page.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I triggering live reload from outside `templ generate --watch` in templ?\n\nAssistant: To triggering live reload from outside `templ generate --watch` in templ, here's what you do:\nIf you want to trigger a live reload from outside `templ generate --watch` (e.g. if you're using `air`, `wgo` or another tool to build, but you want to use the templ live reload proxy), you can use the `--notify-proxy` argument.\n\n```codeBlockLines_e6Vv\ntempl generate --notify-proxy\n```\n\nThis will default to the default templ proxy address of `localhost:7331`, but can be changed with the `--proxybind` and `--proxyport` arguments.\n\n```codeBlockLines_e6Vv\ntempl generate --notify-proxy --proxybind=\"localhost\" --proxyport=\"8080\"\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I alternative 1: wgo in templ?\n\nAssistant: To alternative 1: wgo in templ, here's what you do:\n[wgo](https://github.com/bokwoon95/wgo):\n\n> Live reload for Go apps. Watch arbitrary files and respond with arbitrary commands. Supports running multiple invocations in parallel.\n\n```codeBlockLines_e6Vv\nwgo -file=.go -file=.templ -xfile=_templ.go templ generate :: go run main.go\n```\n\nTo avoid a continuous reloading files ending with `_templ.go` should be skipped via `-xfile`..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I alternative 2: air in templ?\n\nAssistant: To alternative 2: air in templ, here's what you do:\nAir can also monitor the filesystem for changes, and provides a proxy to automatically reload pages.\n\nIt uses a `toml` configuration file.\n\nSee [https://github.com/cosmtrek/air](https://github.com/cosmtrek/air) for details..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I example configuration in templ?\n\nAssistant: To example configuration in templ, here's what you do:\n.air.toml\n\n```codeBlockLines_e6Vv\nroot = \".\"\ntmp_dir = \"tmp\"\n\n[build]\n  bin = \"./tmp/main\"\n  cmd = \"templ generate && go build -o ./tmp/main .\"\n  delay = 1000\n  exclude_dir = [\"assets\", \"tmp\", \"vendor\"]\n  exclude_file = []\n  exclude_regex = [\".*_templ.go\"]\n  exclude_unchanged = false\n  follow_symlink = false\n  full_bin = \"\"\n  include_dir = []\n  include_ext = [\"go\", \"tpl\", \"tmpl\", \"templ\", \"html\"]\n  kill_delay = \"0s\"\n  log = \"build-errors.log\"\n  send_interrupt = false\n  stop_on_error = true\n\n[color]\n  app = \"\"\n  build = \"yellow\"\n  main = \"magenta\"\n  runner = \"green\"\n  watcher = \"cyan\"\n\n[log]\n  time = false\n\n[misc]\n  clean_on_exit = false\n\n[proxy]\n  enabled = true\n  proxy_port = 8383\n  app_port = 8282\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Live Reload for Go Applications in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Run templ generate with live reload**:\n\n```yaml\ntempl generate --watch --proxy=\"http://localhost:8080\" --cmd=\"go run .\"\n```\n\nThis snippet shows you how to run templ generate with live reload, which is an important aspect of live reload for go applications.\n\n**Notify proxy for live reload**:\n\n```yaml\ntempl generate --notify-proxy\n```\n\nThis snippet shows you how to notify proxy for live reload, which is an important aspect of live reload for go applications.\n\n**Notify proxy with custom bind and port**:\n\n```yaml\ntempl generate --notify-proxy --proxybind=\"localhost\" --proxyport=\"8080\"\n```\n\nThis snippet shows you how to notify proxy with custom bind and port, which is an important aspect of live reload for go applications.\n\n**wgo live reload command**:\n\n```yaml\nwgo -file=.go -file=.templ -xfile=_templ.go templ generate :: go run main.go\n```\n\nThis snippet shows you how to wgo live reload command, which is an important aspect of live reload for go applications.\n\n**Example air configuration**:\n\n```yaml\n.air.toml\n\nroot = \".\"\ntmp_dir = \"tmp\"\n\n[build]\n  bin = \"./tmp/main\"\n  cmd = \"templ generate && go build -o ./tmp/main .\"\n  delay = 1000\n  exclude_dir = [\"assets\", \"tmp\", \"vendor\"]\n  exclude_file = []\n  exclude_regex = [\".*_templ.go\"]\n  exclude_unchanged = false\n  follow_symlink = false\n  full_bin = \"\"\n  include_dir = []\n  include_ext = [\"go\", \"tpl\", \"tmpl\", \"templ\", \"html\"]\n  kill_delay = \"0s\"\n  log = \"build-errors.log\"\n  send_interrupt = false\n  stop_on_error = true\n\n[color]\n  app = \"\"\n  build = \"yellow\"\n  main = \"magenta\"\n  runner = \"green\"\n  watcher = \"cyan\"\n\n[log]\n  time = false\n\n[misc]\n  clean_on_exit = false\n\n[proxy]\n  enabled = true\n  proxy_port = 8383\n  app_port = 8282\n```\n\nThis snippet shows you how to example air configuration, which is an important aspect of live reload for go applications.\n\n", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "code_examples", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Live Reload for Go Applications in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure the HTML served by the webserver has a <body> tag for JavaScript injection.\n\nUse the --open-browser=false flag to prevent the proxy from opening in the browser automatically.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload", "title": "Live Reload for Go Applications", "description": "This page covers how to set up live reload for Go web applications using templ, including commands, configurations, and alternatives.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:12:42", "type": "best_practices", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "title": "Live reload | templ docs", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/live-reload/", "docusaurus_locale": "en", "ogUrl": "https://templ.guide/developer-tools/live-reload/", "ogDescription": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogTitle": "Live reload | templ docs", "og:description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "description": "To access a Go web application that uses templ in a web browser, a few things must happen:", "og:title": "Live reload | templ docs", "docusaurus_version": "current", "og:locale": "en", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "69116deb-2f79-47e6-9e38-6c2ef1ea5f0d", "sourceURL": "https://templ.guide/developer-tools/live-reload", "url": "https://templ.guide/developer-tools/live-reload/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Live Reload with Other Tools is in templ?\n\nAssistant: Sure, I'd be happy to explain Live Reload with Other Tools in templ.\n\n# Live Reload with Other Tools\n\nThis page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.Here's a quick rundown of what this is about:\n\n## Example\n\nThis example, demonstrates setting up a live reload environment that integrates:\n\n- [Tailwind CSS](https://tailwindcss.com/) for generating a css bundle.\n- [esbuild](https://esbuild.github.io/) for bundling JavaScript or TypeScript.\n- [air](https://github.com/cosmtrek/air) for re-building Go source as well as sending a reload event to the `templ` proxy server.\n\n## How does it work\n\ntempl's built-in proxy server automatically refreshes the browser when a file changes. The proxy server injects a script that reloads the page in the browser if a \"reload\" event is sent to the browser by the proxy. See [Live Reload page](https://templ.guide/developer-tools/live-reload) for a detailed explanation.\n\ntip\n\nThe live reload JavaScript is only injected by the templ proxy if your HTML file contains a closing `</body>` tag.\n\nThe \"reload\" event can be triggered in two ways:\n\n- `templ generate --watch` sends the event whenever a \".templ\" file changes.\n- Manually trigger it by sending a HTTP POST request to `/_templ/reload/event` endpoint. The `templ` CLI provides this via `templ generate --notify-proxy`.\n\ntip\n\ntempl proxy server `--watch` mode generates different `_templ.go` files. In `--watch` mode `_templ.txt` files are generated that contain just the text that's in templ files. This is used to skip compilation of the Go code when only the text content changes.\n\n## Setting up the Makefile\n\nA `Makefile` can be used to run all of the necessary commands in parallel. This is useful for starting all of the watch processes at once.\n\n## templ watch mode\n\nTo start the `templ` proxy server in watch mode, run:\n\n```codeBlockLines_e6Vv\ntempl generate --watch --proxy=\"http://localhost:8080\" --open-browser=false\n```\n\nThis assumes that your http server is running on `http://localhost:8080`. `--open-browser=false` is to prevent `templ` from opening the browser automatically.\n\n## Tailwind CSS\n\nTailwind requires a `tailwind.config.js` file at the root of your project, alongside an `input.css` file.\n\n```codeBlockLines_e6Vv\nnpx --yes tailwindcss -i ./input.css -o ./assets/styles.css --minify --watch\n```\n\nThis will watch `input.css` as well as your `.templ` files and re-generate `assets/styles.css` whenever there's a change.\n\n## esbuild\n\nTo bundle JavaScript, TypeScript, JSX, or TSX files, you can use `esbuild`:\n\n```codeBlockLines_e6Vv\nnpx --yes esbuild js/index.ts --bundle --outdir=assets/ --watch\n```\n\nThis will watch `js/index.ts` and relevant files, and re-generate `assets/index.js` whenever there's a change.\n\n## Re-build Go source\n\nTo watch and restart your Go server, when only the `go` files change you can use `air`:\n\n```codeBlockLines_e6Vv\ngo run github.com/cosmtrek/air@v1.51.0 \\\n  --build.cmd \"go build -o tmp/bin/main\" --build.bin \"tmp/bin/main\" --build.delay \"100\" \\\n  --build.exclude_dir \"node_modules\" \\\n  --build.include_ext \"go\" \\\n  --build.stop_on_error \"false\" \\\n  --misc.clean_on_exit true\n```\n\ntip\n\nUsing `go run` directly allows the version of `air` to be specified. This ensures that the version of `air` is consistent between machines. In addition, you don't need to run `air init` to generate `.air.toml`.\n\nnote\n\nThis command doesn't do anything to restart or send a reload event to the `templ` proxy server. We'll use a separate `air` command to trigger a notify event when any non-go related files change.\n\n## Reload event\n\nWe also want the browser to automatically reload when the:\n\n1. HTML content changes\n2. CSS bundle changes\n3. JavaScript bundle changes\n\nTo trigger the event, we can use the `air` command to use a different set of options, using the `templ` CLI to send a reload event to the browser.\n\n```codeBlockLines_e6Vv\ngo run github.com/cosmtrek/air@v1.51.0 \\\n  --build.cmd \"templ generate --notify-proxy\" \\\n  --build.bin \"true\" \\\n  --build.delay \"100\" \\\n  --build.exclude_dir \"\" \\\n  --build.include_dir \"assets\" \\\n  --build.include_ext \"js,css\"\n```\n\nnote\n\nThe `build.bin` option is set to use the `true` command instead of executing the output of the `build.cmd` option, because the `templ generate --notify-proxy` command doesn't build anything, it just sends a reload event to the `templ` proxy server.\n\n`true` is a command that exits with a zero status code, so you might see `Process Exit with Code 0` printed to the console.\n\n## Serving static assets\n\nWhen using live reload, static assets must be served directly from the filesystem instead of being embedded in the Go binary, because the Go binary won't be re-built when the assets change.\n\nIn practice this means using `http.Dir` instead of `http.FS` to serve your assets.\n\nIf you don't want to do this, you can add additional asset file extensions to the `--build.include_ext` argument of the `air` command that rebuilds Go code to force a recompilation and restart of the Go server when the assets change.\n\n## Before\n\n```codeBlockLines_e6Vv\n//go:embed assets/*\nvar assets embed.FS\n...\nmux.Handle(\"/assets/\", http.FileServer(http.FS(assets)))\n```\n\n## After\n\n```codeBlockLines_e6Vv\nmux.Handle(\"/assets/\",\n  http.StripPrefix(\"/assets\",\n    http.FileServer(http.Dir(\"assets\"))))\n```\n\n## Tip\n\nWeb browsers will cache assets when they receive a HTTP 304 response. This will result in asset changes not being visible within your application.\n\nTo avoid this, set the `Cache-Control` header to `no-store` for assets in development mode:\n\n```codeBlockLines_e6Vv\nvar dev = true\n\nfunc disableCacheInDevMode(next http.Handler) http.Handler {\n\tif !dev {\n\t\treturn next\n\t}\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Cache-Control\", \"no-store\")\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\nmux.Handle(\"/assets/\",\n  disableCacheInDevMode(\n    http.StripPrefix(\"/assets\",\n      http.FileServer(http.Dir(\"assets\")))))\n```\n\n## Putting it all together\n\nA `Makefile` can be used to run all of the commands in parallel.\n\n```codeBlockLines_e6Vv\n# run templ generation in watch mode to detect all .templ files and\n# re-create _templ.txt files on change, then send reload event to browser.\nlive/templ:\n\ttempl generate --watch --proxy=\"http://localhost:8080\" --open-browser=false -v\n\n# run air to detect any go file changes to re-build and re-run the server.\nlive/server:\n\tgo run github.com/cosmtrek/air@v1.51.0 \\\n\t--build.cmd \"go build -o tmp/bin/main\" --build.bin \"tmp/bin/main\" --build.delay \"100\" \\\n\t--build.exclude_dir \"node_modules\" \\\n\t--build.include_ext \"go\" \\\n\t--build.stop_on_error \"false\" \\\n\t--misc.clean_on_exit true\n\n# run tailwindcss to generate the styles.css bundle in watch mode.\nlive/tailwind:\n\tnpx --yes tailwindcss -i ./input.css -o ./assets/styles.css --minify --watch\n\n# run esbuild to generate the index.js bundle in watch mode.\nlive/esbuild:\n\tnpx --yes esbuild js/index.ts --bundle --outdir=assets/ --watch\n\n# watch for any js or css change in the assets/ folder, then reload the browser via templ proxy.\nlive/sync_assets:\n\tgo run github.com/cosmtrek/air@v1.51.0 \\\n\t--build.cmd \"templ generate --notify-proxy\" \\\n\t--build.bin \"true\" \\\n\t--build.delay \"100\" \\\n\t--build.exclude_dir \"\" \\\n\t--build.include_dir \"assets\" \\\n\t--build.include_ext \"js,css\"\n\n# start all 5 watch processes in parallel.\nlive:\n\tmake -j5 live/templ live/server live/tailwind live/esbuild live/sync_assets\n```\n\nnote\n\nThe `-j5` argument to `make` runs all 5 commands in parallel.\n\nRun `make live` to start all of the watch processes.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "overview", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I example in templ?\n\nAssistant: To example in templ, here's what you do:\nThis example, demonstrates setting up a live reload environment that integrates:\n\n- [Tailwind CSS](https://tailwindcss.com/) for generating a css bundle.\n- [esbuild](https://esbuild.github.io/) for bundling JavaScript or TypeScript.\n- [air](https://github.com/cosmtrek/air) for re-building Go source as well as sending a reload event to the `templ` proxy server..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I how does it work in templ?\n\nAssistant: To how does it work in templ, here's what you do:\ntempl's built-in proxy server automatically refreshes the browser when a file changes. The proxy server injects a script that reloads the page in the browser if a \"reload\" event is sent to the browser by the proxy. See [Live Reload page](https://templ.guide/developer-tools/live-reload) for a detailed explanation.\n\ntip\n\nThe live reload JavaScript is only injected by the templ proxy if your HTML file contains a closing `</body>` tag.\n\nThe \"reload\" event can be triggered in two ways:\n\n- `templ generate --watch` sends the event whenever a \".templ\" file changes.\n- Manually trigger it by sending a HTTP POST request to `/_templ/reload/event` endpoint. The `templ` CLI provides this via `templ generate --notify-proxy`.\n\ntip\n\ntempl proxy server `--watch` mode generates different `_templ.go` files. In `--watch` mode `_templ.txt` files are generated that contain just the text that's in templ files. This is used to skip compilation of the Go code when only the text content changes..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I setting up the makefile in templ?\n\nAssistant: To setting up the makefile in templ, here's what you do:\nA `Makefile` can be used to run all of the necessary commands in parallel. This is useful for starting all of the watch processes at once..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I templ watch mode in templ?\n\nAssistant: To templ watch mode in templ, here's what you do:\nTo start the `templ` proxy server in watch mode, run:\n\n```codeBlockLines_e6Vv\ntempl generate --watch --proxy=\"http://localhost:8080\" --open-browser=false\n```\n\nThis assumes that your http server is running on `http://localhost:8080`. `--open-browser=false` is to prevent `templ` from opening the browser automatically..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I tailwind css in templ?\n\nAssistant: To tailwind css in templ, here's what you do:\nTailwind requires a `tailwind.config.js` file at the root of your project, alongside an `input.css` file.\n\n```codeBlockLines_e6Vv\nnpx --yes tailwindcss -i ./input.css -o ./assets/styles.css --minify --watch\n```\n\nThis will watch `input.css` as well as your `.templ` files and re-generate `assets/styles.css` whenever there's a change..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I esbuild in templ?\n\nAssistant: To esbuild in templ, here's what you do:\nTo bundle JavaScript, TypeScript, JSX, or TSX files, you can use `esbuild`:\n\n```codeBlockLines_e6Vv\nnpx --yes esbuild js/index.ts --bundle --outdir=assets/ --watch\n```\n\nThis will watch `js/index.ts` and relevant files, and re-generate `assets/index.js` whenever there's a change..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I re-build go source in templ?\n\nAssistant: To re-build go source in templ, here's what you do:\nTo watch and restart your Go server, when only the `go` files change you can use `air`:\n\n```codeBlockLines_e6Vv\ngo run github.com/cosmtrek/air@v1.51.0 \\\n  --build.cmd \"go build -o tmp/bin/main\" --build.bin \"tmp/bin/main\" --build.delay \"100\" \\\n  --build.exclude_dir \"node_modules\" \\\n  --build.include_ext \"go\" \\\n  --build.stop_on_error \"false\" \\\n  --misc.clean_on_exit true\n```\n\ntip\n\nUsing `go run` directly allows the version of `air` to be specified. This ensures that the version of `air` is consistent between machines. In addition, you don't need to run `air init` to generate `.air.toml`.\n\nnote\n\nThis command doesn't do anything to restart or send a reload event to the `templ` proxy server. We'll use a separate `air` command to trigger a notify event when any non-go related files change..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I reload event in templ?\n\nAssistant: To reload event in templ, here's what you do:\nWe also want the browser to automatically reload when the:\n\n1. HTML content changes\n2. CSS bundle changes\n3. JavaScript bundle changes\n\nTo trigger the event, we can use the `air` command to use a different set of options, using the `templ` CLI to send a reload event to the browser.\n\n```codeBlockLines_e6Vv\ngo run github.com/cosmtrek/air@v1.51.0 \\\n  --build.cmd \"templ generate --notify-proxy\" \\\n  --build.bin \"true\" \\\n  --build.delay \"100\" \\\n  --build.exclude_dir \"\" \\\n  --build.include_dir \"assets\" \\\n  --build.include_ext \"js,css\"\n```\n\nnote\n\nThe `build.bin` option is set to use the `true` command instead of executing the output of the `build.cmd` option, because the `templ generate --notify-proxy` command doesn't build anything, it just sends a reload event to the `templ` proxy server.\n\n`true` is a command that exits with a zero status code, so you might see `Process Exit with Code 0` printed to the console..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I serving static assets in templ?\n\nAssistant: To serving static assets in templ, here's what you do:\nWhen using live reload, static assets must be served directly from the filesystem instead of being embedded in the Go binary, because the Go binary won't be re-built when the assets change.\n\nIn practice this means using `http.Dir` instead of `http.FS` to serve your assets.\n\nIf you don't want to do this, you can add additional asset file extensions to the `--build.include_ext` argument of the `air` command that rebuilds Go code to force a recompilation and restart of the Go server when the assets change..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I before in templ?\n\nAssistant: To before in templ, here's what you do:\n```codeBlockLines_e6Vv\n//go:embed assets/*\nvar assets embed.FS\n...\nmux.Handle(\"/assets/\", http.FileServer(http.FS(assets)))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I after in templ?\n\nAssistant: To after in templ, here's what you do:\n```codeBlockLines_e6Vv\nmux.Handle(\"/assets/\",\n  http.StripPrefix(\"/assets\",\n    http.FileServer(http.Dir(\"assets\"))))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I tip in templ?\n\nAssistant: To tip in templ, here's what you do:\nWeb browsers will cache assets when they receive a HTTP 304 response. This will result in asset changes not being visible within your application.\n\nTo avoid this, set the `Cache-Control` header to `no-store` for assets in development mode:\n\n```codeBlockLines_e6Vv\nvar dev = true\n\nfunc disableCacheInDevMode(next http.Handler) http.Handler {\n\tif !dev {\n\t\treturn next\n\t}\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Cache-Control\", \"no-store\")\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\nmux.Handle(\"/assets/\",\n  disableCacheInDevMode(\n    http.StripPrefix(\"/assets\",\n      http.FileServer(http.Dir(\"assets\")))))\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I putting it all together in templ?\n\nAssistant: To putting it all together in templ, here's what you do:\nA `Makefile` can be used to run all of the commands in parallel.\n\n```codeBlockLines_e6Vv\n# run templ generation in watch mode to detect all .templ files and\n# re-create _templ.txt files on change, then send reload event to browser.\nlive/templ:\n\ttempl generate --watch --proxy=\"http://localhost:8080\" --open-browser=false -v\n\n# run air to detect any go file changes to re-build and re-run the server.\nlive/server:\n\tgo run github.com/cosmtrek/air@v1.51.0 \\\n\t--build.cmd \"go build -o tmp/bin/main\" --build.bin \"tmp/bin/main\" --build.delay \"100\" \\\n\t--build.exclude_dir \"node_modules\" \\\n\t--build.include_ext \"go\" \\\n\t--build.stop_on_error \"false\" \\\n\t--misc.clean_on_exit true\n\n# run tailwindcss to generate the styles.css bundle in watch mode.\nlive/tailwind:\n\tnpx --yes tailwindcss -i ./input.css -o ./assets/styles.css --minify --watch\n\n# run esbuild to generate the index.js bundle in watch mode.\nlive/esbuild:\n\tnpx --yes esbuild js/index.ts --bundle --outdir=assets/ --watch\n\n# watch for any js or css change in the assets/ folder, then reload the browser via templ proxy.\nlive/sync_assets:\n\tgo run github.com/cosmtrek/air@v1.51.0 \\\n\t--build.cmd \"templ generate --notify-proxy\" \\\n\t--build.bin \"true\" \\\n\t--build.delay \"100\" \\\n\t--build.exclude_dir \"\" \\\n\t--build.include_dir \"assets\" \\\n\t--build.include_ext \"js,css\"\n\n# start all 5 watch processes in parallel.\nlive:\n\tmake -j5 live/templ live/server live/tailwind live/esbuild live/sync_assets\n```\n\nnote\n\nThe `-j5` argument to `make` runs all 5 commands in parallel.\n\nRun `make live` to start all of the watch processes..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "section_detail", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Live Reload with Other Tools in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Start templ proxy server in watch mode**:\n\n```yaml\ntempl generate --watch --proxy=\"http://localhost:8080\" --open-browser=false\n```\n\nThis snippet shows you how to start templ proxy server in watch mode, which is an important aspect of live reload with other tools.\n\n**Tailwind CSS command**:\n\n```yaml\nnpx --yes tailwindcss -i ./input.css -o ./assets/styles.css --minify --watch\n```\n\nThis snippet shows you how to tailwind css command, which is an important aspect of live reload with other tools.\n\n**esbuild command**:\n\n```yaml\nnpx --yes esbuild js/index.ts --bundle --outdir=assets/ --watch\n```\n\nThis snippet shows you how to esbuild command, which is an important aspect of live reload with other tools.\n\n**Re-build Go source with air**:\n\n```yaml\ngo run github.com/cosmtrek/air@v1.51.0 \\\n  --build.cmd \"go build -o tmp/bin/main\" --build.bin \"tmp/bin/main\" --build.delay \"100\" \\\n  --build.exclude_dir \"node_modules\" \\\n  --build.include_ext \"go\" \\\n  --build.stop_on_error \"false\" \\\n  --misc.clean_on_exit true\n```\n\nThis snippet shows you how to re-build go source with air, which is an important aspect of live reload with other tools.\n\n**Trigger reload event with air**:\n\n```yaml\ngo run github.com/cosmtrek/air@v1.51.0 \\\n  --build.cmd \"templ generate --notify-proxy\" \\\n  --build.bin \"true\" \\\n  --build.delay \"100\" \\\n  --build.exclude_dir \"\" \\\n  --build.include_dir \"assets\" \\\n  --build.include_ext \"js,css\"\n```\n\nThis snippet shows you how to trigger reload event with air, which is an important aspect of live reload with other tools.\n\n**Serving static assets before**:\n\n```yaml\n//go:embed assets/*\nvar assets embed.FS\n...\nmux.Handle(\"/assets/\", http.FileServer(http.FS(assets)))\n```\n\nThis snippet shows you how to serving static assets before, which is an important aspect of live reload with other tools.\n\n**Serving static assets after**:\n\n```yaml\nmux.Handle(\"/assets/\",\n  http.StripPrefix(\"/assets\",\n    http.FileServer(http.Dir(\"assets\"))))\n```\n\nThis snippet shows you how to serving static assets after, which is an important aspect of live reload with other tools.\n\n**Makefile example**:\n\n```yaml\n# run templ generation in watch mode to detect all .templ files and\n# re-create _templ.txt files on change, then send reload event to browser.\nlive/templ:\n\ttempl generate --watch --proxy=\"http://localhost:8080\" --open-browser=false -v\n\n# run air to detect any go file changes to re-build and re-run the server.\nlive/server:\n\tgo run github.com/cosmtrek/air@v1.51.0 \\\n\t--build.cmd \"go build -o tmp/bin/main\" --build.bin \"tmp/bin/main\" --build.delay \"100\" \\\n\t--build.exclude_dir \"node_modules\" \\\n\t--build.include_ext \"go\" \\\n\t--build.stop_on_error \"false\" \\\n\t--misc.clean_on_exit true\n\n# run tailwindcss to generate the styles.css bundle in watch mode.\nlive/tailwind:\n\tnpx --yes tailwindcss -i ./input.css -o ./assets/styles.css --minify --watch\n\n# run esbuild to generate the index.js bundle in watch mode.\nlive/esbuild:\n\tnpx --yes esbuild js/index.ts --bundle --outdir=assets/ --watch\n\n# watch for any js or css change in the assets/ folder, then reload the browser via templ proxy.\nlive/sync_assets:\n\tgo run github.com/cosmtrek/air@v1.51.0 \\\n\t--build.cmd \"templ generate --notify-proxy\" \\\n\t--build.bin \"true\" \\\n\t--build.delay \"100\" \\\n\t--build.exclude_dir \"\" \\\n\t--build.include_dir \"assets\" \\\n\t--build.include_ext \"js,css\"\n\n# start all 5 watch processes in parallel.\nlive:\n\tmake -j5 live/templ live/server live/tailwind live/esbuild live/sync_assets\n```\n\nThis snippet shows you how to makefile example, which is an important aspect of live reload with other tools.\n\n", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "code_examples", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Live Reload with Other Tools in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe live reload JavaScript is only injected by the templ proxy if your HTML file contains a closing </body> tag.\n\nUsing go run directly allows the version of air to be specified. This ensures that the version of air is consistent between machines. In addition, you don't need to run air init to generate .air.toml.\n\nWeb browsers will cache assets when they receive a HTTP 304 response. This will result in asset changes not being visible within your application. To avoid this, set the Cache-Control header to no-store for assets in development mode.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/developer-tools/live-reload-with-other-tools", "title": "Live Reload with Other Tools", "description": "This page covers how to set up a live reload environment using templ's built-in proxy server alongside tools like Tailwind CSS, esbuild, and air for Go projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-03-01 03:13:27", "type": "best_practices", "page_metadata": {"og:description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "language": "en", "docsearch:version": "current", "og:title": "Live reload with other tools | templ docs", "ogDescription": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "viewport": "width=device-width, initial-scale=1.0", "description": "Browser live reload allows you to see your changes immediately without having to switch to your browser and press F5 or CMD+R.", "og:locale": "en", "docusaurus_locale": "en", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Live reload with other tools | templ docs", "ogUrl": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "ogLocale": "en", "title": "Live reload with other tools | templ docs", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "scrapeId": "669db415-c975-48d3-91e1-91fea24b18ff", "sourceURL": "https://templ.guide/developer-tools/live-reload-with-other-tools", "url": "https://templ.guide/developer-tools/live-reload-with-other-tools/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what LLM Tools Documentation is in templ?\n\nAssistant: Sure, I'd be happy to explain LLM Tools Documentation in templ.\n\n# LLM Tools Documentation\n\nThis page provides information on AI coding assistants and how to write templ code for LLMs.Here's a quick rundown of what this is about:\n\n## LLM tools\n\nTo provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.\n\nYou can find the file at `https://templ.guide/llms.md`.\n\n### CopilotChat\n\nCopilotChat is a plugin for Neovim that provides a chat interface for GitHub Copilot. It allows you to ask Copilot questions and get responses in real-time.\n\nUse the URL feature to load `https://templ.guide/llms.md`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/developer-tools/llm", "title": "LLM Tools Documentation", "description": "This page provides information on AI coding assistants and how to write templ code for LLMs.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:13:39", "type": "overview", "page_metadata": {"title": "Coding assistants / LLMs | templ docs", "docsearch:language": "en", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://templ.guide/developer-tools/llm/", "og:locale": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "og:title": "Coding assistants / LLMs | templ docs", "docusaurus_tag": "docs-default-current", "description": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Coding assistants / LLMs | templ docs", "ogDescription": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "og:description": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/developer-tools/llm/", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "scrapeId": "3e98d3c0-febe-4eab-8f14-1ca3ef5fbf8c", "sourceURL": "https://templ.guide/developer-tools/llm", "url": "https://templ.guide/developer-tools/llm/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I llm tools in templ?\n\nAssistant: To llm tools in templ, here's what you do:\nTo provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.\n\nYou can find the file at `https://templ.guide/llms.md`.\n\n### CopilotChat\n\nCopilotChat is a plugin for Neovim that provides a chat interface for GitHub Copilot. It allows you to ask Copilot questions and get responses in real-time.\n\nUse the URL feature to load `https://templ.guide/llms.md`..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/llm", "title": "LLM Tools Documentation", "description": "This page provides information on AI coding assistants and how to write templ code for LLMs.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:13:39", "type": "section_detail", "page_metadata": {"title": "Coding assistants / LLMs | templ docs", "docsearch:language": "en", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://templ.guide/developer-tools/llm/", "og:locale": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "og:title": "Coding assistants / LLMs | templ docs", "docusaurus_tag": "docs-default-current", "description": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Coding assistants / LLMs | templ docs", "ogDescription": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "og:description": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/developer-tools/llm/", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "scrapeId": "3e98d3c0-febe-4eab-8f14-1ca3ef5fbf8c", "sourceURL": "https://templ.guide/developer-tools/llm", "url": "https://templ.guide/developer-tools/llm/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for LLM Tools Documentation in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Load LLM Documentation**:\n\n```yaml\nUse the URL feature to load `https://templ.guide/llms.md`.\n```\n\nThis snippet shows you how to load llm documentation, which is an important aspect of llm tools documentation.\n\n", "metadata": {"source_url": "https://templ.guide/developer-tools/llm", "title": "LLM Tools Documentation", "description": "This page provides information on AI coding assistants and how to write templ code for LLMs.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:13:39", "type": "code_examples", "page_metadata": {"title": "Coding assistants / LLMs | templ docs", "docsearch:language": "en", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://templ.guide/developer-tools/llm/", "og:locale": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "og:title": "Coding assistants / LLMs | templ docs", "docusaurus_tag": "docs-default-current", "description": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Coding assistants / LLMs | templ docs", "ogDescription": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "og:description": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/developer-tools/llm/", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "scrapeId": "3e98d3c0-febe-4eab-8f14-1ca3ef5fbf8c", "sourceURL": "https://templ.guide/developer-tools/llm", "url": "https://templ.guide/developer-tools/llm/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using LLM Tools Documentation in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUtilize the URL feature to access the LLM documentation for better assistance.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/developer-tools/llm", "title": "LLM Tools Documentation", "description": "This page provides information on AI coding assistants and how to write templ code for LLMs.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:13:39", "type": "best_practices", "page_metadata": {"title": "Coding assistants / LLMs | templ docs", "docsearch:language": "en", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "ogUrl": "https://templ.guide/developer-tools/llm/", "og:locale": "en", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "og:title": "Coding assistants / LLMs | templ docs", "docusaurus_tag": "docs-default-current", "description": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Coding assistants / LLMs | templ docs", "ogDescription": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "og:description": "To provide AI coding assistants such as GitHub Copilot, Cursor or similar with help on how to write templ code, the templ project maintains a single file containing documentation for LLMs to read.", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/developer-tools/llm/", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "scrapeId": "3e98d3c0-febe-4eab-8f14-1ca3ef5fbf8c", "sourceURL": "https://templ.guide/developer-tools/llm", "url": "https://templ.guide/developer-tools/llm/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Experimental Packages Overview is in templ?\n\nAssistant: Sure, I'd be happy to explain Experimental Packages Overview in templ.\n\n# Experimental Packages Overview\n\nThis page provides information about the experimental packages available for templ, including warnings and the approval process for stabilization.Here's a quick rundown of what this is about:\n\n## Warning\n\n- Packages in this module are experimental and may be removed at any time.\n- There is no guarantee of compatibility with future versions.\n- There is no guarantee of stability.\n- Use at your own risk.\n\n## Approval Process\n\nAs of right now, there is no formal approval process for packages to be stabilized and moved into https://github.com/a-h/templ. Feel free to contribute via GitHub discussions at https://github.com/a-h/templ/discussions.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/experimental/overview", "title": "Experimental Packages Overview", "description": "This page provides information about the experimental packages available for templ, including warnings and the approval process for stabilization.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:14:12", "type": "overview", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "ogTitle": "Experimental packages | templ docs", "ogUrl": "https://templ.guide/experimental/overview/", "og:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "docsearch:language": "en", "og:url": "https://templ.guide/experimental/overview/", "docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "language": "en", "docusaurus_version": "current", "og:description": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "title": "Experimental packages | templ docs", "ogDescription": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "og:title": "Experimental packages | templ docs", "scrapeId": "6590ab21-62c0-4025-9078-4ed760d143e0", "sourceURL": "https://templ.guide/experimental/overview", "url": "https://templ.guide/experimental/overview/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I warning in templ?\n\nAssistant: To warning in templ, here's what you do:\n- Packages in this module are experimental and may be removed at any time.\n- There is no guarantee of compatibility with future versions.\n- There is no guarantee of stability.\n- Use at your own risk..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/experimental/overview", "title": "Experimental Packages Overview", "description": "This page provides information about the experimental packages available for templ, including warnings and the approval process for stabilization.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:14:12", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "ogTitle": "Experimental packages | templ docs", "ogUrl": "https://templ.guide/experimental/overview/", "og:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "docsearch:language": "en", "og:url": "https://templ.guide/experimental/overview/", "docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "language": "en", "docusaurus_version": "current", "og:description": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "title": "Experimental packages | templ docs", "ogDescription": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "og:title": "Experimental packages | templ docs", "scrapeId": "6590ab21-62c0-4025-9078-4ed760d143e0", "sourceURL": "https://templ.guide/experimental/overview", "url": "https://templ.guide/experimental/overview/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I approval process in templ?\n\nAssistant: To approval process in templ, here's what you do:\nAs of right now, there is no formal approval process for packages to be stabilized and moved into https://github.com/a-h/templ. Feel free to contribute via GitHub discussions at https://github.com/a-h/templ/discussions..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/experimental/overview", "title": "Experimental Packages Overview", "description": "This page provides information about the experimental packages available for templ, including warnings and the approval process for stabilization.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:14:12", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "ogTitle": "Experimental packages | templ docs", "ogUrl": "https://templ.guide/experimental/overview/", "og:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "docsearch:language": "en", "og:url": "https://templ.guide/experimental/overview/", "docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "language": "en", "docusaurus_version": "current", "og:description": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "title": "Experimental packages | templ docs", "ogDescription": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "og:title": "Experimental packages | templ docs", "scrapeId": "6590ab21-62c0-4025-9078-4ed760d143e0", "sourceURL": "https://templ.guide/experimental/overview", "url": "https://templ.guide/experimental/overview/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Experimental Packages Overview in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse experimental packages at your own risk due to their unstable nature.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/experimental/overview", "title": "Experimental Packages Overview", "description": "This page provides information about the experimental packages available for templ, including warnings and the approval process for stabilization.", "has_code_examples": false, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:14:12", "type": "best_practices", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "ogTitle": "Experimental packages | templ docs", "ogUrl": "https://templ.guide/experimental/overview/", "og:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "docsearch:language": "en", "og:url": "https://templ.guide/experimental/overview/", "docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "description": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "language": "en", "docusaurus_version": "current", "og:description": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "title": "Experimental packages | templ docs", "ogDescription": "Experimental Packages for templ are available at https://github.com/templ-go/x/", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "og:title": "Experimental packages | templ docs", "scrapeId": "6590ab21-62c0-4025-9078-4ed760d143e0", "sourceURL": "https://templ.guide/experimental/overview", "url": "https://templ.guide/experimental/overview/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what URL Builder Documentation is in templ?\n\nAssistant: Sure, I'd be happy to explain URL Builder Documentation in templ.\n\n# URL Builder Documentation\n\nA simple URL builder to construct a templ.SafeURL.Here's a quick rundown of what this is about:\n\n## On this page\n\nA simple URL builder to construct a `templ.SafeURL`.\n\n## Code Example\n\n```go\nimport (\n  \"github.com/templ-go/x/urlbuilder\"\n  \"strconv\"\n  \"strings\"\n)\n\ntempl component(o Order) {\n  <a\n    href={ urlbuilder.New(\"https\", \"example.com\").\n    Path(\"orders\").\n    Path(o.ID).\n    Path(\"line-items\").\n    Query(\"page\", strconv.Itoa(1)).\n    Query(\"limit\", strconv.Itoa(10)).\n    Build() }\n  >\n    { strings.ToUpper(o.Name) }\n  </a>\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/experimental/urlbuilder", "title": "URL Builder Documentation", "description": "A simple URL builder to construct a templ.SafeURL.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:14:41", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:description": "A simple URL builder to construct a templ.SafeURL.", "ogUrl": "https://templ.guide/experimental/urlbuilder/", "docsearch:language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "urlbuilder | templ docs", "ogTitle": "urlbuilder | templ docs", "og:locale": "en", "og:url": "https://templ.guide/experimental/urlbuilder/", "description": "A simple URL builder to construct a templ.SafeURL.", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "title": "urlbuilder | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "A simple URL builder to construct a templ.SafeURL.", "scrapeId": "2d807cc1-789a-4772-91b8-bf60852adccf", "sourceURL": "https://templ.guide/experimental/urlbuilder", "url": "https://templ.guide/experimental/urlbuilder/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I on this page in templ?\n\nAssistant: To on this page in templ, here's what you do:\nA simple URL builder to construct a `templ.SafeURL`..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/experimental/urlbuilder", "title": "URL Builder Documentation", "description": "A simple URL builder to construct a templ.SafeURL.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:14:41", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:description": "A simple URL builder to construct a templ.SafeURL.", "ogUrl": "https://templ.guide/experimental/urlbuilder/", "docsearch:language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "urlbuilder | templ docs", "ogTitle": "urlbuilder | templ docs", "og:locale": "en", "og:url": "https://templ.guide/experimental/urlbuilder/", "description": "A simple URL builder to construct a templ.SafeURL.", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "title": "urlbuilder | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "A simple URL builder to construct a templ.SafeURL.", "scrapeId": "2d807cc1-789a-4772-91b8-bf60852adccf", "sourceURL": "https://templ.guide/experimental/urlbuilder", "url": "https://templ.guide/experimental/urlbuilder/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I code example in templ?\n\nAssistant: To code example in templ, here's what you do:\n```go\nimport (\n  \"github.com/templ-go/x/urlbuilder\"\n  \"strconv\"\n  \"strings\"\n)\n\ntempl component(o Order) {\n  <a\n    href={ urlbuilder.New(\"https\", \"example.com\").\n    Path(\"orders\").\n    Path(o.ID).\n    Path(\"line-items\").\n    Query(\"page\", strconv.Itoa(1)).\n    Query(\"limit\", strconv.Itoa(10)).\n    Build() }\n  >\n    { strings.ToUpper(o.Name) }\n  </a>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/experimental/urlbuilder", "title": "URL Builder Documentation", "description": "A simple URL builder to construct a templ.SafeURL.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:14:41", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:description": "A simple URL builder to construct a templ.SafeURL.", "ogUrl": "https://templ.guide/experimental/urlbuilder/", "docsearch:language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "urlbuilder | templ docs", "ogTitle": "urlbuilder | templ docs", "og:locale": "en", "og:url": "https://templ.guide/experimental/urlbuilder/", "description": "A simple URL builder to construct a templ.SafeURL.", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "title": "urlbuilder | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "A simple URL builder to construct a templ.SafeURL.", "scrapeId": "2d807cc1-789a-4772-91b8-bf60852adccf", "sourceURL": "https://templ.guide/experimental/urlbuilder", "url": "https://templ.guide/experimental/urlbuilder/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for URL Builder Documentation in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**URL Builder Code Example**:\n\n```yaml\nimport (\n  \"github.com/templ-go/x/urlbuilder\"\n  \"strconv\"\n  \"strings\"\n)\n\ntempl component(o Order) {\n  <a\n    href={ urlbuilder.New(\"https\", \"example.com\").\n    Path(\"orders\").\n    Path(o.ID).\n    Path(\"line-items\").\n    Query(\"page\", strconv.Itoa(1)).\n    Query(\"limit\", strconv.Itoa(10)).\n    Build() }\n  >\n    { strings.ToUpper(o.Name) }\n  </a>\n}\n```\n\nThis snippet shows you how to url builder code example, which is an important aspect of url builder documentation.\n\n", "metadata": {"source_url": "https://templ.guide/experimental/urlbuilder", "title": "URL Builder Documentation", "description": "A simple URL builder to construct a templ.SafeURL.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:14:41", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:description": "A simple URL builder to construct a templ.SafeURL.", "ogUrl": "https://templ.guide/experimental/urlbuilder/", "docsearch:language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "urlbuilder | templ docs", "ogTitle": "urlbuilder | templ docs", "og:locale": "en", "og:url": "https://templ.guide/experimental/urlbuilder/", "description": "A simple URL builder to construct a templ.SafeURL.", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "title": "urlbuilder | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "A simple URL builder to construct a templ.SafeURL.", "scrapeId": "2d807cc1-789a-4772-91b8-bf60852adccf", "sourceURL": "https://templ.guide/experimental/urlbuilder", "url": "https://templ.guide/experimental/urlbuilder/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using URL Builder Documentation in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSee URL Attributes for more information.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/experimental/urlbuilder", "title": "URL Builder Documentation", "description": "A simple URL builder to construct a templ.SafeURL.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:14:41", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:description": "A simple URL builder to construct a templ.SafeURL.", "ogUrl": "https://templ.guide/experimental/urlbuilder/", "docsearch:language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "urlbuilder | templ docs", "ogTitle": "urlbuilder | templ docs", "og:locale": "en", "og:url": "https://templ.guide/experimental/urlbuilder/", "description": "A simple URL builder to construct a templ.SafeURL.", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "twitter:card": "summary_large_image", "title": "urlbuilder | templ docs", "docusaurus_version": "current", "docsearch:version": "current", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "A simple URL builder to construct a templ.SafeURL.", "scrapeId": "2d807cc1-789a-4772-91b8-bf60852adccf", "sourceURL": "https://templ.guide/experimental/urlbuilder", "url": "https://templ.guide/experimental/urlbuilder/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what How can I migrate from templ version 0.1.x to templ 0.2.x syntax? is in templ?\n\nAssistant: Sure, I'd be happy to explain How can I migrate from templ version 0.1.x to templ 0.2.x syntax? in templ.\n\n# How can I migrate from templ version 0.1.x to templ 0.2.x syntax?\n\nVersions of templ <= v0.2.663 include a `templ migrate` command that can migrate v1 syntax to v2.Here's a quick rundown of what this is about:\n\n## Migration Overview\n\nThe v1 syntax used some extra characters for variable injection, e.g. `{%= name %}` whereas the latest (v2) syntax uses a single pair of braces within HTML, e.g. `{ name }`.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/faq", "title": "How can I migrate from templ version 0.1.x to templ 0.2.x syntax?", "description": "Versions of templ <= v0.2.663 include a `templ migrate` command that can migrate v1 syntax to v2.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:14:50", "type": "overview", "page_metadata": {"language": "en", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "description": "How can I migrate from templ version 0.1.x to templ 0.2.x syntax?", "og:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "og:url": "https://templ.guide/faq/", "docusaurus_locale": "en", "title": "FAQ | templ docs", "ogLocale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogDescription": "How can I migrate from templ version 0.1.x to templ 0.2.x syntax?", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "How can I migrate from templ version 0.1.x to templ 0.2.x syntax?", "ogTitle": "FAQ | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "FAQ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/faq/", "scrapeId": "7aceb840-3db4-4728-981c-2e7380fe1b27", "sourceURL": "https://templ.guide/faq", "url": "https://templ.guide/faq/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I migration overview in templ?\n\nAssistant: To migration overview in templ, here's what you do:\nThe v1 syntax used some extra characters for variable injection, e.g. `{%= name %}` whereas the latest (v2) syntax uses a single pair of braces within HTML, e.g. `{ name }`..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/faq", "title": "How can I migrate from templ version 0.1.x to templ 0.2.x syntax?", "description": "Versions of templ <= v0.2.663 include a `templ migrate` command that can migrate v1 syntax to v2.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:14:50", "type": "section_detail", "page_metadata": {"language": "en", "docsearch:language": "en", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "description": "How can I migrate from templ version 0.1.x to templ 0.2.x syntax?", "og:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "og:url": "https://templ.guide/faq/", "docusaurus_locale": "en", "title": "FAQ | templ docs", "ogLocale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "ogDescription": "How can I migrate from templ version 0.1.x to templ 0.2.x syntax?", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "How can I migrate from templ version 0.1.x to templ 0.2.x syntax?", "ogTitle": "FAQ | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "FAQ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/faq/", "scrapeId": "7aceb840-3db4-4728-981c-2e7380fe1b27", "sourceURL": "https://templ.guide/faq", "url": "https://templ.guide/faq/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Help and Community is in templ?\n\nAssistant: Sure, I'd be happy to explain Help and Community in templ.\n\n# Help and Community\n\nFor help from the community, talking about new ideas, and general discussion.Here's a quick rundown of what this is about:\n\n## Slack\n\nUse the #templ channel in the Gopher Slack community.\n\n[https://invite.slack.golangbridge.org/](https://invite.slack.golangbridge.org/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/help-and-community", "title": "Help and Community", "description": "For help from the community, talking about new ideas, and general discussion.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:16:06", "type": "overview", "page_metadata": {"og:title": "Getting help | templ docs", "og:description": "For help from the community, talking about new ideas, and general discussion:", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/help-and-community/", "og:locale": "en", "language": "en", "ogDescription": "For help from the community, talking about new ideas, and general discussion:", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/help-and-community/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogTitle": "Getting help | templ docs", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "title": "Getting help | templ docs", "description": "For help from the community, talking about new ideas, and general discussion:", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "scrapeId": "141803c4-5564-4790-be78-fcbef33623e2", "sourceURL": "https://templ.guide/help-and-community", "url": "https://templ.guide/help-and-community/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I slack in templ?\n\nAssistant: To slack in templ, here's what you do:\nUse the #templ channel in the Gopher Slack community.\n\n[https://invite.slack.golangbridge.org/](https://invite.slack.golangbridge.org/).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/help-and-community", "title": "Help and Community", "description": "For help from the community, talking about new ideas, and general discussion.", "has_code_examples": false, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:16:06", "type": "section_detail", "page_metadata": {"og:title": "Getting help | templ docs", "og:description": "For help from the community, talking about new ideas, and general discussion:", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/help-and-community/", "og:locale": "en", "language": "en", "ogDescription": "For help from the community, talking about new ideas, and general discussion:", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/help-and-community/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogTitle": "Getting help | templ docs", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "title": "Getting help | templ docs", "description": "For help from the community, talking about new ideas, and general discussion:", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "scrapeId": "141803c4-5564-4790-be78-fcbef33623e2", "sourceURL": "https://templ.guide/help-and-community", "url": "https://templ.guide/help-and-community/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Hosting on AWS Lambda is in templ?\n\nAssistant: Sure, I'd be happy to explain Hosting on AWS Lambda in templ.\n\n# Hosting on AWS Lambda\n\nAWS Lambda is a great way to host templ applications.Here's a quick rundown of what this is about:\n\n## Entrypoint\n\nLambda functions require an entrypoint that receives Lambda requests, and returns Lambda responses.\n\nThe [https://github.com/akrylysov/algnhsa](https://github.com/akrylysov/algnhsa) package provides an adaptor that allows the standard Go HTTP interface to be used.\n\n## Building and deploying\n\nCDK provides the `github.com/aws/aws-cdk-go/awscdklambdagoalpha/v2` package (aliased in this code as `awslambdago`) construct.\n\nAll that's required is to pass the path to the directory containing your Lambda function's `main.go` file and CDK will compile the code and deploy it.\n\n## Static content\n\nTo serve static content such as images alongside Lambda functions that serve HTML or REST API responses, a common pattern is to use a CloudFront distribution that routes traffic to S3 or to the Lambda Function URL, based on the URL structure.\n\n## Deployed example\n\nTo see the deployed sample application running on AWS Lambda, visit [https://d3qfg6xxljj3ky.cloudfront.net](https://d3qfg6xxljj3ky.cloudfront.net/)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "title": "Hosting on AWS Lambda", "description": "AWS Lambda is a great way to host templ applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:16:29", "type": "overview", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "language": "en", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogDescription": "AWS Lambda is a great way to host templ applications.", "docusaurus_tag": "docs-default-current", "og:title": "Hosting on AWS Lambda | templ docs", "ogTitle": "Hosting on AWS Lambda | templ docs", "og:description": "AWS Lambda is a great way to host templ applications.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "description": "AWS Lambda is a great way to host templ applications.", "og:locale": "en", "title": "Hosting on AWS Lambda | templ docs", "scrapeId": "2efb0543-2e0b-45e9-a797-223e30693ee0", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I entrypoint in templ?\n\nAssistant: To entrypoint in templ, here's what you do:\nLambda functions require an entrypoint that receives Lambda requests, and returns Lambda responses.\n\nThe [https://github.com/akrylysov/algnhsa](https://github.com/akrylysov/algnhsa) package provides an adaptor that allows the standard Go HTTP interface to be used..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "title": "Hosting on AWS Lambda", "description": "AWS Lambda is a great way to host templ applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:16:29", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "language": "en", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogDescription": "AWS Lambda is a great way to host templ applications.", "docusaurus_tag": "docs-default-current", "og:title": "Hosting on AWS Lambda | templ docs", "ogTitle": "Hosting on AWS Lambda | templ docs", "og:description": "AWS Lambda is a great way to host templ applications.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "description": "AWS Lambda is a great way to host templ applications.", "og:locale": "en", "title": "Hosting on AWS Lambda | templ docs", "scrapeId": "2efb0543-2e0b-45e9-a797-223e30693ee0", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I building and deploying in templ?\n\nAssistant: To building and deploying in templ, here's what you do:\nCDK provides the `github.com/aws/aws-cdk-go/awscdklambdagoalpha/v2` package (aliased in this code as `awslambdago`) construct.\n\nAll that's required is to pass the path to the directory containing your Lambda function's `main.go` file and CDK will compile the code and deploy it..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "title": "Hosting on AWS Lambda", "description": "AWS Lambda is a great way to host templ applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:16:29", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "language": "en", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogDescription": "AWS Lambda is a great way to host templ applications.", "docusaurus_tag": "docs-default-current", "og:title": "Hosting on AWS Lambda | templ docs", "ogTitle": "Hosting on AWS Lambda | templ docs", "og:description": "AWS Lambda is a great way to host templ applications.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "description": "AWS Lambda is a great way to host templ applications.", "og:locale": "en", "title": "Hosting on AWS Lambda | templ docs", "scrapeId": "2efb0543-2e0b-45e9-a797-223e30693ee0", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I static content in templ?\n\nAssistant: To static content in templ, here's what you do:\nTo serve static content such as images alongside Lambda functions that serve HTML or REST API responses, a common pattern is to use a CloudFront distribution that routes traffic to S3 or to the Lambda Function URL, based on the URL structure..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "title": "Hosting on AWS Lambda", "description": "AWS Lambda is a great way to host templ applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:16:29", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "language": "en", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogDescription": "AWS Lambda is a great way to host templ applications.", "docusaurus_tag": "docs-default-current", "og:title": "Hosting on AWS Lambda | templ docs", "ogTitle": "Hosting on AWS Lambda | templ docs", "og:description": "AWS Lambda is a great way to host templ applications.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "description": "AWS Lambda is a great way to host templ applications.", "og:locale": "en", "title": "Hosting on AWS Lambda | templ docs", "scrapeId": "2efb0543-2e0b-45e9-a797-223e30693ee0", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I deployed example in templ?\n\nAssistant: To deployed example in templ, here's what you do:\nTo see the deployed sample application running on AWS Lambda, visit [https://d3qfg6xxljj3ky.cloudfront.net](https://d3qfg6xxljj3ky.cloudfront.net/).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "title": "Hosting on AWS Lambda", "description": "AWS Lambda is a great way to host templ applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:16:29", "type": "section_detail", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "language": "en", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogDescription": "AWS Lambda is a great way to host templ applications.", "docusaurus_tag": "docs-default-current", "og:title": "Hosting on AWS Lambda | templ docs", "ogTitle": "Hosting on AWS Lambda | templ docs", "og:description": "AWS Lambda is a great way to host templ applications.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "description": "AWS Lambda is a great way to host templ applications.", "og:locale": "en", "title": "Hosting on AWS Lambda | templ docs", "scrapeId": "2efb0543-2e0b-45e9-a797-223e30693ee0", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Hosting on AWS Lambda in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Entrypoint Code Example**:\n\n```yaml\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/a-h/templ/examples/counter/db\"\n\t\"github.com/a-h/templ/examples/counter/handlers\"\n\t\"github.com/a-h/templ/examples/counter/services\"\n\t\"github.com/a-h/templ/examples/counter/session\"\n\t\"github.com/akrylysov/algnhsa\"\n\t\"golang.org/x/exp/slog\"\n)\n\nfunc main() {\n\t// Create handlers.\n\tlog := slog.New(slog.NewJSONHandler(os.Stderr))\n\ts, err := db.NewCountStore(os.Getenv(\"TABLE_NAME\"), os.Getenv(\"AWS_REGION\"))\n\tif err != nil {\n\t\tlog.Error(\"failed to create store\", slog.Any(\"error\", err))\n\t\tos.Exit(1)\n\t}\n\tcs := services.NewCount(log, s)\n\th := handlers.New(log, cs)\n\n\t// Add session middleware.\n\tsh := session.NewMiddleware(h)\n\n\t// Start Lambda.\n\talgnhsa.ListenAndServe(sh, nil)\n}\n```\n\nThis snippet shows you how to entrypoint code example, which is an important aspect of hosting on aws lambda.\n\n", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "title": "Hosting on AWS Lambda", "description": "AWS Lambda is a great way to host templ applications.", "has_code_examples": true, "has_best_practices": false, "section_count": 4, "timestamp": "2025-03-01 03:16:29", "type": "code_examples", "page_metadata": {"docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "language": "en", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogDescription": "AWS Lambda is a great way to host templ applications.", "docusaurus_tag": "docs-default-current", "og:title": "Hosting on AWS Lambda | templ docs", "ogTitle": "Hosting on AWS Lambda | templ docs", "og:description": "AWS Lambda is a great way to host templ applications.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "description": "AWS Lambda is a great way to host templ applications.", "og:locale": "en", "title": "Hosting on AWS Lambda | templ docs", "scrapeId": "2efb0543-2e0b-45e9-a797-223e30693ee0", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda", "url": "https://templ.guide/hosting-and-deployment/hosting-on-aws-lambda/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Hosting Using Docker is in templ?\n\nAssistant: Sure, I'd be happy to explain Hosting Using Docker in templ.\n\n# Hosting Using Docker\n\nApplications that use templ can be deployed using the same techniques and platforms as any other Go application.Here's a quick rundown of what this is about:\n\n## Static content\n\nWeb applications often need to include static content such as CSS, images, and icon files.\n\nThe example has an `assets` directory for this purpose.\n\nThe `COPY` instruction in the Dockerfile copies all of the code and the `assets` directory to the container so that it can be served by the application.\n\n## Serving static content\n\nOnce the `/assets` directory has been added to the deployment Docker container, the `http.FileServer` function must be used to serve the content.\n\n## Building and running the Docker container locally\n\nBefore you deploy your application to a hosting provider, you can build and run it locally.\n\nFirst, you'll need to build the Docker container image.\n\n## Example deployment\n\nThe example is deployed at https://counter-basic.fly.dev/ \n\nThis sample application stores the counts in RAM. If the server restarts, all of the information is lost. To avoid this, use a data store such as DynamoDB or Cloud Firestore.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "title": "Hosting Using Docker", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:06", "type": "overview", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogDescription": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "docusaurus_tag": "docs-default-current", "og:title": "Hosting using Docker | templ docs", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "docusaurus_locale": "en", "ogTitle": "Hosting using Docker | templ docs", "title": "Hosting using Docker | templ docs", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "og:description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "scrapeId": "b2c4f5f2-07b5-4cd3-a161-b805ed7919da", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I static content in templ?\n\nAssistant: To static content in templ, here's what you do:\nWeb applications often need to include static content such as CSS, images, and icon files.\n\nThe example has an `assets` directory for this purpose.\n\nThe `COPY` instruction in the Dockerfile copies all of the code and the `assets` directory to the container so that it can be served by the application..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "title": "Hosting Using Docker", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:06", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogDescription": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "docusaurus_tag": "docs-default-current", "og:title": "Hosting using Docker | templ docs", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "docusaurus_locale": "en", "ogTitle": "Hosting using Docker | templ docs", "title": "Hosting using Docker | templ docs", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "og:description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "scrapeId": "b2c4f5f2-07b5-4cd3-a161-b805ed7919da", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I serving static content in templ?\n\nAssistant: To serving static content in templ, here's what you do:\nOnce the `/assets` directory has been added to the deployment Docker container, the `http.FileServer` function must be used to serve the content..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "title": "Hosting Using Docker", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:06", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogDescription": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "docusaurus_tag": "docs-default-current", "og:title": "Hosting using Docker | templ docs", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "docusaurus_locale": "en", "ogTitle": "Hosting using Docker | templ docs", "title": "Hosting using Docker | templ docs", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "og:description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "scrapeId": "b2c4f5f2-07b5-4cd3-a161-b805ed7919da", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I building and running the docker container locally in templ?\n\nAssistant: To building and running the docker container locally in templ, here's what you do:\nBefore you deploy your application to a hosting provider, you can build and run it locally.\n\nFirst, you'll need to build the Docker container image..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "title": "Hosting Using Docker", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:06", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogDescription": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "docusaurus_tag": "docs-default-current", "og:title": "Hosting using Docker | templ docs", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "docusaurus_locale": "en", "ogTitle": "Hosting using Docker | templ docs", "title": "Hosting using Docker | templ docs", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "og:description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "scrapeId": "b2c4f5f2-07b5-4cd3-a161-b805ed7919da", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I example deployment in templ?\n\nAssistant: To example deployment in templ, here's what you do:\nThe example is deployed at https://counter-basic.fly.dev/ \n\nThis sample application stores the counts in RAM. If the server restarts, all of the information is lost. To avoid this, use a data store such as DynamoDB or Cloud Firestore..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "title": "Hosting Using Docker", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:06", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogDescription": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "docusaurus_tag": "docs-default-current", "og:title": "Hosting using Docker | templ docs", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "docusaurus_locale": "en", "ogTitle": "Hosting using Docker | templ docs", "title": "Hosting using Docker | templ docs", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "og:description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "scrapeId": "b2c4f5f2-07b5-4cd3-a161-b805ed7919da", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Hosting Using Docker in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Dockerfile**:\n\n```yaml\n# Build.\nFROM golang:1.20 AS build-stage\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . /app\nRUN CGO_ENABLED=0 GOOS=linux go build -o /entrypoint\n\n# Deploy.\nFROM gcr.io/distroless/static-debian11 AS release-stage\nWORKDIR /\nCOPY --from=build-stage /entrypoint /entrypoint\nCOPY --from=build-stage /app/assets /assets\nEXPOSE 8080\nUSER nonroot:nonroot\nENTRYPOINT [\"/entrypoint\"]\n\n```\n\nThis snippet shows you how to dockerfile, which is an important aspect of hosting using docker.\n\n**main.go**:\n\n```yaml\nfunc main() {\n\t// Initialize the session.\n\tsessionManager = scs.New()\n\tsessionManager.Lifetime = 24 * time.Hour\n\n\tmux := http.NewServeMux()\n\n\t// Handle POST and GET requests.\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// Include the static content.\n\tmux.Handle(\"/assets/\", http.StripPrefix(\"/assets/\", http.FileServer(http.Dir(\"assets\"))))\n\n\t// Add the middleware.\n\tmuxWithSessionMiddleware := sessionManager.LoadAndSave(mux)\n\n\t// Start the server.\n\tfmt.Println(\"listening on :8080\")\n\tif err := http.ListenAndServe(\":8080\", muxWithSessionMiddleware); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\nThis snippet shows you how to main.go, which is an important aspect of hosting using docker.\n\n**Build Docker container**:\n\n```yaml\ndocker build -t counter-basic:latest .\n\n```\n\nThis snippet shows you how to build docker container, which is an important aspect of hosting using docker.\n\n**Run Docker container**:\n\n```yaml\ndocker run -p 8080:8080 counter-basic:latest\n```\n\nThis snippet shows you how to run docker container, which is an important aspect of hosting using docker.\n\n", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "title": "Hosting Using Docker", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:06", "type": "code_examples", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogDescription": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "docusaurus_tag": "docs-default-current", "og:title": "Hosting using Docker | templ docs", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "docusaurus_locale": "en", "ogTitle": "Hosting using Docker | templ docs", "title": "Hosting using Docker | templ docs", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "og:description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "scrapeId": "b2c4f5f2-07b5-4cd3-a161-b805ed7919da", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Hosting Using Docker in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThis sample application stores the counts in RAM. If the server restarts, all of the information is lost. To avoid this, use a data store such as DynamoDB or Cloud Firestore.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "title": "Hosting Using Docker", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:17:06", "type": "best_practices", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogDescription": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "docusaurus_tag": "docs-default-current", "og:title": "Hosting using Docker | templ docs", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "docusaurus_locale": "en", "ogTitle": "Hosting using Docker | templ docs", "title": "Hosting using Docker | templ docs", "description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "og:locale": "en", "og:description": "Applications that use templ can be deployed using the same techniques and platforms as any other Go application.", "favicon": "https://templ.guide/img/favicon.ico", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "scrapeId": "b2c4f5f2-07b5-4cd3-a161-b805ed7919da", "sourceURL": "https://templ.guide/hosting-and-deployment/hosting-using-docker", "url": "https://templ.guide/hosting-and-deployment/hosting-using-docker/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Internationalization with Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Internationalization with Templ in templ.\n\n# Internationalization with Templ\n\ntempl can be used with 3rd party internationalization libraries.Here's a quick rundown of what this is about:\n\n## ctxi18n\n\n[https://github.com/invopop/ctxi18n](https://github.com/invopop/ctxi18n) uses the context package to load strings based on the selected locale.\n\nAn example is available at [https://github.com/a-h/templ/tree/main/examples/internationalization](https://github.com/a-h/templ/tree/main/examples/internationalization)\n\n## Storing translations\n\nTranslations are stored in YAML files, according to the language.\n\nlocales/en/en.yaml\n\n```codeBlockLines_e6Vv\nen:\n  hello: \"Hello\"\n  select_language: \"Select Language\"\n\n```\n\n## Selecting the language\n\nHTTP middleware selects the language to load based on the URL path, `/en`, `/de`, etc.\n\nmain.go\n\n```codeBlockLines_e6Vv\nfunc newLanguageMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tlang := \"en\" // Default language\n\t\tpathSegments := strings.Split(r.URL.Path, \"/\")\n\t\tif len(pathSegments) > 1 {\n\t\t\tlang = pathSegments[1]\n\t\t}\n\t\tctx, err := ctxi18n.WithLocale(r.Context(), lang)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error setting locale: %v\", err)\n\t\t\thttp.Error(w, \"error setting locale\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t})\n}\n\n```\n\n## Using the middleware\n\nThe `ctxi18n.Load` function is used to load the translations, and the middleware is used to set the language.\n\nmain.go\n\n```codeBlockLines_e6Vv\nfunc main() {\n\tif err := ctxi18n.Load(locales.Content); err != nil {\n\t\tlog.Fatalf(\"error loading locales: %v\", err)\n\t}\n\n\tmux := http.NewServeMux()\n\tmux.Handle(\"/\", templ.Handler(page()))\n\n\twithLanguageMiddleware := newLanguageMiddleware(mux)\n\n\tlog.Println(\"listening on :8080\")\n\tif err := http.ListenAndServe(\"127.0.0.1:8080\", withLanguageMiddleware); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n\n```\n\n## Fetching translations in templates\n\nTranslations are fetched using the `i18n.T` function, passing the implicit context that's available in all templ components, and the key for the translation.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"github.com/invopop/ctxi18n/i18n\"\n)\n\ntempl page() {\n\t<html>\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\"/>\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n\t\t\t<title>{ i18n.T(ctx, \"hello\") }</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>{ i18n.T(ctx, \"hello\") }</h1>\n\t\t\t<h2>{ i18n.T(ctx, \"select_language\") }</h2>\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"/en\">English</a></li>\n\t\t\t\t<li><a href=\"/de\">Deutsch</a></li>\n\t\t\t\t<li><a href=\"/zh-cn\">中文</a></li>\n\t\t\t</ul>\n\t\t</body>\n\t</html>\n}\n\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/integrations/internationalization", "title": "Internationalization with Templ", "description": "templ can be used with 3rd party internationalization libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:30", "type": "overview", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Internationalization | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/integrations/internationalization/", "docsearch:version": "current", "docusaurus_locale": "en", "og:title": "Internationalization | templ docs", "og:description": "templ can be used with 3rd party internationalization libraries.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "ogLocale": "en", "language": "en", "twitter:card": "summary_large_image", "title": "Internationalization | templ docs", "og:url": "https://templ.guide/integrations/internationalization/", "og:locale": "en", "ogDescription": "templ can be used with 3rd party internationalization libraries.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ can be used with 3rd party internationalization libraries.", "scrapeId": "8af5964d-fda3-4ba2-99b5-a6687cf6966c", "sourceURL": "https://templ.guide/integrations/internationalization", "url": "https://templ.guide/integrations/internationalization/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I ctxi18n in templ?\n\nAssistant: To ctxi18n in templ, here's what you do:\n[https://github.com/invopop/ctxi18n](https://github.com/invopop/ctxi18n) uses the context package to load strings based on the selected locale.\n\nAn example is available at [https://github.com/a-h/templ/tree/main/examples/internationalization](https://github.com/a-h/templ/tree/main/examples/internationalization).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/internationalization", "title": "Internationalization with Templ", "description": "templ can be used with 3rd party internationalization libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:30", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Internationalization | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/integrations/internationalization/", "docsearch:version": "current", "docusaurus_locale": "en", "og:title": "Internationalization | templ docs", "og:description": "templ can be used with 3rd party internationalization libraries.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "ogLocale": "en", "language": "en", "twitter:card": "summary_large_image", "title": "Internationalization | templ docs", "og:url": "https://templ.guide/integrations/internationalization/", "og:locale": "en", "ogDescription": "templ can be used with 3rd party internationalization libraries.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ can be used with 3rd party internationalization libraries.", "scrapeId": "8af5964d-fda3-4ba2-99b5-a6687cf6966c", "sourceURL": "https://templ.guide/integrations/internationalization", "url": "https://templ.guide/integrations/internationalization/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I storing translations in templ?\n\nAssistant: To storing translations in templ, here's what you do:\nTranslations are stored in YAML files, according to the language.\n\nlocales/en/en.yaml\n\n```codeBlockLines_e6Vv\nen:\n  hello: \"Hello\"\n  select_language: \"Select Language\"\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/internationalization", "title": "Internationalization with Templ", "description": "templ can be used with 3rd party internationalization libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:30", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Internationalization | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/integrations/internationalization/", "docsearch:version": "current", "docusaurus_locale": "en", "og:title": "Internationalization | templ docs", "og:description": "templ can be used with 3rd party internationalization libraries.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "ogLocale": "en", "language": "en", "twitter:card": "summary_large_image", "title": "Internationalization | templ docs", "og:url": "https://templ.guide/integrations/internationalization/", "og:locale": "en", "ogDescription": "templ can be used with 3rd party internationalization libraries.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ can be used with 3rd party internationalization libraries.", "scrapeId": "8af5964d-fda3-4ba2-99b5-a6687cf6966c", "sourceURL": "https://templ.guide/integrations/internationalization", "url": "https://templ.guide/integrations/internationalization/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I selecting the language in templ?\n\nAssistant: To selecting the language in templ, here's what you do:\nHTTP middleware selects the language to load based on the URL path, `/en`, `/de`, etc.\n\nmain.go\n\n```codeBlockLines_e6Vv\nfunc newLanguageMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tlang := \"en\" // Default language\n\t\tpathSegments := strings.Split(r.URL.Path, \"/\")\n\t\tif len(pathSegments) > 1 {\n\t\t\tlang = pathSegments[1]\n\t\t}\n\t\tctx, err := ctxi18n.WithLocale(r.Context(), lang)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error setting locale: %v\", err)\n\t\t\thttp.Error(w, \"error setting locale\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t})\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/internationalization", "title": "Internationalization with Templ", "description": "templ can be used with 3rd party internationalization libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:30", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Internationalization | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/integrations/internationalization/", "docsearch:version": "current", "docusaurus_locale": "en", "og:title": "Internationalization | templ docs", "og:description": "templ can be used with 3rd party internationalization libraries.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "ogLocale": "en", "language": "en", "twitter:card": "summary_large_image", "title": "Internationalization | templ docs", "og:url": "https://templ.guide/integrations/internationalization/", "og:locale": "en", "ogDescription": "templ can be used with 3rd party internationalization libraries.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ can be used with 3rd party internationalization libraries.", "scrapeId": "8af5964d-fda3-4ba2-99b5-a6687cf6966c", "sourceURL": "https://templ.guide/integrations/internationalization", "url": "https://templ.guide/integrations/internationalization/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using the middleware in templ?\n\nAssistant: To using the middleware in templ, here's what you do:\nThe `ctxi18n.Load` function is used to load the translations, and the middleware is used to set the language.\n\nmain.go\n\n```codeBlockLines_e6Vv\nfunc main() {\n\tif err := ctxi18n.Load(locales.Content); err != nil {\n\t\tlog.Fatalf(\"error loading locales: %v\", err)\n\t}\n\n\tmux := http.NewServeMux()\n\tmux.Handle(\"/\", templ.Handler(page()))\n\n\twithLanguageMiddleware := newLanguageMiddleware(mux)\n\n\tlog.Println(\"listening on :8080\")\n\tif err := http.ListenAndServe(\"127.0.0.1:8080\", withLanguageMiddleware); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/internationalization", "title": "Internationalization with Templ", "description": "templ can be used with 3rd party internationalization libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:30", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Internationalization | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/integrations/internationalization/", "docsearch:version": "current", "docusaurus_locale": "en", "og:title": "Internationalization | templ docs", "og:description": "templ can be used with 3rd party internationalization libraries.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "ogLocale": "en", "language": "en", "twitter:card": "summary_large_image", "title": "Internationalization | templ docs", "og:url": "https://templ.guide/integrations/internationalization/", "og:locale": "en", "ogDescription": "templ can be used with 3rd party internationalization libraries.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ can be used with 3rd party internationalization libraries.", "scrapeId": "8af5964d-fda3-4ba2-99b5-a6687cf6966c", "sourceURL": "https://templ.guide/integrations/internationalization", "url": "https://templ.guide/integrations/internationalization/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I fetching translations in templates in templ?\n\nAssistant: To fetching translations in templates in templ, here's what you do:\nTranslations are fetched using the `i18n.T` function, passing the implicit context that's available in all templ components, and the key for the translation.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"github.com/invopop/ctxi18n/i18n\"\n)\n\ntempl page() {\n\t<html>\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\"/>\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n\t\t\t<title>{ i18n.T(ctx, \"hello\") }</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>{ i18n.T(ctx, \"hello\") }</h1>\n\t\t\t<h2>{ i18n.T(ctx, \"select_language\") }</h2>\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"/en\">English</a></li>\n\t\t\t\t<li><a href=\"/de\">Deutsch</a></li>\n\t\t\t\t<li><a href=\"/zh-cn\">中文</a></li>\n\t\t\t</ul>\n\t\t</body>\n\t</html>\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/internationalization", "title": "Internationalization with Templ", "description": "templ can be used with 3rd party internationalization libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:30", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Internationalization | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/integrations/internationalization/", "docsearch:version": "current", "docusaurus_locale": "en", "og:title": "Internationalization | templ docs", "og:description": "templ can be used with 3rd party internationalization libraries.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "ogLocale": "en", "language": "en", "twitter:card": "summary_large_image", "title": "Internationalization | templ docs", "og:url": "https://templ.guide/integrations/internationalization/", "og:locale": "en", "ogDescription": "templ can be used with 3rd party internationalization libraries.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ can be used with 3rd party internationalization libraries.", "scrapeId": "8af5964d-fda3-4ba2-99b5-a6687cf6966c", "sourceURL": "https://templ.guide/integrations/internationalization", "url": "https://templ.guide/integrations/internationalization/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Internationalization with Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Storing translations in YAML**:\n\n```yaml\nlocales/en/en.yaml\n\nen:\n  hello: \"Hello\"\n  select_language: \"Select Language\"\n```\n\nThis snippet shows you how to storing translations in yaml, which is an important aspect of internationalization with templ.\n\n**Selecting the language middleware**:\n\n```yaml\nfunc newLanguageMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tlang := \"en\" // Default language\n\t\tpathSegments := strings.Split(r.URL.Path, \"/\")\n\t\tif len(pathSegments) > 1 {\n\t\t\tlang = pathSegments[1]\n\t\t}\n\t\tctx, err := ctxi18n.WithLocale(r.Context(), lang)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error setting locale: %v\", err)\n\t\t\thttp.Error(w, \"error setting locale\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t})\n}\n```\n\nThis snippet shows you how to selecting the language middleware, which is an important aspect of internationalization with templ.\n\n", "metadata": {"source_url": "https://templ.guide/integrations/internationalization", "title": "Internationalization with Templ", "description": "templ can be used with 3rd party internationalization libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:30", "type": "code_examples", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Internationalization | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/integrations/internationalization/", "docsearch:version": "current", "docusaurus_locale": "en", "og:title": "Internationalization | templ docs", "og:description": "templ can be used with 3rd party internationalization libraries.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "ogLocale": "en", "language": "en", "twitter:card": "summary_large_image", "title": "Internationalization | templ docs", "og:url": "https://templ.guide/integrations/internationalization/", "og:locale": "en", "ogDescription": "templ can be used with 3rd party internationalization libraries.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ can be used with 3rd party internationalization libraries.", "scrapeId": "8af5964d-fda3-4ba2-99b5-a6687cf6966c", "sourceURL": "https://templ.guide/integrations/internationalization", "url": "https://templ.guide/integrations/internationalization/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Internationalization with Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse YAML files for storing translations according to the language.\n\nSet a default language in the middleware to handle cases where the language is not specified in the URL.\n\nEnsure to handle errors when setting the locale and loading translations.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/integrations/internationalization", "title": "Internationalization with Templ", "description": "templ can be used with 3rd party internationalization libraries.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:17:30", "type": "best_practices", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Internationalization | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/integrations/internationalization/", "docsearch:version": "current", "docusaurus_locale": "en", "og:title": "Internationalization | templ docs", "og:description": "templ can be used with 3rd party internationalization libraries.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "ogLocale": "en", "language": "en", "twitter:card": "summary_large_image", "title": "Internationalization | templ docs", "og:url": "https://templ.guide/integrations/internationalization/", "og:locale": "en", "ogDescription": "templ can be used with 3rd party internationalization libraries.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ can be used with 3rd party internationalization libraries.", "scrapeId": "8af5964d-fda3-4ba2-99b5-a6687cf6966c", "sourceURL": "https://templ.guide/integrations/internationalization", "url": "https://templ.guide/integrations/internationalization/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Integrating Templ with Go Frameworks is in templ?\n\nAssistant: Sure, I'd be happy to explain Integrating Templ with Go Frameworks in templ.\n\n# Integrating Templ with Go Frameworks\n\nTempl is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.Here's a quick rundown of what this is about:\n\n## Chi\n\nSee an example of using [https://github.com/go-chi/chi](https://github.com/go-chi/chi) with templ at:\n\n[https://github.com/a-h/templ/tree/main/examples/integration-chi](https://github.com/a-h/templ/tree/main/examples/integration-chi)\n\n## Echo\n\nSee an example of using [https://echo.labstack.com/](https://echo.labstack.com/) with templ at:\n\n[https://github.com/a-h/templ/tree/main/examples/integration-echo](https://github.com/a-h/templ/tree/main/examples/integration-echo)\n\n## Gin\n\nSee an example of using [https://github.com/gin-gonic/gin](https://github.com/gin-gonic/gin) with templ at:\n\n[https://github.com/a-h/templ/tree/main/examples/integration-gin](https://github.com/a-h/templ/tree/main/examples/integration-gin)\n\n## Go Fiber\n\nSee an example of using [https://github.com/gofiber/fiber](https://github.com/gofiber/fiber) with templ at:\n\n[https://github.com/a-h/templ/tree/main/examples/integration-gofiber](https://github.com/a-h/templ/tree/main/examples/integration-gofiber)\n\n## github.com/gorilla/csrf\n\n`gorilla/csrf` is a HTTP middleware library that provides cross-site request forgery (CSRF) protection.\n\nFollow the instructions at [https://github.com/gorilla/csrf](https://github.com/gorilla/csrf) to add it to your project, by using the library as HTTP middleware.\n\n## Project scaffolding\n\n- Gowebly - [https://github.com/gowebly/gowebly](https://github.com/gowebly/gowebly)\n- Go-blueprint - [https://github.com/Melkeydev/go-blueprint](https://github.com/Melkeydev/go-blueprint)\n- Slick - [https://github.com/anthdm/slick](https://github.com/anthdm/slick)\n\n## Other templates\n\n### `template/html`\n\nSee [Using with Go templates](https://templ.guide/syntax-and-usage/using-with-go-templates)\n\n- [Chi](https://templ.guide/integrations/web-frameworks/#chi)\n- [Echo](https://templ.guide/integrations/web-frameworks/#echo)\n- [Gin](https://templ.guide/integrations/web-frameworks/#gin)\n- [Go Fiber](https://templ.guide/integrations/web-frameworks/#go-fiber)\n- [github.com/gorilla/csrf](https://templ.guide/integrations/web-frameworks/#githubcomgorillacsrf)\n- [Project scaffolding](https://templ.guide/integrations/web-frameworks/#project-scaffolding)\n- [Other templates](https://templ.guide/integrations/web-frameworks/#other-templates)\n  - [`template/html`](https://templ.guide/integrations/web-frameworks/#templatehtml)\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "overview", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I chi in templ?\n\nAssistant: To chi in templ, here's what you do:\nSee an example of using [https://github.com/go-chi/chi](https://github.com/go-chi/chi) with templ at:\n\n[https://github.com/a-h/templ/tree/main/examples/integration-chi](https://github.com/a-h/templ/tree/main/examples/integration-chi).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I echo in templ?\n\nAssistant: To echo in templ, here's what you do:\nSee an example of using [https://echo.labstack.com/](https://echo.labstack.com/) with templ at:\n\n[https://github.com/a-h/templ/tree/main/examples/integration-echo](https://github.com/a-h/templ/tree/main/examples/integration-echo).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I gin in templ?\n\nAssistant: To gin in templ, here's what you do:\nSee an example of using [https://github.com/gin-gonic/gin](https://github.com/gin-gonic/gin) with templ at:\n\n[https://github.com/a-h/templ/tree/main/examples/integration-gin](https://github.com/a-h/templ/tree/main/examples/integration-gin).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I go fiber in templ?\n\nAssistant: To go fiber in templ, here's what you do:\nSee an example of using [https://github.com/gofiber/fiber](https://github.com/gofiber/fiber) with templ at:\n\n[https://github.com/a-h/templ/tree/main/examples/integration-gofiber](https://github.com/a-h/templ/tree/main/examples/integration-gofiber).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I github.com/gorilla/csrf in templ?\n\nAssistant: To github.com/gorilla/csrf in templ, here's what you do:\n`gorilla/csrf` is a HTTP middleware library that provides cross-site request forgery (CSRF) protection.\n\nFollow the instructions at [https://github.com/gorilla/csrf](https://github.com/gorilla/csrf) to add it to your project, by using the library as HTTP middleware..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I project scaffolding in templ?\n\nAssistant: To project scaffolding in templ, here's what you do:\n- Gowebly - [https://github.com/gowebly/gowebly](https://github.com/gowebly/gowebly)\n- Go-blueprint - [https://github.com/Melkeydev/go-blueprint](https://github.com/Melkeydev/go-blueprint)\n- Slick - [https://github.com/anthdm/slick](https://github.com/anthdm/slick).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I other templates in templ?\n\nAssistant: To other templates in templ, here's what you do:\n### `template/html`\n\nSee [Using with Go templates](https://templ.guide/syntax-and-usage/using-with-go-templates)\n\n- [Chi](https://templ.guide/integrations/web-frameworks/#chi)\n- [Echo](https://templ.guide/integrations/web-frameworks/#echo)\n- [Gin](https://templ.guide/integrations/web-frameworks/#gin)\n- [Go Fiber](https://templ.guide/integrations/web-frameworks/#go-fiber)\n- [github.com/gorilla/csrf](https://templ.guide/integrations/web-frameworks/#githubcomgorillacsrf)\n- [Project scaffolding](https://templ.guide/integrations/web-frameworks/#project-scaffolding)\n- [Other templates](https://templ.guide/integrations/web-frameworks/#other-templates)\n  - [`template/html`](https://templ.guide/integrations/web-frameworks/#templatehtml).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Integrating Templ with Go Frameworks in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**CSRF Middleware Example**:\n\n```yaml\npackage main\n\nimport (\n  \"crypto/rand\"\n  \"fmt\"\n  \"net/http\"\n  \"github.com/gorilla/csrf\"\n)\n\nfunc mustGenerateCSRFKey() (key []byte) {\n  key = make([]byte, 32)\n  n, err := rand.Read(key)\n  if err != nil {\n    panic(err)\n  }\n  if n != 32 {\n    panic(\"unable to read 32 bytes for CSRF key\")\n  }\n  return\n}\n\nfunc main() {\n  r := http.NewServeMux()\n  r.Handle(\"/\", templ.Handler(Form()))\n\n  csrfMiddleware := csrf.Protect(mustGenerateCSRFKey())\n  withCSRFProtection := csrfMiddleware(r)\n\n  fmt.Println(\"Listening on localhost:8000\")\n  http.ListenAndServe(\"localhost:8000\", withCSRFProtection)\n}\n```\n\nThis snippet shows you how to csrf middleware example, which is an important aspect of integrating templ with go frameworks.\n\n", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "code_examples", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Integrating Templ with Go Frameworks in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nCreating a `CSRF` templ component makes it easy to include the CSRF token in your forms.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/integrations/web-frameworks", "title": "Integrating Templ with Go Frameworks", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools. Below are some examples of how to use templ with other Go libraries, frameworks and tools, and links to systems that have built-in templ support.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:17:55", "type": "best_practices", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "ogDescription": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "og:description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "title": "Web frameworks | templ docs", "ogTitle": "Web frameworks | templ docs", "ogUrl": "https://templ.guide/integrations/web-frameworks/", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Templ is framework agnostic but that does not mean it can not be used with Go frameworks and other tools.", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "og:title": "Web frameworks | templ docs", "docsearch:language": "en", "docusaurus_version": "current", "og:url": "https://templ.guide/integrations/web-frameworks/", "scrapeId": "0e74e897-e2ca-4937-8de6-1f558fe30b33", "sourceURL": "https://templ.guide/integrations/web-frameworks", "url": "https://templ.guide/integrations/web-frameworks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Go Podcast 2024 is in templ?\n\nAssistant: Sure, I'd be happy to explain Go Podcast 2024 in templ.\n\n# Go Podcast 2024\n\nA collection of resources and videos related to Go programming and templ.Here's a quick rundown of what this is about:\n\n## Go Podcast 2024\n\n[Go Podcast Episode](https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ)\n\n## Gophercon 2024\n\nGo Full Stack Server-Side Rendering vs SPAs - Fernando J. Villamarin Diaz, JPMC. Watch on [YouTube](https://www.youtube.com/watch?v=X30eAwuUgrE).\n\n## Big Sky Dev Con 2024\n\nCovers the reason for creating templ, how it works, and how to use it. Watch on [YouTube](https://www.youtube.com/watch?v=uVKSmR_hBMs).\n\n## Go Time\n\n[Go Time 291: Go templating using Templ](https://changelog.com/gotime/291) – Listen on [Changelog.com](https://changelog.com/) \n\n## Gophercon UK 2023\n\nThis talk covers Language Server Protocol from the ground up, and how templ's language server works with gopls. Watch on [YouTube](https://www.youtube.com/watch?v=EkK8Jxjj95s).\n\n## How To Setup A Golang + Templ Project Structure\n\nThis tutorial shows how to create a simple web app using templ and the echo router. Watch on [YouTube](https://www.youtube.com/watch?v=wttTTFVrQiw).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/media", "title": "Go Podcast 2024", "description": "A collection of resources and videos related to Go programming and templ.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:18:08", "type": "overview", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1"], "docsearch:version": "current", "title": "Media and talks | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/media/", "og:url": "https://templ.guide/media/", "og:locale": "en", "ogDescription": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "ogTitle": "Media and talks | templ docs", "docsearch:language": "en", "description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "og:title": "Media and talks | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "scrapeId": "38f3d0bd-e532-40da-ad64-0786bf14e1bf", "sourceURL": "https://templ.guide/media", "url": "https://templ.guide/media/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I go podcast 2024 in templ?\n\nAssistant: To go podcast 2024 in templ, here's what you do:\n[Go Podcast Episode](https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/media", "title": "Go Podcast 2024", "description": "A collection of resources and videos related to Go programming and templ.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:18:08", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1"], "docsearch:version": "current", "title": "Media and talks | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/media/", "og:url": "https://templ.guide/media/", "og:locale": "en", "ogDescription": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "ogTitle": "Media and talks | templ docs", "docsearch:language": "en", "description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "og:title": "Media and talks | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "scrapeId": "38f3d0bd-e532-40da-ad64-0786bf14e1bf", "sourceURL": "https://templ.guide/media", "url": "https://templ.guide/media/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I gophercon 2024 in templ?\n\nAssistant: To gophercon 2024 in templ, here's what you do:\nGo Full Stack Server-Side Rendering vs SPAs - Fernando J. Villamarin Diaz, JPMC. Watch on [YouTube](https://www.youtube.com/watch?v=X30eAwuUgrE)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/media", "title": "Go Podcast 2024", "description": "A collection of resources and videos related to Go programming and templ.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:18:08", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1"], "docsearch:version": "current", "title": "Media and talks | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/media/", "og:url": "https://templ.guide/media/", "og:locale": "en", "ogDescription": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "ogTitle": "Media and talks | templ docs", "docsearch:language": "en", "description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "og:title": "Media and talks | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "scrapeId": "38f3d0bd-e532-40da-ad64-0786bf14e1bf", "sourceURL": "https://templ.guide/media", "url": "https://templ.guide/media/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I big sky dev con 2024 in templ?\n\nAssistant: To big sky dev con 2024 in templ, here's what you do:\nCovers the reason for creating templ, how it works, and how to use it. Watch on [YouTube](https://www.youtube.com/watch?v=uVKSmR_hBMs)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/media", "title": "Go Podcast 2024", "description": "A collection of resources and videos related to Go programming and templ.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:18:08", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1"], "docsearch:version": "current", "title": "Media and talks | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/media/", "og:url": "https://templ.guide/media/", "og:locale": "en", "ogDescription": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "ogTitle": "Media and talks | templ docs", "docsearch:language": "en", "description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "og:title": "Media and talks | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "scrapeId": "38f3d0bd-e532-40da-ad64-0786bf14e1bf", "sourceURL": "https://templ.guide/media", "url": "https://templ.guide/media/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I go time in templ?\n\nAssistant: To go time in templ, here's what you do:\n[Go Time 291: Go templating using Templ](https://changelog.com/gotime/291) – Listen on [Changelog.com](https://changelog.com/) .\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/media", "title": "Go Podcast 2024", "description": "A collection of resources and videos related to Go programming and templ.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:18:08", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1"], "docsearch:version": "current", "title": "Media and talks | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/media/", "og:url": "https://templ.guide/media/", "og:locale": "en", "ogDescription": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "ogTitle": "Media and talks | templ docs", "docsearch:language": "en", "description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "og:title": "Media and talks | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "scrapeId": "38f3d0bd-e532-40da-ad64-0786bf14e1bf", "sourceURL": "https://templ.guide/media", "url": "https://templ.guide/media/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I gophercon uk 2023 in templ?\n\nAssistant: To gophercon uk 2023 in templ, here's what you do:\nThis talk covers Language Server Protocol from the ground up, and how templ's language server works with gopls. Watch on [YouTube](https://www.youtube.com/watch?v=EkK8Jxjj95s)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/media", "title": "Go Podcast 2024", "description": "A collection of resources and videos related to Go programming and templ.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:18:08", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1"], "docsearch:version": "current", "title": "Media and talks | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/media/", "og:url": "https://templ.guide/media/", "og:locale": "en", "ogDescription": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "ogTitle": "Media and talks | templ docs", "docsearch:language": "en", "description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "og:title": "Media and talks | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "scrapeId": "38f3d0bd-e532-40da-ad64-0786bf14e1bf", "sourceURL": "https://templ.guide/media", "url": "https://templ.guide/media/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I how to setup a golang + templ project structure in templ?\n\nAssistant: To how to setup a golang + templ project structure in templ, here's what you do:\nThis tutorial shows how to create a simple web app using templ and the echo router. Watch on [YouTube](https://www.youtube.com/watch?v=wttTTFVrQiw)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/media", "title": "Go Podcast 2024", "description": "A collection of resources and videos related to Go programming and templ.", "has_code_examples": false, "has_best_practices": false, "section_count": 6, "timestamp": "2025-03-01 03:18:08", "type": "section_detail", "page_metadata": {"viewport": ["width=device-width, initial-scale=1.0", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1", "width=device-width, initial-scale=1"], "docsearch:version": "current", "title": "Media and talks | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/media/", "og:url": "https://templ.guide/media/", "og:locale": "en", "ogDescription": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "ogTitle": "Media and talks | templ docs", "docsearch:language": "en", "description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "docusaurus_version": "current", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "https://gopodcast.dev/episodes/adrian-hesketh-and-joe-davidson-on-templ", "og:title": "Media and talks | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "scrapeId": "38f3d0bd-e532-40da-ad64-0786bf14e1bf", "sourceURL": "https://templ.guide/media", "url": "https://templ.guide/media/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Project Structure is in templ?\n\nAssistant: Sure, I'd be happy to explain Project Structure in templ.\n\n# Project Structure\n\nThe example counter project demonstrates a way to structure your applications.Here's a quick rundown of what this is about:\n\n## Application architecture\n\nThe architecture follows a typical \"onion model\" where each layer doesn't know about the layer above it, and each layer is responsible for a specific thing.\n\nuses\n\nuse\n\nuses\n\nrenders\n\nHTTP handler\n\nServices\n\nDatabase access code\n\nDynamoDB\n\nComponents\n\n- HTTP Handler\n  - Processes HTTP requests\n  - Does not contain application logic itself\n  - Uses `services` that carry out application logic\n  - Takes the responses from `services` and uses `components` to render HTML\n  - Creates HTTP responses\n- Services\n  - Carries out application logic such as orchestrating API calls, or making database calls\n  - Does not do anything related to HTML or HTTP\n  - Is not aware of the specifics of database calls\n- Database access code\n  - Handles database activity such as inserting and querying records\n  - Ensures that the database representation ( `records`) doesn't leak to the service layer\n\nA more complex application may have a `models` package containing plain structs that represent common data structures in the application, such as `User`.\n\ntip\n\nAs with most things, taking the layering approach to an extreme level can have a negative effect. Ask yourself whether what you're doing is really helping to make the code understandable, or is just spreading application logic across lots of files, and making it hard to see the overall structure.\n\n## Dependency injection\n\nLayering an application in this way can simplify code structure, since the responsibility of each type is clear.\n\nTo ensure that each part of the application is initialized with its dependencies, each struct defines a constructor (the `New` function in this example).\n\nAs per [https://go.dev/wiki/CodeReviewComments#interfaces](https://go.dev/wiki/CodeReviewComments#interfaces) the HTTP handler defines the interface that it's expecting, rather than the service defining its own interface.\n\n## HTTP layer\n\nThis HTTP handler reads HTTP requests, uses the `CountService` to `Get` or `Increment` the counters, and renders the templ Components.\n\nnote\n\nNote that the `View` method uses the templ Components from the `components` directory to render the page.\n\n## Service layer\n\nThe service layer coordinates API and database activity to carry out application logic.\n\n## Entrypoint\n\nTo wire all of the dependencies together and start up your web server or serverless function handler, your application will require an entrypoint.\n\nIn this example, the code for configuring the HTTP server and HTTP routes is also in the `main.go` because it's a very simple application. In more complex applications, this might be migrated into another package.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/project-structure/project-structure", "title": "Project Structure", "description": "The example counter project demonstrates a way to structure your applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:18:48", "type": "overview", "page_metadata": {"ogUrl": "https://templ.guide/project-structure/project-structure/", "ogDescription": "The example counter project demonstrates a way to structure your applications.", "og:url": "https://templ.guide/project-structure/project-structure/", "og:locale": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "The example counter project demonstrates a way to structure your applications.", "og:description": "The example counter project demonstrates a way to structure your applications.", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Project structure | templ docs", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "Project structure | templ docs", "docusaurus_locale": "en", "title": "Project structure | templ docs", "scrapeId": "7251e62a-d599-4ffe-8a08-c52a2c43695e", "sourceURL": "https://templ.guide/project-structure/project-structure", "url": "https://templ.guide/project-structure/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I application architecture in templ?\n\nAssistant: To application architecture in templ, here's what you do:\nThe architecture follows a typical \"onion model\" where each layer doesn't know about the layer above it, and each layer is responsible for a specific thing.\n\nuses\n\nuse\n\nuses\n\nrenders\n\nHTTP handler\n\nServices\n\nDatabase access code\n\nDynamoDB\n\nComponents\n\n- HTTP Handler\n  - Processes HTTP requests\n  - Does not contain application logic itself\n  - Uses `services` that carry out application logic\n  - Takes the responses from `services` and uses `components` to render HTML\n  - Creates HTTP responses\n- Services\n  - Carries out application logic such as orchestrating API calls, or making database calls\n  - Does not do anything related to HTML or HTTP\n  - Is not aware of the specifics of database calls\n- Database access code\n  - Handles database activity such as inserting and querying records\n  - Ensures that the database representation ( `records`) doesn't leak to the service layer\n\nA more complex application may have a `models` package containing plain structs that represent common data structures in the application, such as `User`.\n\ntip\n\nAs with most things, taking the layering approach to an extreme level can have a negative effect. Ask yourself whether what you're doing is really helping to make the code understandable, or is just spreading application logic across lots of files, and making it hard to see the overall structure..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/project-structure/project-structure", "title": "Project Structure", "description": "The example counter project demonstrates a way to structure your applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:18:48", "type": "section_detail", "page_metadata": {"ogUrl": "https://templ.guide/project-structure/project-structure/", "ogDescription": "The example counter project demonstrates a way to structure your applications.", "og:url": "https://templ.guide/project-structure/project-structure/", "og:locale": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "The example counter project demonstrates a way to structure your applications.", "og:description": "The example counter project demonstrates a way to structure your applications.", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Project structure | templ docs", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "Project structure | templ docs", "docusaurus_locale": "en", "title": "Project structure | templ docs", "scrapeId": "7251e62a-d599-4ffe-8a08-c52a2c43695e", "sourceURL": "https://templ.guide/project-structure/project-structure", "url": "https://templ.guide/project-structure/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I dependency injection in templ?\n\nAssistant: To dependency injection in templ, here's what you do:\nLayering an application in this way can simplify code structure, since the responsibility of each type is clear.\n\nTo ensure that each part of the application is initialized with its dependencies, each struct defines a constructor (the `New` function in this example).\n\nAs per [https://go.dev/wiki/CodeReviewComments#interfaces](https://go.dev/wiki/CodeReviewComments#interfaces) the HTTP handler defines the interface that it's expecting, rather than the service defining its own interface..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/project-structure/project-structure", "title": "Project Structure", "description": "The example counter project demonstrates a way to structure your applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:18:48", "type": "section_detail", "page_metadata": {"ogUrl": "https://templ.guide/project-structure/project-structure/", "ogDescription": "The example counter project demonstrates a way to structure your applications.", "og:url": "https://templ.guide/project-structure/project-structure/", "og:locale": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "The example counter project demonstrates a way to structure your applications.", "og:description": "The example counter project demonstrates a way to structure your applications.", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Project structure | templ docs", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "Project structure | templ docs", "docusaurus_locale": "en", "title": "Project structure | templ docs", "scrapeId": "7251e62a-d599-4ffe-8a08-c52a2c43695e", "sourceURL": "https://templ.guide/project-structure/project-structure", "url": "https://templ.guide/project-structure/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I http layer in templ?\n\nAssistant: To http layer in templ, here's what you do:\nThis HTTP handler reads HTTP requests, uses the `CountService` to `Get` or `Increment` the counters, and renders the templ Components.\n\nnote\n\nNote that the `View` method uses the templ Components from the `components` directory to render the page..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/project-structure/project-structure", "title": "Project Structure", "description": "The example counter project demonstrates a way to structure your applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:18:48", "type": "section_detail", "page_metadata": {"ogUrl": "https://templ.guide/project-structure/project-structure/", "ogDescription": "The example counter project demonstrates a way to structure your applications.", "og:url": "https://templ.guide/project-structure/project-structure/", "og:locale": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "The example counter project demonstrates a way to structure your applications.", "og:description": "The example counter project demonstrates a way to structure your applications.", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Project structure | templ docs", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "Project structure | templ docs", "docusaurus_locale": "en", "title": "Project structure | templ docs", "scrapeId": "7251e62a-d599-4ffe-8a08-c52a2c43695e", "sourceURL": "https://templ.guide/project-structure/project-structure", "url": "https://templ.guide/project-structure/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I service layer in templ?\n\nAssistant: To service layer in templ, here's what you do:\nThe service layer coordinates API and database activity to carry out application logic..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/project-structure/project-structure", "title": "Project Structure", "description": "The example counter project demonstrates a way to structure your applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:18:48", "type": "section_detail", "page_metadata": {"ogUrl": "https://templ.guide/project-structure/project-structure/", "ogDescription": "The example counter project demonstrates a way to structure your applications.", "og:url": "https://templ.guide/project-structure/project-structure/", "og:locale": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "The example counter project demonstrates a way to structure your applications.", "og:description": "The example counter project demonstrates a way to structure your applications.", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Project structure | templ docs", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "Project structure | templ docs", "docusaurus_locale": "en", "title": "Project structure | templ docs", "scrapeId": "7251e62a-d599-4ffe-8a08-c52a2c43695e", "sourceURL": "https://templ.guide/project-structure/project-structure", "url": "https://templ.guide/project-structure/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I entrypoint in templ?\n\nAssistant: To entrypoint in templ, here's what you do:\nTo wire all of the dependencies together and start up your web server or serverless function handler, your application will require an entrypoint.\n\nIn this example, the code for configuring the HTTP server and HTTP routes is also in the `main.go` because it's a very simple application. In more complex applications, this might be migrated into another package..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/project-structure/project-structure", "title": "Project Structure", "description": "The example counter project demonstrates a way to structure your applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:18:48", "type": "section_detail", "page_metadata": {"ogUrl": "https://templ.guide/project-structure/project-structure/", "ogDescription": "The example counter project demonstrates a way to structure your applications.", "og:url": "https://templ.guide/project-structure/project-structure/", "og:locale": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "The example counter project demonstrates a way to structure your applications.", "og:description": "The example counter project demonstrates a way to structure your applications.", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Project structure | templ docs", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "Project structure | templ docs", "docusaurus_locale": "en", "title": "Project structure | templ docs", "scrapeId": "7251e62a-d599-4ffe-8a08-c52a2c43695e", "sourceURL": "https://templ.guide/project-structure/project-structure", "url": "https://templ.guide/project-structure/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Project Structure in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**CountService Interface**:\n\n```yaml\ntype CountService interface {\n\tIncrement(ctx context.Context, it services.IncrementType, sessionID string) (counts services.Counts, err error)\n\tGet(ctx context.Context, sessionID string) (counts services.Counts, err error)\n}\n\nfunc New(log *slog.Logger, cs CountService) *DefaultHandler {\n\treturn &DefaultHandler{\n\t\tLog:          log,\n\t\tCountService: cs,\n\t}\n}\n\ntype DefaultHandler struct {\n\tLog          *slog.Logger\n\tCountService CountService\n}\n```\n\nThis snippet shows you how to countservice interface, which is an important aspect of project structure.\n\n", "metadata": {"source_url": "https://templ.guide/project-structure/project-structure", "title": "Project Structure", "description": "The example counter project demonstrates a way to structure your applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:18:48", "type": "code_examples", "page_metadata": {"ogUrl": "https://templ.guide/project-structure/project-structure/", "ogDescription": "The example counter project demonstrates a way to structure your applications.", "og:url": "https://templ.guide/project-structure/project-structure/", "og:locale": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "The example counter project demonstrates a way to structure your applications.", "og:description": "The example counter project demonstrates a way to structure your applications.", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Project structure | templ docs", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "Project structure | templ docs", "docusaurus_locale": "en", "title": "Project structure | templ docs", "scrapeId": "7251e62a-d599-4ffe-8a08-c52a2c43695e", "sourceURL": "https://templ.guide/project-structure/project-structure", "url": "https://templ.guide/project-structure/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Project Structure in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAs with most things, taking the layering approach to an extreme level can have a negative effect. Ask yourself whether what you're doing is really helping to make the code understandable, or is just spreading application logic across lots of files, and making it hard to see the overall structure.\n\nDependency injection frameworks are not typically used in Go. If you're coming from a language like C# or Java, this may seem unusual to you, but go with it, you don't need one.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/project-structure/project-structure", "title": "Project Structure", "description": "The example counter project demonstrates a way to structure your applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:18:48", "type": "best_practices", "page_metadata": {"ogUrl": "https://templ.guide/project-structure/project-structure/", "ogDescription": "The example counter project demonstrates a way to structure your applications.", "og:url": "https://templ.guide/project-structure/project-structure/", "og:locale": "en", "docsearch:version": "current", "docsearch:language": "en", "description": "The example counter project demonstrates a way to structure your applications.", "og:description": "The example counter project demonstrates a way to structure your applications.", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Project structure | templ docs", "ogLocale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "generator": "Docusaurus v3.6.3", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "language": "en", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "og:title": "Project structure | templ docs", "docusaurus_locale": "en", "title": "Project structure | templ docs", "scrapeId": "7251e62a-d599-4ffe-8a08-c52a2c43695e", "sourceURL": "https://templ.guide/project-structure/project-structure", "url": "https://templ.guide/project-structure/project-structure/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Creating a Simple Templ Component is in templ?\n\nAssistant: Sure, I'd be happy to explain Creating a Simple Templ Component in templ.\n\n# Creating a Simple Templ Component\n\nThis page provides a step-by-step guide on how to create a simple templ component in Go.Here's a quick rundown of what this is about:\n\n## Setup project\n\nCreate a new directory containing our project.\n\n```codeBlockLines_e6Vv\nmkdir hello-world\n```\n\nInitialize a new Go project within it.\n\n```codeBlockLines_e6Vv\ncd hello-world\ngo mod init github.com/a-h/templ-examples/hello-world\ngo get github.com/a-h/templ\n```\n\n## Create a templ file\n\nTo use it, create a `hello.templ` file containing a component.\n\nComponents are functions that contain templ elements, markup, and `if`, `switch`, and `for` Go expressions.\n\nhello.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl hello(name string) {\n\t<div>Hello, { name }</div>\n}\n```\n\n## Generate Go code from the templ file\n\nRun the `templ generate` command.\n\n```codeBlockLines_e6Vv\ntempl generate\n```\n\ntempl will generate a `hello_templ.go` file containing Go code.\n\nThis file will contain a function called `hello` which takes `name` as an argument, and returns a `templ.Component` that renders HTML.\n\n```codeBlockLines_e6Vv\nfunc hello(name string) templ.Component {\n  // ...\n}\n```\n\n## Write a program that renders to stdout\n\nCreate a `main.go` file.\n\nmain.go\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tcomponent := hello(\"John\")\n\tcomponent.Render(context.Background(), os.Stdout)\n}\n```\n\n## Run the program\n\nRunning the code will render the component's HTML to stdout.\n\n```codeBlockLines_e6Vv\ngo run .\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>Hello, John</div>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/quick-start/creating-a-simple-templ-component", "title": "Creating a Simple Templ Component", "description": "This page provides a step-by-step guide on how to create a simple templ component in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:19:06", "type": "overview", "page_metadata": {"docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Creating a simple templ component | templ docs", "ogLocale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Creating a simple templ component | templ docs", "description": "To create a templ component, first create a new Go project.", "language": "en", "ogDescription": "To create a templ component, first create a new Go project.", "twitter:card": "summary_large_image", "ogImage": "https://templ.guide/img/social-card.jpg", "og:description": "To create a templ component, first create a new Go project.", "og:locale": "en", "title": "Creating a simple templ component | templ docs", "scrapeId": "2dee2a2f-3b07-4312-8313-bc4bceb6081c", "sourceURL": "https://templ.guide/quick-start/creating-a-simple-templ-component", "url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I setup project in templ?\n\nAssistant: To setup project in templ, here's what you do:\nCreate a new directory containing our project.\n\n```codeBlockLines_e6Vv\nmkdir hello-world\n```\n\nInitialize a new Go project within it.\n\n```codeBlockLines_e6Vv\ncd hello-world\ngo mod init github.com/a-h/templ-examples/hello-world\ngo get github.com/a-h/templ\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/quick-start/creating-a-simple-templ-component", "title": "Creating a Simple Templ Component", "description": "This page provides a step-by-step guide on how to create a simple templ component in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:19:06", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Creating a simple templ component | templ docs", "ogLocale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Creating a simple templ component | templ docs", "description": "To create a templ component, first create a new Go project.", "language": "en", "ogDescription": "To create a templ component, first create a new Go project.", "twitter:card": "summary_large_image", "ogImage": "https://templ.guide/img/social-card.jpg", "og:description": "To create a templ component, first create a new Go project.", "og:locale": "en", "title": "Creating a simple templ component | templ docs", "scrapeId": "2dee2a2f-3b07-4312-8313-bc4bceb6081c", "sourceURL": "https://templ.guide/quick-start/creating-a-simple-templ-component", "url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I create a templ file in templ?\n\nAssistant: To create a templ file in templ, here's what you do:\nTo use it, create a `hello.templ` file containing a component.\n\nComponents are functions that contain templ elements, markup, and `if`, `switch`, and `for` Go expressions.\n\nhello.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl hello(name string) {\n\t<div>Hello, { name }</div>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/quick-start/creating-a-simple-templ-component", "title": "Creating a Simple Templ Component", "description": "This page provides a step-by-step guide on how to create a simple templ component in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:19:06", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Creating a simple templ component | templ docs", "ogLocale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Creating a simple templ component | templ docs", "description": "To create a templ component, first create a new Go project.", "language": "en", "ogDescription": "To create a templ component, first create a new Go project.", "twitter:card": "summary_large_image", "ogImage": "https://templ.guide/img/social-card.jpg", "og:description": "To create a templ component, first create a new Go project.", "og:locale": "en", "title": "Creating a simple templ component | templ docs", "scrapeId": "2dee2a2f-3b07-4312-8313-bc4bceb6081c", "sourceURL": "https://templ.guide/quick-start/creating-a-simple-templ-component", "url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I generate go code from the templ file in templ?\n\nAssistant: To generate go code from the templ file in templ, here's what you do:\nRun the `templ generate` command.\n\n```codeBlockLines_e6Vv\ntempl generate\n```\n\ntempl will generate a `hello_templ.go` file containing Go code.\n\nThis file will contain a function called `hello` which takes `name` as an argument, and returns a `templ.Component` that renders HTML.\n\n```codeBlockLines_e6Vv\nfunc hello(name string) templ.Component {\n  // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/quick-start/creating-a-simple-templ-component", "title": "Creating a Simple Templ Component", "description": "This page provides a step-by-step guide on how to create a simple templ component in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:19:06", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Creating a simple templ component | templ docs", "ogLocale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Creating a simple templ component | templ docs", "description": "To create a templ component, first create a new Go project.", "language": "en", "ogDescription": "To create a templ component, first create a new Go project.", "twitter:card": "summary_large_image", "ogImage": "https://templ.guide/img/social-card.jpg", "og:description": "To create a templ component, first create a new Go project.", "og:locale": "en", "title": "Creating a simple templ component | templ docs", "scrapeId": "2dee2a2f-3b07-4312-8313-bc4bceb6081c", "sourceURL": "https://templ.guide/quick-start/creating-a-simple-templ-component", "url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I write a program that renders to stdout in templ?\n\nAssistant: To write a program that renders to stdout in templ, here's what you do:\nCreate a `main.go` file.\n\nmain.go\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tcomponent := hello(\"John\")\n\tcomponent.Render(context.Background(), os.Stdout)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/quick-start/creating-a-simple-templ-component", "title": "Creating a Simple Templ Component", "description": "This page provides a step-by-step guide on how to create a simple templ component in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:19:06", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Creating a simple templ component | templ docs", "ogLocale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Creating a simple templ component | templ docs", "description": "To create a templ component, first create a new Go project.", "language": "en", "ogDescription": "To create a templ component, first create a new Go project.", "twitter:card": "summary_large_image", "ogImage": "https://templ.guide/img/social-card.jpg", "og:description": "To create a templ component, first create a new Go project.", "og:locale": "en", "title": "Creating a simple templ component | templ docs", "scrapeId": "2dee2a2f-3b07-4312-8313-bc4bceb6081c", "sourceURL": "https://templ.guide/quick-start/creating-a-simple-templ-component", "url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I run the program in templ?\n\nAssistant: To run the program in templ, here's what you do:\nRunning the code will render the component's HTML to stdout.\n\n```codeBlockLines_e6Vv\ngo run .\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>Hello, John</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/quick-start/creating-a-simple-templ-component", "title": "Creating a Simple Templ Component", "description": "This page provides a step-by-step guide on how to create a simple templ component in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:19:06", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Creating a simple templ component | templ docs", "ogLocale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Creating a simple templ component | templ docs", "description": "To create a templ component, first create a new Go project.", "language": "en", "ogDescription": "To create a templ component, first create a new Go project.", "twitter:card": "summary_large_image", "ogImage": "https://templ.guide/img/social-card.jpg", "og:description": "To create a templ component, first create a new Go project.", "og:locale": "en", "title": "Creating a simple templ component | templ docs", "scrapeId": "2dee2a2f-3b07-4312-8313-bc4bceb6081c", "sourceURL": "https://templ.guide/quick-start/creating-a-simple-templ-component", "url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Creating a Simple Templ Component in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Setup project**:\n\n```yaml\nmkdir hello-world\n\ncd hello-world\ngo mod init github.com/a-h/templ-examples/hello-world\ngo get github.com/a-h/templ\n```\n\nThis snippet shows you how to setup project, which is an important aspect of creating a simple templ component.\n\n**Create a templ file**:\n\n```yaml\npackage main\n\ntempl hello(name string) {\n\t<div>Hello, { name }</div>\n}\n```\n\nThis snippet shows you how to create a templ file, which is an important aspect of creating a simple templ component.\n\n", "metadata": {"source_url": "https://templ.guide/quick-start/creating-a-simple-templ-component", "title": "Creating a Simple Templ Component", "description": "This page provides a step-by-step guide on how to create a simple templ component in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:19:06", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Creating a simple templ component | templ docs", "ogLocale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Creating a simple templ component | templ docs", "description": "To create a templ component, first create a new Go project.", "language": "en", "ogDescription": "To create a templ component, first create a new Go project.", "twitter:card": "summary_large_image", "ogImage": "https://templ.guide/img/social-card.jpg", "og:description": "To create a templ component, first create a new Go project.", "og:locale": "en", "title": "Creating a simple templ component | templ docs", "scrapeId": "2dee2a2f-3b07-4312-8313-bc4bceb6081c", "sourceURL": "https://templ.guide/quick-start/creating-a-simple-templ-component", "url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Creating a Simple Templ Component in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nInstead of passing os.Stdout to the component's render function, you can pass any type that implements the io.Writer interface. This includes files, bytes.Buffer, and HTTP responses.\n\nTempl can be used to generate HTML files that can be hosted as static content in an S3 bucket, Google Cloud Storage, or used to generate HTML that is fed into PDF conversion processes, or sent via email.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/quick-start/creating-a-simple-templ-component", "title": "Creating a Simple Templ Component", "description": "This page provides a step-by-step guide on how to create a simple templ component in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:19:06", "type": "best_practices", "page_metadata": {"docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Creating a simple templ component | templ docs", "ogLocale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "docsearch:version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Creating a simple templ component | templ docs", "description": "To create a templ component, first create a new Go project.", "language": "en", "ogDescription": "To create a templ component, first create a new Go project.", "twitter:card": "summary_large_image", "ogImage": "https://templ.guide/img/social-card.jpg", "og:description": "To create a templ component, first create a new Go project.", "og:locale": "en", "title": "Creating a simple templ component | templ docs", "scrapeId": "2dee2a2f-3b07-4312-8313-bc4bceb6081c", "sourceURL": "https://templ.guide/quick-start/creating-a-simple-templ-component", "url": "https://templ.guide/quick-start/creating-a-simple-templ-component/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Installation Guide is in templ?\n\nAssistant: Sure, I'd be happy to explain Installation Guide in templ.\n\n# Installation Guide\n\nThis page provides various methods to install the templ tool, including using Go, GitHub binaries, Nix, and Docker.Here's a quick rundown of what this is about:\n\n## go install\n\nWith Go 1.23 or greater installed, run:\n\n```codeBlockLines_e6Vv\ngo install github.com/a-h/templ/cmd/templ@latest\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/quick-start/installation", "title": "Installation Guide", "description": "This page provides various methods to install the templ tool, including using Go, GitHub binaries, Nix, and Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:22:09", "type": "overview", "page_metadata": {"ogLocale": "en", "title": "Installation | templ docs", "ogUrl": "https://templ.guide/quick-start/installation/", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Installation | templ docs", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "og:url": "https://templ.guide/quick-start/installation/", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Installation | templ docs", "og:description": "go install", "language": "en", "ogDescription": "go install", "favicon": "https://templ.guide/img/favicon.ico", "description": "go install", "docsearch:language": "en", "scrapeId": "989b18ee-868f-4079-8bae-31cb64fc0e6a", "sourceURL": "https://templ.guide/quick-start/installation", "url": "https://templ.guide/quick-start/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I go install in templ?\n\nAssistant: To go install in templ, here's what you do:\nWith Go 1.23 or greater installed, run:\n\n```codeBlockLines_e6Vv\ngo install github.com/a-h/templ/cmd/templ@latest\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/quick-start/installation", "title": "Installation Guide", "description": "This page provides various methods to install the templ tool, including using Go, GitHub binaries, Nix, and Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:22:09", "type": "section_detail", "page_metadata": {"ogLocale": "en", "title": "Installation | templ docs", "ogUrl": "https://templ.guide/quick-start/installation/", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Installation | templ docs", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "og:url": "https://templ.guide/quick-start/installation/", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Installation | templ docs", "og:description": "go install", "language": "en", "ogDescription": "go install", "favicon": "https://templ.guide/img/favicon.ico", "description": "go install", "docsearch:language": "en", "scrapeId": "989b18ee-868f-4079-8bae-31cb64fc0e6a", "sourceURL": "https://templ.guide/quick-start/installation", "url": "https://templ.guide/quick-start/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Installation Guide in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Go Install Command**:\n\n```yaml\ngo install github.com/a-h/templ/cmd/templ@latest\n```\n\nThis snippet shows you how to go install command, which is an important aspect of installation guide.\n\n**Nix Run Command**:\n\n```yaml\nnix run github:a-h/templ\n```\n\nThis snippet shows you how to nix run command, which is an important aspect of installation guide.\n\n**Nix Develop Command**:\n\n```yaml\nnix develop github:a-h/templ\n```\n\nThis snippet shows you how to nix develop command, which is an important aspect of installation guide.\n\n**Nix Flake Configuration**:\n\n```yaml\n{\n  inputs = {\n    ...\n    templ.url = \"github:a-h/templ\";\n    ...\n  };\n  outputs = inputs@{\n    ...\n  }:\n\n  # For NixOS configuration:\n  {\n    # Add the overlay,\n    nixpkgs.overlays = [\\\n      inputs.templ.overlays.default\\\n    ];\n    # and install the package\n    environment.systemPackages = with pkgs; [\\\n      templ\\\n    ];\n  };\n\n  # For a flake project:\n  let\n    forAllSystems = f: nixpkgs.lib.genAttrs allSystems (system: f {\n      inherit system;\n      pkgs = import nixpkgs { inherit system; };\n    });\n    templ = system: inputs.templ.packages.${system}.templ;\n  in {\n    packages = forAllSystems ({ pkgs, system }: {\n      myNewPackage = pkgs.buildGoModule {\n        ...\n        preBuild = ''\n          ${templ system}/bin/templ generate\n        '';\n      };\n    });\n\n    devShell = forAllSystems ({ pkgs, system }:\n      pkgs.mkShell {\n        buildInputs = with pkgs; [\\\n          go\\\n          (templ system)\\\n        ];\n      };\n    );\n  });\n}\n```\n\nThis snippet shows you how to nix flake configuration, which is an important aspect of installation guide.\n\n", "metadata": {"source_url": "https://templ.guide/quick-start/installation", "title": "Installation Guide", "description": "This page provides various methods to install the templ tool, including using Go, GitHub binaries, Nix, and Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:22:09", "type": "code_examples", "page_metadata": {"ogLocale": "en", "title": "Installation | templ docs", "ogUrl": "https://templ.guide/quick-start/installation/", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Installation | templ docs", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "og:url": "https://templ.guide/quick-start/installation/", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Installation | templ docs", "og:description": "go install", "language": "en", "ogDescription": "go install", "favicon": "https://templ.guide/img/favicon.ico", "description": "go install", "docsearch:language": "en", "scrapeId": "989b18ee-868f-4079-8bae-31cb64fc0e6a", "sourceURL": "https://templ.guide/quick-start/installation", "url": "https://templ.guide/quick-start/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Installation Guide in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure you have Go 1.23 or greater installed before using the go install command.\n\nWhen using Docker, remember to mount your application source code into the /app directory.\n\nUse the exec form of the RUN command in Dockerfiles to avoid shell environment issues.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/quick-start/installation", "title": "Installation Guide", "description": "This page provides various methods to install the templ tool, including using Go, GitHub binaries, Nix, and Docker.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:22:09", "type": "best_practices", "page_metadata": {"ogLocale": "en", "title": "Installation | templ docs", "ogUrl": "https://templ.guide/quick-start/installation/", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Installation | templ docs", "og:locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docusaurus_locale": "en", "og:url": "https://templ.guide/quick-start/installation/", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "ogTitle": "Installation | templ docs", "og:description": "go install", "language": "en", "ogDescription": "go install", "favicon": "https://templ.guide/img/favicon.ico", "description": "go install", "docsearch:language": "en", "scrapeId": "989b18ee-868f-4079-8bae-31cb64fc0e6a", "sourceURL": "https://templ.guide/quick-start/installation", "url": "https://templ.guide/quick-start/installation/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Running Your First Templ Application is in templ?\n\nAssistant: Sure, I'd be happy to explain Running Your First Templ Application in templ.\n\n# Running Your First Templ Application\n\nThis page covers how to update a Templ application to serve HTML over HTTP instead of writing it to the terminal.Here's a quick rundown of what this is about:\n\n## Create a web server\n\nUpdate the `main.go` file.\n\ntempl components can be served as a standard HTTP handler using the `templ.Handler` function.\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\tcomponent := hello(\"John\")\n\n\thttp.Handle(\"/\", templ.Handler(component))\n\n\tfmt.Println(\"Listening on :3000\")\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/quick-start/running-your-first-templ-application", "title": "Running Your First Templ Application", "description": "This page covers how to update a Templ application to serve HTML over HTTP instead of writing it to the terminal.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:32:30", "type": "overview", "page_metadata": {"docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "docsearch:language": "en", "og:url": "https://templ.guide/quick-start/running-your-first-templ-application/", "favicon": "https://templ.guide/img/favicon.ico", "ogDescription": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Running your first templ application | templ docs", "title": "Running your first templ application | templ docs", "ogUrl": "https://templ.guide/quick-start/running-your-first-templ-application/", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "description": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "og:title": "Running your first templ application | templ docs", "scrapeId": "3f12cdcf-0e9f-4612-a8c4-42087cdae6db", "sourceURL": "https://templ.guide/quick-start/running-your-first-templ-application", "url": "https://templ.guide/quick-start/running-your-first-templ-application/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I create a web server in templ?\n\nAssistant: To create a web server in templ, here's what you do:\nUpdate the `main.go` file.\n\ntempl components can be served as a standard HTTP handler using the `templ.Handler` function.\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\tcomponent := hello(\"John\")\n\n\thttp.Handle(\"/\", templ.Handler(component))\n\n\tfmt.Println(\"Listening on :3000\")\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/quick-start/running-your-first-templ-application", "title": "Running Your First Templ Application", "description": "This page covers how to update a Templ application to serve HTML over HTTP instead of writing it to the terminal.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:32:30", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "docsearch:language": "en", "og:url": "https://templ.guide/quick-start/running-your-first-templ-application/", "favicon": "https://templ.guide/img/favicon.ico", "ogDescription": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Running your first templ application | templ docs", "title": "Running your first templ application | templ docs", "ogUrl": "https://templ.guide/quick-start/running-your-first-templ-application/", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "description": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "og:title": "Running your first templ application | templ docs", "scrapeId": "3f12cdcf-0e9f-4612-a8c4-42087cdae6db", "sourceURL": "https://templ.guide/quick-start/running-your-first-templ-application", "url": "https://templ.guide/quick-start/running-your-first-templ-application/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Running Your First Templ Application in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create a web server**:\n\n```yaml\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\tcomponent := hello(\"John\")\n\n\thttp.Handle(\"/\", templ.Handler(component))\n\n\tfmt.Println(\"Listening on :3000\")\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n```\n\nThis snippet shows you how to create a web server, which is an important aspect of running your first templ application.\n\n**Run the program**:\n\n```yaml\n```bash\ngo run *.go\n```\n```\n\nThis snippet shows you how to run the program, which is an important aspect of running your first templ application.\n\n**Curl command to see HTML output**:\n\n```yaml\n```bash\ncurl localhost:3000\n```\n```\n\nThis snippet shows you how to curl command to see html output, which is an important aspect of running your first templ application.\n\n**HTML output from curl**:\n\n```yaml\n```html\n<div>Hello, John</div>\n```\n```\n\nThis snippet shows you how to html output from curl, which is an important aspect of running your first templ application.\n\n", "metadata": {"source_url": "https://templ.guide/quick-start/running-your-first-templ-application", "title": "Running Your First Templ Application", "description": "This page covers how to update a Templ application to serve HTML over HTTP instead of writing it to the terminal.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:32:30", "type": "code_examples", "page_metadata": {"docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "docsearch:language": "en", "og:url": "https://templ.guide/quick-start/running-your-first-templ-application/", "favicon": "https://templ.guide/img/favicon.ico", "ogDescription": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Running your first templ application | templ docs", "title": "Running your first templ application | templ docs", "ogUrl": "https://templ.guide/quick-start/running-your-first-templ-application/", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "description": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "og:title": "Running your first templ application | templ docs", "scrapeId": "3f12cdcf-0e9f-4612-a8c4-42087cdae6db", "sourceURL": "https://templ.guide/quick-start/running-your-first-templ-application", "url": "https://templ.guide/quick-start/running-your-first-templ-application/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Running Your First Templ Application in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that the `main.go` file is updated correctly to serve the component as an HTTP handler.\n\nRun the program using `go run *.go` to start the web server on port 3000.\n\nUse `curl localhost:3000` to verify the HTML output from the server.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/quick-start/running-your-first-templ-application", "title": "Running Your First Templ Application", "description": "This page covers how to update a Templ application to serve HTML over HTTP instead of writing it to the terminal.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:32:30", "type": "best_practices", "page_metadata": {"docusaurus_version": "current", "language": "en", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:description": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "docsearch:language": "en", "og:url": "https://templ.guide/quick-start/running-your-first-templ-application/", "favicon": "https://templ.guide/img/favicon.ico", "ogDescription": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Running your first templ application | templ docs", "title": "Running your first templ application | templ docs", "ogUrl": "https://templ.guide/quick-start/running-your-first-templ-application/", "og:locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "description": "Let's update the previous application to serve HTML over HTTP instead of writing it to the terminal.", "og:title": "Running your first templ application | templ docs", "scrapeId": "3f12cdcf-0e9f-4612-a8c4-42087cdae6db", "sourceURL": "https://templ.guide/quick-start/running-your-first-templ-application", "url": "https://templ.guide/quick-start/running-your-first-templ-application/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Code Signing is in templ?\n\nAssistant: Sure, I'd be happy to explain Code Signing in templ.\n\n# Code Signing\n\nInstructions and details on how binaries are signed using cosign and verified using public keys.Here's a quick rundown of what this is about:\n\n## Binaries Creation\n\nBinaries are created by the GitHub Actions workflow at [https://github.com/a-h/templ/blob/main/.github/workflows/release.yml](https://github.com/a-h/templ/blob/main/.github/workflows/release.yml).\n\n## Binaries Signing\n\nBinaries are signed by cosign. The public key is stored in the repository at [https://github.com/a-h/templ/blob/main/cosign.pub](https://github.com/a-h/templ/blob/main/cosign.pub).\n\n## Key Verification Instructions\n\nInstructions for key verification can be found at [https://docs.sigstore.dev/verifying/verify/](https://docs.sigstore.dev/verifying/verify/).\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/security/code-signing", "title": "Code Signing", "description": "Instructions and details on how binaries are signed using cosign and verified using public keys.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:32:35", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/security/code-signing/", "docusaurus_version": "current", "og:title": "Code signing | templ docs", "og:description": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogLocale": "en", "ogDescription": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "docusaurus_tag": "docs-default-current", "og:locale": "en", "og:url": "https://templ.guide/security/code-signing/", "ogImage": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "language": "en", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Code signing | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "title": "Code signing | templ docs", "scrapeId": "21a39077-78e4-4a23-8a80-9ebe49c3e8a9", "sourceURL": "https://templ.guide/security/code-signing", "url": "https://templ.guide/security/code-signing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I binaries creation in templ?\n\nAssistant: To binaries creation in templ, here's what you do:\nBinaries are created by the GitHub Actions workflow at [https://github.com/a-h/templ/blob/main/.github/workflows/release.yml](https://github.com/a-h/templ/blob/main/.github/workflows/release.yml)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/code-signing", "title": "Code Signing", "description": "Instructions and details on how binaries are signed using cosign and verified using public keys.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:32:35", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/security/code-signing/", "docusaurus_version": "current", "og:title": "Code signing | templ docs", "og:description": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogLocale": "en", "ogDescription": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "docusaurus_tag": "docs-default-current", "og:locale": "en", "og:url": "https://templ.guide/security/code-signing/", "ogImage": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "language": "en", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Code signing | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "title": "Code signing | templ docs", "scrapeId": "21a39077-78e4-4a23-8a80-9ebe49c3e8a9", "sourceURL": "https://templ.guide/security/code-signing", "url": "https://templ.guide/security/code-signing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I binaries signing in templ?\n\nAssistant: To binaries signing in templ, here's what you do:\nBinaries are signed by cosign. The public key is stored in the repository at [https://github.com/a-h/templ/blob/main/cosign.pub](https://github.com/a-h/templ/blob/main/cosign.pub)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/code-signing", "title": "Code Signing", "description": "Instructions and details on how binaries are signed using cosign and verified using public keys.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:32:35", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/security/code-signing/", "docusaurus_version": "current", "og:title": "Code signing | templ docs", "og:description": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogLocale": "en", "ogDescription": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "docusaurus_tag": "docs-default-current", "og:locale": "en", "og:url": "https://templ.guide/security/code-signing/", "ogImage": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "language": "en", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Code signing | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "title": "Code signing | templ docs", "scrapeId": "21a39077-78e4-4a23-8a80-9ebe49c3e8a9", "sourceURL": "https://templ.guide/security/code-signing", "url": "https://templ.guide/security/code-signing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I key verification instructions in templ?\n\nAssistant: To key verification instructions in templ, here's what you do:\nInstructions for key verification can be found at [https://docs.sigstore.dev/verifying/verify/](https://docs.sigstore.dev/verifying/verify/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/code-signing", "title": "Code Signing", "description": "Instructions and details on how binaries are signed using cosign and verified using public keys.", "has_code_examples": false, "has_best_practices": false, "section_count": 3, "timestamp": "2025-03-01 03:32:35", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/security/code-signing/", "docusaurus_version": "current", "og:title": "Code signing | templ docs", "og:description": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "docusaurus_locale": "en", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogLocale": "en", "ogDescription": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "docusaurus_tag": "docs-default-current", "og:locale": "en", "og:url": "https://templ.guide/security/code-signing/", "ogImage": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "language": "en", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "description": "Binaries are created by the GitHub Actions workflow at https://github.com/a-h/templ/blob/main/.github/workflows/release.yml", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Code signing | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "title": "Code signing | templ docs", "scrapeId": "21a39077-78e4-4a23-8a80-9ebe49c3e8a9", "sourceURL": "https://templ.guide/security/code-signing", "url": "https://templ.guide/security/code-signing/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Content Security Policy is in templ?\n\nAssistant: Sure, I'd be happy to explain Content Security Policy in templ.\n\n# Content Security Policy\n\nThis page covers the implementation of nonces in Content Security Policies (CSP) for templ scripts.Here's a quick rundown of what this is about:\n\n## Nonces\n\nIn templ, script templates are rendered as inline `<script>` tags.\n\nStrict Content Security Policies (CSP) can prevent these inline scripts from executing.\n\nBy setting a nonce attribute on the `<script>` tag, and setting the same nonce in the CSP header, the browser will allow the script to execute.\n\ninfo\n\nIt's your responsibility to generate a secure nonce. Nonces should be generated using a cryptographically secure random number generator.\n\nSee https://content-security-policy.com/nonce/ for more information.\n\n## Setting a nonce\n\nThe `templ.WithNonce` function can be used to set a nonce for templ to use when rendering scripts.\n\nIt returns an updated `context.Context` with the nonce set.\n\nIn this example, the `alert` function is rendered as a script element by templ.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/security/content-security-policy", "title": "Content Security Policy", "description": "This page covers the implementation of nonces in Content Security Policies (CSP) for templ scripts.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:33:03", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Content security policy | templ docs", "generator": "Docusaurus v3.6.3", "title": "Content security policy | templ docs", "og:url": "https://templ.guide/security/content-security-policy/", "docusaurus_version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "og:title": "Content security policy | templ docs", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Nonces", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/security/content-security-policy/", "og:description": "Nonces", "ogDescription": "Nonces", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "91a6397d-9cbe-460b-bd07-0bfcf957007e", "sourceURL": "https://templ.guide/security/content-security-policy", "url": "https://templ.guide/security/content-security-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I nonces in templ?\n\nAssistant: To nonces in templ, here's what you do:\nIn templ, script templates are rendered as inline `<script>` tags.\n\nStrict Content Security Policies (CSP) can prevent these inline scripts from executing.\n\nBy setting a nonce attribute on the `<script>` tag, and setting the same nonce in the CSP header, the browser will allow the script to execute.\n\ninfo\n\nIt's your responsibility to generate a secure nonce. Nonces should be generated using a cryptographically secure random number generator.\n\nSee https://content-security-policy.com/nonce/ for more information..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/content-security-policy", "title": "Content Security Policy", "description": "This page covers the implementation of nonces in Content Security Policies (CSP) for templ scripts.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:33:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Content security policy | templ docs", "generator": "Docusaurus v3.6.3", "title": "Content security policy | templ docs", "og:url": "https://templ.guide/security/content-security-policy/", "docusaurus_version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "og:title": "Content security policy | templ docs", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Nonces", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/security/content-security-policy/", "og:description": "Nonces", "ogDescription": "Nonces", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "91a6397d-9cbe-460b-bd07-0bfcf957007e", "sourceURL": "https://templ.guide/security/content-security-policy", "url": "https://templ.guide/security/content-security-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I setting a nonce in templ?\n\nAssistant: To setting a nonce in templ, here's what you do:\nThe `templ.WithNonce` function can be used to set a nonce for templ to use when rendering scripts.\n\nIt returns an updated `context.Context` with the nonce set.\n\nIn this example, the `alert` function is rendered as a script element by templ..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/content-security-policy", "title": "Content Security Policy", "description": "This page covers the implementation of nonces in Content Security Policies (CSP) for templ scripts.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:33:03", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Content security policy | templ docs", "generator": "Docusaurus v3.6.3", "title": "Content security policy | templ docs", "og:url": "https://templ.guide/security/content-security-policy/", "docusaurus_version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "og:title": "Content security policy | templ docs", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Nonces", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/security/content-security-policy/", "og:description": "Nonces", "ogDescription": "Nonces", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "91a6397d-9cbe-460b-bd07-0bfcf957007e", "sourceURL": "https://templ.guide/security/content-security-policy", "url": "https://templ.guide/security/content-security-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Content Security Policy in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**templates.templ**:\n\n```yaml\npackage main\n\nimport \"context\"\nimport \"os\"\n\nscript onLoad() {\n    alert(\"Hello, world!\")\n}\n\ntempl template() {\n    @onLoad()\n}\n\n```\n\nThis snippet shows you how to templates.templ, which is an important aspect of content security policy.\n\n**main.go**:\n\n```yaml\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc withNonce(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tnonce := securelyGenerateRandomString()\n\t\tw.Header().Add(\"Content-Security-Policy\", fmt.Sprintf(\"script-src 'nonce-%s'\", nonce))\n\t\t// Use the context to pass the nonce to the handler.\n\t\tctx := templ.WithNonce(r.Context(), nonce)\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t})\n}\n\nfunc main() {\n\tmux := http.NewServeMux()\n\n\t// Handle template.\n\tmux.HandleFunc(\"/\", templ.Handler(template()))\n\n\t// Apply middleware.\n\twithNonceMux := withNonce(mux)\n\n\t// Start the server.\n\tfmt.Println(\"listening on :8080\")\n\tif err := http.ListenAndServe(\":8080\", withNonceMux); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\nThis snippet shows you how to main.go, which is an important aspect of content security policy.\n\n", "metadata": {"source_url": "https://templ.guide/security/content-security-policy", "title": "Content Security Policy", "description": "This page covers the implementation of nonces in Content Security Policies (CSP) for templ scripts.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:33:03", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Content security policy | templ docs", "generator": "Docusaurus v3.6.3", "title": "Content security policy | templ docs", "og:url": "https://templ.guide/security/content-security-policy/", "docusaurus_version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "og:title": "Content security policy | templ docs", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Nonces", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/security/content-security-policy/", "og:description": "Nonces", "ogDescription": "Nonces", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "91a6397d-9cbe-460b-bd07-0bfcf957007e", "sourceURL": "https://templ.guide/security/content-security-policy", "url": "https://templ.guide/security/content-security-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Content Security Policy in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nGenerate nonces using a cryptographically secure random number generator.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/security/content-security-policy", "title": "Content Security Policy", "description": "This page covers the implementation of nonces in Content Security Policies (CSP) for templ scripts.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:33:03", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Content security policy | templ docs", "generator": "Docusaurus v3.6.3", "title": "Content security policy | templ docs", "og:url": "https://templ.guide/security/content-security-policy/", "docusaurus_version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "og:title": "Content security policy | templ docs", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Nonces", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/security/content-security-policy/", "og:description": "Nonces", "ogDescription": "Nonces", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "91a6397d-9cbe-460b-bd07-0bfcf957007e", "sourceURL": "https://templ.guide/security/content-security-policy", "url": "https://templ.guide/security/content-security-policy/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Security: Injection Attacks is in templ?\n\nAssistant: Sure, I'd be happy to explain Security: Injection Attacks in templ.\n\n# Security: Injection Attacks\n\nThis page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.Here's a quick rundown of what this is about:\n\n## Preventing Injection Vulnerabilities\n\ntempl is designed to prevent user-provided data from being used to inject vulnerabilities.\n\n`<script>` and `<style>` tags could allow user data to inject vulnerabilities, so variables are not permitted in these sections.\n\n## Using onClick Attributes Safely\n\n`onClick` attributes, and other `on*` attributes are used to execute JavaScript. To prevent user data from being unescaped, `on*` attributes accept a `templ.ComponentScript`.\n\n## Style Attributes Restrictions\n\nStyle attributes cannot be expressions, only constants, to avoid escaping vulnerabilities. templ style templates ( `css className()`) should be used instead.\n\n## Class Name Sanitization\n\nClass names are sanitized by default. A failed class name is replaced by `--templ-css-class-safe-name`. The sanitization can be bypassed using the `templ.SafeClass` function, but the result is still subject to escaping.\n\n## Node Text Handling\n\nNode text is not modified at all. However, it will be escaped using `templ.EscapeString`.\n\n## Sanitizing href Attributes\n\n`href` attributes must be a `templ.SafeURL` and are sanitized to remove JavaScript URLs unless bypassed.\n\n## CSS Property Handling\n\nWithin css blocks, property names, and constant CSS property values are not sanitized or escaped. CSS property values based on expressions are passed through `templ.SanitizeCSS` to replace potentially unsafe values with placeholders.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "overview", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I preventing injection vulnerabilities in templ?\n\nAssistant: To preventing injection vulnerabilities in templ, here's what you do:\ntempl is designed to prevent user-provided data from being used to inject vulnerabilities.\n\n`<script>` and `<style>` tags could allow user data to inject vulnerabilities, so variables are not permitted in these sections..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using onclick attributes safely in templ?\n\nAssistant: To using onclick attributes safely in templ, here's what you do:\n`onClick` attributes, and other `on*` attributes are used to execute JavaScript. To prevent user data from being unescaped, `on*` attributes accept a `templ.ComponentScript`..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I style attributes restrictions in templ?\n\nAssistant: To style attributes restrictions in templ, here's what you do:\nStyle attributes cannot be expressions, only constants, to avoid escaping vulnerabilities. templ style templates ( `css className()`) should be used instead..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I class name sanitization in templ?\n\nAssistant: To class name sanitization in templ, here's what you do:\nClass names are sanitized by default. A failed class name is replaced by `--templ-css-class-safe-name`. The sanitization can be bypassed using the `templ.SafeClass` function, but the result is still subject to escaping..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I node text handling in templ?\n\nAssistant: To node text handling in templ, here's what you do:\nNode text is not modified at all. However, it will be escaped using `templ.EscapeString`..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I sanitizing href attributes in templ?\n\nAssistant: To sanitizing href attributes in templ, here's what you do:\n`href` attributes must be a `templ.SafeURL` and are sanitized to remove JavaScript URLs unless bypassed..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I css property handling in templ?\n\nAssistant: To css property handling in templ, here's what you do:\nWithin css blocks, property names, and constant CSS property values are not sanitized or escaped. CSS property values based on expressions are passed through `templ.SanitizeCSS` to replace potentially unsafe values with placeholders..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "section_detail", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Security: Injection Attacks in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of Script and Style Tags**:\n\n```yaml\ntempl Example() {\n  <script>\n    function showAlert() {\n      alert(\"hello\");\n    }\n  </script>\n  <style type=\"text/css\">\n    /* Only CSS is allowed */\n  </style>\n}\n```\n\nThis snippet shows you how to example of script and style tags, which is an important aspect of security: injection attacks.\n\n**Example of onClick Handler**:\n\n```yaml\nscript onClickHandler(msg string) {\n  alert(msg);\n}\n\ntempl Example(msg string) {\n  <div onClick={ onClickHandler(msg) }>\n    { \"will be HTML encoded using templ.Escape\" }\n  </div>\n}\n```\n\nThis snippet shows you how to example of onclick handler, which is an important aspect of security: injection attacks.\n\n**Example of Style Attributes**:\n\n```yaml\ntempl Example() {\n  <div style={ \"will throw an error\" }></div>\n}\n```\n\nThis snippet shows you how to example of style attributes, which is an important aspect of security: injection attacks.\n\n**Example of Class Name Sanitization**:\n\n```yaml\ntempl Example() {\n  <div class={ \"unsafe</style&gt;-will-sanitized\", templ.SafeClass(\"&sanitization bypassed\") }></div>\n}\n```\n\nThis snippet shows you how to example of class name sanitization, which is an important aspect of security: injection attacks.\n\n", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "code_examples", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Security: Injection Attacks in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAvoid using user-provided data in `<script>` and `<style>` tags to prevent injection vulnerabilities.\n\nUse `templ.ComponentScript` for `on*` attributes to ensure user data is not unescaped.\n\nOnly use constant values for style attributes to avoid escaping vulnerabilities.\n\nUtilize `templ.SafeClass` cautiously, as it is still subject to escaping.\n\nEnsure `href` attributes are sanitized using `templ.SafeURL` to prevent JavaScript URL injections.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/security/injection-attacks", "title": "Security: Injection Attacks", "description": "This page covers how templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:33:49", "type": "best_practices", "page_metadata": {"ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogLocale": "en", "ogUrl": "https://templ.guide/security/injection-attacks/", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "og:url": "https://templ.guide/security/injection-attacks/", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Injection attacks | templ docs", "docsearch:version": "current", "docusaurus_tag": "docs-default-current", "ogTitle": "Injection attacks | templ docs", "ogDescription": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "title": "Injection attacks | templ docs", "twitter:card": "summary_large_image", "og:description": "templ is designed to prevent user-provided data from being used to inject vulnerabilities.", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "scrapeId": "d350b47b-c2b9-43b2-b882-386dfcb60326", "sourceURL": "https://templ.guide/security/injection-attacks", "url": "https://templ.guide/security/injection-attacks/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Creating an HTTP Server with Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Creating an HTTP Server with Templ in templ.\n\n# Creating an HTTP Server with Templ\n\nThis page covers how to create an HTTP server using the Templ framework, including handling static pages, displaying fixed data, and dynamic data.Here's a quick rundown of what this is about:\n\n## Static pages\n\nTo use a templ component as a HTTP handler, the `templ.Handler` function can be used.\n\nThis is suitable for use when the component is not used to display dynamic data.\n\ncomponents.templ\n\n```go\npackage main\n\ntempl hello() {\n\t<div>Hello</div>\n}\n```\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\thttp.Handle(\"/\", templ.Handler(hello()))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n\n## Displaying fixed data\n\nIn the previous example, the `hello` component does not take any parameters. Let's display the time when the server was started instead.\n\ncomponents.templ\n\n```go\npackage main\n\nimport \"time\"\n\ntempl timeComponent(d time.Time) {\n\t<div>{ d.String() }</div>\n}\n\ntempl notFoundComponent() {\n\t<div>404 - Not found</div>\n}\n```\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\thttp.Handle(\"/\", templ.Handler(timeComponent(time.Now())))\n\thttp.Handle(\"/404\", templ.Handler(notFoundComponent(), templ.WithStatus(http.StatusNotFound)))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\ntip\n\nThe `templ.WithStatus`, `templ.WithContentType`, and `templ.WithErrorHandler` functions can be passed as parameters to the `templ.Handler` function to control how content is rendered.\n\nThe output will always be the date and time that the web server was started up, not the current time.\n\n```log\n2023-04-26 08:40:03.421358 +0100 BST m=+0.000779501\n```\n\nTo display the current time, we could update the component to use the `time.Now()` function itself, but this would limit the reusability of the component. It's better when components take parameters for their display values.\n\ntip\n\nGood templ components are idempotent, pure functions - they don't rely on data that is not passed in through parameters. As long as the parameters are the same, they always return the same HTML - they don't rely on any network calls or disk access.\n\n## Displaying dynamic data\n\nLet's update the previous example to display dynamic content.\n\ntempl components implement the `templ.Component` interface, which provides a `Render` method.\n\nThe `Render` method can be used within HTTP handlers to write HTML to the `http.ResponseWriter`.\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\thello().Render(r.Context(), w)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\nBuilding on that example, we can implement the Go HTTP handler interface and use the component within our HTTP handler. In this case, displaying the latest date and time, instead of the date and time when the server started up.\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc NewNowHandler(now func() time.Time) NowHandler {\n\treturn NowHandler{Now: now}\n}\n\ntype NowHandler struct {\n\tNow func() time.Time\n}\n\nfunc (nh NowHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\ttimeComponent(nh.Now()).Render(r.Context(), w)\n}\n\nfunc main() {\n\thttp.Handle(\"/\", NewNowHandler(time.Now))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "title": "Creating an HTTP Server with Templ", "description": "This page covers how to create an HTTP server using the Templ framework, including handling static pages, displaying fixed data, and dynamic data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:35:26", "type": "overview", "page_metadata": {"og:title": "Creating an HTTP server with templ | templ docs", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Creating an HTTP server with templ | templ docs", "ogDescription": "Static pages", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "title": "Creating an HTTP server with templ | templ docs", "og:locale": "en", "ogUrl": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "docusaurus_locale": "en", "og:url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Static pages", "docsearch:version": "current", "og:description": "Static pages", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "language": "en", "scrapeId": "dcd9eb08-8306-47c5-91f8-af142ffa74b1", "sourceURL": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I static pages in templ?\n\nAssistant: To static pages in templ, here's what you do:\nTo use a templ component as a HTTP handler, the `templ.Handler` function can be used.\n\nThis is suitable for use when the component is not used to display dynamic data.\n\ncomponents.templ\n\n```go\npackage main\n\ntempl hello() {\n\t<div>Hello</div>\n}\n```\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\thttp.Handle(\"/\", templ.Handler(hello()))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "title": "Creating an HTTP Server with Templ", "description": "This page covers how to create an HTTP server using the Templ framework, including handling static pages, displaying fixed data, and dynamic data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:35:26", "type": "section_detail", "page_metadata": {"og:title": "Creating an HTTP server with templ | templ docs", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Creating an HTTP server with templ | templ docs", "ogDescription": "Static pages", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "title": "Creating an HTTP server with templ | templ docs", "og:locale": "en", "ogUrl": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "docusaurus_locale": "en", "og:url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Static pages", "docsearch:version": "current", "og:description": "Static pages", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "language": "en", "scrapeId": "dcd9eb08-8306-47c5-91f8-af142ffa74b1", "sourceURL": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I displaying fixed data in templ?\n\nAssistant: To displaying fixed data in templ, here's what you do:\nIn the previous example, the `hello` component does not take any parameters. Let's display the time when the server was started instead.\n\ncomponents.templ\n\n```go\npackage main\n\nimport \"time\"\n\ntempl timeComponent(d time.Time) {\n\t<div>{ d.String() }</div>\n}\n\ntempl notFoundComponent() {\n\t<div>404 - Not found</div>\n}\n```\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\thttp.Handle(\"/\", templ.Handler(timeComponent(time.Now())))\n\thttp.Handle(\"/404\", templ.Handler(notFoundComponent(), templ.WithStatus(http.StatusNotFound)))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\ntip\n\nThe `templ.WithStatus`, `templ.WithContentType`, and `templ.WithErrorHandler` functions can be passed as parameters to the `templ.Handler` function to control how content is rendered.\n\nThe output will always be the date and time that the web server was started up, not the current time.\n\n```log\n2023-04-26 08:40:03.421358 +0100 BST m=+0.000779501\n```\n\nTo display the current time, we could update the component to use the `time.Now()` function itself, but this would limit the reusability of the component. It's better when components take parameters for their display values.\n\ntip\n\nGood templ components are idempotent, pure functions - they don't rely on data that is not passed in through parameters. As long as the parameters are the same, they always return the same HTML - they don't rely on any network calls or disk access..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "title": "Creating an HTTP Server with Templ", "description": "This page covers how to create an HTTP server using the Templ framework, including handling static pages, displaying fixed data, and dynamic data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:35:26", "type": "section_detail", "page_metadata": {"og:title": "Creating an HTTP server with templ | templ docs", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Creating an HTTP server with templ | templ docs", "ogDescription": "Static pages", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "title": "Creating an HTTP server with templ | templ docs", "og:locale": "en", "ogUrl": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "docusaurus_locale": "en", "og:url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Static pages", "docsearch:version": "current", "og:description": "Static pages", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "language": "en", "scrapeId": "dcd9eb08-8306-47c5-91f8-af142ffa74b1", "sourceURL": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I displaying dynamic data in templ?\n\nAssistant: To displaying dynamic data in templ, here's what you do:\nLet's update the previous example to display dynamic content.\n\ntempl components implement the `templ.Component` interface, which provides a `Render` method.\n\nThe `Render` method can be used within HTTP handlers to write HTML to the `http.ResponseWriter`.\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\thello().Render(r.Context(), w)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\nBuilding on that example, we can implement the Go HTTP handler interface and use the component within our HTTP handler. In this case, displaying the latest date and time, instead of the date and time when the server started up.\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc NewNowHandler(now func() time.Time) NowHandler {\n\treturn NowHandler{Now: now}\n}\n\ntype NowHandler struct {\n\tNow func() time.Time\n}\n\nfunc (nh NowHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\ttimeComponent(nh.Now()).Render(r.Context(), w)\n}\n\nfunc main() {\n\thttp.Handle(\"/\", NewNowHandler(time.Now))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "title": "Creating an HTTP Server with Templ", "description": "This page covers how to create an HTTP server using the Templ framework, including handling static pages, displaying fixed data, and dynamic data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:35:26", "type": "section_detail", "page_metadata": {"og:title": "Creating an HTTP server with templ | templ docs", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Creating an HTTP server with templ | templ docs", "ogDescription": "Static pages", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "title": "Creating an HTTP server with templ | templ docs", "og:locale": "en", "ogUrl": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "docusaurus_locale": "en", "og:url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Static pages", "docsearch:version": "current", "og:description": "Static pages", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "language": "en", "scrapeId": "dcd9eb08-8306-47c5-91f8-af142ffa74b1", "sourceURL": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Creating an HTTP Server with Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Static pages example**:\n\n```yaml\npackage main\n\ntempl hello() {\n\t<div>Hello</div>\n}\n\n```\n\nThis snippet shows you how to static pages example, which is an important aspect of creating an http server with templ.\n\n**Main.go for static pages**:\n\n```yaml\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\thttp.Handle(\"/\", templ.Handler(hello()))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\n```\n\nThis snippet shows you how to main.go for static pages, which is an important aspect of creating an http server with templ.\n\n**Displaying fixed data components**:\n\n```yaml\npackage main\n\nimport \"time\"\n\ntempl timeComponent(d time.Time) {\n\t<div>{ d.String() }</div>\n}\n\ntempl notFoundComponent() {\n\t<div>404 - Not found</div>\n}\n\n```\n\nThis snippet shows you how to displaying fixed data components, which is an important aspect of creating an http server with templ.\n\n**Main.go for displaying fixed data**:\n\n```yaml\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\thttp.Handle(\"/\", templ.Handler(timeComponent(time.Now())))\n\thttp.Handle(\"/404\", templ.Handler(notFoundComponent(), templ.WithStatus(http.StatusNotFound)))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\n```\n\nThis snippet shows you how to main.go for displaying fixed data, which is an important aspect of creating an http server with templ.\n\n**Main.go for displaying dynamic data**:\n\n```yaml\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc NewNowHandler(now func() time.Time) NowHandler {\n\treturn NowHandler{Now: now}\n}\n\ntype NowHandler struct {\n\tNow func() time.Time\n}\n\nfunc (nh NowHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\ttimeComponent(nh.Now()).Render(r.Context(), w)\n}\n\nfunc main() {\n\thttp.Handle(\"/\", NewNowHandler(time.Now))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\nThis snippet shows you how to main.go for displaying dynamic data, which is an important aspect of creating an http server with templ.\n\n", "metadata": {"source_url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "title": "Creating an HTTP Server with Templ", "description": "This page covers how to create an HTTP server using the Templ framework, including handling static pages, displaying fixed data, and dynamic data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:35:26", "type": "code_examples", "page_metadata": {"og:title": "Creating an HTTP server with templ | templ docs", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Creating an HTTP server with templ | templ docs", "ogDescription": "Static pages", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "title": "Creating an HTTP server with templ | templ docs", "og:locale": "en", "ogUrl": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "docusaurus_locale": "en", "og:url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Static pages", "docsearch:version": "current", "og:description": "Static pages", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "language": "en", "scrapeId": "dcd9eb08-8306-47c5-91f8-af142ffa74b1", "sourceURL": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Creating an HTTP Server with Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nThe `templ.WithStatus`, `templ.WithContentType`, and `templ.WithErrorHandler` functions can be passed as parameters to the `templ.Handler` function to control how content is rendered.\n\nGood templ components are idempotent, pure functions - they don't rely on data that is not passed in through parameters. As long as the parameters are the same, they always return the same HTML - they don't rely on any network calls or disk access.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "title": "Creating an HTTP Server with Templ", "description": "This page covers how to create an HTTP server using the Templ framework, including handling static pages, displaying fixed data, and dynamic data.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:35:26", "type": "best_practices", "page_metadata": {"og:title": "Creating an HTTP server with templ | templ docs", "ogLocale": "en", "docsearch:language": "en", "ogTitle": "Creating an HTTP server with templ | templ docs", "ogDescription": "Static pages", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "title": "Creating an HTTP server with templ | templ docs", "og:locale": "en", "ogUrl": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "docusaurus_locale": "en", "og:url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "description": "Static pages", "docsearch:version": "current", "og:description": "Static pages", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "language": "en", "scrapeId": "dcd9eb08-8306-47c5-91f8-af142ffa74b1", "sourceURL": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ", "url": "https://templ.guide/server-side-rendering/creating-an-http-server-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Datastar Documentation is in templ?\n\nAssistant: Sure, I'd be happy to explain Datastar Documentation in templ.\n\n# Datastar Documentation\n\nDatastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.Here's a quick rundown of what this is about:\n\n## Usage\n\nUsing Datastar requires:\n\n- Installation of the Datastar client-side library.\n- Modifying the HTML markup to instruct the library to perform partial screen updates.\n\n## Installation\n\nDatastar is included with Templ components out of the box to speed up development. You can use `@datastar.ScriptCDNLatest()` or `ScriptCDNVersion(version string)` to include the latest version of the Datastar library in your HTML.\n\nAdvanced Datastar installation and usage help is covered in the user guide at [https://data-star.dev](https://data-star.dev/).\n\n## Datastar examples using Templ\n\nThe Datastar website is built using Datastar and templ, so you can see how it works in practice.\n\nThe Datastar website contains a number of examples that demonstrate how to use Datastar. The examples are written in Go and use the templ package to generate the HTML.\n\nSee examples at [https://github.com/delaneyj/datastar/tree/main/backends/go/site](https://github.com/delaneyj/datastar/tree/main/backends/go/site)\n\nThis document will walk you through how to create a simple counter example using Datastar, following the [example](https://data-star.dev/examples/templ_counter) in the Datastar website.\n\n## Counter Example\n\nWe are going to modify the [templ counter example](https://templ.guide/server-side-rendering/example-counter-application) to use Datastar.\n\n### Frontend\n\nFirst, define some HTML with two buttons. One to update a global state, and one to update a per-user state.\n\n```go\npackage site\n\nimport datastar \"github.com/starfederation/datastar/sdk/go\"\n\ntype TemplCounterSignals struct {\n\tGlobal uint32 `json:\"global\"`\n\tUser   uint32 `json:\"user\"`\n}\n\ntempl templCounterExampleButtons() {\n\t<div>\n\t\t<button\n\t\t\tdata-on-click=\"@post('/examples/templ_counter/increment/global')\"\n\t\t>\n\t\t\tIncrement Global\n\t\t</button>\n\t\t<button\n\t\t\tdata-on-click={ datastar.PostSSE('/examples/templ_counter/increment/user') }\n\t\t\t<!-- Alternative: Using Datastar SDK sugar-->\n\t\t>\n\t\t\tIncrement User\n\t\t</button>\n\t</div>\n}\n\ntempl templCounterExampleCounts() {\n\t<div>\n\t\t<div>\n\t\t\t<div>Global</div>\n\t\t\t<div data-text=\"$global\"></div>\n\t\t</div>\n\t\t<div>\n\t\t\t<div>User</div>\n\t\t\t<div data-text=\"$user\"></div>\n\t\t</div>\n\t</div>\n}\n\ntempl templCounterExampleInitialContents(signals TemplCounterSignals) {\n\t<div\n\t\tid=\"container\"\n\t\tdata-signals={ templ.JSONString(signals) }\n\t>\n\t\t@templCounterExampleButtons()\n\t\t@templCounterExampleCounts()\n\t</div>\n}\n```\n\nNote that Datastar doesn't promote the use of forms because they are ill-suited to nested reactive content. Instead, it sends all reactive state (as JSON) to the server on each request. This means far less bookkeeping and more predictable state management.\n\n`data-signals` is a special attribute that Datastar uses to merge one or more signals into the existing signals. In the example, we store $global and $user when we initially render the container.\n\n`data-on-click=\"@post('/examples/templ_counter/increment/global')\"` is an attribute expression that says \"When this element is clicked, send a POST request to the server to the specified URL\". The `@post` is an action that is a sandboxed function that knows about things like signals.\n\n`data-text=\"$global\"` is an attribute expression that says \"replace the contents of this element with the value of the `global` signal in the store\". This is a reactive signal that will update the page when the value changes, which we'll see in a moment.\n\n### Backend\n\nNote the use of Datastar's helpers to set up SSE.\n\n```go\npackage site\n\nimport (\n\t\"net/http\"\n\t\"sync/atomic\"\n\n\t\"github.com/Jeffail/gabs/v2\"\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/gorilla/sessions\"\n\tdatastar \"github.com/starfederation/datastar/sdk/go\"\n)\n\nfunc setupExamplesTemplCounter(examplesRouter chi.Router, sessionSignals sessions.Store) error {\n\n\tvar globalCounter atomic.Uint32\n\tconst (\n\t\tsessionKey = \"templ_counter\"\n\t\tcountKey   = \"count\"\n\t)\n\n\tuserVal := func(r *http.Request) (uint32, *sessions.Session, error) {\n\t\tsess, err := sessionSignals.Get(r, sessionKey)\n\t\tif err != nil {\n\t\t\treturn 0, nil, err\n\t\t}\n\n\t\tval, ok := sess.Values[countKey].(uint32)\n\t\tif !ok {\n\t\t\tval = 0\n\t\t}\n\t\treturn val, sess, nil\n\t}\n\n\texamplesRouter.Get(\"/templ_counter/data\", func(w http.ResponseWriter, r *http.Request) {\n\t\tuserVal, _, err := userVal(r)\n\t\tif err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\n\t\tsignals := TemplCounterSignals{\n\t\t\tGlobal: globalCounter.Load(),\n\t\t\tUser:   userVal,\n\t\t}\n\n\t\tc := templCounterExampleInitialContents(signals)\n\t\tdatastar.NewSSE(w, r).MergeFragmentTempl(c)\n\t})\n\n\tupdateGlobal := func(signals *gabs.Container) {\n\t\tsignals.Set(globalCounter.Add(1), \"global\")\n\t}\n\n\texamplesRouter.Route(\"/templ_counter/increment\", func(incrementRouter chi.Router) {\n\t\tincrementRouter.Post(\"/global\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tupdate := gabs.New()\n\t\t\tupdateGlobal(update)\n\n\t\t\tdatastar.NewSSE(w, r).MarshalAndMergeSignals(update)\n\t\t})\n\n\t\tincrementRouter.Post(\"/user\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tval, sess, err := userVal(r)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t}\n\n\t\t\tval++\n\t\t\tsess.Values[countKey] = val\n\t\t\tif err := sess.Save(r, w); err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t}\n\n\t\t\tupdate := gabs.New()\n\t\t\tupdateGlobal(update)\n\t\t\tupdate.Set(val, \"user\")\n\n\t\t\tdatastar.NewSSE(w, r).MarshalAndMergeSignals(update)\n\t\t})\n\t})\n\n\treturn nil\n}\n```\n\nThe `atomic.Uint32` type stores the global state. The `userVal` function is a helper that retrieves the user's session state. The `updateGlobal` function increments the global state.\n\nIn this example, the global state is stored in RAM and will be lost when the web server reboots. To support load-balanced web servers and stateless function deployments, consider storing the state in a data store such as [NATS KV](https://docs.nats.io/using-nats/developer/develop_jetstream/kv).\n\n## Per-user session state\n\nIn an HTTP application, per-user state information is partitioned by an HTTP cookie. Cookies that identify a user while they're using a site are known as \"session cookies\". When the HTTP handler receives a request, it can read the session ID of the user from the cookie and retrieve any required state.\n\n## Signal-only patching\n\nSince the page's elements aren't changing dynamically, we can use the `MarshalAndMergeSignals` function to send only the signals that have changed. This is a more efficient way to update the page without even needing to send HTML fragments.\n\nDatastar will merge updates to signals similar to a JSON merge patch. This means you can do dynamic partial updates to the store and the page will update accordingly. [Gabs](https://pkg.go.dev/github.com/Jeffail/gabs/v2#section-readme) is used here to handle dynamic JSON in Go.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/datastar", "title": "Datastar Documentation", "description": "Datastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:36:10", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://templ.guide/server-side-rendering/datastar/", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/server-side-rendering/datastar/", "docusaurus_locale": "en", "title": "Datastar | templ docs", "description": "Datastar is a hypermedia framework that is similar to HTMX.", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:description": "Datastar is a hypermedia framework that is similar to HTMX.", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_version": "current", "ogDescription": "Datastar is a hypermedia framework that is similar to HTMX.", "ogTitle": "Datastar | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Datastar | templ docs", "scrapeId": "499444d2-ad44-49d3-879b-ade80c3f9b84", "sourceURL": "https://templ.guide/server-side-rendering/datastar", "url": "https://templ.guide/server-side-rendering/datastar/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I usage in templ?\n\nAssistant: To usage in templ, here's what you do:\nUsing Datastar requires:\n\n- Installation of the Datastar client-side library.\n- Modifying the HTML markup to instruct the library to perform partial screen updates..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/datastar", "title": "Datastar Documentation", "description": "Datastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:36:10", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://templ.guide/server-side-rendering/datastar/", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/server-side-rendering/datastar/", "docusaurus_locale": "en", "title": "Datastar | templ docs", "description": "Datastar is a hypermedia framework that is similar to HTMX.", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:description": "Datastar is a hypermedia framework that is similar to HTMX.", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_version": "current", "ogDescription": "Datastar is a hypermedia framework that is similar to HTMX.", "ogTitle": "Datastar | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Datastar | templ docs", "scrapeId": "499444d2-ad44-49d3-879b-ade80c3f9b84", "sourceURL": "https://templ.guide/server-side-rendering/datastar", "url": "https://templ.guide/server-side-rendering/datastar/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I installation in templ?\n\nAssistant: To installation in templ, here's what you do:\nDatastar is included with Templ components out of the box to speed up development. You can use `@datastar.ScriptCDNLatest()` or `ScriptCDNVersion(version string)` to include the latest version of the Datastar library in your HTML.\n\nAdvanced Datastar installation and usage help is covered in the user guide at [https://data-star.dev](https://data-star.dev/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/datastar", "title": "Datastar Documentation", "description": "Datastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:36:10", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://templ.guide/server-side-rendering/datastar/", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/server-side-rendering/datastar/", "docusaurus_locale": "en", "title": "Datastar | templ docs", "description": "Datastar is a hypermedia framework that is similar to HTMX.", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:description": "Datastar is a hypermedia framework that is similar to HTMX.", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_version": "current", "ogDescription": "Datastar is a hypermedia framework that is similar to HTMX.", "ogTitle": "Datastar | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Datastar | templ docs", "scrapeId": "499444d2-ad44-49d3-879b-ade80c3f9b84", "sourceURL": "https://templ.guide/server-side-rendering/datastar", "url": "https://templ.guide/server-side-rendering/datastar/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I datastar examples using templ in templ?\n\nAssistant: To datastar examples using templ in templ, here's what you do:\nThe Datastar website is built using Datastar and templ, so you can see how it works in practice.\n\nThe Datastar website contains a number of examples that demonstrate how to use Datastar. The examples are written in Go and use the templ package to generate the HTML.\n\nSee examples at [https://github.com/delaneyj/datastar/tree/main/backends/go/site](https://github.com/delaneyj/datastar/tree/main/backends/go/site)\n\nThis document will walk you through how to create a simple counter example using Datastar, following the [example](https://data-star.dev/examples/templ_counter) in the Datastar website..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/datastar", "title": "Datastar Documentation", "description": "Datastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:36:10", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://templ.guide/server-side-rendering/datastar/", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/server-side-rendering/datastar/", "docusaurus_locale": "en", "title": "Datastar | templ docs", "description": "Datastar is a hypermedia framework that is similar to HTMX.", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:description": "Datastar is a hypermedia framework that is similar to HTMX.", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_version": "current", "ogDescription": "Datastar is a hypermedia framework that is similar to HTMX.", "ogTitle": "Datastar | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Datastar | templ docs", "scrapeId": "499444d2-ad44-49d3-879b-ade80c3f9b84", "sourceURL": "https://templ.guide/server-side-rendering/datastar", "url": "https://templ.guide/server-side-rendering/datastar/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I counter example in templ?\n\nAssistant: To counter example in templ, here's what you do:\nWe are going to modify the [templ counter example](https://templ.guide/server-side-rendering/example-counter-application) to use Datastar.\n\n### Frontend\n\nFirst, define some HTML with two buttons. One to update a global state, and one to update a per-user state.\n\n```go\npackage site\n\nimport datastar \"github.com/starfederation/datastar/sdk/go\"\n\ntype TemplCounterSignals struct {\n\tGlobal uint32 `json:\"global\"`\n\tUser   uint32 `json:\"user\"`\n}\n\ntempl templCounterExampleButtons() {\n\t<div>\n\t\t<button\n\t\t\tdata-on-click=\"@post('/examples/templ_counter/increment/global')\"\n\t\t>\n\t\t\tIncrement Global\n\t\t</button>\n\t\t<button\n\t\t\tdata-on-click={ datastar.PostSSE('/examples/templ_counter/increment/user') }\n\t\t\t<!-- Alternative: Using Datastar SDK sugar-->\n\t\t>\n\t\t\tIncrement User\n\t\t</button>\n\t</div>\n}\n\ntempl templCounterExampleCounts() {\n\t<div>\n\t\t<div>\n\t\t\t<div>Global</div>\n\t\t\t<div data-text=\"$global\"></div>\n\t\t</div>\n\t\t<div>\n\t\t\t<div>User</div>\n\t\t\t<div data-text=\"$user\"></div>\n\t\t</div>\n\t</div>\n}\n\ntempl templCounterExampleInitialContents(signals TemplCounterSignals) {\n\t<div\n\t\tid=\"container\"\n\t\tdata-signals={ templ.JSONString(signals) }\n\t>\n\t\t@templCounterExampleButtons()\n\t\t@templCounterExampleCounts()\n\t</div>\n}\n```\n\nNote that Datastar doesn't promote the use of forms because they are ill-suited to nested reactive content. Instead, it sends all reactive state (as JSON) to the server on each request. This means far less bookkeeping and more predictable state management.\n\n`data-signals` is a special attribute that Datastar uses to merge one or more signals into the existing signals. In the example, we store $global and $user when we initially render the container.\n\n`data-on-click=\"@post('/examples/templ_counter/increment/global')\"` is an attribute expression that says \"When this element is clicked, send a POST request to the server to the specified URL\". The `@post` is an action that is a sandboxed function that knows about things like signals.\n\n`data-text=\"$global\"` is an attribute expression that says \"replace the contents of this element with the value of the `global` signal in the store\". This is a reactive signal that will update the page when the value changes, which we'll see in a moment.\n\n### Backend\n\nNote the use of Datastar's helpers to set up SSE.\n\n```go\npackage site\n\nimport (\n\t\"net/http\"\n\t\"sync/atomic\"\n\n\t\"github.com/Jeffail/gabs/v2\"\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/gorilla/sessions\"\n\tdatastar \"github.com/starfederation/datastar/sdk/go\"\n)\n\nfunc setupExamplesTemplCounter(examplesRouter chi.Router, sessionSignals sessions.Store) error {\n\n\tvar globalCounter atomic.Uint32\n\tconst (\n\t\tsessionKey = \"templ_counter\"\n\t\tcountKey   = \"count\"\n\t)\n\n\tuserVal := func(r *http.Request) (uint32, *sessions.Session, error) {\n\t\tsess, err := sessionSignals.Get(r, sessionKey)\n\t\tif err != nil {\n\t\t\treturn 0, nil, err\n\t\t}\n\n\t\tval, ok := sess.Values[countKey].(uint32)\n\t\tif !ok {\n\t\t\tval = 0\n\t\t}\n\t\treturn val, sess, nil\n\t}\n\n\texamplesRouter.Get(\"/templ_counter/data\", func(w http.ResponseWriter, r *http.Request) {\n\t\tuserVal, _, err := userVal(r)\n\t\tif err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\n\t\tsignals := TemplCounterSignals{\n\t\t\tGlobal: globalCounter.Load(),\n\t\t\tUser:   userVal,\n\t\t}\n\n\t\tc := templCounterExampleInitialContents(signals)\n\t\tdatastar.NewSSE(w, r).MergeFragmentTempl(c)\n\t})\n\n\tupdateGlobal := func(signals *gabs.Container) {\n\t\tsignals.Set(globalCounter.Add(1), \"global\")\n\t}\n\n\texamplesRouter.Route(\"/templ_counter/increment\", func(incrementRouter chi.Router) {\n\t\tincrementRouter.Post(\"/global\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tupdate := gabs.New()\n\t\t\tupdateGlobal(update)\n\n\t\t\tdatastar.NewSSE(w, r).MarshalAndMergeSignals(update)\n\t\t})\n\n\t\tincrementRouter.Post(\"/user\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tval, sess, err := userVal(r)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t}\n\n\t\t\tval++\n\t\t\tsess.Values[countKey] = val\n\t\t\tif err := sess.Save(r, w); err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t}\n\n\t\t\tupdate := gabs.New()\n\t\t\tupdateGlobal(update)\n\t\t\tupdate.Set(val, \"user\")\n\n\t\t\tdatastar.NewSSE(w, r).MarshalAndMergeSignals(update)\n\t\t})\n\t})\n\n\treturn nil\n}\n```\n\nThe `atomic.Uint32` type stores the global state. The `userVal` function is a helper that retrieves the user's session state. The `updateGlobal` function increments the global state.\n\nIn this example, the global state is stored in RAM and will be lost when the web server reboots. To support load-balanced web servers and stateless function deployments, consider storing the state in a data store such as [NATS KV](https://docs.nats.io/using-nats/developer/develop_jetstream/kv)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/datastar", "title": "Datastar Documentation", "description": "Datastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:36:10", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://templ.guide/server-side-rendering/datastar/", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/server-side-rendering/datastar/", "docusaurus_locale": "en", "title": "Datastar | templ docs", "description": "Datastar is a hypermedia framework that is similar to HTMX.", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:description": "Datastar is a hypermedia framework that is similar to HTMX.", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_version": "current", "ogDescription": "Datastar is a hypermedia framework that is similar to HTMX.", "ogTitle": "Datastar | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Datastar | templ docs", "scrapeId": "499444d2-ad44-49d3-879b-ade80c3f9b84", "sourceURL": "https://templ.guide/server-side-rendering/datastar", "url": "https://templ.guide/server-side-rendering/datastar/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I per-user session state in templ?\n\nAssistant: To per-user session state in templ, here's what you do:\nIn an HTTP application, per-user state information is partitioned by an HTTP cookie. Cookies that identify a user while they're using a site are known as \"session cookies\". When the HTTP handler receives a request, it can read the session ID of the user from the cookie and retrieve any required state..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/datastar", "title": "Datastar Documentation", "description": "Datastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:36:10", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://templ.guide/server-side-rendering/datastar/", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/server-side-rendering/datastar/", "docusaurus_locale": "en", "title": "Datastar | templ docs", "description": "Datastar is a hypermedia framework that is similar to HTMX.", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:description": "Datastar is a hypermedia framework that is similar to HTMX.", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_version": "current", "ogDescription": "Datastar is a hypermedia framework that is similar to HTMX.", "ogTitle": "Datastar | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Datastar | templ docs", "scrapeId": "499444d2-ad44-49d3-879b-ade80c3f9b84", "sourceURL": "https://templ.guide/server-side-rendering/datastar", "url": "https://templ.guide/server-side-rendering/datastar/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I signal-only patching in templ?\n\nAssistant: To signal-only patching in templ, here's what you do:\nSince the page's elements aren't changing dynamically, we can use the `MarshalAndMergeSignals` function to send only the signals that have changed. This is a more efficient way to update the page without even needing to send HTML fragments.\n\nDatastar will merge updates to signals similar to a JSON merge patch. This means you can do dynamic partial updates to the store and the page will update accordingly. [Gabs](https://pkg.go.dev/github.com/Jeffail/gabs/v2#section-readme) is used here to handle dynamic JSON in Go..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/datastar", "title": "Datastar Documentation", "description": "Datastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:36:10", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://templ.guide/server-side-rendering/datastar/", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/server-side-rendering/datastar/", "docusaurus_locale": "en", "title": "Datastar | templ docs", "description": "Datastar is a hypermedia framework that is similar to HTMX.", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:description": "Datastar is a hypermedia framework that is similar to HTMX.", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_version": "current", "ogDescription": "Datastar is a hypermedia framework that is similar to HTMX.", "ogTitle": "Datastar | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Datastar | templ docs", "scrapeId": "499444d2-ad44-49d3-879b-ade80c3f9b84", "sourceURL": "https://templ.guide/server-side-rendering/datastar", "url": "https://templ.guide/server-side-rendering/datastar/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Datastar Documentation in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Frontend Example**:\n\n```yaml\n```go\npackage site\n\nimport datastar \"github.com/starfederation/datastar/sdk/go\"\n\ntype TemplCounterSignals struct {\n\tGlobal uint32 `json:\"global\"`\n\tUser   uint32 `json:\"user\"`\n}\n\ntempl templCounterExampleButtons() {\n\t<div>\n\t\t<button\n\t\t\tdata-on-click=\"@post('/examples/templ_counter/increment/global')\"\n\t\t>\n\t\t\tIncrement Global\n\t\t</button>\n\t\t<button\n\t\t\tdata-on-click={ datastar.PostSSE('/examples/templ_counter/increment/user') }\n\t\t\t<!-- Alternative: Using Datastar SDK sugar-->\n\t\t>\n\t\t\tIncrement User\n\t\t</button>\n\t</div>\n}\n\ntempl templCounterExampleCounts() {\n\t<div>\n\t\t<div>\n\t\t\t<div>Global</div>\n\t\t\t<div data-text=\"$global\"></div>\n\t\t</div>\n\t\t<div>\n\t\t\t<div>User</div>\n\t\t\t<div data-text=\"$user\"></div>\n\t\t</div>\n\t</div>\n}\n\ntempl templCounterExampleInitialContents(signals TemplCounterSignals) {\n\t<div\n\t\tid=\"container\"\n\t\tdata-signals={ templ.JSONString(signals) }\n\t>\n\t\t@templCounterExampleButtons()\n\t\t@templCounterExampleCounts()\n\t</div>\n}\n```\n```\n\nThis snippet shows you how to frontend example, which is an important aspect of datastar documentation.\n\n**Backend Example**:\n\n```yaml\n```go\npackage site\n\nimport (\n\t\"net/http\"\n\t\"sync/atomic\"\n\n\t\"github.com/Jeffail/gabs/v2\"\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/gorilla/sessions\"\n\tdatastar \"github.com/starfederation/datastar/sdk/go\"\n)\n\nfunc setupExamplesTemplCounter(examplesRouter chi.Router, sessionSignals sessions.Store) error {\n\n\tvar globalCounter atomic.Uint32\n\tconst (\n\t\tsessionKey = \"templ_counter\"\n\t\tcountKey   = \"count\"\n\t)\n\n\tuserVal := func(r *http.Request) (uint32, *sessions.Session, error) {\n\t\tsess, err := sessionSignals.Get(r, sessionKey)\n\t\tif err != nil {\n\t\t\treturn 0, nil, err\n\t\t}\n\n\t\tval, ok := sess.Values[countKey].(uint32)\n\t\tif !ok {\n\t\t\tval = 0\n\t\t}\n\t\treturn val, sess, nil\n\t}\n\n\texamplesRouter.Get(\"/templ_counter/data\", func(w http.ResponseWriter, r *http.Request) {\n\t\tuserVal, _, err := userVal(r)\n\t\tif err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\n\t\tsignals := TemplCounterSignals{\n\t\t\tGlobal: globalCounter.Load(),\n\t\t\tUser:   userVal,\n\t\t}\n\n\t\tc := templCounterExampleInitialContents(signals)\n\t\tdatastar.NewSSE(w, r).MergeFragmentTempl(c)\n\t})\n\n\tupdateGlobal := func(signals *gabs.Container) {\n\t\tsignals.Set(globalCounter.Add(1), \"global\")\n\t}\n\n\texamplesRouter.Route(\"/templ_counter/increment\", func(incrementRouter chi.Router) {\n\t\tincrementRouter.Post(\"/global\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tupdate := gabs.New()\n\t\t\tupdateGlobal(update)\n\n\t\t\tdatastar.NewSSE(w, r).MarshalAndMergeSignals(update)\n\t\t})\n\n\t\tincrementRouter.Post(\"/user\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tval, sess, err := userVal(r)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t}\n\n\t\t\tval++\n\t\t\tsess.Values[countKey] = val\n\t\t\tif err := sess.Save(r, w); err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t}\n\n\t\t\tupdate := gabs.New()\n\t\t\tupdateGlobal(update)\n\t\t\tupdate.Set(val, \"user\")\n\n\t\t\tdatastar.NewSSE(w, r).MarshalAndMergeSignals(update)\n\t\t})\n\t})\n\n\treturn nil\n}\n```\n```\n\nThis snippet shows you how to backend example, which is an important aspect of datastar documentation.\n\n", "metadata": {"source_url": "https://templ.guide/server-side-rendering/datastar", "title": "Datastar Documentation", "description": "Datastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:36:10", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://templ.guide/server-side-rendering/datastar/", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/server-side-rendering/datastar/", "docusaurus_locale": "en", "title": "Datastar | templ docs", "description": "Datastar is a hypermedia framework that is similar to HTMX.", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:description": "Datastar is a hypermedia framework that is similar to HTMX.", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_version": "current", "ogDescription": "Datastar is a hypermedia framework that is similar to HTMX.", "ogTitle": "Datastar | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Datastar | templ docs", "scrapeId": "499444d2-ad44-49d3-879b-ade80c3f9b84", "sourceURL": "https://templ.guide/server-side-rendering/datastar", "url": "https://templ.guide/server-side-rendering/datastar/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Datastar Documentation in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nDatastar doesn't promote the use of forms because they are ill-suited to nested reactive content. Instead, it sends all reactive state (as JSON) to the server on each request, leading to less bookkeeping and more predictable state management.\n\nIn this example, the global state is stored in RAM and will be lost when the web server reboots. To support load-balanced web servers and stateless function deployments, consider storing the state in a data store such as NATS KV.\n\nDatastar will merge updates to signals similar to a JSON merge patch, allowing for dynamic partial updates to the store.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/datastar", "title": "Datastar Documentation", "description": "Datastar is a hypermedia framework that selectively replaces content within a web page by combining fine-grained reactive signals with SSE, geared primarily to real-time applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:36:10", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogUrl": "https://templ.guide/server-side-rendering/datastar/", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "og:url": "https://templ.guide/server-side-rendering/datastar/", "docusaurus_locale": "en", "title": "Datastar | templ docs", "description": "Datastar is a hypermedia framework that is similar to HTMX.", "og:locale": "en", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "twitter:card": "summary_large_image", "og:description": "Datastar is a hypermedia framework that is similar to HTMX.", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_version": "current", "ogDescription": "Datastar is a hypermedia framework that is similar to HTMX.", "ogTitle": "Datastar | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Datastar | templ docs", "scrapeId": "499444d2-ad44-49d3-879b-ade80c3f9b84", "sourceURL": "https://templ.guide/server-side-rendering/datastar", "url": "https://templ.guide/server-side-rendering/datastar/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Example Counter Application is in templ?\n\nAssistant: Sure, I'd be happy to explain Example Counter Application in templ.\n\n# Example Counter Application\n\nThis page covers how to manage global and per-user state in a web application using server-side rendering.Here's a quick rundown of what this is about:\n\n## Updating global state\n\nFirst, define a HTML form post with two buttons. One to update a global state, and one for a per-user state.\n\n```go\npackage main\n\nimport \"strconv\"\n\ntempl counts(global, user int) {\n\t<div>Global: { strconv.Itoa(global) }</div>\n\t<div>User: { strconv.Itoa(user) }</div>\n}\n\ntempl form() {\n\t<form action=\"/\" method=\"POST\">\n\t\t<div><button type=\"submit\" name=\"global\" value=\"global\">Global</button></div>\n\t\t<div><button type=\"submit\" name=\"user\" value=\"user\">User</button></div>\n\t</form>\n}\n\ntempl page(global, user int) {\n\t@counts(global, user)\n\t@form()\n}\n``` \n\nWhile we could read the global state directly, we're following the best practice that templ components are idempotent, pure functions.\n\nThe HTTP form in the templates posts data back to the `/` handler.\n\nThe `/` handler looks at the HTTP request. If it's a GET request, the templ templates are rendered by the `getHandler`.\n\nIf it's a POST request, then the `postHandler` is used. This parses the data sent over HTTP, and looks to see if the `global` button was the button that submitted the form, and increments the global count value if it was.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\ntype GlobalState struct {\n\tCount int\n}\n\nvar global GlobalState\n\nfunc getHandler(w http.ResponseWriter, r *http.Request) {\n\tcomponent := page(global.Count, 0)\n\tcomponent.Render(r.Context(), w)\n}\n\nfunc postHandler(w http.ResponseWriter, r *http.Request) {\n\t// Update state.\n\tr.ParseForm()\n\n\t// Check to see if the global button was pressed.\n\tif r.Form.Has(\"global\") {\n\t\tglobal.Count++\n\t}\n\t//TODO: Update session.\n\n\t// Display the form.\n\tgetHandler(w, r)\n}\n\nfunc main() {\n\t// Handle POST and GET requests.\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// Start the server.\n\tfmt.Println(\"listening on http://localhost:8000\")\n\tif err := http.ListenAndServe(\"localhost:8000\", nil); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\nIn this example, the global state is stored in RAM, and will be lost when the web server reboots. To support load-balanced web servers, and stateless function deployments, you might consider storing the state in a data store such as Redis, DynamoDB, or Cloud Firestore.\n\n## Adding per-user session state\n\nIn a HTTP application, per-user state information is partitioned by a HTTP cookie. Setting a cookie with a unique random value for each user (typically a V4 UUID or similar) allows the HTTP handlers to identify each user by reading the cookie value presented by the user's browser.\n\nCookies that identify a user while they're using a site are known as \"session cookies\". When the HTTP handler receives a request, it can read the session ID of the user from the cookie and retrieve any required state.\n\nYou can implement session cookies yourself, or use an existing library.\n\nThis example uses the [https://github.com/alexedwards/scs](https://github.com/alexedwards/scs) library to implement per-user sessions.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/alexedwards/scs/v2\"\n)\n\ntype GlobalState struct {\n\tCount int\n}\n\nvar global GlobalState\nvar sessionManager *scs.SessionManager\n\nfunc getHandler(w http.ResponseWriter, r *http.Request) {\n\tuserCount := sessionManager.GetInt(r.Context(), \"count\")\n\tcomponent := page(global.Count, userCount)\n\tcomponent.Render(r.Context(), w)\n}\n\nfunc postHandler(w http.ResponseWriter, r *http.Request) {\n\t// Update state.\n\tr.ParseForm()\n\n\t// Check to see if the global button was pressed.\n\tif r.Form.Has(\"global\") {\n\t\tglobal.Count++\n\t}\n\tif r.Form.Has(\"user\") {\n\t\tcurrentCount := sessionManager.GetInt(r.Context(), \"count\")\n\t\tsessionManager.Put(r.Context(), \"count\", currentCount+1)\n\t}\n\n\t// Display the form.\n\tgetHandler(w, r)\n}\n\nfunc main() {\n\t// Initialize the session.\n\tsessionManager = scs.New()\n\tsessionManager.Lifetime = 24 * time.Hour\n\n\tmux := http.NewServeMux()\n\n\t// Handle POST and GET requests.\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// Add the middleware.\n\tmuxWithSessionMiddleware := sessionManager.LoadAndSave(mux)\n\n\t// Start the server.\n\tfmt.Println(\"listening on http://localhost:8000\")\n\tif err := http.ListenAndServe(\"localhost:8000\", muxWithSessionMiddleware); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\nIncrementing a count by reading and setting the value is not an atomic operation (not thread-safe). In a production application, to increment a per-user count you may wish to use a database that provides a transactional increment operation.\n\nThe default behaviour of `scs` is to store session data in RAM, which isn't suitable for stateless function deployments, or load-balanced applications, but the library supports a range of backend storage solutions.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/example-counter-application", "title": "Example Counter Application", "description": "This page covers how to manage global and per-user state in a web application using server-side rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:39:12", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:title": "Example: Counter application | templ docs", "ogLocale": "en", "ogUrl": "https://templ.guide/server-side-rendering/example-counter-application/", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "ogDescription": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "ogTitle": "Example: Counter application | templ docs", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/example-counter-application/", "description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "og:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "docsearch:version": "current", "title": "Example: Counter application | templ docs", "og:locale": "en", "scrapeId": "692f24a1-be1e-4a5a-8a75-e3fbebcd54fb", "sourceURL": "https://templ.guide/server-side-rendering/example-counter-application", "url": "https://templ.guide/server-side-rendering/example-counter-application/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I updating global state in templ?\n\nAssistant: To updating global state in templ, here's what you do:\nFirst, define a HTML form post with two buttons. One to update a global state, and one for a per-user state.\n\n```go\npackage main\n\nimport \"strconv\"\n\ntempl counts(global, user int) {\n\t<div>Global: { strconv.Itoa(global) }</div>\n\t<div>User: { strconv.Itoa(user) }</div>\n}\n\ntempl form() {\n\t<form action=\"/\" method=\"POST\">\n\t\t<div><button type=\"submit\" name=\"global\" value=\"global\">Global</button></div>\n\t\t<div><button type=\"submit\" name=\"user\" value=\"user\">User</button></div>\n\t</form>\n}\n\ntempl page(global, user int) {\n\t@counts(global, user)\n\t@form()\n}\n``` \n\nWhile we could read the global state directly, we're following the best practice that templ components are idempotent, pure functions.\n\nThe HTTP form in the templates posts data back to the `/` handler.\n\nThe `/` handler looks at the HTTP request. If it's a GET request, the templ templates are rendered by the `getHandler`.\n\nIf it's a POST request, then the `postHandler` is used. This parses the data sent over HTTP, and looks to see if the `global` button was the button that submitted the form, and increments the global count value if it was.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\ntype GlobalState struct {\n\tCount int\n}\n\nvar global GlobalState\n\nfunc getHandler(w http.ResponseWriter, r *http.Request) {\n\tcomponent := page(global.Count, 0)\n\tcomponent.Render(r.Context(), w)\n}\n\nfunc postHandler(w http.ResponseWriter, r *http.Request) {\n\t// Update state.\n\tr.ParseForm()\n\n\t// Check to see if the global button was pressed.\n\tif r.Form.Has(\"global\") {\n\t\tglobal.Count++\n\t}\n\t//TODO: Update session.\n\n\t// Display the form.\n\tgetHandler(w, r)\n}\n\nfunc main() {\n\t// Handle POST and GET requests.\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// Start the server.\n\tfmt.Println(\"listening on http://localhost:8000\")\n\tif err := http.ListenAndServe(\"localhost:8000\", nil); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\nIn this example, the global state is stored in RAM, and will be lost when the web server reboots. To support load-balanced web servers, and stateless function deployments, you might consider storing the state in a data store such as Redis, DynamoDB, or Cloud Firestore..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/example-counter-application", "title": "Example Counter Application", "description": "This page covers how to manage global and per-user state in a web application using server-side rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:39:12", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:title": "Example: Counter application | templ docs", "ogLocale": "en", "ogUrl": "https://templ.guide/server-side-rendering/example-counter-application/", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "ogDescription": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "ogTitle": "Example: Counter application | templ docs", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/example-counter-application/", "description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "og:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "docsearch:version": "current", "title": "Example: Counter application | templ docs", "og:locale": "en", "scrapeId": "692f24a1-be1e-4a5a-8a75-e3fbebcd54fb", "sourceURL": "https://templ.guide/server-side-rendering/example-counter-application", "url": "https://templ.guide/server-side-rendering/example-counter-application/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I adding per-user session state in templ?\n\nAssistant: To adding per-user session state in templ, here's what you do:\nIn a HTTP application, per-user state information is partitioned by a HTTP cookie. Setting a cookie with a unique random value for each user (typically a V4 UUID or similar) allows the HTTP handlers to identify each user by reading the cookie value presented by the user's browser.\n\nCookies that identify a user while they're using a site are known as \"session cookies\". When the HTTP handler receives a request, it can read the session ID of the user from the cookie and retrieve any required state.\n\nYou can implement session cookies yourself, or use an existing library.\n\nThis example uses the [https://github.com/alexedwards/scs](https://github.com/alexedwards/scs) library to implement per-user sessions.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/alexedwards/scs/v2\"\n)\n\ntype GlobalState struct {\n\tCount int\n}\n\nvar global GlobalState\nvar sessionManager *scs.SessionManager\n\nfunc getHandler(w http.ResponseWriter, r *http.Request) {\n\tuserCount := sessionManager.GetInt(r.Context(), \"count\")\n\tcomponent := page(global.Count, userCount)\n\tcomponent.Render(r.Context(), w)\n}\n\nfunc postHandler(w http.ResponseWriter, r *http.Request) {\n\t// Update state.\n\tr.ParseForm()\n\n\t// Check to see if the global button was pressed.\n\tif r.Form.Has(\"global\") {\n\t\tglobal.Count++\n\t}\n\tif r.Form.Has(\"user\") {\n\t\tcurrentCount := sessionManager.GetInt(r.Context(), \"count\")\n\t\tsessionManager.Put(r.Context(), \"count\", currentCount+1)\n\t}\n\n\t// Display the form.\n\tgetHandler(w, r)\n}\n\nfunc main() {\n\t// Initialize the session.\n\tsessionManager = scs.New()\n\tsessionManager.Lifetime = 24 * time.Hour\n\n\tmux := http.NewServeMux()\n\n\t// Handle POST and GET requests.\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// Add the middleware.\n\tmuxWithSessionMiddleware := sessionManager.LoadAndSave(mux)\n\n\t// Start the server.\n\tfmt.Println(\"listening on http://localhost:8000\")\n\tif err := http.ListenAndServe(\"localhost:8000\", muxWithSessionMiddleware); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\nIncrementing a count by reading and setting the value is not an atomic operation (not thread-safe). In a production application, to increment a per-user count you may wish to use a database that provides a transactional increment operation.\n\nThe default behaviour of `scs` is to store session data in RAM, which isn't suitable for stateless function deployments, or load-balanced applications, but the library supports a range of backend storage solutions..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/example-counter-application", "title": "Example Counter Application", "description": "This page covers how to manage global and per-user state in a web application using server-side rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:39:12", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:title": "Example: Counter application | templ docs", "ogLocale": "en", "ogUrl": "https://templ.guide/server-side-rendering/example-counter-application/", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "ogDescription": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "ogTitle": "Example: Counter application | templ docs", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/example-counter-application/", "description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "og:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "docsearch:version": "current", "title": "Example: Counter application | templ docs", "og:locale": "en", "scrapeId": "692f24a1-be1e-4a5a-8a75-e3fbebcd54fb", "sourceURL": "https://templ.guide/server-side-rendering/example-counter-application", "url": "https://templ.guide/server-side-rendering/example-counter-application/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Example Counter Application in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Updating global state - HTML Form**:\n\n```yaml\n```go\npackage main\n\nimport \"strconv\"\n\ntempl counts(global, user int) {\n\t<div>Global: { strconv.Itoa(global) }</div>\n\t<div>User: { strconv.Itoa(user) }</div>\n}\n\ntempl form() {\n\t<form action=\"/\" method=\"POST\">\n\t\t<div><button type=\"submit\" name=\"global\" value=\"global\">Global</button></div>\n\t\t<div><button type=\"submit\" name=\"user\" value=\"user\">User</button></div>\n\t</form>\n}\n\ntempl page(global, user int) {\n\t@counts(global, user)\n\t@form()\n}\n```\n```\n\nThis snippet shows you how to updating global state - html form, which is an important aspect of example counter application.\n\n**Updating global state - Go Server Code**:\n\n```yaml\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\ntype GlobalState struct {\n\tCount int\n}\n\nvar global GlobalState\n\nfunc getHandler(w http.ResponseWriter, r *http.Request) {\n\tcomponent := page(global.Count, 0)\n\tcomponent.Render(r.Context(), w)\n}\n\nfunc postHandler(w http.ResponseWriter, r *http.Request) {\n\t// Update state.\n\tr.ParseForm()\n\n\t// Check to see if the global button was pressed.\n\tif r.Form.Has(\"global\") {\n\t\tglobal.Count++\n\t}\n\t//TODO: Update session.\n\n\t// Display the form.\n\tgetHandler(w, r)\n}\n\nfunc main() {\n\t// Handle POST and GET requests.\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// Start the server.\n\tfmt.Println(\"listening on http://localhost:8000\")\n\tif err := http.ListenAndServe(\"localhost:8000\", nil); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n```\n\nThis snippet shows you how to updating global state - go server code, which is an important aspect of example counter application.\n\n**Adding per-user session state - Go Server Code**:\n\n```yaml\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/alexedwards/scs/v2\"\n)\n\ntype GlobalState struct {\n\tCount int\n}\n\nvar global GlobalState\nvar sessionManager *scs.SessionManager\n\nfunc getHandler(w http.ResponseWriter, r *http.Request) {\n\tuserCount := sessionManager.GetInt(r.Context(), \"count\")\n\tcomponent := page(global.Count, userCount)\n\tcomponent.Render(r.Context(), w)\n}\n\nfunc postHandler(w http.ResponseWriter, r *http.Request) {\n\t// Update state.\n\tr.ParseForm()\n\n\t// Check to see if the global button was pressed.\n\tif r.Form.Has(\"global\") {\n\t\tglobal.Count++\n\t}\n\tif r.Form.Has(\"user\") {\n\t\tcurrentCount := sessionManager.GetInt(r.Context(), \"count\")\n\t\tsessionManager.Put(r.Context(), \"count\", currentCount+1)\n\t}\n\n\t// Display the form.\n\tgetHandler(w, r)\n}\n\nfunc main() {\n\t// Initialize the session.\n\tsessionManager = scs.New()\n\tsessionManager.Lifetime = 24 * time.Hour\n\n\tmux := http.NewServeMux()\n\n\t// Handle POST and GET requests.\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// Add the middleware.\n\tmuxWithSessionMiddleware := sessionManager.LoadAndSave(mux)\n\n\t// Start the server.\n\tfmt.Println(\"listening on http://localhost:8000\")\n\tif err := http.ListenAndServe(\"localhost:8000\", muxWithSessionMiddleware); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n```\n\nThis snippet shows you how to adding per-user session state - go server code, which is an important aspect of example counter application.\n\n", "metadata": {"source_url": "https://templ.guide/server-side-rendering/example-counter-application", "title": "Example Counter Application", "description": "This page covers how to manage global and per-user state in a web application using server-side rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:39:12", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:title": "Example: Counter application | templ docs", "ogLocale": "en", "ogUrl": "https://templ.guide/server-side-rendering/example-counter-application/", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "ogDescription": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "ogTitle": "Example: Counter application | templ docs", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/example-counter-application/", "description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "og:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "docsearch:version": "current", "title": "Example: Counter application | templ docs", "og:locale": "en", "scrapeId": "692f24a1-be1e-4a5a-8a75-e3fbebcd54fb", "sourceURL": "https://templ.guide/server-side-rendering/example-counter-application", "url": "https://templ.guide/server-side-rendering/example-counter-application/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Example Counter Application in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nWhile we could read the global state directly, we're following the best practice that templ components are idempotent, pure functions.\n\nCookies are often used for authentication as well as for sessions.\n\nIncrementing a count by reading and setting the value is not an atomic operation (not thread-safe). In a production application, to increment a per-user count you may wish to use a database that provides a transactional increment operation.\n\nThe default behaviour of `scs` is to store session data in RAM, which isn't suitable for stateless function deployments, or load-balanced applications, but the library supports a range of backend storage solutions.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/example-counter-application", "title": "Example Counter Application", "description": "This page covers how to manage global and per-user state in a web application using server-side rendering.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:39:12", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:title": "Example: Counter application | templ docs", "ogLocale": "en", "ogUrl": "https://templ.guide/server-side-rendering/example-counter-application/", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_tag": "docs-default-current", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "ogDescription": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "ogTitle": "Example: Counter application | templ docs", "twitter:card": "summary_large_image", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/example-counter-application/", "description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "og:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:description": "Web applications typically need to store application state, some of which is per-user, and some of which is global.", "docsearch:version": "current", "title": "Example: Counter application | templ docs", "og:locale": "en", "scrapeId": "692f24a1-be1e-4a5a-8a75-e3fbebcd54fb", "sourceURL": "https://templ.guide/server-side-rendering/example-counter-application", "url": "https://templ.guide/server-side-rendering/example-counter-application/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what HTMX Documentation is in templ?\n\nAssistant: Sure, I'd be happy to explain HTMX Documentation in templ.\n\n# HTMX Documentation\n\nThis page covers the usage, installation, and examples of using HTMX for partial content updates in web applications.Here's a quick rundown of what this is about:\n\n## Usage\n\nUsing HTMX requires:\n\n- Installation of the HTMX client-side library.\n- Modifying the HTML markup to instruct the library to perform partial screen updates.\n\n## Installation\n\nTo install the HTMX library, download the `htmx.min.js` file and serve it via HTTP.\n\nThen add a `<script>` tag to the `<head>` section of your HTML with the `src` attribute pointing at the file.\n\n```html\n<script src=\"/assets/js/htmx.min.js\"></script>\n```\n\ninfo\n\nAdvanced HTMX installation and usage help is covered in the user guide at [https://htmx.org](https://htmx.org/).\n\n## Count example\n\nTo update the counts on the page without a full postback, the `hx-post=\"/\"` and `hx-select=\"#countsForm\"` attributes must be added to the `<form>` element, along with an `id` attribute to uniquely identify the element.\n\nAdding these attributes instructs the HTMX library to replace the browser's HTTP form POST and subsequent refresh with a request from HTMX instead. HTMX issues a HTTP POST operation to the `/` endpoint, and replaces the `<form>` element with the HTML that is returned.\n\nThe `/` endpoint returns a complete HTML page instead of just the updated `<form>` element HTML. The `hx-select=\"#countsForm\"` instructs HTMX to extract the HTML content within the `countsForm` element that is returned by the web server to replace the `<form>` element.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/htmx", "title": "HTMX Documentation", "description": "This page covers the usage, installation, and examples of using HTMX for partial content updates in web applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:51", "type": "overview", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docusaurus_version": "current", "og:title": "HTMX | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "ogUrl": "https://templ.guide/server-side-rendering/htmx/", "ogDescription": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "HTMX | templ docs", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/htmx/", "description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "title": "HTMX | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "scrapeId": "ddb13f17-882d-4334-b4ed-efd16cd12e45", "sourceURL": "https://templ.guide/server-side-rendering/htmx", "url": "https://templ.guide/server-side-rendering/htmx/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I usage in templ?\n\nAssistant: To usage in templ, here's what you do:\nUsing HTMX requires:\n\n- Installation of the HTMX client-side library.\n- Modifying the HTML markup to instruct the library to perform partial screen updates..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/htmx", "title": "HTMX Documentation", "description": "This page covers the usage, installation, and examples of using HTMX for partial content updates in web applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:51", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docusaurus_version": "current", "og:title": "HTMX | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "ogUrl": "https://templ.guide/server-side-rendering/htmx/", "ogDescription": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "HTMX | templ docs", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/htmx/", "description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "title": "HTMX | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "scrapeId": "ddb13f17-882d-4334-b4ed-efd16cd12e45", "sourceURL": "https://templ.guide/server-side-rendering/htmx", "url": "https://templ.guide/server-side-rendering/htmx/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I installation in templ?\n\nAssistant: To installation in templ, here's what you do:\nTo install the HTMX library, download the `htmx.min.js` file and serve it via HTTP.\n\nThen add a `<script>` tag to the `<head>` section of your HTML with the `src` attribute pointing at the file.\n\n```html\n<script src=\"/assets/js/htmx.min.js\"></script>\n```\n\ninfo\n\nAdvanced HTMX installation and usage help is covered in the user guide at [https://htmx.org](https://htmx.org/)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/htmx", "title": "HTMX Documentation", "description": "This page covers the usage, installation, and examples of using HTMX for partial content updates in web applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:51", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docusaurus_version": "current", "og:title": "HTMX | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "ogUrl": "https://templ.guide/server-side-rendering/htmx/", "ogDescription": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "HTMX | templ docs", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/htmx/", "description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "title": "HTMX | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "scrapeId": "ddb13f17-882d-4334-b4ed-efd16cd12e45", "sourceURL": "https://templ.guide/server-side-rendering/htmx", "url": "https://templ.guide/server-side-rendering/htmx/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I count example in templ?\n\nAssistant: To count example in templ, here's what you do:\nTo update the counts on the page without a full postback, the `hx-post=\"/\"` and `hx-select=\"#countsForm\"` attributes must be added to the `<form>` element, along with an `id` attribute to uniquely identify the element.\n\nAdding these attributes instructs the HTMX library to replace the browser's HTTP form POST and subsequent refresh with a request from HTMX instead. HTMX issues a HTTP POST operation to the `/` endpoint, and replaces the `<form>` element with the HTML that is returned.\n\nThe `/` endpoint returns a complete HTML page instead of just the updated `<form>` element HTML. The `hx-select=\"#countsForm\"` instructs HTMX to extract the HTML content within the `countsForm` element that is returned by the web server to replace the `<form>` element..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/htmx", "title": "HTMX Documentation", "description": "This page covers the usage, installation, and examples of using HTMX for partial content updates in web applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:51", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docusaurus_version": "current", "og:title": "HTMX | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "ogUrl": "https://templ.guide/server-side-rendering/htmx/", "ogDescription": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "HTMX | templ docs", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/htmx/", "description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "title": "HTMX | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "scrapeId": "ddb13f17-882d-4334-b4ed-efd16cd12e45", "sourceURL": "https://templ.guide/server-side-rendering/htmx", "url": "https://templ.guide/server-side-rendering/htmx/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for HTMX Documentation in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HTMX Script Tag**:\n\n```yaml\n<script src=\"/assets/js/htmx.min.js\"></script>\n```\n\nThis snippet shows you how to htmx script tag, which is an important aspect of htmx documentation.\n\n**Count Form Example**:\n\n```yaml\ntempl counts(global, session int) {\n\t<form id=\"countsForm\" action=\"/\" method=\"POST\" hx-post=\"/\" hx-select=\"#countsForm\" hx-swap=\"outerHTML\">\n\t\t<div class=\"columns\">\n\t\t\t<div class={ \"column\", \"has-text-centered\", \"is-primary\", border }>\n\t\t\t\t<h1 class=\"title is-size-1 has-text-centered\">{ strconv.Itoa(global) }</h1>\n\t\t\t\t<p class=\"subtitle has-text-centered\">Global</p>\n\t\t\t\t<div><button class=\"button is-primary\" type=\"submit\" name=\"global\" value=\"global\">+1</button></div>\n\t\t\t</div>\n\t\t\t<div class={ \"column\", \"has-text-centered\", border }>\n\t\t\t\t<h1 class=\"title is-size-1 has-text-centered\">{ strconv.Itoa(session) }</h1>\n\t\t\t\t<p class=\"subtitle has-text-centered\">Session</p>\n\t\t\t\t<div><button class=\"button is-secondary\" type=\"submit\" name=\"session\" value=\"session\">+1</button></div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n}\n```\n\nThis snippet shows you how to count form example, which is an important aspect of htmx documentation.\n\n", "metadata": {"source_url": "https://templ.guide/server-side-rendering/htmx", "title": "HTMX Documentation", "description": "This page covers the usage, installation, and examples of using HTMX for partial content updates in web applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:51", "type": "code_examples", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docusaurus_version": "current", "og:title": "HTMX | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "ogUrl": "https://templ.guide/server-side-rendering/htmx/", "ogDescription": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "HTMX | templ docs", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/htmx/", "description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "title": "HTMX | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "scrapeId": "ddb13f17-882d-4334-b4ed-efd16cd12e45", "sourceURL": "https://templ.guide/server-side-rendering/htmx", "url": "https://templ.guide/server-side-rendering/htmx/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using HTMX Documentation in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nAdvanced HTMX installation and usage help is covered in the user guide at https://htmx.org.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/htmx", "title": "HTMX Documentation", "description": "This page covers the usage, installation, and examples of using HTMX for partial content updates in web applications.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:39:51", "type": "best_practices", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docusaurus_version": "current", "og:title": "HTMX | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "ogUrl": "https://templ.guide/server-side-rendering/htmx/", "ogDescription": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "HTMX | templ docs", "docsearch:language": "en", "og:url": "https://templ.guide/server-side-rendering/htmx/", "description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "title": "HTMX | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "https://htmx.org can be used to selectively replace content within a web page, instead of replacing the whole page in the browser. This avoids \"full-page postbacks\", where the whole of the browser window is updated when a button is clicked, and results in a better user experience by reducing screen \"flicker\", or losing scroll position.", "scrapeId": "ddb13f17-882d-4334-b4ed-efd16cd12e45", "sourceURL": "https://templ.guide/server-side-rendering/htmx", "url": "https://templ.guide/server-side-rendering/htmx/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Server-Side Rendering with Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Server-Side Rendering with Templ in templ.\n\n# Server-Side Rendering with Templ\n\nThis page covers the rendering lifecycle, enabling streaming, and the concept of Suspense in server-side rendering using the Templ framework.Here's a quick rundown of what this is about:\n\n## Rendering lifecycle\n\nTypical usage of templ involves collecting data that is used to populate the template, before rendering the template and sending a response.\n\nFor example, executing several database queries, calling an API, or reading from a file, before rendering the template.\n\nRequest\n\nDB Queries\n\nQuery result\n\nQuery result\n\nAPI Calls\n\nAPI call result\n\nRender template\n\nHTML\n\nResponse\n\nHowever, if the queries and API calls take a long time, this has an impact on Time to First Byte (TTFB) because the client has to wait for all database queries and API calls to complete before sending the response.\n\nTo improve TTFB, the template can be streamed to the client as soon as the first part of the template is rendered, while the remaining queries and API calls are still in progress, at the cost of not being able to set response codes or headers after the first part of the template is rendered.\n\n## Enabling streaming\n\nStreaming can be enabled by setting the Streaming field of the templ.Handler to true using the WithStreaming option.\n\n```codeBlockLines_e6Vv\ntempl.Handler(component, templ.WithStreaming()).ServeHTTP(w, r)\n```\n\nWhen streaming is enabled, sections of the template can be forcefully pushed to the client using the templ.Flush() component.\n\nThis enables interesting use cases. For example, here, the Page template is rendered with a channel that is populated by a background goroutine.\n\nBy using templ.Flush() to create a flushable area, the data is pushed to the client as soon as it is available, rather than waiting for the entire template to render before sending a response.\n\n```codeBlockLines_e6Vv\ntempl Page(data chan string) {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<title>Page</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Page</h1>\n\t\t\tfor d := range data {\n\t\t\t\t@templ.Flush() {\n\t\t\t\t\t<div>{ d }</div>\n\t\t\t\t}\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```\n\n## Suspense\n\nMany modern web frameworks use a concept called \"Suspense\" to handle the loading of data and rendering of components.\n\nThis usually involves displaying placeholder content while the data is loading, and then rendering the component when the data is available.\n\nWith JavaScript frontends like React, the lifecycle is usually that the HTML is rendered, the JS loaded, the initial render that displays the placeholder is done, an API call is made back to the server to fetch data, and then the component is rendered.\n\nThis involves a lot of extra HTTP requests, and means that we have to wait until JavaScript is loaded before we can start fetching data.\n\nCombining templ's streaming capability with a new feature in web browsers called \"Declarative Shadow DOM\" means that we can perform the same action in a single HTTP request.\n\n## Declarative Shadow DOM\n\nFirst, we need to define a new templ component called Slot.\n\n```codeBlockLines_e6Vv\ntempl Slot(name string) {\n\t<slot name={ name }>\n\t\t<div>Loading { name }...</div>\n\t</slot>\n}\n```\n\nThis component is a placeholder that will be replaced by the contents of the slot when the data is available.\n\nNext, we can use a <template> element with shadowrootmode=\"open\" to create a shadow DOM that allows us to populate the <slot> elements with data.\n\nWe need to use @templ.Flush() to create a flushable area, so that the data is pushed to the client as soon as it is available, since populating the slots will take longer to complete.\n\nWe can then use a for loop over the channel of data to populate the slots with content, again, flushing the results to the browser when available.\n\nThe result is a simple way to load content after initial page load without the need to use JavaScript.\n\n```codeBlockLines_e6Vv\ntempl Page(data chan SlotContents) {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<title>Page</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Page</h1>\n\t\t\t@templ.Flush() {\n\t\t\t\t<template shadowrootmode=\"open\">\n\t\t\t\t\t@Slot(\"a\")\n\t\t\t\t\t@Slot(\"b\")\n\t\t\t\t\t@Slot(\"c\")\n\t\t\t\t</template>\n\t\t\t}\n\t\t\tfor sc := range data {\n\t\t\t\t@templ.Flush() {\n\t\t\t\t\t<div slot={ sc.Name }>\n\t\t\t\t\t\t@sc.Contents\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/streaming", "title": "Server-Side Rendering with Templ", "description": "This page covers the rendering lifecycle, enabling streaming, and the concept of Suspense in server-side rendering using the Templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:12", "type": "overview", "page_metadata": {"docusaurus_version": "current", "title": "HTTP Streaming | templ docs", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "og:title": "HTTP Streaming | templ docs", "description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogTitle": "HTTP Streaming | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/server-side-rendering/streaming/", "language": "en", "og:description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogLocale": "en", "ogDescription": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "twitter:card": "summary_large_image", "docsearch:language": "en", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:url": "https://templ.guide/server-side-rendering/streaming/", "scrapeId": "6a9b183a-65d1-4fdc-8a65-9363a788d725", "sourceURL": "https://templ.guide/server-side-rendering/streaming", "url": "https://templ.guide/server-side-rendering/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I rendering lifecycle in templ?\n\nAssistant: To rendering lifecycle in templ, here's what you do:\nTypical usage of templ involves collecting data that is used to populate the template, before rendering the template and sending a response.\n\nFor example, executing several database queries, calling an API, or reading from a file, before rendering the template.\n\nRequest\n\nDB Queries\n\nQuery result\n\nQuery result\n\nAPI Calls\n\nAPI call result\n\nRender template\n\nHTML\n\nResponse\n\nHowever, if the queries and API calls take a long time, this has an impact on Time to First Byte (TTFB) because the client has to wait for all database queries and API calls to complete before sending the response.\n\nTo improve TTFB, the template can be streamed to the client as soon as the first part of the template is rendered, while the remaining queries and API calls are still in progress, at the cost of not being able to set response codes or headers after the first part of the template is rendered..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/streaming", "title": "Server-Side Rendering with Templ", "description": "This page covers the rendering lifecycle, enabling streaming, and the concept of Suspense in server-side rendering using the Templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:12", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "title": "HTTP Streaming | templ docs", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "og:title": "HTTP Streaming | templ docs", "description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogTitle": "HTTP Streaming | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/server-side-rendering/streaming/", "language": "en", "og:description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogLocale": "en", "ogDescription": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "twitter:card": "summary_large_image", "docsearch:language": "en", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:url": "https://templ.guide/server-side-rendering/streaming/", "scrapeId": "6a9b183a-65d1-4fdc-8a65-9363a788d725", "sourceURL": "https://templ.guide/server-side-rendering/streaming", "url": "https://templ.guide/server-side-rendering/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I enabling streaming in templ?\n\nAssistant: To enabling streaming in templ, here's what you do:\nStreaming can be enabled by setting the Streaming field of the templ.Handler to true using the WithStreaming option.\n\n```codeBlockLines_e6Vv\ntempl.Handler(component, templ.WithStreaming()).ServeHTTP(w, r)\n```\n\nWhen streaming is enabled, sections of the template can be forcefully pushed to the client using the templ.Flush() component.\n\nThis enables interesting use cases. For example, here, the Page template is rendered with a channel that is populated by a background goroutine.\n\nBy using templ.Flush() to create a flushable area, the data is pushed to the client as soon as it is available, rather than waiting for the entire template to render before sending a response.\n\n```codeBlockLines_e6Vv\ntempl Page(data chan string) {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<title>Page</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Page</h1>\n\t\t\tfor d := range data {\n\t\t\t\t@templ.Flush() {\n\t\t\t\t\t<div>{ d }</div>\n\t\t\t\t}\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/streaming", "title": "Server-Side Rendering with Templ", "description": "This page covers the rendering lifecycle, enabling streaming, and the concept of Suspense in server-side rendering using the Templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:12", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "title": "HTTP Streaming | templ docs", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "og:title": "HTTP Streaming | templ docs", "description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogTitle": "HTTP Streaming | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/server-side-rendering/streaming/", "language": "en", "og:description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogLocale": "en", "ogDescription": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "twitter:card": "summary_large_image", "docsearch:language": "en", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:url": "https://templ.guide/server-side-rendering/streaming/", "scrapeId": "6a9b183a-65d1-4fdc-8a65-9363a788d725", "sourceURL": "https://templ.guide/server-side-rendering/streaming", "url": "https://templ.guide/server-side-rendering/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I suspense in templ?\n\nAssistant: To suspense in templ, here's what you do:\nMany modern web frameworks use a concept called \"Suspense\" to handle the loading of data and rendering of components.\n\nThis usually involves displaying placeholder content while the data is loading, and then rendering the component when the data is available.\n\nWith JavaScript frontends like React, the lifecycle is usually that the HTML is rendered, the JS loaded, the initial render that displays the placeholder is done, an API call is made back to the server to fetch data, and then the component is rendered.\n\nThis involves a lot of extra HTTP requests, and means that we have to wait until JavaScript is loaded before we can start fetching data.\n\nCombining templ's streaming capability with a new feature in web browsers called \"Declarative Shadow DOM\" means that we can perform the same action in a single HTTP request..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/streaming", "title": "Server-Side Rendering with Templ", "description": "This page covers the rendering lifecycle, enabling streaming, and the concept of Suspense in server-side rendering using the Templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:12", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "title": "HTTP Streaming | templ docs", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "og:title": "HTTP Streaming | templ docs", "description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogTitle": "HTTP Streaming | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/server-side-rendering/streaming/", "language": "en", "og:description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogLocale": "en", "ogDescription": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "twitter:card": "summary_large_image", "docsearch:language": "en", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:url": "https://templ.guide/server-side-rendering/streaming/", "scrapeId": "6a9b183a-65d1-4fdc-8a65-9363a788d725", "sourceURL": "https://templ.guide/server-side-rendering/streaming", "url": "https://templ.guide/server-side-rendering/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I declarative shadow dom in templ?\n\nAssistant: To declarative shadow dom in templ, here's what you do:\nFirst, we need to define a new templ component called Slot.\n\n```codeBlockLines_e6Vv\ntempl Slot(name string) {\n\t<slot name={ name }>\n\t\t<div>Loading { name }...</div>\n\t</slot>\n}\n```\n\nThis component is a placeholder that will be replaced by the contents of the slot when the data is available.\n\nNext, we can use a <template> element with shadowrootmode=\"open\" to create a shadow DOM that allows us to populate the <slot> elements with data.\n\nWe need to use @templ.Flush() to create a flushable area, so that the data is pushed to the client as soon as it is available, since populating the slots will take longer to complete.\n\nWe can then use a for loop over the channel of data to populate the slots with content, again, flushing the results to the browser when available.\n\nThe result is a simple way to load content after initial page load without the need to use JavaScript.\n\n```codeBlockLines_e6Vv\ntempl Page(data chan SlotContents) {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<title>Page</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Page</h1>\n\t\t\t@templ.Flush() {\n\t\t\t\t<template shadowrootmode=\"open\">\n\t\t\t\t\t@Slot(\"a\")\n\t\t\t\t\t@Slot(\"b\")\n\t\t\t\t\t@Slot(\"c\")\n\t\t\t\t</template>\n\t\t\t}\n\t\t\tfor sc := range data {\n\t\t\t\t@templ.Flush() {\n\t\t\t\t\t<div slot={ sc.Name }>\n\t\t\t\t\t\t@sc.Contents\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/server-side-rendering/streaming", "title": "Server-Side Rendering with Templ", "description": "This page covers the rendering lifecycle, enabling streaming, and the concept of Suspense in server-side rendering using the Templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:12", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "title": "HTTP Streaming | templ docs", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "og:title": "HTTP Streaming | templ docs", "description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogTitle": "HTTP Streaming | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/server-side-rendering/streaming/", "language": "en", "og:description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogLocale": "en", "ogDescription": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "twitter:card": "summary_large_image", "docsearch:language": "en", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:url": "https://templ.guide/server-side-rendering/streaming/", "scrapeId": "6a9b183a-65d1-4fdc-8a65-9363a788d725", "sourceURL": "https://templ.guide/server-side-rendering/streaming", "url": "https://templ.guide/server-side-rendering/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Server-Side Rendering with Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Enabling streaming example**:\n\n```yaml\ntempl.Handler(component, templ.WithStreaming()).ServeHTTP(w, r)\n```\n\nThis snippet shows you how to enabling streaming example, which is an important aspect of server-side rendering with templ.\n\n**Streaming Page example**:\n\n```yaml\ntempl Page(data chan string) {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<title>Page</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Page</h1>\n\t\t\tfor d := range data {\n\t\t\t\t@templ.Flush() {\n\t\t\t\t\t<div>{ d }</div>\n\t\t\t\t}\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```\n\nThis snippet shows you how to streaming page example, which is an important aspect of server-side rendering with templ.\n\n", "metadata": {"source_url": "https://templ.guide/server-side-rendering/streaming", "title": "Server-Side Rendering with Templ", "description": "This page covers the rendering lifecycle, enabling streaming, and the concept of Suspense in server-side rendering using the Templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:12", "type": "code_examples", "page_metadata": {"docusaurus_version": "current", "title": "HTTP Streaming | templ docs", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "og:title": "HTTP Streaming | templ docs", "description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogTitle": "HTTP Streaming | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/server-side-rendering/streaming/", "language": "en", "og:description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogLocale": "en", "ogDescription": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "twitter:card": "summary_large_image", "docsearch:language": "en", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:url": "https://templ.guide/server-side-rendering/streaming/", "scrapeId": "6a9b183a-65d1-4fdc-8a65-9363a788d725", "sourceURL": "https://templ.guide/server-side-rendering/streaming", "url": "https://templ.guide/server-side-rendering/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Server-Side Rendering with Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo improve Time to First Byte (TTFB), stream the template to the client as soon as the first part is rendered.\n\nUse templ.Flush() to push data to the client as soon as it is available, rather than waiting for the entire template to render.\n\nCombine templ's streaming capability with Declarative Shadow DOM for efficient data loading.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/server-side-rendering/streaming", "title": "Server-Side Rendering with Templ", "description": "This page covers the rendering lifecycle, enabling streaming, and the concept of Suspense in server-side rendering using the Templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:40:12", "type": "best_practices", "page_metadata": {"docusaurus_version": "current", "title": "HTTP Streaming | templ docs", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "og:title": "HTTP Streaming | templ docs", "description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogTitle": "HTTP Streaming | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/server-side-rendering/streaming/", "language": "en", "og:description": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "ogLocale": "en", "ogDescription": "The default behaviour of the templ.Handler is to render the template to a buffer and then write the buffer to the response.", "twitter:card": "summary_large_image", "docsearch:language": "en", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:url": "https://templ.guide/server-side-rendering/streaming/", "scrapeId": "6a9b183a-65d1-4fdc-8a65-9363a788d725", "sourceURL": "https://templ.guide/server-side-rendering/streaming", "url": "https://templ.guide/server-side-rendering/streaming/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Building a Static Blog with Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Building a Static Blog with Templ in templ.\n\n# Building a Static Blog with Templ\n\nThis example demonstrates building a static blog with templ.Here's a quick rundown of what this is about:\n\n## Create a blog template\n\nCreate a template for the site header and site content. Then, create a template for the content page and index page.\n\n```go\npackage main\n\nimport \"path\"\nimport \"github.com/gosimple/slug\"\n\ntempl headerComponent(title string) {\n\t<head><title>{ title }</title></head>\n}\n\ntempl contentComponent(title string, body templ.Component) {\n\t<body>\n\t\t<h1>{ title }</h1>\n\t\t<div class=\"content\">\n\t\t\t@body\n\t\t</div>\n\t</body>\n}\n\ntempl contentPage(title string, body templ.Component) {\n\t<html>\n\t\t@headerComponent(title)\n\t\t@contentComponent(title, body)\n\t</html>\n}\n\ntempl indexPage(posts []Post) {\n\t<html>\n\t\t@headerComponent(\"My Blog\")\n\t\t<body>\n\t\t\t<h1>My Blog</h1>\n\t\t\tfor _, post := range posts {\n\t\t\t\t<div><a href={ templ.SafeURL(path.Join(post.Date.Format(\"2006/01/02\"), slug.Make(post.Title), \"/\")) }>{ post.Title }</a></div>\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/static-rendering/blog-example", "title": "Building a Static Blog with Templ", "description": "This example demonstrates building a static blog with templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:40:32", "type": "overview", "page_metadata": {"ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Blog example | templ docs", "docsearch:version": "current", "ogDescription": "This example demonstrates building a static blog with templ.", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Blog example | templ docs", "og:title": "Blog example | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "description": "This example demonstrates building a static blog with templ.", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/blog-example/", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_locale": "en", "og:locale": "en", "docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/static-rendering/blog-example/", "og:description": "This example demonstrates building a static blog with templ.", "docusaurus_version": "current", "scrapeId": "4801703d-9688-4ff0-a5c9-dab420994aeb", "sourceURL": "https://templ.guide/static-rendering/blog-example", "url": "https://templ.guide/static-rendering/blog-example/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I create a blog template in templ?\n\nAssistant: To create a blog template in templ, here's what you do:\nCreate a template for the site header and site content. Then, create a template for the content page and index page.\n\n```go\npackage main\n\nimport \"path\"\nimport \"github.com/gosimple/slug\"\n\ntempl headerComponent(title string) {\n\t<head><title>{ title }</title></head>\n}\n\ntempl contentComponent(title string, body templ.Component) {\n\t<body>\n\t\t<h1>{ title }</h1>\n\t\t<div class=\"content\">\n\t\t\t@body\n\t\t</div>\n\t</body>\n}\n\ntempl contentPage(title string, body templ.Component) {\n\t<html>\n\t\t@headerComponent(title)\n\t\t@contentComponent(title, body)\n\t</html>\n}\n\ntempl indexPage(posts []Post) {\n\t<html>\n\t\t@headerComponent(\"My Blog\")\n\t\t<body>\n\t\t\t<h1>My Blog</h1>\n\t\t\tfor _, post := range posts {\n\t\t\t\t<div><a href={ templ.SafeURL(path.Join(post.Date.Format(\"2006/01/02\"), slug.Make(post.Title), \"/\")) }>{ post.Title }</a></div>\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/static-rendering/blog-example", "title": "Building a Static Blog with Templ", "description": "This example demonstrates building a static blog with templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:40:32", "type": "section_detail", "page_metadata": {"ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Blog example | templ docs", "docsearch:version": "current", "ogDescription": "This example demonstrates building a static blog with templ.", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Blog example | templ docs", "og:title": "Blog example | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "description": "This example demonstrates building a static blog with templ.", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/blog-example/", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_locale": "en", "og:locale": "en", "docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/static-rendering/blog-example/", "og:description": "This example demonstrates building a static blog with templ.", "docusaurus_version": "current", "scrapeId": "4801703d-9688-4ff0-a5c9-dab420994aeb", "sourceURL": "https://templ.guide/static-rendering/blog-example", "url": "https://templ.guide/static-rendering/blog-example/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Building a Static Blog with Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Post Struct Definition**:\n\n```yaml\ntype Post struct {\n\tDate    time.Time\n\tTitle   string\n\tContent string\n}\n```\n\nThis snippet shows you how to post struct definition, which is an important aspect of building a static blog with templ.\n\n", "metadata": {"source_url": "https://templ.guide/static-rendering/blog-example", "title": "Building a Static Blog with Templ", "description": "This example demonstrates building a static blog with templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:40:32", "type": "code_examples", "page_metadata": {"ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Blog example | templ docs", "docsearch:version": "current", "ogDescription": "This example demonstrates building a static blog with templ.", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Blog example | templ docs", "og:title": "Blog example | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "description": "This example demonstrates building a static blog with templ.", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/blog-example/", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_locale": "en", "og:locale": "en", "docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/static-rendering/blog-example/", "og:description": "This example demonstrates building a static blog with templ.", "docusaurus_version": "current", "scrapeId": "4801703d-9688-4ff0-a5c9-dab420994aeb", "sourceURL": "https://templ.guide/static-rendering/blog-example", "url": "https://templ.guide/static-rendering/blog-example/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Building a Static Blog with Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `Unsafe` function to write HTML directly to the output writer without escaping.\n\nEnsure to create the output directory before writing files to avoid errors.\n\nConvert markdown to HTML using `github.com/yuin/goldmark` before rendering.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/static-rendering/blog-example", "title": "Building a Static Blog with Templ", "description": "This example demonstrates building a static blog with templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:40:32", "type": "best_practices", "page_metadata": {"ogLocale": "en", "viewport": "width=device-width, initial-scale=1.0", "title": "Blog example | templ docs", "docsearch:version": "current", "ogDescription": "This example demonstrates building a static blog with templ.", "favicon": "https://templ.guide/img/favicon.ico", "ogTitle": "Blog example | templ docs", "og:title": "Blog example | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "docsearch:language": "en", "description": "This example demonstrates building a static blog with templ.", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/blog-example/", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "docusaurus_locale": "en", "og:locale": "en", "docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/static-rendering/blog-example/", "og:description": "This example demonstrates building a static blog with templ.", "docusaurus_version": "current", "scrapeId": "4801703d-9688-4ff0-a5c9-dab420994aeb", "sourceURL": "https://templ.guide/static-rendering/blog-example", "url": "https://templ.guide/static-rendering/blog-example/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Deploying Static Files is in templ?\n\nAssistant: Sure, I'd be happy to explain Deploying Static Files in templ.\n\n# Deploying Static Files\n\nThis page covers how to host static HTML files built with templ on various platforms.Here's a quick rundown of what this is about:\n\n## Hosting Options\n\nOnce you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them. Ways you could host your site include:\n\n- Fly.io\n- Netlify\n- Vercel\n- AWS Amplify\n- Firebase Hosting\n\nTypically specialist static hosting services are more cost-effective than VM or Docker-based services, due to the less complex compute and networking requirements. Most require you to commit your code to a source repository, with a build process being triggered on commit, but Fly.io allows you to deploy easily from the CLI.\n\n## fly.io\n\nFly.io is a provider of hosting that is straightforward to use, and has a generous free tier. Fly.io is Docker-based, so you can easily switch out to a dynamic website if you need to. Following on from the blog example, all that's required is to add a Dockerfile to the project that copies the contents of the `public` directory into the Docker image, followed by running `flyctl launch` to initialize configuration.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/static-rendering/deploying-static-files", "title": "Deploying Static Files", "description": "This page covers how to host static HTML files built with templ on various platforms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:59", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "og:url": "https://templ.guide/static-rendering/deploying-static-files/", "og:title": "Deploying static files | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/static-rendering/deploying-static-files/", "ogTitle": "Deploying static files | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "title": "Deploying static files | templ docs", "ogDescription": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "og:description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "b7c52328-4837-4d19-b8c8-cfb85590e80f", "sourceURL": "https://templ.guide/static-rendering/deploying-static-files", "url": "https://templ.guide/static-rendering/deploying-static-files/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I hosting options in templ?\n\nAssistant: To hosting options in templ, here's what you do:\nOnce you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them. Ways you could host your site include:\n\n- Fly.io\n- Netlify\n- Vercel\n- AWS Amplify\n- Firebase Hosting\n\nTypically specialist static hosting services are more cost-effective than VM or Docker-based services, due to the less complex compute and networking requirements. Most require you to commit your code to a source repository, with a build process being triggered on commit, but Fly.io allows you to deploy easily from the CLI..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/static-rendering/deploying-static-files", "title": "Deploying Static Files", "description": "This page covers how to host static HTML files built with templ on various platforms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:59", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "og:url": "https://templ.guide/static-rendering/deploying-static-files/", "og:title": "Deploying static files | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/static-rendering/deploying-static-files/", "ogTitle": "Deploying static files | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "title": "Deploying static files | templ docs", "ogDescription": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "og:description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "b7c52328-4837-4d19-b8c8-cfb85590e80f", "sourceURL": "https://templ.guide/static-rendering/deploying-static-files", "url": "https://templ.guide/static-rendering/deploying-static-files/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I fly.io in templ?\n\nAssistant: To fly.io in templ, here's what you do:\nFly.io is a provider of hosting that is straightforward to use, and has a generous free tier. Fly.io is Docker-based, so you can easily switch out to a dynamic website if you need to. Following on from the blog example, all that's required is to add a Dockerfile to the project that copies the contents of the `public` directory into the Docker image, followed by running `flyctl launch` to initialize configuration..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/static-rendering/deploying-static-files", "title": "Deploying Static Files", "description": "This page covers how to host static HTML files built with templ on various platforms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:59", "type": "section_detail", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "og:url": "https://templ.guide/static-rendering/deploying-static-files/", "og:title": "Deploying static files | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/static-rendering/deploying-static-files/", "ogTitle": "Deploying static files | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "title": "Deploying static files | templ docs", "ogDescription": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "og:description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "b7c52328-4837-4d19-b8c8-cfb85590e80f", "sourceURL": "https://templ.guide/static-rendering/deploying-static-files", "url": "https://templ.guide/static-rendering/deploying-static-files/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Deploying Static Files in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Dockerfile**:\n\n```yaml\nFROM pierrezemb/gostatic\nCOPY ./public/ /srv/http/\nENTRYPOINT [\"/goStatic\", \"-port\", \"8080\"]\n```\n\nThis snippet shows you how to dockerfile, which is an important aspect of deploying static files.\n\n", "metadata": {"source_url": "https://templ.guide/static-rendering/deploying-static-files", "title": "Deploying Static Files", "description": "This page covers how to host static HTML files built with templ on various platforms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:59", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "og:url": "https://templ.guide/static-rendering/deploying-static-files/", "og:title": "Deploying static files | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/static-rendering/deploying-static-files/", "ogTitle": "Deploying static files | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "title": "Deploying static files | templ docs", "ogDescription": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "og:description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "b7c52328-4837-4d19-b8c8-cfb85590e80f", "sourceURL": "https://templ.guide/static-rendering/deploying-static-files", "url": "https://templ.guide/static-rendering/deploying-static-files/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Deploying Static Files in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nSpecialist static hosting services are more cost-effective than VM or Docker-based services due to less complex compute and networking requirements.\n\nMost hosting services require committing code to a source repository with a build process triggered on commit.\n\nFly.io allows easy deployment from the CLI.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/static-rendering/deploying-static-files", "title": "Deploying Static Files", "description": "This page covers how to host static HTML files built with templ on various platforms.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:40:59", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "docsearch:version": "current", "og:url": "https://templ.guide/static-rendering/deploying-static-files/", "og:title": "Deploying static files | templ docs", "generator": "Docusaurus v3.6.3", "language": "en", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "ogLocale": "en", "ogUrl": "https://templ.guide/static-rendering/deploying-static-files/", "ogTitle": "Deploying static files | templ docs", "viewport": "width=device-width, initial-scale=1.0", "og:image": "https://templ.guide/img/social-card.jpg", "title": "Deploying static files | templ docs", "ogDescription": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "og:description": "Once you have built static HTML files with templ, you can serve them on any static site hosting platform, or use a web server to serve them.", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "scrapeId": "b7c52328-4837-4d19-b8c8-cfb85590e80f", "sourceURL": "https://templ.guide/static-rendering/deploying-static-files", "url": "https://templ.guide/static-rendering/deploying-static-files/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Generating Static HTML Files with Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Generating Static HTML Files with Templ in templ.\n\n# Generating Static HTML Files with Templ\n\nThis page covers how to use templ components to generate static HTML files in Go.Here's a quick rundown of what this is about:\n\n## templ.Component Interface\n\ntempl components implement the `templ.Component` interface.\n\nThe interface has a `Render` method which outputs HTML to an `io.Writer` that is passed in.\n\n```go\n// Code example for templ.Component interface\n\ntype Component interface {\n\t// Render the template.\n\tRender(ctx context.Context, w io.Writer) error\n}\n```\n\nIn Go, the `io.Writer` interface is implemented by many built-in types in the standard library, including `os.File` (files), `os.Stdout`, and `http.ResponseWriter` (HTTP responses).\n\nThis makes it easy to use templ components in a variety of contexts to generate HTML.\n\n## Setup project\n\nTo render static HTML files using templ component, first create a new Go project.\n\nCreate a new directory.\n\n```bash\nmkdir static-generator\n```\n\nInitialize a new Go project within it.\n\n```bash\ncd static-generator\ngo mod init github.com/a-h/templ-examples/static-generator\n```\n\n## Create a templ file\n\nTo use it, create a `hello.templ` file containing a component.\n\nComponents are functions that contain templ elements, markup, `if`, `switch` and `for` Go expressions.\n\nhello.templ\n\n```go\npackage main\n\ntempl hello(name string) {\n\t<div>Hello, { name }</div>\n}\n```\n\n## Generate Go code from the templ file\n\nRun the `templ generate` command.\n\n```bash\ntempl generate\n```\n\ntempl will generate a `hello_templ.go` file containing Go code.\n\nThis file will contain a function called `hello` which takes `name` as an argument, and returns a `templ.Component` that renders HTML.\n\n```go\nfunc hello(name string) templ.Component {\n  // ...\n}\n```\n\n## Write a program that renders to stdout\n\nCreate a `main.go` file. The program creates a `hello.html` file and uses the component to write HTML to the file.\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tf, err := os.Create(\"hello.html\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create output file: %v\", err)\n\t}\n\n\terr = hello(\"John\").Render(context.Background(), f)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to write output file: %v\", err)\n\t}\n}\n```\n\n## Run the program\n\nRunning the code will create a file called `hello.html` containing the component's HTML.\n\n```bash\ngo run *.go\n```\n\nhello.html\n\n```html\n<div>Hello, John</div>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "title": "Generating Static HTML Files with Templ", "description": "This page covers how to use templ components to generate static HTML files in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:26", "type": "overview", "page_metadata": {"language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Generating static HTML files with templ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "docusaurus_version": "current", "og:url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Generating static HTML files with templ | templ docs", "og:description": "templ components implement the templ.Component interface.", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "templ components implement the templ.Component interface.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "description": "templ components implement the templ.Component interface.", "docsearch:version": "current", "title": "Generating static HTML files with templ | templ docs", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "511629d7-c752-4d4f-bc18-35903ca77014", "sourceURL": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I templ.component interface in templ?\n\nAssistant: To templ.component interface in templ, here's what you do:\ntempl components implement the `templ.Component` interface.\n\nThe interface has a `Render` method which outputs HTML to an `io.Writer` that is passed in.\n\n```go\n// Code example for templ.Component interface\n\ntype Component interface {\n\t// Render the template.\n\tRender(ctx context.Context, w io.Writer) error\n}\n```\n\nIn Go, the `io.Writer` interface is implemented by many built-in types in the standard library, including `os.File` (files), `os.Stdout`, and `http.ResponseWriter` (HTTP responses).\n\nThis makes it easy to use templ components in a variety of contexts to generate HTML..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "title": "Generating Static HTML Files with Templ", "description": "This page covers how to use templ components to generate static HTML files in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:26", "type": "section_detail", "page_metadata": {"language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Generating static HTML files with templ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "docusaurus_version": "current", "og:url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Generating static HTML files with templ | templ docs", "og:description": "templ components implement the templ.Component interface.", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "templ components implement the templ.Component interface.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "description": "templ components implement the templ.Component interface.", "docsearch:version": "current", "title": "Generating static HTML files with templ | templ docs", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "511629d7-c752-4d4f-bc18-35903ca77014", "sourceURL": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I setup project in templ?\n\nAssistant: To setup project in templ, here's what you do:\nTo render static HTML files using templ component, first create a new Go project.\n\nCreate a new directory.\n\n```bash\nmkdir static-generator\n```\n\nInitialize a new Go project within it.\n\n```bash\ncd static-generator\ngo mod init github.com/a-h/templ-examples/static-generator\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "title": "Generating Static HTML Files with Templ", "description": "This page covers how to use templ components to generate static HTML files in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:26", "type": "section_detail", "page_metadata": {"language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Generating static HTML files with templ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "docusaurus_version": "current", "og:url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Generating static HTML files with templ | templ docs", "og:description": "templ components implement the templ.Component interface.", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "templ components implement the templ.Component interface.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "description": "templ components implement the templ.Component interface.", "docsearch:version": "current", "title": "Generating static HTML files with templ | templ docs", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "511629d7-c752-4d4f-bc18-35903ca77014", "sourceURL": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I create a templ file in templ?\n\nAssistant: To create a templ file in templ, here's what you do:\nTo use it, create a `hello.templ` file containing a component.\n\nComponents are functions that contain templ elements, markup, `if`, `switch` and `for` Go expressions.\n\nhello.templ\n\n```go\npackage main\n\ntempl hello(name string) {\n\t<div>Hello, { name }</div>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "title": "Generating Static HTML Files with Templ", "description": "This page covers how to use templ components to generate static HTML files in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:26", "type": "section_detail", "page_metadata": {"language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Generating static HTML files with templ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "docusaurus_version": "current", "og:url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Generating static HTML files with templ | templ docs", "og:description": "templ components implement the templ.Component interface.", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "templ components implement the templ.Component interface.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "description": "templ components implement the templ.Component interface.", "docsearch:version": "current", "title": "Generating static HTML files with templ | templ docs", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "511629d7-c752-4d4f-bc18-35903ca77014", "sourceURL": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I generate go code from the templ file in templ?\n\nAssistant: To generate go code from the templ file in templ, here's what you do:\nRun the `templ generate` command.\n\n```bash\ntempl generate\n```\n\ntempl will generate a `hello_templ.go` file containing Go code.\n\nThis file will contain a function called `hello` which takes `name` as an argument, and returns a `templ.Component` that renders HTML.\n\n```go\nfunc hello(name string) templ.Component {\n  // ...\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "title": "Generating Static HTML Files with Templ", "description": "This page covers how to use templ components to generate static HTML files in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:26", "type": "section_detail", "page_metadata": {"language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Generating static HTML files with templ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "docusaurus_version": "current", "og:url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Generating static HTML files with templ | templ docs", "og:description": "templ components implement the templ.Component interface.", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "templ components implement the templ.Component interface.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "description": "templ components implement the templ.Component interface.", "docsearch:version": "current", "title": "Generating static HTML files with templ | templ docs", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "511629d7-c752-4d4f-bc18-35903ca77014", "sourceURL": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I write a program that renders to stdout in templ?\n\nAssistant: To write a program that renders to stdout in templ, here's what you do:\nCreate a `main.go` file. The program creates a `hello.html` file and uses the component to write HTML to the file.\n\nmain.go\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tf, err := os.Create(\"hello.html\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create output file: %v\", err)\n\t}\n\n\terr = hello(\"John\").Render(context.Background(), f)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to write output file: %v\", err)\n\t}\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "title": "Generating Static HTML Files with Templ", "description": "This page covers how to use templ components to generate static HTML files in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:26", "type": "section_detail", "page_metadata": {"language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Generating static HTML files with templ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "docusaurus_version": "current", "og:url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Generating static HTML files with templ | templ docs", "og:description": "templ components implement the templ.Component interface.", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "templ components implement the templ.Component interface.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "description": "templ components implement the templ.Component interface.", "docsearch:version": "current", "title": "Generating static HTML files with templ | templ docs", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "511629d7-c752-4d4f-bc18-35903ca77014", "sourceURL": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I run the program in templ?\n\nAssistant: To run the program in templ, here's what you do:\nRunning the code will create a file called `hello.html` containing the component's HTML.\n\n```bash\ngo run *.go\n```\n\nhello.html\n\n```html\n<div>Hello, John</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "title": "Generating Static HTML Files with Templ", "description": "This page covers how to use templ components to generate static HTML files in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:26", "type": "section_detail", "page_metadata": {"language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Generating static HTML files with templ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "docusaurus_version": "current", "og:url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Generating static HTML files with templ | templ docs", "og:description": "templ components implement the templ.Component interface.", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "templ components implement the templ.Component interface.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "description": "templ components implement the templ.Component interface.", "docsearch:version": "current", "title": "Generating static HTML files with templ | templ docs", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "511629d7-c752-4d4f-bc18-35903ca77014", "sourceURL": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Generating Static HTML Files with Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**templ.Component Interface**:\n\n```yaml\ntype Component interface {\n\t// Render the template.\n\tRender(ctx context.Context, w io.Writer) error\n}\n```\n\nThis snippet shows you how to templ.component interface, which is an important aspect of generating static html files with templ.\n\n**Setup project - Create directory**:\n\n```yaml\nmkdir static-generator\n```\n\nThis snippet shows you how to setup project - create directory, which is an important aspect of generating static html files with templ.\n\n**Setup project - Initialize Go project**:\n\n```yaml\ncd static-generator\ngo mod init github.com/a-h/templ-examples/static-generator\n```\n\nThis snippet shows you how to setup project - initialize go project, which is an important aspect of generating static html files with templ.\n\n**Create a templ file - hello.templ**:\n\n```yaml\npackage main\n\ntempl hello(name string) {\n\t<div>Hello, { name }</div>\n}\n```\n\nThis snippet shows you how to create a templ file - hello.templ, which is an important aspect of generating static html files with templ.\n\n", "metadata": {"source_url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "title": "Generating Static HTML Files with Templ", "description": "This page covers how to use templ components to generate static HTML files in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:26", "type": "code_examples", "page_metadata": {"language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Generating static HTML files with templ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "docusaurus_version": "current", "og:url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Generating static HTML files with templ | templ docs", "og:description": "templ components implement the templ.Component interface.", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "templ components implement the templ.Component interface.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "description": "templ components implement the templ.Component interface.", "docsearch:version": "current", "title": "Generating static HTML files with templ | templ docs", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "511629d7-c752-4d4f-bc18-35903ca77014", "sourceURL": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Generating Static HTML Files with Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `templ.Component` interface to create reusable components for HTML generation.\n\nEnsure to handle errors when creating files and rendering components.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "title": "Generating Static HTML Files with Templ", "description": "This page covers how to use templ components to generate static HTML files in Go.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-03-01 03:41:26", "type": "best_practices", "page_metadata": {"language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Generating static HTML files with templ | templ docs", "twitter:card": "summary_large_image", "ogUrl": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "docusaurus_version": "current", "og:url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Generating static HTML files with templ | templ docs", "og:description": "templ components implement the templ.Component interface.", "ogLocale": "en", "og:locale": "en", "docusaurus_locale": "en", "ogDescription": "templ components implement the templ.Component interface.", "viewport": "width=device-width, initial-scale=1.0", "favicon": "https://templ.guide/img/favicon.ico", "description": "templ components implement the templ.Component interface.", "docsearch:version": "current", "title": "Generating static HTML files with templ | templ docs", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "511629d7-c752-4d4f-bc18-35903ca77014", "sourceURL": "https://templ.guide/static-rendering/generating-static-html-files-with-templ", "url": "https://templ.guide/static-rendering/generating-static-html-files-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Attributes is in templ?\n\nAssistant: Sure, I'd be happy to explain Attributes in templ.\n\n# Attributes\n\nThis page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.Here's a quick rundown of what this is about:\n\n## Constant attributes\n\ntempl elements can have HTML attributes that use the double quote character `\"`.\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <p data-testid=\"paragraph\">Text</p>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<p data-testid=\"paragraph\">Text</p>\n```\n\n## String expression attributes\n\nElement attributes can be set to Go strings.\n\n```codeBlockLines_e6Vv\ntempl component(testID string) {\n  <p data-testid={ testID }>Text</p>\n}\n\ntempl page() {\n  @component(\"testid-123\")\n}\n```\n\nRendering the `page` component results in:\n\nOutput\n\n```codeBlockLines_e6Vv\n<p data-testid=\"testid-123\">Text</p>\n```\n\nnote\n\nString values are automatically HTML attribute encoded. This is a security measure, but may make the values (especially JSON appear) look strange to you, since some characters may be converted into HTML entities. However, it is correct HTML and won't affect the behavior.\n\nIt's also possible to use function calls in string attribute expressions.\n\nHere's a function that returns a string based on a boolean input.\n\n```codeBlockLines_e6Vv\nfunc testID(isTrue bool) string {\n    if isTrue {\n        return \"testid-123\"\n    }\n    return \"testid-456\"\n}\n```\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <p data-testid={ testID(true) }>Text</p>\n}\n```\n\nThe result:\n\nOutput\n\n```codeBlockLines_e6Vv\n<p data-testid=\"testid-123\">Text</p>\n```\n\nFunctions in string attribute expressions can also return errors.\n\n```codeBlockLines_e6Vv\nfunc testID(isTrue bool) (string, error) {\n    if isTrue {\n        return \"testid-123\", nil\n    }\n    return \"\", fmt.Errorf(\"isTrue is false\")\n}\n```\n\n## Boolean attributes\n\nBoolean attributes (see [https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes)) where the presence of an attribute name without a value means true, and the attribute name not being present means false are supported.\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <hr noshade/>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<hr noshade>\n```\n\nnote\n\ntempl is aware that `<hr/>` is a void element, and renders `<hr>` instead.\n\nTo set boolean attributes using variables or template parameters, a question mark after the attribute name is used to denote that the attribute is boolean.\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <hr noshade?={ false } />\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<hr>\n```\n\n## Conditional attributes\n\nUse an `if` statement within a templ element to optionally add attributes to elements.\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <hr style=\"padding: 10px\"\n    if true {\n      class=\"itIsTrue\"\n    }\n  />\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<hr style=\"padding: 10px\" class=\"itIsTrue\" />\n```\n\n## Spread attributes\n\nUse the `{ attrMap... }` syntax in the open tag of an element to append a dynamic map of attributes to the element's attributes.\n\nIt's possible to spread any variable of type `templ.Attributes`. `templ.Attributes` is a `map[string]any` type definition.\n\n- If the value is a `string`, the attribute is added with the string value, e.g. `<div name=\"value\">`.\n- If the value is a `bool`, the attribute is added as a boolean attribute if the value is true, e.g. `<div name>`.\n- If the value is a `templ.KeyValue[string, bool]`, the attribute is added if the boolean is true, e.g. `<div name=\"value\">`.\n- If the value is a `templ.KeyValue[bool, bool]`, the attribute is added if both boolean values are true, as `<div name>`.\n\n```codeBlockLines_e6Vv\ntempl component(shouldBeUsed bool, attrs templ.Attributes) {\n  <p { attrs... }>Text</p>\n  <hr\n    if shouldBeUsed {\n      { attrs... }\n    }\n  />\n}\n\ntempl usage() {\n  @component(false, templ.Attributes{\"data-testid\": \"paragraph\"})\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<p data-testid=\"paragraph\">Text</p>\n<hr>\n```\n\n## URL attributes\n\nThe `<a>` element's `href` attribute is treated differently. templ expects you to provide a `templ.SafeURL` instead of a `string`.\n\nTypically, you would do this by using the `templ.URL` function.\n\nThe `templ.URL` function sanitizes input URLs and checks that the protocol is `http`/ `https`/ `mailto` rather than `javascript` or another unexpected protocol.\n\n```codeBlockLines_e6Vv\ntempl component(p Person) {\n  <a href={ templ.URL(p.URL) }>{ strings.ToUpper(p.Name) }</a>\n}\n```\n\ntip\n\nIn templ, all attributes are HTML-escaped. This means that:\n\n- `&` characters in the URL are escaped to `&amp;`.\n- `\"` characters are escaped to `&quot;`.\n- `'` characters are escaped to `&#39;`.\n\nThis done to prevent XSS attacks. For example, without escaping, if a string contained `http://google.com\" onclick=\"alert('hello')\"`, the browser would interpret this as a URL followed by an `onclick` attribute, which would execute JavaScript code.\n\nThe escaping does not change the URL's functionality.\n\nSanitization is the process of examining the URL scheme (protocol) and structure to ensure that it's safe to use, e.g. that it doesn't contain `javascript:` or other potentially harmful schemes. If a URL is not safe, templ will replace the URL with `about:invalid#TemplFailedSanitizationURL`.\n\nThe `templ.URL` function only supports standard HTML elements and attributes ( `<a href=\"\"` and `<form action=\"\"`).\n\nFor use on non-standard HTML elements (e.g. HTMX's `hx-*` attributes), convert the `templ.URL` to a `string` after sanitization.\n\n```codeBlockLines_e6Vv\ntempl component(contact model.Contact) {\n  <div hx-get={ string(templ.URL(fmt.Sprintf(\"/contacts/%s/email\", contact.ID))) }>\n    { contact.Name }\n  </div>\n}\n```\n\ncaution\n\nIf you need to bypass this sanitization, you can use `templ.SafeURL(myURL)` to mark that your string is safe to use.\nThis may introduce security vulnerabilities to your program.\n\n## JavaScript attributes\n\n`onClick` and other `on*` handlers have special behaviour, they expect a reference to a `script` template.\n\ninfo\n\nThis ensures that any client-side JavaScript that is required for a component to function is only emitted once, that script name collisions are not possible, and that script input parameters are properly sanitized.\n\n```codeBlockLines_e6Vv\nscript withParameters(a string, b string, c int) {\n\tconsole.log(a, b, c);\n}\n\nscript withoutParameters() {\n\talert(\"hello\");\n}\n\ntempl Button(text string) {\n\t<button onClick={ withParameters(\"test\", text, 123) } onMouseover={ withoutParameters() } type=\"button\">{ text }</button>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<script>\n function __templ_withParameters_1056(a, b, c){console.log(a, b, c);}function __templ_withoutParameters_6bbf(){alert(\"hello\");}\n</script>\n<button onclick=\"__templ_withParameters_1056(\"test\",\"Say hello\",123)\" onmouseover=\"__templ_withoutParameters_6bbf()\" type=\"button\">\n Say hello\n</button>\n```\n\n## CSS attributes\n\nCSS handling is discussed in detail in [CSS style management](https://templ.guide/syntax-and-usage/css-style-management).\n\n## JSON attributes\n\nTo set an attribute's value to a JSON string (e.g. for HTMX's [hx-vals](https://htmx.org/attributes/hx-vals) or Alpine's [x-data](https://alpinejs.dev/directives/data)), serialize the value to a string using a function.\n\n```codeBlockLines_e6Vv\nfunc countriesJSON() string {\n\tcountries := []string{\"Czech Republic\", \"Slovakia\", \"United Kingdom\", \"Germany\", \"Austria\", \"Slovenia\"}\n\tbytes, _ := json.Marshal(countries)\n\treturn string(bytes)\n}\n```\n\n```codeBlockLines_e6Vv\ntempl SearchBox() {\n\t<search-webcomponent suggestions={ countriesJSON() } />\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "overview", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I constant attributes in templ?\n\nAssistant: To constant attributes in templ, here's what you do:\ntempl elements can have HTML attributes that use the double quote character `\"`.\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <p data-testid=\"paragraph\">Text</p>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<p data-testid=\"paragraph\">Text</p>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I string expression attributes in templ?\n\nAssistant: To string expression attributes in templ, here's what you do:\nElement attributes can be set to Go strings.\n\n```codeBlockLines_e6Vv\ntempl component(testID string) {\n  <p data-testid={ testID }>Text</p>\n}\n\ntempl page() {\n  @component(\"testid-123\")\n}\n```\n\nRendering the `page` component results in:\n\nOutput\n\n```codeBlockLines_e6Vv\n<p data-testid=\"testid-123\">Text</p>\n```\n\nnote\n\nString values are automatically HTML attribute encoded. This is a security measure, but may make the values (especially JSON appear) look strange to you, since some characters may be converted into HTML entities. However, it is correct HTML and won't affect the behavior.\n\nIt's also possible to use function calls in string attribute expressions.\n\nHere's a function that returns a string based on a boolean input.\n\n```codeBlockLines_e6Vv\nfunc testID(isTrue bool) string {\n    if isTrue {\n        return \"testid-123\"\n    }\n    return \"testid-456\"\n}\n```\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <p data-testid={ testID(true) }>Text</p>\n}\n```\n\nThe result:\n\nOutput\n\n```codeBlockLines_e6Vv\n<p data-testid=\"testid-123\">Text</p>\n```\n\nFunctions in string attribute expressions can also return errors.\n\n```codeBlockLines_e6Vv\nfunc testID(isTrue bool) (string, error) {\n    if isTrue {\n        return \"testid-123\", nil\n    }\n    return \"\", fmt.Errorf(\"isTrue is false\")\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I boolean attributes in templ?\n\nAssistant: To boolean attributes in templ, here's what you do:\nBoolean attributes (see [https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes)) where the presence of an attribute name without a value means true, and the attribute name not being present means false are supported.\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <hr noshade/>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<hr noshade>\n```\n\nnote\n\ntempl is aware that `<hr/>` is a void element, and renders `<hr>` instead.\n\nTo set boolean attributes using variables or template parameters, a question mark after the attribute name is used to denote that the attribute is boolean.\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <hr noshade?={ false } />\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<hr>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I conditional attributes in templ?\n\nAssistant: To conditional attributes in templ, here's what you do:\nUse an `if` statement within a templ element to optionally add attributes to elements.\n\n```codeBlockLines_e6Vv\ntempl component() {\n  <hr style=\"padding: 10px\"\n    if true {\n      class=\"itIsTrue\"\n    }\n  />\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<hr style=\"padding: 10px\" class=\"itIsTrue\" />\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I spread attributes in templ?\n\nAssistant: To spread attributes in templ, here's what you do:\nUse the `{ attrMap... }` syntax in the open tag of an element to append a dynamic map of attributes to the element's attributes.\n\nIt's possible to spread any variable of type `templ.Attributes`. `templ.Attributes` is a `map[string]any` type definition.\n\n- If the value is a `string`, the attribute is added with the string value, e.g. `<div name=\"value\">`.\n- If the value is a `bool`, the attribute is added as a boolean attribute if the value is true, e.g. `<div name>`.\n- If the value is a `templ.KeyValue[string, bool]`, the attribute is added if the boolean is true, e.g. `<div name=\"value\">`.\n- If the value is a `templ.KeyValue[bool, bool]`, the attribute is added if both boolean values are true, as `<div name>`.\n\n```codeBlockLines_e6Vv\ntempl component(shouldBeUsed bool, attrs templ.Attributes) {\n  <p { attrs... }>Text</p>\n  <hr\n    if shouldBeUsed {\n      { attrs... }\n    }\n  />\n}\n\ntempl usage() {\n  @component(false, templ.Attributes{\"data-testid\": \"paragraph\"})\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<p data-testid=\"paragraph\">Text</p>\n<hr>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I url attributes in templ?\n\nAssistant: To url attributes in templ, here's what you do:\nThe `<a>` element's `href` attribute is treated differently. templ expects you to provide a `templ.SafeURL` instead of a `string`.\n\nTypically, you would do this by using the `templ.URL` function.\n\nThe `templ.URL` function sanitizes input URLs and checks that the protocol is `http`/ `https`/ `mailto` rather than `javascript` or another unexpected protocol.\n\n```codeBlockLines_e6Vv\ntempl component(p Person) {\n  <a href={ templ.URL(p.URL) }>{ strings.ToUpper(p.Name) }</a>\n}\n```\n\ntip\n\nIn templ, all attributes are HTML-escaped. This means that:\n\n- `&` characters in the URL are escaped to `&amp;`.\n- `\"` characters are escaped to `&quot;`.\n- `'` characters are escaped to `&#39;`.\n\nThis done to prevent XSS attacks. For example, without escaping, if a string contained `http://google.com\" onclick=\"alert('hello')\"`, the browser would interpret this as a URL followed by an `onclick` attribute, which would execute JavaScript code.\n\nThe escaping does not change the URL's functionality.\n\nSanitization is the process of examining the URL scheme (protocol) and structure to ensure that it's safe to use, e.g. that it doesn't contain `javascript:` or other potentially harmful schemes. If a URL is not safe, templ will replace the URL with `about:invalid#TemplFailedSanitizationURL`.\n\nThe `templ.URL` function only supports standard HTML elements and attributes ( `<a href=\"\"` and `<form action=\"\"`).\n\nFor use on non-standard HTML elements (e.g. HTMX's `hx-*` attributes), convert the `templ.URL` to a `string` after sanitization.\n\n```codeBlockLines_e6Vv\ntempl component(contact model.Contact) {\n  <div hx-get={ string(templ.URL(fmt.Sprintf(\"/contacts/%s/email\", contact.ID))) }>\n    { contact.Name }\n  </div>\n}\n```\n\ncaution\n\nIf you need to bypass this sanitization, you can use `templ.SafeURL(myURL)` to mark that your string is safe to use.\nThis may introduce security vulnerabilities to your program..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I javascript attributes in templ?\n\nAssistant: To javascript attributes in templ, here's what you do:\n`onClick` and other `on*` handlers have special behaviour, they expect a reference to a `script` template.\n\ninfo\n\nThis ensures that any client-side JavaScript that is required for a component to function is only emitted once, that script name collisions are not possible, and that script input parameters are properly sanitized.\n\n```codeBlockLines_e6Vv\nscript withParameters(a string, b string, c int) {\n\tconsole.log(a, b, c);\n}\n\nscript withoutParameters() {\n\talert(\"hello\");\n}\n\ntempl Button(text string) {\n\t<button onClick={ withParameters(\"test\", text, 123) } onMouseover={ withoutParameters() } type=\"button\">{ text }</button>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<script>\n function __templ_withParameters_1056(a, b, c){console.log(a, b, c);}function __templ_withoutParameters_6bbf(){alert(\"hello\");}\n</script>\n<button onclick=\"__templ_withParameters_1056(\"test\",\"Say hello\",123)\" onmouseover=\"__templ_withoutParameters_6bbf()\" type=\"button\">\n Say hello\n</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I css attributes in templ?\n\nAssistant: To css attributes in templ, here's what you do:\nCSS handling is discussed in detail in [CSS style management](https://templ.guide/syntax-and-usage/css-style-management)..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I json attributes in templ?\n\nAssistant: To json attributes in templ, here's what you do:\nTo set an attribute's value to a JSON string (e.g. for HTMX's [hx-vals](https://htmx.org/attributes/hx-vals) or Alpine's [x-data](https://alpinejs.dev/directives/data)), serialize the value to a string using a function.\n\n```codeBlockLines_e6Vv\nfunc countriesJSON() string {\n\tcountries := []string{\"Czech Republic\", \"Slovakia\", \"United Kingdom\", \"Germany\", \"Austria\", \"Slovenia\"}\n\tbytes, _ := json.Marshal(countries)\n\treturn string(bytes)\n}\n```\n\n```codeBlockLines_e6Vv\ntempl SearchBox() {\n\t<search-webcomponent suggestions={ countriesJSON() } />\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "section_detail", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Attributes in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Constant attributes example**:\n\n```yaml\ntempl component() {\n  <p data-testid=\"paragraph\">Text</p>\n}\n```\n\nThis snippet shows you how to constant attributes example, which is an important aspect of attributes.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/attributes", "title": "Attributes", "description": "This page covers various types of attributes that can be used in templ elements, including constant, string expression, boolean, conditional, spread, URL, JavaScript, CSS, and JSON attributes.", "has_code_examples": true, "has_best_practices": false, "section_count": 9, "timestamp": "2025-03-01 03:42:04", "type": "code_examples", "page_metadata": {"docsearch:language": "en", "og:url": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "Constant attributes", "docsearch:version": "current", "twitter:card": "summary_large_image", "ogTitle": "Attributes | templ docs", "title": "Attributes | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/attributes/", "docusaurus_locale": "en", "ogDescription": "Constant attributes", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Attributes | templ docs", "ogLocale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "Constant attributes", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "og:locale": "en", "scrapeId": "078142bf-c949-4e10-9bc0-5e9b6f72bbe4", "sourceURL": "https://templ.guide/syntax-and-usage/attributes", "url": "https://templ.guide/syntax-and-usage/attributes/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Basic Syntax is in templ?\n\nAssistant: Sure, I'd be happy to explain Basic Syntax in templ.\n\n# Basic Syntax\n\nThis page covers the basic syntax and usage of templ files, including package names, imports, components, and Go code.Here's a quick rundown of what this is about:\n\n## Package name and imports\n\ntempl files start with a package name, followed by any required imports, just like Go.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport \"fmt\"\nimport \"time\"\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/basic-syntax", "title": "Basic Syntax", "description": "This page covers the basic syntax and usage of templ files, including package names, imports, components, and Go code.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:42:12", "type": "overview", "page_metadata": {"docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogDescription": "Package name and imports", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:language": "en", "docsearch:version": "current", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/basic-syntax/", "language": "en", "title": "Basic syntax | templ docs", "og:locale": "en", "og:title": "Basic syntax | templ docs", "description": "Package name and imports", "og:url": "https://templ.guide/syntax-and-usage/basic-syntax/", "ogTitle": "Basic syntax | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:description": "Package name and imports", "viewport": "width=device-width, initial-scale=1.0", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "06e85ebb-7fc8-46de-b80c-b08b9e3f3767", "sourceURL": "https://templ.guide/syntax-and-usage/basic-syntax", "url": "https://templ.guide/syntax-and-usage/basic-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I package name and imports in templ?\n\nAssistant: To package name and imports in templ, here's what you do:\ntempl files start with a package name, followed by any required imports, just like Go.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport \"fmt\"\nimport \"time\"\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/basic-syntax", "title": "Basic Syntax", "description": "This page covers the basic syntax and usage of templ files, including package names, imports, components, and Go code.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:42:12", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogDescription": "Package name and imports", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:language": "en", "docsearch:version": "current", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/basic-syntax/", "language": "en", "title": "Basic syntax | templ docs", "og:locale": "en", "og:title": "Basic syntax | templ docs", "description": "Package name and imports", "og:url": "https://templ.guide/syntax-and-usage/basic-syntax/", "ogTitle": "Basic syntax | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:description": "Package name and imports", "viewport": "width=device-width, initial-scale=1.0", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "06e85ebb-7fc8-46de-b80c-b08b9e3f3767", "sourceURL": "https://templ.guide/syntax-and-usage/basic-syntax", "url": "https://templ.guide/syntax-and-usage/basic-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Basic Syntax in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Package name and imports**:\n\n```yaml\npackage main\n\nimport \"fmt\"\nimport \"time\"\n\n```\n\nThis snippet shows you how to package name and imports, which is an important aspect of basic syntax.\n\n**Components**:\n\n```yaml\ntempl headerTemplate(name string) {\n  <header data-testid=\"headerTemplate\">\n    <h1>{ name }</h1>\n  </header>\n}\n\n```\n\nThis snippet shows you how to components, which is an important aspect of basic syntax.\n\n**Go code**:\n\n```yaml\npackage main\n\n// Ordinary Go code that we can use in our Component.\nvar greeting = \"Welcome!\"\n\n// templ Component\ntempl headerTemplate(name string) {\n  <header>\n    <h1>{ name }</h1>\n    <h2>\"{ greeting }\" comes from ordinary Go code</h2>\n  </header>\n}\n\n```\n\nThis snippet shows you how to go code, which is an important aspect of basic syntax.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/basic-syntax", "title": "Basic Syntax", "description": "This page covers the basic syntax and usage of templ files, including package names, imports, components, and Go code.", "has_code_examples": true, "has_best_practices": false, "section_count": 1, "timestamp": "2025-03-01 03:42:12", "type": "code_examples", "page_metadata": {"docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "ogDescription": "Package name and imports", "generator": "Docusaurus v3.6.3", "docusaurus_locale": "en", "docsearch:language": "en", "docsearch:version": "current", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/basic-syntax/", "language": "en", "title": "Basic syntax | templ docs", "og:locale": "en", "og:title": "Basic syntax | templ docs", "description": "Package name and imports", "og:url": "https://templ.guide/syntax-and-usage/basic-syntax/", "ogTitle": "Basic syntax | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "og:description": "Package name and imports", "viewport": "width=device-width, initial-scale=1.0", "twitter:card": "summary_large_image", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "06e85ebb-7fc8-46de-b80c-b08b9e3f3767", "sourceURL": "https://templ.guide/syntax-and-usage/basic-syntax", "url": "https://templ.guide/syntax-and-usage/basic-syntax/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what HTML and Go Comments in Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain HTML and Go Comments in Templ in templ.\n\n# HTML and Go Comments in Templ\n\nThis page covers the usage of HTML and Go comments within templ statements and outside of them.Here's a quick rundown of what this is about:\n\n## HTML comments\n\nInside templ statements, use HTML comments.\n\nComments are rendered to the template output.\n\nAs per HTML, nested comments are not supported.\n\n## Go comments\n\nOutside of templ statements, use Go comments.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/comments", "title": "HTML and Go Comments in Templ", "description": "This page covers the usage of HTML and Go comments within templ statements and outside of them.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:42:21", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "title": "Comments | templ docs", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Inside templ statements, use HTML comments.", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Comments | templ docs", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "Inside templ statements, use HTML comments.", "ogTitle": "Comments | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/comments/", "ogLocale": "en", "og:locale": "en", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/comments/", "description": "Inside templ statements, use HTML comments.", "scrapeId": "06ee4bd0-dc5d-4c56-b426-4b0439da7ab4", "sourceURL": "https://templ.guide/syntax-and-usage/comments", "url": "https://templ.guide/syntax-and-usage/comments/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I html comments in templ?\n\nAssistant: To html comments in templ, here's what you do:\nInside templ statements, use HTML comments.\n\nComments are rendered to the template output.\n\nAs per HTML, nested comments are not supported..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/comments", "title": "HTML and Go Comments in Templ", "description": "This page covers the usage of HTML and Go comments within templ statements and outside of them.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:42:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "title": "Comments | templ docs", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Inside templ statements, use HTML comments.", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Comments | templ docs", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "Inside templ statements, use HTML comments.", "ogTitle": "Comments | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/comments/", "ogLocale": "en", "og:locale": "en", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/comments/", "description": "Inside templ statements, use HTML comments.", "scrapeId": "06ee4bd0-dc5d-4c56-b426-4b0439da7ab4", "sourceURL": "https://templ.guide/syntax-and-usage/comments", "url": "https://templ.guide/syntax-and-usage/comments/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I go comments in templ?\n\nAssistant: To go comments in templ, here's what you do:\nOutside of templ statements, use Go comments..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/comments", "title": "HTML and Go Comments in Templ", "description": "This page covers the usage of HTML and Go comments within templ statements and outside of them.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:42:21", "type": "section_detail", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "title": "Comments | templ docs", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Inside templ statements, use HTML comments.", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Comments | templ docs", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "Inside templ statements, use HTML comments.", "ogTitle": "Comments | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/comments/", "ogLocale": "en", "og:locale": "en", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/comments/", "description": "Inside templ statements, use HTML comments.", "scrapeId": "06ee4bd0-dc5d-4c56-b426-4b0439da7ab4", "sourceURL": "https://templ.guide/syntax-and-usage/comments", "url": "https://templ.guide/syntax-and-usage/comments/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for HTML and Go Comments in Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HTML Comments Example**:\n\n```yaml\ntempl template() {\n\t<!-- Single line -->\n\t<!--\n\t\tSingle or multiline.\n\t-->\n}\n```\n\nThis snippet shows you how to html comments example, which is an important aspect of html and go comments in templ.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/comments", "title": "HTML and Go Comments in Templ", "description": "This page covers the usage of HTML and Go comments within templ statements and outside of them.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:42:21", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "title": "Comments | templ docs", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Inside templ statements, use HTML comments.", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Comments | templ docs", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "Inside templ statements, use HTML comments.", "ogTitle": "Comments | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/comments/", "ogLocale": "en", "og:locale": "en", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/comments/", "description": "Inside templ statements, use HTML comments.", "scrapeId": "06ee4bd0-dc5d-4c56-b426-4b0439da7ab4", "sourceURL": "https://templ.guide/syntax-and-usage/comments", "url": "https://templ.guide/syntax-and-usage/comments/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using HTML and Go Comments in Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse HTML comments inside templ statements for clarity.\n\nUse standard Go comments outside templ statements.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/comments", "title": "HTML and Go Comments in Templ", "description": "This page covers the usage of HTML and Go comments within templ statements and outside of them.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:42:21", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1.0", "docsearch:version": "current", "title": "Comments | templ docs", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Inside templ statements, use HTML comments.", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "og:title": "Comments | templ docs", "docusaurus_locale": "en", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:description": "Inside templ statements, use HTML comments.", "ogTitle": "Comments | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/comments/", "ogLocale": "en", "og:locale": "en", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/comments/", "description": "Inside templ statements, use HTML comments.", "scrapeId": "06ee4bd0-dc5d-4c56-b426-4b0439da7ab4", "sourceURL": "https://templ.guide/syntax-and-usage/comments", "url": "https://templ.guide/syntax-and-usage/comments/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Context in Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Context in Templ in templ.\n\n# Context in Templ\n\nThis page discusses the problems that the context feature solves in Templ, including prop drilling and coupling, and provides examples of how to use context effectively in templ components and with HTTP middleware.Here's a quick rundown of what this is about:\n\n## What problems does `context` solve?\n\n### \"Prop drilling\"\nIt can be cumbersome to pass data from parents through to children components, since this means that every component in the hierarchy has to accept parameters and pass them through to children.\n\nThe technique of passing data through a stack of components is sometimes called \"prop drilling\".\n\nIn this example, the `middle` component doesn't use the `name` parameter, but must accept it as a parameter in order to pass it to the `bottom` component.\n\n```go\npackage main\n\ntempl top(name string) {\n\t<div>\n\t\t@middle(name)\n\t</div>\n}\n\ntempl middle(name string) {\n\t<ul>\n\t\t@bottom(name)\n\t</ul>\n}\n\ntempl bottom(name string) {\n  <li>{ name }</li>\n}\n``` \n\nIn many cases, prop drilling is the best way to pass data because it's simple and reliable.\n\nContext is not strongly typed, and errors only show at runtime, not compile time, so it should be used sparingly in your application.\n\n### Coupling\nSome data is useful for many components throughout the hierarchy, for example:\n\n- Whether the current user is logged in or not.\n- The username of the current user.\n- The locale of the user (used for localization).\n- Theme preferences (e.g. light vs dark).\n\nOne way to pass this information is to create a `Settings` struct and pass it through the stack as a parameter.\n\n```go\npackage main\n\ntype Settings struct {\n\tUsername string\n\tLocale   string\n\tTheme    string\n}\n\ntempl top(settings Settings) {\n\t<div>\n\t\t@middle(settings)\n\t</div>\n}\n\ntempl middle(settings Settings) {\n\t<ul>\n\t\t@bottom(settings)\n\t</ul>\n}\n\ntempl bottom(settings Settings) {\n  <li>{ settings.Theme }</li>\n}\n```\n\nHowever, this `Settings` struct may be unique to a single website, and reduce the ability to reuse a component in another website, due to its tight coupling with the `Settings` struct.\n\n## Using `context`\n\ntempl components have an implicit `ctx` variable within the scope. This `ctx` variable is the variable that is passed to the `templ.Component`'s `Render` method.\n\nTo allow data to be accessible at any level in the hierarchy, we can use Go's built in `context` package.\n\nWithin templ components, use the implicit `ctx` variable to access the context.\n\n```go\ntempl themeName() {\n\t<div>{ ctx.Value(themeContextKey).(string) }</div>\n}\n```\n\nTo allow the template to get the `themeContextKey` from the context, create a context, and pass it to the component's `Render` function.\n\n```go\n// Define the context key type.\ntype contextKey string\n\n// Create a context key for the theme.\nvar themeContextKey contextKey = \"theme\"\n\n// Create a context variable that inherits from a parent, and sets the value \"test\".\nctx := context.WithValue(context.Background(), themeContextKey, \"test\")\n\n// Pass the ctx variable to the render function.\nthemeName().Render(ctx, w)\n```\n\nAttempting to access a context key that doesn't exist, or using an invalid type assertion will trigger a panic.\n\n## Tidying up\n\nRather than read from the context object directly, it's common to implement a type-safe function instead.\n\nThis is also required when the type of the context key is in a different package to the consumer of the context, and the type is private (which is usually the case).\n\n```go\nfunc GetTheme(ctx context.Context) string {\n\tif theme, ok := ctx.Value(themeContextKey).(string); ok {\n\t\treturn theme\n\t}\n\treturn \"\"\n}\n```\n\nThis minor change makes the template code a little tidier.\n\n```go\ntempl themeName() {\n\t<div>{ GetTheme(ctx) }</div>\n}\n```\n\nAs of v0.2.731, Go's built in `context` package is no longer implicitly imported into .templ files.\n\n## Using `context` with HTTP middleware\n\nIn HTTP applications, a common pattern is to insert HTTP middleware into the request/response chain.\n\nMiddleware can be used to update the context that is passed to other components. Common use cases for middleware include authentication, and theming.\n\nBy inserting HTTP middleware, you can set values in the context that can be read by any templ component in the stack for the duration of that HTTP request.\n\n```go\ntype contextKey string\nvar contextClass = contextKey(\"class\")\n\nfunc Middleware(next http.Handler) http.Handler {\n  return http.HandlerFunc(func (w http.ResponseWriter, r *http.Request ) {\n    ctx := context.WithValue(r.Context(), contextClass, \"red\")\n    next.ServeHTTP(w, r.WithContext(ctx))\n  })\n}\n\ntempl Page() {\n  @Show()\n}\n\ntempl Show() {\n  <div class={ ctx.Value(contextClass) }>Display</div>\n}\n\nfunc main() {\n  h := templ.Handler(Page())\n  withMiddleware := Middleware(h)\n  http.Handle(\"/\", withMiddleware)\n  http.ListenAndServe(\":8080\", h)\n}\n```\n\nIf you write a component that relies on a context variable that doesn't exist, or is an unexpected type, your component will panic at runtime.\n\nThis means that if your component relies on HTTP middleware that sets the context, and you forget to add it, your component will panic at runtime.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/context", "title": "Context in Templ", "description": "This page discusses the problems that the context feature solves in Templ, including prop drilling and coupling, and provides examples of how to use context effectively in templ components and with HTTP middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "overview", "page_metadata": {"ogDescription": "What problems does context solve?", "og:locale": "en", "og:description": "What problems does context solve?", "ogUrl": "https://templ.guide/syntax-and-usage/context/", "docusaurus_version": "current", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:title": "Context | templ docs", "twitter:card": "summary_large_image", "ogTitle": "Context | templ docs", "title": "Context | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/context/", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "docsearch:version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "What problems does context solve?", "scrapeId": "e110805d-12f7-4f06-9eb1-850610e200b9", "sourceURL": "https://templ.guide/syntax-and-usage/context", "url": "https://templ.guide/syntax-and-usage/context/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I what problems does `context` solve? in templ?\n\nAssistant: To what problems does `context` solve? in templ, here's what you do:\n### \"Prop drilling\"\nIt can be cumbersome to pass data from parents through to children components, since this means that every component in the hierarchy has to accept parameters and pass them through to children.\n\nThe technique of passing data through a stack of components is sometimes called \"prop drilling\".\n\nIn this example, the `middle` component doesn't use the `name` parameter, but must accept it as a parameter in order to pass it to the `bottom` component.\n\n```go\npackage main\n\ntempl top(name string) {\n\t<div>\n\t\t@middle(name)\n\t</div>\n}\n\ntempl middle(name string) {\n\t<ul>\n\t\t@bottom(name)\n\t</ul>\n}\n\ntempl bottom(name string) {\n  <li>{ name }</li>\n}\n``` \n\nIn many cases, prop drilling is the best way to pass data because it's simple and reliable.\n\nContext is not strongly typed, and errors only show at runtime, not compile time, so it should be used sparingly in your application.\n\n### Coupling\nSome data is useful for many components throughout the hierarchy, for example:\n\n- Whether the current user is logged in or not.\n- The username of the current user.\n- The locale of the user (used for localization).\n- Theme preferences (e.g. light vs dark).\n\nOne way to pass this information is to create a `Settings` struct and pass it through the stack as a parameter.\n\n```go\npackage main\n\ntype Settings struct {\n\tUsername string\n\tLocale   string\n\tTheme    string\n}\n\ntempl top(settings Settings) {\n\t<div>\n\t\t@middle(settings)\n\t</div>\n}\n\ntempl middle(settings Settings) {\n\t<ul>\n\t\t@bottom(settings)\n\t</ul>\n}\n\ntempl bottom(settings Settings) {\n  <li>{ settings.Theme }</li>\n}\n```\n\nHowever, this `Settings` struct may be unique to a single website, and reduce the ability to reuse a component in another website, due to its tight coupling with the `Settings` struct..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/context", "title": "Context in Templ", "description": "This page discusses the problems that the context feature solves in Templ, including prop drilling and coupling, and provides examples of how to use context effectively in templ components and with HTTP middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "section_detail", "page_metadata": {"ogDescription": "What problems does context solve?", "og:locale": "en", "og:description": "What problems does context solve?", "ogUrl": "https://templ.guide/syntax-and-usage/context/", "docusaurus_version": "current", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:title": "Context | templ docs", "twitter:card": "summary_large_image", "ogTitle": "Context | templ docs", "title": "Context | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/context/", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "docsearch:version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "What problems does context solve?", "scrapeId": "e110805d-12f7-4f06-9eb1-850610e200b9", "sourceURL": "https://templ.guide/syntax-and-usage/context", "url": "https://templ.guide/syntax-and-usage/context/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using `context` in templ?\n\nAssistant: To using `context` in templ, here's what you do:\ntempl components have an implicit `ctx` variable within the scope. This `ctx` variable is the variable that is passed to the `templ.Component`'s `Render` method.\n\nTo allow data to be accessible at any level in the hierarchy, we can use Go's built in `context` package.\n\nWithin templ components, use the implicit `ctx` variable to access the context.\n\n```go\ntempl themeName() {\n\t<div>{ ctx.Value(themeContextKey).(string) }</div>\n}\n```\n\nTo allow the template to get the `themeContextKey` from the context, create a context, and pass it to the component's `Render` function.\n\n```go\n// Define the context key type.\ntype contextKey string\n\n// Create a context key for the theme.\nvar themeContextKey contextKey = \"theme\"\n\n// Create a context variable that inherits from a parent, and sets the value \"test\".\nctx := context.WithValue(context.Background(), themeContextKey, \"test\")\n\n// Pass the ctx variable to the render function.\nthemeName().Render(ctx, w)\n```\n\nAttempting to access a context key that doesn't exist, or using an invalid type assertion will trigger a panic..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/context", "title": "Context in Templ", "description": "This page discusses the problems that the context feature solves in Templ, including prop drilling and coupling, and provides examples of how to use context effectively in templ components and with HTTP middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "section_detail", "page_metadata": {"ogDescription": "What problems does context solve?", "og:locale": "en", "og:description": "What problems does context solve?", "ogUrl": "https://templ.guide/syntax-and-usage/context/", "docusaurus_version": "current", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:title": "Context | templ docs", "twitter:card": "summary_large_image", "ogTitle": "Context | templ docs", "title": "Context | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/context/", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "docsearch:version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "What problems does context solve?", "scrapeId": "e110805d-12f7-4f06-9eb1-850610e200b9", "sourceURL": "https://templ.guide/syntax-and-usage/context", "url": "https://templ.guide/syntax-and-usage/context/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I tidying up in templ?\n\nAssistant: To tidying up in templ, here's what you do:\nRather than read from the context object directly, it's common to implement a type-safe function instead.\n\nThis is also required when the type of the context key is in a different package to the consumer of the context, and the type is private (which is usually the case).\n\n```go\nfunc GetTheme(ctx context.Context) string {\n\tif theme, ok := ctx.Value(themeContextKey).(string); ok {\n\t\treturn theme\n\t}\n\treturn \"\"\n}\n```\n\nThis minor change makes the template code a little tidier.\n\n```go\ntempl themeName() {\n\t<div>{ GetTheme(ctx) }</div>\n}\n```\n\nAs of v0.2.731, Go's built in `context` package is no longer implicitly imported into .templ files..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/context", "title": "Context in Templ", "description": "This page discusses the problems that the context feature solves in Templ, including prop drilling and coupling, and provides examples of how to use context effectively in templ components and with HTTP middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "section_detail", "page_metadata": {"ogDescription": "What problems does context solve?", "og:locale": "en", "og:description": "What problems does context solve?", "ogUrl": "https://templ.guide/syntax-and-usage/context/", "docusaurus_version": "current", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:title": "Context | templ docs", "twitter:card": "summary_large_image", "ogTitle": "Context | templ docs", "title": "Context | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/context/", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "docsearch:version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "What problems does context solve?", "scrapeId": "e110805d-12f7-4f06-9eb1-850610e200b9", "sourceURL": "https://templ.guide/syntax-and-usage/context", "url": "https://templ.guide/syntax-and-usage/context/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using `context` with http middleware in templ?\n\nAssistant: To using `context` with http middleware in templ, here's what you do:\nIn HTTP applications, a common pattern is to insert HTTP middleware into the request/response chain.\n\nMiddleware can be used to update the context that is passed to other components. Common use cases for middleware include authentication, and theming.\n\nBy inserting HTTP middleware, you can set values in the context that can be read by any templ component in the stack for the duration of that HTTP request.\n\n```go\ntype contextKey string\nvar contextClass = contextKey(\"class\")\n\nfunc Middleware(next http.Handler) http.Handler {\n  return http.HandlerFunc(func (w http.ResponseWriter, r *http.Request ) {\n    ctx := context.WithValue(r.Context(), contextClass, \"red\")\n    next.ServeHTTP(w, r.WithContext(ctx))\n  })\n}\n\ntempl Page() {\n  @Show()\n}\n\ntempl Show() {\n  <div class={ ctx.Value(contextClass) }>Display</div>\n}\n\nfunc main() {\n  h := templ.Handler(Page())\n  withMiddleware := Middleware(h)\n  http.Handle(\"/\", withMiddleware)\n  http.ListenAndServe(\":8080\", h)\n}\n```\n\nIf you write a component that relies on a context variable that doesn't exist, or is an unexpected type, your component will panic at runtime.\n\nThis means that if your component relies on HTTP middleware that sets the context, and you forget to add it, your component will panic at runtime..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/context", "title": "Context in Templ", "description": "This page discusses the problems that the context feature solves in Templ, including prop drilling and coupling, and provides examples of how to use context effectively in templ components and with HTTP middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "section_detail", "page_metadata": {"ogDescription": "What problems does context solve?", "og:locale": "en", "og:description": "What problems does context solve?", "ogUrl": "https://templ.guide/syntax-and-usage/context/", "docusaurus_version": "current", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:title": "Context | templ docs", "twitter:card": "summary_large_image", "ogTitle": "Context | templ docs", "title": "Context | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/context/", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "docsearch:version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "What problems does context solve?", "scrapeId": "e110805d-12f7-4f06-9eb1-850610e200b9", "sourceURL": "https://templ.guide/syntax-and-usage/context", "url": "https://templ.guide/syntax-and-usage/context/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Context in Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Prop Drilling Example**:\n\n```yaml\n```go\npackage main\n\ntempl top(name string) {\n\t<div>\n\t\t@middle(name)\n\t</div>\n}\n\ntempl middle(name string) {\n\t<ul>\n\t\t@bottom(name)\n\t</ul>\n}\n\ntempl bottom(name string) {\n  <li>{ name }</li>\n}\n```\n```\n\nThis snippet shows you how to prop drilling example, which is an important aspect of context in templ.\n\n**Settings Struct Example**:\n\n```yaml\n```go\npackage main\n\ntype Settings struct {\n\tUsername string\n\tLocale   string\n\tTheme    string\n}\n\ntempl top(settings Settings) {\n\t<div>\n\t\t@middle(settings)\n\t</div>\n}\n\ntempl middle(settings Settings) {\n\t<ul>\n\t\t@bottom(settings)\n\t</ul>\n}\n\ntempl bottom(settings Settings) {\n  <li>{ settings.Theme }</li>\n}\n```\n```\n\nThis snippet shows you how to settings struct example, which is an important aspect of context in templ.\n\n**Using Context in Templ**:\n\n```yaml\n```go\ntempl themeName() {\n\t<div>{ ctx.Value(themeContextKey).(string) }</div>\n}\n```\n```\n\nThis snippet shows you how to using context in templ, which is an important aspect of context in templ.\n\n**Creating Context Key**:\n\n```yaml\n```go\n// Define the context key type.\ntype contextKey string\n\n// Create a context key for the theme.\nvar themeContextKey contextKey = \"theme\"\n\n// Create a context variable that inherits from a parent, and sets the value \"test\".\nctx := context.WithValue(context.Background(), themeContextKey, \"test\")\n\n// Pass the ctx variable to the render function.\nthemeName().Render(ctx, w)\n```\n```\n\nThis snippet shows you how to creating context key, which is an important aspect of context in templ.\n\n**GetTheme Function Example**:\n\n```yaml\n```go\nfunc GetTheme(ctx context.Context) string {\n\tif theme, ok := ctx.Value(themeContextKey).(string); ok {\n\t\treturn theme\n\t}\n\treturn \"\"\n}\n```\n```\n\nThis snippet shows you how to gettheme function example, which is an important aspect of context in templ.\n\n**Using Context with HTTP Middleware**:\n\n```yaml\n```go\ntype contextKey string\nvar contextClass = contextKey(\"class\")\n\nfunc Middleware(next http.Handler) http.Handler {\n  return http.HandlerFunc(func (w http.ResponseWriter, r *http.Request ) {\n    ctx := context.WithValue(r.Context(), contextClass, \"red\")\n    next.ServeHTTP(w, r.WithContext(ctx))\n  })\n}\n\ntempl Page() {\n  @Show()\n}\n\ntempl Show() {\n  <div class={ ctx.Value(contextClass) }>Display</div>\n}\n\nfunc main() {\n  h := templ.Handler(Page())\n  withMiddleware := Middleware(h)\n  http.Handle(\"/\", withMiddleware)\n  http.ListenAndServe(\":8080\", h)\n}\n```\n```\n\nThis snippet shows you how to using context with http middleware, which is an important aspect of context in templ.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/context", "title": "Context in Templ", "description": "This page discusses the problems that the context feature solves in Templ, including prop drilling and coupling, and provides examples of how to use context effectively in templ components and with HTTP middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "code_examples", "page_metadata": {"ogDescription": "What problems does context solve?", "og:locale": "en", "og:description": "What problems does context solve?", "ogUrl": "https://templ.guide/syntax-and-usage/context/", "docusaurus_version": "current", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:title": "Context | templ docs", "twitter:card": "summary_large_image", "ogTitle": "Context | templ docs", "title": "Context | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/context/", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "docsearch:version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "What problems does context solve?", "scrapeId": "e110805d-12f7-4f06-9eb1-850610e200b9", "sourceURL": "https://templ.guide/syntax-and-usage/context", "url": "https://templ.guide/syntax-and-usage/context/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Context in Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIn many cases, prop drilling is the best way to pass data because it's simple and reliable.\n\nContext is not strongly typed, and errors only show at runtime, not compile time, so it should be used sparingly in your application.\n\nRather than read from the context object directly, it's common to implement a type-safe function instead.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/context", "title": "Context in Templ", "description": "This page discusses the problems that the context feature solves in Templ, including prop drilling and coupling, and provides examples of how to use context effectively in templ components and with HTTP middleware.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:42:48", "type": "best_practices", "page_metadata": {"ogDescription": "What problems does context solve?", "og:locale": "en", "og:description": "What problems does context solve?", "ogUrl": "https://templ.guide/syntax-and-usage/context/", "docusaurus_version": "current", "docsearch:language": "en", "docusaurus_tag": "docs-default-current", "og:title": "Context | templ docs", "twitter:card": "summary_large_image", "ogTitle": "Context | templ docs", "title": "Context | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/context/", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docusaurus_locale": "en", "docsearch:version": "current", "language": "en", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogImage": "https://templ.guide/img/social-card.jpg", "description": "What problems does context solve?", "scrapeId": "e110805d-12f7-4f06-9eb1-850610e200b9", "sourceURL": "https://templ.guide/syntax-and-usage/context", "url": "https://templ.guide/syntax-and-usage/context/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what CSS Style Management is in templ?\n\nAssistant: Sure, I'd be happy to explain CSS Style Management in templ.\n\n# CSS Style Management\n\nThis page covers the management of CSS styles and classes in templ, including how to use HTML attributes, style attributes, dynamic class names, and CSS components.Here's a quick rundown of what this is about:\n\n## HTML class and style attributes\n\nThe standard HTML `class` and `style` attributes can be added to components. Note the use of standard quotes to denote a static value.\n\n```codeBlockLines_e6Vv\ntempl button(text string) {\n\t<button class=\"button is-primary\" style=\"background-color: red\">{ text }</button>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<button class=\"button is-primary\" style=\"background-color: red\">\n Click me\n</button>\n```\n\n## Style attribute\n\nTo use a variable in the style attribute, use braces to denote the Go expression.\n\n```codeBlockLines_e6Vv\ntempl button(style, text string) {\n\t<button style={ style }>{ text }</button>\n}\n```\n\nYou can pass multiple values to the `style` attribute. The results are all added to the output.\n\n```codeBlockLines_e6Vv\ntempl button(style1, style2 string, text string) {\n\t<button style={ style1, style2 }>{ text }</button>\n}\n```\n\nThe style attribute supports use of the following types:\n\n- `string` - A string containing CSS properties, e.g. `background-color: red`.\n- `templ.SafeCSS` - A value containing CSS properties and values that will not be sanitized, e.g. `background-color: red; text-decoration: underline`\n- `map[string]string` - A map of string keys to string values, e.g. `map[string]string{\"color\": \"red\"}`\n- `map[string]templ.SafeCSSProperty` - A map of string keys to values, where the values will not be sanitized.\n- `templ.KeyValue[string, string]` - A single CSS key/value.\n- `templ.KeyValue[string, templ.SafeCSSProperty` - A CSS key/value, but the value will not be sanitized.\\n- `templ.KeyValue[string, bool]` - A map where the CSS in the key is only included in the output if the boolean value is true.\\n- `templ.KeyValue[templ.SafeCSS, bool]` - A map where the CSS in the key is only included if the boolean value is true.\\n\\nFinally, a function value that returns any of the above types can be used.\\n\\nGo syntax allows you to pass a single function that returns a value and an error.\\n\\n```codeBlockLines_e6Vv\\ntempl Page(userType string) {\\n\t<div style={ getStyle(userType) }>Styled</div>\\n}\\n\\nfunc getStyle(userType string) (string, error) {\\n   //TODO: Look up in something that might error.\\n   return \"background-color: red\", errors.New(\"failed\")\\n}\\n```\\n\\nOr multiple functions and values that return a single type.\\n\\n```codeBlockLines_e6Vv\\ntempl Page(userType string) {\\n\t<div style={ getStyle(userType), \"color: blue\" }>Styled</div>\\n}\\n\\nfunc getStyle(userType string) (string) {\\n   return \"background-color: red\"\\n}\\n```\n\n## Style attribute examples\n\nMaps are useful when styles need to be dynamically computed based on component state or external inputs.\n\n```codeBlockLines_e6Vv\\nfunc getProgressStyle(percent int) map[string]string {\\n    return map[string]string{\\n        \"width\": fmt.Sprintf(\"%d%%\", percent),\\n        \"transition\": \"width 0.3s ease\",\\n    }\\n}\\n\\ntempl ProgressBar(percent int) {\\n    <div style={ getProgressStyle(percent) } class=\"progress-bar\">\\n        <div class=\"progress-fill\"></div>\\n    </div>\\n}\\n```\\n\\nOutput (percent=75)\\n\\n```codeBlockLines_e6Vv\\n<div style=\"transition:width 0.3s ease;width:75%;\" class=\"progress-bar\">\\n    <div class=\"progress-fill\"></div>\\n</div>\\n```\\n\\nThe `templ.KV` helper provides conditional style application in a more compact syntax.\\n\\n```codeBlockLines_e6Vv\\ntempl TextInput(value string, hasError bool) {\\n    <input\\n        type=\"text\"\\n        value={ value }\\n        style={\\n            templ.KV(\"border-color: #ff3860\", hasError),\\n            templ.KV(\"background-color: #fff5f7\", hasError),\\n            \"padding: 0.5em 1em;\",\\n        }\\n    >\\n}\\n```\\n\\nOutput (hasError=true)\\n\\n```codeBlockLines_e6Vv\\n<input\\n    type=\"text\"\\n    value=\"\"\\n    style=\"border-color: #ff3860; background-color: #fff5f7; padding: 0.5em 1em;\">\\n```\\n\\nBy default, dynamic CSS values are sanitized to protect against dangerous CSS values that might introduce vulnerabilities into your application.\\n\\nHowever, if you're sure, you can bypass sanitization by marking your content as safe with the `templ.SafeCSS` and `templ.SafeCSSProperty` types.\\n\\n```codeBlockLines_e6Vv\\nfunc calculatePositionStyles(x, y int) templ.SafeCSS {\\n    return templ.SafeCSS(fmt.Sprintf(\\n        \"transform: translate(%dpx, %dpx);\",\\n        x*2,  // Example calculation\\n        y*2,\\n    ))\\n}\\n\\ntempl DraggableElement(x, y int) {\\n    <div style={ calculatePositionStyles(x, y) }>\\n        Drag me\\n    </div>\\n}\\n```\\n\\nOutput (x=10, y=20)\\n\\n```codeBlockLines_e6Vv\\n<div style=\"transform: translate(20px, 40px);\">\\n    Drag me\\n</div>\\n```\n\n## Pattern use cases\n\n| Pattern | Best For | Example Use Case |\\n| --- | --- | --- |\\n| **Maps** | Dynamic style sets requiring multiple computed values | Progress indicators, theme switching |\\n| **KeyValue** | Conditional style toggling | Form validation, interactive states |\\n| **Functions** | Complex style generation | Animations, data visualizations |\\n| **Direct Strings** | Simple static styles | Basic formatting, utility classes |\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/css-style-management", "title": "CSS Style Management", "description": "This page covers the management of CSS styles and classes in templ, including how to use HTML attributes, style attributes, dynamic class names, and CSS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:24", "type": "overview", "page_metadata": {"og:locale": "en", "ogDescription": "HTML class and style attributes", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "description": "HTML class and style attributes", "ogTitle": "CSS style management | templ docs", "ogLocale": "en", "title": "CSS style management | templ docs", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/syntax-and-usage/css-style-management/", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/css-style-management/", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:title": "CSS style management | templ docs", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "og:description": "HTML class and style attributes", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "scrapeId": "11266a89-14cf-4454-8b9a-ad4e825b7e3e", "sourceURL": "https://templ.guide/syntax-and-usage/css-style-management", "url": "https://templ.guide/syntax-and-usage/css-style-management/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I html class and style attributes in templ?\n\nAssistant: To html class and style attributes in templ, here's what you do:\nThe standard HTML `class` and `style` attributes can be added to components. Note the use of standard quotes to denote a static value.\n\n```codeBlockLines_e6Vv\ntempl button(text string) {\n\t<button class=\"button is-primary\" style=\"background-color: red\">{ text }</button>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<button class=\"button is-primary\" style=\"background-color: red\">\n Click me\n</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/css-style-management", "title": "CSS Style Management", "description": "This page covers the management of CSS styles and classes in templ, including how to use HTML attributes, style attributes, dynamic class names, and CSS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "HTML class and style attributes", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "description": "HTML class and style attributes", "ogTitle": "CSS style management | templ docs", "ogLocale": "en", "title": "CSS style management | templ docs", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/syntax-and-usage/css-style-management/", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/css-style-management/", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:title": "CSS style management | templ docs", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "og:description": "HTML class and style attributes", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "scrapeId": "11266a89-14cf-4454-8b9a-ad4e825b7e3e", "sourceURL": "https://templ.guide/syntax-and-usage/css-style-management", "url": "https://templ.guide/syntax-and-usage/css-style-management/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I style attribute in templ?\n\nAssistant: To style attribute in templ, here's what you do:\nTo use a variable in the style attribute, use braces to denote the Go expression.\n\n```codeBlockLines_e6Vv\ntempl button(style, text string) {\n\t<button style={ style }>{ text }</button>\n}\n```\n\nYou can pass multiple values to the `style` attribute. The results are all added to the output.\n\n```codeBlockLines_e6Vv\ntempl button(style1, style2 string, text string) {\n\t<button style={ style1, style2 }>{ text }</button>\n}\n```\n\nThe style attribute supports use of the following types:\n\n- `string` - A string containing CSS properties, e.g. `background-color: red`.\n- `templ.SafeCSS` - A value containing CSS properties and values that will not be sanitized, e.g. `background-color: red; text-decoration: underline`\n- `map[string]string` - A map of string keys to string values, e.g. `map[string]string{\"color\": \"red\"}`\n- `map[string]templ.SafeCSSProperty` - A map of string keys to values, where the values will not be sanitized.\n- `templ.KeyValue[string, string]` - A single CSS key/value.\n- `templ.KeyValue[string, templ.SafeCSSProperty` - A CSS key/value, but the value will not be sanitized.\\n- `templ.KeyValue[string, bool]` - A map where the CSS in the key is only included in the output if the boolean value is true.\\n- `templ.KeyValue[templ.SafeCSS, bool]` - A map where the CSS in the key is only included if the boolean value is true.\\n\\nFinally, a function value that returns any of the above types can be used.\\n\\nGo syntax allows you to pass a single function that returns a value and an error.\\n\\n```codeBlockLines_e6Vv\\ntempl Page(userType string) {\\n\t<div style={ getStyle(userType) }>Styled</div>\\n}\\n\\nfunc getStyle(userType string) (string, error) {\\n   //TODO: Look up in something that might error.\\n   return \"background-color: red\", errors.New(\"failed\")\\n}\\n```\\n\\nOr multiple functions and values that return a single type.\\n\\n```codeBlockLines_e6Vv\\ntempl Page(userType string) {\\n\t<div style={ getStyle(userType), \"color: blue\" }>Styled</div>\\n}\\n\\nfunc getStyle(userType string) (string) {\\n   return \"background-color: red\"\\n}\\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/css-style-management", "title": "CSS Style Management", "description": "This page covers the management of CSS styles and classes in templ, including how to use HTML attributes, style attributes, dynamic class names, and CSS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "HTML class and style attributes", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "description": "HTML class and style attributes", "ogTitle": "CSS style management | templ docs", "ogLocale": "en", "title": "CSS style management | templ docs", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/syntax-and-usage/css-style-management/", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/css-style-management/", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:title": "CSS style management | templ docs", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "og:description": "HTML class and style attributes", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "scrapeId": "11266a89-14cf-4454-8b9a-ad4e825b7e3e", "sourceURL": "https://templ.guide/syntax-and-usage/css-style-management", "url": "https://templ.guide/syntax-and-usage/css-style-management/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I style attribute examples in templ?\n\nAssistant: To style attribute examples in templ, here's what you do:\nMaps are useful when styles need to be dynamically computed based on component state or external inputs.\n\n```codeBlockLines_e6Vv\\nfunc getProgressStyle(percent int) map[string]string {\\n    return map[string]string{\\n        \"width\": fmt.Sprintf(\"%d%%\", percent),\\n        \"transition\": \"width 0.3s ease\",\\n    }\\n}\\n\\ntempl ProgressBar(percent int) {\\n    <div style={ getProgressStyle(percent) } class=\"progress-bar\">\\n        <div class=\"progress-fill\"></div>\\n    </div>\\n}\\n```\\n\\nOutput (percent=75)\\n\\n```codeBlockLines_e6Vv\\n<div style=\"transition:width 0.3s ease;width:75%;\" class=\"progress-bar\">\\n    <div class=\"progress-fill\"></div>\\n</div>\\n```\\n\\nThe `templ.KV` helper provides conditional style application in a more compact syntax.\\n\\n```codeBlockLines_e6Vv\\ntempl TextInput(value string, hasError bool) {\\n    <input\\n        type=\"text\"\\n        value={ value }\\n        style={\\n            templ.KV(\"border-color: #ff3860\", hasError),\\n            templ.KV(\"background-color: #fff5f7\", hasError),\\n            \"padding: 0.5em 1em;\",\\n        }\\n    >\\n}\\n```\\n\\nOutput (hasError=true)\\n\\n```codeBlockLines_e6Vv\\n<input\\n    type=\"text\"\\n    value=\"\"\\n    style=\"border-color: #ff3860; background-color: #fff5f7; padding: 0.5em 1em;\">\\n```\\n\\nBy default, dynamic CSS values are sanitized to protect against dangerous CSS values that might introduce vulnerabilities into your application.\\n\\nHowever, if you're sure, you can bypass sanitization by marking your content as safe with the `templ.SafeCSS` and `templ.SafeCSSProperty` types.\\n\\n```codeBlockLines_e6Vv\\nfunc calculatePositionStyles(x, y int) templ.SafeCSS {\\n    return templ.SafeCSS(fmt.Sprintf(\\n        \"transform: translate(%dpx, %dpx);\",\\n        x*2,  // Example calculation\\n        y*2,\\n    ))\\n}\\n\\ntempl DraggableElement(x, y int) {\\n    <div style={ calculatePositionStyles(x, y) }>\\n        Drag me\\n    </div>\\n}\\n```\\n\\nOutput (x=10, y=20)\\n\\n```codeBlockLines_e6Vv\\n<div style=\"transform: translate(20px, 40px);\">\\n    Drag me\\n</div>\\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/css-style-management", "title": "CSS Style Management", "description": "This page covers the management of CSS styles and classes in templ, including how to use HTML attributes, style attributes, dynamic class names, and CSS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "HTML class and style attributes", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "description": "HTML class and style attributes", "ogTitle": "CSS style management | templ docs", "ogLocale": "en", "title": "CSS style management | templ docs", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/syntax-and-usage/css-style-management/", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/css-style-management/", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:title": "CSS style management | templ docs", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "og:description": "HTML class and style attributes", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "scrapeId": "11266a89-14cf-4454-8b9a-ad4e825b7e3e", "sourceURL": "https://templ.guide/syntax-and-usage/css-style-management", "url": "https://templ.guide/syntax-and-usage/css-style-management/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I pattern use cases in templ?\n\nAssistant: To pattern use cases in templ, here's what you do:\n| Pattern | Best For | Example Use Case |\\n| --- | --- | --- |\\n| **Maps** | Dynamic style sets requiring multiple computed values | Progress indicators, theme switching |\\n| **KeyValue** | Conditional style toggling | Form validation, interactive states |\\n| **Functions** | Complex style generation | Animations, data visualizations |\\n| **Direct Strings** | Simple static styles | Basic formatting, utility classes |.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/css-style-management", "title": "CSS Style Management", "description": "This page covers the management of CSS styles and classes in templ, including how to use HTML attributes, style attributes, dynamic class names, and CSS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:24", "type": "section_detail", "page_metadata": {"og:locale": "en", "ogDescription": "HTML class and style attributes", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "description": "HTML class and style attributes", "ogTitle": "CSS style management | templ docs", "ogLocale": "en", "title": "CSS style management | templ docs", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/syntax-and-usage/css-style-management/", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/css-style-management/", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:title": "CSS style management | templ docs", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "og:description": "HTML class and style attributes", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "scrapeId": "11266a89-14cf-4454-8b9a-ad4e825b7e3e", "sourceURL": "https://templ.guide/syntax-and-usage/css-style-management", "url": "https://templ.guide/syntax-and-usage/css-style-management/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for CSS Style Management in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**HTML class and style attributes example**:\n\n```yaml\ntempl button(text string) {\n\t<button class=\"button is-primary\" style=\"background-color: red\">{ text }</button>\n}\n```\n\nThis snippet shows you how to html class and style attributes example, which is an important aspect of css style management.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/css-style-management", "title": "CSS Style Management", "description": "This page covers the management of CSS styles and classes in templ, including how to use HTML attributes, style attributes, dynamic class names, and CSS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:24", "type": "code_examples", "page_metadata": {"og:locale": "en", "ogDescription": "HTML class and style attributes", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "description": "HTML class and style attributes", "ogTitle": "CSS style management | templ docs", "ogLocale": "en", "title": "CSS style management | templ docs", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/syntax-and-usage/css-style-management/", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/css-style-management/", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:title": "CSS style management | templ docs", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "og:description": "HTML class and style attributes", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "scrapeId": "11266a89-14cf-4454-8b9a-ad4e825b7e3e", "sourceURL": "https://templ.guide/syntax-and-usage/css-style-management", "url": "https://templ.guide/syntax-and-usage/css-style-management/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using CSS Style Management in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIf you want to make sure that the CSS element is only output once, even if you use a template many times, use a CSS expression.\n\nDon't forget to add a `<link rel=\"stylesheet\" href=\"/styles/templ.css\">` to your HTML to include the generated CSS class names!\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/css-style-management", "title": "CSS Style Management", "description": "This page covers the management of CSS styles and classes in templ, including how to use HTML attributes, style attributes, dynamic class names, and CSS components.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:43:24", "type": "best_practices", "page_metadata": {"og:locale": "en", "ogDescription": "HTML class and style attributes", "docsearch:language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_version": "current", "description": "HTML class and style attributes", "ogTitle": "CSS style management | templ docs", "ogLocale": "en", "title": "CSS style management | templ docs", "generator": "Docusaurus v3.6.3", "ogUrl": "https://templ.guide/syntax-and-usage/css-style-management/", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/css-style-management/", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "docsearch:version": "current", "og:title": "CSS style management | templ docs", "twitter:card": "summary_large_image", "og:image": "https://templ.guide/img/social-card.jpg", "og:description": "HTML class and style attributes", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "language": "en", "scrapeId": "11266a89-14cf-4454-8b9a-ad4e825b7e3e", "sourceURL": "https://templ.guide/syntax-and-usage/css-style-management", "url": "https://templ.guide/syntax-and-usage/css-style-management/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what templ Elements Usage is in templ?\n\nAssistant: Sure, I'd be happy to explain templ Elements Usage in templ.\n\n# templ Elements Usage\n\nThis page covers the usage of templ elements to render HTML within templ components.Here's a quick rundown of what this is about:\n\n## Introduction\n\ntempl elements are used to render HTML within templ components.\n\n## Button Example\n\nThe following example demonstrates how to create a button using templ:\n\n```go\npackage main\n\ntempl button(text string) {\n\t<button class=\"button\">{ text }</button>\n}\n```\n\nIn the main function, we can render this button:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tbutton(\"Click me\").Render(context.Background(), os.Stdout)\n}\n```\n\nThe output will be:\n\n```html\n<button class=\"button\">\n Click me\n</button>\n```\n\n## Info\n\ntempl automatically minifies HTML responses, output is shown formatted for readability.\n\n## Tags must be closed\n\nUnlike HTML, templ requires that all HTML elements are closed with either a closing tag ( `</a>`), or by using a self-closing element ( `<hr/>`).\n\ntempl is aware of which HTML elements are \"void\", and will not include the closing `/` in the output HTML.\n\nExample:\n\n```go\npackage main\n\ntempl component() {\n\t<div>Test</div>\n\t<img src=\"images/test.png\"/>\n\t<br/>\n}\n```\n\nThe output will be:\n\n```html\n<div>Test</div>\n<img src=\"images/test.png\">\n<br>\n```\n\n## Attributes and Elements Can Contain Expressions\n\ntempl elements can contain placeholder expressions for attributes and content.\n\nExample:\n\n```go\npackage main\n\ntempl button(name string, content string) {\n\t<button value={ name }>{ content }</button>\n}\n```\n\nRendering the component to stdout:\n\n```go\nfunc main() {\n\tcomponent := button(\"John\", \"Say Hello\")\n\tcomponent.Render(context.Background(), os.Stdout)\n}\n```\n\nThe output will be:\n\n```html\n<button value=\"John\">Say Hello</button>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/elements", "title": "templ Elements Usage", "description": "This page covers the usage of templ elements to render HTML within templ components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:43:40", "type": "overview", "page_metadata": {"language": "en", "ogTitle": "Elements | templ docs", "title": "Elements | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/elements/", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ elements are used to render HTML within templ components.", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/elements/", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "templ elements are used to render HTML within templ components.", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "og:title": "Elements | templ docs", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "description": "templ elements are used to render HTML within templ components.", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "scrapeId": "3b8336c4-bdd9-48be-9796-17086c238908", "sourceURL": "https://templ.guide/syntax-and-usage/elements", "url": "https://templ.guide/syntax-and-usage/elements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I introduction in templ?\n\nAssistant: To introduction in templ, here's what you do:\ntempl elements are used to render HTML within templ components..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/elements", "title": "templ Elements Usage", "description": "This page covers the usage of templ elements to render HTML within templ components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:43:40", "type": "section_detail", "page_metadata": {"language": "en", "ogTitle": "Elements | templ docs", "title": "Elements | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/elements/", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ elements are used to render HTML within templ components.", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/elements/", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "templ elements are used to render HTML within templ components.", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "og:title": "Elements | templ docs", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "description": "templ elements are used to render HTML within templ components.", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "scrapeId": "3b8336c4-bdd9-48be-9796-17086c238908", "sourceURL": "https://templ.guide/syntax-and-usage/elements", "url": "https://templ.guide/syntax-and-usage/elements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I button example in templ?\n\nAssistant: To button example in templ, here's what you do:\nThe following example demonstrates how to create a button using templ:\n\n```go\npackage main\n\ntempl button(text string) {\n\t<button class=\"button\">{ text }</button>\n}\n```\n\nIn the main function, we can render this button:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tbutton(\"Click me\").Render(context.Background(), os.Stdout)\n}\n```\n\nThe output will be:\n\n```html\n<button class=\"button\">\n Click me\n</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/elements", "title": "templ Elements Usage", "description": "This page covers the usage of templ elements to render HTML within templ components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:43:40", "type": "section_detail", "page_metadata": {"language": "en", "ogTitle": "Elements | templ docs", "title": "Elements | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/elements/", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ elements are used to render HTML within templ components.", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/elements/", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "templ elements are used to render HTML within templ components.", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "og:title": "Elements | templ docs", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "description": "templ elements are used to render HTML within templ components.", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "scrapeId": "3b8336c4-bdd9-48be-9796-17086c238908", "sourceURL": "https://templ.guide/syntax-and-usage/elements", "url": "https://templ.guide/syntax-and-usage/elements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I info in templ?\n\nAssistant: To info in templ, here's what you do:\ntempl automatically minifies HTML responses, output is shown formatted for readability..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/elements", "title": "templ Elements Usage", "description": "This page covers the usage of templ elements to render HTML within templ components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:43:40", "type": "section_detail", "page_metadata": {"language": "en", "ogTitle": "Elements | templ docs", "title": "Elements | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/elements/", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ elements are used to render HTML within templ components.", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/elements/", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "templ elements are used to render HTML within templ components.", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "og:title": "Elements | templ docs", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "description": "templ elements are used to render HTML within templ components.", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "scrapeId": "3b8336c4-bdd9-48be-9796-17086c238908", "sourceURL": "https://templ.guide/syntax-and-usage/elements", "url": "https://templ.guide/syntax-and-usage/elements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I tags must be closed in templ?\n\nAssistant: To tags must be closed in templ, here's what you do:\nUnlike HTML, templ requires that all HTML elements are closed with either a closing tag ( `</a>`), or by using a self-closing element ( `<hr/>`).\n\ntempl is aware of which HTML elements are \"void\", and will not include the closing `/` in the output HTML.\n\nExample:\n\n```go\npackage main\n\ntempl component() {\n\t<div>Test</div>\n\t<img src=\"images/test.png\"/>\n\t<br/>\n}\n```\n\nThe output will be:\n\n```html\n<div>Test</div>\n<img src=\"images/test.png\">\n<br>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/elements", "title": "templ Elements Usage", "description": "This page covers the usage of templ elements to render HTML within templ components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:43:40", "type": "section_detail", "page_metadata": {"language": "en", "ogTitle": "Elements | templ docs", "title": "Elements | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/elements/", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ elements are used to render HTML within templ components.", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/elements/", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "templ elements are used to render HTML within templ components.", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "og:title": "Elements | templ docs", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "description": "templ elements are used to render HTML within templ components.", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "scrapeId": "3b8336c4-bdd9-48be-9796-17086c238908", "sourceURL": "https://templ.guide/syntax-and-usage/elements", "url": "https://templ.guide/syntax-and-usage/elements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I attributes and elements can contain expressions in templ?\n\nAssistant: To attributes and elements can contain expressions in templ, here's what you do:\ntempl elements can contain placeholder expressions for attributes and content.\n\nExample:\n\n```go\npackage main\n\ntempl button(name string, content string) {\n\t<button value={ name }>{ content }</button>\n}\n```\n\nRendering the component to stdout:\n\n```go\nfunc main() {\n\tcomponent := button(\"John\", \"Say Hello\")\n\tcomponent.Render(context.Background(), os.Stdout)\n}\n```\n\nThe output will be:\n\n```html\n<button value=\"John\">Say Hello</button>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/elements", "title": "templ Elements Usage", "description": "This page covers the usage of templ elements to render HTML within templ components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:43:40", "type": "section_detail", "page_metadata": {"language": "en", "ogTitle": "Elements | templ docs", "title": "Elements | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/elements/", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ elements are used to render HTML within templ components.", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/elements/", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "templ elements are used to render HTML within templ components.", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "og:title": "Elements | templ docs", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "description": "templ elements are used to render HTML within templ components.", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "scrapeId": "3b8336c4-bdd9-48be-9796-17086c238908", "sourceURL": "https://templ.guide/syntax-and-usage/elements", "url": "https://templ.guide/syntax-and-usage/elements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for templ Elements Usage in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Button Example**:\n\n```yaml\npackage main\n\ntempl button(text string) {\n\t<button class=\"button\">{ text }</button>\n}\n\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tbutton(\"Click me\").Render(context.Background(), os.Stdout)\n}\n```\n\nThis snippet shows you how to button example, which is an important aspect of templ elements usage.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/elements", "title": "templ Elements Usage", "description": "This page covers the usage of templ elements to render HTML within templ components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:43:40", "type": "code_examples", "page_metadata": {"language": "en", "ogTitle": "Elements | templ docs", "title": "Elements | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/elements/", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ elements are used to render HTML within templ components.", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/elements/", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "templ elements are used to render HTML within templ components.", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "og:title": "Elements | templ docs", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "description": "templ elements are used to render HTML within templ components.", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "scrapeId": "3b8336c4-bdd9-48be-9796-17086c238908", "sourceURL": "https://templ.guide/syntax-and-usage/elements", "url": "https://templ.guide/syntax-and-usage/elements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using templ Elements Usage in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTags must be closed\n\nAttributes and elements can contain expressions\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/elements", "title": "templ Elements Usage", "description": "This page covers the usage of templ elements to render HTML within templ components.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-03-01 03:43:40", "type": "best_practices", "page_metadata": {"language": "en", "ogTitle": "Elements | templ docs", "title": "Elements | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/elements/", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ elements are used to render HTML within templ components.", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/elements/", "docusaurus_tag": "docs-default-current", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "docusaurus_version": "current", "og:description": "templ elements are used to render HTML within templ components.", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "og:title": "Elements | templ docs", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "description": "templ elements are used to render HTML within templ components.", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "scrapeId": "3b8336c4-bdd9-48be-9796-17086c238908", "sourceURL": "https://templ.guide/syntax-and-usage/elements", "url": "https://templ.guide/syntax-and-usage/elements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what String expressions is in templ?\n\nAssistant: Sure, I'd be happy to explain String expressions in templ.\n\n# String expressions\n\nWithin a templ element, expressions can be used to render strings. Content is automatically escaped using context-aware HTML encoding rules to protect against XSS and CSS injection attacks.Here's a quick rundown of what this is about:\n\n## Literals\n\nYou can use Go string literals.\n\ncomponent.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl component() {\n  <div>{ \"print this\" }</div>\n  <div>{ `and this` }</div>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>print this</div><div>and this</div>\n```\n\n\n## Variables\n\nAny Go string variable can be used, for example:\n\n- A string function parameter.\n- A field on a struct.\n- A variable or constant string that is in scope.\n\n/main.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl greet(prefix string, p Person) {\n  <div>{ prefix } { p.Name }{ exclamation }</div>\n}\n```\n\nmain.go\n\n```codeBlockLines_e6Vv\npackage main\n\ntype Person struct {\n  Name string\n}\n\nconst exclamation = \"!\"\n\nfunc main() {\n  p := Person{ Name: \"John\" }\n  component := greet(\"Hello\", p)\n  component.Render(context.Background(), os.Stdout)\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>Hello John!</div>\n```\n\n\n## Functions\n\nFunctions that return `string` or `(string, error)` can be used.\n\ncomponent.templ\n\n```codeBlockLines_e6Vv\npackage main\n\nimport \"strings\"\nimport \"strconv\"\n\nfunc getString() (string, error) {\n  return \"DEF\", nil\n}\n\ntempl component() {\n  <div>{ strings.ToUpper(\"abc\") }</div>\n  <div>{ getString() }</div>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>ABC</div>\n<div>DEF</div>\n```\n\nIf the function returns an error, the `Render` function will return an error containing the location of the error and the underlying error.\n\n## Escaping\n\ntempl automatically escapes strings using HTML escaping rules.\n\ncomponent.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl component() {\n  <div>{ `</div><script>alert('hello!')</script><div>` }</div>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>&lt;/div&gt;&lt;script&gt;alert(&#39;hello!&#39;)&lt;/script&gt;&lt;div&gt;</div>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/expressions", "title": "String expressions", "description": "Within a templ element, expressions can be used to render strings. Content is automatically escaped using context-aware HTML encoding rules to protect against XSS and CSS injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:08", "type": "overview", "page_metadata": {"docsearch:version": "current", "og:title": "Expressions | templ docs", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/expressions/", "title": "Expressions | templ docs", "docusaurus_version": "current", "description": "String expressions", "ogDescription": "String expressions", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogTitle": "Expressions | templ docs", "language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/expressions/", "ogLocale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "String expressions", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "9cf8aa85-3771-431e-82b9-ff1b45b39002", "sourceURL": "https://templ.guide/syntax-and-usage/expressions", "url": "https://templ.guide/syntax-and-usage/expressions/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I literals in templ?\n\nAssistant: To literals in templ, here's what you do:\nYou can use Go string literals.\n\ncomponent.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl component() {\n  <div>{ \"print this\" }</div>\n  <div>{ `and this` }</div>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>print this</div><div>and this</div>\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/expressions", "title": "String expressions", "description": "Within a templ element, expressions can be used to render strings. Content is automatically escaped using context-aware HTML encoding rules to protect against XSS and CSS injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:08", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "og:title": "Expressions | templ docs", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/expressions/", "title": "Expressions | templ docs", "docusaurus_version": "current", "description": "String expressions", "ogDescription": "String expressions", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogTitle": "Expressions | templ docs", "language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/expressions/", "ogLocale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "String expressions", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "9cf8aa85-3771-431e-82b9-ff1b45b39002", "sourceURL": "https://templ.guide/syntax-and-usage/expressions", "url": "https://templ.guide/syntax-and-usage/expressions/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I variables in templ?\n\nAssistant: To variables in templ, here's what you do:\nAny Go string variable can be used, for example:\n\n- A string function parameter.\n- A field on a struct.\n- A variable or constant string that is in scope.\n\n/main.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl greet(prefix string, p Person) {\n  <div>{ prefix } { p.Name }{ exclamation }</div>\n}\n```\n\nmain.go\n\n```codeBlockLines_e6Vv\npackage main\n\ntype Person struct {\n  Name string\n}\n\nconst exclamation = \"!\"\n\nfunc main() {\n  p := Person{ Name: \"John\" }\n  component := greet(\"Hello\", p)\n  component.Render(context.Background(), os.Stdout)\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>Hello John!</div>\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/expressions", "title": "String expressions", "description": "Within a templ element, expressions can be used to render strings. Content is automatically escaped using context-aware HTML encoding rules to protect against XSS and CSS injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:08", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "og:title": "Expressions | templ docs", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/expressions/", "title": "Expressions | templ docs", "docusaurus_version": "current", "description": "String expressions", "ogDescription": "String expressions", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogTitle": "Expressions | templ docs", "language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/expressions/", "ogLocale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "String expressions", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "9cf8aa85-3771-431e-82b9-ff1b45b39002", "sourceURL": "https://templ.guide/syntax-and-usage/expressions", "url": "https://templ.guide/syntax-and-usage/expressions/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I functions in templ?\n\nAssistant: To functions in templ, here's what you do:\nFunctions that return `string` or `(string, error)` can be used.\n\ncomponent.templ\n\n```codeBlockLines_e6Vv\npackage main\n\nimport \"strings\"\nimport \"strconv\"\n\nfunc getString() (string, error) {\n  return \"DEF\", nil\n}\n\ntempl component() {\n  <div>{ strings.ToUpper(\"abc\") }</div>\n  <div>{ getString() }</div>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>ABC</div>\n<div>DEF</div>\n```\n\nIf the function returns an error, the `Render` function will return an error containing the location of the error and the underlying error..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/expressions", "title": "String expressions", "description": "Within a templ element, expressions can be used to render strings. Content is automatically escaped using context-aware HTML encoding rules to protect against XSS and CSS injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:08", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "og:title": "Expressions | templ docs", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/expressions/", "title": "Expressions | templ docs", "docusaurus_version": "current", "description": "String expressions", "ogDescription": "String expressions", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogTitle": "Expressions | templ docs", "language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/expressions/", "ogLocale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "String expressions", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "9cf8aa85-3771-431e-82b9-ff1b45b39002", "sourceURL": "https://templ.guide/syntax-and-usage/expressions", "url": "https://templ.guide/syntax-and-usage/expressions/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I escaping in templ?\n\nAssistant: To escaping in templ, here's what you do:\ntempl automatically escapes strings using HTML escaping rules.\n\ncomponent.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl component() {\n  <div>{ `</div><script>alert('hello!')</script><div>` }</div>\n}\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>&lt;/div&gt;&lt;script&gt;alert(&#39;hello!&#39;)&lt;/script&gt;&lt;div&gt;</div>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/expressions", "title": "String expressions", "description": "Within a templ element, expressions can be used to render strings. Content is automatically escaped using context-aware HTML encoding rules to protect against XSS and CSS injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:08", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "og:title": "Expressions | templ docs", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/expressions/", "title": "Expressions | templ docs", "docusaurus_version": "current", "description": "String expressions", "ogDescription": "String expressions", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogTitle": "Expressions | templ docs", "language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/expressions/", "ogLocale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "String expressions", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "9cf8aa85-3771-431e-82b9-ff1b45b39002", "sourceURL": "https://templ.guide/syntax-and-usage/expressions", "url": "https://templ.guide/syntax-and-usage/expressions/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for String expressions in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Literals Example**:\n\n```yaml\npackage main\n\ntempl component() {\n  <div>{ \"print this\" }</div>\n  <div>{ `and this` }</div>\n}\n```\n\nThis snippet shows you how to literals example, which is an important aspect of string expressions.\n\n**Variables Example**:\n\n```yaml\npackage main\n\ntype Person struct {\n  Name string\n}\n\nconst exclamation = \"!\"\n\nfunc main() {\n  p := Person{ Name: \"John\" }\n  component := greet(\"Hello\", p)\n  component.Render(context.Background(), os.Stdout)\n}\n```\n\nThis snippet shows you how to variables example, which is an important aspect of string expressions.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/expressions", "title": "String expressions", "description": "Within a templ element, expressions can be used to render strings. Content is automatically escaped using context-aware HTML encoding rules to protect against XSS and CSS injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:08", "type": "code_examples", "page_metadata": {"docsearch:version": "current", "og:title": "Expressions | templ docs", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/expressions/", "title": "Expressions | templ docs", "docusaurus_version": "current", "description": "String expressions", "ogDescription": "String expressions", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogTitle": "Expressions | templ docs", "language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/expressions/", "ogLocale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "String expressions", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "9cf8aa85-3771-431e-82b9-ff1b45b39002", "sourceURL": "https://templ.guide/syntax-and-usage/expressions", "url": "https://templ.guide/syntax-and-usage/expressions/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using String expressions in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nContent is automatically escaped using context-aware HTML encoding rules to protect against XSS and CSS injection attacks.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/expressions", "title": "String expressions", "description": "Within a templ element, expressions can be used to render strings. Content is automatically escaped using context-aware HTML encoding rules to protect against XSS and CSS injection attacks.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:44:08", "type": "best_practices", "page_metadata": {"docsearch:version": "current", "og:title": "Expressions | templ docs", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:language": "en", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/expressions/", "title": "Expressions | templ docs", "docusaurus_version": "current", "description": "String expressions", "ogDescription": "String expressions", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogTitle": "Expressions | templ docs", "language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/expressions/", "ogLocale": "en", "favicon": "https://templ.guide/img/favicon.ico", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:docusaurus_tag": "docs-default-current", "og:description": "String expressions", "docusaurus_locale": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "scrapeId": "9cf8aa85-3771-431e-82b9-ff1b45b39002", "sourceURL": "https://templ.guide/syntax-and-usage/expressions", "url": "https://templ.guide/syntax-and-usage/expressions/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Using If-Else Statements in Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Using If-Else Statements in Templ in templ.\n\n# Using If-Else Statements in Templ\n\nThis page covers how to use standard Go if/else statements in templ for conditional rendering of components and elements.Here's a quick rundown of what this is about:\n\n## Introduction\n\ntempl uses standard Go `if`/ `else` statements which can be used to conditionally render components and elements.\n\n## Code Example\n\nThe following code demonstrates how to use if/else statements in templ.\n\n## Output\n\nThe output of the above code will render a welcome message if the user is logged in.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/if-else", "title": "Using If-Else Statements in Templ", "description": "This page covers how to use standard Go if/else statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:44:21", "type": "overview", "page_metadata": {"ogDescription": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "If/else | templ docs", "og:description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://templ.guide/syntax-and-usage/if-else/", "language": "en", "ogTitle": "If/else | templ docs", "og:locale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/if-else/", "title": "If/else | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "4eca0264-9156-486c-80af-1d5efda1540a", "sourceURL": "https://templ.guide/syntax-and-usage/if-else", "url": "https://templ.guide/syntax-and-usage/if-else/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I introduction in templ?\n\nAssistant: To introduction in templ, here's what you do:\ntempl uses standard Go `if`/ `else` statements which can be used to conditionally render components and elements..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/if-else", "title": "Using If-Else Statements in Templ", "description": "This page covers how to use standard Go if/else statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:44:21", "type": "section_detail", "page_metadata": {"ogDescription": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "If/else | templ docs", "og:description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://templ.guide/syntax-and-usage/if-else/", "language": "en", "ogTitle": "If/else | templ docs", "og:locale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/if-else/", "title": "If/else | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "4eca0264-9156-486c-80af-1d5efda1540a", "sourceURL": "https://templ.guide/syntax-and-usage/if-else", "url": "https://templ.guide/syntax-and-usage/if-else/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I code example in templ?\n\nAssistant: To code example in templ, here's what you do:\nThe following code demonstrates how to use if/else statements in templ..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/if-else", "title": "Using If-Else Statements in Templ", "description": "This page covers how to use standard Go if/else statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:44:21", "type": "section_detail", "page_metadata": {"ogDescription": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "If/else | templ docs", "og:description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://templ.guide/syntax-and-usage/if-else/", "language": "en", "ogTitle": "If/else | templ docs", "og:locale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/if-else/", "title": "If/else | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "4eca0264-9156-486c-80af-1d5efda1540a", "sourceURL": "https://templ.guide/syntax-and-usage/if-else", "url": "https://templ.guide/syntax-and-usage/if-else/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I output in templ?\n\nAssistant: To output in templ, here's what you do:\nThe output of the above code will render a welcome message if the user is logged in..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/if-else", "title": "Using If-Else Statements in Templ", "description": "This page covers how to use standard Go if/else statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:44:21", "type": "section_detail", "page_metadata": {"ogDescription": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "If/else | templ docs", "og:description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://templ.guide/syntax-and-usage/if-else/", "language": "en", "ogTitle": "If/else | templ docs", "og:locale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/if-else/", "title": "If/else | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "4eca0264-9156-486c-80af-1d5efda1540a", "sourceURL": "https://templ.guide/syntax-and-usage/if-else", "url": "https://templ.guide/syntax-and-usage/if-else/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Using If-Else Statements in Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Component Example**:\n\n```yaml\ntempl login(isLoggedIn bool) {\n  if isLoggedIn {\n    <div>Welcome back!</div>\n  } else {\n    <input name=\"login\" type=\"button\" value=\"Log in\"/>\n  }\n}\n\n```\n\nThis snippet shows you how to component example, which is an important aspect of using if-else statements in templ.\n\n**Main Go File**:\n\n```yaml\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tlogin(true).Render(context.Background(), os.Stdout)\n}\n\n```\n\nThis snippet shows you how to main go file, which is an important aspect of using if-else statements in templ.\n\n**Output Example**:\n\n```yaml\n<div>\n Welcome back!\n</div>\n\n```\n\nThis snippet shows you how to output example, which is an important aspect of using if-else statements in templ.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/if-else", "title": "Using If-Else Statements in Templ", "description": "This page covers how to use standard Go if/else statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:44:21", "type": "code_examples", "page_metadata": {"ogDescription": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "If/else | templ docs", "og:description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://templ.guide/syntax-and-usage/if-else/", "language": "en", "ogTitle": "If/else | templ docs", "og:locale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/if-else/", "title": "If/else | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "4eca0264-9156-486c-80af-1d5efda1540a", "sourceURL": "https://templ.guide/syntax-and-usage/if-else", "url": "https://templ.guide/syntax-and-usage/if-else/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Using If-Else Statements in Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse if/else statements to manage different rendering scenarios based on conditions.\n\nEnsure that the conditions are clearly defined to avoid confusion in rendering logic.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/if-else", "title": "Using If-Else Statements in Templ", "description": "This page covers how to use standard Go if/else statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:44:21", "type": "best_practices", "page_metadata": {"ogDescription": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "docsearch:language": "en", "description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "docusaurus_tag": "docs-default-current", "generator": "Docusaurus v3.6.3", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_locale": "en", "docsearch:version": "current", "og:title": "If/else | templ docs", "og:description": "templ uses standard Go if/else statements which can be used to conditionally render components and elements.", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "og:url": "https://templ.guide/syntax-and-usage/if-else/", "language": "en", "ogTitle": "If/else | templ docs", "og:locale": "en", "docusaurus_version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/if-else/", "title": "If/else | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "4eca0264-9156-486c-80af-1d5efda1540a", "sourceURL": "https://templ.guide/syntax-and-usage/if-else", "url": "https://templ.guide/syntax-and-usage/if-else/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Loops in Go is in templ?\n\nAssistant: Sure, I'd be happy to explain Loops in Go in templ.\n\n# Loops in Go\n\nThis page covers the usage of loops in Go, specifically the standard `for` loop for iteration.Here's a quick rundown of what this is about:\n\n## Using the Standard Go `for` Loop\n\nThe standard Go `for` loop is used for iterating over collections such as slices, arrays, maps, and channels.\n\n## Code Example\n\nThe following example demonstrates how to use a `for` loop to iterate over a slice of items and render them as a list in HTML.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/loops", "title": "Loops in Go", "description": "This page covers the usage of loops in Go, specifically the standard `for` loop for iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:29", "type": "overview", "page_metadata": {"title": "For loops | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/loops/", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Use the standard Go for loop for iteration.", "docsearch:version": "current", "og:title": "For loops | templ docs", "description": "Use the standard Go for loop for iteration.", "ogTitle": "For loops | templ docs", "og:description": "Use the standard Go for loop for iteration.", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/loops/", "docusaurus_version": "current", "ogLocale": "en", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "3909c260-e739-46e1-a69b-6eb1c00eeee2", "sourceURL": "https://templ.guide/syntax-and-usage/loops", "url": "https://templ.guide/syntax-and-usage/loops/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using the standard go `for` loop in templ?\n\nAssistant: To using the standard go `for` loop in templ, here's what you do:\nThe standard Go `for` loop is used for iterating over collections such as slices, arrays, maps, and channels..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/loops", "title": "Loops in Go", "description": "This page covers the usage of loops in Go, specifically the standard `for` loop for iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:29", "type": "section_detail", "page_metadata": {"title": "For loops | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/loops/", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Use the standard Go for loop for iteration.", "docsearch:version": "current", "og:title": "For loops | templ docs", "description": "Use the standard Go for loop for iteration.", "ogTitle": "For loops | templ docs", "og:description": "Use the standard Go for loop for iteration.", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/loops/", "docusaurus_version": "current", "ogLocale": "en", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "3909c260-e739-46e1-a69b-6eb1c00eeee2", "sourceURL": "https://templ.guide/syntax-and-usage/loops", "url": "https://templ.guide/syntax-and-usage/loops/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I code example in templ?\n\nAssistant: To code example in templ, here's what you do:\nThe following example demonstrates how to use a `for` loop to iterate over a slice of items and render them as a list in HTML..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/loops", "title": "Loops in Go", "description": "This page covers the usage of loops in Go, specifically the standard `for` loop for iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:29", "type": "section_detail", "page_metadata": {"title": "For loops | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/loops/", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Use the standard Go for loop for iteration.", "docsearch:version": "current", "og:title": "For loops | templ docs", "description": "Use the standard Go for loop for iteration.", "ogTitle": "For loops | templ docs", "og:description": "Use the standard Go for loop for iteration.", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/loops/", "docusaurus_version": "current", "ogLocale": "en", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "3909c260-e739-46e1-a69b-6eb1c00eeee2", "sourceURL": "https://templ.guide/syntax-and-usage/loops", "url": "https://templ.guide/syntax-and-usage/loops/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Loops in Go in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Go `for` Loop Example**:\n\n```yaml\npackage main\n\ntempl nameList(items []Item) {\n  <ul>\n  for _, item := range items {\n    <li>{ item.Name }</li>\n  }\n  </ul>\n}\n\nOutput:\n<ul>\n  <li>A</li>\n  <li>B</li>\n  <li>C</li>\n</ul>\n```\n\nThis snippet shows you how to go `for` loop example, which is an important aspect of loops in go.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/loops", "title": "Loops in Go", "description": "This page covers the usage of loops in Go, specifically the standard `for` loop for iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:29", "type": "code_examples", "page_metadata": {"title": "For loops | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/loops/", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Use the standard Go for loop for iteration.", "docsearch:version": "current", "og:title": "For loops | templ docs", "description": "Use the standard Go for loop for iteration.", "ogTitle": "For loops | templ docs", "og:description": "Use the standard Go for loop for iteration.", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/loops/", "docusaurus_version": "current", "ogLocale": "en", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "3909c260-e739-46e1-a69b-6eb1c00eeee2", "sourceURL": "https://templ.guide/syntax-and-usage/loops", "url": "https://templ.guide/syntax-and-usage/loops/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Loops in Go in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the `for` loop for iterating over slices and arrays in Go.\n\nEnsure that the loop variable is properly scoped to avoid unintended behavior.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/loops", "title": "Loops in Go", "description": "This page covers the usage of loops in Go, specifically the standard `for` loop for iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:44:29", "type": "best_practices", "page_metadata": {"title": "For loops | templ docs", "ogUrl": "https://templ.guide/syntax-and-usage/loops/", "favicon": "https://templ.guide/img/favicon.ico", "docusaurus_locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "Use the standard Go for loop for iteration.", "docsearch:version": "current", "og:title": "For loops | templ docs", "description": "Use the standard Go for loop for iteration.", "ogTitle": "For loops | templ docs", "og:description": "Use the standard Go for loop for iteration.", "og:locale": "en", "viewport": "width=device-width, initial-scale=1.0", "twitter:card": "summary_large_image", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:url": "https://templ.guide/syntax-and-usage/loops/", "docusaurus_version": "current", "ogLocale": "en", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "language": "en", "ogImage": "https://templ.guide/img/social-card.jpg", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "3909c260-e739-46e1-a69b-6eb1c00eeee2", "sourceURL": "https://templ.guide/syntax-and-usage/loops", "url": "https://templ.guide/syntax-and-usage/loops/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Syntax and Usage of Raw Go is in templ?\n\nAssistant: Sure, I'd be happy to explain Syntax and Usage of Raw Go in templ.\n\n# Syntax and Usage of Raw Go\n\nThis page covers how to use Go code statements within templates, including variable declarations.Here's a quick rundown of what this is about:\n\n## Variable declarations\n\nScoped variables can be created using this syntax, to reduce the need for multiple function calls.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/raw-go", "title": "Syntax and Usage of Raw Go", "description": "This page covers how to use Go code statements within templates, including variable declarations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:42", "type": "overview", "page_metadata": {"ogDescription": "For some more advanced use cases it may be useful to write Go code statements in your template.", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "title": "Raw Go | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/raw-go/", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Raw Go | templ docs", "og:url": "https://templ.guide/syntax-and-usage/raw-go/", "language": "en", "description": "For some more advanced use cases it may be useful to write Go code statements in your template.", "ogTitle": "Raw Go | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "For some more advanced use cases it may be useful to write Go code statements in your template.", "scrapeId": "3841809a-2c2f-4dcd-8524-90f77ebbc3f7", "sourceURL": "https://templ.guide/syntax-and-usage/raw-go", "url": "https://templ.guide/syntax-and-usage/raw-go/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I variable declarations in templ?\n\nAssistant: To variable declarations in templ, here's what you do:\nScoped variables can be created using this syntax, to reduce the need for multiple function calls..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/raw-go", "title": "Syntax and Usage of Raw Go", "description": "This page covers how to use Go code statements within templates, including variable declarations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:42", "type": "section_detail", "page_metadata": {"ogDescription": "For some more advanced use cases it may be useful to write Go code statements in your template.", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "title": "Raw Go | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/raw-go/", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Raw Go | templ docs", "og:url": "https://templ.guide/syntax-and-usage/raw-go/", "language": "en", "description": "For some more advanced use cases it may be useful to write Go code statements in your template.", "ogTitle": "Raw Go | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "For some more advanced use cases it may be useful to write Go code statements in your template.", "scrapeId": "3841809a-2c2f-4dcd-8524-90f77ebbc3f7", "sourceURL": "https://templ.guide/syntax-and-usage/raw-go", "url": "https://templ.guide/syntax-and-usage/raw-go/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Syntax and Usage of Raw Go in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Variable Declaration Example**:\n\n```yaml\npackage main\n\ntempl nameList(items []Item) {\n    {{ first := items[0] }}\n    <p>\n        { first.Name }\n    </p>\n}\n```\n\nThis snippet shows you how to variable declaration example, which is an important aspect of syntax and usage of raw go.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/raw-go", "title": "Syntax and Usage of Raw Go", "description": "This page covers how to use Go code statements within templates, including variable declarations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:42", "type": "code_examples", "page_metadata": {"ogDescription": "For some more advanced use cases it may be useful to write Go code statements in your template.", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "title": "Raw Go | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/raw-go/", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Raw Go | templ docs", "og:url": "https://templ.guide/syntax-and-usage/raw-go/", "language": "en", "description": "For some more advanced use cases it may be useful to write Go code statements in your template.", "ogTitle": "Raw Go | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "For some more advanced use cases it may be useful to write Go code statements in your template.", "scrapeId": "3841809a-2c2f-4dcd-8524-90f77ebbc3f7", "sourceURL": "https://templ.guide/syntax-and-usage/raw-go", "url": "https://templ.guide/syntax-and-usage/raw-go/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Syntax and Usage of Raw Go in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse the {{ ... }} syntax for writing Go code statements in your template.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/raw-go", "title": "Syntax and Usage of Raw Go", "description": "This page covers how to use Go code statements within templates, including variable declarations.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-03-01 03:44:42", "type": "best_practices", "page_metadata": {"ogDescription": "For some more advanced use cases it may be useful to write Go code statements in your template.", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "title": "Raw Go | templ docs", "favicon": "https://templ.guide/img/favicon.ico", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/raw-go/", "ogLocale": "en", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "docsearch:language": "en", "docusaurus_version": "current", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Raw Go | templ docs", "og:url": "https://templ.guide/syntax-and-usage/raw-go/", "language": "en", "description": "For some more advanced use cases it may be useful to write Go code statements in your template.", "ogTitle": "Raw Go | templ docs", "generator": "Docusaurus v3.6.3", "twitter:image": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:description": "For some more advanced use cases it may be useful to write Go code statements in your template.", "scrapeId": "3841809a-2c2f-4dcd-8524-90f77ebbc3f7", "sourceURL": "https://templ.guide/syntax-and-usage/raw-go", "url": "https://templ.guide/syntax-and-usage/raw-go/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Render Once in Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Render Once in Templ in templ.\n\n# Render Once in Templ\n\nThis page explains how to render content once per page using the *OnceHandler in Templ.Here's a quick rundown of what this is about:\n\n## Overview\n\nIf you need to render something to the page once per page, you can create a `*OnceHandler` with `templ.NewOnceHandler()` and use its `Once()` method.\n\nThe `*OnceHandler.Once()` method ensures that the content is only rendered once per distinct context passed to the component's `Render` method, even if the component is rendered multiple times.\n\n## Example\n\nThe `hello` JavaScript function is only rendered once, even though the `hello` component is rendered twice.\n\n## Warning\n\nDont write `@templ.NewOnceHandle().Once()` - this creates a new `*OnceHandler` each time the `Once` method is called, and will result in the content being rendered multiple times.\n\n## Code Example\n\n```codeBlockLines_e6Vv\npackage once\n\nvar helloHandle = templ.NewOnceHandle()\n\ntempl hello(label, name string) {\n  @helloHandle.Once() {\n    <script>\n      function hello(name) {\n        alert('Hello, ' + name + '!');\n      }\n    </script>\n  }\n  <input type=\"button\" value={ label } data-name={ name } onclick=\"hello(this.getAttribute('data-name'))\"/>\n}\n\ntempl page() {\n  @hello(\"Hello User\", \"user\")\n  @hello(\"Hello World\", \"world\")\n}\n```\n\nOutput:\n\n```codeBlockLines_e6Vv\n<script>\n  function hello(name) {\n    alert('Hello, ' + name + '!');\n  }\n</script>\n<input type=\"button\" value=\"Hello User\" data-name=\"user\" onclick=\"hello(this.getAttribute('data-name'))\">\n<input type=\"button\" value=\"Hello World\" data-name=\"world\" onclick=\"hello(this.getAttribute('data-name'))\">\n```\n\n## Tip\n\nNote the use of the `data-name` attribute to pass the `name` value from server-side Go code to the client-side JavaScript code.\n\nThe value of `name` is collected by the `onclick` handler, and passed to the `hello` function.\n\nTo pass complex data structures, consider using a `data-` attribute to pass a JSON string using the `templ.JSONString` function, or use the `templ.JSONScript` function to create a templ component that creates a `<script>` element containing JSON data.\n\n## Common Use Cases\n\n- Rendering a `<style>` tag that contains CSS classes required by a component.\n- Rendering a `<script>` tag that contains JavaScript required by a component.\n- Rendering a `<link>` tag that contains a reference to a stylesheet.\n\n## Usage Across Packages\n\nExport a component that contains the `*OnceHandler` and the content to be rendered once.\n\nFor example, create a `deps` package that contains a `JQuery` component that renders a `<script>` tag that references the jQuery library.\n\ndeps/deps.templ\n\n```codeBlockLines_e6Vv\npackage deps\n\nvar jqueryHandle = templ.NewOnceHandle()\n\ntempl JQuery() {\n  @jqueryHandle.Once() {\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n  }\n}\n```\n\nYou can then use the `JQuery` component in other packages, and the jQuery library will only be included once in the rendered HTML.\n\nmain.templ\n\n```codeBlockLines_e6Vv\npackage main\n\nimport \"deps\"\n\ntempl page() {\n  <html>\n    <head>\n      @deps.JQuery()\n    </head>\n    <body>\n      <h1>Hello, World!</h1>\n      @button()\n    </body>\n  </html>\n}\n\ntempl button() {\n  @deps.JQuery()\n  <button>Click me</button>\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "overview", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I overview in templ?\n\nAssistant: To overview in templ, here's what you do:\nIf you need to render something to the page once per page, you can create a `*OnceHandler` with `templ.NewOnceHandler()` and use its `Once()` method.\n\nThe `*OnceHandler.Once()` method ensures that the content is only rendered once per distinct context passed to the component's `Render` method, even if the component is rendered multiple times..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I example in templ?\n\nAssistant: To example in templ, here's what you do:\nThe `hello` JavaScript function is only rendered once, even though the `hello` component is rendered twice..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I warning in templ?\n\nAssistant: To warning in templ, here's what you do:\nDont write `@templ.NewOnceHandle().Once()` - this creates a new `*OnceHandler` each time the `Once` method is called, and will result in the content being rendered multiple times..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I code example in templ?\n\nAssistant: To code example in templ, here's what you do:\n```codeBlockLines_e6Vv\npackage once\n\nvar helloHandle = templ.NewOnceHandle()\n\ntempl hello(label, name string) {\n  @helloHandle.Once() {\n    <script>\n      function hello(name) {\n        alert('Hello, ' + name + '!');\n      }\n    </script>\n  }\n  <input type=\"button\" value={ label } data-name={ name } onclick=\"hello(this.getAttribute('data-name'))\"/>\n}\n\ntempl page() {\n  @hello(\"Hello User\", \"user\")\n  @hello(\"Hello World\", \"world\")\n}\n```\n\nOutput:\n\n```codeBlockLines_e6Vv\n<script>\n  function hello(name) {\n    alert('Hello, ' + name + '!');\n  }\n</script>\n<input type=\"button\" value=\"Hello User\" data-name=\"user\" onclick=\"hello(this.getAttribute('data-name'))\">\n<input type=\"button\" value=\"Hello World\" data-name=\"world\" onclick=\"hello(this.getAttribute('data-name'))\">\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I tip in templ?\n\nAssistant: To tip in templ, here's what you do:\nNote the use of the `data-name` attribute to pass the `name` value from server-side Go code to the client-side JavaScript code.\n\nThe value of `name` is collected by the `onclick` handler, and passed to the `hello` function.\n\nTo pass complex data structures, consider using a `data-` attribute to pass a JSON string using the `templ.JSONString` function, or use the `templ.JSONScript` function to create a templ component that creates a `<script>` element containing JSON data..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I common use cases in templ?\n\nAssistant: To common use cases in templ, here's what you do:\n- Rendering a `<style>` tag that contains CSS classes required by a component.\n- Rendering a `<script>` tag that contains JavaScript required by a component.\n- Rendering a `<link>` tag that contains a reference to a stylesheet..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I usage across packages in templ?\n\nAssistant: To usage across packages in templ, here's what you do:\nExport a component that contains the `*OnceHandler` and the content to be rendered once.\n\nFor example, create a `deps` package that contains a `JQuery` component that renders a `<script>` tag that references the jQuery library.\n\ndeps/deps.templ\n\n```codeBlockLines_e6Vv\npackage deps\n\nvar jqueryHandle = templ.NewOnceHandle()\n\ntempl JQuery() {\n  @jqueryHandle.Once() {\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n  }\n}\n```\n\nYou can then use the `JQuery` component in other packages, and the jQuery library will only be included once in the rendered HTML.\n\nmain.templ\n\n```codeBlockLines_e6Vv\npackage main\n\nimport \"deps\"\n\ntempl page() {\n  <html>\n    <head>\n      @deps.JQuery()\n    </head>\n    <body>\n      <h1>Hello, World!</h1>\n      @button()\n    </body>\n  </html>\n}\n\ntempl button() {\n  @deps.JQuery()\n  <button>Click me</button>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "section_detail", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Render Once in Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Hello Function Example**:\n\n```yaml\n```codeBlockLines_e6Vv\npackage once\n\nvar helloHandle = templ.NewOnceHandle()\n\ntempl hello(label, name string) {\n  @helloHandle.Once() {\n    <script>\n      function hello(name) {\n        alert('Hello, ' + name + '!');\n      }\n    </script>\n  }\n  <input type=\"button\" value={ label } data-name={ name } onclick=\"hello(this.getAttribute('data-name'))\"/>\n}\n\ntempl page() {\n  @hello(\"Hello User\", \"user\")\n  @hello(\"Hello World\", \"world\")\n}\n```\n\nOutput:\n\n```codeBlockLines_e6Vv\n<script>\n  function hello(name) {\n    alert('Hello, ' + name + '!');\n  }\n</script>\n<input type=\"button\" value=\"Hello User\" data-name=\"user\" onclick=\"hello(this.getAttribute('data-name'))\">\n<input type=\"button\" value=\"Hello World\" data-name=\"world\" onclick=\"hello(this.getAttribute('data-name'))\">\n```\n```\n\nThis snippet shows you how to hello function example, which is an important aspect of render once in templ.\n\n**JQuery Component Example**:\n\n```yaml\n```codeBlockLines_e6Vv\npackage deps\n\nvar jqueryHandle = templ.NewOnceHandle()\n\ntempl JQuery() {\n  @jqueryHandle.Once() {\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n  }\n}\n```\n\nmain.templ\n\n```codeBlockLines_e6Vv\npackage main\n\nimport \"deps\"\n\ntempl page() {\n  <html>\n    <head>\n      @deps.JQuery()\n    </head>\n    <body>\n      <h1>Hello, World!</h1>\n      @button()\n    </body>\n  </html>\n}\n\ntempl button() {\n  @deps.JQuery()\n  <button>Click me</button>\n}\n```\n```\n\nThis snippet shows you how to jquery component example, which is an important aspect of render once in templ.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "code_examples", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Render Once in Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nNote the use of the `data-name` attribute to pass the `name` value from server-side Go code to the client-side JavaScript code.\n\nTo pass complex data structures, consider using a `data-` attribute to pass a JSON string using the `templ.JSONString` function, or use the `templ.JSONScript` function to create a templ component that creates a `<script>` element containing JSON data.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/render-once", "title": "Render Once in Templ", "description": "This page explains how to render content once per page using the *OnceHandler in Templ.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-03-01 03:45:07", "type": "best_practices", "page_metadata": {"docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "og:locale": "en", "docusaurus_tag": "docs-default-current", "ogDescription": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "language": "en", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "favicon": "https://templ.guide/img/favicon.ico", "ogLocale": "en", "docsearch:version": "current", "ogUrl": "https://templ.guide/syntax-and-usage/render-once/", "title": "Render once | templ docs", "ogTitle": "Render once | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Render once | templ docs", "description": "If you need to render something to the page once per page, you can create a *OnceHandler with templ.NewOnceHandler() and use its Once() method.", "og:url": "https://templ.guide/syntax-and-usage/render-once/", "scrapeId": "6cdaa467-4c24-4743-84a1-afae468f1c4b", "sourceURL": "https://templ.guide/syntax-and-usage/render-once", "url": "https://templ.guide/syntax-and-usage/render-once/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Rendering Raw HTML is in templ?\n\nAssistant: Sure, I'd be happy to explain Rendering Raw HTML in templ.\n\n# Rendering Raw HTML\n\nThis page explains how to render HTML from a trusted source using the templ.Raw function, bypassing HTML escaping and security mechanisms.Here's a quick rundown of what this is about:\n\n## Using templ.Raw\n\nTo render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the `templ.Raw` function.\n\n## Warnings\n\nOnly include HTML that comes from a trusted source. Use of this function may introduce security vulnerabilities to your program.\n\n## Code Example\n\nHere is an example of how to use the `templ.Raw` function in a templ component.\n\n## Output\n\nThe output of the above code will render the HTML directly.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/rendering-raw-html", "title": "Rendering Raw HTML", "description": "This page explains how to render HTML from a trusted source using the templ.Raw function, bypassing HTML escaping and security mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:45:26", "type": "overview", "page_metadata": {"ogUrl": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Rendering raw HTML | templ docs", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "og:description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "title": "Rendering raw HTML | templ docs", "docsearch:version": "current", "docusaurus_version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Rendering raw HTML | templ docs", "twitter:card": "summary_large_image", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogDescription": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "scrapeId": "44e2f079-3349-4c1f-8b3a-94e366c72ec6", "sourceURL": "https://templ.guide/syntax-and-usage/rendering-raw-html", "url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using templ.raw in templ?\n\nAssistant: To using templ.raw in templ, here's what you do:\nTo render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the `templ.Raw` function..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/rendering-raw-html", "title": "Rendering Raw HTML", "description": "This page explains how to render HTML from a trusted source using the templ.Raw function, bypassing HTML escaping and security mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:45:26", "type": "section_detail", "page_metadata": {"ogUrl": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Rendering raw HTML | templ docs", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "og:description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "title": "Rendering raw HTML | templ docs", "docsearch:version": "current", "docusaurus_version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Rendering raw HTML | templ docs", "twitter:card": "summary_large_image", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogDescription": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "scrapeId": "44e2f079-3349-4c1f-8b3a-94e366c72ec6", "sourceURL": "https://templ.guide/syntax-and-usage/rendering-raw-html", "url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I warnings in templ?\n\nAssistant: To warnings in templ, here's what you do:\nOnly include HTML that comes from a trusted source. Use of this function may introduce security vulnerabilities to your program..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/rendering-raw-html", "title": "Rendering Raw HTML", "description": "This page explains how to render HTML from a trusted source using the templ.Raw function, bypassing HTML escaping and security mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:45:26", "type": "section_detail", "page_metadata": {"ogUrl": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Rendering raw HTML | templ docs", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "og:description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "title": "Rendering raw HTML | templ docs", "docsearch:version": "current", "docusaurus_version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Rendering raw HTML | templ docs", "twitter:card": "summary_large_image", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogDescription": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "scrapeId": "44e2f079-3349-4c1f-8b3a-94e366c72ec6", "sourceURL": "https://templ.guide/syntax-and-usage/rendering-raw-html", "url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I code example in templ?\n\nAssistant: To code example in templ, here's what you do:\nHere is an example of how to use the `templ.Raw` function in a templ component..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/rendering-raw-html", "title": "Rendering Raw HTML", "description": "This page explains how to render HTML from a trusted source using the templ.Raw function, bypassing HTML escaping and security mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:45:26", "type": "section_detail", "page_metadata": {"ogUrl": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Rendering raw HTML | templ docs", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "og:description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "title": "Rendering raw HTML | templ docs", "docsearch:version": "current", "docusaurus_version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Rendering raw HTML | templ docs", "twitter:card": "summary_large_image", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogDescription": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "scrapeId": "44e2f079-3349-4c1f-8b3a-94e366c72ec6", "sourceURL": "https://templ.guide/syntax-and-usage/rendering-raw-html", "url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I output in templ?\n\nAssistant: To output in templ, here's what you do:\nThe output of the above code will render the HTML directly..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/rendering-raw-html", "title": "Rendering Raw HTML", "description": "This page explains how to render HTML from a trusted source using the templ.Raw function, bypassing HTML escaping and security mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:45:26", "type": "section_detail", "page_metadata": {"ogUrl": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Rendering raw HTML | templ docs", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "og:description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "title": "Rendering raw HTML | templ docs", "docsearch:version": "current", "docusaurus_version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Rendering raw HTML | templ docs", "twitter:card": "summary_large_image", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogDescription": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "scrapeId": "44e2f079-3349-4c1f-8b3a-94e366c72ec6", "sourceURL": "https://templ.guide/syntax-and-usage/rendering-raw-html", "url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Rendering Raw HTML in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Example of templ.Raw usage**:\n\n```yaml\ntempl Example() {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<body>\n\t\t\t@templ.Raw(\"<div>Hello, World!</div>\")\n\t\t</body>\n\t</html>\n}\n```\n\nThis snippet shows you how to example of templ.raw usage, which is an important aspect of rendering raw html.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/rendering-raw-html", "title": "Rendering Raw HTML", "description": "This page explains how to render HTML from a trusted source using the templ.Raw function, bypassing HTML escaping and security mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:45:26", "type": "code_examples", "page_metadata": {"ogUrl": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Rendering raw HTML | templ docs", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "og:description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "title": "Rendering raw HTML | templ docs", "docsearch:version": "current", "docusaurus_version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Rendering raw HTML | templ docs", "twitter:card": "summary_large_image", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogDescription": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "scrapeId": "44e2f079-3349-4c1f-8b3a-94e366c72ec6", "sourceURL": "https://templ.guide/syntax-and-usage/rendering-raw-html", "url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Rendering Raw HTML in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nOnly include HTML that comes from a trusted source.\n\nBe cautious when using templ.Raw to avoid introducing security vulnerabilities.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/rendering-raw-html", "title": "Rendering Raw HTML", "description": "This page explains how to render HTML from a trusted source using the templ.Raw function, bypassing HTML escaping and security mechanisms.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-03-01 03:45:26", "type": "best_practices", "page_metadata": {"ogUrl": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "ogImage": "https://templ.guide/img/social-card.jpg", "og:title": "Rendering raw HTML | templ docs", "docusaurus_locale": "en", "og:url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "generator": "Docusaurus v3.6.3", "docusaurus_tag": "docs-default-current", "docsearch:docusaurus_tag": "docs-default-current", "ogLocale": "en", "description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "og:description": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "title": "Rendering raw HTML | templ docs", "docsearch:version": "current", "docusaurus_version": "current", "og:image": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Rendering raw HTML | templ docs", "twitter:card": "summary_large_image", "og:locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docsearch:language": "en", "ogDescription": "To render HTML that has come from a trusted source, bypassing all HTML escaping and security mechanisms that templ includes, use the templ.Raw function.", "scrapeId": "44e2f079-3349-4c1f-8b3a-94e366c72ec6", "sourceURL": "https://templ.guide/syntax-and-usage/rendering-raw-html", "url": "https://templ.guide/syntax-and-usage/rendering-raw-html/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Using Switch Statements in Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Using Switch Statements in Templ in templ.\n\n# Using Switch Statements in Templ\n\nThis page covers how to use standard Go switch statements in templ for conditional rendering of components and elements.Here's a quick rundown of what this is about:\n\n## Introduction\n\ntempl uses standard Go `switch` statements which can be used to conditionally render components and elements.\n\n## Code Example\n\nThe following code demonstrates how to implement a switch statement in templ to display different user types.\n\n## Output\n\nThe output of the code when the user type is not recognized.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/switch", "title": "Using Switch Statements in Templ", "description": "This page covers how to use standard Go switch statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:07", "type": "overview", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/switch/", "title": "Switch | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Switch | templ docs", "docsearch:language": "en", "ogLocale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogUrl": "https://templ.guide/syntax-and-usage/switch/", "ogDescription": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Switch | templ docs", "docusaurus_locale": "en", "docsearch:version": "current", "description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "scrapeId": "49ee4c29-cd10-4cb5-a143-d54571ef3fe3", "sourceURL": "https://templ.guide/syntax-and-usage/switch", "url": "https://templ.guide/syntax-and-usage/switch/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I introduction in templ?\n\nAssistant: To introduction in templ, here's what you do:\ntempl uses standard Go `switch` statements which can be used to conditionally render components and elements..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/switch", "title": "Using Switch Statements in Templ", "description": "This page covers how to use standard Go switch statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:07", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/switch/", "title": "Switch | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Switch | templ docs", "docsearch:language": "en", "ogLocale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogUrl": "https://templ.guide/syntax-and-usage/switch/", "ogDescription": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Switch | templ docs", "docusaurus_locale": "en", "docsearch:version": "current", "description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "scrapeId": "49ee4c29-cd10-4cb5-a143-d54571ef3fe3", "sourceURL": "https://templ.guide/syntax-and-usage/switch", "url": "https://templ.guide/syntax-and-usage/switch/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I code example in templ?\n\nAssistant: To code example in templ, here's what you do:\nThe following code demonstrates how to implement a switch statement in templ to display different user types..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/switch", "title": "Using Switch Statements in Templ", "description": "This page covers how to use standard Go switch statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:07", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/switch/", "title": "Switch | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Switch | templ docs", "docsearch:language": "en", "ogLocale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogUrl": "https://templ.guide/syntax-and-usage/switch/", "ogDescription": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Switch | templ docs", "docusaurus_locale": "en", "docsearch:version": "current", "description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "scrapeId": "49ee4c29-cd10-4cb5-a143-d54571ef3fe3", "sourceURL": "https://templ.guide/syntax-and-usage/switch", "url": "https://templ.guide/syntax-and-usage/switch/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I output in templ?\n\nAssistant: To output in templ, here's what you do:\nThe output of the code when the user type is not recognized..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/switch", "title": "Using Switch Statements in Templ", "description": "This page covers how to use standard Go switch statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:07", "type": "section_detail", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/switch/", "title": "Switch | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Switch | templ docs", "docsearch:language": "en", "ogLocale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogUrl": "https://templ.guide/syntax-and-usage/switch/", "ogDescription": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Switch | templ docs", "docusaurus_locale": "en", "docsearch:version": "current", "description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "scrapeId": "49ee4c29-cd10-4cb5-a143-d54571ef3fe3", "sourceURL": "https://templ.guide/syntax-and-usage/switch", "url": "https://templ.guide/syntax-and-usage/switch/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Using Switch Statements in Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Component Example**:\n\n```yaml\npackage main\n\ntempl userTypeDisplay(userType string) {\n\tswitch userType {\n\t\tcase \"test\":\n\t\t\t<span>{ \"Test user\" }</span>\n\t\tcase \"admin\":\n\t\t\t<span>{ \"Admin user\" }</span>\n\t\tdefault:\n\t\t\t<span>{ \"Unknown user\" }</span>\n\t}\n}\n\n```\n\nThis snippet shows you how to component example, which is an important aspect of using switch statements in templ.\n\n**Main Function Example**:\n\n```yaml\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tuserTypeDisplay(\"Other\").Render(context.Background(), os.Stdout)\n}\n\n```\n\nThis snippet shows you how to main function example, which is an important aspect of using switch statements in templ.\n\n**Expected Output**:\n\n```yaml\n<span>\n Unknown user\n</span>\n\n```\n\nThis snippet shows you how to expected output, which is an important aspect of using switch statements in templ.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/switch", "title": "Using Switch Statements in Templ", "description": "This page covers how to use standard Go switch statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:07", "type": "code_examples", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/switch/", "title": "Switch | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Switch | templ docs", "docsearch:language": "en", "ogLocale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogUrl": "https://templ.guide/syntax-and-usage/switch/", "ogDescription": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Switch | templ docs", "docusaurus_locale": "en", "docsearch:version": "current", "description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "scrapeId": "49ee4c29-cd10-4cb5-a143-d54571ef3fe3", "sourceURL": "https://templ.guide/syntax-and-usage/switch", "url": "https://templ.guide/syntax-and-usage/switch/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Using Switch Statements in Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse switch statements for cleaner and more readable conditional rendering.\n\nEnsure all possible cases are handled to avoid unexpected outputs.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/switch", "title": "Using Switch Statements in Templ", "description": "This page covers how to use standard Go switch statements in templ for conditional rendering of components and elements.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:51:07", "type": "best_practices", "page_metadata": {"favicon": "https://templ.guide/img/favicon.ico", "generator": "Docusaurus v3.6.3", "og:locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "og:url": "https://templ.guide/syntax-and-usage/switch/", "title": "Switch | templ docs", "docsearch:docusaurus_tag": "docs-default-current", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Switch | templ docs", "docsearch:language": "en", "ogLocale": "en", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "og:description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogUrl": "https://templ.guide/syntax-and-usage/switch/", "ogDescription": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogTitle": "Switch | templ docs", "docusaurus_locale": "en", "docsearch:version": "current", "description": "templ uses standard Go switch statements which can be used to conditionally render components and elements.", "twitter:card": "summary_large_image", "scrapeId": "49ee4c29-cd10-4cb5-a143-d54571ef3fe3", "sourceURL": "https://templ.guide/syntax-and-usage/switch", "url": "https://templ.guide/syntax-and-usage/switch/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Template Composition is in templ?\n\nAssistant: Sure, I'd be happy to explain Template Composition in templ.\n\n# Template Composition\n\nThis page covers how to compose templates using the import expression in the templ framework.Here's a quick rundown of what this is about:\n\n## Templates can be composed using the import expression\n\n```codeBlockLines_e6Vv\ntempl showAll() {\n\t@left()\n\t@middle()\n\t@right()\n}\n\ntempl left() {\n\t<div>Left</div>\n}\n\ntempl middle() {\n\t<div>Middle</div>\n}\n\ntempl right() {\n\t<div>Right</div>\n}\n\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>\n Left\n</div>\n<div>\n Middle\n</div>\n<div>\n Right\n</div>\n\n```\n\n## Children\n\nChildren can be passed to a component for it to wrap.\n\n```codeBlockLines_e6Vv\ntempl showAll() {\n\t@wrapChildren() {\n\t\t<div>Inserted from the top</div>\n\t}\n}\n\ntempl wrapChildren() {\n\t<div id=\"wrapper\">\n\t\t{ children... }\n\t</div>\n}\n\n```\n\nnote\n\nThe use of the `{ children... }` expression in the child component.\n\noutput\n\n```codeBlockLines_e6Vv\n<div id=\"wrapper\">\n <div>\n  Inserted from the top\n </div>\n</div>\n\n```\n\n## Using children in code components\n\nChildren are passed to a component using the Go context. To pass children to a component using Go code, use the `templ.WithChildren` function.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n  \"context\"\n  \"os\"\n\n  \"github.com/a-h/templ\"\n)\n\ntempl wrapChildren() {\n\t<div id=\"wrapper\">\n\t\t{ children... }\n\t</div>\n}\n\nfunc main() {\n  contents := templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n    _, err := io.WriteString(w, \"<div>Inserted from Go code</div>\")\n    return err\n  })\n  ctx := templ.WithChildren(context.Background(), contents)\n  wrapChildren().Render(ctx, os.Stdout)\n}\n\n```\n\noutput\n\n```codeBlockLines_e6Vv\n<div id=\"wrapper\">\n <div>\n  Inserted from Go code\n </div>\n</div>\n\n```\n\n## To get children from the context\n\nuse the `templ.GetChildren` function.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n  \"context\"\n  \"os\"\n\n  \"github.com/a-h/templ\"\n)\n\nfunc main() {\n  contents := templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n    _, err := io.WriteString(w, \"<div>Inserted from Go code</div>\")\n    return err\n  })\n  wrapChildren := templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n    children := templ.GetChildren(ctx)\n    ctx = templ.ClearChildren(ctx)\n    _, err := io.WriteString(w, \"<div id=\\\"wrapper\\\">\")\n    if err != nil {\n      return err\n    }\n    err = children.Render(ctx, w)\n    if err != nil {\n      return err\n    }\n    _, err = io.WriteString(w, \"</div>\")\n    return err\n  })\n\n```\n\n## Components as parameters\n\nComponents can also be passed as parameters and rendered using the `@component` expression.\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl heading() {\n    <h1>Heading</h1>\n}\n\ntempl layout(contents templ.Component) {\n\t<div id=\"heading\">\n\t\t@heading()\n\t</div>\n\t<div id=\"contents\">\n\t\t@contents\n\t</div>\n}\n\ntempl paragraph(contents string) {\n\t<p>{ contents }</p>\n}\n\n```\n\n## main.go\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tc := paragraph(\"Dynamic contents\")\n\tlayout(c).Render(context.Background(), os.Stdout)\n}\n\n```\n\n## output\n\n```codeBlockLines_e6Vv\n<div id=\"heading\">\n\t<h1>Heading</h1>\n</div>\n<div id=\"contents\">\n\t<p>Dynamic contents</p>\n</div>\n\n```\n\n## You can pass templ components as parameters\n\nto other components within templates using standard Go function call syntax.\n\n```codeBlockLines_e6Vv\npackage main\n\n\ntempl heading() {\n    <h1>Heading</h1>\n}\n\ntempl layout(contents templ.Component) {\n\t<div id=\"heading\">\n\t\t@heading()\n\t</div>\n\t<div id=\"contents\">\n\t\t@contents\n\t</div>\n}\n\ntempl paragraph(contents string) {\n\t<p>{ contents }</p>\n}\n\ntempl root() {\n\t@layout(paragraph(\"Dynamic contents\"))\n}\n\n```\n\n## main.go\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\troot().Render(context.Background(), os.Stdout)\n}\n\n```\n\n## output\n\n```codeBlockLines_e6Vv\n<div id=\"heading\">\n\t<h1>Heading</h1>\n</div>\n<div id=\"contents\">\n\t<p>Dynamic contents</p>\n</div>\n\n```\n\n## Joining Components\n\nComponents can be aggregated into a single Component using `templ.Join`.\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl hello() {\n\t<span>hello</span>\n}\n\ntempl world() {\n\t<span>world</span>\n}\n\ntempl helloWorld() {\n\t@templ.Join(hello(), world())\n}\n\n```\n\n## main.go\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\thelloWorld().Render(context.Background(), os.Stdout)\n}\n\n```\n\n## output\n\n```codeBlockLines_e6Vv\n<span>hello</span><span>world</span>\n\n```\n\n## Sharing and re-using components\n\nSince templ components are compiled into Go functions by the `go generate` command, templ components follow the rules of Go, and are shared in exactly the same way as Go code.\n\ntempl files in the same directory can access each other's components. Components in different directories can be accessed by importing the package that contains the component, so long as the component is exported by capitalizing its name.\n\ntip\n\nIn Go, a _package_ is a collection of Go source files in the same directory that are compiled together. All of the functions, types, variables, and constants defined in one source file in a package are available to all other source files in the same package.\n\nPackages exist within a Go _module_, defined by the `go.mod` file.\n\nnote\n\nGo is structured differently to JavaScript, but uses similar terminology. A single `.js` or `.ts` _file_ is like a Go package, and an NPM package is like a Go module.\n\n## Exporting components\n\nTo make a templ component available to other packages, export it by capitalizing its name.\n\n```codeBlockLines_e6Vv\npackage components\n\ntempl Hello() {\n\t<div>Hello</div>\n}\n\n```\n\n## Importing components\n\nTo use a component in another package, import the package and use the component as you would any other Go function or type.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport \"github.com/a-h/templ/examples/counter/components\"\n\ntempl Home() {\n\t@components.Hello()\n}\n\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "overview", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I templates can be composed using the import expression in templ?\n\nAssistant: To templates can be composed using the import expression in templ, here's what you do:\n```codeBlockLines_e6Vv\ntempl showAll() {\n\t@left()\n\t@middle()\n\t@right()\n}\n\ntempl left() {\n\t<div>Left</div>\n}\n\ntempl middle() {\n\t<div>Middle</div>\n}\n\ntempl right() {\n\t<div>Right</div>\n}\n\n```\n\nOutput\n\n```codeBlockLines_e6Vv\n<div>\n Left\n</div>\n<div>\n Middle\n</div>\n<div>\n Right\n</div>\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I children in templ?\n\nAssistant: To children in templ, here's what you do:\nChildren can be passed to a component for it to wrap.\n\n```codeBlockLines_e6Vv\ntempl showAll() {\n\t@wrapChildren() {\n\t\t<div>Inserted from the top</div>\n\t}\n}\n\ntempl wrapChildren() {\n\t<div id=\"wrapper\">\n\t\t{ children... }\n\t</div>\n}\n\n```\n\nnote\n\nThe use of the `{ children... }` expression in the child component.\n\noutput\n\n```codeBlockLines_e6Vv\n<div id=\"wrapper\">\n <div>\n  Inserted from the top\n </div>\n</div>\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using children in code components in templ?\n\nAssistant: To using children in code components in templ, here's what you do:\nChildren are passed to a component using the Go context. To pass children to a component using Go code, use the `templ.WithChildren` function.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n  \"context\"\n  \"os\"\n\n  \"github.com/a-h/templ\"\n)\n\ntempl wrapChildren() {\n\t<div id=\"wrapper\">\n\t\t{ children... }\n\t</div>\n}\n\nfunc main() {\n  contents := templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n    _, err := io.WriteString(w, \"<div>Inserted from Go code</div>\")\n    return err\n  })\n  ctx := templ.WithChildren(context.Background(), contents)\n  wrapChildren().Render(ctx, os.Stdout)\n}\n\n```\n\noutput\n\n```codeBlockLines_e6Vv\n<div id=\"wrapper\">\n <div>\n  Inserted from Go code\n </div>\n</div>\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I to get children from the context in templ?\n\nAssistant: To to get children from the context in templ, here's what you do:\nuse the `templ.GetChildren` function.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n  \"context\"\n  \"os\"\n\n  \"github.com/a-h/templ\"\n)\n\nfunc main() {\n  contents := templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n    _, err := io.WriteString(w, \"<div>Inserted from Go code</div>\")\n    return err\n  })\n  wrapChildren := templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n    children := templ.GetChildren(ctx)\n    ctx = templ.ClearChildren(ctx)\n    _, err := io.WriteString(w, \"<div id=\\\"wrapper\\\">\")\n    if err != nil {\n      return err\n    }\n    err = children.Render(ctx, w)\n    if err != nil {\n      return err\n    }\n    _, err = io.WriteString(w, \"</div>\")\n    return err\n  })\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I components as parameters in templ?\n\nAssistant: To components as parameters in templ, here's what you do:\nComponents can also be passed as parameters and rendered using the `@component` expression.\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl heading() {\n    <h1>Heading</h1>\n}\n\ntempl layout(contents templ.Component) {\n\t<div id=\"heading\">\n\t\t@heading()\n\t</div>\n\t<div id=\"contents\">\n\t\t@contents\n\t</div>\n}\n\ntempl paragraph(contents string) {\n\t<p>{ contents }</p>\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I main.go in templ?\n\nAssistant: To main.go in templ, here's what you do:\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tc := paragraph(\"Dynamic contents\")\n\tlayout(c).Render(context.Background(), os.Stdout)\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I output in templ?\n\nAssistant: To output in templ, here's what you do:\n```codeBlockLines_e6Vv\n<div id=\"heading\">\n\t<h1>Heading</h1>\n</div>\n<div id=\"contents\">\n\t<p>Dynamic contents</p>\n</div>\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I you can pass templ components as parameters in templ?\n\nAssistant: To you can pass templ components as parameters in templ, here's what you do:\nto other components within templates using standard Go function call syntax.\n\n```codeBlockLines_e6Vv\npackage main\n\n\ntempl heading() {\n    <h1>Heading</h1>\n}\n\ntempl layout(contents templ.Component) {\n\t<div id=\"heading\">\n\t\t@heading()\n\t</div>\n\t<div id=\"contents\">\n\t\t@contents\n\t</div>\n}\n\ntempl paragraph(contents string) {\n\t<p>{ contents }</p>\n}\n\ntempl root() {\n\t@layout(paragraph(\"Dynamic contents\"))\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I main.go in templ?\n\nAssistant: To main.go in templ, here's what you do:\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\troot().Render(context.Background(), os.Stdout)\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I output in templ?\n\nAssistant: To output in templ, here's what you do:\n```codeBlockLines_e6Vv\n<div id=\"heading\">\n\t<h1>Heading</h1>\n</div>\n<div id=\"contents\">\n\t<p>Dynamic contents</p>\n</div>\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I joining components in templ?\n\nAssistant: To joining components in templ, here's what you do:\nComponents can be aggregated into a single Component using `templ.Join`.\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl hello() {\n\t<span>hello</span>\n}\n\ntempl world() {\n\t<span>world</span>\n}\n\ntempl helloWorld() {\n\t@templ.Join(hello(), world())\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I main.go in templ?\n\nAssistant: To main.go in templ, here's what you do:\n```codeBlockLines_e6Vv\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\thelloWorld().Render(context.Background(), os.Stdout)\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I output in templ?\n\nAssistant: To output in templ, here's what you do:\n```codeBlockLines_e6Vv\n<span>hello</span><span>world</span>\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I sharing and re-using components in templ?\n\nAssistant: To sharing and re-using components in templ, here's what you do:\nSince templ components are compiled into Go functions by the `go generate` command, templ components follow the rules of Go, and are shared in exactly the same way as Go code.\n\ntempl files in the same directory can access each other's components. Components in different directories can be accessed by importing the package that contains the component, so long as the component is exported by capitalizing its name.\n\ntip\n\nIn Go, a _package_ is a collection of Go source files in the same directory that are compiled together. All of the functions, types, variables, and constants defined in one source file in a package are available to all other source files in the same package.\n\nPackages exist within a Go _module_, defined by the `go.mod` file.\n\nnote\n\nGo is structured differently to JavaScript, but uses similar terminology. A single `.js` or `.ts` _file_ is like a Go package, and an NPM package is like a Go module..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I exporting components in templ?\n\nAssistant: To exporting components in templ, here's what you do:\nTo make a templ component available to other packages, export it by capitalizing its name.\n\n```codeBlockLines_e6Vv\npackage components\n\ntempl Hello() {\n\t<div>Hello</div>\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I importing components in templ?\n\nAssistant: To importing components in templ, here's what you do:\nTo use a component in another package, import the package and use the component as you would any other Go function or type.\n\n```codeBlockLines_e6Vv\npackage main\n\nimport \"github.com/a-h/templ/examples/counter/components\"\n\ntempl Home() {\n\t@components.Hello()\n}\n\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "section_detail", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Template Composition in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Template Composition Example**:\n\n```yaml\ntempl showAll() {\n\t@left()\n\t@middle()\n\t@right()\n}\n\ntempl left() {\n\t<div>Left</div>\n}\n\ntempl middle() {\n\t<div>Middle</div>\n}\n\ntempl right() {\n\t<div>Right</div>\n}\n```\n\nThis snippet shows you how to template composition example, which is an important aspect of template composition.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "code_examples", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Template Composition in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nIn Go, a _package_ is a collection of Go source files in the same directory that are compiled together. All of the functions, types, variables, and constants defined in one source file in a package are available to all other source files in the same package.\n\nTo import a component from another Go module, you must first import the module by using the `go get <module>` command. Then, you can import the component as you would any other Go package.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/template-composition", "title": "Template Composition", "description": "This page covers how to compose templates using the import expression in the templ framework.", "has_code_examples": true, "has_best_practices": true, "section_count": 16, "timestamp": "2025-03-01 03:52:46", "type": "best_practices", "page_metadata": {"ogDescription": "Templates can be composed using the import expression.", "docsearch:version": "current", "generator": "Docusaurus v3.6.3", "og:image": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/template-composition/", "og:url": "https://templ.guide/syntax-and-usage/template-composition/", "title": "Template composition | templ docs", "twitter:card": "summary_large_image", "docusaurus_version": "current", "docusaurus_tag": "docs-default-current", "language": "en", "ogTitle": "Template composition | templ docs", "ogLocale": "en", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Template composition | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "viewport": "width=device-width, initial-scale=1.0", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:locale": "en", "description": "Templates can be composed using the import expression.", "og:description": "Templates can be composed using the import expression.", "scrapeId": "eac9af10-86be-45dd-b774-76d1e90b9343", "sourceURL": "https://templ.guide/syntax-and-usage/template-composition", "url": "https://templ.guide/syntax-and-usage/template-composition/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Using React with Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Using React with Templ in templ.\n\n# Using React with Templ\n\nThis page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.Here's a quick rundown of what this is about:\n\n## Using React components\n\nFirst, lets start by rendering simple React components.\n\n## Create React components\n\nTo use React components in your templ app, create your React components using TSX (TypeScript) or JSX as usual.\n\n## Create a templ page\n\nNext, use templ to create a page containing HTML elements with specific IDs.\n\nThis page defines elements with ids of `react-header` and `react-content`.\n\nA `<script>` element loads in a JavaScript bundle that we haven't created yet.\n\n## Render React components into the IDs\n\nWrite TypeScript or JavaScript to render the React components into the HTML elements that are rendered by templ.\n\n## Create a client-side bundle\n\nTo turn the JSX, TSX, TypeScript and JavaScript code into a bundle that can run in the browser, use a bundling tool.\n\n## Serve the templ component and client side bundle\n\nTo serve the server-side rendered templ template, and the client-side JavaScript bundle created in the previous step, setup a Go web server.\n\n## Results\n\nPutting this together results in a web page that renders server-side HTML using templ. The server-side HTML includes a link to the static React bundle.\n\n## Passing server-side data to React components\n\nMoving on from the previous example, it's possible to pass data to client-side React components.\n\n## Add a React component that accepts data arguments\n\nFirst, add a new component.\n\n## Export a JavaScript function that renders the React component to a HTML element\n\nUpdate the import to add the new Hello React component.\n\n## Update the templ component to use the new function\n\nNow that we have a `renderHello` function that will render the React component to the given element, we can update the templ components to use it.\n\n## Update the `esbuild` command\n\nThe `bundle` namespace in JavaScript is created by adding a `--global-name` argument to `esbuild`. The argument causes any exported functions in `index.ts` to be added to that namespace.\n\n## Results\n\nThe HTML that's rendered is:\n\n## Example code\n\nSee https://github.com/a-h/templ/tree/main/examples/integration-react for a complete example.\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "overview", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using react components in templ?\n\nAssistant: To using react components in templ, here's what you do:\nFirst, lets start by rendering simple React components..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I create react components in templ?\n\nAssistant: To create react components in templ, here's what you do:\nTo use React components in your templ app, create your React components using TSX (TypeScript) or JSX as usual..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I create a templ page in templ?\n\nAssistant: To create a templ page in templ, here's what you do:\nNext, use templ to create a page containing HTML elements with specific IDs.\n\nThis page defines elements with ids of `react-header` and `react-content`.\n\nA `<script>` element loads in a JavaScript bundle that we haven't created yet..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I render react components into the ids in templ?\n\nAssistant: To render react components into the ids in templ, here's what you do:\nWrite TypeScript or JavaScript to render the React components into the HTML elements that are rendered by templ..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I create a client-side bundle in templ?\n\nAssistant: To create a client-side bundle in templ, here's what you do:\nTo turn the JSX, TSX, TypeScript and JavaScript code into a bundle that can run in the browser, use a bundling tool..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I serve the templ component and client side bundle in templ?\n\nAssistant: To serve the templ component and client side bundle in templ, here's what you do:\nTo serve the server-side rendered templ template, and the client-side JavaScript bundle created in the previous step, setup a Go web server..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I results in templ?\n\nAssistant: To results in templ, here's what you do:\nPutting this together results in a web page that renders server-side HTML using templ. The server-side HTML includes a link to the static React bundle..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I passing server-side data to react components in templ?\n\nAssistant: To passing server-side data to react components in templ, here's what you do:\nMoving on from the previous example, it's possible to pass data to client-side React components..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I add a react component that accepts data arguments in templ?\n\nAssistant: To add a react component that accepts data arguments in templ, here's what you do:\nFirst, add a new component..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I export a javascript function that renders the react component to a html element in templ?\n\nAssistant: To export a javascript function that renders the react component to a html element in templ, here's what you do:\nUpdate the import to add the new Hello React component..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I update the templ component to use the new function in templ?\n\nAssistant: To update the templ component to use the new function in templ, here's what you do:\nNow that we have a `renderHello` function that will render the React component to the given element, we can update the templ components to use it..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I update the `esbuild` command in templ?\n\nAssistant: To update the `esbuild` command in templ, here's what you do:\nThe `bundle` namespace in JavaScript is created by adding a `--global-name` argument to `esbuild`. The argument causes any exported functions in `index.ts` to be added to that namespace..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I results in templ?\n\nAssistant: To results in templ, here's what you do:\nThe HTML that's rendered is:.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I example code in templ?\n\nAssistant: To example code in templ, here's what you do:\nSee https://github.com/a-h/templ/tree/main/examples/integration-react for a complete example..\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "section_detail", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Using React with Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Create React components**:\n\n```yaml\nexport const Header = () => (<h1>React component Header</h1>);\n\nexport const Body = () => (<div>This is client-side content from React</div>);\n```\n\nThis snippet shows you how to create react components, which is an important aspect of using react with templ.\n\n**Create a templ page**:\n\n```yaml\npackage main\n\ntempl page() {\n\t<html>\n\t\t<body>\n\t\t\t<div id=\"react-header\"></div>\n\t\t\t<div id=\"react-content\"></div>\n\t\t\t<div>This is server-side content from templ.</div>\n\t\t\t<!-- Load the React bundle created using esbuild -->\n\t\t\t<script src=\"static/index.js\"></script>\n\t\t</body>\n\t</html>\n}\n```\n\nThis snippet shows you how to create a templ page, which is an important aspect of using react with templ.\n\n**Render React components into the IDs**:\n\n```yaml\nimport { createRoot } from 'react-dom/client';\nimport { Header, Body } from './components';\n\n// Render the React component into the templ page at the react-header.\nconst headerRoot = document.getElementById('react-header');\nif (!headerRoot) {\n\tthrow new Error('Could not find element with id react-header');\n}\nconst headerReactRoot = createRoot(headerRoot);\nheaderReactRoot.render(Header());\n\n// Add the body React component.\nconst contentRoot = document.getElementById('react-content');\nif (!contentRoot) {\n\tthrow new Error('Could not find element with id react-content');\n}\nconst contentReactRoot = createRoot(contentRoot);\ncontentReactRoot.render(Body());\n```\n\nThis snippet shows you how to render react components into the ids, which is an important aspect of using react with templ.\n\n**Create a client-side bundle**:\n\n```yaml\nesbuild --bundle index.ts --outdir=../static --minify\n```\n\nThis snippet shows you how to create a client-side bundle, which is an important aspect of using react with templ.\n\n**Serve the templ component and client side bundle**:\n\n```yaml\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\tmux := http.NewServeMux()\n\n\t// Serve the templ page.\n\tmux.Handle(\"/\", templ.Handler(page()))\n\n\t// Serve static content.\n\tmux.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"static\"))))\n\n\t// Start the server.\n\tfmt.Println(\"listening on localhost:8080\")\n\tif err := http.ListenAndServe(\"localhost:8080\", mux); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\nThis snippet shows you how to serve the templ component and client side bundle, which is an important aspect of using react with templ.\n\n**Add a React component that accepts data arguments**:\n\n```yaml\nexport const Hello = (name: string) => (\n  <div>Hello {name} (Client-side React, rendering server-side data)</div>\n);\n```\n\nThis snippet shows you how to add a react component that accepts data arguments, which is an important aspect of using react with templ.\n\n**Export a JavaScript function that renders the React component to a HTML element**:\n\n```yaml\n// Update the import to add the new Hello React component.\nimport { Header, Body, Hello } from './components';\n\n// Previous script contents...\n\nexport function renderHello(e: HTMLElement) {\n  const name = e.getAttribute('data-name') ?? \"\";\n  createRoot(e).render(Hello(name));\n}\n```\n\nThis snippet shows you how to export a javascript function that renders the react component to a html element, which is an important aspect of using react with templ.\n\n**Update the templ component to use the new function**:\n\n```yaml\npackage main\n\nimport \"fmt\"\n\ntempl Hello(name string) {\n\t<div data-name={ name }>\n\t\t<script>\n\t\t\tbundle.renderHello(document.currentScript.closest('div'));\n\t\t</script>\n\t</div>\n}\n\ntempl page() {\n\t<html>\n\t\t<head>\n\t\t\t<title>React integration</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<div id=\"react-header\"></div>\n\t\t\t<div id=\"react-content\"></div>\n\t\t\t<div>\n\t\t\t\tThis is server-side content from templ.\n\t\t\t</div>\n\t\t\t<!-- Load the React bundle that was created using esbuild -->\n\t\t\t<script src=\"static/index.js\"></script>\n\t\t\tfor _, name := range []string{\"Alice\", \"Bob\", \"Charlie\"} {\n\t\t\t\t@Hello(name)\n\t\t\t}\n\t\t</body>\n\t\t</html>\n}\n```\n\nThis snippet shows you how to update the templ component to use the new function, which is an important aspect of using react with templ.\n\n**Update the `esbuild` command**:\n\n```yaml\nesbuild --bundle index.ts --outdir=../static --minify --global-name=bundle\n```\n\nThis snippet shows you how to update the `esbuild` command, which is an important aspect of using react with templ.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "code_examples", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Using React with Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nRemember to run `templ generate` when you've finished writing your templ file.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-react-with-templ", "title": "Using React with Templ", "description": "This page covers how to integrate React components with Templ for server-side rendering and client-side interactivity.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-03-01 03:53:19", "type": "best_practices", "page_metadata": {"ogTitle": "Using React with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docusaurus_locale": "en", "twitter:image": "https://templ.guide/img/social-card.jpg", "og:title": "Using React with templ | templ docs", "og:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "docsearch:docusaurus_tag": "docs-default-current", "description": "templ is great for server-side rendering. Combined with HTMX, it's even more powerful, since HTMX can be used to replace elements within the page with updated HTML fetched from the server, providing many of the benefits of React with reduced overall complexity. See /server-side-rendering/htmx for an example.", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "title": "Using React with templ | templ docs", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "docsearch:language": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "og:url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1.0", "og:locale": "en", "language": "en", "docusaurus_version": "current", "favicon": "https://templ.guide/img/favicon.ico", "scrapeId": "1972ca33-4e74-4b9f-99ab-51089832fb50", "sourceURL": "https://templ.guide/syntax-and-usage/using-react-with-templ", "url": "https://templ.guide/syntax-and-usage/using-react-with-templ/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Using Templ with Go Templates is in templ?\n\nAssistant: Sure, I'd be happy to explain Using Templ with Go Templates in templ.\n\n# Using Templ with Go Templates\n\nThis page covers how to use Templ components with the Go standard library html/template package.Here's a quick rundown of what this is about:\n\n## Using `html/template` in a templ component\n\nTo use an existing `html/template` in a templ component, use the `templ.FromGoHTML` function.\n\ncomponent.templ\n\n```go\npackage testgotemplates\n\nimport \"html/template\"\n\nvar goTemplate = template.Must(template.New(\"example\").Parse(\"<div>{{ . }}</div>\"))\n\ntempl Example() {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<body>\n\t\t\t@templ.FromGoHTML(goTemplate, \"Hello, World!\")\n\t\t</body>\n\t</html>\n}\n```\n\nmain.go\n\n```go\nfunc main() {\n\tExample.Render(context.Background(), os.Stdout)\n}\n```\n\nOutput\n\n```html\n<!DOCTYPE html>\n<html>\n\t<body>\n\t\t<div>Hello, World!</div>\n\t</body>\n</html>\n```\n\n## Using a templ component with `html/template`\n\nTo use a templ component within a `html/template`, use the `templ.ToGoHTML` function to render the component into a `template.HTML` value.\n\ncomponent.html\n\n```go\npackage testgotemplates\n\nimport \"html/template\"\n\nvar example = template.Must(template.New(\"example\").Parse(`<!DOCTYPE html>\n<html>\n\t<body>\n\t\t{{ . }}\n\t</body>\n</html>\n`))\n\ntempl greeting() {\n\t<div>Hello, World!</div>\n}\n```\n\nmain.go\n\n```go\nfunc main() {\n\t// Create the templ component.\n\ttemplComponent := greeting()\n\n\t// Render the templ component to a `template.HTML` value.\n\thtml, err := templ.ToGoHTML(context.Background(), templComponent)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to convert to html: %v\", err)\n\t}\n\n\t// Use the `template.HTML` value within the text/html template.\n\terr = example.Execute(os.Stdout, html)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to execute template: %v\", err)\n\t}\n}\n```\n\nOutput\n\n```html\n<!DOCTYPE html>\n<html>\n\t<body>\n\t\t<div>Hello, World!</div>\n\t</body>\n</html>\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-with-go-templates", "title": "Using Templ with Go Templates", "description": "This page covers how to use Templ components with the Go standard library html/template package.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:52", "type": "overview", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:description": "Templ components can be used with the Go standard library html/template package.", "favicon": "https://templ.guide/img/favicon.ico", "title": "Using with html/template | templ docs", "og:locale": "en", "language": "en", "description": "Templ components can be used with the Go standard library html/template package.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Using with html/template | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Using with html/template | templ docs", "twitter:card": "summary_large_image", "og:url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "ogDescription": "Templ components can be used with the Go standard library html/template package.", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "cd753079-bc58-4df6-ac50-3150efdff734", "sourceURL": "https://templ.guide/syntax-and-usage/using-with-go-templates", "url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using `html/template` in a templ component in templ?\n\nAssistant: To using `html/template` in a templ component in templ, here's what you do:\nTo use an existing `html/template` in a templ component, use the `templ.FromGoHTML` function.\n\ncomponent.templ\n\n```go\npackage testgotemplates\n\nimport \"html/template\"\n\nvar goTemplate = template.Must(template.New(\"example\").Parse(\"<div>{{ . }}</div>\"))\n\ntempl Example() {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<body>\n\t\t\t@templ.FromGoHTML(goTemplate, \"Hello, World!\")\n\t\t</body>\n\t</html>\n}\n```\n\nmain.go\n\n```go\nfunc main() {\n\tExample.Render(context.Background(), os.Stdout)\n}\n```\n\nOutput\n\n```html\n<!DOCTYPE html>\n<html>\n\t<body>\n\t\t<div>Hello, World!</div>\n\t</body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-with-go-templates", "title": "Using Templ with Go Templates", "description": "This page covers how to use Templ components with the Go standard library html/template package.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:52", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:description": "Templ components can be used with the Go standard library html/template package.", "favicon": "https://templ.guide/img/favicon.ico", "title": "Using with html/template | templ docs", "og:locale": "en", "language": "en", "description": "Templ components can be used with the Go standard library html/template package.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Using with html/template | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Using with html/template | templ docs", "twitter:card": "summary_large_image", "og:url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "ogDescription": "Templ components can be used with the Go standard library html/template package.", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "cd753079-bc58-4df6-ac50-3150efdff734", "sourceURL": "https://templ.guide/syntax-and-usage/using-with-go-templates", "url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I using a templ component with `html/template` in templ?\n\nAssistant: To using a templ component with `html/template` in templ, here's what you do:\nTo use a templ component within a `html/template`, use the `templ.ToGoHTML` function to render the component into a `template.HTML` value.\n\ncomponent.html\n\n```go\npackage testgotemplates\n\nimport \"html/template\"\n\nvar example = template.Must(template.New(\"example\").Parse(`<!DOCTYPE html>\n<html>\n\t<body>\n\t\t{{ . }}\n\t</body>\n</html>\n`))\n\ntempl greeting() {\n\t<div>Hello, World!</div>\n}\n```\n\nmain.go\n\n```go\nfunc main() {\n\t// Create the templ component.\n\ttemplComponent := greeting()\n\n\t// Render the templ component to a `template.HTML` value.\n\thtml, err := templ.ToGoHTML(context.Background(), templComponent)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to convert to html: %v\", err)\n\t}\n\n\t// Use the `template.HTML` value within the text/html template.\n\terr = example.Execute(os.Stdout, html)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to execute template: %v\", err)\n\t}\n}\n```\n\nOutput\n\n```html\n<!DOCTYPE html>\n<html>\n\t<body>\n\t\t<div>Hello, World!</div>\n\t</body>\n</html>\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-with-go-templates", "title": "Using Templ with Go Templates", "description": "This page covers how to use Templ components with the Go standard library html/template package.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:52", "type": "section_detail", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:description": "Templ components can be used with the Go standard library html/template package.", "favicon": "https://templ.guide/img/favicon.ico", "title": "Using with html/template | templ docs", "og:locale": "en", "language": "en", "description": "Templ components can be used with the Go standard library html/template package.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Using with html/template | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Using with html/template | templ docs", "twitter:card": "summary_large_image", "og:url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "ogDescription": "Templ components can be used with the Go standard library html/template package.", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "cd753079-bc58-4df6-ac50-3150efdff734", "sourceURL": "https://templ.guide/syntax-and-usage/using-with-go-templates", "url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Using Templ with Go Templates in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Using `html/template` in a templ component**:\n\n```yaml\npackage testgotemplates\n\nimport \"html/template\"\n\nvar goTemplate = template.Must(template.New(\"example\").Parse(\"<div>{{ . }}</div>\"))\n\ntempl Example() {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<body>\n\t\t\t@templ.FromGoHTML(goTemplate, \"Hello, World!\")\n\t\t</body>\n\t</html>\n}\n```\n\nThis snippet shows you how to using `html/template` in a templ component, which is an important aspect of using templ with go templates.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-with-go-templates", "title": "Using Templ with Go Templates", "description": "This page covers how to use Templ components with the Go standard library html/template package.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:52", "type": "code_examples", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:description": "Templ components can be used with the Go standard library html/template package.", "favicon": "https://templ.guide/img/favicon.ico", "title": "Using with html/template | templ docs", "og:locale": "en", "language": "en", "description": "Templ components can be used with the Go standard library html/template package.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Using with html/template | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Using with html/template | templ docs", "twitter:card": "summary_large_image", "og:url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "ogDescription": "Templ components can be used with the Go standard library html/template package.", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "cd753079-bc58-4df6-ac50-3150efdff734", "sourceURL": "https://templ.guide/syntax-and-usage/using-with-go-templates", "url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Using Templ with Go Templates in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse `templ.FromGoHTML` to integrate existing `html/template` templates into Templ components.\n\nUse `templ.ToGoHTML` to render Templ components into `html/template` templates.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/using-with-go-templates", "title": "Using Templ with Go Templates", "description": "This page covers how to use Templ components with the Go standard library html/template package.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:53:52", "type": "best_practices", "page_metadata": {"docusaurus_tag": "docs-default-current", "og:description": "Templ components can be used with the Go standard library html/template package.", "favicon": "https://templ.guide/img/favicon.ico", "title": "Using with html/template | templ docs", "og:locale": "en", "language": "en", "description": "Templ components can be used with the Go standard library html/template package.", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:title": "Using with html/template | templ docs", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogTitle": "Using with html/template | templ docs", "twitter:card": "summary_large_image", "og:url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "ogDescription": "Templ components can be used with the Go standard library html/template package.", "viewport": "width=device-width, initial-scale=1.0", "ogLocale": "en", "ogUrl": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "generator": "Docusaurus v3.6.3", "docsearch:version": "current", "docusaurus_version": "current", "docusaurus_locale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "scrapeId": "cd753079-bc58-4df6-ac50-3150efdff734", "sourceURL": "https://templ.guide/syntax-and-usage/using-with-go-templates", "url": "https://templ.guide/syntax-and-usage/using-with-go-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what IDE Support for Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain IDE Support for Templ in templ.\n\n# IDE Support for Templ\n\nThis page provides guidance on setting up IDE support for Templ across various editors including Visual Studio Code, Neovim, Vim, Helix, and Emacs.Here's a quick rundown of what this is about:\n\n## Visual Studio Code\n\nThere's a VS Code extension, just make sure you've already installed templ and that it's on your path.\n\n- [https://marketplace.visualstudio.com/items?itemName=a-h.templ](https://marketplace.visualstudio.com/items?itemName=a-h.templ)\n- [https://github.com/a-h/templ-vscode](https://github.com/a-h/templ-vscode)\n\nVSCodium users can find the extension on the Open VSX Registry at [https://open-vsx.org/extension/a-h/templ](https://open-vsx.org/extension/a-h/templ) \n\n### Format on Save \nInclude the following into your settings.json to activate formatting `.templ` files on save with the templ plugin:\n\n```json\n{\n    \"editor.formatOnSave\": true,\n    \"[templ]\": {\n        \"editor.defaultFormatter\": \"a-h.templ\"\n    }\n}\n```\n\n### Tailwind CSS Intellisense \nInclude the following to the settings.json in order to enable autocompletion for Tailwind CSS in `.templ` files:\n\n```json\n{\n  \"tailwindCSS.includeLanguages\": {\n    \"templ\": \"html\"\n  }\n}\n```\n\nnote\nTailwind language servers require a tailwind.config.js file to be present in the root of your project. You can create a new config file with `npx tailwindcss init`, or use samples available at [https://tailwindcss.com/docs/configuration](https://tailwindcss.com/docs/configuration)\n\n### Emmet HTML completion \nInclude the following to the settings.json in order to get smooth HTML completion via emmet (such as expanding `input:button<Tab>` to `<input type=\"button\" value=\"\">`). The emmet plugin is built into vscode and just needs to be activated for `.templ` files:\n\n```json\n{\n  \"emmet.includeLanguages\": {\n    \"templ\": \"html\"\n  }\n}\n```\n\n## Neovim > 0.5.0\n\nA plugin written in VimScript which adds syntax highlighting: [joerdav/templ.vim](https://github.com/Joe-Davidson1802/templ.vim).\n\nFor neovim you can use [nvim-treesitter](https://github.com/nvim-treesitter/nvim-treesitter) and install [tree-sitter-templ](https://github.com/vrischmann/tree-sitter-templ) with `:TSInstall templ`.\n\nThe configuration for the templ Language Server is included in [lspconfig](https://github.com/neovim/nvim-lspconfig), [mason](https://github.com/williamboman/mason.nvim), and [mason-lspconfig](https://github.com/williamboman/mason-lspconfig.nvim).\n\nThe `templ` command must be in your system path for the LSP to be able to start. Ensure that you can run it from the command line before continuing.\n\nInstalling and configuring the templ LSP is no different to setting up any other Language Server.\n\n```lua\nlocal lspconfig = require(\"lspconfig\")\n\n-- Use a loop to conveniently call 'setup' on multiple servers and\n-- map buffer local keybindings when the language server attaches\n\nlocal servers = { 'gopls', 'ccls', 'cmake', 'tsserver', 'templ' }\nfor _, lsp in ipairs(servers) do\n  lspconfig[lsp].setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n  })\nend\n```\n\nIn Neovim, you can use the `:LspInfo` command to check which Language Servers (if any) are running. If the expected language server has not started, it could be due to the unregistered templ file extension.\n\nTo resolve this issue, add the following code to your configuration. This is also necessary for other LSPs to \"pick up\" on .templ files.\n\n```lua\nvim.filetype.add({ extension = { templ = \"templ\" } })\n```\n\n##### Other LSPs within .templ files \nThese LSPs can be used _in conjunction_ with the templ lsp and tree-sitter. Here's how to set them up.\n\n[html-lsp](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#html) \\- First make sure you have it installed `:LspInstall html` or find it on the `:Mason` list.\n\n```lua\nlspconfig.html.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"html\", \"templ\" },\n})\n```\n\n[htmx-lsp](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#htmx) \\- First make sure you have it installed `:LspInstall htmx` or find it on the `:Mason` list. Note with this LSP, it activates after you type `hx-` in an html attribute, because that's how all htmx attributes are written.\n\n```lua\nlspconfig.htmx.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"html\", \"templ\" },\n})\n```\n\n[tailwindcss](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#tailwindcss) \\- First make sure you have it installed `:LspInstall tailwindcss` or find it on the `:Mason` list.\n\n```lua\nlspconfig.tailwindcss.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"templ\", \"astro\", \"javascript\", \"typescript\", \"react\" },\n    settings = {\n      tailwindCSS = {\n        includeLanguages = {\n          templ = \"html\",\n        },\n      },\n    },\n})\n```\n\nInside of your `tailwind.config.js`, you need to tell tailwind to look inside of .templ files and/or .go files.\n\ntip\nIf you don't have a `tailwind.config.js` in the root directory of your project, the Tailwind LSP won't activate, and you won't see autocompletion results.\n\n```javascript\nmodule.exports = {\n    content: [ \"./**/*.html\", \"./**/*.templ\", \"./**/*.go\", ],\n    theme: { extend: {}, },\n    plugins: [],\n}\n```\n\n### Formatting \nWith the templ LSP installed and configured, you can use the following code snippet to format on save:\n\n```lua\nvim.api.nvim_create_autocmd({ \"BufWritePre\" }, { pattern = { \"*.templ\" }, callback = vim.lsp.buf.format })\n```\n\n`BufWritePre` means that the callback gets ran after you call `:write`.\n\nIf you have multiple LSPs attached to the same buffer, and you have issues with `vim.lsp.buf.format`, you can use this snippet to run `templ fmt` in the same way that you might from the command line.\n\nThis will get the buffer and its corresponding filename, and refresh the buffer after it has been formatted so you don't get out of sync issues.\n\n```lua\nlocal custom_format = function()\n    if vim.bo.filetype == \"templ\" then\n        local bufnr = vim.api.nvim_get_current_buf()\n        local filename = vim.api.nvim_buf_get_name(bufnr)\n        local cmd = \"templ fmt \" .. vim.fn.shellescape(filename)\n\n        vim.fn.jobstart(cmd, {\n            on_exit = function()\n                -- Reload the buffer only if it's still the current buffer\n                if vim.api.nvim_get_current_buf() == bufnr then\n                    vim.cmd('e!')\n                end\n            end,\n        })\n    else\n        vim.lsp.buf.format()\n    end\nend\n```\n\nTo apply this `custom_format` in your neovim configuration as a keybinding, apply it to the `on_attach` function.\n\n```lua\nlocal on_attach = function(client, bufnr)\n    local opts = { buffer = bufnr, remap = false }\n    -- other configuration options\n    vim.keymap.set(\"n\", \"<leader>lf\", custom_format, opts)\nend\n```\n\nTo make this `custom_format` run on save, make the same autocmd from before and replace the callback with `custom_format`.\n\n```lua\nvim.api.nvim_create_autocmd({ \"BufWritePre\" }, { pattern = { \"*.templ\" }, callback = custom_format })\n```\n\nYou can also rewrite the function like so, given that the function will only be executed on .templ files.\n\n```lua\nlocal templ_format = function()\n    local bufnr = vim.api.nvim_get_current_buf()\n    local filename = vim.api.nvim_buf_get_name(bufnr)\n    local cmd = \"templ fmt \" .. vim.fn.shellescape(filename)\n\n    vim.fn.jobstart(cmd, {\n        on_exit = function()\n            -- Reload the buffer only if it's still the current buffer\n            if vim.api.nvim_get_current_buf() == bufnr then\n                vim.cmd('e!')\n            end\n        end,\n    })\nend\n```\n\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/developer-tools/ide-support", "title": "IDE Support for Templ", "description": "This page provides guidance on setting up IDE support for Templ across various editors including Visual Studio Code, Neovim, Vim, Helix, and Emacs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:54:33", "type": "overview", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "title": "IDE support | templ docs", "ogTitle": "IDE support | templ docs", "ogUrl": "https://templ.guide/developer-tools/ide-support/", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/ide-support/", "og:description": "Visual Studio Code", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Visual Studio Code", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:version": "current", "description": "Visual Studio Code", "og:title": "IDE support | templ docs", "docusaurus_locale": "en", "docusaurus_version": "current", "scrapeId": "66d43af6-9931-4888-bb97-45363d309a99", "sourceURL": "https://templ.guide/developer-tools/ide-support", "url": "https://templ.guide/developer-tools/ide-support/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I visual studio code in templ?\n\nAssistant: To visual studio code in templ, here's what you do:\nThere's a VS Code extension, just make sure you've already installed templ and that it's on your path.\n\n- [https://marketplace.visualstudio.com/items?itemName=a-h.templ](https://marketplace.visualstudio.com/items?itemName=a-h.templ)\n- [https://github.com/a-h/templ-vscode](https://github.com/a-h/templ-vscode)\n\nVSCodium users can find the extension on the Open VSX Registry at [https://open-vsx.org/extension/a-h/templ](https://open-vsx.org/extension/a-h/templ) \n\n### Format on Save \nInclude the following into your settings.json to activate formatting `.templ` files on save with the templ plugin:\n\n```json\n{\n    \"editor.formatOnSave\": true,\n    \"[templ]\": {\n        \"editor.defaultFormatter\": \"a-h.templ\"\n    }\n}\n```\n\n### Tailwind CSS Intellisense \nInclude the following to the settings.json in order to enable autocompletion for Tailwind CSS in `.templ` files:\n\n```json\n{\n  \"tailwindCSS.includeLanguages\": {\n    \"templ\": \"html\"\n  }\n}\n```\n\nnote\nTailwind language servers require a tailwind.config.js file to be present in the root of your project. You can create a new config file with `npx tailwindcss init`, or use samples available at [https://tailwindcss.com/docs/configuration](https://tailwindcss.com/docs/configuration)\n\n### Emmet HTML completion \nInclude the following to the settings.json in order to get smooth HTML completion via emmet (such as expanding `input:button<Tab>` to `<input type=\"button\" value=\"\">`). The emmet plugin is built into vscode and just needs to be activated for `.templ` files:\n\n```json\n{\n  \"emmet.includeLanguages\": {\n    \"templ\": \"html\"\n  }\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/ide-support", "title": "IDE Support for Templ", "description": "This page provides guidance on setting up IDE support for Templ across various editors including Visual Studio Code, Neovim, Vim, Helix, and Emacs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:54:33", "type": "section_detail", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "title": "IDE support | templ docs", "ogTitle": "IDE support | templ docs", "ogUrl": "https://templ.guide/developer-tools/ide-support/", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/ide-support/", "og:description": "Visual Studio Code", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Visual Studio Code", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:version": "current", "description": "Visual Studio Code", "og:title": "IDE support | templ docs", "docusaurus_locale": "en", "docusaurus_version": "current", "scrapeId": "66d43af6-9931-4888-bb97-45363d309a99", "sourceURL": "https://templ.guide/developer-tools/ide-support", "url": "https://templ.guide/developer-tools/ide-support/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I neovim > 0.5.0 in templ?\n\nAssistant: To neovim > 0.5.0 in templ, here's what you do:\nA plugin written in VimScript which adds syntax highlighting: [joerdav/templ.vim](https://github.com/Joe-Davidson1802/templ.vim).\n\nFor neovim you can use [nvim-treesitter](https://github.com/nvim-treesitter/nvim-treesitter) and install [tree-sitter-templ](https://github.com/vrischmann/tree-sitter-templ) with `:TSInstall templ`.\n\nThe configuration for the templ Language Server is included in [lspconfig](https://github.com/neovim/nvim-lspconfig), [mason](https://github.com/williamboman/mason.nvim), and [mason-lspconfig](https://github.com/williamboman/mason-lspconfig.nvim).\n\nThe `templ` command must be in your system path for the LSP to be able to start. Ensure that you can run it from the command line before continuing.\n\nInstalling and configuring the templ LSP is no different to setting up any other Language Server.\n\n```lua\nlocal lspconfig = require(\"lspconfig\")\n\n-- Use a loop to conveniently call 'setup' on multiple servers and\n-- map buffer local keybindings when the language server attaches\n\nlocal servers = { 'gopls', 'ccls', 'cmake', 'tsserver', 'templ' }\nfor _, lsp in ipairs(servers) do\n  lspconfig[lsp].setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n  })\nend\n```\n\nIn Neovim, you can use the `:LspInfo` command to check which Language Servers (if any) are running. If the expected language server has not started, it could be due to the unregistered templ file extension.\n\nTo resolve this issue, add the following code to your configuration. This is also necessary for other LSPs to \"pick up\" on .templ files.\n\n```lua\nvim.filetype.add({ extension = { templ = \"templ\" } })\n```\n\n##### Other LSPs within .templ files \nThese LSPs can be used _in conjunction_ with the templ lsp and tree-sitter. Here's how to set them up.\n\n[html-lsp](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#html) \\- First make sure you have it installed `:LspInstall html` or find it on the `:Mason` list.\n\n```lua\nlspconfig.html.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"html\", \"templ\" },\n})\n```\n\n[htmx-lsp](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#htmx) \\- First make sure you have it installed `:LspInstall htmx` or find it on the `:Mason` list. Note with this LSP, it activates after you type `hx-` in an html attribute, because that's how all htmx attributes are written.\n\n```lua\nlspconfig.htmx.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"html\", \"templ\" },\n})\n```\n\n[tailwindcss](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#tailwindcss) \\- First make sure you have it installed `:LspInstall tailwindcss` or find it on the `:Mason` list.\n\n```lua\nlspconfig.tailwindcss.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"templ\", \"astro\", \"javascript\", \"typescript\", \"react\" },\n    settings = {\n      tailwindCSS = {\n        includeLanguages = {\n          templ = \"html\",\n        },\n      },\n    },\n})\n```\n\nInside of your `tailwind.config.js`, you need to tell tailwind to look inside of .templ files and/or .go files.\n\ntip\nIf you don't have a `tailwind.config.js` in the root directory of your project, the Tailwind LSP won't activate, and you won't see autocompletion results.\n\n```javascript\nmodule.exports = {\n    content: [ \"./**/*.html\", \"./**/*.templ\", \"./**/*.go\", ],\n    theme: { extend: {}, },\n    plugins: [],\n}\n```\n\n### Formatting \nWith the templ LSP installed and configured, you can use the following code snippet to format on save:\n\n```lua\nvim.api.nvim_create_autocmd({ \"BufWritePre\" }, { pattern = { \"*.templ\" }, callback = vim.lsp.buf.format })\n```\n\n`BufWritePre` means that the callback gets ran after you call `:write`.\n\nIf you have multiple LSPs attached to the same buffer, and you have issues with `vim.lsp.buf.format`, you can use this snippet to run `templ fmt` in the same way that you might from the command line.\n\nThis will get the buffer and its corresponding filename, and refresh the buffer after it has been formatted so you don't get out of sync issues.\n\n```lua\nlocal custom_format = function()\n    if vim.bo.filetype == \"templ\" then\n        local bufnr = vim.api.nvim_get_current_buf()\n        local filename = vim.api.nvim_buf_get_name(bufnr)\n        local cmd = \"templ fmt \" .. vim.fn.shellescape(filename)\n\n        vim.fn.jobstart(cmd, {\n            on_exit = function()\n                -- Reload the buffer only if it's still the current buffer\n                if vim.api.nvim_get_current_buf() == bufnr then\n                    vim.cmd('e!')\n                end\n            end,\n        })\n    else\n        vim.lsp.buf.format()\n    end\nend\n```\n\nTo apply this `custom_format` in your neovim configuration as a keybinding, apply it to the `on_attach` function.\n\n```lua\nlocal on_attach = function(client, bufnr)\n    local opts = { buffer = bufnr, remap = false }\n    -- other configuration options\n    vim.keymap.set(\"n\", \"<leader>lf\", custom_format, opts)\nend\n```\n\nTo make this `custom_format` run on save, make the same autocmd from before and replace the callback with `custom_format`.\n\n```lua\nvim.api.nvim_create_autocmd({ \"BufWritePre\" }, { pattern = { \"*.templ\" }, callback = custom_format })\n```\n\nYou can also rewrite the function like so, given that the function will only be executed on .templ files.\n\n```lua\nlocal templ_format = function()\n    local bufnr = vim.api.nvim_get_current_buf()\n    local filename = vim.api.nvim_buf_get_name(bufnr)\n    local cmd = \"templ fmt \" .. vim.fn.shellescape(filename)\n\n    vim.fn.jobstart(cmd, {\n        on_exit = function()\n            -- Reload the buffer only if it's still the current buffer\n            if vim.api.nvim_get_current_buf() == bufnr then\n                vim.cmd('e!')\n            end\n        end,\n    })\nend\n```\n.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/developer-tools/ide-support", "title": "IDE Support for Templ", "description": "This page provides guidance on setting up IDE support for Templ across various editors including Visual Studio Code, Neovim, Vim, Helix, and Emacs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:54:33", "type": "section_detail", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "title": "IDE support | templ docs", "ogTitle": "IDE support | templ docs", "ogUrl": "https://templ.guide/developer-tools/ide-support/", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/ide-support/", "og:description": "Visual Studio Code", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Visual Studio Code", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:version": "current", "description": "Visual Studio Code", "og:title": "IDE support | templ docs", "docusaurus_locale": "en", "docusaurus_version": "current", "scrapeId": "66d43af6-9931-4888-bb97-45363d309a99", "sourceURL": "https://templ.guide/developer-tools/ide-support", "url": "https://templ.guide/developer-tools/ide-support/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for IDE Support for Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Format on Save for VS Code**:\n\n```yaml\n{\n    \"editor.formatOnSave\": true,\n    \"[templ]\": {\n        \"editor.defaultFormatter\": \"a-h.templ\"\n    }\n}\n```\n\nThis snippet shows you how to format on save for vs code, which is an important aspect of ide support for templ.\n\n**Tailwind CSS Intellisense for VS Code**:\n\n```yaml\n{\n  \"tailwindCSS.includeLanguages\": {\n    \"templ\": \"html\"\n  }\n}\n```\n\nThis snippet shows you how to tailwind css intellisense for vs code, which is an important aspect of ide support for templ.\n\n**Emmet HTML completion for VS Code**:\n\n```yaml\n{\n  \"emmet.includeLanguages\": {\n    \"templ\": \"html\"\n  }\n}\n```\n\nThis snippet shows you how to emmet html completion for vs code, which is an important aspect of ide support for templ.\n\n**Neovim LSP Setup**:\n\n```yaml\nlocal lspconfig = require(\"lspconfig\")\n\nlocal servers = { 'gopls', 'ccls', 'cmake', 'tsserver', 'templ' }\nfor _, lsp in ipairs(servers) do\n  lspconfig[lsp].setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n  })\nend\n\n```\n\nThis snippet shows you how to neovim lsp setup, which is an important aspect of ide support for templ.\n\n**Neovim Filetype Registration**:\n\n```yaml\nvim.filetype.add({ extension = { templ = \"templ\" } })\n```\n\nThis snippet shows you how to neovim filetype registration, which is an important aspect of ide support for templ.\n\n**HTML LSP Setup in Neovim**:\n\n```yaml\nlspconfig.html.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"html\", \"templ\" },\n})\n```\n\nThis snippet shows you how to html lsp setup in neovim, which is an important aspect of ide support for templ.\n\n**HTMX LSP Setup in Neovim**:\n\n```yaml\nlspconfig.htmx.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"html\", \"templ\" },\n})\n```\n\nThis snippet shows you how to htmx lsp setup in neovim, which is an important aspect of ide support for templ.\n\n**Tailwind CSS LSP Setup in Neovim**:\n\n```yaml\nlspconfig.tailwindcss.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"templ\", \"astro\", \"javascript\", \"typescript\", \"react\" },\n    settings = {\n      tailwindCSS = {\n        includeLanguages = {\n          templ = \"html\",\n        },\n      },\n    },\n})\n```\n\nThis snippet shows you how to tailwind css lsp setup in neovim, which is an important aspect of ide support for templ.\n\n**Neovim Formatting on Save**:\n\n```yaml\nvim.api.nvim_create_autocmd({ \"BufWritePre\" }, { pattern = { \"*.templ\" }, callback = vim.lsp.buf.format })\n```\n\nThis snippet shows you how to neovim formatting on save, which is an important aspect of ide support for templ.\n\n**Custom Format Function in Neovim**:\n\n```yaml\nlocal custom_format = function()\n    if vim.bo.filetype == \"templ\" then\n        local bufnr = vim.api.nvim_get_current_buf()\n        local filename = vim.api.nvim_buf_get_name(bufnr)\n        local cmd = \"templ fmt \" .. vim.fn.shellescape(filename)\n\n        vim.fn.jobstart(cmd, {\n            on_exit = function()\n                if vim.api.nvim_get_current_buf() == bufnr then\n                    vim.cmd('e!')\n                end\n            end,\n        })\n    else\n        vim.lsp.buf.format()\n    end\nend\n\n```\n\nThis snippet shows you how to custom format function in neovim, which is an important aspect of ide support for templ.\n\n", "metadata": {"source_url": "https://templ.guide/developer-tools/ide-support", "title": "IDE Support for Templ", "description": "This page provides guidance on setting up IDE support for Templ across various editors including Visual Studio Code, Neovim, Vim, Helix, and Emacs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:54:33", "type": "code_examples", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "title": "IDE support | templ docs", "ogTitle": "IDE support | templ docs", "ogUrl": "https://templ.guide/developer-tools/ide-support/", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/ide-support/", "og:description": "Visual Studio Code", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Visual Studio Code", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:version": "current", "description": "Visual Studio Code", "og:title": "IDE support | templ docs", "docusaurus_locale": "en", "docusaurus_version": "current", "scrapeId": "66d43af6-9931-4888-bb97-45363d309a99", "sourceURL": "https://templ.guide/developer-tools/ide-support", "url": "https://templ.guide/developer-tools/ide-support/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using IDE Support for Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nEnsure that the templ command is in your system path for the LSP to start properly.\n\nIf you don't have a tailwind.config.js in the root directory of your project, the Tailwind LSP won't activate, and you won't see autocompletion results.\n\nIf you cannot run :TSInstall templ, ensure you have an up-to-date version of tree-sitter.\n\nIf you still don't get syntax highlighting after it's installed, try running :TSBufEnable highlight.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/developer-tools/ide-support", "title": "IDE Support for Templ", "description": "This page provides guidance on setting up IDE support for Templ across various editors including Visual Studio Code, Neovim, Vim, Helix, and Emacs.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:54:33", "type": "best_practices", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "title": "IDE support | templ docs", "ogTitle": "IDE support | templ docs", "ogUrl": "https://templ.guide/developer-tools/ide-support/", "ogLocale": "en", "og:url": "https://templ.guide/developer-tools/ide-support/", "og:description": "Visual Studio Code", "favicon": "https://templ.guide/img/favicon.ico", "viewport": "width=device-width, initial-scale=1.0", "docusaurus_tag": "docs-default-current", "og:locale": "en", "language": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:card": "summary_large_image", "docsearch:docusaurus_tag": "docs-default-current", "ogDescription": "Visual Studio Code", "generator": "Docusaurus v3.6.3", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:language": "en", "docsearch:version": "current", "description": "Visual Studio Code", "og:title": "IDE support | templ docs", "docusaurus_locale": "en", "docusaurus_version": "current", "scrapeId": "66d43af6-9931-4888-bb97-45363d309a99", "sourceURL": "https://templ.guide/developer-tools/ide-support", "url": "https://templ.guide/developer-tools/ide-support/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Script Templates is in templ?\n\nAssistant: Sure, I'd be happy to explain Script Templates in templ.\n\n# Script Templates\n\nThis page covers the usage of script templates in templ, including how to pass data from Go to JavaScript, avoid inline event handlers, and work with NPM projects.Here's a quick rundown of what this is about:\n\n## Script tags\n\nUse standard `<script>` tags, and standard HTML attributes to run JavaScript on the client.\n\n```codeBlockLines_e6Vv\ntempl body() {\n  <script>\n    function handleClick(event) {\n      alert(event + ' clicked');\n    }\n  </script>\n  <button onclick=\"handleClick(this)\">Click me</button>\n}\n```\n\n## Pass Go data to JavaScript\n\n### Pass Go data to a JavaScript event handler\nUse `templ.JSFuncCall` to pass server-side data to client-side scripts by calling a JavaScript function.\n\ninput.templ\n\n```codeBlockLines_e6Vv\ntempl Component(data CustomType) {\n\t<button onclick={ templ.JSFuncCall(\"alert\", data.Message) }>Show alert</button>\n}\n```\n\nThe data passed to the `alert` function is JSON encoded, so if `data.Message` was the string value of `Hello, from the JSFuncCall data`, the output would be:\n\noutput.html\n\n```codeBlockLines_e6Vv\n<button onclick=\"alert('Hello, from the JSFuncCall data')\">Show alert</button>\n``` \n\n### Pass event objects to an Event Handler\nHTML element `on*` attributes pass an event object to the function. To pass the event object to a function, use `templ.JSExpression`.\n\nwarning\n\n`templ.JSExpression` bypasses JSON encoding, so the string value is output directly to the HTML - this can be a security risk if the data is not trusted, e.g. the data is user input, not a compile-time constant.\n\ninput.templ\n\n```codeBlockLines_e6Vv\n<script>\n\tfunction clickHandler(event, message) {\n\t\talert(message);\n\t\tevent.preventDefault();\n\t}\n</script>\n<button onclick={ templ.JSFuncCall(\"clickHandler\", templ.JSExpression(\"event\"), \"message from Go\") }>Show event</button>\n```\n\nThe output would be:\n\noutput.html\n\n```codeBlockLines_e6Vv\n<script>\n\tfunction clickHandler(event, message) {\n\t\talert(message);\n\t\tevent.preventDefault();\n\t}\n</script>\n<button onclick=\"clickHandler(event, 'message from Go')\">Show event</button>\n``` \n\n### Call client side functions with server side data\nUse `templ.JSFuncCall` to call a client-side function with server-side data.\n\n`templ.JSFuncCall` takes a function name and a variadic list of arguments. The arguments are JSON encoded and passed to the function.\n\nIn the case that the function name is invalid (e.g. contains `</script>` or is a JavaScript expression, not a function name), the function name will be sanitized to `__templ_invalid_function_name`.\n\ncomponents.templ\n\n```codeBlockLines_e6Vv\ntempl InitializeClientSideScripts(data CustomType) {\n  @templ.JSFuncCall(\"functionToCall\", data.Name, data.Age)\n}\n```\n\nThis will output a `<script>` tag that calls the `functionToCall` function with the `Name` and `Age` properties of the `data` object.\n\noutput.html\n\n```codeBlockLines_e6Vv\n<script>\n  functionToCall(\"John\", 42);\n</script>\n``` \n\ntip\n\nIf you want to write out an arbitrary string containing JavaScript, and are sure it is safe, you can use `templ.JSUnsafeFuncCall` to bypass script sanitization. \n\n### Pass server-side data to the client in a HTML attribute\nA common approach used by libraries like alpine.js is to pass data to the client in a HTML attribute.\n\nTo pass server-side data to the client in a HTML attribute, use `templ.JSONString` to encode the data as a JSON string.\n\ninput.templ\n\n```codeBlockLines_e6Vv\ntempl body(data any) {\n  <button id=\"alerter\" alert-data={ templ.JSONString(data) }>Show alert</button>\n}\n```\n\noutput.html\n\n```codeBlockLines_e6Vv\n<button id=\"alerter\" alert-data=\"{&quot;msg&quot;:&quot;Hello, from the attribute data&quot;}\">Show alert</button>\n```\n\nThe data in the attribute can then be accessed from client-side JavaScript.\n\n```codeBlockLines_e6Vv\nconst button = document.getElementById('alerter');\nconst data = JSON.parse(button.getAttribute('alert-data'));\n```\n\n[alpine.js](https://alpinejs.dev/) uses `x-*` attributes to pass data to the client:\n\n```codeBlockLines_e6Vv\ntempl DataDisplay(data DataType) {\n  <div x-data={ templ.JSONString(data) }>\n      ...\n  </div>\n}\n``` \n\n### Pass server-side data to the client in a script element\nIn addition to passing data in HTML attributes, you can also pass data to the client in a `<script>` element.\n\ninput.templ\n\n```codeBlockLines_e6Vv\ntempl body(data any) {\n  @templ.JSONScript(\"id\", data)\n}\n```\n\noutput.html\n\n```codeBlockLines_e6Vv\n<script id=\"id\" type=\"application/json\">{\"msg\":\"Hello, from the script data\"}</script>\n```\n\nThe data in the script tag can then be accessed from client-side JavaScript.\n\n```codeBlockLines_e6Vv\nconst data = JSON.parse(document.getElementById('id').textContent);\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/script-templates", "title": "Script Templates", "description": "This page covers the usage of script templates in templ, including how to pass data from Go to JavaScript, avoid inline event handlers, and work with NPM projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:55:12", "type": "overview", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "Script tags", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/script-templates/", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/script-templates/", "og:description": "Script tags", "twitter:card": "summary_large_image", "og:title": "Using JavaScript with templ | templ docs", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "Using JavaScript with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "language": "en", "title": "Using JavaScript with templ | templ docs", "description": "Script tags", "scrapeId": "b6fbb510-59cc-4afc-93c0-2abef645a573", "sourceURL": "https://templ.guide/syntax-and-usage/script-templates", "url": "https://templ.guide/syntax-and-usage/script-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I script tags in templ?\n\nAssistant: To script tags in templ, here's what you do:\nUse standard `<script>` tags, and standard HTML attributes to run JavaScript on the client.\n\n```codeBlockLines_e6Vv\ntempl body() {\n  <script>\n    function handleClick(event) {\n      alert(event + ' clicked');\n    }\n  </script>\n  <button onclick=\"handleClick(this)\">Click me</button>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/script-templates", "title": "Script Templates", "description": "This page covers the usage of script templates in templ, including how to pass data from Go to JavaScript, avoid inline event handlers, and work with NPM projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:55:12", "type": "section_detail", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "Script tags", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/script-templates/", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/script-templates/", "og:description": "Script tags", "twitter:card": "summary_large_image", "og:title": "Using JavaScript with templ | templ docs", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "Using JavaScript with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "language": "en", "title": "Using JavaScript with templ | templ docs", "description": "Script tags", "scrapeId": "b6fbb510-59cc-4afc-93c0-2abef645a573", "sourceURL": "https://templ.guide/syntax-and-usage/script-templates", "url": "https://templ.guide/syntax-and-usage/script-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I pass go data to javascript in templ?\n\nAssistant: To pass go data to javascript in templ, here's what you do:\n### Pass Go data to a JavaScript event handler\nUse `templ.JSFuncCall` to pass server-side data to client-side scripts by calling a JavaScript function.\n\ninput.templ\n\n```codeBlockLines_e6Vv\ntempl Component(data CustomType) {\n\t<button onclick={ templ.JSFuncCall(\"alert\", data.Message) }>Show alert</button>\n}\n```\n\nThe data passed to the `alert` function is JSON encoded, so if `data.Message` was the string value of `Hello, from the JSFuncCall data`, the output would be:\n\noutput.html\n\n```codeBlockLines_e6Vv\n<button onclick=\"alert('Hello, from the JSFuncCall data')\">Show alert</button>\n``` \n\n### Pass event objects to an Event Handler\nHTML element `on*` attributes pass an event object to the function. To pass the event object to a function, use `templ.JSExpression`.\n\nwarning\n\n`templ.JSExpression` bypasses JSON encoding, so the string value is output directly to the HTML - this can be a security risk if the data is not trusted, e.g. the data is user input, not a compile-time constant.\n\ninput.templ\n\n```codeBlockLines_e6Vv\n<script>\n\tfunction clickHandler(event, message) {\n\t\talert(message);\n\t\tevent.preventDefault();\n\t}\n</script>\n<button onclick={ templ.JSFuncCall(\"clickHandler\", templ.JSExpression(\"event\"), \"message from Go\") }>Show event</button>\n```\n\nThe output would be:\n\noutput.html\n\n```codeBlockLines_e6Vv\n<script>\n\tfunction clickHandler(event, message) {\n\t\talert(message);\n\t\tevent.preventDefault();\n\t}\n</script>\n<button onclick=\"clickHandler(event, 'message from Go')\">Show event</button>\n``` \n\n### Call client side functions with server side data\nUse `templ.JSFuncCall` to call a client-side function with server-side data.\n\n`templ.JSFuncCall` takes a function name and a variadic list of arguments. The arguments are JSON encoded and passed to the function.\n\nIn the case that the function name is invalid (e.g. contains `</script>` or is a JavaScript expression, not a function name), the function name will be sanitized to `__templ_invalid_function_name`.\n\ncomponents.templ\n\n```codeBlockLines_e6Vv\ntempl InitializeClientSideScripts(data CustomType) {\n  @templ.JSFuncCall(\"functionToCall\", data.Name, data.Age)\n}\n```\n\nThis will output a `<script>` tag that calls the `functionToCall` function with the `Name` and `Age` properties of the `data` object.\n\noutput.html\n\n```codeBlockLines_e6Vv\n<script>\n  functionToCall(\"John\", 42);\n</script>\n``` \n\ntip\n\nIf you want to write out an arbitrary string containing JavaScript, and are sure it is safe, you can use `templ.JSUnsafeFuncCall` to bypass script sanitization. \n\n### Pass server-side data to the client in a HTML attribute\nA common approach used by libraries like alpine.js is to pass data to the client in a HTML attribute.\n\nTo pass server-side data to the client in a HTML attribute, use `templ.JSONString` to encode the data as a JSON string.\n\ninput.templ\n\n```codeBlockLines_e6Vv\ntempl body(data any) {\n  <button id=\"alerter\" alert-data={ templ.JSONString(data) }>Show alert</button>\n}\n```\n\noutput.html\n\n```codeBlockLines_e6Vv\n<button id=\"alerter\" alert-data=\"{&quot;msg&quot;:&quot;Hello, from the attribute data&quot;}\">Show alert</button>\n```\n\nThe data in the attribute can then be accessed from client-side JavaScript.\n\n```codeBlockLines_e6Vv\nconst button = document.getElementById('alerter');\nconst data = JSON.parse(button.getAttribute('alert-data'));\n```\n\n[alpine.js](https://alpinejs.dev/) uses `x-*` attributes to pass data to the client:\n\n```codeBlockLines_e6Vv\ntempl DataDisplay(data DataType) {\n  <div x-data={ templ.JSONString(data) }>\n      ...\n  </div>\n}\n``` \n\n### Pass server-side data to the client in a script element\nIn addition to passing data in HTML attributes, you can also pass data to the client in a `<script>` element.\n\ninput.templ\n\n```codeBlockLines_e6Vv\ntempl body(data any) {\n  @templ.JSONScript(\"id\", data)\n}\n```\n\noutput.html\n\n```codeBlockLines_e6Vv\n<script id=\"id\" type=\"application/json\">{\"msg\":\"Hello, from the script data\"}</script>\n```\n\nThe data in the script tag can then be accessed from client-side JavaScript.\n\n```codeBlockLines_e6Vv\nconst data = JSON.parse(document.getElementById('id').textContent);\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/script-templates", "title": "Script Templates", "description": "This page covers the usage of script templates in templ, including how to pass data from Go to JavaScript, avoid inline event handlers, and work with NPM projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:55:12", "type": "section_detail", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "Script tags", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/script-templates/", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/script-templates/", "og:description": "Script tags", "twitter:card": "summary_large_image", "og:title": "Using JavaScript with templ | templ docs", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "Using JavaScript with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "language": "en", "title": "Using JavaScript with templ | templ docs", "description": "Script tags", "scrapeId": "b6fbb510-59cc-4afc-93c0-2abef645a573", "sourceURL": "https://templ.guide/syntax-and-usage/script-templates", "url": "https://templ.guide/syntax-and-usage/script-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Script Templates in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**Script Tag Example**:\n\n```yaml\ntempl body() {\n  <script>\n    function handleClick(event) {\n      alert(event + ' clicked');\n    }\n  </script>\n  <button onclick=\"handleClick(this)\">Click me</button>\n}\n```\n\nThis snippet shows you how to script tag example, which is an important aspect of script templates.\n\n**Pass Go Data to JavaScript Event Handler**:\n\n```yaml\ntempl Component(data CustomType) {\n\t<button onclick={ templ.JSFuncCall(\"alert\", data.Message) }>Show alert</button>\n}\n```\n\nThis snippet shows you how to pass go data to javascript event handler, which is an important aspect of script templates.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/script-templates", "title": "Script Templates", "description": "This page covers the usage of script templates in templ, including how to pass data from Go to JavaScript, avoid inline event handlers, and work with NPM projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:55:12", "type": "code_examples", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "Script tags", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/script-templates/", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/script-templates/", "og:description": "Script tags", "twitter:card": "summary_large_image", "og:title": "Using JavaScript with templ | templ docs", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "Using JavaScript with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "language": "en", "title": "Using JavaScript with templ | templ docs", "description": "Script tags", "scrapeId": "b6fbb510-59cc-4afc-93c0-2abef645a573", "sourceURL": "https://templ.guide/syntax-and-usage/script-templates", "url": "https://templ.guide/syntax-and-usage/script-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Script Templates in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nTo ensure that a `<script>` tag within a templ component is only rendered once per HTTP response (or context), use a templ.OnceHandle.\n\nIf you want to write out an arbitrary string containing JavaScript, and are sure it is safe, you can use `templ.JSUnsafeFuncCall` to bypass script sanitization.\n\nYou might find libraries like [surreal](https://github.com/gnat/surreal) useful for reducing boilerplate.\n\nYou can use a CDN to serve 3rd party scripts, or serve your own and 3rd party scripts from your server using a `http.FileServer`.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/script-templates", "title": "Script Templates", "description": "This page covers the usage of script templates in templ, including how to pass data from Go to JavaScript, avoid inline event handlers, and work with NPM projects.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-03-01 03:55:12", "type": "best_practices", "page_metadata": {"twitter:image": "https://templ.guide/img/social-card.jpg", "ogDescription": "Script tags", "docusaurus_locale": "en", "docsearch:docusaurus_tag": "docs-default-current", "og:url": "https://templ.guide/syntax-and-usage/script-templates/", "docsearch:language": "en", "favicon": "https://templ.guide/img/favicon.ico", "ogUrl": "https://templ.guide/syntax-and-usage/script-templates/", "og:description": "Script tags", "twitter:card": "summary_large_image", "og:title": "Using JavaScript with templ | templ docs", "docusaurus_version": "current", "viewport": "width=device-width, initial-scale=1.0", "generator": "Docusaurus v3.6.3", "ogLocale": "en", "ogTitle": "Using JavaScript with templ | templ docs", "docusaurus_tag": "docs-default-current", "og:image": "https://templ.guide/img/social-card.jpg", "ogImage": "https://templ.guide/img/social-card.jpg", "docsearch:version": "current", "og:locale": "en", "language": "en", "title": "Using JavaScript with templ | templ docs", "description": "Script tags", "scrapeId": "b6fbb510-59cc-4afc-93c0-2abef645a573", "sourceURL": "https://templ.guide/syntax-and-usage/script-templates", "url": "https://templ.guide/syntax-and-usage/script-templates/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you explain what Control Flow in Templ is in templ?\n\nAssistant: Sure, I'd be happy to explain Control Flow in Templ in templ.\n\n# Control Flow in Templ\n\nThis page covers the use of Go statements within templ elements for conditional rendering and iteration.Here's a quick rundown of what this is about:\n\n## Control flow\n\nWithin a templ element, a subset of Go statements can be used directly.\n\nThese Go statements can be used to conditionally render child elements, or to iterate variables.\n\nFor individual implementation guides see:\n\n- [if/else](https://templ.guide/syntax-and-usage/if-else)\n- [switch](https://templ.guide/syntax-and-usage/switch)\n- [for loops](https://templ.guide/syntax-and-usage/loops)\n\n## if/switch/for within text\n\nGo statements can be used without any escaping to make it simple for developers to include them.\n\nThe templ parser assumes that text that starts with `if`, `switch` or `for` denotes the start of one of those expressions as per this example.\n\nshow-hello.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl showHelloIfTrue(b bool) {\n\t<div>\n\t\tif b {\n\t\t\t<p>Hello</p>\n\t\t}\n\t</div>\n}\n```\n\nIf you need to start a text block with the words `if`, `switch`, or `for`:\n\n- Use a Go string expression.\n- Capitalise `if`, `switch`, or `for`.\n\nparagraph.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl display(price float64, count int) {\n\t<p>Switch to Linux</p>\n\t<p>{ `switch to Linux` }</p>\n\t<p>{ \"for a day\" }</p>\n\t<p>{ fmt.Sprintf(\"%f\", price) }{ \"for\" }{ fmt.Sprintf(\"%d\", count) }</p>\n\t<p>{ fmt.Sprintf(\"%f for %d\", price, count) }</p>\n}\n```\n\n## Design considerations\n\nWe decided to not require a special prefix for `if`, `switch` and `for` expressions on the basis that we were more likely to want to use a Go control statement than start a text run with those strings.\n\nTo reduce the risk of a broken control statement, resulting in printing out the source code of the application, templ will complain if a text run starts with `if`, `switch` or `for`, but no opening brace `{` is found.\n\nFor example, the following code causes the templ parser to return an error:\nbroken-if.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl showIfTrue(b bool) {\n\tif b\n\t  <p>Hello</p>\n\t}\n}\n```\n\nnote\n\nNote the missing `{` on line 4.\n\nThe following code also produces an error, since the text run starts with `if`, but no opening `{` is found.\n\nparagraph.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl text(b bool) {\n\t<p>if a tree fell in the woods</p>\n}\n```\n\nnote\n\nThis also applies to `for` and `switch` statements.\n\nTo resolve the issue:\n\n- Use a Go string expression.\n- Capitalise `if`, `switch`, or `for`.\n\nparagraph.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl display(price float64, count int) {\n\t<p>Switch to Linux</p>\n\t<p>{ `switch to Linux` }</p>\n\t<p>{ \"for a day\" }</p>\n\t<p>{ fmt.Sprintf(\"%f\", price) }{ \"for\" }{ fmt.Sprintf(\"%d\", count) }</p>\n\t<p>{ fmt.Sprintf(\"%f for %d\", price, count) }</p>\n}\n```\n\nThis should give you a solid starting point!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/statements", "title": "Control Flow in Templ", "description": "This page covers the use of Go statements within templ elements for conditional rendering and iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:56:05", "type": "overview", "page_metadata": {"docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Statements | templ docs", "title": "Statements | templ docs", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "description": "Control flow", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:description": "Control flow", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/statements/", "favicon": "https://templ.guide/img/favicon.ico", "og:url": "https://templ.guide/syntax-and-usage/statements/", "og:title": "Statements | templ docs", "ogDescription": "Control flow", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "fae84750-a1e2-48d7-9645-229982662ec1", "sourceURL": "https://templ.guide/syntax-and-usage/statements", "url": "https://templ.guide/syntax-and-usage/statements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I control flow in templ?\n\nAssistant: To control flow in templ, here's what you do:\nWithin a templ element, a subset of Go statements can be used directly.\n\nThese Go statements can be used to conditionally render child elements, or to iterate variables.\n\nFor individual implementation guides see:\n\n- [if/else](https://templ.guide/syntax-and-usage/if-else)\n- [switch](https://templ.guide/syntax-and-usage/switch)\n- [for loops](https://templ.guide/syntax-and-usage/loops).\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/statements", "title": "Control Flow in Templ", "description": "This page covers the use of Go statements within templ elements for conditional rendering and iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:56:05", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Statements | templ docs", "title": "Statements | templ docs", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "description": "Control flow", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:description": "Control flow", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/statements/", "favicon": "https://templ.guide/img/favicon.ico", "og:url": "https://templ.guide/syntax-and-usage/statements/", "og:title": "Statements | templ docs", "ogDescription": "Control flow", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "fae84750-a1e2-48d7-9645-229982662ec1", "sourceURL": "https://templ.guide/syntax-and-usage/statements", "url": "https://templ.guide/syntax-and-usage/statements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I if/switch/for within text in templ?\n\nAssistant: To if/switch/for within text in templ, here's what you do:\nGo statements can be used without any escaping to make it simple for developers to include them.\n\nThe templ parser assumes that text that starts with `if`, `switch` or `for` denotes the start of one of those expressions as per this example.\n\nshow-hello.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl showHelloIfTrue(b bool) {\n\t<div>\n\t\tif b {\n\t\t\t<p>Hello</p>\n\t\t}\n\t</div>\n}\n```\n\nIf you need to start a text block with the words `if`, `switch`, or `for`:\n\n- Use a Go string expression.\n- Capitalise `if`, `switch`, or `for`.\n\nparagraph.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl display(price float64, count int) {\n\t<p>Switch to Linux</p>\n\t<p>{ `switch to Linux` }</p>\n\t<p>{ \"for a day\" }</p>\n\t<p>{ fmt.Sprintf(\"%f\", price) }{ \"for\" }{ fmt.Sprintf(\"%d\", count) }</p>\n\t<p>{ fmt.Sprintf(\"%f for %d\", price, count) }</p>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/statements", "title": "Control Flow in Templ", "description": "This page covers the use of Go statements within templ elements for conditional rendering and iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:56:05", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Statements | templ docs", "title": "Statements | templ docs", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "description": "Control flow", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:description": "Control flow", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/statements/", "favicon": "https://templ.guide/img/favicon.ico", "og:url": "https://templ.guide/syntax-and-usage/statements/", "og:title": "Statements | templ docs", "ogDescription": "Control flow", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "fae84750-a1e2-48d7-9645-229982662ec1", "sourceURL": "https://templ.guide/syntax-and-usage/statements", "url": "https://templ.guide/syntax-and-usage/statements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: How do I design considerations in templ?\n\nAssistant: To design considerations in templ, here's what you do:\nWe decided to not require a special prefix for `if`, `switch` and `for` expressions on the basis that we were more likely to want to use a Go control statement than start a text run with those strings.\n\nTo reduce the risk of a broken control statement, resulting in printing out the source code of the application, templ will complain if a text run starts with `if`, `switch` or `for`, but no opening brace `{` is found.\n\nFor example, the following code causes the templ parser to return an error:\nbroken-if.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl showIfTrue(b bool) {\n\tif b\n\t  <p>Hello</p>\n\t}\n}\n```\n\nnote\n\nNote the missing `{` on line 4.\n\nThe following code also produces an error, since the text run starts with `if`, but no opening `{` is found.\n\nparagraph.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl text(b bool) {\n\t<p>if a tree fell in the woods</p>\n}\n```\n\nnote\n\nThis also applies to `for` and `switch` statements.\n\nTo resolve the issue:\n\n- Use a Go string expression.\n- Capitalise `if`, `switch`, or `for`.\n\nparagraph.templ\n\n```codeBlockLines_e6Vv\npackage main\n\ntempl display(price float64, count int) {\n\t<p>Switch to Linux</p>\n\t<p>{ `switch to Linux` }</p>\n\t<p>{ \"for a day\" }</p>\n\t<p>{ fmt.Sprintf(\"%f\", price) }{ \"for\" }{ fmt.Sprintf(\"%d\", count) }</p>\n\t<p>{ fmt.Sprintf(\"%f for %d\", price, count) }</p>\n}\n```.\nPretty straightforward, right?", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/statements", "title": "Control Flow in Templ", "description": "This page covers the use of Go statements within templ elements for conditional rendering and iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:56:05", "type": "section_detail", "page_metadata": {"docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Statements | templ docs", "title": "Statements | templ docs", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "description": "Control flow", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:description": "Control flow", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/statements/", "favicon": "https://templ.guide/img/favicon.ico", "og:url": "https://templ.guide/syntax-and-usage/statements/", "og:title": "Statements | templ docs", "ogDescription": "Control flow", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "fae84750-a1e2-48d7-9645-229982662ec1", "sourceURL": "https://templ.guide/syntax-and-usage/statements", "url": "https://templ.guide/syntax-and-usage/statements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: Can you give me some code examples for Control Flow in Templ in templ?\n\nAssistant: Absolutely! Here are some practical examples to help you out:\n\n**show-hello.templ**:\n\n```yaml\n```codeBlockLines_e6Vv\npackage main\n\ntempl showHelloIfTrue(b bool) {\n\t<div>\n\t\tif b {\n\t\t\t<p>Hello</p>\n\t\t}\n\t</div>\n}\n```\n```\n\nThis snippet shows you how to show-hello.templ, which is an important aspect of control flow in templ.\n\n**paragraph.templ (example with Go string expression)**:\n\n```yaml\n```codeBlockLines_e6Vv\npackage main\n\ntempl display(price float64, count int) {\n\t<p>Switch to Linux</p>\n\t<p>{ `switch to Linux` }</p>\n\t<p>{ \"for a day\" }</p>\n\t<p>{ fmt.Sprintf(\"%f\", price) }{ \"for\" }{ fmt.Sprintf(\"%d\", count) }</p>\n\t<p>{ fmt.Sprintf(\"%f for %d\", price, count) }</p>\n}\n```\n```\n\nThis snippet shows you how to paragraph.templ (example with go string expression), which is an important aspect of control flow in templ.\n\n**broken-if.templ (error example)**:\n\n```yaml\n```codeBlockLines_e6Vv\npackage main\n\ntempl showIfTrue(b bool) {\n\tif b\n\t  <p>Hello</p>\n\t}\n}\n```\n```\n\nThis snippet shows you how to broken-if.templ (error example), which is an important aspect of control flow in templ.\n\n**paragraph.templ (error example)**:\n\n```yaml\n```codeBlockLines_e6Vv\npackage main\n\ntempl text(b bool) {\n\t<p>if a tree fell in the woods</p>\n}\n```\n```\n\nThis snippet shows you how to paragraph.templ (error example), which is an important aspect of control flow in templ.\n\n", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/statements", "title": "Control Flow in Templ", "description": "This page covers the use of Go statements within templ elements for conditional rendering and iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:56:05", "type": "code_examples", "page_metadata": {"docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Statements | templ docs", "title": "Statements | templ docs", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "description": "Control flow", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:description": "Control flow", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/statements/", "favicon": "https://templ.guide/img/favicon.ico", "og:url": "https://templ.guide/syntax-and-usage/statements/", "og:title": "Statements | templ docs", "ogDescription": "Control flow", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "fae84750-a1e2-48d7-9645-229982662ec1", "sourceURL": "https://templ.guide/syntax-and-usage/statements", "url": "https://templ.guide/syntax-and-usage/statements/", "statusCode": 200}}}
{"text": "System: You are a helpful templ expert.\n\nUser: What are some tips for using Control Flow in Templ in templ effectively?\n\nAssistant: Great question! Here are some tips to keep in mind:\n\nUse a Go string expression if starting a text block with `if`, `switch`, or `for`.\n\nCapitalize `if`, `switch`, or `for` when needed.\n\nStick to these, and you'll avoid a lot of headaches!", "metadata": {"source_url": "https://templ.guide/syntax-and-usage/statements", "title": "Control Flow in Templ", "description": "This page covers the use of Go statements within templ elements for conditional rendering and iteration.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-03-01 03:56:05", "type": "best_practices", "page_metadata": {"docsearch:version": "current", "viewport": "width=device-width, initial-scale=1.0", "ogTitle": "Statements | templ docs", "title": "Statements | templ docs", "generator": "Docusaurus v3.6.3", "docusaurus_version": "current", "description": "Control flow", "twitter:card": "summary_large_image", "docusaurus_locale": "en", "og:description": "Control flow", "docsearch:language": "en", "docsearch:docusaurus_tag": "docs-default-current", "ogImage": "https://templ.guide/img/social-card.jpg", "language": "en", "ogLocale": "en", "og:image": "https://templ.guide/img/social-card.jpg", "twitter:image": "https://templ.guide/img/social-card.jpg", "ogUrl": "https://templ.guide/syntax-and-usage/statements/", "favicon": "https://templ.guide/img/favicon.ico", "og:url": "https://templ.guide/syntax-and-usage/statements/", "og:title": "Statements | templ docs", "ogDescription": "Control flow", "og:locale": "en", "docusaurus_tag": "docs-default-current", "scrapeId": "fae84750-a1e2-48d7-9645-229982662ec1", "sourceURL": "https://templ.guide/syntax-and-usage/statements", "url": "https://templ.guide/syntax-and-usage/statements/", "statusCode": 200}}}
