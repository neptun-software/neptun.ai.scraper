{"text": "System: You are a helpful SST expert.\n\nUser: What is \"What is SST\"?\n\nAssistant: Build full-stack apps on your own infrastructure.\n\nHere's a detailed explanation:\n\n\n## Components\nYou start by defining parts of your app, _**in code**_.\n\nFor example, you can add your frontend and set the domain you want to use.\n\n- [Next.js](https://sst.dev/docs#tab-panel-6)\n- [Remix](https://sst.dev/docs#tab-panel-7)\n- [Astro](https://sst.dev/docs#tab-panel-8)\n- [Svelte](https://sst.dev/docs#tab-panel-9)\n- [Solid](https://sst.dev/docs#tab-panel-10)\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n```javascript\nnew sst.aws.Remix(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n```javascript\nnew sst.aws.Astro(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n```javascript\nnew sst.aws.SvelteKit(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n```javascript\nnew sst.aws.SolidStart(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\nJust like the frontend, you can configure backend features _in code_.\n\nLike your API deployed in a container. Or any Lambda functions, Postgres databases, S3 Buckets, or cron jobs.\n\n- [Containers](https://sst.dev/docs#tab-panel-11)\n- [Functions](https://sst.dev/docs#tab-panel-12)\n- [Postgres](https://sst.dev/docs#tab-panel-13)\n- [Bucket](https://sst.dev/docs#tab-panel-14)\n- [Cron](https://sst.dev/docs#tab-panel-15)\n\n```javascript\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }]\n  }\n});\n```\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\"\n});\n```\n\n```javascript\nnew sst.aws.Postgres(\"MyDatabase\", { vpc });\n```\n\n```javascript\nnew sst.aws.Bucket(\"MyBucket\");\n```\n\n```javascript\nnew sst.aws.Cron(\"MyCronJob\", {\n  job: \"src/cron.handler\",\n  schedule: \"rate(1 minute)\"\n});\n```\n\nYou can even set up your Stripe products in code.\n\n```javascript\nnew stripe.Product(\"MyStripeProduct\", {\n  name: \"SST Paid Plan\",\n  description: \"This is how SST makes money\",\n});\n```\n\n## Infrastructure\nThe above are called **Components**. They are a way of defining the features of your application in code. You can define any feature of your application with them.\n\nIn the above examples, they create the necessary infrastructure in your AWS account. All without using the AWS Console.\n\nLearn more about [Components](https://sst.dev/docs/components/).\n\n## Configure\nSST’s components come with sensible defaults designed to get you started. But they can also be configured completely.\n\nFor example, the `sst.aws.Function` can be configured with all the common Lambda function options.\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  timeout: \"3 minutes\",\n  memory: \"1024 MB\"\n});\n```\n\nBut with SST you can take it a step further and transform how the Function component creates its low level resources. For example, the Function component also creates an IAM Role. You can transform the IAM Role using the `transform` prop.\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  transform: {\n    role: (args) => ({\n      name: `${args.name}-MyRole`\n    })\n  }\n});\n```\n\n## Providers\nSST has built-in components for AWS and Cloudflare that make these services easier to use.\n\nHowever it also supports components from any one of the **150+ Pulumi/Terraform providers**. For example, you can use Vercel for your frontends.\n\n```javascript\nnew vercel.Project(\"MyFrontend\", {\n  name: \"my-nextjs-app\"\n});\n```\n\n## Link resources\nOnce you’ve added a couple of features, SST can help you link them together. This is great because you **won’t need to hardcode** anything in your app.\n\nLet’s say you are deploying an Express app in a container and you want to upload files to an S3 bucket. You can `link` the bucket to your container.\n\n```javascript\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [bucket],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }]\n  }\n});\n```\n\nYou can then use SST’s [SDK](https://sst.dev/docs/reference/sdk/) to access the S3 bucket in your Express app.\n\n```javascript\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n## Project structure\nWe’ve looked at a couple of different types of files. Let’s take a step back and see what an SST app looks like in practice.\n\n## Drop-in mode\nThe simplest way to run SST is to use it as a part of your app. This is called _drop-in mode_. For example, if you are building a Next.js app, you can add a `sst.config.ts` file to the root.\n\n```plaintext\nmy-nextjs-app\n├─ next.config.js\n├─ sst.config.ts\n├─ package.json\n├─ app\n├─ lib\n└─ public\n```\n\nView an [example Next.js](https://github.com/sst/sst/tree/dev/examples/aws-nextjs) app using SST in drop-in mode.\n\n## Monorepo\nAlternatively, you might use SST in a monorepo. This is useful because most projects have a frontend, a backend, and some functions.\n\nIn this case, the `sst.config.ts` is still in the root but you can split it up into parts in the `infra/` directory.\n\n```plaintext\nmy-sst-app\n├─ sst.config.ts\n├─ package.json\n├─ packages\n│  ├─ functions\n│  ├─ frontend\n│  ├─ backend\n│  └─ core\n└─ infra\n```\n\n## CLI\nTo make this all work, SST comes with a [CLI](https://sst.dev/docs/reference/cli/). You can install it as a part of your Node project.\n\n```bash\nnpm install sst\n```\n\nOr if you are not using Node, you can install it globally.\n\n```bash\ncurl -fsSL https://sst.dev/install | bash\n```\n\nThe CLI currently supports macOS, Linux, and WSL. Learn more about the [CLI](https://sst.dev/docs/reference/cli/).\n\n## Dev\nThe CLI includes a `dev` command that starts a local development environment.\n\n```bash\nsst dev\n```\n\nThis brings up a _multiplexer_ that:\n\n1. Starts a watcher that deploys any infrastructure changes.\n2. Runs your functions [_Live_](https://sst.dev/docs/live/), letting you make and test changes without having to redeploy them.\n3. Creates a [_tunnel_](https://sst.dev/docs/reference/cli#tunnel) to connect your local machine to any resources in a VPC.\n4. Starts your frontend and container services in dev mode and links it to your infrastructure.\n\nThe `sst dev` CLI makes it so that you won’t have to start your frontend or container applications separately. Learn more about [`sst dev`](https://sst.dev/docs/reference/cli/#dev).\n\n## Deploy\nWhen you’re ready to deploy your app, you can use the `deploy` command.\n\n```bash\nsst deploy --stage production\n```\n\n## Stages\nThe stage name is used to namespace different environments of your app. So you can create one for dev.\n\n```bash\nsst deploy --stage dev\n```\n\nOr for a pull request.\n\n```bash\nsst deploy --stage pr-123\n```\n\nLearn more about [stages](https://sst.dev/docs/reference/cli#stage).\n\n## Console\nOnce you are ready to go to production, you can use the [SST Console](https://sst.dev/docs/console/) to **auto-deploy** your app, create **preview environments**, and **monitor** for any issues.\n\n## FAQ\nHere are some questions that we frequently get.\n\n## Is SST open-source if it’s based on Pulumi and Terraform?\nSST uses Pulumi behind the scenes for the providers and the deployment engine. And Terraform’s providers are _bridged_ through Pulumi.\nSST only relies on the open-source parts of Pulumi and Terraform. It does not require a Pulumi account and all the data about your app and its resources stay on your side.\n\n## How does SST compare to CDK for Terraform or Pulumi?\nBoth CDKTF and Pulumi allow you to define your infrastructure using a programming language like TypeScript. SST is also built on top of Pulumi. So you might wonder how SST compares to them and why you would use SST instead of them.\nIn a nutshell, SST is for developers, while CDKTF and Pulumi are primarily for DevOps engineers. There are 3 big things SST does for developers:\n\n1. Higher-level components\n\nSST’s built-in components like [`Nextjs`](https://sst.dev/docs/component/aws/nextjs/) or [`Email`](https://sst.dev/docs/component/aws/email/) make it easy for developers to add features to their app. You can use these without having to figure out how to work with the underlying Terraform resources.\n\n2. Linking resources\n\nSST makes it easy to link your infrastructure to your application and access them at runtime in your code.\n\n3. Dev mode\n\nFinally, SST features a unified local developer environment that deploys your app through a watcher, runs your functions [_Live_](https://sst.dev/docs/live/), creates a [_tunnel_](https://sst.dev/docs/reference/cli#tunnel) to your VPC, starts your frontend and backend, all together.\n\n## How does SST make money?\nWhile SST is open-source and free to use, we also have the [Console](https://sst.dev/docs/console/) that can auto-deploy your apps and monitor for any issues. It’s optional and includes a free tier but it’s a SaaS service. It’s used by a large number of teams in our community, including ours.\n\n## Next steps\n1. [Learn about the SST workflow](https://sst.dev/docs/workflow/)\n2. Create your first SST app\n   - [Build a Next.js app in AWS](https://sst.dev/docs/start/aws/nextjs/)\n   - [Deploy Bun in a container to AWS](https://sst.dev/docs/start/aws/bun/)\n   - [Build a Hono API with Cloudflare Workers](https://sst.dev/docs/start/cloudflare/hono/)\n", "metadata": {"source_url": "https://sst.dev/docs", "title": "What is SST", "description": "Build full-stack apps on your own infrastructure.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-27 19:58:59", "type": "overview", "page_metadata": {"og:description": "Build full-stack apps on your own infrastructure.", "viewport": "width=device-width, initial-scale=1", "ogTitle": "What is SST", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/V2hhdCUyMGlzJTIwU1NU.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/V2hhdCUyMGlzJTIwU1NU.png", "ogUrl": "https://sst.dev/docs/", "og:locale": "en", "description": "Build full-stack apps on your own infrastructure.", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/", "og:type": "article", "og:site_name": "SST", "twitter:card": "summary_large_image", "title": "What is SST | SST", "ogDescription": "Build full-stack apps on your own infrastructure.", "favicon": "https://sst.dev/favicon.ico", "og:title": "What is SST", "og:image": "https://social-cards.sst.dev/v3-docs/V2hhdCUyMGlzJTIwU1NU.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "scrapeId": "927574a4-f772-436c-b908-2feadc8e0fe4", "sourceURL": "https://sst.dev/docs", "url": "https://sst.dev/docs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"What is SST\"?\n\nAssistant: Here are some code examples:\n\n### Next.js Component\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Remix Component\n```yaml\nnew sst.aws.Remix(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Astro Component\n```yaml\nnew sst.aws.Astro(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### SvelteKit Component\n```yaml\nnew sst.aws.SvelteKit(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### SolidStart Component\n```yaml\nnew sst.aws.SolidStart(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Cluster and Service\n```yaml\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }]\n  }\n});\n```\n\n### Lambda Function\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\"\n});\n```\n\n### Postgres Database\n```yaml\nnew sst.aws.Postgres(\"MyDatabase\", { vpc });\n```\n\n### S3 Bucket\n```yaml\nnew sst.aws.Bucket(\"MyBucket\");\n```\n\n### Cron Job\n```yaml\nnew sst.aws.Cron(\"MyCronJob\", {\n  job: \"src/cron.handler\",\n  schedule: \"rate(1 minute)\"\n});\n```\n\n### Stripe Product\n```yaml\nnew stripe.Product(\"MyStripeProduct\", {\n  name: \"SST Paid Plan\",\n  description: \"This is how SST makes money\",\n});\n```\n\n### Lambda Function with Timeout and Memory\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  timeout: \"3 minutes\",\n  memory: \"1024 MB\"\n});\n```\n\n### Lambda Function with IAM Role Transformation\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  transform: {\n    role: (args) => ({\n      name: `${args.name}-MyRole`\n    })\n  }\n});\n```\n\n### Vercel Project\n```yaml\nnew vercel.Project(\"MyFrontend\", {\n  name: \"my-nextjs-app\"\n});\n```\n\n### Linking Resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [bucket],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }]\n  }\n});\n```\n\n### Accessing Resource in Express App\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs", "title": "What is SST", "description": "Build full-stack apps on your own infrastructure.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-27 19:58:59", "type": "code_examples", "page_metadata": {"og:description": "Build full-stack apps on your own infrastructure.", "viewport": "width=device-width, initial-scale=1", "ogTitle": "What is SST", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/V2hhdCUyMGlzJTIwU1NU.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/V2hhdCUyMGlzJTIwU1NU.png", "ogUrl": "https://sst.dev/docs/", "og:locale": "en", "description": "Build full-stack apps on your own infrastructure.", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/", "og:type": "article", "og:site_name": "SST", "twitter:card": "summary_large_image", "title": "What is SST | SST", "ogDescription": "Build full-stack apps on your own infrastructure.", "favicon": "https://sst.dev/favicon.ico", "og:title": "What is SST", "og:image": "https://social-cards.sst.dev/v3-docs/V2hhdCUyMGlzJTIwU1NU.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "scrapeId": "927574a4-f772-436c-b908-2feadc8e0fe4", "sourceURL": "https://sst.dev/docs", "url": "https://sst.dev/docs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"What is SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• SST’s components come with sensible defaults designed to get you started, but they can also be configured completely.\n• Use the `transform` prop to customize how components create their low-level resources.\n• Link your resources together to avoid hardcoding in your application.\n", "metadata": {"source_url": "https://sst.dev/docs", "title": "What is SST", "description": "Build full-stack apps on your own infrastructure.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-27 19:58:59", "type": "best_practices", "page_metadata": {"og:description": "Build full-stack apps on your own infrastructure.", "viewport": "width=device-width, initial-scale=1", "ogTitle": "What is SST", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/V2hhdCUyMGlzJTIwU1NU.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/V2hhdCUyMGlzJTIwU1NU.png", "ogUrl": "https://sst.dev/docs/", "og:locale": "en", "description": "Build full-stack apps on your own infrastructure.", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/", "og:type": "article", "og:site_name": "SST", "twitter:card": "summary_large_image", "title": "What is SST | SST", "ogDescription": "Build full-stack apps on your own infrastructure.", "favicon": "https://sst.dev/favicon.ico", "og:title": "What is SST", "og:image": "https://social-cards.sst.dev/v3-docs/V2hhdCUyMGlzJTIwU1NU.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "scrapeId": "927574a4-f772-436c-b908-2feadc8e0fe4", "sourceURL": "https://sst.dev/docs", "url": "https://sst.dev/docs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"State\"?\n\nAssistant: Tracking the infrastructure created by your app.\n\nHere's a detailed explanation:\n\n\n## Overview\nWhen you deploy your app, SST creates a state file locally to keep track of the state of the infrastructure in your app.\n\nSo when you make a change, it’ll allow SST to do a diff with the state and only deploy what’s changed.\n\nThe state of your app includes:\n\n1. A state file for your resources. This is a JSON file.\n2. A passphrase that is used to encrypt the secrets in your state.\n\nAside from these, SST also creates some other resources when your app is first deployed.\n\n## Backup\nThe state is generated locally but is backed up to your provider using:\n\n1. A **bucket** to store the state, typically named `sst-state-<hash>`. This is created in the region of your `home`.\n2. An **SSM parameter** to store the passphrase used to encrypt your secrets, under `/sst/passphrase/<app>/<stage>`. Also created in the region of your `home`.\n\nThe passphrase is used to encrypt any secrets and sensitive information. Without it SST won’t be able to read the state file and deploy your app.\n\n## Home\nYour `sst.config.ts` specifies which provider to use for storing your state. We call this the `home` of your app.\n\n```\n{\n  home: \"aws\"\n}\n```\n\nYou can specify which provider you’d like to use for this. Currently `aws` and `cloudflare` are supported.\n\nWhen you specify your home provider, SST assumes you’d like to use that provider in your app as well and adds it to your providers internally. So the above is equivalent to doing this.\n\n```\n{\n  home: \"aws\",\n  providers: {\n    aws: true\n  }\n}\n```\n\nThis also means that if you change the region of the `aws` provider above, you are changing the region for your `home` as well.\n\n## Bootstrap\nAs SST starts deploying the resources in your app, it creates some additional _bootstrap_ resources. If your app has a Lambda function or a Docker container, then SST will create the following in the same region as the given resource:\n\n1. An assets bucket to store the function packages, typically named `sst-asset-<hash>`.\n2. An ECR repository to store container images, called `sst-asset`.\n3. An SSM parameter to store the assets bucket name and the ECR repository, stored under `/sst/bootstrap`.\n4. An AppSync Events API endpoint to power [Live](https://sst.dev/docs/live).\n\nThe SSM parameter is used to look up the location of these resources.\n\nWhen you remove an SST app, it does not remove the _state_ or _bootstrap_ resources. This is because it does not know if there are other apps that might be using this. So if you want to completely remove any SST created resources, you’ll need to manually remove these in the regions you’ve deployed to.\n\n## Reset\nIf you accidentally remove the bootstrap resources the SST CLI will not be able to start up.\n\nTo fix this you’ll need to reset your bootstrap resources.\n\n1. Remove the resources that are listed in the parameter. For example, the `asset` or `state` bucket. Or the ECR repository.\n2. Remove the SSM parameter.\n\nNow when you run the SST CLI, it’ll bootstrap your account again.\n\n## How it works\nThe state file is a JSON representation of all the low level resources created by your app. It is a cached version of the state of resources in the cloud provider.\n\nSo when you do a deploy the following happens:\n\n1. The components in the `sst.config.ts` get converted into low level resource definitions. These get compared to the state file.\n2. The differences between the two are turned into API calls that are made to your cloud provider.\n   - If there’s a new resource, it gets created.\n   - If a resource has been removed, it gets removed.\n   - If there’s a change in config of the resource, it gets applied.\n3. The state file is updated to reflect the new state of these resources. Now the `sst.config.ts`, the state file, and the resources in the cloud provider are all in sync.\n\n## Out of sync\nThis process works fine until you manually go change these resources through the cloud provider’s console. This will cause the **state and the resources to not be in sync** anymore. This can cause an issue in some cases.\n\nLet’s look at a couple of scenarios.\n\n## Change the resource\nSay we’ve deployed a `Function` with it set to `{ timeout: 10 seconds\" }`. At this point, the config, state, and resource are in sync.\n\n- We now go change the timeout to 20 seconds in the AWS Console.\n  - The config and state are out of sync with the resource since they are still set to 10 seconds.\n- Now if we deploy our app, the config will be compared to the state.\n  - It’ll find no differences and so it won’t update the resource.\n\nThe config and state will stay out of sync with the resource.\n\n## Change the config\n- If we change our config to `{ timeout: 30 seconds\" }` and do a deploy.\n- The config and state will have some differences.\n- SST will make a call to AWS to set the timeout of the resource to 30 seconds.\n  - Once updated, it’ll update the state file to match the current state of the resource.\n\nThe config, state, and resource are back being in sync.\n\n## Remove the resource\n- Next we go to the AWS Console and remove the function.\n  - The config and state still have the function with the timeout set to 30 seconds.\n- If we change our config to `{ timeout: 60 seconds }` and do a deploy.\n- The config and state will be different.\n- SST will make a call to update the timeout of the resource to 60 seconds.\n  - But this call to AWS will fail because the function doesn’t exist.\n\nYour deploys will fail moving forward because your state shows that a resource exists but it doesn’t anymore. To fix this, you’ll need to _refresh_ your state file.\n\n## Refresh\nTo fix scenarios where the resources in the cloud are out of sync with the state of your app, you’ll need to run.\n\n```\nsst refresh\n```\n\nThis command does a couple of simple things:\n\n1. It goes through every single resource in your state.\n2. Makes a call to the cloud provider to check the resource.\n   - If the configs are different, it’ll **update the state** to reflect the change.\n   - If the resource doesn’t exist anymore, it’ll **remove it from the state**.\n\nNow the state and the resources are in sync. So if we take the scenario from above where we removed the function from the AWS Console but not from our config or state. To fix it, we’ll need to:\n\n- Run `sst refresh`\n  - This will remove the function from the state as well.\n- Now if we change our config to `{ timeout: 60 seconds }` and do a deploy.\n- The config and state will be compared and it’ll find that a function with that config doesn’t exist.\n- So SST will make a call to AWS to create a new function with the given config.\n\nIn general we do not recommend manually changing resources in a cloud provider since it puts your state out of sync. But if you find yourself in a situation where this happens, you can use the `sst refresh` command to put them back in sync.\n", "metadata": {"source_url": "https://sst.dev/docs/state", "title": "State", "description": "Tracking the infrastructure created by your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 19:59:53", "type": "overview", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "State", "twitter:card": "summary_large_image", "title": "State | SST", "ogTitle": "State", "og:image": "https://social-cards.sst.dev/v3-docs/U3RhdGU%3D.png", "ogUrl": "https://sst.dev/docs/state/", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3RhdGU%3D.png", "og:site_name": "SST", "ogLocale": "en", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/U3RhdGU%3D.png", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/state/", "og:description": "Tracking the infrastructure created by your app.", "description": "Tracking the infrastructure created by your app.", "og:locale": "en", "language": "en", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Tracking the infrastructure created by your app.", "scrapeId": "9fcaaee2-d756-4d08-8315-226c1031db1b", "sourceURL": "https://sst.dev/docs/state", "url": "https://sst.dev/docs/state", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"State\"?\n\nAssistant: Here are some code examples:\n\n### Home Configuration Example\n```yaml\n{\n  home: \"aws\"\n}\n```\n\n### Home with Providers Example\n```yaml\n{\n  home: \"aws\",\n  providers: {\n    aws: true\n  }\n}\n```\n\n### Refresh Command\n```yaml\nsst refresh\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/state", "title": "State", "description": "Tracking the infrastructure created by your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 19:59:53", "type": "code_examples", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "State", "twitter:card": "summary_large_image", "title": "State | SST", "ogTitle": "State", "og:image": "https://social-cards.sst.dev/v3-docs/U3RhdGU%3D.png", "ogUrl": "https://sst.dev/docs/state/", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3RhdGU%3D.png", "og:site_name": "SST", "ogLocale": "en", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/U3RhdGU%3D.png", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/state/", "og:description": "Tracking the infrastructure created by your app.", "description": "Tracking the infrastructure created by your app.", "og:locale": "en", "language": "en", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Tracking the infrastructure created by your app.", "scrapeId": "9fcaaee2-d756-4d08-8315-226c1031db1b", "sourceURL": "https://sst.dev/docs/state", "url": "https://sst.dev/docs/state", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"State\"?\n\nAssistant: Here are the recommended best practices:\n\n• Avoid manually changing resources in a cloud provider as it puts your state out of sync.\n• Use the `sst refresh` command to synchronize the state with the actual resources.\n", "metadata": {"source_url": "https://sst.dev/docs/state", "title": "State", "description": "Tracking the infrastructure created by your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 19:59:53", "type": "best_practices", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "State", "twitter:card": "summary_large_image", "title": "State | SST", "ogTitle": "State", "og:image": "https://social-cards.sst.dev/v3-docs/U3RhdGU%3D.png", "ogUrl": "https://sst.dev/docs/state/", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3RhdGU%3D.png", "og:site_name": "SST", "ogLocale": "en", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/U3RhdGU%3D.png", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/state/", "og:description": "Tracking the infrastructure created by your app.", "description": "Tracking the infrastructure created by your app.", "og:locale": "en", "language": "en", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Tracking the infrastructure created by your app.", "scrapeId": "9fcaaee2-d756-4d08-8315-226c1031db1b", "sourceURL": "https://sst.dev/docs/state", "url": "https://sst.dev/docs/state", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Providers\"?\n\nAssistant: Providers allow you to interact with cloud services.\n\nHere's a detailed explanation:\n\n\n## Install\nTo add a provider to your app run.\n\n```\n\nsst add <provider>\n```\n\nThis command adds the provider to your config, installs the packages, and adds the namespace of the provider to your globals.\n\nSST manages these packages internally and you do not need to import the package in your `sst.config.ts`.\n\nThe name of a provider comes from the **name of the package** in the [Directory](https://sst.dev/docs/all-providers#directory). For example, `sst add planetscale`, will add the following to your `sst.config.ts`.\n\n```\n{\n  providers: {\n    planetscale: \"0.0.7\"\n  }\n}\n```\n\nYou can add multiple providers to your app.\n\n```\n{\n  providers: {\n    aws: \"6.27.0\",\n    cloudflare: \"5.37.1\"\n  }\n}\n```\n\nRead more about the [`sst add`](https://sst.dev/docs/reference/cli/#add) command.\n\n## Configure\nYou can configure a provider in your `sst.config.ts`. For example, to change the region for AWS.\n\n```\n{\n  providers: {\n    aws: {\n      region: \"us-west-2\"\n    }\n  }\n}\n```\n\nYou can check out the available list of options that you can configure for a provider over on the provider’s docs. For example, here are the ones for [AWS](https://www.pulumi.com/registry/packages/aws/api-docs/provider/#inputs) and [Cloudflare](https://www.pulumi.com/registry/packages/cloudflare/api-docs/provider/#inputs).\n\n## Versions\nBy default, SST installs the latest version. If you want to use a specific version, you can change it in your config.\n\n```\n{\n  providers: {\n    aws: {\n      version: \"6.27.0\"\n    }\n  }\n}\n```\n\nIf you make any changes to the `providers` in your config, you’ll need to run `sst install`.\n\nThe version of the provider is always pinned to what’s in the `sst.config.ts` and does not auto-update. This is the case, even if there is no version set. This is to make sure that the providers don’t update in the middle of your dev workflow.\n\nSo if you want to update it, you’ll need to change it manually and run `sst install`.\n\n## Credentials\nMost providers will read your credentials from the environment. For example, for Cloudflare you might set your token like so.\n\n```\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\nHowever, some providers also allow you to pass in the credentials through the config.\n\n```\n{\n  providers: {\n    cloudflare: {\n      apiToken: \"aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\"\n    }\n  }\n}\n```\n\nRead more about [configuring providers](https://sst.dev/docs/reference/config/#providers).\n\n## Components\nThe provider packages come with components that you can use in your app.\n\nFor example, running `sst add aws` will allow you to use all the components under the `aws` namespace.\n\n```\nnew aws.s3.BucketV2(\"b\", {\n  bucket: \"mybucket\",\n  tags: {\n    Name: \"My bucket\"\n  }\n});\n```\n\nAside from components in the providers, SST also has a list of built-in components. These are typically higher level components that make it easy to add features to your app.\n\nYou can check these out in the sidebar. Read more about [Components](https://sst.dev/docs/components/).\n\n## Functions\nAside from the components, there are a collection of functions that are exposed by a provider. These are listed in the Pulumi docs as `getXXXXXX` on the sidebar.\n\nFor example, to get the AWS account being used in your app.\n\n```\nconst current = await aws.getCallerIdentity({});\n\nconst accountId = current.accountId;\n\nconst callerArn = current.arn;\n\nconst callerUser = current.userId;\n```\n\nOr to get the current region.\n\n```\nconst current = await aws.getRegion({});\n\nconst region = current.name;\n```\n\n\n\n## Output versions\nThe above are _async_ methods that return promises. That means that if you call these in your app, they’ll block the deployment of any resources that are defined after it.\n\nSo we instead recommend using the _Output_ version of these functions. For example, if we wanted to set the above as environment variables in a function, we would do something like this\n\n```\nnew sst.aws.Function(\"MyFunction, {\n  handler: \"src/lambda.handler\",\n  environment: {\n    ACCOUNT: aws.getCallerIdentityOutput({}).accountId,\n    REGION: aws.getRegionOutput().name\n  }\n}\n```\n\nThe `aws.getXXXXOutput` functions typically return an object of type _`Output<primitive>`_. Read more about [Outputs](https://sst.dev/docs/components/#outputs).\n\n## Instances\nYou can create multiple instances of a provider that’s in your config. By default SST creates one instance of each provider in your `sst.config.ts` with the defaults. By you can create multiple instances in your app.\n\n```\nconst useast1 = new aws.Provider(\"AnotherAWS\");\n```\n\nThis is useful for multi-region or multi-account deployments.\n\n## Multi-region\nYou might want to create multiple providers in cases where some resources in your app need to go to one region, while others need to go to a separate region.\n\nLet’s look at an example. Assume your app is normally deployed to `us-west-1`. But you need to create an ACM certificate that needs to be deployed to `us-east-1`.\n\n```\nconst useast1 = new aws.Provider(\"useast1\", { region: \"us-east-1\" });\n\nnew sst.aws.Function(\"MyFunction, \"src/lambda.handler\");\n\nnew aws.acm.Certificate(\"cert\", {\n  domainName: \"foo.com\",\n  validationMethod: \"EMAIL\",\n}, { provider: useast1 });\n```\n", "metadata": {"source_url": "https://sst.dev/docs/providers", "title": "Providers", "description": "Providers allow you to interact with cloud services.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 20:00:19", "type": "overview", "page_metadata": {"description": "Providers allow you to interact with cloud services.", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/providers/", "ogImage": "https://social-cards.sst.dev/v3-docs/UHJvdmlkZXJz.png", "title": "Providers | SST", "ogTitle": "Providers", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/UHJvdmlkZXJz.png", "og:site_name": "SST", "og:url": "https://sst.dev/docs/providers/", "og:description": "Providers allow you to interact with cloud services.", "favicon": "https://sst.dev/favicon.ico", "og:title": "Providers", "language": "en", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/UHJvdmlkZXJz.png", "og:type": "article", "ogDescription": "Providers allow you to interact with cloud services.", "og:locale": "en", "scrapeId": "5b355fda-ab6a-4e66-b9f0-afaff775dda9", "sourceURL": "https://sst.dev/docs/providers", "url": "https://sst.dev/docs/providers", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Providers\"?\n\nAssistant: Here are some code examples:\n\n### Install a provider\n```yaml\nsst add <provider>\n```\n\n### Add a provider to sst.config.ts\n```yaml\n{\n  providers: {\n    planetscale: \"0.0.7\"\n  }\n}\n```\n\n### Add multiple providers to sst.config.ts\n```yaml\n{\n  providers: {\n    aws: \"6.27.0\",\n    cloudflare: \"5.37.1\"\n  }\n}\n```\n\n### Configure AWS region in sst.config.ts\n```yaml\n{\n  providers: {\n    aws: {\n      region: \"us-west-2\"\n    }\n  }\n}\n```\n\n### Specify AWS version in sst.config.ts\n```yaml\n{\n  providers: {\n    aws: {\n      version: \"6.27.0\"\n    }\n  }\n}\n```\n\n### Set Cloudflare API token in environment\n```yaml\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\n### Pass Cloudflare API token through config\n```yaml\n{\n  providers: {\n    cloudflare: {\n      apiToken: \"aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\"\n    }\n  }\n}\n```\n\n### Create an S3 bucket using AWS component\n```yaml\nnew aws.s3.BucketV2(\"b\", {\n  bucket: \"mybucket\",\n  tags: {\n    Name: \"My bucket\"\n  }\n});\n```\n\n### Get AWS account information\n```yaml\nconst current = await aws.getCallerIdentity({});\nconst accountId = current.accountId;\nconst callerArn = current.arn;\nconst callerUser = current.userId;\n```\n\n### Get current AWS region\n```yaml\nconst current = await aws.getRegion({});\nconst region = current.name;\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/providers", "title": "Providers", "description": "Providers allow you to interact with cloud services.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 20:00:19", "type": "code_examples", "page_metadata": {"description": "Providers allow you to interact with cloud services.", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/providers/", "ogImage": "https://social-cards.sst.dev/v3-docs/UHJvdmlkZXJz.png", "title": "Providers | SST", "ogTitle": "Providers", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/UHJvdmlkZXJz.png", "og:site_name": "SST", "og:url": "https://sst.dev/docs/providers/", "og:description": "Providers allow you to interact with cloud services.", "favicon": "https://sst.dev/favicon.ico", "og:title": "Providers", "language": "en", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/UHJvdmlkZXJz.png", "og:type": "article", "ogDescription": "Providers allow you to interact with cloud services.", "og:locale": "en", "scrapeId": "5b355fda-ab6a-4e66-b9f0-afaff775dda9", "sourceURL": "https://sst.dev/docs/providers", "url": "https://sst.dev/docs/providers", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Providers\"?\n\nAssistant: Here are the recommended best practices:\n\n• SST manages provider packages internally, so you do not need to import them in your sst.config.ts.\n• The version of the provider is always pinned to what’s in the sst.config.ts and does not auto-update.\n• If you make changes to the providers in your config, run sst install to apply them.\n", "metadata": {"source_url": "https://sst.dev/docs/providers", "title": "Providers", "description": "Providers allow you to interact with cloud services.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 20:00:19", "type": "best_practices", "page_metadata": {"description": "Providers allow you to interact with cloud services.", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/providers/", "ogImage": "https://social-cards.sst.dev/v3-docs/UHJvdmlkZXJz.png", "title": "Providers | SST", "ogTitle": "Providers", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/UHJvdmlkZXJz.png", "og:site_name": "SST", "og:url": "https://sst.dev/docs/providers/", "og:description": "Providers allow you to interact with cloud services.", "favicon": "https://sst.dev/favicon.ico", "og:title": "Providers", "language": "en", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/UHJvdmlkZXJz.png", "og:type": "article", "ogDescription": "Providers allow you to interact with cloud services.", "og:locale": "en", "scrapeId": "5b355fda-ab6a-4e66-b9f0-afaff775dda9", "sourceURL": "https://sst.dev/docs/providers", "url": "https://sst.dev/docs/providers", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Workflow\"?\n\nAssistant: The basic workflow of building apps with SST.\n\nHere's a detailed explanation:\n\n\n## Setup\nBefore you start working on your app, there are a couple of things we recommend setting up.\n\n## Editor\nSST apps are configured through a file called `sst.config.ts`. It’s a TypeScript file and it can work with your editor to type check and autocomplete your code. It can also show you inline help.\n\n- [Type check](https://sst.dev/docs/workflow#tab-panel-99)\n- [Autocomplete](https://sst.dev/docs/workflow#tab-panel-100)\n- [Inline help](https://sst.dev/docs/workflow#tab-panel-101)\n\nMost modern editors; VS Code and Neovim included, should do the above automatically. But you should start by making sure that your editor has been set up.\n\n## Credentials\nSST apps are deployed to your infrastructure. So whether you are deploying to AWS, or Cloudflare, or any other cloud provider, make sure you have their credentials configured locally.\n\nLearn more about how to [configure your AWS credentials](https://sst.dev/docs/iam-credentials/).\n\n## Console\nSST also comes with a [Console](https://sst.dev/docs/console/). It shows you all your apps, the resources in them, lets you configure _git push to deploy_, and also send you alerts for when there are any issues.\n\nWhile it is optional, we recommend creating a free account and linking it to your AWS account. Learn more about the [SST Console](https://sst.dev/docs/console/).\n\n## sst.config.ts\nNow that you are ready to work on your app and your `sst.config.ts`, let’s take a look at what it means to _configure everything in code_.\n\n## IaC\nInfrastructure as Code or _IaC_ is a process of automating the management of infrastructure through code. Rather than doing it manually through a console or user interface.\n\nSay your app has a Function and an S3 bucket, you would define that in your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"index.handler\"\n});\n```\n\nYou won’t need to go to the Lambda and S3 parts of the AWS Console. SST will do the work for you.\n\n## Resources\nThe reason this works is because when SST deploys the above app, it’ll convert it into a set of commands. These then call AWS with your credentials to create the underlying resources. So the above components get transformed into a list of low level resources in AWS.\n\nIf you log in to your AWS Console you can see what gets created internally. While these might look a little intimidating, they are all managed by SST and you are not directly responsible for them.\n\n## Exceptions\nThere are some exceptions to this. You might have resources that are not defined in your SST config. These could include the following resources:\n\n1. **Previously created**\n\nYou might’ve previously created some resources by hand that you would like to use in your new SST app. You can import these resources into your app. Moving forward, SST will manage them for you. Learn more about [importing resources](https://sst.dev/docs/import-resources/).\n\n2. **Externally managed**\n\nYou might have resources that are managed by a different team. In this case, you don’t want SST to manage them. You simply want to reference them in your app. Learn more about [referencing resources](https://sst.dev/docs/reference-resources/).\n\n3. **Shared across stages**\n\nIf you are creating preview environments, you might not want to make copies of certain resources, like your database. You might want to share these across stages. Learn more about [sharing across stages](https://sst.dev/docs/share-across-stages/).\n\n## Linking\nLet’s say you wanted your function from the above example to upload a file to the S3 bucket, you’d need to hardcode the name of the bucket in your API.\n\nSST avoids this by allowing you to **link resources** together.\n\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"index.handler\",\n  link: [bucket]\n});\n```\n\nNow in your function you can access the bucket using SST’s [SDK](https://sst.dev/docs/reference/sdk/).\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\nThere’s a difference between the two snippets above. One is your **infrastructure code** and the other is your **runtime code**. One is run while creating your app, while the other runs when your users use your app.\n\n## State\nWhen you make a change to your `sst.config.ts`, like we did above. SST only deploys the changes.\n\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"index.handler\",\n  link: [bucket]\n});\n```\n\nIt does this by maintaining a _state_ of your app. The state is a tree of all the resources in your app and all their properties.\n\n## Out of sync\nWe mentioned above that you are not responsible for the low level resources that SST creates. But this isn’t just a point of convenience; it’s something you should not do.\n\n## App\nSo now that we know how IaC works, a lot of the workflow and concepts will begin to make sense. Starting with the key parts of an app.\n\n## Name\nEvery app has a name. The name is used as a namespace. It allows SST to deploy multiple apps to the same cloud provider account, while isolating the resources in an app.\n\n## Stage\nAn app can have multiple stages. A stage is like an _environment_, it’s a separate version of your app.\n\n## Personal stages\nBy default, if no stage is passed in, SST creates a stage using the username in your computer. This is called a **personal stage**.\n\n## Region\nMost resources that are created in AWS (and many other providers) belong to a specific region. So when you deploy your app, it’s deployed to a specific region.\n\n## Commands\nNow with the above background let’s look at the workflow of building an SST app.\n\n## Dev\nTo start with, you’ll run your app in dev.\n\n## Deploy\nOnce you are ready to go to production you can run.\n\n## Remove\nIf you want to remove your app and all the resources in it, you can run.\n\n## With a team\nThis workflow really shines when working with a team. Let’s look at what it looks like with a basic git workflow.\n\n## Autodeploy\nTo have a branch automatically deploy to a stage when commits are pushed to it, you need to configure GitHub Actions.\n\n## PR environments\nYou can also set it up to create preview environments.\n", "metadata": {"source_url": "https://sst.dev/docs/workflow", "title": "Workflow", "description": "The basic workflow of building apps with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 23, "timestamp": "2025-02-27 20:00:56", "type": "overview", "page_metadata": {"title": "Workflow | SST", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/V29ya2Zsb3c%3D.png", "description": "The basic workflow of building apps with SST.", "ogDescription": "The basic workflow of building apps with SST.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/V29ya2Zsb3c%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "og:url": "https://sst.dev/docs/workflow/", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/workflow/", "language": "en", "og:title": "Workflow", "og:description": "The basic workflow of building apps with SST.", "ogTitle": "Workflow", "ogSiteName": "SST", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/V29ya2Zsb3c%3D.png", "og:site_name": "SST", "scrapeId": "137076fb-2e83-4ee5-9e44-d956e3f2aed3", "sourceURL": "https://sst.dev/docs/workflow", "url": "https://sst.dev/docs/workflow", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Workflow\"?\n\nAssistant: Here are some code examples:\n\n### SST Function and Bucket Example\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"index.handler\"\n});\n```\n\n### Linking Function to Bucket\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"index.handler\",\n  link: [bucket]\n});\n```\n\n### Accessing Bucket in Runtime Code\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n### Setting Region in sst.config.ts\n```yaml\nexport default $config({\n  app(input) {\n    return {\n      name: \"my-sst-app\",\n      providers: {\n        aws: { region: \"us-west-2\" }\n      }\n    };\n  }\n});\n```\n\n### Initializing an SST App\n```yaml\nsst init\n```\n\n### Running App in Dev Mode\n```yaml\nsst dev\n```\n\n### Deploying to Production Stage\n```yaml\nsst deploy --stage production\n```\n\n### Removing an App\n```yaml\nsst remove --stage <name>\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/workflow", "title": "Workflow", "description": "The basic workflow of building apps with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 23, "timestamp": "2025-02-27 20:00:56", "type": "code_examples", "page_metadata": {"title": "Workflow | SST", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/V29ya2Zsb3c%3D.png", "description": "The basic workflow of building apps with SST.", "ogDescription": "The basic workflow of building apps with SST.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/V29ya2Zsb3c%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "og:url": "https://sst.dev/docs/workflow/", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/workflow/", "language": "en", "og:title": "Workflow", "og:description": "The basic workflow of building apps with SST.", "ogTitle": "Workflow", "ogSiteName": "SST", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/V29ya2Zsb3c%3D.png", "og:site_name": "SST", "scrapeId": "137076fb-2e83-4ee5-9e44-d956e3f2aed3", "sourceURL": "https://sst.dev/docs/workflow", "url": "https://sst.dev/docs/workflow", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Workflow\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure your editor is set up for TypeScript to take advantage of type checking and autocomplete.\n• Always configure your cloud provider credentials locally before deploying.\n• Consider using the SST Console for managing your apps and resources.\n• Avoid manually changing resources in the cloud provider console to prevent out-of-sync issues with SST.\n• Use personal stages for local development and separate stages for production to avoid conflicts.\n", "metadata": {"source_url": "https://sst.dev/docs/workflow", "title": "Workflow", "description": "The basic workflow of building apps with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 23, "timestamp": "2025-02-27 20:00:56", "type": "best_practices", "page_metadata": {"title": "Workflow | SST", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/V29ya2Zsb3c%3D.png", "description": "The basic workflow of building apps with SST.", "ogDescription": "The basic workflow of building apps with SST.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/V29ya2Zsb3c%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "og:url": "https://sst.dev/docs/workflow/", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/workflow/", "language": "en", "og:title": "Workflow", "og:description": "The basic workflow of building apps with SST.", "ogTitle": "Workflow", "ogSiteName": "SST", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/V29ya2Zsb3c%3D.png", "og:site_name": "SST", "scrapeId": "137076fb-2e83-4ee5-9e44-d956e3f2aed3", "sourceURL": "https://sst.dev/docs/workflow", "url": "https://sst.dev/docs/workflow", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Linking\"?\n\nAssistant: Link resources together and access them in a typesafe and secure way.\n\nHere's a detailed explanation:\n\n\n## Linking Resources\nResource Linking allows you to access your **infrastructure** in your **runtime code** in a typesafe and secure way.\n\n1. Create a resource that you want to link to. For example, a bucket.\n\n```javascript\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n2. Link it to your function or frontend, using the `link` prop.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n```javascript\nnew sst.aws.Remix(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n```javascript\nnew sst.aws.Astro(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [bucket]\n});\n```\n\n3. Use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resource in your runtime in a typesafe way.\n\n```javascript\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyBucket.name);\n```\n\n---\n\n## Working locally\nThe above applies to your app deployed through `sst deploy`.\n\nTo access linked resources locally you’ll need to be running `sst dev`. By default, the `sst dev` CLI runs a multiplexer that also starts your frontend for you. This loads all your linked resources in the environment. Read more about [`sst dev`](https://sst.dev/docs/reference/cli/#dev).\n\nHowever if you are not using the multiplexer.\n\n```bash\nsst dev --mode=basic\n```\n\nYou’ll need to wrap your frontend’s dev command with the `sst dev` command.\n\n```bash\nsst dev next dev\n```\n\n```bash\nsst dev remix dev\n```\n\n```bash\nsst dev astro dev\n```\n\n```bash\nsst dev\n```\n\n## How it works\nAt high level when you link a resource to a function or frontend, the following happens:\n\n1. The _links_ that the resource exposes are injected into the function package.\n2. The types to access these links are generated.\n3. The function is given permission to access the linked resource.\n\n## Injecting links\nResource links are injected into your function or frontend package when you run `sst dev` or `sst deploy`. But this is done in a slightly different way for both these cases.\n\n#### Functions\n\nThe functions in SST are tree shaken and bundled using [esbuild](https://esbuild.github.io/). While bundling, SST injects the resource links into the [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis). These are encrypted and added to the function bundle. And they are synchronously decrypted on load by the SST SDK.\n\n#### Frontends\n\nThe frontends are not bundled by SST. Instead, when they are built, SST injects the resource links into the `process.env` object using the prefix `SST_RESOURCE_`. This is why when you are running your frontend locally, it needs to be wrapped in the `sst dev` command.\n\n## Generating types\nWhen you run `sst dev` or `sst deploy`, it generates the types to access the linked resources. These are generated as:\n\n1. A `sst-env.d.ts` file in the same directory of the nearest `package.json` of the function or frontend that’s _receiving_ the links. This contains the types for the resources that are linked to it.\n2. A `.sst/types.generated.ts` file that can be referenced from a `sst-env.d.ts`. This is useful for monorepo packages that don’t have a function or frontend. For example, if you have a _core_ package that contains some shared code.\n\nYou can check the generated `sst-env.d.ts` types into source control. This will let your teammates see the types without having to run `sst dev` when they pull your changes.\n\n## Extending linking\nThe examples above are built into SST’s components. You might want to modify the permissions that are granted as a part of these links.\n\nOr, you might want to link other resources from the Pulumi/Terraform ecosystem. Or want to link a different set of outputs than what SST exposes.\n\nYou can do this using the [`sst.Linkable`](https://sst.dev/docs/component/linkable/) component.\n\n## Link any value\nThe `Linkable` component takes a list of properties that you want to link. These can be outputs from other resources or constants.\n\n```javascript\nconst myLinkable = new sst.Linkable(\"MyLinkable\", {\n  properties: { foo: \"bar\" }\n});\n```\n\nYou can optionally include permissions or bindings for the linked resource.\n\nNow you can now link this resource to your frontend or a function.\n\n```javascript\nnew sst.aws.Function(\"MyApi\", {\n  handler: \"src/lambda.handler\",\n  link: [myLinkable]\n});\n```\n\nThen use the [SDK](https://sst.dev/docs/reference/sdk/) to access that at runtime.\n\n```javascript\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyLinkable.foo);\n```\n\n## Link any resource\nYou can also wrap any resource class to make it linkable with the `Linkable.wrap` static method.\n\n```javascript\nLinkable.wrap(aws.dynamodb.Table, (table) => ({\n  properties: { tableName: table.name }\n}));\n```\n\nNow you create an instance of `aws.dynamodb.Table` and link it in your app like any other SST component.\n\n```javascript\nconst table = new aws.dynamodb.Table(\"MyTable\", {\n  attributes: [{ name: \"id\", type: \"S\" }],\n  hashKey: \"id\"\n});\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [table]\n});\n```\n\nAnd use the [SDK](https://sst.dev/docs/reference/sdk/) to access it at runtime.\n\n```javascript\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyTable.tableName);\n```\n\n## Modify built-in links\nYou can also modify the links SST creates. For example, you might want to change the permissions of a linkable resource.\n\n```javascript\n sst.Linkable.wrap(sst.aws.Bucket, (bucket) => ({\n   properties: { name: bucket.name },\n   include: [\n     sst.aws.permission({\n       actions: [\"s3:GetObject\"],\n       resources: [bucket.arn]\n     })\n   ]\n }));\n```\n", "metadata": {"source_url": "https://sst.dev/docs/linking", "title": "Linking", "description": "Link resources together and access them in a typesafe and secure way.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 20:04:49", "type": "overview", "page_metadata": {"description": "Link resources together and access them in a typesafe and secure way.", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/TGlua2luZw%3D%3D.png", "ogTitle": "Linking", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/linking/", "og:site_name": "SST", "ogLocale": "en", "og:title": "Linking", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:description": "Link resources together and access them in a typesafe and secure way.", "title": "Linking | SST", "ogDescription": "Link resources together and access them in a typesafe and secure way.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/TGlua2luZw%3D%3D.png", "ogUrl": "https://sst.dev/docs/linking/", "favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/TGlua2luZw%3D%3D.png", "scrapeId": "8f6266e3-b324-4d9f-ad2d-9fc24811be6a", "sourceURL": "https://sst.dev/docs/linking", "url": "https://sst.dev/docs/linking", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Linking\"?\n\nAssistant: Here are some code examples:\n\n### Create a Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n### Linking to Next.js\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### Linking to Remix\n```yaml\nnew sst.aws.Remix(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### Linking to Astro\n```yaml\nnew sst.aws.Astro(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### Linking to Function\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [bucket]\n});\n```\n\n### Accessing Linked Resource\n```yaml\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyBucket.name);\n```\n\n### Running SST Dev in Basic Mode\n```yaml\nsst dev --mode=basic\n```\n\n### Running Next.js Dev Command\n```yaml\nsst dev next dev\n```\n\n### Running Remix Dev Command\n```yaml\nsst dev remix dev\n```\n\n### Running Astro Dev Command\n```yaml\nsst dev astro dev\n```\n\n### Linkable Component Example\n```yaml\nconst myLinkable = new sst.Linkable(\"MyLinkable\", {\n  properties: { foo: \"bar\" }\n});\n```\n\n### Wrap a DynamoDB Table\n```yaml\nLinkable.wrap(aws.dynamodb.Table, (table) => ({\n  properties: { tableName: table.name }\n}));\n```\n\n### Modify Built-in Links Example\n```yaml\nsst.Linkable.wrap(sst.aws.Bucket, (bucket) => ({\n   properties: { name: bucket.name },\n   include: [\n     sst.aws.permission({\n       actions: [\"s3:GetObject\"],\n       resources: [bucket.arn]\n     })\n   ]\n}));\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/linking", "title": "Linking", "description": "Link resources together and access them in a typesafe and secure way.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 20:04:49", "type": "code_examples", "page_metadata": {"description": "Link resources together and access them in a typesafe and secure way.", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/TGlua2luZw%3D%3D.png", "ogTitle": "Linking", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/linking/", "og:site_name": "SST", "ogLocale": "en", "og:title": "Linking", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:description": "Link resources together and access them in a typesafe and secure way.", "title": "Linking | SST", "ogDescription": "Link resources together and access them in a typesafe and secure way.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/TGlua2luZw%3D%3D.png", "ogUrl": "https://sst.dev/docs/linking/", "favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/TGlua2luZw%3D%3D.png", "scrapeId": "8f6266e3-b324-4d9f-ad2d-9fc24811be6a", "sourceURL": "https://sst.dev/docs/linking", "url": "https://sst.dev/docs/linking", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Linking\"?\n\nAssistant: Here are the recommended best practices:\n\n• Check the generated `sst-env.d.ts` types into source control to let your teammates see the types without having to run `sst dev` when they pull your changes.\n• When running your frontend locally, wrap it in the `sst dev` command to access linked resources.\n", "metadata": {"source_url": "https://sst.dev/docs/linking", "title": "Linking", "description": "Link resources together and access them in a typesafe and secure way.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 20:04:49", "type": "best_practices", "page_metadata": {"description": "Link resources together and access them in a typesafe and secure way.", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/TGlua2luZw%3D%3D.png", "ogTitle": "Linking", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/linking/", "og:site_name": "SST", "ogLocale": "en", "og:title": "Linking", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:description": "Link resources together and access them in a typesafe and secure way.", "title": "Linking | SST", "ogDescription": "Link resources together and access them in a typesafe and secure way.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/TGlua2luZw%3D%3D.png", "ogUrl": "https://sst.dev/docs/linking/", "favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/TGlua2luZw%3D%3D.png", "scrapeId": "8f6266e3-b324-4d9f-ad2d-9fc24811be6a", "sourceURL": "https://sst.dev/docs/linking", "url": "https://sst.dev/docs/linking", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Enterprise\"?\n\nAssistant: Everything you need to use SST at your enterprise.\n\nHere's a detailed explanation:\n\n\n## Support\nWhile we support our community through GitHub and Discord, your team might need dedicated support. We’re happy to:\n\n- Set up a shared Slack or Discord channel with your team.\n- Fix any critical issues your team is running into.\n- Do a call with your team and answer any questions.\n- Prioritize any feature requests from your team.\n- Share details about the SST roadmap.\n- And provide support SLAs.\n\n[**Contact us**](mailto:hello@sst.dev) for further details about our enterprise plans.\n", "metadata": {"source_url": "https://sst.dev/docs/enterprise", "title": "Enterprise", "description": "Everything you need to use SST at your enterprise.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:04:55", "type": "overview", "page_metadata": {"og:url": "https://sst.dev/docs/enterprise/", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Everything you need to use SST at your enterprise.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogTitle": "Enterprise", "ogSiteName": "SST", "og:description": "Everything you need to use SST at your enterprise.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/RW50ZXJwcmlzZQ%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/RW50ZXJwcmlzZQ%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/RW50ZXJwcmlzZQ%3D%3D.png", "ogUrl": "https://sst.dev/docs/enterprise/", "description": "Everything you need to use SST at your enterprise.", "og:title": "Enterprise", "og:type": "article", "title": "Enterprise | SST", "language": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "scrapeId": "9ea62818-7fd0-4358-8511-cc8be02602d4", "sourceURL": "https://sst.dev/docs/enterprise", "url": "https://sst.dev/docs/enterprise", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Enterprise\"?\n\nAssistant: Here are the recommended best practices:\n\n• SST runs completely on your infrastructure.\n• Designed to work with enterprise requirements by default.\n• Ability to transform any component for custom needs.\n• Option to use Pulumi or Terraform within SST.\n", "metadata": {"source_url": "https://sst.dev/docs/enterprise", "title": "Enterprise", "description": "Everything you need to use SST at your enterprise.", "has_code_examples": false, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:04:55", "type": "best_practices", "page_metadata": {"og:url": "https://sst.dev/docs/enterprise/", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Everything you need to use SST at your enterprise.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogTitle": "Enterprise", "ogSiteName": "SST", "og:description": "Everything you need to use SST at your enterprise.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/RW50ZXJwcmlzZQ%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/RW50ZXJwcmlzZQ%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/RW50ZXJwcmlzZQ%3D%3D.png", "ogUrl": "https://sst.dev/docs/enterprise/", "description": "Everything you need to use SST at your enterprise.", "og:title": "Enterprise", "og:type": "article", "title": "Enterprise | SST", "language": "en", "twitter:card": "summary_large_image", "ogLocale": "en", "scrapeId": "9ea62818-7fd0-4358-8511-cc8be02602d4", "sourceURL": "https://sst.dev/docs/enterprise", "url": "https://sst.dev/docs/enterprise", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Live\"?\n\nAssistant: Make changes to your Lambda functions in milliseconds.\n\nHere's a detailed explanation:\n\n\n## Advantages\nThis setup of running your functions locally and proxying the results back allows you to do a couple of things:\n\n- Your changes are **reloaded in under 10ms**.\n- You can set **breakpoints to debug** your function in your favorite IDE.\n- Functions can be invoked remotely. For example, say `https://my-api.com/hello` is your API endpoint. Hitting that will run the local version of that function.\n\n  - This applies to more than just APIs. Any cron job or async event that gets invoked remotely will also run your local function.\n  - It allows you to very easily debug and **test webhooks**, since you can just give the webhook your API endpoint.\n  - Supports all function triggers, there’s no need to mock an event.\n- Uses the **right IAM permissions**, so if a Lambda fails on AWS due to the lack of IAM permissions, it would fail locally as well.\n\n## How it works\nLive uses [AWS AppSync Events](https://docs.aws.amazon.com/appsync/latest/eventapi/event-api-welcome.html) to communicate between your local machine and the remote Lambda function.\n\nWhen you run `sst dev`, it [bootstraps](https://sst.dev/docs/state#bootstrap) a new AppSync Events API for the region you are using.\n\nThis is roughly what the flow looks like:\n\n1. When you run `sst dev`, it deploys your app and replaces the Lambda functions with a _stub_ version.\n2. It also starts up a local WebSocket client and connects to the AppSync API endpoint.\n3. When a Lambda function in your app is invoked, it publishes an event, where the payload is the Lambda function request.\n4. Your local WebSocket client receives this event. It publishes an event acknowledging that it received the request.\n5. Next, it runs the local version of the function and publishes an event with the function response as the payload. The local version is run as a Node.js Worker.\n6. Finally, the stub Lambda function receives the event and responds with the payload.\n\n## Quirks\nThere are a couple of quirks with this setup that are worth noting.\n\n1. **Runtime change**\n\nThe stub function that’s deployed uses a **different runtime** than your Lambda function. You might run into this when you change the runtime in your config but the runtime of the Lambda function in the AWS Console doesn’t change.\n\nWe use a different runtime because we want the function to be as fast as possible at proxying requests.\n\n2. **Live mode persists**\n\nIf you kill the `sst dev` CLI, your functions are not run locally anymore but the stub function in AWS are still there. This means that it’ll attempt to proxy requests to your machine and timeout.\n\nYou can fix this by running `sst deploy` and it’ll deploy the real version of your app. But the next time you run `sst dev` it’ll need to deploy the stub back. This’ll take a couple of minutes. So we recommend only using your personal stages for `sst dev`. And avoid flipping back and forth between `dev` and `deploy`.\n\n## Live mode\nWhen a function is running live it sets the `SST_DEV` environment variable to `true`. So in your Node.js functions you can access it using `process.env.SST_DEV`.\n\n## Connect to a local DB\nFor example, when running locally you might want to connect to a local database. You can do that with the `SST_DEV` environment variable.\n\n## Cost\nAWS AppSync Events that powers Live is **completely serverless**. So you don’t get charged when it’s not in use.\n\nIt’s also pretty cheap. It’s roughly $1.00 per million messages and $0.08 per million connection minutes. You can [check out the details here](https://aws.amazon.com/appsync/pricing/#AppSync_Events_).\n\nThis approach has been economical even for large teams with dozens of developers.\n\n## Privacy\nAll the data stays between your local machine and your AWS account. There are **no 3rd party services** that are used.\n\nLive also supports connecting to AWS resources inside a VPC.\n\n## Using a VPC\nBy default your local functions cannot connect to resources in a VPC. You can fix this by either setting up a VPN connection or creating a tunnel.\n\n## Creating a tunnel\nTo create a tunnel, you’ll need to:\n\n1. Enable the `bastion` host in your VPC.\n\n\n```javascript\nnew sst.aws.Vpc(\"MyVpc\", { bastion: true });\n```\n\n2. Install the tunnel.\n\n\n```bash\nsudo sst tunnel install\n```\n\nThis needs _sudo_ to create the network interface on your machine. You only need to do this once.\n\n3. Run `sst dev`.\n\n\n```bash\nsst dev\n```\n\nThis starts the tunnel automatically; notice the **Tunnel** tab on the left. Now your local environment can connect to resources in your VPC.\n\n## Setting up a VPN connection\nTo set up a VPN connection, you’ll need to:\n\n1. Setup a VPN connection from your local machine to your VPC network. You can use the AWS Client VPN service to set it up. [Follow the Mutual authentication section in this doc](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html#mutual) to setup the certificates and import them into your Amazon Certificate Manager.\n2. Then [create a Client VPC Endpoint](https://aws.amazon.com/blogs/networking-and-content-delivery/introducing-aws-client-vpn-to-securely-access-aws-and-on-premises-resources/), and associate it with your VPC.\n3. And, finally install [Tunnelblick](https://tunnelblick.net/) locally to establish the VPN connection.\n\nNote that, the AWS Client VPC service is billed on an hourly basis but it’s fairly inexpensive. [Read more on the pricing here](https://aws.amazon.com/vpn/pricing/).\n\n## Breakpoints\nSince Live runs your functions locally, you can set breakpoints and debug your functions in your favorite IDE.\n\n![VS Code Enable Auto Attach](https://sst.dev/_astro/vs-code-enable-auto-attach.DU9F_N05_1Hj3gq.webp)\n\nFor VS Code, you’ll need to enable Auto Attach from the Command Palette. Hit `Ctrl+Shift+P` or `Cmd+Shift+P`, type in **Debug: Toggle Auto Attach** and select **Always**.\n\nNow open a new terminal in VS Code, run `sst dev`, set a breakpoint in a function, and invoke the function.\n\n## Changelog\nLive is a feature that was created by SST when it first launched back in 2021. It’s gone through a few different iterations since then.\n\n| SST Version | Change |\n| --- | --- |\n| **v0.5.0** | Then called _Live Lambda_, used a API Gateway WebSocket API and a DynamoDB table. |\n| **v2.0.0** | Switched to using AWS IoT, this was roughly 2-3x faster. |\n| **v3.3.1** | Switched to using AWS AppSync Events, which is even faster and handles larger payloads better.\n", "metadata": {"source_url": "https://sst.dev/docs/live", "title": "Live", "description": "Make changes to your Lambda functions in milliseconds.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 20:05:24", "type": "overview", "page_metadata": {"description": "Make changes to your Lambda functions in milliseconds.", "twitter:image": "https://social-cards.sst.dev/v3-docs/TGl2ZQ%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/live/", "ogLocale": "en", "language": "en", "title": "Live | SST", "ogTitle": "Live", "og:description": "Make changes to your Lambda functions in milliseconds.", "og:url": "https://sst.dev/docs/live/", "ogDescription": "Make changes to your Lambda functions in milliseconds.", "og:image": "https://social-cards.sst.dev/v3-docs/TGl2ZQ%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/TGl2ZQ%3D%3D.png", "og:type": "article", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "Live", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "scrapeId": "8329ff2d-cfca-4249-92e3-1be3bcfdac5a", "sourceURL": "https://sst.dev/docs/live", "url": "https://sst.dev/docs/live", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Live\"?\n\nAssistant: Here are some code examples:\n\n### Live mode example\n```yaml\nexport async function main(event) {\n\n  const body = process.env.SST_DEV ? \"Hello, Live!\" : \"Hello, World!\";\n\n  return {\n\n    body,\n\n    statusCode: 200,\n\n  };\n\n}\n```\n\n### Connect to local DB example\n```yaml\nconst dbHost = process.env.SST_DEV\n\n  ? \"localhost\"\n\n  : \"amazon-string.rds.amazonaws.com\";\n```\n\n### Creating a tunnel - VPC\n```yaml\nnew sst.aws.Vpc(\"MyVpc\", { bastion: true });\n```\n\n### Install tunnel command\n```yaml\nsudo sst tunnel install\n```\n\n### Run dev command\n```yaml\nsst dev\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/live", "title": "Live", "description": "Make changes to your Lambda functions in milliseconds.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 20:05:24", "type": "code_examples", "page_metadata": {"description": "Make changes to your Lambda functions in milliseconds.", "twitter:image": "https://social-cards.sst.dev/v3-docs/TGl2ZQ%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/live/", "ogLocale": "en", "language": "en", "title": "Live | SST", "ogTitle": "Live", "og:description": "Make changes to your Lambda functions in milliseconds.", "og:url": "https://sst.dev/docs/live/", "ogDescription": "Make changes to your Lambda functions in milliseconds.", "og:image": "https://social-cards.sst.dev/v3-docs/TGl2ZQ%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/TGl2ZQ%3D%3D.png", "og:type": "article", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "Live", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "scrapeId": "8329ff2d-cfca-4249-92e3-1be3bcfdac5a", "sourceURL": "https://sst.dev/docs/live", "url": "https://sst.dev/docs/live", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Live\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use personal stages for `sst dev` to avoid issues with stub functions in AWS.\n• Enable Auto Attach in VS Code for debugging.\n• Be aware of the different runtime used for the stub function.\n", "metadata": {"source_url": "https://sst.dev/docs/live", "title": "Live", "description": "Make changes to your Lambda functions in milliseconds.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 20:05:24", "type": "best_practices", "page_metadata": {"description": "Make changes to your Lambda functions in milliseconds.", "twitter:image": "https://social-cards.sst.dev/v3-docs/TGl2ZQ%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/live/", "ogLocale": "en", "language": "en", "title": "Live | SST", "ogTitle": "Live", "og:description": "Make changes to your Lambda functions in milliseconds.", "og:url": "https://sst.dev/docs/live/", "ogDescription": "Make changes to your Lambda functions in milliseconds.", "og:image": "https://social-cards.sst.dev/v3-docs/TGl2ZQ%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/TGl2ZQ%3D%3D.png", "og:type": "article", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "Live", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "scrapeId": "8329ff2d-cfca-4249-92e3-1be3bcfdac5a", "sourceURL": "https://sst.dev/docs/live", "url": "https://sst.dev/docs/live", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Console\"?\n\nAssistant: Manage and monitor your apps with the SST Console.\n\nHere's a detailed explanation:\n\n\n## Get started\nStart by creating an account and connecting your AWS account.\n\n1. **Create an account with your email**\n\nIt’s better to use your work email so that you can invite your team to your workspace later — [**console.sst.dev**](https://console.sst.dev/)\n\n2. **Create a workspace**\n\nYou can add your apps and invite your team to a workspace. A workspace can be for a personal project or for your team at work. You can create as many workspaces as you want.\n\n3. **Connect your AWS account**\n\nThis will ask you to create a CloudFormation stack in your AWS account. Make sure that this stack is being added to **us-east-1**. Scroll down and click **Create stack**.\n\nThis stack will scan all the regions in your account for SST apps and subscribe to them. Once created, you’ll see all your apps, stages, and the functions in the apps.\n\nIf you are connecting a newly created AWS account, you might run into the following error while creating the stack.\n\n> Resource handler returned message: “Specified ReservedConcurrentExecutions for function decreases account’s UnreservedConcurrentExecution below its minimum value\n\nThis happens because AWS has been limiting the concurrency of Lambda functions for new accounts. It’s a good idea to increase this limit before you go to production anyway. To do so, you can [request a quota increase](https://repost.aws/knowledge-center/lambda-concurrency-limit-increase) to the default value of 1000.\n\n4. **Invite your team**\n\nUse the email address of your teammates to invite them. They just need to login with the email you’ve used and they’ll be able to join your workspace.\n\n## How it works\nAt a high level, here’s how the Console works.\n\n- It’s hosted on our side\n\nIt stores some metadata about what resources you have deployed. We’ll have a version that can be self-hosted in the future.\n\n- You can view all your apps and stages\n\nOnce you’ve connected your AWS accounts, it’ll deploy a separate CloudFormation stack and connect to any SST apps in it. And all your apps and stages will show up automatically.\n\n- It’s open-source and built with SST\n\nThe Console is an SST app. You can view the [source on GitHub](https://github.com/sst/console). It’s also auto-deployed using itself.\n\n## Security\nThe CloudFormation stack that the Console uses, creates an IAM Role in your account to manage your resources. If this is a concern for your production environments, we have a couple of options.\n\nBy default, this role is granted `AdministratorAccess`, but you can customize it to restrict access. We’ll look at this below. Additionally, if you’d like us to sign a BAA, feel free to [contact us](mailto:hello@sst.dev).\n\nThere maybe cases where you don’t want any data leaving your AWS account. For this, we’ll be supporting self-hosting the Console in the future.\n\n## IAM permissions\nPermissions for the Console fall into two categories: read and write:\n\n- **Read Permissions**: The Console needs specific permissions to display information about resources within your SST apps.\n\n| Purpose | AWS IAM Action |\n| --- | --- |\n| Fetch stack outputs | `cloudformation:DescribeStacks` |\n| Retrieve function runtime and size | `lambda:GetFunction` |\n| Access stack metadata | `ec2:DescribeRegions`<br>`s3:GetObject`<br>`s3:ListBucket` |\n| Display function logs | `logs:DescribeLogStreams`<br>`logs:FilterLogEvents`<br>`logs:GetLogEvents`<br>`logs:StartQuery` |\n| Monitor invocation usage | `cloudwatch:GetMetricData` |\n\nAttach the `arn:aws:iam::aws:policy/ReadOnlyAccess` AWS managed policy to the IAM Role for comprehensive read access.\n\n- **Write Permissions**: The Console requires the following write permissions.\n\n| Purpose | AWS IAM Action |\n| --- | --- |\n| Forward bootstrap bucket events to event bus | `s3:PutBucketNotification` |\n| Send events to Console | `events:PutRule`<br>`events:PutTargets` |\n| Grant event bus access for Console | `iam:CreateRole`<br>`iam:DeleteRole`<br>`iam:DeleteRolePolicy`<br>`iam:PassRole`<br>`iam:PutRolePolicy` |\n| Enable Issues to subscribe logs | `logs:CreateLogGroup`<br>`logs:PutSubscriptionFilter` |\n| Invoke Lambda functions and replay invocations | `lambda:InvokeFunction` |\n\nIt’s good practice to periodically review and update these policies.\n\n## Customize policy\nTo customize IAM permissions for the CloudFormation stack:\n\n1. On the CloudFormation create stack page, download the default `template.json`.\n\n2. Edit the template file with necessary changes.\n_View the template changes_\n\n```json\n\"SSTRole\": {\n     \"Type\": \"AWS::IAM::Role\",\n     \"Properties\": {\n       ...\n       \"ManagedPolicyArns\": [\\\n         \"arn:aws:iam::aws:policy/AdministratorAccess\"\\\n         \"arn:aws:iam::aws:policy/ReadOnlyAccess\"\\\n       ],\n       \"Policies\": [\\\n         {\\\n           \"PolicyName\": \"SSTPolicy\",\\\n           \"PolicyDocument\": {\\\n             \"Version\": \"2012-10-17\",\\\n             \"Statement\": [\\\n               {\\\n                 \"Effect\": \"Allow\",\\\n                 \"Action\": [\\\n                   \"s3:PutBucketNotification\"\\\n                 ],\\\n                 \"Resource\": [\\\n                   \"arn:aws:s3:::sstbootstrap-*\"\\\n                 ]\\\n               },\\\n               {\\\n                 \"Effect\": \"Allow\",\\\n                 \"Action\": [\\\n                   \"events:PutRule\",\\\n                   \"events:PutTargets\"\\\n                 ],\\\n                 \"Resource\": {\\\n                   \"Fn::Sub\": \"arn:aws:events:*:${AWS::AccountId}:rule/SSTConsole*\"\\\n                 }\\\n               },\\\n               {\\\n                 \"Effect\": \"Allow\",\\\n                 \"Action\": [\\\n                   \"iam:CreateRole\",\\\n                   \"iam:DeleteRole\",\\\n                   \"iam:DeleteRolePolicy\",\\\n                   \"iam:PassRole\",\\\n                   \"iam:PutRolePolicy\"\\\n                 ],\\\n                 \"Resource\": {\\\n                   \"Fn::Sub\": \"arn:aws:iam::${AWS::AccountId}:role/SSTConsolePublisher*\"\\\n                 }\\\n               },\\\n               {\\\n                 \"Effect\": \"Allow\",\\\n                 \"Action\": [\\\n                   \"logs:CreateLogGroup\",\\\n                   \"logs:PutSubscriptionFilter\"\\\n                 ],\\\n                 \"Resource\": {\\\n                   \"Fn::Sub\": \"arn:aws:logs:*:${AWS::AccountId}:log-group:*\"\\\n                 }\\\n               },\\\n               {\\\n                 \"Effect\": \"Allow\",\\\n                 \"Action\": [\\\n                   \"lambda:InvokeFunction\"\\\n                 ],\\\n                 \"Resource\": {\\\n                   \"Fn::Sub\": \"arn:aws:lambda:*:${AWS::AccountId}:function:*\"\\\n                 }\\\n               }\\\n             ]\\\n           }\\\n         }\\\n       ]\n     }\n}\n```\n\n3. Upload your edited `template.json` file to an S3 bucket.\n\n4. Return to the CloudFormation create stack page and replace the template URL in the page URL.\n\n## Pricing\n[Starting Feb 1, 2025](https://sst.dev/blog/console-pricing-update), the Console will be priced based on the number of active resources in your SST apps.\n\n| Resources | Rate per resource |\n| --- | --- |\n| First 2000 | $0.086 |\n| 2000+ | $0.032 |\n\n**Free Tier**: Workspaces with 350 active resources or fewer.\n\nSo for example, if you go over the free tier and have 351 active resources in a month, your bill will be 351 x $0.086 = $30.2.\n\nA couple of things to note.\n\n- These are calculated for a given workspace every month.\n- A resource is what SST creates in your cloud provider. [Learn more below](https://sst.dev/docs/console#faq).\n- You can always access personal stages, even if you’re above the free tier.\n- A resource is considered active if it comes from a stage:\n  - That has been around for at least 2 weeks.\n  - And, was updated during the month.\n- For volume pricing, feel free to [contact us](mailto:hello@sst.dev).\n\n## Active resources\nA resource is considered active if it comes from a stage that has been around for at least 2 weeks. And, was updated during the month.\n\nLet’s look at a few different scenarios to see how this works.\n\n- A stage that was created 5 months ago and was deployed this month, is active.\n- A stage that was created 5 months ago but was not deployed this month, is not active.\n- A stage that was created 12 days ago, is not active.\n- A stage that was created 20 days ago and was removed 10 days ago, is not active.\n- A stage that was created 5 months ago, deployed this month, then removed this month, is active.\n- A stage created 5 months ago, was not deployed this month, and removed this month, is not active.\n\n## Old pricing\nPreviously, the Console pricing was based on the number of times the Lambda functions in your SST apps are invoked per month and it used the following tiers.\n\n| Invocations | Rate (per invocation) |\n| --- | --- |\n| First 1M | Free |\n| 1M - 10M | $0.00002 |\n| 10M+ | $0.000002 |\n\n- These are calculated for a given workspace on a monthly basis.\n- This does not apply to personal stages, they’ll be free forever.\n- There’s also a soft limit for Issues on all accounts.\n- For volume pricing, feel free to [contact us](mailto:hello@sst.dev).\n\n## Features\nHere are a few of the things the Console does for you.\n\n1. [**Logs**](https://sst.dev/docs/console#logs): View logs from any log group in your app\n2. [**Issues**](https://sst.dev/docs/console#issues): Get real-time alerts for any errors in your functions\n3. [**Local logs**](https://sst.dev/docs/console#local-logs): View logs from your local `sst dev` session\n4. [**Updates**](https://sst.dev/docs/console#updates): View the details of every update made to your app\n5. [**Resources**](https://sst.dev/docs/console#resources): View all the resources in your app and their props\n6. [**Autodeploy**](https://sst.dev/docs/console#autodeploy): Auto-deploy your app when you _git push_ to your repo.\n\n## Logs\nWith the Console, you don’t need to go to CloudWatch to look at the logs for your functions, containers and other log groups. You can view:\n\n- View recent logs\n- Jump to a specific time\n- Search for logs with a given string\n\n## Issues\nThe Console will automatically show you any errors in your Node.js Lambda functions in real-time. And notify you through Slack or email.\n\nWith Issues, there is:\n\n- **Nothing to setup**, no code to instrument\n- **Source maps** are supported **automatically**\n- **No impact on performance** or cold starts, since the functions aren’t modified\n\nIssues currently only supports Node.js functions. Other runtimes and containers are on the roadmap.\n\n## Error detection\nIssues reports Lambda function failures. In addition, for Node.js it reports errors that are logged using `console.error(new Error(\"my-error\"));`.\n\n## How it works\nHere’s how Issues works behind the scenes.\n\n1. When an app is deployed or when an account is first synced, we add a log subscriber to the CloudWatch Log groups in your SST apps.\n   - This is added to your AWS account and includes a Lambda function. More on this below.\n2. If the subscriber filter matches anything that looks like an error it invokes the Lambda function.\n3. The Lambda function tries to parse the error and fetches the source maps from the state bucket in your account.\n4. It then hits an endpoint in the SST Console and passes in that error.\n5. Finally, the Console groups similar looking errors together and displays them.\n\n## Log subscriber\nThe log subscriber also includes the following:\n\n1. **Lambda function** that’ll be invoked when a log with an error is matched.\n   - This function has a max concurrency set to 10.\n   - If it falls behind on processing by over 10 minutes, it’ll discard the logs.\n   - This prevents it from scaling indefinitely when there’s a burst of errors.\n   - This also means that if there are a lot of errors, the alerts might be delayed by up to 10 minutes.\n2. **IAM role** that gives it access to query the logs and the state bucket for the source maps.\n3. **Log group** with a 1 day retention.\n\nThese are added to **every region** in your AWS account that has a CloudWatch log group from your SST apps. It’s deployed using a CloudFormation stack.\n\nThis process of adding a log subscriber might fail if we:\n- Don’t have enough permissions. In this case, update the permissions that you’ve granted to the Console.\n- Hit the limit for the number of subscribers, there’s a maximum of 2 subscribers. To fix this, you can remove one of the existing subscribers.\n\nYou can see these errors in the Issues tab. Once you’ve fixed these issues, you can hit **Retry** and it’ll try attaching the subscriber again.\n\n## Costs\nAWS will bill you for the Lambda function log subscriber that’s in your account. This is usually fairly minimal.\n\nEven if your apps are generating an infinite number of errors, the Lambda function is limited to a concurrency of 10. So the **maximum** you’ll be charged $43 x 10 = **$430 per month x # of regions** that are being monitored.\n\nYou can also disable Issues from your workspace settings, if you are using a separate service for monitoring.\n\n## Updates\nEach update in your app also gets a unique URL, a **_permalink_**. This is printed out by the SST CLI.\n\n```\n↗  Permalink  https://sst.dev/u/318d3879\n```\n\nYou can view these updates in the Console. Each update shows:\n\n1. Full list of **all the resources** that were modified\n2. Changes in their **inputs and outputs**\n3. Any Docker or site **builds logs**\n4. **CLI command** that triggered the update\n5. **Git commit**, if it was an auto-deploy\n\nThe permalink is useful for sharing with your team and debugging any issues with your deploys.\n\n## Resources\nThe Console shows you the complete [state of the resources](https://sst.dev/docs/state/) in your app. You can view:\n\n1. Each resource in your app\n2. The relation between resources\n3. The outputs of a given resource\n\n## Autodeploy\nThe Console can auto-deploy your apps when you _git push_ to your GitHub repo. Autodeploy uses [AWS CodeBuild](https://aws.amazon.com/codebuild/) in your account to run the build.\n\n## Setup\nTo get started with Autodeploy:\n\n1. **Enable the GitHub integration**\n\nHead over to your **Workspace settings** > **Integrations** and enable GitHub. This will ask you to login to GitHub and you’ll be asked to pick the GitHub organization or user you want to link to.\n\nIf you have multiple GitHub orgs, you can create multiple workspaces in the Console.\n\n2. **Connect a repo**\n\nTo auto-deploy an app, head over to the **App’s Settings** > **Autodeploy** and select the repo for the app.\n\n3. **Configure an environment**\n\nNext you can configure a branch or PR environment by selecting the **stage** you want deployed to an **AWS account**. You can optionally configure **environment variables** as well.\n\nBy default, stages are based on the branch name or PR. We’ll look at this in detail below.\n\n4. **Git push**\n\nFinally, _git push_ to the environment you configured and head over to your app’s **Autodeploy** tab to see it in action.\n\n5. **Setup alerts**\n\nOnce your deploys are working, you can set the Console to send alerts for your deploys.\n\n## Configure\nThe above can be configured through the [`console.autodeploy`](https://sst.dev/docs/reference/config/#console-autodeploy) option in the `sst.config.ts`.\n\n## Environments\nThe Console needs to know which account it needs to autodeploy into. You configure this under the **App’s Settings** > **Autodeploy**.\n\n## How it works\nWhen you _git push_ to a branch, pull request, or tag, the following happens:\n\n1. The stage name is generated based on the `console.autodeploy.target` callback.\n2. The stage is matched against the environments in the Console to get the AWS account and any environment variables for the deploy.\n3. The runner config is generated based on the `console.autodeploy.runner`. Or the defaults are used.\n4. The deploy is run based on the above config.\n\n## Costs\nAWS will bill you for the **CodeBuild build minutes** that are used to run your builds.\n\n## Local logs\nWhen the Console starts up, it checks if you are running `sst dev` locally. If so, then it’ll show you real-time logs from your local terminal.\n\n## Safari & Brave\nCertain browsers like Safari and Brave require the local connection between the browser and the `sst dev` CLI to be running on HTTPS.\n\n## Gitpod\nIf you are using [Gitpod](https://www.gitpod.io/), you can use the Gitpod Local Companion app to connect to the `sst dev` process running inside your Gitpod workspace.\n\n## FAQ\nHere are some frequently asked questions about the Console.\n\n## Old pricing FAQ\nHere were some frequently asked questions about the old pricing plan for the Console.\n", "metadata": {"source_url": "https://sst.dev/docs/console", "title": "Console", "description": "Manage and monitor your apps with the SST Console.", "has_code_examples": true, "has_best_practices": true, "section_count": 28, "timestamp": "2025-02-27 20:07:18", "type": "overview", "page_metadata": {"description": "Manage and monitor your apps with the SST Console.", "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/Q29uc29sZQ%3D%3D.png", "ogUrl": "https://sst.dev/docs/console/", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/console/", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29uc29sZQ%3D%3D.png", "og:title": "Console", "title": "Console | SST", "ogLocale": "en", "og:locale": "en", "og:description": "Manage and monitor your apps with the SST Console.", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29uc29sZQ%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "twitter:card": "summary_large_image", "ogDescription": "Manage and monitor your apps with the SST Console.", "ogTitle": "Console", "viewport": "width=device-width, initial-scale=1", "scrapeId": "67d97687-1f8b-47bc-9534-d66b5e54e8d4", "sourceURL": "https://sst.dev/docs/console", "url": "https://sst.dev/docs/console", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Console\"?\n\nAssistant: Here are some code examples:\n\n### Error detection example\n```yaml\nconsole.error(new Error(\"my-error\"));\n```\n\n### Autodeploy configuration example\n```yaml\nexport default $config({\n  app(input) { },\n  async run() { },\n  console: {\n    autodeploy: {\n      target(event) {\n        if (event.type === \"branch\" && event.branch === \"main\" && event.action === \"pushed\") {\n          return { stage: \"production\" };\n        }\n      }\n    }\n  }\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/console", "title": "Console", "description": "Manage and monitor your apps with the SST Console.", "has_code_examples": true, "has_best_practices": true, "section_count": 28, "timestamp": "2025-02-27 20:07:18", "type": "code_examples", "page_metadata": {"description": "Manage and monitor your apps with the SST Console.", "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/Q29uc29sZQ%3D%3D.png", "ogUrl": "https://sst.dev/docs/console/", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/console/", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29uc29sZQ%3D%3D.png", "og:title": "Console", "title": "Console | SST", "ogLocale": "en", "og:locale": "en", "og:description": "Manage and monitor your apps with the SST Console.", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29uc29sZQ%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "twitter:card": "summary_large_image", "ogDescription": "Manage and monitor your apps with the SST Console.", "ogTitle": "Console", "viewport": "width=device-width, initial-scale=1", "scrapeId": "67d97687-1f8b-47bc-9534-d66b5e54e8d4", "sourceURL": "https://sst.dev/docs/console", "url": "https://sst.dev/docs/console", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Console\"?\n\nAssistant: Here are the recommended best practices:\n\n• It’s better to use your work email for account creation to invite your team later.\n• It’s good practice to periodically review and update IAM policies.\n• For new AWS accounts, consider requesting a quota increase for Lambda concurrency limits before going to production.\n", "metadata": {"source_url": "https://sst.dev/docs/console", "title": "Console", "description": "Manage and monitor your apps with the SST Console.", "has_code_examples": true, "has_best_practices": true, "section_count": 28, "timestamp": "2025-02-27 20:07:18", "type": "best_practices", "page_metadata": {"description": "Manage and monitor your apps with the SST Console.", "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/Q29uc29sZQ%3D%3D.png", "ogUrl": "https://sst.dev/docs/console/", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/console/", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29uc29sZQ%3D%3D.png", "og:title": "Console", "title": "Console | SST", "ogLocale": "en", "og:locale": "en", "og:description": "Manage and monitor your apps with the SST Console.", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29uc29sZQ%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "twitter:card": "summary_large_image", "ogDescription": "Manage and monitor your apps with the SST Console.", "ogTitle": "Console", "viewport": "width=device-width, initial-scale=1", "scrapeId": "67d97687-1f8b-47bc-9534-d66b5e54e8d4", "sourceURL": "https://sst.dev/docs/console", "url": "https://sst.dev/docs/console", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Components\"?\n\nAssistant: Components are the building blocks of your app.\n\nHere's a detailed explanation:\n\n\n## Background\nMost providers like AWS are made up of low level resources. And it takes quite a number of these to put together something like a frontend or an API. For example, it takes around 70 low level AWS resources to create a Next.js app on AWS.\n\nAs a result, Infrastructure as Code has been traditionally only been used by DevOps or Platform engineers.\n\nTo fix this, SST has components that can help you with the most common features in your app.\n\n## Built-in\nThe built-in components in SST, the ones you see in the sidebar, are designed to make it really easy to create the various parts of your app.\n\nFor example, you don’t need to know a lot of AWS details to deploy your Next.js frontend:\n\n```\nnew sst.aws.Nextjs(\"MyWeb\");\n```\n\nAnd because this is all in code, it’s straightforward to configure this further.\n\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"my-app.com\",\n  path: \"packages/web\",\n  imageOptimization: {\n    memory: \"512 MB\"\n  },\n  buildCommand: \"npm run build\"\n});\n```\n\nYou can even take this a step further and completely transform how the low level resources are created. We’ll look at this below.\n\nCurrently SST has built-in components for two cloud providers.\n\n## AWS\nThe AWS built-in components are designed to make it easy to work with AWS.\n\nThese components are namespaced under `sst.aws.*` and listed under AWS in the sidebar. Internally they use Pulumi’s AWS provider.\n\n## Cloudflare\nThese components are namespaced under `sst.cloudflare.*` and listed under Cloudflare in the sidebar. Internally they use Pulumi’s Cloudflare provider.\n\n## Constructor\nTo add a component to your app, you create an instance of it by passing in a couple of args. For example, here’s the signature of the Function component.\n\n```\nnew sst.aws.Function(name: string, args: FunctionArgs, opts?: pulumi.ComponentResourceOptions)\n```\n\nEach component takes the following:\n- `name`: The name of the component. This needs to be unique across your entire app.\n- `args`: An object of properties that allows you to configure the component.\n- `opts?`: An optional object of properties that allows you to configure this component in Pulumi.\n\nHere’s an example of creating a Function component:\n\n```\nconst function = new sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\"\n});\n```\n\n## Name\nThere are two guidelines to follow when naming your components:\n1. The names of SST’s built-in components and components extended with Linkable.wrap need to be global across your entire app.\n\nThis allows Resource Linking to look these resources up at runtime.\n\n2. Optionally, use PascalCase for the component name.\n\nFor example, you might name your bucket, `MyBucket` and use Resource Linking to look it up with `Resource.MyBucket`.\n\nHowever this is purely cosmetic. You can use kebab case. So `my-bucket`, and look it up using `Resource['my-bucket']`.\n\n## Args\nEach component takes a set of args that allow you to configure it. These args are specific to each component. For example, the Function component takes FunctionArgs.\n\nMost of these args are optional, meaning that most components need very little configuration to get started. Typically, the most common configuration options are lifted to the top-level. To further configure the component, you’ll need to use the `transform` prop.\n\nArgs usually take primitive types. However, they also take a special version of a primitive type. It’ll look something like `Input<string>`.\n\n## Transform\nMost components take a `transform` prop as a part of their constructor or methods. It’s an object that takes callbacks that allow you to transform how that component’s infrastructure is created.\n\nFor example, here’s what the `transform` prop looks like for the Function component:\n- `function`: A callback to transform the underlying Lambda function\n- `logGroup`: A callback to transform the Lambda’s LogGroup resource\n- `role`: A callback to transform the role that the Lambda function assumes\n\nThe type for these callbacks is similar. Here’s what the `role` callback looks like:\n```\nRoleArgs | (args: RoleArgs, opts: pulumi.ComponentResourceOptions, name: string) => void\n```\nThis takes either:\n- A `RoleArgs` object. For example:\n```\n{\n    transform: {\n      role: {\n        name: \"MyRole\"\n      }\n    }\n}\n```\nThis is merged with the original `RoleArgs` that were going to be passed to the component.\n- A function that takes `RoleArgs`. Here’s the function signature:\n```\n(args: RoleArgs, opts: pulumi.ComponentResourceOptions, name: string) => void\n```\nWhere args, opts, and name are the arguments for the Role constructor passed to Pulumi.\n\nSo you can pass in a callback that takes the current `RoleArgs` and mutates it.\n```\n{\n    transform: {\n      role: (args, opts) => {\n        args.name = `${args.name}-MyRole`;\n        opts.retainOnDelete = true;\n      }\n    }\n}\n```\n\n## $transform\nSimilar to the component transform, we have the global `$transform`. This allows you to transform how a component of a given type is created.\n\nFor example, set a default `runtime` for your functions.\n```\n$transform(sst.aws.Function, (args, opts) => {\n  // Set the default if it's not set by the component\n  args.runtime ??= \"nodejs18.x\";\n});\n```\nThis sets the runtime for any `Function` component that’ll be created after this call.\n\nThe reason we do the check for `args.runtime` is to allow components to override the default. We do this by only setting the default if the component isn’t specifying its own `runtime`.\n```\nnew sst.aws.Function(\"MyFunctionA\", {\n  handler: \"src/lambdaA.handler\"\n});\nnew sst.aws.Function(\"MyFunctionB\", {\n  handler: \"src/lambdaB.handler\",\n  runtime: \"nodejs20.x\"\n});\n```\nSo given the above transform, `MyFunctionA` will have a runtime of `nodejs18.x` and `MyFunctionB` will have a runtime of `nodejs20.x`.\n\n## Properties\nAn instance of a component exposes a set of properties. For example, the Function component exposes the following properties — `arn`, `name`, `url`, and `nodes`.\n```\nconst functionArn = function.arn;\n```\nThese can be used to output info about your app or can be used as args for other components.\n\n## Links\nSome of these properties are also made available via resource linking. This allows you to access them in your functions and frontends in a typesafe way.\n\n## Nodes\nThe `nodes` property that a component exposes gives you access to the underlying infrastructure. This is an object that contains references to the underlying Pulumi components that are created.\n\n## Outputs\nThe properties of a component are typically of a special type that looks something like, `Output<primitive>`. These are values that are not available yet and will be resolved as the deploy progresses. However, these outputs can be used as args in other components.\n\n## Apply\nSince outputs are values that are yet to be resolved, you cannot use them in regular operations. You’ll need to resolve them first. For example, let’s take the function url from above. We cannot do the following.\n```\nconst newUrl = myFunction.url + \"/foo\";\n```\nThis is because the value of the output is not known at the time of this operation. We’ll need to resolve it.\n\nThe easiest way to work with an output is using `.apply`. It’ll allow you to apply an operation on the output and return a new output.\n```\nconst newUrl = myFunction.url.apply((value) => value + \"/foo\");\n```\nIn this case, `newUrl` is also an `Output<string>`.\n\n## Helpers\nTo make it a little easier to work with outputs, we have the following global helper functions.\n\n## $concat\nThis lets you do.\n```\nconst newUrl = $concat(myFunction.url, \"/foo\");\n```\n\n## $interpolate\nThis lets you do.\n```\nconst newUrl = $interpolate`${myFunction.url}/foo`;\n```\n\n## $jsonParse\nThis is for outputs that are JSON strings. So instead of doing this.\n```\nconst policy = policyStr.apply((policy) =>\n  JSON.parse(policy)\n);\n```\nYou can.\n```\nconst policy = $jsonParse(policyStr);\n```\n\n## $jsonStringify\nSimilarly, for outputs that are JSON objects. Instead of doing a stringify after an apply.\n```\nconst policy = policyObj.apply((policy) =>\n  JSON.stringify(policy)\n);\n```\nYou can.\n```\nconst policy = $jsonStringify(policyObj);\n```\n\n## $resolve\nAnd finally when you are working with a list of outputs and you want to resolve them all together.\n```\n$resolve([bucket.name, worker.url]).apply(([bucketName, workerUrl]) => {\n  console.log(`Bucket: ${bucketName}`);\n  console.log(`Worker: ${workerUrl}`);\n})\n```\n\n## Versioning\nSST components evolve over time, sometimes introducing breaking changes. To maintain backwards compatibility, we implement a component versioning scheme.\n\n## Continue with the old version\nIf you prefer to continue using the older version of a component, you can rename it.\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\nconst vpc = new sst.aws.Vpc.v1(\"MyVpc\");\n```\n\n## Update to the latest version\nInstead, if you wanted to update to the latest version, you’ll have to rename the component.\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\nconst vpc = new sst.aws.Vpc(\"MyNewVpc\");\n```\n", "metadata": {"source_url": "https://sst.dev/docs/components", "title": "Components", "description": "Components are the building blocks of your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 23, "timestamp": "2025-02-27 20:09:13", "type": "overview", "page_metadata": {"ogSiteName": "SST", "description": "Components are the building blocks of your app.", "og:site_name": "SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "title": "Components | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29tcG9uZW50cw%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29tcG9uZW50cw%3D%3D.png", "og:url": "https://sst.dev/docs/components/", "ogTitle": "Components", "og:locale": "en", "og:description": "Components are the building blocks of your app.", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/Q29tcG9uZW50cw%3D%3D.png", "ogDescription": "Components are the building blocks of your app.", "viewport": "width=device-width, initial-scale=1", "og:title": "Components", "ogUrl": "https://sst.dev/docs/components/", "scrapeId": "36fb0cad-fc79-402c-a999-ab678b75727e", "sourceURL": "https://sst.dev/docs/components", "url": "https://sst.dev/docs/components", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Components\"?\n\nAssistant: Here are some code examples:\n\n### Deploy Next.js frontend\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\");\n```\n\n### Configure Next.js frontend\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"my-app.com\",\n  path: \"packages/web\",\n  imageOptimization: {\n    memory: \"512 MB\"\n  },\n  buildCommand: \"npm run build\"\n});\n```\n\n### Create Function component\n```yaml\nconst function = new sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\"\n});\n```\n\n### Transform role callback\n```yaml\n{\n    transform: {\n      role: (args, opts) => {\n        args.name = `${args.name}-MyRole`;\n        opts.retainOnDelete = true;\n      }\n    }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/components", "title": "Components", "description": "Components are the building blocks of your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 23, "timestamp": "2025-02-27 20:09:13", "type": "code_examples", "page_metadata": {"ogSiteName": "SST", "description": "Components are the building blocks of your app.", "og:site_name": "SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "title": "Components | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29tcG9uZW50cw%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29tcG9uZW50cw%3D%3D.png", "og:url": "https://sst.dev/docs/components/", "ogTitle": "Components", "og:locale": "en", "og:description": "Components are the building blocks of your app.", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/Q29tcG9uZW50cw%3D%3D.png", "ogDescription": "Components are the building blocks of your app.", "viewport": "width=device-width, initial-scale=1", "og:title": "Components", "ogUrl": "https://sst.dev/docs/components/", "scrapeId": "36fb0cad-fc79-402c-a999-ab678b75727e", "sourceURL": "https://sst.dev/docs/components", "url": "https://sst.dev/docs/components", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Components\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use PascalCase for component names for better readability, but kebab case is also acceptable.\n• When using outputs, remember to resolve them using .apply or helper functions like $concat and $interpolate.\n• Be cautious with versioning; if you want to maintain the old version of a component, rename it appropriately.\n", "metadata": {"source_url": "https://sst.dev/docs/components", "title": "Components", "description": "Components are the building blocks of your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 23, "timestamp": "2025-02-27 20:09:13", "type": "best_practices", "page_metadata": {"ogSiteName": "SST", "description": "Components are the building blocks of your app.", "og:site_name": "SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "title": "Components | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29tcG9uZW50cw%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29tcG9uZW50cw%3D%3D.png", "og:url": "https://sst.dev/docs/components/", "ogTitle": "Components", "og:locale": "en", "og:description": "Components are the building blocks of your app.", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/Q29tcG9uZW50cw%3D%3D.png", "ogDescription": "Components are the building blocks of your app.", "viewport": "width=device-width, initial-scale=1", "og:title": "Components", "ogUrl": "https://sst.dev/docs/components/", "scrapeId": "36fb0cad-fc79-402c-a999-ab678b75727e", "sourceURL": "https://sst.dev/docs/components", "url": "https://sst.dev/docs/components", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Custom Domains\"?\n\nAssistant: Configure custom domains in your components.\n\nHere's a detailed explanation:\n\n\n## How it works\nConfiguring a custom domain is a two step process.\n\n1. Validate that you own the domain. For AWS you do this by [creating an ACM certificate](https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html) and validating it by:\n   - Setting a DNS record with your domain provider.\n   - Verifying through an email sent to the domain owner.\n2. Add the DNS records to route your domain to your component.\n\nSST can perform these steps automatically for the supported providers through a concept of _adapters_. These create the above DNS records on a given provider.\n\n## Adapters\nYou can use a custom domain hosted on any provider. SST supports domains on AWS, Cloudflare, and Vercel automatically.\n\n## AWS\nBy default, if you set a custom domain, SST assumes the domain is configured in AWS Route 53 in the same AWS account.\n\n```\n{\n  domain: {\n    name: \"example.com\"\n  }\n}\n```\n\nThis is the same as using the [`sst.aws.dns`](https://sst.dev/docs/component/aws/dns/) adapter.\n\n```\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.aws.dns()\n  }\n}\n```\n\nIf you have the same domain in multiple hosted zones in Route 53, you can specify the hosted zone.\n\n```\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.aws.dns({\n      zone: \"Z2FDTNDATAQYW2\"\n    })\n  }\n}\n```\n\nIf your domains are hosted on AWS but in a separate AWS account, you’ll need to follow the [manual setup](https://sst.dev/docs/custom-domains#manual-setup).\n\n## Vercel\nIf your domains are hosted on [Vercel](https://vercel.com/), you’ll need to do the following.\n\n1. [Add the Vercel provider to your app](https://sst.dev/docs/component/vercel/dns/#configure-provider).\n\n```\nsst add @pulumiverse/vercel\n```\n\n2. Set the **`VERCEL_API_TOKEN`** in your environment. You might also need to set the `VERCEL_TEAM_ID` if the domain belongs to a team.\n\n```\nexport VERCEL_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\n3. Use the [`sst.vercel.dns`](https://sst.dev/docs/component/vercel/dns/) adapter.\n\n```\n{\n     domain: {\n       name: \"example.com\",\n       dns: sst.vercel.dns()\n     }\n}\n```\n\n## Cloudflare\nIf your domains are hosted on [Cloudflare](https://developers.cloudflare.com/dns/), you’ll need to do the following.\n\n1. Add the Cloudflare provider to your app.\n\n```\nsst add cloudflare\n```\n\n2. Set the **`CLOUDFLARE_API_TOKEN`** in your environment.\n\n```\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\nexport CLOUDFLARE_DEFAULT_ACCOUNT_ID=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\nTo get your API tokens, head to the [API Tokens section](https://dash.cloudflare.com/profile/api-tokens) of your Cloudflare dashboard and create one with the **Edit zone DNS** policy.\n\n3. Use the [`sst.cloudflare.dns`](https://sst.dev/docs/component/cloudflare/dns/) adapter.\n\n```\n{\n     domain: {\n       name: \"example.com\",\n       dns: sst.cloudflare.dns()\n     }\n}\n```\n\n## Manual setup\nIf your domain is on a provider that is not supported above, or is in a separate AWS account; you’ll need to verify that you own the domain and set up the DNS records on your own.\n\nTo manually set up a domain on an unsupported provider, you’ll need to:\n\n1. [Validate that you own the domain](https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html) by creating an ACM certificate. You can either validate it by setting a DNS record or by verifying an email sent to the domain owner.\n\nIf you are configuring a custom domain for a CloudFront distribution, the ACM certificate that’s used to prove that you own the domain needs be created in the `us-east-1` region.\n\nFor all the other components, like ApiGatewayV2 or Cluster, can be created in any region.\n\n2. Once validated, set the certificate ARN as the `cert` and set `dns` to `false`.\n\n```\n{\n     domain: {\n       name: \"domain.com\",\n       dns: false,\n       cert: \"arn:aws:acm:us-east-1:112233445566:certificate/3a958790-8878-4cdc-a396-06d95064cf63\"\n     }\n}\n```\n\n3. Add the DNS records in your provider to point to the CloudFront distribution, API Gateway, or load balancer URL.\n", "metadata": {"source_url": "https://sst.dev/docs/custom-domains", "title": "Custom Domains", "description": "Configure custom domains in your components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:09:37", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "Configure custom domains in your components.", "ogTitle": "Custom Domains", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:title": "Custom Domains", "og:url": "https://sst.dev/docs/custom-domains/", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Custom Domains | SST", "ogUrl": "https://sst.dev/docs/custom-domains/", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/Q3VzdG9tJTIwRG9tYWlucw%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Configure custom domains in your components.", "og:image": "https://social-cards.sst.dev/v3-docs/Q3VzdG9tJTIwRG9tYWlucw%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q3VzdG9tJTIwRG9tYWlucw%3D%3D.png", "language": "en", "description": "Configure custom domains in your components.", "ogLocale": "en", "og:locale": "en", "scrapeId": "066be69d-2ca7-4c72-b0c5-bfbfac25f254", "sourceURL": "https://sst.dev/docs/custom-domains", "url": "https://sst.dev/docs/custom-domains", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Custom Domains\"?\n\nAssistant: Here are some code examples:\n\n### Custom Domain Example\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"example.com\"\n});\n```\n\n### Subdomain Example\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"app.example.com\"\n});\n```\n\n### AWS Domain Configuration\n```yaml\n{\n  domain: {\n    name: \"example.com\"\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/custom-domains", "title": "Custom Domains", "description": "Configure custom domains in your components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:09:37", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "Configure custom domains in your components.", "ogTitle": "Custom Domains", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:title": "Custom Domains", "og:url": "https://sst.dev/docs/custom-domains/", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Custom Domains | SST", "ogUrl": "https://sst.dev/docs/custom-domains/", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/Q3VzdG9tJTIwRG9tYWlucw%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Configure custom domains in your components.", "og:image": "https://social-cards.sst.dev/v3-docs/Q3VzdG9tJTIwRG9tYWlucw%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q3VzdG9tJTIwRG9tYWlucw%3D%3D.png", "language": "en", "description": "Configure custom domains in your components.", "ogLocale": "en", "og:locale": "en", "scrapeId": "066be69d-2ca7-4c72-b0c5-bfbfac25f254", "sourceURL": "https://sst.dev/docs/custom-domains", "url": "https://sst.dev/docs/custom-domains", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Custom Domains\"?\n\nAssistant: Here are the recommended best practices:\n\n• SST supports a couple of DNS providers automatically including AWS Route 53, Cloudflare, and Vercel. Other providers will need to be manually configured.\n• If you have the same domain in multiple hosted zones in Route 53, specify the hosted zone.\n• For CloudFront distributions, the ACM certificate must be created in the `us-east-1` region.\n", "metadata": {"source_url": "https://sst.dev/docs/custom-domains", "title": "Custom Domains", "description": "Configure custom domains in your components.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:09:37", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "og:description": "Configure custom domains in your components.", "ogTitle": "Custom Domains", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:title": "Custom Domains", "og:url": "https://sst.dev/docs/custom-domains/", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Custom Domains | SST", "ogUrl": "https://sst.dev/docs/custom-domains/", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/Q3VzdG9tJTIwRG9tYWlucw%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Configure custom domains in your components.", "og:image": "https://social-cards.sst.dev/v3-docs/Q3VzdG9tJTIwRG9tYWlucw%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q3VzdG9tJTIwRG9tYWlucw%3D%3D.png", "language": "en", "description": "Configure custom domains in your components.", "ogLocale": "en", "og:locale": "en", "scrapeId": "066be69d-2ca7-4c72-b0c5-bfbfac25f254", "sourceURL": "https://sst.dev/docs/custom-domains", "url": "https://sst.dev/docs/custom-domains", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"CLI\"?\n\nAssistant: Reference doc for the SST CLI.\n\nHere's a detailed explanation:\n\n\n## Installation\nThe CLI helps you manage your SST apps.\n\nIf you are using SST as a part of your Node project, we recommend installing it locally.\n\n```\nnpm install sst\n```\n\nIf you are not using Node, you can install the CLI globally.\n\n```\ncurl -fsSL https://sst.dev/install | bash\n```\n\nTo install a specific version.\n\n```\ncurl -fsSL https://sst.dev/install | VERSION=0.0.403 bash\n```\n\n#### With a package manager\n\nYou can also use a package manager to install the CLI.\n\n- **macOS**\n\nThe CLI is available via a Homebrew Tap, and as downloadable binary in the [releases](https://github.com/sst/sst/v3/releases/latest).\n\n```\nbrew install sst/tap/sst\n\n# Upgrade\n\nbrew upgrade sst\n```\n\nYou might have to run `brew upgrade sst`, before the update.\n\n- **Linux**\n\nThe CLI is available as downloadable binaries in the [releases](https://github.com/sst/sst/v3/releases/latest). Download the `.deb` or `.rpm` and install with `sudo dpkg -i` and `sudo rpm -i`.\n\nFor Arch Linux, it’s available in the [aur](https://aur.archlinux.org/packages/sst-bin).\n", "metadata": {"source_url": "https://sst.dev/docs/reference/cli", "title": "CLI", "description": "Reference doc for the SST CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:10:16", "type": "overview", "page_metadata": {"ogLocale": "en", "ogTitle": "CLI", "favicon": "https://sst.dev/favicon.ico", "title": "CLI | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogUrl": "https://sst.dev/docs/reference/cli/", "og:description": "Reference doc for the SST CLI.", "og:image": "https://social-cards.sst.dev/v3-docs/Q0xJ.png", "og:type": "article", "twitter:card": "summary_large_image", "og:site_name": "SST", "ogSiteName": "SST", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q0xJ.png", "ogDescription": "Reference doc for the SST CLI.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q0xJ.png", "og:url": "https://sst.dev/docs/reference/cli/", "viewport": "width=device-width, initial-scale=1", "description": "Reference doc for the SST CLI.", "og:title": "CLI", "scrapeId": "ba96855f-46d3-42e9-857f-6652be6b7b2d", "sourceURL": "https://sst.dev/docs/reference/cli", "url": "https://sst.dev/docs/reference/cli", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"CLI\"?\n\nAssistant: Here are some code examples:\n\n### Install SST Locally\n```yaml\nnpm install sst\n```\n\n### Install SST Globally\n```yaml\ncurl -fsSL https://sst.dev/install | bash\n```\n\n### Install Specific Version of SST\n```yaml\ncurl -fsSL https://sst.dev/install | VERSION=0.0.403 bash\n```\n\n### Install SST with Homebrew\n```yaml\nbrew install sst/tap/sst\n\n# Upgrade\n\nbrew upgrade sst\n```\n\n### Run SST Command\n```yaml\nsst [command]\n```\n\n### Deploy Command with Stage\n```yaml\nsst deploy --stage production\n```\n\n### Access Environment Variable\n```yaml\nENV_VAR=123 sst deploy\n```\n\n### Set Stage Environment Variable\n```yaml\nSST_STAGE=dev sst [command]\n```\n\n### Run SST Init Command\n```yaml\nsst init\n```\n\n### Run SST Dev Command\n```yaml\nsst dev [command]\n```\n\n### Run SST Deploy Command\n```yaml\nsst deploy\n```\n\n### Run SST Diff Command\n```yaml\nsst diff\n```\n\n### Run SST Add Command\n```yaml\nsst add <provider>\n```\n\n### Run SST Install Command\n```yaml\nsst install\n```\n\n### Run SST Secret Set Command\n```yaml\nsst secret set <name> [value]\n```\n\n### Run SST Shell Command\n```yaml\nsst shell [command]\n```\n\n### Run SST Remove Command\n```yaml\nsst remove\n```\n\n### Run SST Unlock Command\n```yaml\nsst unlock\n```\n\n### Run SST Version Command\n```yaml\nsst version\n```\n\n### Run SST Upgrade Command\n```yaml\nsst upgrade [version]\n```\n\n### Run SST Telemetry Enable Command\n```yaml\nsst telemetry enable\n```\n\n### Run SST Telemetry Disable Command\n```yaml\nsst telemetry disable\n```\n\n### Run SST Refresh Command\n```yaml\nsst refresh\n```\n\n### Run SST State Export Command\n```yaml\nsst state export\n```\n\n### Run SST State Remove Command\n```yaml\nsst state remove <target>\n```\n\n### Run SST State Repair Command\n```yaml\nsst state repair\n```\n\n### Run SST Cert Command\n```yaml\nsst cert\n```\n\n### Run SST Tunnel Command\n```yaml\nsst tunnel\n```\n\n### Run SST Tunnel Install Command\n```yaml\nsst tunnel install\n```\n\n### Run SST Diagnostic Command\n```yaml\nsst diagnostic\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/reference/cli", "title": "CLI", "description": "Reference doc for the SST CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:10:16", "type": "code_examples", "page_metadata": {"ogLocale": "en", "ogTitle": "CLI", "favicon": "https://sst.dev/favicon.ico", "title": "CLI | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogUrl": "https://sst.dev/docs/reference/cli/", "og:description": "Reference doc for the SST CLI.", "og:image": "https://social-cards.sst.dev/v3-docs/Q0xJ.png", "og:type": "article", "twitter:card": "summary_large_image", "og:site_name": "SST", "ogSiteName": "SST", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q0xJ.png", "ogDescription": "Reference doc for the SST CLI.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q0xJ.png", "og:url": "https://sst.dev/docs/reference/cli/", "viewport": "width=device-width, initial-scale=1", "description": "Reference doc for the SST CLI.", "og:title": "CLI", "scrapeId": "ba96855f-46d3-42e9-857f-6652be6b7b2d", "sourceURL": "https://sst.dev/docs/reference/cli", "url": "https://sst.dev/docs/reference/cli", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"CLI\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you are using SST as a part of your Node project, install it locally.\n• If you are not using Node, install the CLI globally.\n• For macOS, use Homebrew to install the CLI.\n• For Linux, download the binaries from the releases page.\n• Use the `--stage` flag to specify the stage when deploying.\n• Access environment variables in your `sst.config.ts` file.\n• Use the `--continue` flag to deploy as many resources as possible even if there are errors.\n", "metadata": {"source_url": "https://sst.dev/docs/reference/cli", "title": "CLI", "description": "Reference doc for the SST CLI.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:10:16", "type": "best_practices", "page_metadata": {"ogLocale": "en", "ogTitle": "CLI", "favicon": "https://sst.dev/favicon.ico", "title": "CLI | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogUrl": "https://sst.dev/docs/reference/cli/", "og:description": "Reference doc for the SST CLI.", "og:image": "https://social-cards.sst.dev/v3-docs/Q0xJ.png", "og:type": "article", "twitter:card": "summary_large_image", "og:site_name": "SST", "ogSiteName": "SST", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q0xJ.png", "ogDescription": "Reference doc for the SST CLI.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q0xJ.png", "og:url": "https://sst.dev/docs/reference/cli/", "viewport": "width=device-width, initial-scale=1", "description": "Reference doc for the SST CLI.", "og:title": "CLI", "scrapeId": "ba96855f-46d3-42e9-857f-6652be6b7b2d", "sourceURL": "https://sst.dev/docs/reference/cli", "url": "https://sst.dev/docs/reference/cli", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Global\"?\n\nAssistant: Reference doc for the Global `$` library.\n\nHere's a detailed explanation:\n\n\n## Global Library Overview\nThe Global library is a collection of `$` functions and variables that are available in the `run` function, of your `sst.config.ts`. You don’t need to import the Global library. It’s available in the `run` function of your `sst.config.ts`. For example, you can get the name of your app in your app config using `$app.name.`\n\n## Variables\nThe **variables** contain the context of the app that’s being run. While the **functions** help you work with the [Outputs of components](https://sst.dev/docs/components##inputs--outputs).\n\n## $app\n**Type** `Object`\n\n- [`name`](https://sst.dev/docs/reference/global#app-name)\n- [`protect`](https://sst.dev/docs/reference/global#app-protect)\n- [`providers`](https://sst.dev/docs/reference/global#app-providers)\n- [`removal`](https://sst.dev/docs/reference/global#app-removal)\n- [`stage`](https://sst.dev/docs/reference/global#app-stage)\n\nContext about the app being run.\n\n## $app.name\n**Type** `string`\n\nThe name of the current app.\n\n## $app.protect\n**Type** `boolean`\n\nIf true, prevents `sst remove` from being executed on this stage.\n\n## $app.providers\n**Type** `undefined` ` | ` `Record` `<` `string`, `any` `>`\n\nThe providers currently being used in the app.\n\n## $app.removal\n**Type** `“` `remove` `”` ` | ` `“` `retain` `”` ` | ` `“` `retain-all` `”`\n\nThe removal policy for the current stage. If `removal` was not set in the `sst.config.ts`, this will be return its default value, `retain`.\n\n## $app.stage\n**Type** `string`\n\nThe stage currently being run. You can use this to conditionally deploy resources based on the stage.\n\nFor example, to deploy a bucket only in the `dev` stage:\n\n```javascript\nif ($app.stage === \"dev\") {\n  new sst.aws.Bucket(\"MyBucket\");\n}\n```\n\n## $dev\n**Type** `boolean`\n\nReturns `true` if the app is running in `sst dev`.\n\n## $util\n**Type** [`@pulumi/pulumi`](https://www.pulumi.com/docs/reference/pkg/nodejs/pulumi/pulumi/)\n\nA convenience reference to the the [`util`](https://www.pulumi.com/docs/reference/pkg/nodejs/pulumi/pulumi/) module from Pulumi.\n\nThis is useful for working with components. You can use these without importing or installing the Pulumi SDK.\nFor example, to create a new asset, you can:\n\n```javascript\nconst myFiles = new $util.asset.FileArchive(\"./path/to/files\");\n```\n\nThis is equivalent to doing:\n\n```javascript\nimport * as pulumi from \"@pulumi/pulumi\";\nconst myFiles = new pulumi.asset.FileArchive(\"./path/to/files\");\n```\n\n## Functions\n### [$asset](https://sst.dev/docs/reference/global#asset)\n\n```javascript\n$asset(assetPath)\n```\n\n#### Parameters\n\n- `assetPath` `string`\n\n**Returns** [`FileArchive`](https://www.pulumi.com/docs/iac/concepts/assets-archives/#archives) ` | ` [`FileAsset`](https://www.pulumi.com/docs/iac/concepts/assets-archives/#assets)\n\nPackages a file or directory into a Pulumi asset. This can be used for Pulumi resources that take an asset as input.\n\nWhen the given path is a file, it returns a [`FileAsset`](https://www.pulumi.com/docs/iac/concepts/assets-archives/#assets). If the path is a directory, it returns a [`FileArchive`](https://www.pulumi.com/docs/iac/concepts/assets-archives/#assets) with the zipped contents of the directory.\n\nRelative paths are resolved relative to the root of the app. While, absolute paths are used as is.\n\nIf you have a file inside the `images` directory at the root of your app, you can upload it to S3 on deploy.\n\n```javascript\nconst bucket = new aws.s3.Bucket(\"MyBucket\");\n\nnew aws.s3.BucketObjectv2(\"MyImage\", {\n  bucket: bucket.name,\n  key: \"public/spongebob.svg\",\n  contentType: \"image/svg+xml\",\n  source: $asset(\"images/spongebob.svg\"),\n});\n```\n\nYou can also use this to zip up the files in the `files/` directory and upload it to S3.\n\n```javascript\nnew aws.s3.BucketObjectv2(\"MyZip\", {\n  bucket: bucket.name,\n  key: \"public/spongebob.zip\",\n  contentType: \"application/zip\",\n  source: $asset(\"files\"),\n});\n```\n\n## $concat\n```javascript\n$concat(params)\n```\n\n#### Parameters\n\n- `params` `any` `[]`\n\n**Returns** `Output` `<` `string` `>`\n\nTakes a sequence of Output values or plain JavaScript values, stringifies each, and concatenates them into one final string.\n\nThis is takes care of resolving the Output values for you. Say you had a bucket:\n\n```javascript\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\nInstead of having to resolve the bucket name first:\n\n```javascript\nconst description = bucket.name.apply(name =>\n  \"This is a bucket named \".concat(name)\n);\n```\n\nYou can directly do this:\n\n```javascript\nconst description = $concat(\"This is a bucket named \", bucket.name);\n```\n\n## $interpolate\n```javascript\n$interpolate(literals, placeholders)\n```\n\n#### Parameters\n\n- `literals` `TemplateStringsArray` `<` `>`\n- `placeholders` `any` `[]`\n\n**Returns** `Output` `<` `string` `>`\n\nUse string interpolation on Output values.\n\nThis is takes care of resolving the Output values for you. Say you had a bucket:\n\n```javascript\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\nInstead of resolving the bucket name first:\n\n```javascript\nconst description = bucket.name.apply(name => `This is a bucket named ${name}`);\n```\n\nYou can directly do this:\n\n```javascript\nconst description = $interpolate`This is a bucket named ${bucket.name}`;\n```\n\n## $jsonParse\n```javascript\n$jsonParse(text, reviver?)\n```\n\n#### Parameters\n\n- `text` `Input` `<` `string` `>`\n- `reviver?` [`JSON.parse reviver`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#reviver)\n\n**Returns** `Output` `<` `any` `>`\n\nTakes an Output value or plain JavaScript value, uses `JSON.parse` on the resolved JSON string to turn it into a JSON object.\n\nSo for example, instead of doing of resolving the value first:\n\n```javascript\nconst policy = policyStr.apply((policy) =>\n  JSON.parse(policy)\n);\n```\n\nYou can directly do this:\n\n```javascript\nconst policy = $jsonParse(policyStr);\n```\n\n## $jsonStringify\n```javascript\n$jsonStringify(obj, replacer?, space?)\n```\n\n#### Parameters\n\n- `obj` `any`\n- `replacer?` [`JSON.stringify replacer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#replacer)\n- `space?` `string` ` | ` `number`\n\n**Returns** `Output` `<` `string` `>`\n\nTakes an Output value or plain JSON object, uses `JSON.stringify` on the resolved JSON object to turn it into a JSON string.\n\nSo for example, instead of doing of resolving the value first:\n\n```javascript\nconst policy = policyObj.apply((policy) =>\n  JSON.stringify(policy)\n);\n```\n\nYou can directly do this:\n\n```javascript\nconst policy = $jsonStringify(policyObj);\n```\n\n## $resolve\n```javascript\n$resolve(val)\n```\n\n#### Parameters\n\n- `val` `Record` `<` `string`, `Input` `<` `T` `>` `>`\n\n**Returns** `Output` `<` `Record` `<` `string`, `T` `>` `>`\n\nWait for a list of Output values to be resolved, and then apply a function to their resolved values.\n\nSay you had a couple of S3 Buckets:\n\n```javascript\nconst bucket1 = new sst.aws.Bucket(\"MyBucket1\");\nconst bucket2 = new sst.aws.Bucket(\"MyBucket2\");\n```\n\nYou can run a function after both of them are resolved:\n\n```javascript\n$resolve([bucket1.name, bucket2.name]).apply(([value1, value2]) =>\n  console.log({ value1, value2 })\n);\n```\n\n## $transform\n```javascript\n$transform(resource, cb)\n```\n\n#### Parameters\n\n- `resource` `Component Class`\n- `cb` `(args, opts, name) => void`\n\n**Returns** `void`\n\nRegister a function that’ll be called when a component of the given type is about to be created. This is useful for setting global defaults for your components.\n\nThe function takes the arguments and options that are being passed to the component, and can modify them.\n\nFor example, to set a default runtime for all function components:\n\n```javascript\n$transform(sst.aws.Function, (args, opts, name) => {\n  // Set the default if it's not set by the component\n  args.runtime ??= \"nodejs20.x\";\n});\n```\n\n## AWS\n### [iamEdit](https://sst.dev/docs/reference/global#iamedit)\n\n```javascript\niamEdit(policy, cb)\n```\n\n#### Parameters\n\n- `policy` `Input` `<` `string` ` | ` [`PolicyDocument`](https://www.pulumi.com/registry/packages/aws/api-docs/iam/documents/) `>`\n- `cb` `(doc: Object) => void`\n\n**Returns** `Output` `<` `string` `>`\n\nA helper to modify the AWS IAM policy.\n\nThe IAM policy document is normally in the form of a JSON string. This helper decodes the string into a JSON object and passes it to the callback. Allowing you to modify the policy document in a type-safe way.\n\nFor example, this comes in handy when you are transforming the policy of a component.\n\n```javascript\nnew sst.aws.Bucket(\"MyBucket\", {\n  transform: {\n    policy: (args) => {\n      args.policy = sst.aws.iamEdit(args.policy, (policy) => {\n        policy.Statement.push({\n          Effect: \"Allow\",\n          Action: \"s3:PutObject\",\n          Principal: { Service: \"ses.amazonaws.com\" },\n          Resource: $interpolate`arn:aws:s3:::${args.bucket}/*`,\n        });\n      });\n    },\n  },\n});\n```\n", "metadata": {"source_url": "https://sst.dev/docs/reference/global", "title": "Global", "description": "Reference doc for the Global `$` library.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-27 20:11:13", "type": "overview", "page_metadata": {"ogLocale": "en", "title": "Global | SST", "ogTitle": "Global", "ogDescription": "Reference doc for the Global `$` library.", "og:site_name": "SST", "og:url": "https://sst.dev/docs/reference/global/", "og:type": "article", "og:title": "Global", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/reference/global/", "description": "Reference doc for the Global `$` library.", "og:description": "Reference doc for the Global `$` library.", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/R2xvYmFs.png", "og:image": "https://social-cards.sst.dev/v3-docs/R2xvYmFs.png", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/R2xvYmFs.png", "scrapeId": "346d9c16-bffe-445c-b632-4f79ff06c0a0", "sourceURL": "https://sst.dev/docs/reference/global", "url": "https://sst.dev/docs/reference/global", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Global\"?\n\nAssistant: Here are some code examples:\n\n### Example of using $app.name\n```yaml\nexport default $config({\n  // ...\n  async run() {\n    console.log($app.name);\n  }\n});\n```\n\n### Deploying a bucket in dev stage\n```yaml\nif ($app.stage === \"dev\") {\n  new sst.aws.Bucket(\"MyBucket\");\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/reference/global", "title": "Global", "description": "Reference doc for the Global `$` library.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-27 20:11:13", "type": "code_examples", "page_metadata": {"ogLocale": "en", "title": "Global | SST", "ogTitle": "Global", "ogDescription": "Reference doc for the Global `$` library.", "og:site_name": "SST", "og:url": "https://sst.dev/docs/reference/global/", "og:type": "article", "og:title": "Global", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/reference/global/", "description": "Reference doc for the Global `$` library.", "og:description": "Reference doc for the Global `$` library.", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/R2xvYmFs.png", "og:image": "https://social-cards.sst.dev/v3-docs/R2xvYmFs.png", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/R2xvYmFs.png", "scrapeId": "346d9c16-bffe-445c-b632-4f79ff06c0a0", "sourceURL": "https://sst.dev/docs/reference/global", "url": "https://sst.dev/docs/reference/global", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Global\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use $app.stage to conditionally deploy resources based on the stage.\n• Use $asset to package files or directories into Pulumi assets for S3 uploads.\n", "metadata": {"source_url": "https://sst.dev/docs/reference/global", "title": "Global", "description": "Reference doc for the Global `$` library.", "has_code_examples": true, "has_best_practices": true, "section_count": 18, "timestamp": "2025-02-27 20:11:13", "type": "best_practices", "page_metadata": {"ogLocale": "en", "title": "Global | SST", "ogTitle": "Global", "ogDescription": "Reference doc for the Global `$` library.", "og:site_name": "SST", "og:url": "https://sst.dev/docs/reference/global/", "og:type": "article", "og:title": "Global", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/reference/global/", "description": "Reference doc for the Global `$` library.", "og:description": "Reference doc for the Global `$` library.", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/R2xvYmFs.png", "og:image": "https://social-cards.sst.dev/v3-docs/R2xvYmFs.png", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/R2xvYmFs.png", "scrapeId": "346d9c16-bffe-445c-b632-4f79ff06c0a0", "sourceURL": "https://sst.dev/docs/reference/global", "url": "https://sst.dev/docs/reference/global", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"SDK\"?\n\nAssistant: Interact with your infrastructure in your runtime code.\n\nHere's a detailed explanation:\n\n\n## Node.js\nThe JS SDK is an npm package that you can install in your functions, frontends, or container applications.\n\n```\n\nnpm install sst\n```\n\n\n\n## Links\nImport `Resource` to access the linked resources.\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\nHere we are assuming that a bucket has been linked to the function. Here’s what that could look like.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n\n  handler: \"src/lambda.handler\",\n\n  link: [bucket]\n});\n```\n\n\n\n## Defaults\nBy default, the `Resource` object contains `Resource.App`. This gives you some info about the current app including:\n\n- `App.name`: The name of your SST app.\n- `App.stage`: The current stage of your SST app.\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.App.name, Resource.App.stage);\n```\n\n\n\n## Clients\nComponents like the [`Realtime`](https://sst.dev/docs/component/aws/realtime/) component come with a client that you can use.\n\n```\nimport { realtime } from \"sst/aws/realtime\";\n\nexport const handler = realtime.authorizer(async (token) => {\n\n  // Validate the token\n\n});\n```\n\nFor example, `realtime.authorizer` lets you create the handler for the authorizer function that `Realtime` needs.\n\n\n\n## How it works\nIn the above example, `Resource.MyBucket.name` works because it’s been injected into the function package on `sst dev` and `sst deploy`.\n\nFor functions, this is injected into the [`globalThis`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis) using [esbuild](https://esbuild.github.io/) and for frontends, it’s injected into the `process.env` object.\n\nThe JS SDK first checks the `process.env` and then the `globalThis` for the linked resources. You can [read more about how the links are injected](https://sst.dev/docs/linking/#injecting-links).\n\n## Golang\nUse the SST Go SDK package in your Golang functions or container applications.\n\n```\nimport (\n\n  \"github.com/sst/sst/v3/sdk/golang/resource\"\n\n)\n```\n\nIn your runtime code, use the `resource.Get` function to access the linked resources.\n\n```\nresource.Get(\"MyBucket\", \"name\")\n```\n\nWhere `MyBucket` is the name of a bucket that’s linked to the function.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n\n  handler: \"./src\",\n\n  link: [bucket]\n});\n```\n\nYou can also access the current app’s info with.\n\n```\nresource.Get(\"App\", \"name\")\n\nresource.Get(\"App\", \"stage\")\n```\n\nClient functions are currently **not supported** in the Go SDK.\n", "metadata": {"source_url": "https://sst.dev/docs/reference/sdk", "title": "SDK", "description": "Interact with your infrastructure in your runtime code.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:18:21", "type": "overview", "page_metadata": {"ogTitle": "SDK", "og:image": "https://social-cards.sst.dev/v3-docs/U0RL.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogUrl": "https://sst.dev/docs/reference/sdk/", "twitter:image": "https://social-cards.sst.dev/v3-docs/U0RL.png", "ogDescription": "Interact with your infrastructure in your runtime code.", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "og:description": "Interact with your infrastructure in your runtime code.", "og:type": "article", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/U0RL.png", "twitter:card": "summary_large_image", "description": "Interact with your infrastructure in your runtime code.", "og:url": "https://sst.dev/docs/reference/sdk/", "og:site_name": "SST", "title": "SDK | SST", "viewport": "width=device-width, initial-scale=1", "og:title": "SDK", "ogLocale": "en", "scrapeId": "41e31edb-2719-4b06-970a-8445d4ee27a4", "sourceURL": "https://sst.dev/docs/reference/sdk", "url": "https://sst.dev/docs/reference/sdk", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"SDK\"?\n\nAssistant: Here are some code examples:\n\n### Install SST SDK\n```yaml\nnpm install sst\n```\n\n### Access Linked Resource in Node.js\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n### Linking a Bucket to a Function in Node.js\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n\n  handler: \"src/lambda.handler\",\n\n  link: [bucket]\n});\n```\n\n### Access App Info in Node.js\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.App.name, Resource.App.stage);\n```\n\n### Using Realtime Client in Node.js\n```yaml\nimport { realtime } from \"sst/aws/realtime\";\n\nexport const handler = realtime.authorizer(async (token) => {\n\n  // Validate the token\n\n});\n```\n\n### Access Linked Resource in Golang\n```yaml\nresource.Get(\"MyBucket\", \"name\")\n```\n\n### Linking a Bucket to a Function in Golang\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n\n  handler: \"./src\",\n\n  link: [bucket]\n});\n```\n\n### Access App Info in Golang\n```yaml\nresource.Get(\"App\", \"name\")\n\nresource.Get(\"App\", \"stage\")\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/reference/sdk", "title": "SDK", "description": "Interact with your infrastructure in your runtime code.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:18:21", "type": "code_examples", "page_metadata": {"ogTitle": "SDK", "og:image": "https://social-cards.sst.dev/v3-docs/U0RL.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogUrl": "https://sst.dev/docs/reference/sdk/", "twitter:image": "https://social-cards.sst.dev/v3-docs/U0RL.png", "ogDescription": "Interact with your infrastructure in your runtime code.", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "og:description": "Interact with your infrastructure in your runtime code.", "og:type": "article", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/U0RL.png", "twitter:card": "summary_large_image", "description": "Interact with your infrastructure in your runtime code.", "og:url": "https://sst.dev/docs/reference/sdk/", "og:site_name": "SST", "title": "SDK | SST", "viewport": "width=device-width, initial-scale=1", "og:title": "SDK", "ogLocale": "en", "scrapeId": "41e31edb-2719-4b06-970a-8445d4ee27a4", "sourceURL": "https://sst.dev/docs/reference/sdk", "url": "https://sst.dev/docs/reference/sdk", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"SDK\"?\n\nAssistant: Here are the recommended best practices:\n\n• The SDK is currently only available for JavaScript/TypeScript and Golang. Support for other languages is on the roadmap.\n• Ensure to link resources properly in your functions to access them using the SDK.\n", "metadata": {"source_url": "https://sst.dev/docs/reference/sdk", "title": "SDK", "description": "Interact with your infrastructure in your runtime code.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:18:21", "type": "best_practices", "page_metadata": {"ogTitle": "SDK", "og:image": "https://social-cards.sst.dev/v3-docs/U0RL.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogUrl": "https://sst.dev/docs/reference/sdk/", "twitter:image": "https://social-cards.sst.dev/v3-docs/U0RL.png", "ogDescription": "Interact with your infrastructure in your runtime code.", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "og:description": "Interact with your infrastructure in your runtime code.", "og:type": "article", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/U0RL.png", "twitter:card": "summary_large_image", "description": "Interact with your infrastructure in your runtime code.", "og:url": "https://sst.dev/docs/reference/sdk/", "og:site_name": "SST", "title": "SDK | SST", "viewport": "width=device-width, initial-scale=1", "og:title": "SDK", "ogLocale": "en", "scrapeId": "41e31edb-2719-4b06-970a-8445d4ee27a4", "sourceURL": "https://sst.dev/docs/reference/sdk", "url": "https://sst.dev/docs/reference/sdk", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Config\"?\n\nAssistant: Reference doc for the `sst.config.ts`.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `sst.config.ts` file is used to configure your SST app and its resources.\n\n## $config Function\nYou specify it using the `$config` function. This takes an object of type [`Config`](https://sst.dev/docs/reference/config#config).\n\n## Config Object\nThe `Config` object takes:\n1. [`app`](https://sst.dev/docs/reference/config#app-2) — Your config\n2. [`run`](https://sst.dev/docs/reference/config#run) — Your resources\n3. [`console`](https://sst.dev/docs/reference/config#console) — Optionally, your app’s Console config\n\n## .env Files\nYour `.env` and `.env.<stage>` files are loaded as environment variables in your config. They need to be in the same directory as your `sst.config.ts`.\n\n## Config Structure\nThe `app` function is evaluated right when your app loads. It’s used to define the app config and its providers.\n\nYou can add Pulumi code in the `run` function not the `app` function. While the `run` function is where you define your resources using SST or Pulumi’s components.\n\n## Console Configuration\nConfigure how your app works with the SST Console.\n\n## Autodeploy\nAuto-deploys your app when you _git push_ to your repo. Uses [AWS CodeBuild](https://aws.amazon.com/codebuild/) in your account to run the build.\n\n## Runner Configuration\nA _runner_ is a [AWS CodeBuild](https://aws.amazon.com/codebuild/) project and an IAM Role. This is created in **your account**.\n\n## Tips and Best Practices\nSince SST manages importing your provider packages, it’s recommended not to add any imports in your `sst.config.ts`.\n", "metadata": {"source_url": "https://sst.dev/docs/reference/config", "title": "Config", "description": "Reference doc for the `sst.config.ts`.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 20:46:44", "type": "overview", "page_metadata": {"language": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "Config", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.config.ts`.", "og:site_name": "SST", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/reference/config/", "og:image": "https://social-cards.sst.dev/v3-docs/Q29uZmln.png", "ogTitle": "Config", "description": "Reference doc for the `sst.config.ts`.", "title": "Config | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29uZmln.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29uZmln.png", "og:url": "https://sst.dev/docs/reference/config/", "og:locale": "en", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.config.ts`.", "scrapeId": "7f3c1110-b12a-4b0e-8b1b-d8bd84307522", "sourceURL": "https://sst.dev/docs/reference/config", "url": "https://sst.dev/docs/reference/config", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Config\"?\n\nAssistant: Here are some code examples:\n\n### $config Example\n```yaml\nexport default $config({\n  app(input) {\n    return {\n      name: \"my-sst-app\",\n      home: \"aws\"\n    };\n  },\n  async run() {\n    const bucket = new sst.aws.Bucket(\"MyBucket\");\n    return {\n      bucket: bucket.name\n    };\n  },\n  console: {\n    autodeploy: {\n      runner: { compute: \"large\" }\n    }\n  }\n});\n```\n\n### Environment Variable Example\n```yaml\nMY_ENV_VAR=hello\nprocess.env.MY_ENV_VAR\n```\n\n### Autodeploy Target Example\n```yaml\n{\n  autodeploy: {\n    target(event) {\n      if (\n        event.type === \"branch\" &&\n        event.branch === \"main\" &&\n        event.action === \"pushed\"\n      ) {\n        return { stage: \"production\" };\n      }\n    },\n    runner(stage) {\n      if (stage === \"production\") return { timeout: \"3 hours\" };\n    }\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/reference/config", "title": "Config", "description": "Reference doc for the `sst.config.ts`.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 20:46:44", "type": "code_examples", "page_metadata": {"language": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "Config", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.config.ts`.", "og:site_name": "SST", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/reference/config/", "og:image": "https://social-cards.sst.dev/v3-docs/Q29uZmln.png", "ogTitle": "Config", "description": "Reference doc for the `sst.config.ts`.", "title": "Config | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29uZmln.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29uZmln.png", "og:url": "https://sst.dev/docs/reference/config/", "og:locale": "en", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.config.ts`.", "scrapeId": "7f3c1110-b12a-4b0e-8b1b-d8bd84307522", "sourceURL": "https://sst.dev/docs/reference/config", "url": "https://sst.dev/docs/reference/config", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Config\"?\n\nAssistant: Here are the recommended best practices:\n\n• Since SST manages importing your provider packages, it’s recommended not to add any imports in your `sst.config.ts`.\n", "metadata": {"source_url": "https://sst.dev/docs/reference/config", "title": "Config", "description": "Reference doc for the `sst.config.ts`.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 20:46:44", "type": "best_practices", "page_metadata": {"language": "en", "viewport": "width=device-width, initial-scale=1", "og:title": "Config", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.config.ts`.", "og:site_name": "SST", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/reference/config/", "og:image": "https://social-cards.sst.dev/v3-docs/Q29uZmln.png", "ogTitle": "Config", "description": "Reference doc for the `sst.config.ts`.", "title": "Config | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29uZmln.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29uZmln.png", "og:url": "https://sst.dev/docs/reference/config/", "og:locale": "en", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.config.ts`.", "scrapeId": "7f3c1110-b12a-4b0e-8b1b-d8bd84307522", "sourceURL": "https://sst.dev/docs/reference/config", "url": "https://sst.dev/docs/reference/config", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Linkable\"?\n\nAssistant: Reference doc for the `sst.Linkable` component.\n\nHere's a detailed explanation:\n\n\n## Linking any value\nThe `Linkable` component takes a list of properties that you want to link. These can be outputs from other resources or constants.\n\n```\nnew sst.Linkable(\"MyLinkable\", {\n  properties: { foo: \"bar\" }\n});\n```\n\nYou can also use this to combine multiple resources into a single linkable resource. And optionally include permissions or bindings for the linked resource.\n\n```\nconst bucketA = new sst.aws.Bucket(\"MyBucketA\");\nconst bucketB = new sst.aws.Bucket(\"MyBucketB\");\n\nconst storage = new sst.Linkable(\"MyStorage\", {\n  properties: {\n    foo: \"bar\",\n    bucketA: bucketA.name,\n    bucketB: bucketB.name\n  },\n  include: [\n    sst.aws.permission({\n      actions: [\"s3:*\"],\n      resources: [bucketA.arn, bucketB.arn]\n    })\n  ]\n});\n```\n\nYou can now link this resource to your frontend or a function.\n\n```\nnew sst.aws.Function(\"MyApi\", {\n  handler: \"src/lambda.handler\",\n  link: [storage]\n});\n```\n\nThen use the [SDK](https://sst.dev/docs/reference/sdk/) to access it at runtime.\n\n```\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyStorage.bucketA);\n``\n", "metadata": {"source_url": "https://sst.dev/docs/component/linkable", "title": "Linkable", "description": "Reference doc for the `sst.Linkable` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:49:30", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/TGlua2FibGU%3D.png", "title": "Linkable | SST", "ogTitle": "Linkable", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/linkable/", "og:url": "https://sst.dev/docs/component/linkable/", "og:type": "article", "description": "Reference doc for the `sst.Linkable` component.", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/TGlua2FibGU%3D.png", "og:title": "Linkable", "twitter:image": "https://social-cards.sst.dev/v3-docs/TGlua2FibGU%3D.png", "og:locale": "en", "og:description": "Reference doc for the `sst.Linkable` component.", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "ogDescription": "Reference doc for the `sst.Linkable` component.", "language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "favicon": "https://sst.dev/favicon.ico", "scrapeId": "efb2c61e-bec4-44bc-a678-4a3ebe36444f", "sourceURL": "https://sst.dev/docs/component/linkable", "url": "https://sst.dev/docs/component/linkable", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Linkable\"?\n\nAssistant: Here are some code examples:\n\n### Linking any value\n```yaml\nnew sst.Linkable(\"MyLinkable\", {\n  properties: { foo: \"bar\" }\n});\n```\n\n### Combining multiple resources into a single linkable resource\n```yaml\nconst bucketA = new sst.aws.Bucket(\"MyBucketA\");\nconst bucketB = new sst.aws.Bucket(\"MyBucketB\");\n\nconst storage = new sst.Linkable(\"MyStorage\", {\n  properties: {\n    foo: \"bar\",\n    bucketA: bucketA.name,\n    bucketB: bucketB.name\n  },\n  include: [\n    sst.aws.permission({\n      actions: [\"s3:*\"],\n      resources: [bucketA.arn, bucketB.arn]\n    })\n  ]\n});\n```\n\n### Linking a function to a resource\n```yaml\nnew sst.aws.Function(\"MyApi\", {\n  handler: \"src/lambda.handler\",\n  link: [storage]\n});\n```\n\n### Wrapping a Pulumi Resource class\n```yaml\nsst.Linkable.wrap(aws.dynamodb.Table, (table) => ({\n  properties: { tableName: table.name },\n  include: [\n    sst.aws.permission({\n      actions: [\"dynamodb:*\"],\n      resources: [table.arn]\n    })\n  ]\n}));\n```\n\n### Creating an instance of aws.dynamodb.Table\n```yaml\nconst table = new aws.dynamodb.Table(\"MyTable\", {\n  attributes: [{ name: \"id\", type: \"S\" }],\n  hashKey: \"id\"\n});\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [table]\n});\n```\n\n### Modifying built-in links\n```yaml\nsst.Linkable.wrap(sst.aws.Bucket, (bucket) => ({\n  properties: { name: bucket.name },\n  include: [\n    sst.aws.permission({\n      actions: [\"s3:GetObject\"],\n      resources: [bucket.arn]\n    })\n  ]\n}));\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/linkable", "title": "Linkable", "description": "Reference doc for the `sst.Linkable` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:49:30", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/TGlua2FibGU%3D.png", "title": "Linkable | SST", "ogTitle": "Linkable", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/linkable/", "og:url": "https://sst.dev/docs/component/linkable/", "og:type": "article", "description": "Reference doc for the `sst.Linkable` component.", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/TGlua2FibGU%3D.png", "og:title": "Linkable", "twitter:image": "https://social-cards.sst.dev/v3-docs/TGlua2FibGU%3D.png", "og:locale": "en", "og:description": "Reference doc for the `sst.Linkable` component.", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "ogDescription": "Reference doc for the `sst.Linkable` component.", "language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "favicon": "https://sst.dev/favicon.ico", "scrapeId": "efb2c61e-bec4-44bc-a678-4a3ebe36444f", "sourceURL": "https://sst.dev/docs/component/linkable", "url": "https://sst.dev/docs/component/linkable", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Linkable\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can link any resources in your app, not just the built-in SST components.\n• You can modify how SST creates links, such as changing permissions of a linkable resource.\n", "metadata": {"source_url": "https://sst.dev/docs/component/linkable", "title": "Linkable", "description": "Reference doc for the `sst.Linkable` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:49:30", "type": "best_practices", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/TGlua2FibGU%3D.png", "title": "Linkable | SST", "ogTitle": "Linkable", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/linkable/", "og:url": "https://sst.dev/docs/component/linkable/", "og:type": "article", "description": "Reference doc for the `sst.Linkable` component.", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/TGlua2FibGU%3D.png", "og:title": "Linkable", "twitter:image": "https://social-cards.sst.dev/v3-docs/TGlua2FibGU%3D.png", "og:locale": "en", "og:description": "Reference doc for the `sst.Linkable` component.", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "ogDescription": "Reference doc for the `sst.Linkable` component.", "language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "favicon": "https://sst.dev/favicon.ico", "scrapeId": "efb2c61e-bec4-44bc-a678-4a3ebe36444f", "sourceURL": "https://sst.dev/docs/component/linkable", "url": "https://sst.dev/docs/component/linkable", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Environment Variables\"?\n\nAssistant: Manage the environment variables in your app.\n\nHere's a detailed explanation:\n\n\n## Recommended\nTypically, you’ll use environment variables or `.env` files to share things like database URLs, secrets, or other config.\n\nTo understand why we don’t recommend `.env` files, let’s look at each of these in detail.\n\n## Links\nA very common use case for `.env` is to share something like a database URL across your app.\n\nInstead in SST, you can link the resources together.\n\n```javascript\nconst rds = new sst.aws.Postgres(\"MyPostgres\");\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n\n  link: [rds]\n\n});\n```\n\nYou can then access the database in your Next.js app with the [JS SDK](https://sst.dev/docs/reference/sdk/).\n\n```javascript\nimport { Resource } from \"sst\";\n\nexport const db = drizzle(client, {\n\n  schema,\n\n  database: Resource.MyPostgres.database,\n\n  secretArn: Resource.MyPostgres.secretArn,\n\n  resourceArn: Resource.MyPostgres.clusterArn\n\n});\n```\n\nThis has a couple of key advantages:\n\n1. You don’t have to deploy your database separately and then store the credentials in a `.env` file.\n2. You don’t need to update this for every stage.\n3. You don’t have to share these URLs with your teammates.\n\nAnybody on your team can just run `sst deploy` on any stage and it’ll deploy the app and link the resources.\n\nYou can learn more about [linking resources](https://sst.dev/docs/linking/).\n\n## Secrets\nAnother common use case for `.env` is to manage secrets across your app.\n\nSST has a built-in way to handle secrets.\n\n```javascript\nconst secret = new sst.Secret(\"MySecret\");\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n\n  link: [secret]\n\n});\n```\n\nYou can set the secret using the `sst secret` CLI.\n\n```bash\nsst secret set MySecret my-secret-value\n```\n\nThis far more secure than storing it in a `.env` file and accidentally committing it to Git.\n\nLearn more about [secrets](https://sst.dev/docs/component/secret).\n\n## Other config\nFinally, people use `.env` files for some general config. These are often different across stages and are not really sensitive. For example, you might have your `SENTRY_DSN` that’s different for dev and prod.\n\nWe recommend putting these directly in your `sst.config.ts` instead. And using the right one based on the stage.\n\n```javascript\nconst SENTRY_DSN = $app.stage !== \"prod\"\n\n   ? \"https://foo@sentry.io/bar\"\n\n   : \"https://baz@sentry.io/qux\";\n```\n\nYou can also conditionally set it based on if you are running `sst dev` or `sst deploy`.\n\n```javascript\nconst SENTRY_DSN = $dev === true\n\n   ? \"https://foo@sentry.io/bar\"\n\n   : \"https://baz@sentry.io/qux\";\n```\n\nAnd you can pass this into your frontends and functions.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n\n  environment: {\n\n    SENTRY_DSN\n\n  }\n\n});\n```\n\nLearn more about [`$app`](https://sst.dev/docs/reference/global#app) and [`$dev`](https://sst.dev/docs/reference/global#dev).\n\n## Traditional\nAs mentioned above, SST also supports the traditional approach. If you run `sst dev` or `sst deploy` with an environment variable:\n\n```bash\nSOME_ENV_VAR=FOO sst deploy\n```\n\nYou can access it using the `process.env` in your `sst.config.ts`.\n\n```javascript\nasync run() {\n\n  console.log(process.env.SOME_ENV_VAR); // FOO\n\n}\n```\n\nHowever, this isn’t automatically added to your frontends or functions. You’ll need to add it manually.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n\n   environment: {\n\n     SOME_ENV_VAR: process.env.SOME_ENV_VAR ?? \"fallback value\",\n\n   }\n\n});\n```\n\nSST doesn’t do this automatically because you might have multiple frontends or functions and you might not want to load it for all of them.\n\nNow you can access it in your frontend.\n\n```javascript\nexport default function Home() {\n\n  return <p>Hello {process.env.SOME_ENV_VAR}</p>;\n\n}\n```\n\n## .env\nThe same thing works if you have a `.env` file in your project root.\n\n```bash\nSOME_ENV_VAR=FOO\n```\n\nIt’ll be loaded into `process.env` in your `sst.config.ts`.\n\n```javascript\nasync run() {\n\n  console.log(process.env.SOME_ENV_VAR); // FOO\n\n}\n```\n\nOr if you have a stage specific `.env.dev` file.\n\n```bash\nSOME_ENV_VAR=BAR\n```\n\nAnd you run `sst deploy --stage dev`, it’ll be loaded into `process.env` in your `sst.config.ts`.\n\n```javascript\nasync run() {\n\n  console.log(process.env.SOME_ENV_VAR); // BAR\n\n}\n```\n\nWhile the traditional approach works, we do not recommend it because it’s both cumbersome and not secure.\n", "metadata": {"source_url": "https://sst.dev/docs/environment-variables", "title": "Environment Variables", "description": "Manage the environment variables in your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:49:58", "type": "overview", "page_metadata": {"og:site_name": "SST", "ogTitle": "Environment Variables", "twitter:card": "summary_large_image", "ogSiteName": "SST", "language": "en", "og:type": "article", "og:image": "https://social-cards.sst.dev/v3-docs/RW52aXJvbm1lbnQlMjBWYXJpYWJsZXM%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/RW52aXJvbm1lbnQlMjBWYXJpYWJsZXM%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/environment-variables/", "ogUrl": "https://sst.dev/docs/environment-variables/", "ogImage": "https://social-cards.sst.dev/v3-docs/RW52aXJvbm1lbnQlMjBWYXJpYWJsZXM%3D.png", "ogDescription": "Manage the environment variables in your app.", "title": "Environment Variables | SST", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "Manage the environment variables in your app.", "description": "Manage the environment variables in your app.", "favicon": "https://sst.dev/favicon.ico", "og:title": "Environment Variables", "og:locale": "en", "scrapeId": "df0c7b86-5be9-46f2-9b2b-5fc5fc27f6d4", "sourceURL": "https://sst.dev/docs/environment-variables", "url": "https://sst.dev/docs/environment-variables", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Environment Variables\"?\n\nAssistant: Here are some code examples:\n\n### Linking Resources Example\n```yaml\nconst rds = new sst.aws.Postgres(\"MyPostgres\");\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n\n  link: [rds]\n\n});\n```\n\n### Accessing Database in Next.js\n```yaml\nimport { Resource } from \"sst\";\n\nexport const db = drizzle(client, {\n\n  schema,\n\n  database: Resource.MyPostgres.database,\n\n  secretArn: Resource.MyPostgres.secretArn,\n\n  resourceArn: Resource.MyPostgres.clusterArn\n\n});\n```\n\n### Setting a Secret\n```yaml\nconst secret = new sst.Secret(\"MySecret\");\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n\n  link: [secret]\n\n});\n```\n\n### Setting a Secret via CLI\n```yaml\nsst secret set MySecret my-secret-value\n```\n\n### SENTRY_DSN Configuration Example\n```yaml\nconst SENTRY_DSN = $app.stage !== \"prod\"\n\n   ? \"https://foo@sentry.io/bar\"\n\n   : \"https://baz@sentry.io/qux\";\n```\n\n### Accessing Environment Variable in sst.config.ts\n```yaml\nasync run() {\n\n  console.log(process.env.SOME_ENV_VAR); // FOO\n\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/environment-variables", "title": "Environment Variables", "description": "Manage the environment variables in your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:49:58", "type": "code_examples", "page_metadata": {"og:site_name": "SST", "ogTitle": "Environment Variables", "twitter:card": "summary_large_image", "ogSiteName": "SST", "language": "en", "og:type": "article", "og:image": "https://social-cards.sst.dev/v3-docs/RW52aXJvbm1lbnQlMjBWYXJpYWJsZXM%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/RW52aXJvbm1lbnQlMjBWYXJpYWJsZXM%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/environment-variables/", "ogUrl": "https://sst.dev/docs/environment-variables/", "ogImage": "https://social-cards.sst.dev/v3-docs/RW52aXJvbm1lbnQlMjBWYXJpYWJsZXM%3D.png", "ogDescription": "Manage the environment variables in your app.", "title": "Environment Variables | SST", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "Manage the environment variables in your app.", "description": "Manage the environment variables in your app.", "favicon": "https://sst.dev/favicon.ico", "og:title": "Environment Variables", "og:locale": "en", "scrapeId": "df0c7b86-5be9-46f2-9b2b-5fc5fc27f6d4", "sourceURL": "https://sst.dev/docs/environment-variables", "url": "https://sst.dev/docs/environment-variables", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Environment Variables\"?\n\nAssistant: Here are the recommended best practices:\n\n• Avoid relying on `.env` files for sensitive information.\n• Use SST's built-in methods for managing secrets instead of `.env` files.\n• Directly configure environment variables in `sst.config.ts` for stage-specific settings.\n", "metadata": {"source_url": "https://sst.dev/docs/environment-variables", "title": "Environment Variables", "description": "Manage the environment variables in your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:49:58", "type": "best_practices", "page_metadata": {"og:site_name": "SST", "ogTitle": "Environment Variables", "twitter:card": "summary_large_image", "ogSiteName": "SST", "language": "en", "og:type": "article", "og:image": "https://social-cards.sst.dev/v3-docs/RW52aXJvbm1lbnQlMjBWYXJpYWJsZXM%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/RW52aXJvbm1lbnQlMjBWYXJpYWJsZXM%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/environment-variables/", "ogUrl": "https://sst.dev/docs/environment-variables/", "ogImage": "https://social-cards.sst.dev/v3-docs/RW52aXJvbm1lbnQlMjBWYXJpYWJsZXM%3D.png", "ogDescription": "Manage the environment variables in your app.", "title": "Environment Variables | SST", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:description": "Manage the environment variables in your app.", "description": "Manage the environment variables in your app.", "favicon": "https://sst.dev/favicon.ico", "og:title": "Environment Variables", "og:locale": "en", "scrapeId": "df0c7b86-5be9-46f2-9b2b-5fc5fc27f6d4", "sourceURL": "https://sst.dev/docs/environment-variables", "url": "https://sst.dev/docs/environment-variables", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Import Resources\"?\n\nAssistant: Import previously created resources into your app.\n\nHere's a detailed explanation:\n\n\n## How it works\nSST keeps a state of your app. It contains all the resources that are managed by your app.\n\nWhen you import a resource, it gets added to this state. This means that if you remove this resource in your code, it’ll also remove the resource.\n\nIt’s as if this resource had been created by your app.\n\n## When not to import\nThis is fine for most cases. But for some teams these resources might be managed by other teams. Or they are being managed by a different IaC tool. Meaning that you don’t want to manage it in your app.\n\nIn these cases you should not be importing these resources. You are probably looking to reference these resources.\n\n## How to import\nYou import resources by passing in a property of the resource you want to import into your app. Resources have a property that you can import with and this is different for different resources. We’ll look at this below.\n\nIf you are importing into an SST component, you’ll need to use a transform to pass it into the underlying resource.\n\n## SST component\nLet’s start with an existing S3 Bucket with the following name.\n\nmybucket-xnbmhcvd\n\nWe want to import this bucket into the Bucket component.\n\n1. Start by adding the import option in the transform.\n\nnew sst.aws.Bucket(\"MyBucket\", {\n\n     transform: {\n\n       bucket: (args, opts) => {\n\n         opts.import = \"mybucket-xnbmhcvd\";\n\n       }\n\n     }\n});\n\nThe transform.bucket is telling this component that instead of creating a new underlying S3 Bucket resource, we want to import an existing bucket.\n\nLet’s deploy this.\n\nsst deploy\n\nThis will give you an error that looks something like this.\n\n✕  Failed\n\n      inputs to import do not match the existing resource\n\n      Set the following in your transform:\n\n   - args.bucket = \"mybucket-xnbmhcvd\";\n   - args.forceDestroy = undefined;\n\nThis is telling us that the resource that the Bucket component is trying to create does not match the one you are trying to import. This makes sense because you might’ve previously created this with a configuration that’s different from what SST creates by default.\n\n2. Update the args\n\nThe above error tells us exactly what we need to do next. Add the given lines to your transform.\n\nnew sst.aws.Bucket(\"MyBucket\", {\n\n     transform: {\n\n       bucket: (args, opts) => {\n\n         args.bucket = \"mybucket-xnbmhcvd\";\n         args.forceDestroy = undefined;\n\n         opts.import = \"mybucket-xnbmhcvd\";\n\n       }\n\n     }\n});\n\nNow if you deploy this again.\n\nsst deploy\n\nYou’ll notice that the bucket has been imported.\n\n|  Imported    MyBucket aws:s3:BucketV2\n\n3. Finally, to clean things up we can remove the import line.\n\nnew sst.aws.Bucket(\"MyBucket\", {\n\n     transform: {\n\n       bucket: (args, opts) => {\n\n         args.bucket = \"mybucket-xnbmhcvd\";\n         args.forceDestroy = undefined;\n\n         opts.import = \"mybucket-xnbmhcvd\";\n\n       }\n\n     }\n});\n\nThis bucket is now managed by your app and you can now deploy as usual.\n\nYou do not want to remove the args changes. This matters for the args.bucket prop because the name is generated by SST. So if you remove this, SST will generate a new bucket name and remove the old one!\n\n## Pulumi resource\nYou might want to also import resources into your SST app that don’t have a built-in SST component. In these cases, you can import them into a low-level Pulumi resource.\n\nLet’s take the same S3 Bucket example. Say you have an existing bucket with the following name.\n\nmybucket-xnbmhcvd\n\nWe want to import this bucket into the aws.s3.BucketV2 resource.\n\n1. Start by adding the import option.\n\nnew aws.s3.BucketV2(\"MyBucket\",\n\n     {\n       objectLockEnabled: undefined\n     },\n     {\n       import: \"mybucket-xnbmhcvd\"\n     }\n);\n\nThe objectLockEnabled prop here, is for illustrative purposes. We are trying to demonstrate a case where you are importing a resource in a way that it wasn’t created.\n\nLet’s deploy this.\n\nsst deploy\n\nThis will give you an error that looks something like this.\n\n✕  Failed\n\n      inputs to import do not match the existing resource\n\n      Set the following:\n\n   - objectLockEnabled: undefined,\n\nThis is telling us that the resource that the BucketV2 component is trying to create does not match the one you are trying to import.\n\nThis makes sense because you might’ve previously created this with a configuration that’s different from what you are defining. Recall the objectLockEnabled prop we had added above.\n\n2. Update the args\n\nThe above error tells us exactly what we need to do next. Add the given lines in your args.\n\nnew aws.s3.BucketV2(\"MyBucket\",\n\n     {\n       objectLockEnabled: undefined\n     },\n     {\n       import: \"mybucket-xnbmhcvd\"\n     }\n);\n\nNow if you deploy this again.\n\nsst deploy\n\nYou’ll notice that the bucket has been imported.\n\n|  Imported    MyBucket aws:s3:BucketV2\n\n3. Finally, to clean things up we can remove the import line.\n\nnew aws.s3.BucketV2(\"MyBucket\",\n\n     {\n       objectLockEnabled: undefined\n     },\n     {\n       import: \"mybucket-xnbmhcvd\"\n     }\n);\n\nThis bucket is now managed by your app and you can now deploy as usual.\n\n## Import properties\nIn the above examples we are importing a bucket using the bucket name. We need the bucket name because that’s what AWS internally uses to do a lookup. But this is different for different resources.\n\nSo we’ve compiled a list of the most common resources you might import, along with the property to import them with.\n\nThe following table lists the properties you need to pass in to the import prop of the given resource to be able to import it.\n\nFor example, for aws.s3.BucketV2, the property is _bucket name_ and it looks something like, some-unique-bucket-name.\n\n| Resource | Property | Example |\n| --- | --- | --- |\n| aws.ec2.Vpc | VPC ID | vpc-a01106c2 |\n| aws.iam.Role | Role name | role-name |\n| aws.sqs.Queue | Queue URL | https://queue.amazonaws.com/80398EXAMPLE/MyQueue |\n| aws.sns.Topic | Topic ARN | arn:aws:sns:us-west-2:0123456789012:my-topic |\n| aws.rds.Cluster | Cluster identifier | aurora-prod-cluster |\n| aws.ecs.Service | Cluster and service name | cluster-name/service-name |\n| aws.ecs.Cluster | Cluster name | cluster-name |\n| aws.s3.BucketV2 | Bucket name | bucket-name |\n| aws.kinesis.Stream | Stream name | my-kinesis-stream |\n| aws.dynamodb.Table | Table name | table-name |\n| aws.lambda.Function | Function name | function-name |\n| aws.apigatewayv2.Api | API ID | 12345abcde |\n| aws.cognito.UserPool | User Pool ID | us-east-1_abc123 |\n| aws.apigateway.RestApi | REST API ID | 12345abcde |\n| aws.cloudwatch.LogGroup | Log Group name | my-log-group |\n| aws.cognito.IdentityPool | Identity Pool ID | us-east-1:1a234567-8901-234b-5cde-f6789g01h2i3 |\n| aws.cloudfront.Distribution | Distribution ID | E74FTE3EXAMPLE |\n", "metadata": {"source_url": "https://sst.dev/docs/import-resources", "title": "Import Resources", "description": "Import previously created resources into your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:50:24", "type": "overview", "page_metadata": {"og:url": "https://sst.dev/docs/import-resources/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/SW1wb3J0JTIwUmVzb3VyY2Vz.png", "og:description": "Import previously created resources into your app.", "og:locale": "en", "description": "Import previously created resources into your app.", "og:type": "article", "language": "en", "ogUrl": "https://sst.dev/docs/import-resources/", "title": "Import Resources | SST", "ogDescription": "Import previously created resources into your app.", "ogTitle": "Import Resources", "ogLocale": "en", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/SW1wb3J0JTIwUmVzb3VyY2Vz.png", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "og:title": "Import Resources", "twitter:image": "https://social-cards.sst.dev/v3-docs/SW1wb3J0JTIwUmVzb3VyY2Vz.png", "scrapeId": "5b5391a1-3340-4c7b-a198-869ad6f353e9", "sourceURL": "https://sst.dev/docs/import-resources", "url": "https://sst.dev/docs/import-resources", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Import Resources\"?\n\nAssistant: Here are some code examples:\n\n### Importing into an SST component\n```yaml\nnew sst.aws.Bucket(\"MyBucket\", {\n     transform: {\n       bucket: (args, opts) => {\n         opts.import = \"mybucket-xnbmhcvd\";\n       }\n     }\n});\n```\n\n### Deploying the SST component\n```yaml\nsst deploy\n```\n\n### Error when deploying\n```yaml\n✕  Failed\n      inputs to import do not match the existing resource\n      Set the following in your transform:\n   - args.bucket = \"mybucket-xnbmhcvd\";\n   - args.forceDestroy = undefined;\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/import-resources", "title": "Import Resources", "description": "Import previously created resources into your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:50:24", "type": "code_examples", "page_metadata": {"og:url": "https://sst.dev/docs/import-resources/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/SW1wb3J0JTIwUmVzb3VyY2Vz.png", "og:description": "Import previously created resources into your app.", "og:locale": "en", "description": "Import previously created resources into your app.", "og:type": "article", "language": "en", "ogUrl": "https://sst.dev/docs/import-resources/", "title": "Import Resources | SST", "ogDescription": "Import previously created resources into your app.", "ogTitle": "Import Resources", "ogLocale": "en", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/SW1wb3J0JTIwUmVzb3VyY2Vz.png", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "og:title": "Import Resources", "twitter:image": "https://social-cards.sst.dev/v3-docs/SW1wb3J0JTIwUmVzb3VyY2Vz.png", "scrapeId": "5b5391a1-3340-4c7b-a198-869ad6f353e9", "sourceURL": "https://sst.dev/docs/import-resources", "url": "https://sst.dev/docs/import-resources", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Import Resources\"?\n\nAssistant: Here are the recommended best practices:\n\n• You do not want to remove the args changes. This matters for the args.bucket prop because the name is generated by SST. So if you remove this, SST will generate a new bucket name and remove the old one!\n", "metadata": {"source_url": "https://sst.dev/docs/import-resources", "title": "Import Resources", "description": "Import previously created resources into your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:50:24", "type": "best_practices", "page_metadata": {"og:url": "https://sst.dev/docs/import-resources/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/SW1wb3J0JTIwUmVzb3VyY2Vz.png", "og:description": "Import previously created resources into your app.", "og:locale": "en", "description": "Import previously created resources into your app.", "og:type": "article", "language": "en", "ogUrl": "https://sst.dev/docs/import-resources/", "title": "Import Resources | SST", "ogDescription": "Import previously created resources into your app.", "ogTitle": "Import Resources", "ogLocale": "en", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/SW1wb3J0JTIwUmVzb3VyY2Vz.png", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "og:title": "Import Resources", "twitter:image": "https://social-cards.sst.dev/v3-docs/SW1wb3J0JTIwUmVzb3VyY2Vz.png", "scrapeId": "5b5391a1-3340-4c7b-a198-869ad6f353e9", "sourceURL": "https://sst.dev/docs/import-resources", "url": "https://sst.dev/docs/import-resources", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"All Providers\"?\n\nAssistant: Use 150+ Pulumi or Terraform providers in your app.\n\nHere's a detailed explanation:\n\n\n## Add a provider\nTo add a provider to your app run.\n\n```\n\nsst add <provider>\n```\n\nThis command adds the provider to your config, installs the packages, and adds the namespace of the provider to your globals.\n\nSST manages these packages internally and you do not need to import the package in your `sst.config.ts`.\n\nFor example, to add the Stripe provider.\n\n```\n\nsst add stripe\n```\n\nRead more about [providers](https://sst.dev/docs/providers).\n\n## Preloaded\nSST comes preloaded with the following providers, so you **don’t need to add them**.\n\n- [AWS](https://www.pulumi.com/registry/packages/aws/)\n- [Cloudflare](https://www.pulumi.com/registry/packages/cloudflare/)\n\nThese are used internally to power the [built-in](https://sst.dev/docs/components#built-in) components.\n\n## Use a resource\nOnce added, you can use a resource from the provider in your `sst.config.ts`.\n\nFor example, use a Stripe resource in your config’s `run` function.\n\n```\n\nexport default $config({\n\n  // ...\n\n  async run() {\n\n    new stripe.Product(\"MyStripeProduct\", {\n\n      name: \"SST Paid Plan\",\n\n      description: \"This is how SST makes money\",\n\n    });\n\n  },\n\n});\n```\n\nAs mentioned above, since the AWS provider comes preloaded, you can use any AWS resource directly as well.\n\n```\n\nnew aws.apprunner.Service(\"MyService\", {\n\n  serviceName: \"example\",\n\n  sourceConfiguration: {\n\n    imageRepository: {\n\n      imageConfiguration: {\n\n        port: \"8000\"\n\n      },\n\n      imageIdentifier: \"public.ecr.aws/aws-containers/hello-app-runner:latest\",\n\n      imageRepositoryType: \"ECR_PUBLIC\"\n\n    }\n\n  }\n\n});\n```\n\n## Directory\nBelow is the full list of providers that SST supports.\n\n```\n\nsst add <provider>\n```\n\nInstall any of the following using the package name as the `provider`. For example, `sst add auth0`.\n\nIf you want SST to support a Terraform provider or update a version, you can **submit a PR** to the [sst/provider](https://github.com/sst/provider) repo.\n", "metadata": {"source_url": "https://sst.dev/docs/all-providers", "title": "All Providers", "description": "Use 150+ Pulumi or Terraform providers in your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 20:50:37", "type": "overview", "page_metadata": {"ogDescription": "Use 150+ Pulumi or Terraform providers in your app.", "ogUrl": "https://sst.dev/docs/all-providers/", "twitter:card": "summary_large_image", "ogTitle": "All Providers", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QWxsJTIwUHJvdmlkZXJz.png", "og:title": "All Providers", "og:image": "https://social-cards.sst.dev/v3-docs/QWxsJTIwUHJvdmlkZXJz.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "language": "en", "og:description": "Use 150+ Pulumi or Terraform providers in your app.", "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "ogSiteName": "SST", "title": "All Providers | SST", "og:url": "https://sst.dev/docs/all-providers/", "description": "Use 150+ Pulumi or Terraform providers in your app.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QWxsJTIwUHJvdmlkZXJz.png", "scrapeId": "bdab1423-08db-4f24-8a05-e637095bff9e", "sourceURL": "https://sst.dev/docs/all-providers", "url": "https://sst.dev/docs/all-providers", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"All Providers\"?\n\nAssistant: Here are some code examples:\n\n### Add a provider command\n```yaml\nsst add <provider>\n```\n\n### Add Stripe provider\n```yaml\nsst add stripe\n```\n\n### Use Stripe resource in config\n```yaml\nexport default $config({\n\n  // ...\n\n  async run() {\n\n    new stripe.Product(\"MyStripeProduct\", {\n\n      name: \"SST Paid Plan\",\n\n      description: \"This is how SST makes money\",\n\n    });\n\n  },\n\n});\n```\n\n### Use AWS resource in config\n```yaml\nnew aws.apprunner.Service(\"MyService\", {\n\n  serviceName: \"example\",\n\n  sourceConfiguration: {\n\n    imageRepository: {\n\n      imageConfiguration: {\n\n        port: \"8000\"\n\n      },\n\n      imageIdentifier: \"public.ecr.aws/aws-containers/hello-app-runner:latest\",\n\n      imageRepositoryType: \"ECR_PUBLIC\"\n\n    }\n\n  }\n\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/all-providers", "title": "All Providers", "description": "Use 150+ Pulumi or Terraform providers in your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 20:50:37", "type": "code_examples", "page_metadata": {"ogDescription": "Use 150+ Pulumi or Terraform providers in your app.", "ogUrl": "https://sst.dev/docs/all-providers/", "twitter:card": "summary_large_image", "ogTitle": "All Providers", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QWxsJTIwUHJvdmlkZXJz.png", "og:title": "All Providers", "og:image": "https://social-cards.sst.dev/v3-docs/QWxsJTIwUHJvdmlkZXJz.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "language": "en", "og:description": "Use 150+ Pulumi or Terraform providers in your app.", "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "ogSiteName": "SST", "title": "All Providers | SST", "og:url": "https://sst.dev/docs/all-providers/", "description": "Use 150+ Pulumi or Terraform providers in your app.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QWxsJTIwUHJvdmlkZXJz.png", "scrapeId": "bdab1423-08db-4f24-8a05-e637095bff9e", "sourceURL": "https://sst.dev/docs/all-providers", "url": "https://sst.dev/docs/all-providers", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"All Providers\"?\n\nAssistant: Here are the recommended best practices:\n\n• SST manages these packages internally and you do not need to import the package in your sst.config.ts.\n• You don’t need to add preloaded providers like AWS and Cloudflare.\n", "metadata": {"source_url": "https://sst.dev/docs/all-providers", "title": "All Providers", "description": "Use 150+ Pulumi or Terraform providers in your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 20:50:37", "type": "best_practices", "page_metadata": {"ogDescription": "Use 150+ Pulumi or Terraform providers in your app.", "ogUrl": "https://sst.dev/docs/all-providers/", "twitter:card": "summary_large_image", "ogTitle": "All Providers", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QWxsJTIwUHJvdmlkZXJz.png", "og:title": "All Providers", "og:image": "https://social-cards.sst.dev/v3-docs/QWxsJTIwUHJvdmlkZXJz.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "language": "en", "og:description": "Use 150+ Pulumi or Terraform providers in your app.", "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "ogSiteName": "SST", "title": "All Providers | SST", "og:url": "https://sst.dev/docs/all-providers/", "description": "Use 150+ Pulumi or Terraform providers in your app.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QWxsJTIwUHJvdmlkZXJz.png", "scrapeId": "bdab1423-08db-4f24-8a05-e637095bff9e", "sourceURL": "https://sst.dev/docs/all-providers", "url": "https://sst.dev/docs/all-providers", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Reference Resources\"?\n\nAssistant: Reference externally created resources in your app.\n\nHere's a detailed explanation:\n\n\n## Lookup a resource\nLet’s say you have an existing resource that you want to use in your SST app.\n\nYou can look it up by passing in a property of the resource. For example, to look up a previously created S3 Bucket with the following name.\n\n```\nmybucket-xnbmhcvd\n```\n\nWe can use the [`static aws.s3.BucketV2.get`](https://www.pulumi.com/registry/packages/aws/api-docs/s3/bucketv2/#look-up) method.\n\n```\nconst bucket = aws.s3.BucketV2.get(\"MyBucket\", \"mybucket-xnbmhcvd\");\n```\n\nThis gives you the same bucket object that you’d get if you had created this resource in your app.\n\nHere we are assuming the bucket wasn’t created through an SST app. This is why we are using the low-level `aws.s3.BucketV2`. If this was created in an SST app or in another stage in the same app, there’s a similar `static sst.aws.Bucket.get` method. Learn more about [sharing across stages](https://sst.dev/docs/share-across-stages).\n\n## How it works\nWhen you create a resource in your SST app, two things happen. First, the resource is created by making a bunch of calls to your cloud provider. Second, SST makes a call to _get_ the resource from the cloud provider. The data that it gets back is stored in your [state](https://sst.dev/docs/state/).\n\nWhen you lookup a resource, it skips the creation step and just gets the resource. It does this every time you deploy. But the object you get in both cases is the same.\n\n## Lookup properties\nThe properties used to do a lookup are the same ones that you’d use if you were trying to import them.\n\nWe’ve compiled a list of the most commonly lookedup low-level resources and their [Import Properties](https://sst.dev/docs/import-resources/#import-properties).\n\nMost low-level resources come with a `static get` method that use this property to look up the resource.\n\n## Make it linkable\nLet’s take it a step further.\n\nYou can use the [`sst.Linkable`](https://sst.dev/docs/component/linkable/) component, to be able to link any property of this resource.\n\n```\nconst storage = new sst.Linkable(\"MyStorage\", {\n  properties: {\n    domain: bucket.bucketDomainName\n  }\n});\n```\n\nHere we are using the domain name of the bucket as an example.\n\n## Link to it\nAnd link it to a function.\n\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [storage]\n});\n```\n\nNow you can use the [SDK](https://sst.dev/docs/reference/sdk/) to access them at runtime.\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyStorage.domain);\n```\n\n## Pass in a resource\nAside from looking up resources, you can also pass existing resources in to the built-in SST components. This is typically when you are trying to create a new resource and it takes another resource as a part of it.\n\nFor example, let’s say you want to add a previously created function as a subscriber to a queue. You can do so by passing its ARN.\n\n```\nconst queue = new sst.aws.Queue(\"MyQueue\");\n\nqueue.subscribe(\"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n```\n\n## How it works\nSST is simply asking for the props the underlying resource needs. In this case, it only needs the function ARN.\n\nHowever, for more complicated resources like VPCs, you might have to pass in a lot more. Here we are creating a new function in an existing VPC.\n\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  vpc: {\n    subnets: [\"subnet-0be8fa4de860618bb\"],\n    securityGroups: [\"sg-0be8fa4de860618bb\"]\n  }\n});\n```\n\nWhereas, for the `Cluster` component, you might need to pass in a lot more.\n\n```\nnew sst.aws.Cluster(\"MyCluster\", {\n  vpc: {\n    id: \"vpc-0be8fa4de860618bb\",\n    securityGroups: [\"sg-0be8fa4de860618bb\"],\n    containerSubnets: [\"subnet-0be8fa4de860618bb\"],\n    loadBalancerSubnets: [\"subnet-8be8fa4de850618ff\"]\n  }\n});\n```\n\n## Attach to a resource\nReferencing existing resources also comes in handy when you are attaching to an existing resource. For example, to add a subscriber to an externally created queue:\n\n```\nsst.aws.Queue.subscribe(\"arn:aws:sqs:us-east-1:123456789012:MyQueue\", \"src/subscriber.handler\");\n```\n\nHere we are using the `static subscribe` method of the `Queue` component. And it takes the queue ARN that you are trying to attach to.\n\nThere are a few other built-in SST components that have `static` methods like this.\n\n- `Bus`\n- `Dynamo`\n- `SnsTopic`\n- `KinesisStream`\n\nWith this you can continue to manage the root resource outside of SST, while still being able to attach to them.\n", "metadata": {"source_url": "https://sst.dev/docs/reference-resources", "title": "Reference Resources", "description": "Reference externally created resources in your app.", "has_code_examples": true, "has_best_practices": false, "section_count": 8, "timestamp": "2025-02-27 20:51:00", "type": "overview", "page_metadata": {"language": "en", "og:title": "Reference Resources", "og:image": "https://social-cards.sst.dev/v3-docs/UmVmZXJlbmNlJTIwUmVzb3VyY2Vz.png", "ogSiteName": "SST", "twitter:card": "summary_large_image", "og:type": "article", "og:locale": "en", "ogTitle": "Reference Resources", "description": "Reference externally created resources in your app.", "ogUrl": "https://sst.dev/docs/reference-resources/", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference externally created resources in your app.", "title": "Reference Resources | SST", "og:url": "https://sst.dev/docs/reference-resources/", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVmZXJlbmNlJTIwUmVzb3VyY2Vz.png", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVmZXJlbmNlJTIwUmVzb3VyY2Vz.png", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference externally created resources in your app.", "scrapeId": "669854cd-6300-4160-83a2-2b3e2d692b13", "sourceURL": "https://sst.dev/docs/reference-resources", "url": "https://sst.dev/docs/reference-resources", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Reference Resources\"?\n\nAssistant: Here are some code examples:\n\n### Lookup a resource\n```yaml\nconst bucket = aws.s3.BucketV2.get(\"MyBucket\", \"mybucket-xnbmhcvd\");\n```\n\n### Make it linkable\n```yaml\nconst storage = new sst.Linkable(\"MyStorage\", {\n  properties: {\n    domain: bucket.bucketDomainName\n  }\n});\n```\n\n### Link to it\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [storage]\n});\n```\n\n### Pass in a resource\n```yaml\nconst queue = new sst.aws.Queue(\"MyQueue\");\n\nqueue.subscribe(\"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n```\n\n### Creating a new function in an existing VPC\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  vpc: {\n    subnets: [\"subnet-0be8fa4de860618bb\"],\n    securityGroups: [\"sg-0be8fa4de860618bb\"]\n  }\n});\n```\n\n### Creating a new cluster\n```yaml\nnew sst.aws.Cluster(\"MyCluster\", {\n  vpc: {\n    id: \"vpc-0be8fa4de860618bb\",\n    securityGroups: [\"sg-0be8fa4de860618bb\"],\n    containerSubnets: [\"subnet-0be8fa4de860618bb\"],\n    loadBalancerSubnets: [\"subnet-8be8fa4de850618ff\"]\n  }\n});\n```\n\n### Attach to a resource\n```yaml\nsst.aws.Queue.subscribe(\"arn:aws:sqs:us-east-1:123456789012:MyQueue\", \"src/subscriber.handler\");\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/reference-resources", "title": "Reference Resources", "description": "Reference externally created resources in your app.", "has_code_examples": true, "has_best_practices": false, "section_count": 8, "timestamp": "2025-02-27 20:51:00", "type": "code_examples", "page_metadata": {"language": "en", "og:title": "Reference Resources", "og:image": "https://social-cards.sst.dev/v3-docs/UmVmZXJlbmNlJTIwUmVzb3VyY2Vz.png", "ogSiteName": "SST", "twitter:card": "summary_large_image", "og:type": "article", "og:locale": "en", "ogTitle": "Reference Resources", "description": "Reference externally created resources in your app.", "ogUrl": "https://sst.dev/docs/reference-resources/", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference externally created resources in your app.", "title": "Reference Resources | SST", "og:url": "https://sst.dev/docs/reference-resources/", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVmZXJlbmNlJTIwUmVzb3VyY2Vz.png", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVmZXJlbmNlJTIwUmVzb3VyY2Vz.png", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference externally created resources in your app.", "scrapeId": "669854cd-6300-4160-83a2-2b3e2d692b13", "sourceURL": "https://sst.dev/docs/reference-resources", "url": "https://sst.dev/docs/reference-resources", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Common Errors\"?\n\nAssistant: A list of CLI error messages and how to fix them.\n\nHere's a detailed explanation:\n\n\n## TooManyCacheBehaviors\nTooManyCacheBehaviors: Your request contains more CacheBehaviors than are allowed per distribution\n\nThis error usually happens to `SvelteKit`, `SolidStart`, `Nuxt`, and `Analog` components.\n\nCloudFront distributions have a **limit of 25 cache behaviors** per distribution. Each top-level file or directory in your frontend app’s asset directory creates a cache behavior.\n\nFor example, in the case of SvelteKit, the static assets are in the `static/` directory. If you have a file and a directory in it, it’ll create 2 cache behaviors.\n\n```\nstatic/\n├── icons/       # Cache behavior for /icons/*\n└── logo.png     # Cache behavior for /logo.png\n``\n\nSo if you have many of these at the top-level, you’ll hit the limit. You can request a limit increase through the AWS Support.\n\nAlternatively, you can move some of these into subdirectories. For example, moving them to an `images/` directory, will only create 1 cache behavior.\n\n```\nstatic/\n└── images/      # Cache behavior for /images/*\n    ├── icons/\n    └── logo.png\n``\n\nLearn more about these [CloudFront limits](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-web-distributions).\n", "metadata": {"source_url": "https://sst.dev/docs/common-errors", "title": "Common Errors", "description": "A list of CLI error messages and how to fix them.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:51:10", "type": "overview", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "ogSiteName": "SST", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "og:type": "article", "og:description": "A list of CLI error messages and how to fix them.", "ogUrl": "https://sst.dev/docs/common-errors/", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29tbW9uJTIwRXJyb3Jz.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/Q29tbW9uJTIwRXJyb3Jz.png", "og:title": "Common Errors", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29tbW9uJTIwRXJyb3Jz.png", "ogTitle": "Common Errors", "title": "Common Errors | SST", "viewport": "width=device-width, initial-scale=1", "ogDescription": "A list of CLI error messages and how to fix them.", "og:url": "https://sst.dev/docs/common-errors/", "description": "A list of CLI error messages and how to fix them.", "scrapeId": "8b491aec-8d7f-4963-8a67-f4d418e71af1", "sourceURL": "https://sst.dev/docs/common-errors", "url": "https://sst.dev/docs/common-errors", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Common Errors\"?\n\nAssistant: Here are some code examples:\n\n### Cache Behavior Example\n```yaml\n```\nstatic/\n├── icons/       # Cache behavior for /icons/*\n└── logo.png     # Cache behavior for /logo.png\n``\n```\n\n### Subdirectory Cache Behavior Example\n```yaml\n```\nstatic/\n└── images/      # Cache behavior for /images/*\n    ├── icons/\n    └── logo.png\n```\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/common-errors", "title": "Common Errors", "description": "A list of CLI error messages and how to fix them.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:51:10", "type": "code_examples", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "ogSiteName": "SST", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "og:type": "article", "og:description": "A list of CLI error messages and how to fix them.", "ogUrl": "https://sst.dev/docs/common-errors/", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29tbW9uJTIwRXJyb3Jz.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/Q29tbW9uJTIwRXJyb3Jz.png", "og:title": "Common Errors", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29tbW9uJTIwRXJyb3Jz.png", "ogTitle": "Common Errors", "title": "Common Errors | SST", "viewport": "width=device-width, initial-scale=1", "ogDescription": "A list of CLI error messages and how to fix them.", "og:url": "https://sst.dev/docs/common-errors/", "description": "A list of CLI error messages and how to fix them.", "scrapeId": "8b491aec-8d7f-4963-8a67-f4d418e71af1", "sourceURL": "https://sst.dev/docs/common-errors", "url": "https://sst.dev/docs/common-errors", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Common Errors\"?\n\nAssistant: Here are the recommended best practices:\n\n• Request a limit increase through AWS Support if you hit the cache behavior limit.\n• Move assets into subdirectories to reduce the number of cache behaviors.\n", "metadata": {"source_url": "https://sst.dev/docs/common-errors", "title": "Common Errors", "description": "A list of CLI error messages and how to fix them.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 20:51:10", "type": "best_practices", "page_metadata": {"og:locale": "en", "twitter:card": "summary_large_image", "ogSiteName": "SST", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "og:type": "article", "og:description": "A list of CLI error messages and how to fix them.", "ogUrl": "https://sst.dev/docs/common-errors/", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29tbW9uJTIwRXJyb3Jz.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/Q29tbW9uJTIwRXJyb3Jz.png", "og:title": "Common Errors", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29tbW9uJTIwRXJyb3Jz.png", "ogTitle": "Common Errors", "title": "Common Errors | SST", "viewport": "width=device-width, initial-scale=1", "ogDescription": "A list of CLI error messages and how to fix them.", "og:url": "https://sst.dev/docs/common-errors/", "description": "A list of CLI error messages and how to fix them.", "scrapeId": "8b491aec-8d7f-4963-8a67-f4d418e71af1", "sourceURL": "https://sst.dev/docs/common-errors", "url": "https://sst.dev/docs/common-errors", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Vercel DNS Adapter\"?\n\nAssistant: Reference doc for the `sst.vercel.dns` adapter.\n\nHere's a detailed explanation:\n\n\n## Configure provider\n1. To use this component, add the `@pulumiverse/vercel` provider to your app.\n\n```javascript\n\nsst add @pulumiverse/vercel\n```\n\n2. If you don’t already have a Vercel Access Token, [follow this guide](https://vercel.com/guides/how-do-i-use-a-vercel-api-access-token#creating-an-access-token) to create one.\n\n3. Add a `VERCEL_API_TOKEN` environment variable with the access token value. If the domain belongs to a team, also add a `VERCEL_TEAM_ID` environment variable with the Team ID. You can find your Team ID inside your team’s general project settings in the Vercel dashboard.\n\n## Functions\n### dns\n\n```\ndns(args)\n```\n\n#### Parameters\n\n- `args` [`DnsArgs`](https://sst.dev/docs/component/vercel/dns#dnsargs)\n\n**Returns** `Object`\n\n## DnsArgs\n### domain\n\n**Type** `Input` `<` `string` `>`\n\nThe domain name in your Vercel account to create the record in.\n\n```\n{\n  domain: \"example.com\"\n}\n```\n\n### transform?\n\n**Type** `Object`\n\n- [`record?`](https://sst.dev/docs/component/vercel/dns#transform-record)\n\n[Transform](https://sst.dev/docs/components#transform) how this component creates its underlying resources.\n\n## transform.record?\n**Type** [`DnsRecordArgs`](https://www.pulumi.com/registry/packages/vercel/api-docs/dnsrecord/#inputs) ` | ` `(` `args` `: ` [`DnsRecordArgs`](https://www.pulumi.com/registry/packages/vercel/api-docs/dnsrecord/#inputs) `, ` `opts` `: ` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/) `, ` `name` `: ` `string` `)` ` => ` `void`\n\nTransform the Vercel record resource.\n", "metadata": {"source_url": "https://sst.dev/docs/component/vercel/dns", "title": "Vercel DNS Adapter", "description": "Reference doc for the `sst.vercel.dns` adapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 20:51:20", "type": "overview", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/VmVyY2VsJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "og:title": "Vercel DNS Adapter", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/vercel/dns/", "ogDescription": "Reference doc for the `sst.vercel.dns` adapter.", "ogImage": "https://social-cards.sst.dev/v3-docs/VmVyY2VsJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "Vercel DNS Adapter", "language": "en", "title": "Vercel DNS Adapter | SST", "ogLocale": "en", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.vercel.dns` adapter.", "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.vercel.dns` adapter.", "og:image": "https://social-cards.sst.dev/v3-docs/VmVyY2VsJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "og:type": "article", "og:locale": "en", "og:site_name": "SST", "og:url": "https://sst.dev/docs/component/vercel/dns/", "scrapeId": "80321a21-e7fe-4e46-96ca-ea4708a89ae7", "sourceURL": "https://sst.dev/docs/component/vercel/dns", "url": "https://sst.dev/docs/component/vercel/dns", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Vercel DNS Adapter\"?\n\nAssistant: Here are some code examples:\n\n### Example of DNS configuration\n```yaml\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.vercel.dns({\n      domain: \"example.com\"\n    })\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/vercel/dns", "title": "Vercel DNS Adapter", "description": "Reference doc for the `sst.vercel.dns` adapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 20:51:20", "type": "code_examples", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/VmVyY2VsJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "og:title": "Vercel DNS Adapter", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/vercel/dns/", "ogDescription": "Reference doc for the `sst.vercel.dns` adapter.", "ogImage": "https://social-cards.sst.dev/v3-docs/VmVyY2VsJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "Vercel DNS Adapter", "language": "en", "title": "Vercel DNS Adapter | SST", "ogLocale": "en", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.vercel.dns` adapter.", "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.vercel.dns` adapter.", "og:image": "https://social-cards.sst.dev/v3-docs/VmVyY2VsJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "og:type": "article", "og:locale": "en", "og:site_name": "SST", "og:url": "https://sst.dev/docs/component/vercel/dns/", "scrapeId": "80321a21-e7fe-4e46-96ca-ea4708a89ae7", "sourceURL": "https://sst.dev/docs/component/vercel/dns", "url": "https://sst.dev/docs/component/vercel/dns", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Vercel DNS Adapter\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have the correct Vercel Access Token and Team ID if applicable.\n• Always check the Vercel dashboard for the latest settings and configurations.\n", "metadata": {"source_url": "https://sst.dev/docs/component/vercel/dns", "title": "Vercel DNS Adapter", "description": "Reference doc for the `sst.vercel.dns` adapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 20:51:20", "type": "best_practices", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/VmVyY2VsJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "og:title": "Vercel DNS Adapter", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/vercel/dns/", "ogDescription": "Reference doc for the `sst.vercel.dns` adapter.", "ogImage": "https://social-cards.sst.dev/v3-docs/VmVyY2VsJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "Vercel DNS Adapter", "language": "en", "title": "Vercel DNS Adapter | SST", "ogLocale": "en", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.vercel.dns` adapter.", "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.vercel.dns` adapter.", "og:image": "https://social-cards.sst.dev/v3-docs/VmVyY2VsJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "og:type": "article", "og:locale": "en", "og:site_name": "SST", "og:url": "https://sst.dev/docs/component/vercel/dns/", "scrapeId": "80321a21-e7fe-4e46-96ca-ea4708a89ae7", "sourceURL": "https://sst.dev/docs/component/vercel/dns", "url": "https://sst.dev/docs/component/vercel/dns", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV1\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV1` component.\n\nHere's a detailed explanation:\n\n\n## Create the API\n```javascript\nconst api = new sst.aws.ApiGatewayV1(\"MyApi\");\n```\n\n## Add routes\n```javascript\napi.route(\"GET /\", \"src/get.handler\");\napi.route(\"POST /\", \"src/post.handler\");\napi.deploy();\n```\n\n## Configure the routes\n```javascript\napi.route(\"GET /\", \"src/get.handler\", {\n  auth: { iam: true }\n});\n```\n\n## Configure the route handler\n```javascript\napi.route(\"POST /\", {\n  handler: \"src/post.handler\",\n  memory: \"2048 MB\"\n});\n```\n\n## Default props for all routes\nYou can use the `transform` to set some default props for all your routes. For example, instead of setting the `memory` for each route.\n\n```javascript\napi.route(\"GET /\", { handler: \"src/get.handler\", memory: \"2048 MB\" });\napi.route(\"POST /\", { handler: \"src/post.handler\", memory: \"2048 MB\" });\n```\n\nYou can set it through the `transform`.\n\n```javascript\nconst api = new sst.aws.ApiGatewayV1(\"MyApi\", {\n  transform: {\n    route: {\n      handler: (args, opts) => {\n        // Set the default if it's not set by the route\n        args.memory ??= \"2048 MB\";\n      }\n    }\n  }\n});\n\napi.route(\"GET /\", \"src/get.handler\");\napi.route(\"POST /\", \"src/post.handler\");\n```\n\nWith this we set the `memory` if it’s not overridden by the route.\n\n## Constructor\n```javascript\nnew ApiGatewayV1(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`ApiGatewayV1Args`](https://sst.dev/docs/component/aws/apigatewayv1#apigatewayv1args)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1", "title": "ApiGatewayV1", "description": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 20:54:46", "type": "overview", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/apigatewayv1/", "title": "ApiGatewayV1 | SST", "og:site_name": "SST", "language": "en", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "ogLocale": "en", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "description": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYx.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYx.png", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYx.png", "ogSiteName": "SST", "og:title": "ApiGatewayV1", "ogTitle": "ApiGatewayV1", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1/", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "scrapeId": "610a646c-246e-454c-8296-4e9287ba73b3", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1", "url": "https://sst.dev/docs/component/aws/apigatewayv1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV1\"?\n\nAssistant: Here are some code examples:\n\n### Access Log Configuration\n```yaml\n{\n  accessLog: {\n    retention: \"forever\"\n  }\n}\n```\n\n### CORS Configuration\n```yaml\n{\n  cors: false\n}\n```\n\n### Domain Configuration\n```yaml\n{\n  domain: \"example.com\"\n}\n```\n\n### Regional Endpoint Configuration\n```yaml\n{\n  endpoint: {\n    type: \"regional\"\n  }\n}\n```\n\n### Private Endpoint Configuration\n```yaml\n{\n  endpoint: {\n    type: \"private\",\n    vpcEndpointIds: [\"vpce-0dccab6fb1e828f36\"]\n  }\n}\n```\n\n### Transform Route Example\n```yaml\n{\n  transform: {\n    route: {\n      handler: (args, opts) => {\n        // Set the default if it's not set by the route\n        args.memory ??= \"2048 MB\";\n      }\n    }\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1", "title": "ApiGatewayV1", "description": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 20:54:46", "type": "code_examples", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/apigatewayv1/", "title": "ApiGatewayV1 | SST", "og:site_name": "SST", "language": "en", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "ogLocale": "en", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "description": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYx.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYx.png", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYx.png", "ogSiteName": "SST", "og:title": "ApiGatewayV1", "ogTitle": "ApiGatewayV1", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1/", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "scrapeId": "610a646c-246e-454c-8296-4e9287ba73b3", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1", "url": "https://sst.dev/docs/component/aws/apigatewayv1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayV1\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `transform` feature to set default properties for routes to avoid redundancy.\n• Always deploy the API after adding routes to ensure they are active.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1", "title": "ApiGatewayV1", "description": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 20:54:46", "type": "best_practices", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/apigatewayv1/", "title": "ApiGatewayV1 | SST", "og:site_name": "SST", "language": "en", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "ogLocale": "en", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "description": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYx.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYx.png", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYx.png", "ogSiteName": "SST", "og:title": "ApiGatewayV1", "ogTitle": "ApiGatewayV1", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1/", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1` component.", "scrapeId": "610a646c-246e-454c-8296-4e9287ba73b3", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1", "url": "https://sst.dev/docs/component/aws/apigatewayv1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"AWS Linkable helper\"?\n\nAssistant: Reference doc for the `sst.aws.permission` helper.\n\nHere's a detailed explanation:\n\n\n## Functions\n### permission\n\n```javascript\npermission(input)\n```\n\n#### Parameters\n\n- `input` [`InputArgs`](https://sst.dev/docs/component/aws/permission#inputargs)\n\n**Returns** `Object`\n\n## InputArgs\n### actions\n\n**Type** `string` `[]`\n\nThe [IAM actions](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html#actions_table) that can be performed.\n\n```javascript\n{\n  actions: [\"s3:*\"]\n}\n```\n\n### effect?\n\n**Type** `“` `allow` `”` ` | ` `“` `deny` `”`\n\n**Default** `“allow”`\n\nConfigures whether the permission is allowed or denied.\n\n```javascript\n{\n  effect: \"deny\"\n}\n```\n\n### resources\n\n**Type** `Input` `<` `string` `>` `[]`\n\nThe resources specified using the [IAM ARN format](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html).\n\n```javascript\n{\n  resources: [\"arn:aws:s3:::my-bucket/*\"]\n}\n```\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/permission", "title": "AWS Linkable helper", "description": "Reference doc for the `sst.aws.permission` helper.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 20:54:55", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/QVdTJTIwTGlua2FibGUlMjBoZWxwZXI%3D.png", "title": "AWS Linkable helper | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "AWS Linkable helper", "description": "Reference doc for the `sst.aws.permission` helper.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwTGlua2FibGUlMjBoZWxwZXI%3D.png", "og:description": "Reference doc for the `sst.aws.permission` helper.", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/permission/", "og:locale": "en", "og:url": "https://sst.dev/docs/component/aws/permission/", "ogSiteName": "SST", "og:type": "article", "og:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwTGlua2FibGUlMjBoZWxwZXI%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.permission` helper.", "language": "en", "ogTitle": "AWS Linkable helper", "viewport": "width=device-width, initial-scale=1", "scrapeId": "26c26f45-7684-4ca4-92ac-e462aab0b7dd", "sourceURL": "https://sst.dev/docs/component/aws/permission", "url": "https://sst.dev/docs/component/aws/permission", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"AWS Linkable helper\"?\n\nAssistant: Here are some code examples:\n\n### AWS Permission Example\n```yaml\nsst.aws.permission({\n  actions: [\"lambda:InvokeFunction\"],\n  resources: [\"*\"]\n})\n```\n\n### InputArgs Example for actions\n```yaml\n{\n  actions: [\"s3:*\"]\n}\n```\n\n### InputArgs Example for effect\n```yaml\n{\n  effect: \"deny\"\n}\n```\n\n### InputArgs Example for resources\n```yaml\n{\n  resources: [\"arn:aws:s3:::my-bucket/*\"]\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/permission", "title": "AWS Linkable helper", "description": "Reference doc for the `sst.aws.permission` helper.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 20:54:55", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/QVdTJTIwTGlua2FibGUlMjBoZWxwZXI%3D.png", "title": "AWS Linkable helper | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "ogLocale": "en", "og:title": "AWS Linkable helper", "description": "Reference doc for the `sst.aws.permission` helper.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwTGlua2FibGUlMjBoZWxwZXI%3D.png", "og:description": "Reference doc for the `sst.aws.permission` helper.", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/permission/", "og:locale": "en", "og:url": "https://sst.dev/docs/component/aws/permission/", "ogSiteName": "SST", "og:type": "article", "og:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwTGlua2FibGUlMjBoZWxwZXI%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.permission` helper.", "language": "en", "ogTitle": "AWS Linkable helper", "viewport": "width=device-width, initial-scale=1", "scrapeId": "26c26f45-7684-4ca4-92ac-e462aab0b7dd", "sourceURL": "https://sst.dev/docs/component/aws/permission", "url": "https://sst.dev/docs/component/aws/permission", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Kv\"?\n\nAssistant: Reference doc for the `sst.cloudflare.Kv` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\n```javascript\nconst storage = new sst.cloudflare.Kv(\"MyStorage\");\n```\n\n## Link to a worker\nYou can link KV to a worker.\n\n```javascript\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"./index.ts\",\n  link: [storage],\n  url: true\n});\n```\n\nOnce linked, you can use the SDK to interact with the bucket.\n\n```javascript\nimport { Resource } from \"sst\";\n\nawait Resource.MyStorage.get(\"someKey\");\n```\n\n## Constructor\n```javascript\nnew Kv(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`KvArgs`](https://sst.dev/docs/component/cloudflare/kv#kvargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/kv", "title": "Kv", "description": "Reference doc for the `sst.cloudflare.Kv` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 20:55:01", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/S3Y%3D.png", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/S3Y%3D.png", "og:locale": "en", "og:type": "article", "ogDescription": "Reference doc for the `sst.cloudflare.Kv` component.", "favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "title": "Kv | SST", "ogUrl": "https://sst.dev/docs/component/cloudflare/kv/", "og:url": "https://sst.dev/docs/component/cloudflare/kv/", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Kv", "description": "Reference doc for the `sst.cloudflare.Kv` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/S3Y%3D.png", "language": "en", "og:description": "Reference doc for the `sst.cloudflare.Kv` component.", "og:site_name": "SST", "ogTitle": "Kv", "scrapeId": "1f293314-7efc-495e-8c86-0059bf45ff8c", "sourceURL": "https://sst.dev/docs/component/cloudflare/kv", "url": "https://sst.dev/docs/component/cloudflare/kv", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Kv\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nconst storage = new sst.cloudflare.Kv(\"MyStorage\");\n```\n\n### Link to a worker\n```yaml\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"./index.ts\",\n  link: [storage],\n  url: true\n});\n```\n\n### Using the SDK to interact with the bucket\n```yaml\nimport { Resource } from \"sst\";\n\nawait Resource.MyStorage.get(\"someKey\");\n```\n\n### Constructor\n```yaml\nnew Kv(name, args?, opts?)\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/kv", "title": "Kv", "description": "Reference doc for the `sst.cloudflare.Kv` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 20:55:01", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/S3Y%3D.png", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/S3Y%3D.png", "og:locale": "en", "og:type": "article", "ogDescription": "Reference doc for the `sst.cloudflare.Kv` component.", "favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "title": "Kv | SST", "ogUrl": "https://sst.dev/docs/component/cloudflare/kv/", "og:url": "https://sst.dev/docs/component/cloudflare/kv/", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Kv", "description": "Reference doc for the `sst.cloudflare.Kv` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/S3Y%3D.png", "language": "en", "og:description": "Reference doc for the `sst.cloudflare.Kv` component.", "og:site_name": "SST", "ogTitle": "Kv", "scrapeId": "1f293314-7efc-495e-8c86-0059bf45ff8c", "sourceURL": "https://sst.dev/docs/component/cloudflare/kv", "url": "https://sst.dev/docs/component/cloudflare/kv", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Kv\"?\n\nAssistant: Here are the recommended best practices:\n\n• When linking a KV storage to a worker, ensure that the worker has the correct permissions to access the KV storage.\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/kv", "title": "Kv", "description": "Reference doc for the `sst.cloudflare.Kv` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 20:55:01", "type": "best_practices", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/S3Y%3D.png", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/S3Y%3D.png", "og:locale": "en", "og:type": "article", "ogDescription": "Reference doc for the `sst.cloudflare.Kv` component.", "favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "title": "Kv | SST", "ogUrl": "https://sst.dev/docs/component/cloudflare/kv/", "og:url": "https://sst.dev/docs/component/cloudflare/kv/", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Kv", "description": "Reference doc for the `sst.cloudflare.Kv` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/S3Y%3D.png", "language": "en", "og:description": "Reference doc for the `sst.cloudflare.Kv` component.", "og:site_name": "SST", "ogTitle": "Kv", "scrapeId": "1f293314-7efc-495e-8c86-0059bf45ff8c", "sourceURL": "https://sst.dev/docs/component/cloudflare/kv", "url": "https://sst.dev/docs/component/cloudflare/kv", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Aurora\"?\n\nAssistant: Reference doc for the `sst.aws.Aurora` component.\n\nHere's a detailed explanation:\n\n\n## Create an Aurora Postgres cluster\n```javascript\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst database = new sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  vpc\n});\n```\n\n## Create an Aurora MySQL cluster\n```javascript\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst database = new sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"mysql\",\n  vpc\n});\n```\n\n## Change the scaling config\n```javascript\nnew sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  scaling: {\n    min: \"2 ACU\",\n    max: \"128 ACU\"\n  },\n  vpc\n});\n```\n\n## Link to a resource\nYou can link your database to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [database],\n  vpc\n});\n```\n\nOnce linked, you can connect to it from your function code.\n\n```javascript\nimport { Resource } from \"sst\";\nimport postgres from \"postgres\";\n\nconst sql = postgres({\n  username: Resource.MyDatabase.username,\n  password: Resource.MyDatabase.password,\n  database: Resource.MyDatabase.database,\n  host: Resource.MyDatabase.host,\n  port: Resource.MyDatabase.port\n});\n```\n\n## Enable the RDS Data API\n```javascript\nnew sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  dataApi: true,\n  vpc\n});\n```\n\nWhen using the Data API, connecting to the database does not require a persistent connection, and works over HTTP. You also don’t need the `sst tunnel` or a VPN to connect to it from your local machine.\n\n```javascript\nimport { Resource } from \"sst\";\nimport { drizzle } from \"drizzle-orm/aws-data-api/pg\";\nimport { RDSDataClient } from \"@aws-sdk/client-rds-data\";\n\ndrizzle(new RDSDataClient({}), {\n  database: Resource.MyDatabase.database,\n  secretArn: Resource.MyDatabase.secretArn,\n  resourceArn: Resource.MyDatabase.clusterArn\n});\n```\n\n## Running locally\nBy default, your Aurora database is deployed in `sst dev`. But let’s say you are running Postgres locally.\n\n```bash\ndocker run \\\n  --rm \\\n  -p 5432:5432 \\\n  -v $(pwd)/.sst/storage/postgres:/var/lib/postgresql/data \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=password \\\n  -e POSTGRES_DB=local \\\n  postgres:16.4\n```\n\nYou can connect to it in `sst dev` by configuring the `dev` prop.\n\n```javascript\nnew sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  vpc,\n  dev: {\n    username: \"postgres\",\n    password: \"password\",\n    database: \"local\",\n    port: 5432\n  }\n});\n```\n\nThis will skip deploying the database and link to the locally running Postgres database instead. [Check out the full example](https://sst.dev/docs/examples/#aws-aurora-local).\n\n## Cost\nThis component has one DB instance that is used for both writes and reads. The instance can scale from the minimum number of ACUs to the maximum number of ACUs. By default, this uses a `min` of 0 ACUs and a `max` of 4 ACUs.\n\nWhen the database is paused, you are not charged for the ACUs.\n\nEach ACU costs $0.12 per hour for both `postgres` and `mysql` engine. The storage costs $0.01 per GB per month for standard storage.\n\nSo if your database is constantly using 1GB of memory or 0.5 ACUs, then you are charged $0.12 x 0.5 x 24 x 30 or **$43 per month**. And add the storage costs to this as well.\n\nThe above are rough estimates for _us-east-1_, check out the [Amazon Aurora pricing](https://aws.amazon.com/rds/aurora/pricing) for more details.\n\n## RDS Proxy\nIf you enable the `proxy`, it uses _Aurora Capacity Units_ with a minimum of 8 ACUs at $0.015 per ACU hour.\n\nThat works out to an **additional** $0.015 x 8 x 24 x 30 or **$86 per month**. Adjust this if you end up using more than 8 ACUs.\n\nThe above are rough estimates for _us-east-1_, check out the [RDS Proxy pricing](https://aws.amazon.com/rds/proxy/pricing/) for more details.\n\n## RDS Data API\nIf you enable `dataApi`, you get charged an **additional** $0.35 per million requests for the first billion requests. After that, it’s $0.20 per million requests.\n\nCheck out the [RDS Data API pricing](https://aws.amazon.com/rds/aurora/pricing/#Data_API_costs) for more details.\n\n## Constructor\n```javascript\nnew Aurora(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`AuroraArgs`](https://sst.dev/docs/component/aws/aurora#auroraargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/aurora", "title": "Aurora", "description": "Reference doc for the `sst.aws.Aurora` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 20:55:28", "type": "overview", "page_metadata": {"title": "Aurora | SST", "og:title": "Aurora", "og:url": "https://sst.dev/docs/component/aws/aurora/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Reference doc for the `sst.aws.Aurora` component.", "og:description": "Reference doc for the `sst.aws.Aurora` component.", "ogSiteName": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXVyb3Jh.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXVyb3Jh.png", "ogUrl": "https://sst.dev/docs/component/aws/aurora/", "ogTitle": "Aurora", "language": "en", "ogDescription": "Reference doc for the `sst.aws.Aurora` component.", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXVyb3Jh.png", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "dfe20cca-a098-42f2-af64-f4e788fb92de", "sourceURL": "https://sst.dev/docs/component/aws/aurora", "url": "https://sst.dev/docs/component/aws/aurora", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Aurora\"?\n\nAssistant: Here are some code examples:\n\n### Create an Aurora Postgres cluster\n```yaml\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst database = new sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  vpc\n});\n```\n\n### Create an Aurora MySQL cluster\n```yaml\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst database = new sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"mysql\",\n  vpc\n});\n```\n\n### Change the scaling config\n```yaml\nnew sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  scaling: {\n    min: \"2 ACU\",\n    max: \"128 ACU\"\n  },\n  vpc\n});\n```\n\n### Link to a resource\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [database],\n  vpc\n});\n\nimport { Resource } from \"sst\";\nimport postgres from \"postgres\";\n\nconst sql = postgres({\n  username: Resource.MyDatabase.username,\n  password: Resource.MyDatabase.password,\n  database: Resource.MyDatabase.database,\n  host: Resource.MyDatabase.host,\n  port: Resource.MyDatabase.port\n});\n```\n\n### Enable the RDS Data API\n```yaml\nnew sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  dataApi: true,\n  vpc\n});\n\nimport { Resource } from \"sst\";\nimport { drizzle } from \"drizzle-orm/aws-data-api/pg\";\nimport { RDSDataClient } from \"@aws-sdk/client-rds-data\";\n\ndrizzle(new RDSDataClient({}), {\n  database: Resource.MyDatabase.database,\n  secretArn: Resource.MyDatabase.secretArn,\n  resourceArn: Resource.MyDatabase.clusterArn\n});\n```\n\n### Running locally\n```yaml\ndocker run \\\n  --rm \\\n  -p 5432:5432 \\\n  -v $(pwd)/.sst/storage/postgres:/var/lib/postgresql/data \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=password \\\n  -e POSTGRES_DB=local \\\n  postgres:16.4\n\nnew sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  vpc,\n  dev: {\n    username: \"postgres\",\n    password: \"password\",\n    database: \"local\",\n    port: 5432\n  }\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/aurora", "title": "Aurora", "description": "Reference doc for the `sst.aws.Aurora` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 20:55:28", "type": "code_examples", "page_metadata": {"title": "Aurora | SST", "og:title": "Aurora", "og:url": "https://sst.dev/docs/component/aws/aurora/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Reference doc for the `sst.aws.Aurora` component.", "og:description": "Reference doc for the `sst.aws.Aurora` component.", "ogSiteName": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXVyb3Jh.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXVyb3Jh.png", "ogUrl": "https://sst.dev/docs/component/aws/aurora/", "ogTitle": "Aurora", "language": "en", "ogDescription": "Reference doc for the `sst.aws.Aurora` component.", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXVyb3Jh.png", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "dfe20cca-a098-42f2-af64-f4e788fb92de", "sourceURL": "https://sst.dev/docs/component/aws/aurora", "url": "https://sst.dev/docs/component/aws/aurora", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Aurora\"?\n\nAssistant: Here are the recommended best practices:\n\n• When using the Data API, connecting to the database does not require a persistent connection, and works over HTTP. You also don’t need the `sst tunnel` or a VPN to connect to it from your local machine.\n• Auto-pause is useful for minimizing costs in the development environments where the database is not used frequently. It’s not recommended for production environments.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/aurora", "title": "Aurora", "description": "Reference doc for the `sst.aws.Aurora` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 20:55:28", "type": "best_practices", "page_metadata": {"title": "Aurora | SST", "og:title": "Aurora", "og:url": "https://sst.dev/docs/component/aws/aurora/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Reference doc for the `sst.aws.Aurora` component.", "og:description": "Reference doc for the `sst.aws.Aurora` component.", "ogSiteName": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXVyb3Jh.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXVyb3Jh.png", "ogUrl": "https://sst.dev/docs/component/aws/aurora/", "ogTitle": "Aurora", "language": "en", "ogDescription": "Reference doc for the `sst.aws.Aurora` component.", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:locale": "en", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXVyb3Jh.png", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "dfe20cca-a098-42f2-af64-f4e788fb92de", "sourceURL": "https://sst.dev/docs/component/aws/aurora", "url": "https://sst.dev/docs/component/aws/aurora", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Nextjs\"?\n\nAssistant: Reference doc for the `sst.aws.Nextjs` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\nDeploy the Next.js app that’s in the project root.\n\n```\nnew sst.aws.Nextjs(\"MyWeb\");\n```\n\n## Change the path\nDeploys a Next.js app in the `my-next-app/` directory.\n\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  path: \"my-next-app/\"\n});\n```\n\n## Add a custom domain\nSet a custom domain for your Next.js app.\n\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n## Redirect www to apex domain\nRedirect `www.my-app.com` to `my-app.com`.\n\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your Next.js app. This will grant permissions to the resources and allow you to access it in your app.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your Next.js app.\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n## Constructor\n```\nnew Nextjs(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`NextjsArgs`](https://sst.dev/docs/component/aws/nextjs#nextjsargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/nextjs", "title": "Nextjs", "description": "Reference doc for the `sst.aws.Nextjs` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 20:56:23", "type": "overview", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/TmV4dGpz.png", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/TmV4dGpz.png", "title": "Nextjs | SST", "og:site_name": "SST", "ogTitle": "Nextjs", "language": "en", "og:description": "Reference doc for the `sst.aws.Nextjs` component.", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.Nextjs` component.", "twitter:card": "summary_large_image", "og:title": "Nextjs", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogUrl": "https://sst.dev/docs/component/aws/nextjs/", "og:url": "https://sst.dev/docs/component/aws/nextjs/", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.aws.Nextjs` component.", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/TmV4dGpz.png", "scrapeId": "6a6f5fea-19db-46da-bb57-faba1e249150", "sourceURL": "https://sst.dev/docs/component/aws/nextjs", "url": "https://sst.dev/docs/component/aws/nextjs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Nextjs\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\");\n```\n\n### Change the path\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  path: \"my-next-app/\"\n});\n```\n\n### Add a custom domain\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Redirect www to apex domain\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### Access linked resources\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/nextjs", "title": "Nextjs", "description": "Reference doc for the `sst.aws.Nextjs` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 20:56:23", "type": "code_examples", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/TmV4dGpz.png", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/TmV4dGpz.png", "title": "Nextjs | SST", "og:site_name": "SST", "ogTitle": "Nextjs", "language": "en", "og:description": "Reference doc for the `sst.aws.Nextjs` component.", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.Nextjs` component.", "twitter:card": "summary_large_image", "og:title": "Nextjs", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogUrl": "https://sst.dev/docs/component/aws/nextjs/", "og:url": "https://sst.dev/docs/component/aws/nextjs/", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.aws.Nextjs` component.", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/TmV4dGpz.png", "scrapeId": "6a6f5fea-19db-46da-bb57-faba1e249150", "sourceURL": "https://sst.dev/docs/component/aws/nextjs", "url": "https://sst.dev/docs/component/aws/nextjs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Nextjs\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the SDK to access linked resources in your Next.js app.\n• Configure environment variables prefixed with NEXT_PUBLIC_ to access them in the browser.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/nextjs", "title": "Nextjs", "description": "Reference doc for the `sst.aws.Nextjs` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 20:56:23", "type": "best_practices", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/TmV4dGpz.png", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/TmV4dGpz.png", "title": "Nextjs | SST", "og:site_name": "SST", "ogTitle": "Nextjs", "language": "en", "og:description": "Reference doc for the `sst.aws.Nextjs` component.", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.Nextjs` component.", "twitter:card": "summary_large_image", "og:title": "Nextjs", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogUrl": "https://sst.dev/docs/component/aws/nextjs/", "og:url": "https://sst.dev/docs/component/aws/nextjs/", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.aws.Nextjs` component.", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/TmV4dGpz.png", "scrapeId": "6a6f5fea-19db-46da-bb57-faba1e249150", "sourceURL": "https://sst.dev/docs/component/aws/nextjs", "url": "https://sst.dev/docs/component/aws/nextjs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Worker\"?\n\nAssistant: Reference doc for the `sst.cloudflare.Worker` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\n```javascript\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"src/worker.handler\"\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to the Worker. This will handle the credentials and allow you to access it in your handler.\n\n```javascript\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"src/worker.handler\",\n  link: [bucket]\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your handler.\n\n```javascript\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n## Enable URLs\nEnable worker URLs to invoke the worker over HTTP.\n\n```javascript\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"src/worker.handler\",\n  url: true\n});\n```\n\n## Bundling\nCustomize how SST uses [esbuild](https://esbuild.github.io/) to bundle your worker code with the `build` property.\n\n```javascript\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"src/worker.handler\",\n  build: {\n    install: [\"pg\"]\n  }\n});\n```\n\n## Constructor\n```javascript\nnew Worker(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`WorkerArgs`](https://sst.dev/docs/component/cloudflare/worker#workerargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/worker", "title": "Worker", "description": "Reference doc for the `sst.cloudflare.Worker` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:56:33", "type": "overview", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/V29ya2Vy.png", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://social-cards.sst.dev/v3-docs/V29ya2Vy.png", "ogDescription": "Reference doc for the `sst.cloudflare.Worker` component.", "ogUrl": "https://sst.dev/docs/component/cloudflare/worker/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Reference doc for the `sst.cloudflare.Worker` component.", "og:description": "Reference doc for the `sst.cloudflare.Worker` component.", "og:url": "https://sst.dev/docs/component/cloudflare/worker/", "language": "en", "ogTitle": "Worker", "og:site_name": "SST", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/V29ya2Vy.png", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "og:title": "Worker", "og:locale": "en", "title": "Worker | SST", "scrapeId": "8bf524dd-bff8-4b4a-9f66-81790da06be9", "sourceURL": "https://sst.dev/docs/component/cloudflare/worker", "url": "https://sst.dev/docs/component/cloudflare/worker", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Worker\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"src/worker.handler\"\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"src/worker.handler\",\n  link: [bucket]\n});\n```\n\n### Access linked resources\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n### Enable URLs\n```yaml\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"src/worker.handler\",\n  url: true\n});\n```\n\n### Bundling example\n```yaml\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"src/worker.handler\",\n  build: {\n    install: [\"pg\"]\n  }\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/worker", "title": "Worker", "description": "Reference doc for the `sst.cloudflare.Worker` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:56:33", "type": "code_examples", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/V29ya2Vy.png", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://social-cards.sst.dev/v3-docs/V29ya2Vy.png", "ogDescription": "Reference doc for the `sst.cloudflare.Worker` component.", "ogUrl": "https://sst.dev/docs/component/cloudflare/worker/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Reference doc for the `sst.cloudflare.Worker` component.", "og:description": "Reference doc for the `sst.cloudflare.Worker` component.", "og:url": "https://sst.dev/docs/component/cloudflare/worker/", "language": "en", "ogTitle": "Worker", "og:site_name": "SST", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/V29ya2Vy.png", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "og:title": "Worker", "og:locale": "en", "title": "Worker | SST", "scrapeId": "8bf524dd-bff8-4b4a-9f66-81790da06be9", "sourceURL": "https://sst.dev/docs/component/cloudflare/worker", "url": "https://sst.dev/docs/component/cloudflare/worker", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Worker\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the SDK to access linked resources in your handler.\n• Customize the bundling process using the `build` property to optimize your worker code.\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/worker", "title": "Worker", "description": "Reference doc for the `sst.cloudflare.Worker` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:56:33", "type": "best_practices", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/V29ya2Vy.png", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://social-cards.sst.dev/v3-docs/V29ya2Vy.png", "ogDescription": "Reference doc for the `sst.cloudflare.Worker` component.", "ogUrl": "https://sst.dev/docs/component/cloudflare/worker/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Reference doc for the `sst.cloudflare.Worker` component.", "og:description": "Reference doc for the `sst.cloudflare.Worker` component.", "og:url": "https://sst.dev/docs/component/cloudflare/worker/", "language": "en", "ogTitle": "Worker", "og:site_name": "SST", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/V29ya2Vy.png", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "og:title": "Worker", "og:locale": "en", "title": "Worker | SST", "scrapeId": "8bf524dd-bff8-4b4a-9f66-81790da06be9", "sourceURL": "https://sst.dev/docs/component/cloudflare/worker", "url": "https://sst.dev/docs/component/cloudflare/worker", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Hono on Cloudflare with SST\"?\n\nAssistant: Create and deploy a Hono API on Cloudflare with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\n\nmkdir my-hono-api && cd my-hono-api\n\nnpm init -y\n```\n\n* * *\n\n#### Init SST\n\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **Cloudflare**. This’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add a Worker\nLet’s add a Worker. Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const hono = new sst.cloudflare.Worker(\"Hono\", {\n\n    url: true,\n\n    handler: \"index.ts\",\n\n  });\n\n  return {\n\n    api: hono.url,\n\n  };\n\n}\n```\n\nWe are enabling the Worker URL, so we can use it as our API.\n\n## 3. Add an R2 Bucket\nLet’s add an R2 bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.cloudflare.Bucket(\"MyBucket\");\n```\n\nAdd this above the `Worker` component.\n\n#### Link the bucket\n\nNow, link the bucket to our Worker.\n\n```\nconst hono = new sst.cloudflare.Worker(\"Hono\", {\n\n  url: true,\n\n  link: [bucket],\n\n  handler: \"index.ts\",\n\n});\n```\n\n## 4. Upload a file\nWe want the `/` route of our API to upload a file to the R2 bucket. Create an `index.ts` file and add the following.\n\n```\nconst app = new Hono()\n\n  .put(\"/*\", async (c) => {\n\n    const key = crypto.randomUUID();\n\n    await Resource.MyBucket.put(key, c.req.raw.body, {\n\n      httpMetadata: {\n\n        contentType: c.req.header(\"content-type\"),\n\n      },\n\n    });\n\n    return c.text(`Object created with key: ${key}`);\n\n  });\n\nexport default app;\n```\n\nAdd the imports.\n\n```\nimport { Hono } from \"hono\";\n\nimport { Resource } from \"sst\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install hono\n```\n\n## 5. Download a file\nWe want to download the last uploaded file if you make a `GET` request to the API. Add this to your routes in `index.ts`.\n\n```\nconst app = new Hono()\n\n  // ...\n\n  .get(\"/\", async (c) => {\n\n    const first = await Resource.MyBucket.list().then(\n\n      (res) =>\n\n        res.objects.sort(\n\n          (a, b) => a.uploaded.getTime() - b.uploaded.getTime(),\n\n        )[0],\n\n    );\n\n    const result = await Resource.MyBucket.get(first.key);\n\n    c.header(\"content-type\", result.httpMetadata.contentType);\n\n    return c.body(result.body);\n\n  });\n```\n\nWe are getting a list of the files in the files in the bucket with `Resource.MyBucket.list()` and we are getting a file for the given key with `Resource.MyBucket.get()`.\n\n## 6. Deploy your app\nFinally, let’s deploy your app!\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n", "metadata": {"source_url": "https://sst.dev/docs/start/cloudflare/hono", "title": "Hono on Cloudflare with SST", "description": "Create and deploy a Hono API on Cloudflare with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:56:50", "type": "overview", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Hono on Cloudflare with SST | SST", "ogTitle": "Hono on Cloudflare with SST", "description": "Create and deploy a Hono API on Cloudflare with SST.", "ogUrl": "https://sst.dev/docs/start/cloudflare/hono/", "og:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:card": "summary_large_image", "og:locale": "en", "ogSiteName": "SST", "og:site_name": "SST", "og:title": "Hono on Cloudflare with SST", "favicon": "https://sst.dev/favicon.ico", "language": "en", "ogDescription": "Create and deploy a Hono API on Cloudflare with SST.", "og:description": "Create and deploy a Hono API on Cloudflare with SST.", "og:url": "https://sst.dev/docs/start/cloudflare/hono/", "twitter:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "ogLocale": "en", "scrapeId": "6a2a60a9-03a1-4f21-b66f-7ee988957d29", "sourceURL": "https://sst.dev/docs/start/cloudflare/hono", "url": "https://sst.dev/docs/start/cloudflare/hono", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Hono on Cloudflare with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nmkdir my-hono-api && cd my-hono-api\nnpm init -y\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\nnpm install\n```\n\n### Add a Worker\n```yaml\nasync run() {\n  const hono = new sst.cloudflare.Worker(\"Hono\", {\n    url: true,\n    handler: \"index.ts\",\n  });\n  return {\n    api: hono.url,\n  };\n}\n```\n\n### Add an R2 Bucket\n```yaml\nconst bucket = new sst.cloudflare.Bucket(\"MyBucket\");\n```\n\n### Link the bucket\n```yaml\nconst hono = new sst.cloudflare.Worker(\"Hono\", {\n  url: true,\n  link: [bucket],\n  handler: \"index.ts\",\n});\n```\n\n### Upload a file\n```yaml\nconst app = new Hono()\n  .put(\"/*\", async (c) => {\n    const key = crypto.randomUUID();\n    await Resource.MyBucket.put(key, c.req.raw.body, {\n      httpMetadata: {\n        contentType: c.req.header(\"content-type\"),\n      },\n    });\n    return c.text(`Object created with key: ${key}`);\n  });\nexport default app;\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/cloudflare/hono", "title": "Hono on Cloudflare with SST", "description": "Create and deploy a Hono API on Cloudflare with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:56:50", "type": "code_examples", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Hono on Cloudflare with SST | SST", "ogTitle": "Hono on Cloudflare with SST", "description": "Create and deploy a Hono API on Cloudflare with SST.", "ogUrl": "https://sst.dev/docs/start/cloudflare/hono/", "og:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:card": "summary_large_image", "og:locale": "en", "ogSiteName": "SST", "og:site_name": "SST", "og:title": "Hono on Cloudflare with SST", "favicon": "https://sst.dev/favicon.ico", "language": "en", "ogDescription": "Create and deploy a Hono API on Cloudflare with SST.", "og:description": "Create and deploy a Hono API on Cloudflare with SST.", "og:url": "https://sst.dev/docs/start/cloudflare/hono/", "twitter:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "ogLocale": "en", "scrapeId": "6a2a60a9-03a1-4f21-b66f-7ee988957d29", "sourceURL": "https://sst.dev/docs/start/cloudflare/hono", "url": "https://sst.dev/docs/start/cloudflare/hono", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Hono on Cloudflare with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to create your Cloudflare API token before starting.\n• Select the defaults and pick Cloudflare when initializing SST.\n• It's good to create a new stage for production when deploying your app.\n", "metadata": {"source_url": "https://sst.dev/docs/start/cloudflare/hono", "title": "Hono on Cloudflare with SST", "description": "Create and deploy a Hono API on Cloudflare with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:56:50", "type": "best_practices", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Hono on Cloudflare with SST | SST", "ogTitle": "Hono on Cloudflare with SST", "description": "Create and deploy a Hono API on Cloudflare with SST.", "ogUrl": "https://sst.dev/docs/start/cloudflare/hono/", "og:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:card": "summary_large_image", "og:locale": "en", "ogSiteName": "SST", "og:site_name": "SST", "og:title": "Hono on Cloudflare with SST", "favicon": "https://sst.dev/favicon.ico", "language": "en", "ogDescription": "Create and deploy a Hono API on Cloudflare with SST.", "og:description": "Create and deploy a Hono API on Cloudflare with SST.", "og:url": "https://sst.dev/docs/start/cloudflare/hono/", "twitter:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "ogLocale": "en", "scrapeId": "6a2a60a9-03a1-4f21-b66f-7ee988957d29", "sourceURL": "https://sst.dev/docs/start/cloudflare/hono", "url": "https://sst.dev/docs/start/cloudflare/hono", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Bus\"?\n\nAssistant: Reference doc for the `sst.aws.Bus` component.\n\nHere's a detailed explanation:\n\n\n## Create a bus\n```javascript\nconst bus = new sst.aws.Bus(\"MyBus\");\n```\n\n## Add a subscriber\n```javascript\nbus.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n## Customize the subscriber\n```javascript\nbus.subscribe(\"MySubscriber\", {\n  handler: \"src/subscriber.handler\",\n  timeout: \"60 seconds\"\n});\n```\n\n## Link the bus to a resource\nYou can link the bus to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [bus]\n});\n```\n\nOnce linked, you can publish messages to the bus from your app.\n\n```javascript\nimport { Resource } from \"sst\";\nimport { EventBridgeClient, PutEventsCommand } from \"@aws-sdk/client-eventbridge\";\n\nconst eb = new EventBridgeClient({});\n\nawait eb.send(new PutEventsCommand({\n  Entries: [\n    {\n      EventBusName: Resource.MyBus.name,\n      Source: \"my.source\",\n      Detail: JSON.stringify({ foo: \"bar\" })\n    }\n  ]\n}));\n```\n\n## Constructor\n```javascript\nnew Bus(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`BusArgs`](https://sst.dev/docs/component/aws/bus#busargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bus", "title": "Bus", "description": "Reference doc for the `sst.aws.Bus` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:57:03", "type": "overview", "page_metadata": {"ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/bus/", "og:description": "Reference doc for the `sst.aws.Bus` component.", "favicon": "https://sst.dev/favicon.ico", "og:title": "Bus", "ogDescription": "Reference doc for the `sst.aws.Bus` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVz.png", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVz.png", "twitter:card": "summary_large_image", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/QnVz.png", "ogUrl": "https://sst.dev/docs/component/aws/bus/", "title": "Bus | SST", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogTitle": "Bus", "og:locale": "en", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.Bus` component.", "scrapeId": "a27d5da9-a8f8-4405-a51a-65969afdff66", "sourceURL": "https://sst.dev/docs/component/aws/bus", "url": "https://sst.dev/docs/component/aws/bus", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Bus\"?\n\nAssistant: Here are some code examples:\n\n### Create a bus\n```yaml\nconst bus = new sst.aws.Bus(\"MyBus\");\n```\n\n### Add a subscriber\n```yaml\nbus.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n### Customize the subscriber\n```yaml\nbus.subscribe(\"MySubscriber\", {\n  handler: \"src/subscriber.handler\",\n  timeout: \"60 seconds\"\n});\n```\n\n### Link the bus to a resource\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [bus]\n});\n```\n\n### Publish messages to the bus\n```yaml\nimport { Resource } from \"sst\";\nimport { EventBridgeClient, PutEventsCommand } from \"@aws-sdk/client-eventbridge\";\n\nconst eb = new EventBridgeClient({});\n\nawait eb.send(new PutEventsCommand({\n  Entries: [\n    {\n      EventBusName: Resource.MyBus.name,\n      Source: \"my.source\",\n      Detail: JSON.stringify({ foo: \"bar\" })\n    }\n  ]\n}));\n```\n\n### Subscribe to an EventBus\n```yaml\nsst.aws.Bus.subscribe(\"MySubscription\", busArn, \"src/subscriber.handler\");\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bus", "title": "Bus", "description": "Reference doc for the `sst.aws.Bus` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:57:03", "type": "code_examples", "page_metadata": {"ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/bus/", "og:description": "Reference doc for the `sst.aws.Bus` component.", "favicon": "https://sst.dev/favicon.ico", "og:title": "Bus", "ogDescription": "Reference doc for the `sst.aws.Bus` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVz.png", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVz.png", "twitter:card": "summary_large_image", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/QnVz.png", "ogUrl": "https://sst.dev/docs/component/aws/bus/", "title": "Bus | SST", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogTitle": "Bus", "og:locale": "en", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.Bus` component.", "scrapeId": "a27d5da9-a8f8-4405-a51a-65969afdff66", "sourceURL": "https://sst.dev/docs/component/aws/bus", "url": "https://sst.dev/docs/component/aws/bus", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Bus\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can link the bus to other resources, like a function or your Next.js app.\n• When creating a bus in one stage, you can reference it in another stage to avoid creating a new bus.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bus", "title": "Bus", "description": "Reference doc for the `sst.aws.Bus` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 20:57:03", "type": "best_practices", "page_metadata": {"ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/bus/", "og:description": "Reference doc for the `sst.aws.Bus` component.", "favicon": "https://sst.dev/favicon.ico", "og:title": "Bus", "ogDescription": "Reference doc for the `sst.aws.Bus` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVz.png", "og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVz.png", "twitter:card": "summary_large_image", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/QnVz.png", "ogUrl": "https://sst.dev/docs/component/aws/bus/", "title": "Bus | SST", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogTitle": "Bus", "og:locale": "en", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.Bus` component.", "scrapeId": "a27d5da9-a8f8-4405-a51a-65969afdff66", "sourceURL": "https://sst.dev/docs/component/aws/bus", "url": "https://sst.dev/docs/component/aws/bus", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Remix\"?\n\nAssistant: Reference doc for the `sst.aws.Remix` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\nDeploy a Remix app that’s in the project root.\n\n```\nnew sst.aws.Remix(\"MyWeb\");\n```\n\n## Change the path\nDeploys the Remix app in the `my-remix-app/` directory.\n\n```\nnew sst.aws.Remix(\"MyWeb\", {\n\n  path: \"my-remix-app/\"\n\n});\n```\n\n## Add a custom domain\nSet a custom domain for your Remix app.\n\n```\nnew sst.aws.Remix(\"MyWeb\", {\n\n  domain: \"my-app.com\"\n\n});\n```\n\n## Redirect www to apex domain\nRedirect `www.my-app.com` to `my-app.com`.\n\n```\nnew sst.aws.Remix(\"MyWeb\", {\n\n  domain: {\n\n    name: \"my-app.com\",\n\n    redirects: [\"www.my-app.com\"]\n\n  }\n\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your Remix app. This will grant permissions to the resources and allow you to access it in your app.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Remix(\"MyWeb\", {\n\n  link: [bucket]\n\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your Remix app.\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n## Constructor\n```\nnew Remix(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args?` [`RemixArgs`](https://sst.dev/docs/component/aws/remix#remixargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/remix", "title": "Remix", "description": "Reference doc for the `sst.aws.Remix` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 20:57:14", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/remix/", "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.aws.Remix` component.", "og:url": "https://sst.dev/docs/component/aws/remix/", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVtaXg%3D.png", "og:locale": "en", "og:type": "article", "og:description": "Reference doc for the `sst.aws.Remix` component.", "og:image": "https://social-cards.sst.dev/v3-docs/UmVtaXg%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVtaXg%3D.png", "ogTitle": "Remix", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Remix | SST", "ogDescription": "Reference doc for the `sst.aws.Remix` component.", "language": "en", "ogSiteName": "SST", "og:title": "Remix", "scrapeId": "f16711d5-e098-4004-be2e-58b5afc3a83f", "sourceURL": "https://sst.dev/docs/component/aws/remix", "url": "https://sst.dev/docs/component/aws/remix", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Remix\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nnew sst.aws.Remix(\"MyWeb\");\n```\n\n### Change the path\n```yaml\nnew sst.aws.Remix(\"MyWeb\", {\n  path: \"my-remix-app/\"\n});\n```\n\n### Add a custom domain\n```yaml\nnew sst.aws.Remix(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Redirect www to apex domain\n```yaml\nnew sst.aws.Remix(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nnew sst.aws.Remix(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### Access linked resources\n```yaml\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyBucket.name);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/remix", "title": "Remix", "description": "Reference doc for the `sst.aws.Remix` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 20:57:14", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/remix/", "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.aws.Remix` component.", "og:url": "https://sst.dev/docs/component/aws/remix/", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVtaXg%3D.png", "og:locale": "en", "og:type": "article", "og:description": "Reference doc for the `sst.aws.Remix` component.", "og:image": "https://social-cards.sst.dev/v3-docs/UmVtaXg%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVtaXg%3D.png", "ogTitle": "Remix", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Remix | SST", "ogDescription": "Reference doc for the `sst.aws.Remix` component.", "language": "en", "ogSiteName": "SST", "og:title": "Remix", "scrapeId": "f16711d5-e098-4004-be2e-58b5afc3a83f", "sourceURL": "https://sst.dev/docs/component/aws/remix", "url": "https://sst.dev/docs/component/aws/remix", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Remix\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the SDK to access linked resources in your Remix app.\n• Configure the `buildCommand` to customize the build process for your Remix app.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/remix", "title": "Remix", "description": "Reference doc for the `sst.aws.Remix` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 20:57:14", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/remix/", "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.aws.Remix` component.", "og:url": "https://sst.dev/docs/component/aws/remix/", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVtaXg%3D.png", "og:locale": "en", "og:type": "article", "og:description": "Reference doc for the `sst.aws.Remix` component.", "og:image": "https://social-cards.sst.dev/v3-docs/UmVtaXg%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVtaXg%3D.png", "ogTitle": "Remix", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Remix | SST", "ogDescription": "Reference doc for the `sst.aws.Remix` component.", "language": "en", "ogSiteName": "SST", "og:title": "Remix", "scrapeId": "f16711d5-e098-4004-be2e-58b5afc3a83f", "sourceURL": "https://sst.dev/docs/component/aws/remix", "url": "https://sst.dev/docs/component/aws/remix", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Share Across Stages\"?\n\nAssistant: Share resources across stages in your app.\n\nHere's a detailed explanation:\n\n\n## Why share\nYou typically want to share for cases where:\n\n- Resources that are expensive and their pricing is not truly pay-per-use, like your Postgres cluster.\n- Or, if they contain data that these new stages need to reuse. For example, your PR stages might just be for testing against your staging data and don’t need to recreate some resources.\n\nWhile it might be tempting to share more resources across stages, we only recommend doing it for the above cases.\n\n## How to share\nTo help with this some SST components come with a `static get` method. These components are typically ones that people want to be able to share. Here are some components that have this:\n\n- [`Vpc`](https://sst.dev/docs/component/aws/vpc/)\n- [`Email`](https://sst.dev/docs/component/aws/email/)\n- [`Bucket`](https://sst.dev/docs/component/aws/bucket/)\n- [`Postgres`](https://sst.dev.docs/component/aws/postgres/)\n- [`CognitoUserPool`](https://sst.dev/docs/component/aws/cognito-user-pool/)\n- [`CognitoIdentityPool`](https://sst.dev/docs/component/aws/cognito-identity-pool/)\n\nIf you’d like us to add to this list, feel free to open a GitHub issue.\n\nIt’s worth noting that complex components like our frontends, `Nextjs`, or `StaticSite`, are not likely to be supported. Both because they are made up of a large number of resources. But also because they really aren’t worth sharing across stages.\n\n## Example\nThe [`static get`](https://sst.dev/docs/component/aws/bucket/#static-get) in the `Bucket` component has the following signature. It takes the name of the component and the name of the existing bucket.\n\n```\nget(name: string, bucketName: string)\n```\n\nImagine you create a bucket in the `dev` stage. And in your personal stage `frank`, instead of creating a new bucket, you want to share the bucket from `dev`.\n\n```\nconst bucket = $app.stage === \"frank\"\n\n  ? sst.aws.Bucket.get(\"MyBucket\", \"app-dev-mybucket-12345678\")\n\n  : new sst.aws.Bucket(\"MyBucket\");\n```\n\nWe are using [`$app.stage`](https://sst.dev/docs/reference/global/#app-stage), a global to get the current stage the CLI is running on. It allows us to conditionally create the bucket.\n\nHere `app-dev-mybucket-12345678` is the auto-generated bucket name for the bucket created\nin the `dev` stage. You can find this by outputting the bucket name in the `dev` stage.\n\n```\nreturn {\n\n  bucket: bucket.name\n\n};\n```\n\nAnd it’ll print it out on `sst deploy`.\n\n```\nbucket: app-dev-mybucket-12345678\n```\n\nYou can read more about outputs in the [`run`](https://sst.dev/docs/reference/config/#run) function.\n", "metadata": {"source_url": "https://sst.dev/docs/share-across-stages", "title": "Share Across Stages", "description": "Share resources across stages in your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 20:57:26", "type": "overview", "page_metadata": {"description": "Share resources across stages in your app.", "ogTitle": "Share Across Stages", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "og:title": "Share Across Stages", "og:type": "article", "twitter:card": "summary_large_image", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2hhcmUlMjBBY3Jvc3MlMjBTdGFnZXM%3D.png", "title": "Share Across Stages | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Share resources across stages in your app.", "ogUrl": "https://sst.dev/docs/share-across-stages/", "ogLocale": "en", "og:url": "https://sst.dev/docs/share-across-stages/", "ogSiteName": "SST", "ogDescription": "Share resources across stages in your app.", "ogImage": "https://social-cards.sst.dev/v3-docs/U2hhcmUlMjBBY3Jvc3MlMjBTdGFnZXM%3D.png", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U2hhcmUlMjBBY3Jvc3MlMjBTdGFnZXM%3D.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "8e385e3d-93ef-498f-84d0-50188d0053dc", "sourceURL": "https://sst.dev/docs/share-across-stages", "url": "https://sst.dev/docs/share-across-stages", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Share Across Stages\"?\n\nAssistant: Here are some code examples:\n\n### Bucket Sharing Example\n```yaml\nconst bucket = $app.stage === \"frank\"\n\n  ? sst.aws.Bucket.get(\"MyBucket\", \"app-dev-mybucket-12345678\")\n\n  : new sst.aws.Bucket(\"MyBucket\");\n```\n\n### Output Bucket Name\n```yaml\nreturn {\n\n  bucket: bucket.name\n\n};\n```\n\n### Deploy Output\n```yaml\nbucket: app-dev-mybucket-12345678\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/share-across-stages", "title": "Share Across Stages", "description": "Share resources across stages in your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 20:57:26", "type": "code_examples", "page_metadata": {"description": "Share resources across stages in your app.", "ogTitle": "Share Across Stages", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "og:title": "Share Across Stages", "og:type": "article", "twitter:card": "summary_large_image", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2hhcmUlMjBBY3Jvc3MlMjBTdGFnZXM%3D.png", "title": "Share Across Stages | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Share resources across stages in your app.", "ogUrl": "https://sst.dev/docs/share-across-stages/", "ogLocale": "en", "og:url": "https://sst.dev/docs/share-across-stages/", "ogSiteName": "SST", "ogDescription": "Share resources across stages in your app.", "ogImage": "https://social-cards.sst.dev/v3-docs/U2hhcmUlMjBBY3Jvc3MlMjBTdGFnZXM%3D.png", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U2hhcmUlMjBBY3Jvc3MlMjBTdGFnZXM%3D.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "8e385e3d-93ef-498f-84d0-50188d0053dc", "sourceURL": "https://sst.dev/docs/share-across-stages", "url": "https://sst.dev/docs/share-across-stages", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Share Across Stages\"?\n\nAssistant: Here are the recommended best practices:\n\n• Only share resources that are expensive or contain reusable data.\n• Avoid sharing complex components like frontends across stages.\n", "metadata": {"source_url": "https://sst.dev/docs/share-across-stages", "title": "Share Across Stages", "description": "Share resources across stages in your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 20:57:26", "type": "best_practices", "page_metadata": {"description": "Share resources across stages in your app.", "ogTitle": "Share Across Stages", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "og:title": "Share Across Stages", "og:type": "article", "twitter:card": "summary_large_image", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2hhcmUlMjBBY3Jvc3MlMjBTdGFnZXM%3D.png", "title": "Share Across Stages | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Share resources across stages in your app.", "ogUrl": "https://sst.dev/docs/share-across-stages/", "ogLocale": "en", "og:url": "https://sst.dev/docs/share-across-stages/", "ogSiteName": "SST", "ogDescription": "Share resources across stages in your app.", "ogImage": "https://social-cards.sst.dev/v3-docs/U2hhcmUlMjBBY3Jvc3MlMjBTdGFnZXM%3D.png", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U2hhcmUlMjBBY3Jvc3MlMjBTdGFnZXM%3D.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "8e385e3d-93ef-498f-84d0-50188d0053dc", "sourceURL": "https://sst.dev/docs/share-across-stages", "url": "https://sst.dev/docs/share-across-stages", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Drizzle with Amazon RDS and SST\"?\n\nAssistant: Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.\n\nHere's a detailed explanation:\n\n\n## Examples\nWe also have a few other Drizzle and Postgres examples that you can refer to.\n\n- [Use Next.js, Postgres, and Drizzle with the T3 Stack](https://sst.dev/docs/examples/#t3-stack-in-aws)\n- [Run Postgres in a local Docker container for dev](https://sst.dev/docs/examples/#aws-postgres-local)\n\n## 1. Create a project\nLet’s start by creating a Node.js app.\n\n```\n\nmkdir aws-drizzle && cd aws-drizzle\n\nnpm init -y\n```\n\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## Init Drizzle\nAdd Drizzle to your project. We’re also adding the `pg` client that Drizzle will use.\n\n```\nnpm install pg @types/pg drizzle-orm drizzle-kit\n```\nDrizzle ORM is what will be used to query our database, while Drizzle Kit will allow us to run migrations. It also comes with Drizzle Studio, a query browser.\n\nLet’s add the following to the `scripts` in the `package.json`.\n\n```\n\"scripts\": {\n\n  \"db\": \"sst shell drizzle-kit\"\n\n},\n```\nThe `sst shell` CLI will pass the credentials to Drizzle Kit and allow it to connect to your database.\n\nLet’s also update our `tsconfig.json`.\n\n```\n{\n\n  \"compilerOptions\": {\n\n    \"strict\": true\n\n  }\n\n}\n```\n\n## 2. Add a Postgres db\nLet’s add a Postgres database using [Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html). This needs a VPC. Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true, nat: \"ec2\" });\n\n  const rds = new sst.aws.Postgres(\"MyPostgres\", { vpc, proxy: true });\n\n},\n```\nThe `proxy` option configures an RDS Proxy behind the scenes making it ideal for serverless applications.\n\nWhile the `bastion` option will let us connect to the VPC from our local machine. We also need the NAT gateway for this example since we’ll be using a Lambda function, and this allows a Lambda function that’s in a VPC to access the internet.\n\n## Start Drizzle Studio\nWhen you run SST in dev it can start other dev processes for you. In this case we want to start Drizzle Studio. Add this below the `Postgres` component.\n\n```\nnew sst.x.DevCommand(\"Studio\", {\n\n  link: [rds],\n\n  dev: {\n\n    command: \"npx drizzle-kit studio\",\n\n  },\n\n});\n```\nThis will run the given command in dev.\n\n## Add an API\nWe’ll use a Lambda function as an API to query our database. Add the following to your `sst.config.ts` below the database config.\n\n```\nnew sst.aws.Function(\"MyApi\", {\n\n  vpc,\n\n  url: true,\n\n  link: [rds],\n\n  handler: \"src/api.handler\",\n});\n```\nWe are linking our database to the API.\n\n## Install a tunnel\nSince our database cluster is in a VPC, we’ll need a tunnel to connect to it from our local machine.\n\n```\nsudo npx sst tunnel install\n```\nThis needs _sudo_ to create a network interface on your machine. You’ll only need to do this once on your machine.\n\n## Start dev mode\nStart your app in dev mode. This runs your functions [_Live_](https://sst.dev/docs/live/).\n\n```\nnpx sst dev\n```\nIt’ll take a few minutes to create your database. Once complete, you’ll see this.\n\n```\n✓  Complete\n\n   MyApi: https://ouu5vovpxllyn5b6ot2nn6vdsa0hvcuj.lambda-url.us-east-1.on.aws\n```\nYou’ll see Drizzle Studio started in a tab called **Studio**. And a tunnel in the **Tunnel** tab.\n\n## 3. Create a schema\nLet’s define our Drizzle config. Add a `drizzle.config.ts` in your project root with this.\n\n```\nimport { Resource } from \"sst\";\n\nimport { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n\n  dialect: \"postgresql\",\n\n  // Pick up all our schema files\n\n  schema: [\"./src/**/*.sql.ts\"],\n\n  out: \"./migrations\",\n\n  dbCredentials: {\n\n    host: Resource.MyPostgres.host,\n\n    port: Resource.MyPostgres.port,\n\n    user: Resource.MyPostgres.username,\n\n    password: Resource.MyPostgres.password,\n\n    database: Resource.MyPostgres.database,\n\n  },\n\n});\n```\nHere we are telling Drizzle that we’ll be specifying your database schema in `.sql.ts` files in our `src/` directory.\n\nWe are going to create a simple database to store some todos. Create a new file in `src/todo.sql.ts` with the following.\n\n```\nimport { text, serial, pgTable } from \"drizzle-orm/pg-core\";\n\nexport const todo = pgTable(\"todo\", {\n\n  id: serial(\"id\").primaryKey(),\n\n  title: text(\"title\").notNull(),\n\n  description: text(\"description\"),\n\n});\n```\n\n## 4. Generate a migration\nWe can use this to generate a migration.\n\n```\nnpm run db generate\n```\nThis in turn runs `sst shell drizzle-kit generate` and creates a new migration in the `migrations/` directory.\n\n## Apply the migration\nNow we can apply our migration using.\n\n```\nnpm run db migrate\n```\nThis should create our new schema.\n\nThis needs the tunnel to connect to the database. So you should have `sst dev` in a separate terminal.\n\n```\nnpx sst tunnel\n```\nAlternatively, you can just run the tunnel using the above command.\n\n## Drizzle Studio\nTo see our schema in action we can open the Drizzle Studio. Head over to the **Studio** tab in your `sst dev` session and go to the link.\n\nOr head over to `https://local.drizzle.studio` in your browser.\n\n![Initial Drizzle Studio with SST](https://sst.dev/_astro/initial-drizzle-studio-with-sst.CB_bXMZf_ZkxB95.webp)\n\n## 5. Query the database\nTo use Drizzle ORM to query our database, create a new `src/drizzle.ts` config file with the following.\n\n```\nimport { drizzle } from \"drizzle-orm/node-postgres\";\n\nimport { Pool } from \"pg\";\n\nimport { Resource } from \"sst\";\n\nimport * as schema from \"./todo.sql\";\n\nconst pool = new Pool({\n\n  host: Resource.MyPostgres.host,\n\n  port: Resource.MyPostgres.port,\n\n  user: Resource.MyPostgres.username,\n\n  password: Resource.MyPostgres.password,\n\n  database: Resource.MyPostgres.database,\n\n});\n\nexport const db = drizzle(pool, { schema });\n```\nNow we can use that in the API. Create our API handler in `src/api.ts`.\n\n```\nimport { db } from \"./drizzle\";\n\nimport { todo } from \"./todo.sql\";\n\nimport { APIGatewayProxyEventV2 } from \"aws-lambda\";\n\nexport const handler = async (evt: APIGatewayProxyEventV2) => {\n\n  if (evt.requestContext.http.method === \"GET\") {\n\n    const result = await db.select().from(todo).execute();\n\n    return {\n\n      statusCode: 200,\n\n      body: JSON.stringify(result, null, 2),\n\n    };\n\n  }\n\n  if (evt.requestContext.http.method === \"POST\") {\n\n    const result = await db\n\n      .insert(todo)\n\n      .values({ title: \"Todo\", description: crypto.randomUUID() })\n\n      .returning()\n\n      .execute();\n\n    return {\n\n      statusCode: 200,\n\n      body: JSON.stringify(result),\n\n    };\n\n  }\n\n};\n```\n\n## Test your app\nTo test our app, make a _POST_ request to our API.\n\n```\ncurl -X POST https://ouu5vovpxllyn5b6ot2nn6vdsa0hvcuj.lambda-url.us-east-1.on.aws\n```\nNow if you head over to `https://ouu5vovpxllyn5b6ot2nn6vdsa0hvcuj.lambda-url.us-east-1.on.aws` in your browser, you’ll see that a todo has been added.\n\n![Todo created with Drizzle in SST](https://sst.dev/_astro/todo-created-with-drizzle-in-sst.QK8LRshJ_ZCWz0P.webp)\n\nYou should see this in the Drizzle Studio as well.\n\n## 6. Deploy your app\nFinally, let’s deploy your app.\n\n```\nnpx sst deploy --stage production\n```\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/drizzle", "title": "Drizzle with Amazon RDS and SST", "description": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-02-27 20:58:03", "type": "overview", "page_metadata": {"description": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/RHJpenpsZSUyMHdpdGglMjBBbWF6b24lMjBSRFMlMjBhbmQlMjBTU1Q%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/RHJpenpsZSUyMHdpdGglMjBBbWF6b24lMjBSRFMlMjBhbmQlMjBTU1Q%3D.png", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RHJpenpsZSUyMHdpdGglMjBBbWF6b24lMjBSRFMlMjBhbmQlMjBTU1Q%3D.png", "ogDescription": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "og:url": "https://sst.dev/docs/start/aws/drizzle/", "title": "Drizzle with Amazon RDS and SST | SST", "ogTitle": "Drizzle with Amazon RDS and SST", "ogLocale": "en", "og:locale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/start/aws/drizzle/", "og:description": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "og:title": "Drizzle with Amazon RDS and SST", "scrapeId": "ca2f70d0-a7a2-4a5f-9ce1-783b350bfbde", "sourceURL": "https://sst.dev/docs/start/aws/drizzle", "url": "https://sst.dev/docs/start/aws/drizzle", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Drizzle with Amazon RDS and SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nmkdir aws-drizzle && cd aws-drizzle\nnpm init -y\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\nnpm install\n```\n\n### Init Drizzle\n```yaml\nnpm install pg @types/pg drizzle-orm drizzle-kit\n\n\"scripts\": {\n  \"db\": \"sst shell drizzle-kit\"\n}\n```\n\n### Update tsconfig.json\n```yaml\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\n### Add a Postgres db\n```yaml\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true, nat: \"ec2\" });\n  const rds = new sst.aws.Postgres(\"MyPostgres\", { vpc, proxy: true });\n},\n```\n\n### Start Drizzle Studio\n```yaml\nnew sst.x.DevCommand(\"Studio\", {\n  link: [rds],\n  dev: {\n    command: \"npx drizzle-kit studio\",\n  },\n});\n```\n\n### Add an API\n```yaml\nnew sst.aws.Function(\"MyApi\", {\n  vpc,\n  url: true,\n  link: [rds],\n  handler: \"src/api.handler\",\n});\n```\n\n### Install a tunnel\n```yaml\nsudo npx sst tunnel install\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Create a schema\n```yaml\nimport { Resource } from \"sst\";\nimport { defineConfig } from \"drizzle-kit\";\nexport default defineConfig({\n  dialect: \"postgresql\",\n  schema: [\"./src/**/*.sql.ts\"],\n  out: \"./migrations\",\n  dbCredentials: {\n    host: Resource.MyPostgres.host,\n    port: Resource.MyPostgres.port,\n    user: Resource.MyPostgres.username,\n    password: Resource.MyPostgres.password,\n    database: Resource.MyPostgres.database,\n  },\n});\n```\n\n### Generate a migration\n```yaml\nnpm run db generate\n```\n\n### Apply the migration\n```yaml\nnpm run db migrate\n```\n\n### Query the database\n```yaml\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\nimport { Resource } from \"sst\";\nimport * as schema from \"./todo.sql\";\nconst pool = new Pool({\n  host: Resource.MyPostgres.host,\n  port: Resource.MyPostgres.port,\n  user: Resource.MyPostgres.username,\n  password: Resource.MyPostgres.password,\n  database: Resource.MyPostgres.database,\n});\nexport const db = drizzle(pool, { schema });\n```\n\n### API handler\n```yaml\nimport { db } from \"./drizzle\";\nimport { todo } from \"./todo.sql\";\nimport { APIGatewayProxyEventV2 } from \"aws-lambda\";\nexport const handler = async (evt: APIGatewayProxyEventV2) => {\n  if (evt.requestContext.http.method === \"GET\") {\n    const result = await db.select().from(todo).execute();\n    return {\n      statusCode: 200,\n      body: JSON.stringify(result, null, 2),\n    };\n  }\n  if (evt.requestContext.http.method === \"POST\") {\n    const result = await db\n      .insert(todo)\n      .values({ title: \"Todo\", description: crypto.randomUUID() })\n      .returning()\n      .execute();\n    return {\n      statusCode: 200,\n      body: JSON.stringify(result),\n    };\n  }\n};\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/drizzle", "title": "Drizzle with Amazon RDS and SST", "description": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-02-27 20:58:03", "type": "code_examples", "page_metadata": {"description": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/RHJpenpsZSUyMHdpdGglMjBBbWF6b24lMjBSRFMlMjBhbmQlMjBTU1Q%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/RHJpenpsZSUyMHdpdGglMjBBbWF6b24lMjBSRFMlMjBhbmQlMjBTU1Q%3D.png", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RHJpenpsZSUyMHdpdGglMjBBbWF6b24lMjBSRFMlMjBhbmQlMjBTU1Q%3D.png", "ogDescription": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "og:url": "https://sst.dev/docs/start/aws/drizzle/", "title": "Drizzle with Amazon RDS and SST | SST", "ogTitle": "Drizzle with Amazon RDS and SST", "ogLocale": "en", "og:locale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/start/aws/drizzle/", "og:description": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "og:title": "Drizzle with Amazon RDS and SST", "scrapeId": "ca2f70d0-a7a2-4a5f-9ce1-783b350bfbde", "sourceURL": "https://sst.dev/docs/start/aws/drizzle", "url": "https://sst.dev/docs/start/aws/drizzle", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Drizzle with Amazon RDS and SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• Use the `proxy` option for RDS Proxy to optimize serverless applications.\n• Ensure to have the NAT gateway for Lambda functions to access the internet.\n• Run `sst dev` in a separate terminal when applying migrations.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/drizzle", "title": "Drizzle with Amazon RDS and SST", "description": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "has_code_examples": true, "has_best_practices": true, "section_count": 17, "timestamp": "2025-02-27 20:58:03", "type": "best_practices", "page_metadata": {"description": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/RHJpenpsZSUyMHdpdGglMjBBbWF6b24lMjBSRFMlMjBhbmQlMjBTU1Q%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/RHJpenpsZSUyMHdpdGglMjBBbWF6b24lMjBSRFMlMjBhbmQlMjBTU1Q%3D.png", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RHJpenpsZSUyMHdpdGglMjBBbWF6b24lMjBSRFMlMjBhbmQlMjBTU1Q%3D.png", "ogDescription": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "og:url": "https://sst.dev/docs/start/aws/drizzle/", "title": "Drizzle with Amazon RDS and SST | SST", "ogTitle": "Drizzle with Amazon RDS and SST", "ogLocale": "en", "og:locale": "en", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/start/aws/drizzle/", "og:description": "Use Drizzle and SST to manage and deploy your Amazon Postgres RDS database.", "og:title": "Drizzle with Amazon RDS and SST", "scrapeId": "ca2f70d0-a7a2-4a5f-9ce1-783b350bfbde", "sourceURL": "https://sst.dev/docs/start/aws/drizzle", "url": "https://sst.dev/docs/start/aws/drizzle", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"PostgreSQL Component\"?\n\nAssistant: Documentation for the PostgreSQL component in SST.\n\nHere's a detailed explanation:\n\n\n## Introduction\nThe PostgreSQL component allows you to easily create and manage PostgreSQL databases in your SST applications.\n\n## Installation\nTo install the PostgreSQL component, run the following command:\n\n```bash\nnpm install @serverless-stack/postgres\n```\n\n## Usage\nYou can use the PostgreSQL component in your SST app as follows:\n\n```javascript\nimport { Postgres } from '@serverless-stack/postgres';\n\nconst db = new Postgres('MyDatabase');\n```\n\n## Configuration\nYou can configure the PostgreSQL component with various options:\n- `database`: The name of the database.\n- `user`: The database user.\n- `password`: The password for the user.\n\n## Best Practices\n- Always use environment variables for sensitive information like passwords.\n- Regularly back up your database.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/postgres", "title": "PostgreSQL Component", "description": "Documentation for the PostgreSQL component in SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 20:58:34", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXM%3D.png", "ogTitle": "Postgres", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.Postgres` component.", "ogUrl": "https://sst.dev/docs/component/aws/postgres/", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXM%3D.png", "og:type": "article", "og:description": "Reference doc for the `sst.aws.Postgres` component.", "og:site_name": "SST", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXM%3D.png", "description": "Reference doc for the `sst.aws.Postgres` component.", "ogSiteName": "SST", "language": "en", "og:url": "https://sst.dev/docs/component/aws/postgres/", "og:title": "Postgres", "title": "Postgres | SST", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "scrapeId": "ec75ca6e-8a06-4f01-942a-19177433bc6e", "sourceURL": "https://sst.dev/docs/component/aws/postgres", "url": "https://sst.dev/docs/component/aws/postgres", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"PostgreSQL Component\"?\n\nAssistant: Here are some code examples:\n\n### PostgreSQL Installation Command\n```yaml\nnpm install @serverless-stack/postgres\n```\n\n### PostgreSQL Usage Example\n```yaml\nimport { Postgres } from '@serverless-stack/postgres';\n\nconst db = new Postgres('MyDatabase');\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/postgres", "title": "PostgreSQL Component", "description": "Documentation for the PostgreSQL component in SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 20:58:34", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXM%3D.png", "ogTitle": "Postgres", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.Postgres` component.", "ogUrl": "https://sst.dev/docs/component/aws/postgres/", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXM%3D.png", "og:type": "article", "og:description": "Reference doc for the `sst.aws.Postgres` component.", "og:site_name": "SST", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXM%3D.png", "description": "Reference doc for the `sst.aws.Postgres` component.", "ogSiteName": "SST", "language": "en", "og:url": "https://sst.dev/docs/component/aws/postgres/", "og:title": "Postgres", "title": "Postgres | SST", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "scrapeId": "ec75ca6e-8a06-4f01-942a-19177433bc6e", "sourceURL": "https://sst.dev/docs/component/aws/postgres", "url": "https://sst.dev/docs/component/aws/postgres", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"PostgreSQL Component\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always use environment variables for sensitive information like passwords.\n• Regularly back up your database.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/postgres", "title": "PostgreSQL Component", "description": "Documentation for the PostgreSQL component in SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 20:58:34", "type": "best_practices", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXM%3D.png", "ogTitle": "Postgres", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.Postgres` component.", "ogUrl": "https://sst.dev/docs/component/aws/postgres/", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXM%3D.png", "og:type": "article", "og:description": "Reference doc for the `sst.aws.Postgres` component.", "og:site_name": "SST", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXM%3D.png", "description": "Reference doc for the `sst.aws.Postgres` component.", "ogSiteName": "SST", "language": "en", "og:url": "https://sst.dev/docs/component/aws/postgres/", "og:title": "Postgres", "title": "Postgres | SST", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "scrapeId": "ec75ca6e-8a06-4f01-942a-19177433bc6e", "sourceURL": "https://sst.dev/docs/component/aws/postgres", "url": "https://sst.dev/docs/component/aws/postgres", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"NestJS on AWS with SST\"?\n\nAssistant: Create and deploy an NestJS app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our Nest app.\n\n```\n\nnest new aws-nestjs-container\n\ncd aws-nestjs-container\n```\n\nWe are picking npm as the package manager.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nThis’ll create a `sst.config.ts` file in your project root.\n\nTo make sure the types in the `sst.config.ts` are picked up, add the following to the `tsconfig.json`.\n\n```\n{\n \"include\": [\"src/**/*\", \"test/**/*\", \"sst-env.d.ts\"]\n}\n```\n\n## 2. Add a Service\nTo deploy our Nest app, let’s add an [AWS Fargate](https://aws.amazon.com/fargate/) container with [Amazon ECS](https://aws.amazon.com/ecs/). Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run start:dev\",\n\n    },\n\n  });\n}\n``` \n\nThis creates a VPC with an ECS Cluster, and adds a Fargate service to it.\n\nThe `dev.command` tells SST to instead run our Nest app locally in dev mode.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Nest app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyService** in the sidebar and open your Nest app in your browser.\n\n## 3. Add an S3 Bucket\nLet’s add an S3 Bucket for file uploads. Add this to your `sst.config.ts` below the `Vpc` component.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n## Link the bucket\nNow, link the bucket to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [bucket],\n\n});\n```\n\nThis will allow us to reference the bucket in our Nest app.\n\n## 4. Upload a file\nWe want a `POST` request made to the `/` route to upload a file to our S3 bucket. Let’s add this below our `getHello` method in our `src/app.controller.ts`.\n\n```\n@Post()\n@UseInterceptors(FileInterceptor('file'))\nasync uploadFile(@UploadedFile() file: Express.Multer.File): Promise<string> {\n\n  const params = {\n\n    Bucket: Resource.MyBucket.name,\n\n    ContentType: file.mimetype,\n\n    Key: file.originalname,\n\n    Body: file.buffer,\n\n  };\n\n  const upload = new Upload({\n\n    params,\n\n    client: s3,\n\n  });\n\n  await upload.done();\n\n  return 'File uploaded successfully.';\n}\n```\n\nAdd the imports. We’ll use the extra ones below.\n\n```\nimport {\n\n  S3Client,\n\n  GetObjectCommand,\n\n  ListObjectsV2Command,\n\n} from '@aws-sdk/client-s3';\n\nimport { Resource } from 'sst';\n\nimport { Express } from 'express';\n\nimport { Upload } from '@aws-sdk/lib-storage';\n\nimport { FileInterceptor } from '@nestjs/platform-express';\n\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\nimport { Post, Redirect, UploadedFile, UseInterceptors } from '@nestjs/common';\n\nconst s3 = new S3Client({});\n```\n\nAnd install the npm packages.\n\n```\nnpm install -D @types/multer\n\nnpm install @aws-sdk/client-s3 @aws-sdk/lib-storage @aws-sdk/s3-request-presigner\n```\n\n## 5. Download the file\nWe’ll add a `/latest` route that’ll download the latest file in our S3 bucket. Let’s add this below our `uploadFile` method in `src/app.controller.ts`.\n\n```\n@Get('latest')\n@Redirect('/', 302)\nasync getLatestFile() {\n\n  const objects = await s3.send(\n\n    new ListObjectsV2Command({\n\n      Bucket: Resource.MyBucket.name,\n\n    }),\n\n  );\n\n  const latestFile = objects.Contents.sort(\n\n    (a, b) => b.LastModified.getTime() - a.LastModified.getTime(),\n\n  )[0];\n\n  const command = new GetObjectCommand({\n\n    Key: latestFile.Key,\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(s3, command);\n\n  return { url };\n}\n```\n\n## Test your app\nTo upload a file run the following from your project root.\n\n```\ncurl -F file=@package.json http://localhost:3000/\n```\n\nThis should upload the `package.json`. Now head over to `http://localhost:3000/latest` in your browser and it’ll download you what you just uploaded.\n\n## 5. Deploy your app\nTo deploy our app we’ll first add a `Dockerfile`.\n\n```\nFROM node:22\n\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nRUN npm run build\n\nEXPOSE 3000\n\nCMD [\"node\", \"dist/main\"]\n```\n\nThis just builds our Nest app in a Docker image.\n\nLet’s also add a `.dockerignore` file in the root.\n\n```\ndist\n\nnode_modules\n```\n\nNow to build our Docker image and deploy we run:\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production. This’ll give the URL of your Nest app deployed as a Fargate service.\n\n```\n✓  Complete\n\n   MyService: http://jayair-MyServiceLoadBala-592628062.us-east-1.elb.amazonaws.com\n```\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/nestjs", "title": "NestJS on AWS with SST", "description": "Create and deploy an NestJS app to AWS with SST.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-02-27 20:59:05", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "language": "en", "ogTitle": "NestJS on AWS with SST", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:description": "Create and deploy an NestJS app to AWS with SST.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/TmVzdEpTJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/TmVzdEpTJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogImage": "https://social-cards.sst.dev/v3-docs/TmVzdEpTJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "ogSiteName": "SST", "og:type": "article", "og:url": "https://sst.dev/docs/start/aws/nestjs/", "description": "Create and deploy an NestJS app to AWS with SST.", "ogLocale": "en", "title": "NestJS on AWS with SST | SST", "og:title": "NestJS on AWS with SST", "ogDescription": "Create and deploy an NestJS app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/nestjs/", "scrapeId": "c7e8e432-4f47-430f-97d9-b0efb28ac7c2", "sourceURL": "https://sst.dev/docs/start/aws/nestjs", "url": "https://sst.dev/docs/start/aws/nestjs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"NestJS on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnest new aws-nestjs-container\n\ncd aws-nestjs-container\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Add a Service\n```yaml\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run start:dev\",\n\n    },\n\n  });\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/nestjs", "title": "NestJS on AWS with SST", "description": "Create and deploy an NestJS app to AWS with SST.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-02-27 20:59:05", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "language": "en", "ogTitle": "NestJS on AWS with SST", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:description": "Create and deploy an NestJS app to AWS with SST.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/TmVzdEpTJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/TmVzdEpTJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogImage": "https://social-cards.sst.dev/v3-docs/TmVzdEpTJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "ogSiteName": "SST", "og:type": "article", "og:url": "https://sst.dev/docs/start/aws/nestjs/", "description": "Create and deploy an NestJS app to AWS with SST.", "ogLocale": "en", "title": "NestJS on AWS with SST | SST", "og:title": "NestJS on AWS with SST", "ogDescription": "Create and deploy an NestJS app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/nestjs/", "scrapeId": "c7e8e432-4f47-430f-97d9-b0efb28ac7c2", "sourceURL": "https://sst.dev/docs/start/aws/nestjs", "url": "https://sst.dev/docs/start/aws/nestjs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Deno on AWS with SST\"?\n\nAssistant: Create and deploy a Deno app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our Deno app.\n\n```\ndeno init aws-deno\n```\n\n## Init Deno Serve\nReplace your `main.ts` with the following.\n\n```\nDeno.serve(async (req) => {\n\n  const url = new URL(req.url);\n\n  if (url.pathname === \"/\" && req.method === \"GET\") {\n\n    return new Response(\"Hello World!\");\n\n  }\n\n  return new Response(\"404!\");\n});\n```\n\nThis starts up an HTTP server by default on port `8000`.\n\n## Init SST\nMake sure you have [SST installed globally](https://sst.dev/docs/reference/cli).\n\n```\nsst init\n```\n\nThis’ll create an `sst.config.ts` file in your project root.\n\n## 2. Add a Service\nTo deploy our Deno app, let’s add an [AWS Fargate](https://aws.amazon.com/fargate/) container with [Amazon ECS](https://aws.amazon.com/ecs/). Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"8000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"deno task dev\",\n\n    },\n\n  });\n}\n```\n\nThis creates a VPC with an ECS Cluster, and adds a Fargate service to it.\n\nThe `dev.command` tells SST to instead run our Deno app locally in dev mode.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Deno app.\n\n```\nsst dev\n```\n\nOnce complete, click on **MyService** in the sidebar and open your Deno app in your browser.\n\n## 3. Add an S3 Bucket\nLet’s add an S3 Bucket for file uploads. Add this to your `sst.config.ts` below the `Vpc` component.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n## Link the bucket\nNow, link the bucket to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [bucket],\n});\n```\n\nThis will allow us to reference the bucket in our Deno app.\n\n## 4. Upload a file\nWe want a `POST` request made to the `/` route to upload a file to our S3 bucket. Let’s add this below our _Hello World_ route in our `main.ts`.\n\n```\nif (url.pathname === \"/\" && req.method === \"POST\") {\n\n  const formData: FormData = await req.formData();\n\n  const file: File | null = formData?.get(\"file\") as File;\n\n  const params = {\n\n    Bucket: Resource.MyBucket.name,\n\n    ContentType: file.type,\n\n    Key: file.name,\n\n    Body: file,\n\n  };\n\n  const upload = new Upload({\n\n    params,\n\n    client: s3,\n\n  });\n\n  await upload.done();\n\n  return new Response(\"File uploaded successfully.\");\n}\n```\n\nAdd the imports. We’ll use the extra ones below.\n\n```\nimport { Resource } from \"sst\";\n\nimport {\n\n  S3Client,\n\n  GetObjectCommand,\n\n  ListObjectsV2Command,\n\n} from \"@aws-sdk/client-s3\";\n\nimport { Upload } from \"@aws-sdk/lib-storage\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nconst s3 = new S3Client();\n```\n\nAnd install the npm packages.\n\n```\ndeno install npm:sst npm:@aws-sdk/client-s3 npm:@aws-sdk/lib-storage npm:@aws-sdk/s3-request-presigner\n```\n\n## 5. Download the file\nWe’ll add a `/latest` route that’ll download the latest file in our S3 bucket. Let’s add this below our upload route in `main.ts`.\n\n```\nif (url.pathname === \"/latest\" && req.method === \"GET\") {\n\n  const objects = await s3.send(\n\n    new ListObjectsV2Command({\n\n      Bucket: Resource.MyBucket.name,\n\n    }),\n\n  );\n\n  const latestFile = objects.Contents!.sort(\n\n    (a, b) =>\n\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0),\n\n  )[0];\n\n  const command = new GetObjectCommand({\n\n    Key: latestFile.Key,\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return Response.redirect(await getSignedUrl(s3, command));\n}\n```\n\n#### Test your app\nTo upload a file run the following from your project root. You might have to go to the `MyService` tab in the sidebar and accept the Deno permission prompts.\n\n```\ncurl -F file=@deno.json http://localhost:8000/\n```\n\nThis should upload the `deno.json`. Now head over to `http://localhost:8000/latest` in your browser and it’ll show you what you just uploaded.\n\n## 5. Deploy your app\nTo deploy our app we’ll first add a `Dockerfile`.\n\n```\nFROM denoland/deno\n\nEXPOSE 8000\n\nUSER deno\n\nWORKDIR /app\n\nADD . /app\n\nRUN deno install --entrypoint main.ts\n\nCMD [\"run\", \"--allow-all\",  \"main.ts\"]\n```\n\nNow to build our Docker image and deploy we run:\n\n```\nsst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production. This’ll give the URL of your Deno app deployed as a Fargate service.\n\n```\n✓  Complete\n\n   MyService: http://prod-MyServiceLoadBalanc-491430065.us-east-1.elb.amazonaws.com\n```\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and view logs from it.\n\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/deno", "title": "Deno on AWS with SST", "description": "Create and deploy a Deno app to AWS with SST.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-02-27 20:59:27", "type": "overview", "page_metadata": {"og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/RGVubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:title": "Deno on AWS with SST", "ogDescription": "Create and deploy a Deno app to AWS with SST.", "og:locale": "en", "og:description": "Create and deploy a Deno app to AWS with SST.", "og:image": "https://social-cards.sst.dev/v3-docs/RGVubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "title": "Deno on AWS with SST | SST", "og:url": "https://sst.dev/docs/start/aws/deno/", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/RGVubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogSiteName": "SST", "og:type": "article", "description": "Create and deploy a Deno app to AWS with SST.", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Deno on AWS with SST", "ogUrl": "https://sst.dev/docs/start/aws/deno/", "scrapeId": "e04796a9-92a2-471d-84f7-5752366f3b00", "sourceURL": "https://sst.dev/docs/start/aws/deno", "url": "https://sst.dev/docs/start/aws/deno", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Deno on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\ndeno init aws-deno\n```\n\n### Init Deno Serve\n```yaml\nDeno.serve(async (req) => {\n\n  const url = new URL(req.url);\n\n  if (url.pathname === \"/\" && req.method === \"GET\") {\n\n    return new Response(\"Hello World!\");\n\n  }\n\n  return new Response(\"404!\");\n});\n```\n\n### Init SST\n```yaml\nsst init\n```\n\n### Add a Service\n```yaml\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"8000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"deno task dev\",\n\n    },\n\n  });\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/deno", "title": "Deno on AWS with SST", "description": "Create and deploy a Deno app to AWS with SST.", "has_code_examples": true, "has_best_practices": false, "section_count": 11, "timestamp": "2025-02-27 20:59:27", "type": "code_examples", "page_metadata": {"og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/RGVubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:title": "Deno on AWS with SST", "ogDescription": "Create and deploy a Deno app to AWS with SST.", "og:locale": "en", "og:description": "Create and deploy a Deno app to AWS with SST.", "og:image": "https://social-cards.sst.dev/v3-docs/RGVubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "title": "Deno on AWS with SST | SST", "og:url": "https://sst.dev/docs/start/aws/deno/", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/RGVubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogSiteName": "SST", "og:type": "article", "description": "Create and deploy a Deno app to AWS with SST.", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Deno on AWS with SST", "ogUrl": "https://sst.dev/docs/start/aws/deno/", "scrapeId": "e04796a9-92a2-471d-84f7-5752366f3b00", "sourceURL": "https://sst.dev/docs/start/aws/deno", "url": "https://sst.dev/docs/start/aws/deno", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Dynamo\"?\n\nAssistant: Reference doc for the `sst.aws.Dynamo` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\n```javascript\nconst table = new sst.aws.Dynamo(\"MyTable\", {\n  fields: {\n    userId: \"string\",\n    noteId: \"string\"\n  },\n  primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" }\n});\n```\n\n## Add a global index\nOptionally add a global index to the table.\n\n```javascript\nnew sst.aws.Dynamo(\"MyTable\", {\n  fields: {\n    userId: \"string\",\n    noteId: \"string\",\n    createdAt: \"number\",\n  },\n  primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" },\n  globalIndexes: {\n    CreatedAtIndex: { hashKey: \"userId\", rangeKey: \"createdAt\" }\n  }\n});\n```\n\n## Add a local index\nOptionally add a local index to the table.\n\n```javascript\nnew sst.aws.Dynamo(\"MyTable\", {\n  fields: {\n    userId: \"string\",\n    noteId: \"string\",\n    createdAt: \"number\",\n  },\n  primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" },\n  localIndexes: {\n    CreatedAtIndex: { rangeKey: \"createdAt\" }\n  }\n});\n```\n\n## Subscribe to a DynamoDB Stream\nTo subscribe to a [DynamoDB Stream](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html), start by enabling it.\n\n```javascript\nconst table = new sst.aws.Dynamo(\"MyTable\", {\n  fields: {\n    userId: \"string\",\n    noteId: \"string\"\n  },\n  primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" },\n  stream: \"new-and-old-images\"\n});\n```\n\nThen, subscribing to it.\n\n```javascript\ntable.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n## Link the table to a resource\nYou can link the table to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [table]\n});\n```\n\nOnce linked, you can query the table through your app.\n\n```javascript\nimport { Resource } from \"sst\";\nimport { DynamoDBClient, QueryCommand, ScanCommand } from \"@aws-sdk/client-dynamodb\";\n\nconst client = new DynamoDBClient();\n\nawait client.send(new QueryCommand({\n  TableName: Resource.MyTable.name,\n  KeyConditionExpression: \"userId = :userId\",\n  ExpressionAttributeValues: {\n    \":userId\": \"my-user-id\"\n  }\n}));\n```\n\n## Constructor\n```javascript\nnew Dynamo(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`DynamoArgs`](https://sst.dev/docs/component/aws/dynamo#dynamoargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dynamo", "title": "Dynamo", "description": "Reference doc for the `sst.aws.Dynamo` component.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-02-27 20:59:48", "type": "overview", "page_metadata": {"ogSiteName": "SST", "title": "Dynamo | SST", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "description": "Reference doc for the `sst.aws.Dynamo` component.", "og:url": "https://sst.dev/docs/component/aws/dynamo/", "ogUrl": "https://sst.dev/docs/component/aws/dynamo/", "twitter:image": "https://social-cards.sst.dev/v3-docs/RHluYW1v.png", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Dynamo", "ogDescription": "Reference doc for the `sst.aws.Dynamo` component.", "og:description": "Reference doc for the `sst.aws.Dynamo` component.", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Dynamo", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/RHluYW1v.png", "ogImage": "https://social-cards.sst.dev/v3-docs/RHluYW1v.png", "twitter:card": "summary_large_image", "og:locale": "en", "language": "en", "scrapeId": "f3a55cd2-98b7-4d3e-a16a-9e22921c3bae", "sourceURL": "https://sst.dev/docs/component/aws/dynamo", "url": "https://sst.dev/docs/component/aws/dynamo", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Dynamo\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nconst table = new sst.aws.Dynamo(\"MyTable\", {\n  fields: {\n    userId: \"string\",\n    noteId: \"string\"\n  },\n  primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" }\n});\n```\n\n### Add a global index\n```yaml\nnew sst.aws.Dynamo(\"MyTable\", {\n  fields: {\n    userId: \"string\",\n    noteId: \"string\",\n    createdAt: \"number\",\n  },\n  primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" },\n  globalIndexes: {\n    CreatedAtIndex: { hashKey: \"userId\", rangeKey: \"createdAt\" }\n  }\n});\n```\n\n### Add a local index\n```yaml\nnew sst.aws.Dynamo(\"MyTable\", {\n  fields: {\n    userId: \"string\",\n    noteId: \"string\",\n    createdAt: \"number\",\n  },\n  primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" },\n  localIndexes: {\n    CreatedAtIndex: { rangeKey: \"createdAt\" }\n  }\n});\n```\n\n### Subscribe to a DynamoDB Stream\n```yaml\nconst table = new sst.aws.Dynamo(\"MyTable\", {\n  fields: {\n    userId: \"string\",\n    noteId: \"string\"\n  },\n  primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" },\n  stream: \"new-and-old-images\"\n});\ntable.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n### Link the table to a resource\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [table]\n});\n\nimport { Resource } from \"sst\";\nimport { DynamoDBClient, QueryCommand, ScanCommand } from \"@aws-sdk/client-dynamodb\";\n\nconst client = new DynamoDBClient();\n\nawait client.send(new QueryCommand({\n  TableName: Resource.MyTable.name,\n  KeyConditionExpression: \"userId = :userId\",\n  ExpressionAttributeValues: {\n    \":userId\": \"my-user-id\"\n  }\n}));\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dynamo", "title": "Dynamo", "description": "Reference doc for the `sst.aws.Dynamo` component.", "has_code_examples": true, "has_best_practices": false, "section_count": 7, "timestamp": "2025-02-27 20:59:48", "type": "code_examples", "page_metadata": {"ogSiteName": "SST", "title": "Dynamo | SST", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "description": "Reference doc for the `sst.aws.Dynamo` component.", "og:url": "https://sst.dev/docs/component/aws/dynamo/", "ogUrl": "https://sst.dev/docs/component/aws/dynamo/", "twitter:image": "https://social-cards.sst.dev/v3-docs/RHluYW1v.png", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Dynamo", "ogDescription": "Reference doc for the `sst.aws.Dynamo` component.", "og:description": "Reference doc for the `sst.aws.Dynamo` component.", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Dynamo", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/RHluYW1v.png", "ogImage": "https://social-cards.sst.dev/v3-docs/RHluYW1v.png", "twitter:card": "summary_large_image", "og:locale": "en", "language": "en", "scrapeId": "f3a55cd2-98b7-4d3e-a16a-9e22921c3bae", "sourceURL": "https://sst.dev/docs/component/aws/dynamo", "url": "https://sst.dev/docs/component/aws/dynamo", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Realtime\"?\n\nAssistant: Reference doc for the `sst.aws.Realtime` component.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `Realtime` component lets you publish and subscribe to messages in realtime. It offers a **topic-based** messaging network using [AWS IoT](https://docs.aws.amazon.com/iot/latest/developerguide/what-is-aws-iot.html). Letting you publish and subscribe to messages using a WebSocket in the browser and your server. Also, provides an [SDK](https://sst.dev/docs/component/aws/realtime#sdk) to authorize clients, grant permissions to subscribe, and publish to topics. There is **only 1 IoT endpoint** per region per AWS account. Messages from all apps and stages are published to the same IoT endpoint. Make sure to prefix the topics by the app and stage name.\n\n## Create a realtime endpoint\n```javascript\nconst server = new sst.aws.Realtime(\"MyServer\", {\n  authorizer: \"src/authorizer.handler\"\n});\n```\n\n## Authorize the client\n```javascript\nimport { Resource } from \"sst/aws\";\nimport { realtime } from \"sst/aws/realtime\";\n\nexport const handler = realtime.authorizer(async (token) => {\n  // Validate the token\n  // Return the topics to subscribe and publish\n  return {\n    subscribe: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],\n    publish: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],\n  };\n});\n```\n\n## Publish and receive messages in your frontend\n```javascript\nimport { Resource } from \"sst/aws\";\nconst client = new mqtt.MqttClient();\n// Configure with\n// - Resource.Realtime.endpoint\n// - Resource.Realtime.authorizer\nconst connection = client.new_connection(config);\n// Subscribe messages\nconnection.on(\"message\", (topic, payload) => {\n  // Handle the message\n});\n// Publish messages\nconnection.publish(topic, payload, mqtt.QoS.AtLeastOnce);\n```\n\n## Subscribe messages in your backend\n```javascript\nserver.subscribe(\"src/subscriber.handler\", {\n  filter: `${$app.name}/${$app.stage}/chat/room1`\n});\n```\n\n## Publish message from your backend\n```javascript\nimport { IoTDataPlaneClient, PublishCommand } from \"@aws-sdk/client-iot-data-plane\";\nconst data = new IoTDataPlaneClient();\nawait data.send(\n  new PublishCommand({\n    payload: Buffer.from(\n      JSON.stringify({ message: \"Hello world\" })\n    ),\n    topic: `${Resource.App.name}/${Resource.App.stage}/chat/room1`,\n  })\n);\n```\n\n## Constructor\n```javascript\nnew Realtime(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`RealtimeArgs`](https://sst.dev/docs/component/aws/realtime#realtimeargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/realtime", "title": "Realtime", "description": "Reference doc for the `sst.aws.Realtime` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:00:03", "type": "overview", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/realtime/", "ogSiteName": "SST", "ogUrl": "https://sst.dev/docs/component/aws/realtime/", "og:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWU%3D.png", "og:description": "Reference doc for the `sst.aws.Realtime` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWU%3D.png", "og:site_name": "SST", "title": "Realtime | SST", "og:title": "Realtime", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Realtime` component.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "description": "Reference doc for the `sst.aws.Realtime` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWU%3D.png", "language": "en", "ogTitle": "Realtime", "og:type": "article", "scrapeId": "d7445691-1e5b-4f92-9f0f-158fabce989d", "sourceURL": "https://sst.dev/docs/component/aws/realtime", "url": "https://sst.dev/docs/component/aws/realtime", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Realtime\"?\n\nAssistant: Here are some code examples:\n\n### Create a realtime endpoint\n```yaml\nconst server = new sst.aws.Realtime(\"MyServer\", {\n  authorizer: \"src/authorizer.handler\"\n});\n```\n\n### Authorize the client\n```yaml\nimport { Resource } from \"sst/aws\";\nimport { realtime } from \"sst/aws/realtime\";\n\nexport const handler = realtime.authorizer(async (token) => {\n  // Validate the token\n  // Return the topics to subscribe and publish\n  return {\n    subscribe: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],\n    publish: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],\n  };\n});\n```\n\n### Publish and receive messages in your frontend\n```yaml\nimport { Resource } from \"sst/aws\";\nconst client = new mqtt.MqttClient();\n// Configure with\n// - Resource.Realtime.endpoint\n// - Resource.Realtime.authorizer\nconst connection = client.new_connection(config);\n// Subscribe messages\nconnection.on(\"message\", (topic, payload) => {\n  // Handle the message\n});\n// Publish messages\nconnection.publish(topic, payload, mqtt.QoS.AtLeastOnce);\n```\n\n### Subscribe messages in your backend\n```yaml\nserver.subscribe(\"src/subscriber.handler\", {\n  filter: `${$app.name}/${$app.stage}/chat/room1`\n});\n```\n\n### Publish message from your backend\n```yaml\nimport { IoTDataPlaneClient, PublishCommand } from \"@aws-sdk/client-iot-data-plane\";\nconst data = new IoTDataPlaneClient();\nawait data.send(\n  new PublishCommand({\n    payload: Buffer.from(\n      JSON.stringify({ message: \"Hello world\" })\n    ),\n    topic: `${Resource.App.name}/${Resource.App.stage}/chat/room1`,\n  })\n);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/realtime", "title": "Realtime", "description": "Reference doc for the `sst.aws.Realtime` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:00:03", "type": "code_examples", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/realtime/", "ogSiteName": "SST", "ogUrl": "https://sst.dev/docs/component/aws/realtime/", "og:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWU%3D.png", "og:description": "Reference doc for the `sst.aws.Realtime` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWU%3D.png", "og:site_name": "SST", "title": "Realtime | SST", "og:title": "Realtime", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Realtime` component.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "description": "Reference doc for the `sst.aws.Realtime` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWU%3D.png", "language": "en", "ogTitle": "Realtime", "og:type": "article", "scrapeId": "d7445691-1e5b-4f92-9f0f-158fabce989d", "sourceURL": "https://sst.dev/docs/component/aws/realtime", "url": "https://sst.dev/docs/component/aws/realtime", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Realtime\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to prefix the topics by the app and stage name.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/realtime", "title": "Realtime", "description": "Reference doc for the `sst.aws.Realtime` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:00:03", "type": "best_practices", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/realtime/", "ogSiteName": "SST", "ogUrl": "https://sst.dev/docs/component/aws/realtime/", "og:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWU%3D.png", "og:description": "Reference doc for the `sst.aws.Realtime` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWU%3D.png", "og:site_name": "SST", "title": "Realtime | SST", "og:title": "Realtime", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Realtime` component.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogLocale": "en", "og:locale": "en", "description": "Reference doc for the `sst.aws.Realtime` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWU%3D.png", "language": "en", "ogTitle": "Realtime", "og:type": "article", "scrapeId": "d7445691-1e5b-4f92-9f0f-158fabce989d", "sourceURL": "https://sst.dev/docs/component/aws/realtime", "url": "https://sst.dev/docs/component/aws/realtime", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Nuxt\"?\n\nAssistant: Reference doc for the `sst.aws.Nuxt` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\nDeploy a Nuxt app that’s in the project root.\n\n```\nnew sst.aws.Nuxt(\"MyWeb\");\n```\n\n## Change the path\nDeploys the Nuxt app in the `my-nuxt-app/` directory.\n\n```\nnew sst.aws.Nuxt(\"MyWeb\", {\n  path: \"my-nuxt-app/\"\n});\n```\n\n## Add a custom domain\nSet a custom domain for your Nuxt app.\n\n```\nnew sst.aws.Nuxt(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n## Redirect www to apex domain\nRedirect `www.my-app.com` to `my-app.com`.\n\n```\nnew sst.aws.Nuxt(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your Nuxt app. This will grant permissions to the resources and allow you to access it in your app.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Nuxt(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your Nuxt app.\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n## Constructor\n```\nnew Nuxt(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`NuxtArgs`](https://sst.dev/docs/component/aws/nuxt#nuxtargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/nuxt", "title": "Nuxt", "description": "Reference doc for the `sst.aws.Nuxt` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:00:15", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogTitle": "Nuxt", "description": "Reference doc for the `sst.aws.Nuxt` component.", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/aws/nuxt/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "language": "en", "og:url": "https://sst.dev/docs/component/aws/nuxt/", "title": "Nuxt | SST", "ogDescription": "Reference doc for the `sst.aws.Nuxt` component.", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/TnV4dA%3D%3D.png", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/TnV4dA%3D%3D.png", "og:title": "Nuxt", "og:image": "https://social-cards.sst.dev/v3-docs/TnV4dA%3D%3D.png", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.Nuxt` component.", "scrapeId": "a9e3ec0e-f7e7-49a3-bdc2-3dd40b7ed62f", "sourceURL": "https://sst.dev/docs/component/aws/nuxt", "url": "https://sst.dev/docs/component/aws/nuxt", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Nuxt\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nnew sst.aws.Nuxt(\"MyWeb\");\n```\n\n### Change the path\n```yaml\nnew sst.aws.Nuxt(\"MyWeb\", {\n  path: \"my-nuxt-app/\"\n});\n```\n\n### Add a custom domain\n```yaml\nnew sst.aws.Nuxt(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Redirect www to apex domain\n```yaml\nnew sst.aws.Nuxt(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Nuxt(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### Access linked resources\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/nuxt", "title": "Nuxt", "description": "Reference doc for the `sst.aws.Nuxt` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:00:15", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogTitle": "Nuxt", "description": "Reference doc for the `sst.aws.Nuxt` component.", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/aws/nuxt/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "language": "en", "og:url": "https://sst.dev/docs/component/aws/nuxt/", "title": "Nuxt | SST", "ogDescription": "Reference doc for the `sst.aws.Nuxt` component.", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/TnV4dA%3D%3D.png", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/TnV4dA%3D%3D.png", "og:title": "Nuxt", "og:image": "https://social-cards.sst.dev/v3-docs/TnV4dA%3D%3D.png", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.Nuxt` component.", "scrapeId": "a9e3ec0e-f7e7-49a3-bdc2-3dd40b7ed62f", "sourceURL": "https://sst.dev/docs/component/aws/nuxt", "url": "https://sst.dev/docs/component/aws/nuxt", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Nuxt\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the SDK to access linked resources in your Nuxt app.\n• Configure environment variables in your Nuxt app for better management.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/nuxt", "title": "Nuxt", "description": "Reference doc for the `sst.aws.Nuxt` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:00:15", "type": "best_practices", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogTitle": "Nuxt", "description": "Reference doc for the `sst.aws.Nuxt` component.", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/aws/nuxt/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "language": "en", "og:url": "https://sst.dev/docs/component/aws/nuxt/", "title": "Nuxt | SST", "ogDescription": "Reference doc for the `sst.aws.Nuxt` component.", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/TnV4dA%3D%3D.png", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/TnV4dA%3D%3D.png", "og:title": "Nuxt", "og:image": "https://social-cards.sst.dev/v3-docs/TnV4dA%3D%3D.png", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.Nuxt` component.", "scrapeId": "a9e3ec0e-f7e7-49a3-bdc2-3dd40b7ed62f", "sourceURL": "https://sst.dev/docs/component/aws/nuxt", "url": "https://sst.dev/docs/component/aws/nuxt", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Cloudflare Workers with SST\"?\n\nAssistant: Create and deploy a Cloudflare Worker as an API with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\n\nmkdir my-worker && cd my-worker\n\nnpm init -y\n```\n\n* * *\n\n\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **Cloudflare**. This’ll create a `sst.config.ts` file in your project root.\n\n* * *\n\n\n\n## Set the Cloudflare API token\nYou can save your Cloudflare API token in a `.env` file or just set it directly.\n\n```\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n\nexport CLOUDFLARE_DEFAULT_ACCOUNT_ID=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\n* * *\n\n\n\n## 2. Add a Worker\nLet’s add a Worker. Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const worker = new sst.cloudflare.Worker(\"MyWorker\", {\n\n    handler: \"./index.ts\",\n\n    url: true,\n\n  });\n\n  return {\n\n    api: worker.url,\n\n  };\n\n}\n```\n\nWe are enabling the Worker URL, so we can use it as our API.\n\n* * *\n\n\n\n## 3. Add an R2 Bucket\nLet’s add an R2 bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.cloudflare.Bucket(\"MyBucket\");\n```\n\nAdd this above the `Worker` component.\n\n#### Link the bucket\n\nNow, link the bucket to our Worker.\n\n```\nconst worker = new sst.cloudflare.Worker(\"MyWorker\", {\n\n  handler: \"./index.ts\",\n\n  link: [bucket],\n\n  url: true,\n\n});\n```\n\n* * *\n\n\n\n## 4. Upload a file\nWe want our API to upload a file to the R2 bucket if you make a `PUT` request to it. Create an `index.ts` file and add the following.\n\n```\nexport default {\n\n  async fetch(req: Request) {\n\n    if (req.method == \"PUT\") {\n\n      const key = crypto.randomUUID();\n\n      await Resource.MyBucket.put(key, req.body, {\n\n        httpMetadata: {\n\n          contentType: req.headers.get(\"content-type\"),\n\n        },\n\n      });\n\n      return new Response(`Object created with key: ${key}`);\n\n    }\n\n  },\n\n};\n```\n\nImport the SDK.\n\n```\nimport { Resource } from \"sst\";\n```\n\n* * *\n\n\n\n## 5. Download a file\nWe want to download the last uploaded file if you make a `GET` request to the API. Add this to the `fetch` function in your `index.ts` file.\n\n```\nif (req.method == \"GET\") {\n\n  const first = await Resource.MyBucket.list().then(\n\n    (res) =>\n\n      res.objects.toSorted(\n\n        (a, b) => a.uploaded.getTime() - b.uploaded.getTime(),\n\n      )[0],\n\n  );\n\n  const result = await Resource.MyBucket.get(first.key);\n\n  return new Response(result.body, {\n\n    headers: {\n\n      \"content-type\": result.httpMetadata.contentType,\n\n    },\n\n  });\n\n}\n```\n\nWe are getting a list of the files in the files in the bucket with `Resource.MyBucket.list()` and we are getting a file for the given key with `Resource.MyBucket.get()`.\n\n* * *\n\n\n\n## Start dev mode\nStart your app in dev mode.\n\n```\nnpx sst dev\n```\n\nThis will give you the URL of your API.\n\n```\n+  Complete\n   api: https://start-cloudflare-jayair-myworkerscript.sst-15d.workers.dev\n```\n\n* * *\n\n\n\n## Test your app\nLet’s try uploading a file from your project root. Make sure to use your API URL.\n\n```\ncurl --upload-file package.json https://start-cloudflare-jayair-myworkerscript.sst-15d.workers.dev\n```\n\nNow head over to `https://start-cloudflare-jayair-myworkerscript.sst-15d.workers.dev` in your browser and it’ll load the file you just uploaded.\n\n* * *\n\n\n\n## 6. Deploy your app\nFinally, let’s deploy your app!\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n", "metadata": {"source_url": "https://sst.dev/docs/start/cloudflare/worker", "title": "Cloudflare Workers with SST", "description": "Create and deploy a Cloudflare Worker as an API with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:00:38", "type": "overview", "page_metadata": {"ogTitle": "Cloudflare Workers with SST", "ogUrl": "https://sst.dev/docs/start/cloudflare/worker/", "title": "Cloudflare Workers with SST | SST", "description": "Create and deploy a Cloudflare Worker as an API with SST.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMFdvcmtlcnMlMjB3aXRoJTIwU1NU.png", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/start/cloudflare/worker/", "og:type": "article", "ogDescription": "Create and deploy a Cloudflare Worker as an API with SST.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogSiteName": "SST", "og:locale": "en", "og:title": "Cloudflare Workers with SST", "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "og:description": "Create and deploy a Cloudflare Worker as an API with SST.", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMFdvcmtlcnMlMjB3aXRoJTIwU1NU.png", "og:site_name": "SST", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMFdvcmtlcnMlMjB3aXRoJTIwU1NU.png", "scrapeId": "4ed5773d-8b31-4041-8d0e-a07b5fc8674c", "sourceURL": "https://sst.dev/docs/start/cloudflare/worker", "url": "https://sst.dev/docs/start/cloudflare/worker", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Cloudflare Workers with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nmkdir my-worker && cd my-worker\nnpm init -y\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\nnpm install\n```\n\n### Set the Cloudflare API token\n```yaml\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\nexport CLOUDFLARE_DEFAULT_ACCOUNT_ID=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\n### Add a Worker\n```yaml\nasync run() {\n  const worker = new sst.cloudflare.Worker(\"MyWorker\", {\n    handler: \"./index.ts\",\n    url: true,\n  });\n  return {\n    api: worker.url,\n  };\n}\n```\n\n### Add an R2 Bucket\n```yaml\nconst bucket = new sst.cloudflare.Bucket(\"MyBucket\");\n```\n\n### Link the bucket\n```yaml\nconst worker = new sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"./index.ts\",\n  link: [bucket],\n  url: true,\n});\n```\n\n### Upload a file\n```yaml\nexport default {\n  async fetch(req: Request) {\n    if (req.method == \"PUT\") {\n      const key = crypto.randomUUID();\n      await Resource.MyBucket.put(key, req.body, {\n        httpMetadata: {\n          contentType: req.headers.get(\"content-type\"),\n        },\n      });\n      return new Response(`Object created with key: ${key}`);\n    }\n  },\n};\nimport { Resource } from \"sst\";\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/cloudflare/worker", "title": "Cloudflare Workers with SST", "description": "Create and deploy a Cloudflare Worker as an API with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:00:38", "type": "code_examples", "page_metadata": {"ogTitle": "Cloudflare Workers with SST", "ogUrl": "https://sst.dev/docs/start/cloudflare/worker/", "title": "Cloudflare Workers with SST | SST", "description": "Create and deploy a Cloudflare Worker as an API with SST.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMFdvcmtlcnMlMjB3aXRoJTIwU1NU.png", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/start/cloudflare/worker/", "og:type": "article", "ogDescription": "Create and deploy a Cloudflare Worker as an API with SST.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogSiteName": "SST", "og:locale": "en", "og:title": "Cloudflare Workers with SST", "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "og:description": "Create and deploy a Cloudflare Worker as an API with SST.", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMFdvcmtlcnMlMjB3aXRoJTIwU1NU.png", "og:site_name": "SST", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMFdvcmtlcnMlMjB3aXRoJTIwU1NU.png", "scrapeId": "4ed5773d-8b31-4041-8d0e-a07b5fc8674c", "sourceURL": "https://sst.dev/docs/start/cloudflare/worker", "url": "https://sst.dev/docs/start/cloudflare/worker", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Cloudflare Workers with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to create your Cloudflare API token before starting.\n• Select the defaults and pick Cloudflare when initializing SST.\n• It's good to create a new stage for production when deploying your app.\n", "metadata": {"source_url": "https://sst.dev/docs/start/cloudflare/worker", "title": "Cloudflare Workers with SST", "description": "Create and deploy a Cloudflare Worker as an API with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:00:38", "type": "best_practices", "page_metadata": {"ogTitle": "Cloudflare Workers with SST", "ogUrl": "https://sst.dev/docs/start/cloudflare/worker/", "title": "Cloudflare Workers with SST | SST", "description": "Create and deploy a Cloudflare Worker as an API with SST.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMFdvcmtlcnMlMjB3aXRoJTIwU1NU.png", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/start/cloudflare/worker/", "og:type": "article", "ogDescription": "Create and deploy a Cloudflare Worker as an API with SST.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogSiteName": "SST", "og:locale": "en", "og:title": "Cloudflare Workers with SST", "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "og:description": "Create and deploy a Cloudflare Worker as an API with SST.", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMFdvcmtlcnMlMjB3aXRoJTIwU1NU.png", "og:site_name": "SST", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMFdvcmtlcnMlMjB3aXRoJTIwU1NU.png", "scrapeId": "4ed5773d-8b31-4041-8d0e-a07b5fc8674c", "sourceURL": "https://sst.dev/docs/start/cloudflare/worker", "url": "https://sst.dev/docs/start/cloudflare/worker", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Redis\"?\n\nAssistant: Reference doc for the `sst.aws.Redis` component.\n\nHere's a detailed explanation:\n\n\n## Create the cluster\n```javascript\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\n```\n\n## Link to a resource\nYou can link your cluster to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [redis],\n  vpc\n});\n```\n\nOnce linked, you can connect to it from your function code.\n\n```javascript\nimport { Resource } from \"sst\";\nimport { Cluster } from \"ioredis\";\n\nconst client = new Cluster(\n  [{\n    host: Resource.MyRedis.host,\n    port: Resource.MyRedis.port\n  }],\n  {\n    redisOptions: {\n      tls: { checkServerIdentity: () => undefined },\n      username: Resource.MyRedis.username,\n      password: Resource.MyRedis.password\n    }\n  }\n);\n```\n\n## Running locally\nBy default, your Redis cluster is deployed in `sst dev`. But let’s say you are running Redis locally.\n\n```bash\ndocker run \\\n  --rm \\\n  -p 6379:6379 \\\n  -v $(pwd)/.sst/storage/redis:/data \\\n  redis:latest\n```\n\nYou can connect to it in `sst dev` by configuring the `dev` prop.\n\n```javascript\nconst redis = new sst.aws.Redis(\"MyRedis\", {\n  vpc,\n  dev: {\n    host: \"localhost\",\n    port: 6379\n  }\n});\n```\n\nThis will skip deploying a Redis ElastiCache cluster and link to the locally running Redis server instead. [Check out the full example](https://sst.dev/docs/examples/#aws-redis-local).\n\n## Cost\nBy default this component uses _On-demand nodes_ with a single `cache.t4g.micro` instance.\n\nThe default `redis` engine costs $0.016 per hour. That works out to $0.016 x 24 x 30 or **$12 per month**.\n\nIf the `valkey` engine is used, the cost is $0.0128 per hour. That works out to $0.0128 x 24 x 30 or **$9 per month**.\n\nAdjust this for the `instance` type and number of `nodes` you are using.\n\nThe above are rough estimates for _us-east-1_, check out the [ElastiCache pricing](https://aws.amazon.com/elasticache/pricing/) for more details.\n\n## Constructor\n```javascript\nnew Redis(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`RedisArgs`](https://sst.dev/docs/component/aws/redis#redisargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/redis", "title": "Redis", "description": "Reference doc for the `sst.aws.Redis` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:00:52", "type": "overview", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.Redis` component.", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/redis/", "language": "en", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogImage": "https://social-cards.sst.dev/v3-docs/UmVkaXM%3D.png", "og:description": "Reference doc for the `sst.aws.Redis` component.", "ogTitle": "Redis", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVkaXM%3D.png", "description": "Reference doc for the `sst.aws.Redis` component.", "twitter:card": "summary_large_image", "og:title": "Redis", "title": "Redis | SST", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/redis/", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/UmVkaXM%3D.png", "ogSiteName": "SST", "scrapeId": "29aa046d-2a56-4e7a-abc8-284ef07fa03c", "sourceURL": "https://sst.dev/docs/component/aws/redis", "url": "https://sst.dev/docs/component/aws/redis", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Redis\"?\n\nAssistant: Here are some code examples:\n\n### Create the cluster\n```yaml\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\n```\n\n### Link to a resource\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [redis],\n  vpc\n});\n```\n\n### Connect to Redis from function code\n```yaml\nimport { Resource } from \"sst\";\nimport { Cluster } from \"ioredis\";\n\nconst client = new Cluster(\n  [{\n    host: Resource.MyRedis.host,\n    port: Resource.MyRedis.port\n  }],\n  {\n    redisOptions: {\n      tls: { checkServerIdentity: () => undefined },\n      username: Resource.MyRedis.username,\n      password: Resource.MyRedis.password\n    }\n  }\n);\n```\n\n### Running Redis locally\n```yaml\ndocker run \\\n  --rm \\\n  -p 6379:6379 \\\n  -v $(pwd)/.sst/storage/redis:/data \\\n  redis:latest\n```\n\n### Connect to local Redis in sst dev\n```yaml\nconst redis = new sst.aws.Redis(\"MyRedis\", {\n  vpc,\n  dev: {\n    host: \"localhost\",\n    port: 6379\n  }\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/redis", "title": "Redis", "description": "Reference doc for the `sst.aws.Redis` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:00:52", "type": "code_examples", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.Redis` component.", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/redis/", "language": "en", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogImage": "https://social-cards.sst.dev/v3-docs/UmVkaXM%3D.png", "og:description": "Reference doc for the `sst.aws.Redis` component.", "ogTitle": "Redis", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVkaXM%3D.png", "description": "Reference doc for the `sst.aws.Redis` component.", "twitter:card": "summary_large_image", "og:title": "Redis", "title": "Redis | SST", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/redis/", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/UmVkaXM%3D.png", "ogSiteName": "SST", "scrapeId": "29aa046d-2a56-4e7a-abc8-284ef07fa03c", "sourceURL": "https://sst.dev/docs/component/aws/redis", "url": "https://sst.dev/docs/component/aws/redis", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Redis\"?\n\nAssistant: Here are the recommended best practices:\n\n• Adjust the instance type and number of nodes based on your application's needs.\n• Check the ElastiCache pricing for accurate cost estimates based on your configuration.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/redis", "title": "Redis", "description": "Reference doc for the `sst.aws.Redis` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:00:52", "type": "best_practices", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.Redis` component.", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/redis/", "language": "en", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogImage": "https://social-cards.sst.dev/v3-docs/UmVkaXM%3D.png", "og:description": "Reference doc for the `sst.aws.Redis` component.", "ogTitle": "Redis", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVkaXM%3D.png", "description": "Reference doc for the `sst.aws.Redis` component.", "twitter:card": "summary_large_image", "og:title": "Redis", "title": "Redis | SST", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/redis/", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/UmVkaXM%3D.png", "ogSiteName": "SST", "scrapeId": "29aa046d-2a56-4e7a-abc8-284ef07fa03c", "sourceURL": "https://sst.dev/docs/component/aws/redis", "url": "https://sst.dev/docs/component/aws/redis", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"OpenAuth with SST and Next.js\"?\n\nAssistant: Add OpenAuth to your Next.js app and deploy it with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our Next.js app and starting it in dev mode.\n\n```\n\nnpx create-next-app@latest aws-auth-nextjs\n\ncd aws-auth-nextjs\n```\n\nWe are picking **TypeScript** and not selecting **ESLint**.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add OpenAuth server\nNext, let’s add a directory for our OpenAuth server.\n\n```\nmkdir auth\n```\n\nAdd our OpenAuth server to a `auth/index.ts` file.\n\n```\nimport { handle } from \"hono/aws-lambda\";\n\nimport { issuer } from \"@openauthjs/openauth\";\n\nimport { CodeUI } from \"@openauthjs/openauth/ui/code\";\n\nimport { CodeProvider } from \"@openauthjs/openauth/provider/code\";\n\nimport { subjects } from \"./subjects\";\n\nasync function getUser(email: string) {\n\n  // Get user from database and return user ID\n\n  return \"123\";\n}\n\nconst app = issuer({\n\n  subjects,\n\n  // Remove after setting custom domain\n\n  allow: async () => true,\n\n  providers: {\n\n    code: CodeProvider(\n\n      CodeUI({\n\n        sendCode: async (email, code) => {\n\n          console.log(email, code);\n\n        },\n\n      }),\n\n    ),\n\n  },\n\n  success: async (ctx, value) => {\n\n    if (value.provider === \"code\") {\n\n      return ctx.subject(\"user\", {\n\n        id: await getUser(value.claims.email),\n\n      });\n\n    }\n\n    throw new Error(\"Invalid provider\");\n\n  },\n\n});\n\nexport const handler = handle(app);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/auth", "title": "OpenAuth with SST and Next.js", "description": "Add OpenAuth to your Next.js app and deploy it with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:01:20", "type": "overview", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/T3BlbkF1dGglMjB3aXRoJTIwU1NUJTIwYW5kJTIwTmV4dC5qcw%3D%3D.png", "og:site_name": "SST", "og:title": "OpenAuth with SST and Next.js", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/T3BlbkF1dGglMjB3aXRoJTIwU1NUJTIwYW5kJTIwTmV4dC5qcw%3D%3D.png", "title": "OpenAuth with SST and Next.js | SST", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Add OpenAuth to your Next.js app and deploy it with SST.", "ogImage": "https://social-cards.sst.dev/v3-docs/T3BlbkF1dGglMjB3aXRoJTIwU1NUJTIwYW5kJTIwTmV4dC5qcw%3D%3D.png", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogUrl": "https://sst.dev/docs/start/aws/auth/", "ogSiteName": "SST", "ogTitle": "OpenAuth with SST and Next.js", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:description": "Add OpenAuth to your Next.js app and deploy it with SST.", "og:url": "https://sst.dev/docs/start/aws/auth/", "twitter:card": "summary_large_image", "description": "Add OpenAuth to your Next.js app and deploy it with SST.", "scrapeId": "dcaca4f6-6395-49bd-b33d-2b8fe3dd0db7", "sourceURL": "https://sst.dev/docs/start/aws/auth", "url": "https://sst.dev/docs/start/aws/auth", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"OpenAuth with SST and Next.js\"?\n\nAssistant: Here are some code examples:\n\n### OpenAuth server setup\n```yaml\nimport { handle } from \"hono/aws-lambda\";\n\nimport { issuer } from \"@openauthjs/openauth\";\n\nimport { CodeUI } from \"@openauthjs/openauth/ui/code\";\n\nimport { CodeProvider } from \"@openauthjs/openauth/provider/code\";\n\nimport { subjects } from \"./subjects\";\n\nasync function getUser(email: string) {\n\n  // Get user from database and return user ID\n\n  return \"123\";\n}\n\nconst app = issuer({\n\n  subjects,\n\n  // Remove after setting custom domain\n\n  allow: async () => true,\n\n  providers: {\n\n    code: CodeProvider(\n\n      CodeUI({\n\n        sendCode: async (email, code) => {\n\n          console.log(email, code);\n\n        },\n\n      }),\n\n    ),\n\n  },\n\n  success: async (ctx, value) => {\n\n    if (value.provider === \"code\") {\n\n      return ctx.subject(\"user\", {\n\n        id: await getUser(value.claims.email),\n\n      });\n\n    }\n\n    throw new Error(\"Invalid provider\");\n\n  },\n\n});\n\nexport const handler = handle(app);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/auth", "title": "OpenAuth with SST and Next.js", "description": "Add OpenAuth to your Next.js app and deploy it with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:01:20", "type": "code_examples", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/T3BlbkF1dGglMjB3aXRoJTIwU1NUJTIwYW5kJTIwTmV4dC5qcw%3D%3D.png", "og:site_name": "SST", "og:title": "OpenAuth with SST and Next.js", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/T3BlbkF1dGglMjB3aXRoJTIwU1NUJTIwYW5kJTIwTmV4dC5qcw%3D%3D.png", "title": "OpenAuth with SST and Next.js | SST", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Add OpenAuth to your Next.js app and deploy it with SST.", "ogImage": "https://social-cards.sst.dev/v3-docs/T3BlbkF1dGglMjB3aXRoJTIwU1NUJTIwYW5kJTIwTmV4dC5qcw%3D%3D.png", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogUrl": "https://sst.dev/docs/start/aws/auth/", "ogSiteName": "SST", "ogTitle": "OpenAuth with SST and Next.js", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:description": "Add OpenAuth to your Next.js app and deploy it with SST.", "og:url": "https://sst.dev/docs/start/aws/auth/", "twitter:card": "summary_large_image", "description": "Add OpenAuth to your Next.js app and deploy it with SST.", "scrapeId": "dcaca4f6-6395-49bd-b33d-2b8fe3dd0db7", "sourceURL": "https://sst.dev/docs/start/aws/auth", "url": "https://sst.dev/docs/start/aws/auth", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"OpenAuth with SST and Next.js\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• Use TypeScript for better type safety in your Next.js app.\n• When deploying, create a new stage for production to avoid conflicts with development stages.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/auth", "title": "OpenAuth with SST and Next.js", "description": "Add OpenAuth to your Next.js app and deploy it with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:01:20", "type": "best_practices", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/T3BlbkF1dGglMjB3aXRoJTIwU1NUJTIwYW5kJTIwTmV4dC5qcw%3D%3D.png", "og:site_name": "SST", "og:title": "OpenAuth with SST and Next.js", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/T3BlbkF1dGglMjB3aXRoJTIwU1NUJTIwYW5kJTIwTmV4dC5qcw%3D%3D.png", "title": "OpenAuth with SST and Next.js | SST", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Add OpenAuth to your Next.js app and deploy it with SST.", "ogImage": "https://social-cards.sst.dev/v3-docs/T3BlbkF1dGglMjB3aXRoJTIwU1NUJTIwYW5kJTIwTmV4dC5qcw%3D%3D.png", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogUrl": "https://sst.dev/docs/start/aws/auth/", "ogSiteName": "SST", "ogTitle": "OpenAuth with SST and Next.js", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:description": "Add OpenAuth to your Next.js app and deploy it with SST.", "og:url": "https://sst.dev/docs/start/aws/auth/", "twitter:card": "summary_large_image", "description": "Add OpenAuth to your Next.js app and deploy it with SST.", "scrapeId": "dcaca4f6-6395-49bd-b33d-2b8fe3dd0db7", "sourceURL": "https://sst.dev/docs/start/aws/auth", "url": "https://sst.dev/docs/start/aws/auth", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"D1\"?\n\nAssistant: Reference doc for the `sst.cloudflare.D1` component. The `D1` component lets you add a Cloudflare D1 database to your app.\n\nHere's a detailed explanation:\n\n\n## Minimal example\n```javascript\nconst db = new sst.cloudflare.D1(\"MyDatabase\");\n```\n\n## Link to a worker\nYou can link the db to a worker.\n\n```javascript\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"./index.ts\",\n  link: [db],\n  url: true\n});\n```\n\nOnce linked, you can use the SDK to interact with the db.\n\n```javascript\nimport { Resource } from \"sst\";\n\nawait Resource.MyDatabase.prepare(\n  \"SELECT id FROM todo ORDER BY id DESC LIMIT 1\",\n).first();\n```\n\n## Constructor\n```javascript\nnew D1(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`D1Args`](https://sst.dev/docs/component/cloudflare/d1#d1args)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/) \n\n\n## D1Args\n### transform?\n**Type** `Object`\n- [`database?`](https://sst.dev/docs/component/cloudflare/d1#transform-database)\n\n[Transform](https://sst.dev/docs/components/#transform) how this component creates its underlying resources.\n\n#### transform.database?\n**Type** [`D1DatabaseArgs`](https://www.pulumi.com/registry/packages/cloudflare/api-docs/d1database/#inputs) ` | ` `(` `args` `: ` [`D1DatabaseArgs`](https://www.pulumi.com/registry/packages/cloudflare/api-docs/d1database/#inputs) `, ` `opts` `: ` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/) `, ` `name` `: ` `string` `)` ` => ` `void`\n\nTransform the D1 resource.\n\n## Properties\n### id\n**Type** `Output` `<` `string` `>`\nThe generated ID of the D1 database.\n\n### nodes\n**Type** `Object`\n- [`database`](https://sst.dev/docs/component/cloudflare/d1#nodes-database)\n\nThe underlying [resources](https://sst.dev/docs/components/#nodes) this component creates.\n\n#### nodes.database\n**Type** [`D1Database`](https://www.pulumi.com/registry/packages/cloudflare/api-docs/d1database/)\nThe Cloudflare D1 database.\n\n## SDK\nUse the [SDK](https://sst.dev/docs/reference/sdk/) in your runtime to interact with your infrastructure.\n\n## Bindings\nWhen you link a D1 database, the database will be available to the worker and you can query it using its [API methods](https://developers.cloudflare.com/d1/build-with-d1/d1-client-api/).\n\n```javascript\nimport { Resource } from \"sst\";\n\nawait Resource.MyDatabase.prepare(\n  \"SELECT id FROM todo ORDER BY id DESC LIMIT 1\",\n).first();\n```\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/d1", "title": "D1", "description": "Reference doc for the `sst.cloudflare.D1` component. The `D1` component lets you add a Cloudflare D1 database to your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:01:31", "type": "overview", "page_metadata": {"ogSiteName": "SST", "language": "en", "og:type": "article", "twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/component/cloudflare/d1/", "og:description": "Reference doc for the `sst.cloudflare.D1` component.", "favicon": "https://sst.dev/favicon.ico", "ogTitle": "D1", "description": "Reference doc for the `sst.cloudflare.D1` component.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/RDE%3D.png", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.cloudflare.D1` component.", "ogUrl": "https://sst.dev/docs/component/cloudflare/d1/", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "D1", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RDE%3D.png", "title": "D1 | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/RDE%3D.png", "scrapeId": "77d7e9f3-2f46-4612-ac0f-d9aaba2098f5", "sourceURL": "https://sst.dev/docs/component/cloudflare/d1", "url": "https://sst.dev/docs/component/cloudflare/d1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"D1\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nconst db = new sst.cloudflare.D1(\"MyDatabase\");\n```\n\n### Link to a worker\n```yaml\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"./index.ts\",\n  link: [db],\n  url: true\n});\n```\n\n### Using SDK to interact with the db\n```yaml\nimport { Resource } from \"sst\";\n\nawait Resource.MyDatabase.prepare(\n  \"SELECT id FROM todo ORDER BY id DESC LIMIT 1\",\n).first();\n```\n\n### Constructor\n```yaml\nnew D1(name, args?, opts?)\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/d1", "title": "D1", "description": "Reference doc for the `sst.cloudflare.D1` component. The `D1` component lets you add a Cloudflare D1 database to your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:01:31", "type": "code_examples", "page_metadata": {"ogSiteName": "SST", "language": "en", "og:type": "article", "twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/component/cloudflare/d1/", "og:description": "Reference doc for the `sst.cloudflare.D1` component.", "favicon": "https://sst.dev/favicon.ico", "ogTitle": "D1", "description": "Reference doc for the `sst.cloudflare.D1` component.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/RDE%3D.png", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.cloudflare.D1` component.", "ogUrl": "https://sst.dev/docs/component/cloudflare/d1/", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "D1", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RDE%3D.png", "title": "D1 | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/RDE%3D.png", "scrapeId": "77d7e9f3-2f46-4612-ac0f-d9aaba2098f5", "sourceURL": "https://sst.dev/docs/component/cloudflare/d1", "url": "https://sst.dev/docs/component/cloudflare/d1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"D1\"?\n\nAssistant: Here are the recommended best practices:\n\n• When linking a D1 database to a worker, ensure that the database is available to the worker for querying.\n• Use the SDK to interact with the D1 database efficiently.\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/d1", "title": "D1", "description": "Reference doc for the `sst.cloudflare.D1` component. The `D1` component lets you add a Cloudflare D1 database to your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:01:31", "type": "best_practices", "page_metadata": {"ogSiteName": "SST", "language": "en", "og:type": "article", "twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/component/cloudflare/d1/", "og:description": "Reference doc for the `sst.cloudflare.D1` component.", "favicon": "https://sst.dev/favicon.ico", "ogTitle": "D1", "description": "Reference doc for the `sst.cloudflare.D1` component.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/RDE%3D.png", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.cloudflare.D1` component.", "ogUrl": "https://sst.dev/docs/component/cloudflare/d1/", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "D1", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RDE%3D.png", "title": "D1 | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/RDE%3D.png", "scrapeId": "77d7e9f3-2f46-4612-ac0f-d9aaba2098f5", "sourceURL": "https://sst.dev/docs/component/cloudflare/d1", "url": "https://sst.dev/docs/component/cloudflare/d1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Cloudflare DNS Adapter\"?\n\nAssistant: Reference doc for the `sst.cloudflare.dns` adapter.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe Cloudflare DNS Adapter is used to create DNS records to manage domains hosted on Cloudflare DNS. This needs the Cloudflare provider. To add it run:\n\n```\n\nsst add cloudflare\n```\n\nThis adapter is passed in as `domain.dns` when setting a custom domain, where `example.com` is hosted on Cloudflare.\n\n```\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.cloudflare.dns()\n  }\n}\n``\n\nSpecify the zone ID.\n\n```\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.cloudflare.dns({\n      zone: \"415e6f4653b6d95b775d350f32119abb\"\n    })\n  }\n}\n```\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/dns", "title": "Cloudflare DNS Adapter", "description": "Reference doc for the `sst.cloudflare.dns` adapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:01:50", "type": "overview", "page_metadata": {"ogTitle": "Cloudflare DNS Adapter", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMEROUyUyMEFkYXB0ZXI%3D.png", "og:type": "article", "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMEROUyUyMEFkYXB0ZXI%3D.png", "og:locale": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/cloudflare/dns/", "ogSiteName": "SST", "title": "Cloudflare DNS Adapter | SST", "ogDescription": "Reference doc for the `sst.cloudflare.dns` adapter.", "og:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMEROUyUyMEFkYXB0ZXI%3D.png", "language": "en", "ogUrl": "https://sst.dev/docs/component/cloudflare/dns/", "og:title": "Cloudflare DNS Adapter", "description": "Reference doc for the `sst.cloudflare.dns` adapter.", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.cloudflare.dns` adapter.", "scrapeId": "965e41ca-0b95-4a1d-97cc-3ab199139d16", "sourceURL": "https://sst.dev/docs/component/cloudflare/dns", "url": "https://sst.dev/docs/component/cloudflare/dns", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Cloudflare DNS Adapter\"?\n\nAssistant: Here are some code examples:\n\n### Add Cloudflare Provider\n```yaml\nsst add cloudflare\n```\n\n### Basic DNS Configuration\n```yaml\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.cloudflare.dns()\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/dns", "title": "Cloudflare DNS Adapter", "description": "Reference doc for the `sst.cloudflare.dns` adapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:01:50", "type": "code_examples", "page_metadata": {"ogTitle": "Cloudflare DNS Adapter", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMEROUyUyMEFkYXB0ZXI%3D.png", "og:type": "article", "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMEROUyUyMEFkYXB0ZXI%3D.png", "og:locale": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/cloudflare/dns/", "ogSiteName": "SST", "title": "Cloudflare DNS Adapter | SST", "ogDescription": "Reference doc for the `sst.cloudflare.dns` adapter.", "og:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMEROUyUyMEFkYXB0ZXI%3D.png", "language": "en", "ogUrl": "https://sst.dev/docs/component/cloudflare/dns/", "og:title": "Cloudflare DNS Adapter", "description": "Reference doc for the `sst.cloudflare.dns` adapter.", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.cloudflare.dns` adapter.", "scrapeId": "965e41ca-0b95-4a1d-97cc-3ab199139d16", "sourceURL": "https://sst.dev/docs/component/cloudflare/dns", "url": "https://sst.dev/docs/component/cloudflare/dns", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Cloudflare DNS Adapter\"?\n\nAssistant: Here are the recommended best practices:\n\n• Set `override` to `true` to allow the creation of new DNS records that can replace existing ones, which is useful for switching a domain to a new site without removing old DNS records, helping to prevent downtime.\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/dns", "title": "Cloudflare DNS Adapter", "description": "Reference doc for the `sst.cloudflare.dns` adapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:01:50", "type": "best_practices", "page_metadata": {"ogTitle": "Cloudflare DNS Adapter", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMEROUyUyMEFkYXB0ZXI%3D.png", "og:type": "article", "og:site_name": "SST", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMEROUyUyMEFkYXB0ZXI%3D.png", "og:locale": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/cloudflare/dns/", "ogSiteName": "SST", "title": "Cloudflare DNS Adapter | SST", "ogDescription": "Reference doc for the `sst.cloudflare.dns` adapter.", "og:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMEROUyUyMEFkYXB0ZXI%3D.png", "language": "en", "ogUrl": "https://sst.dev/docs/component/cloudflare/dns/", "og:title": "Cloudflare DNS Adapter", "description": "Reference doc for the `sst.cloudflare.dns` adapter.", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.cloudflare.dns` adapter.", "scrapeId": "965e41ca-0b95-4a1d-97cc-3ab199139d16", "sourceURL": "https://sst.dev/docs/component/cloudflare/dns", "url": "https://sst.dev/docs/component/cloudflare/dns", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Send emails in AWS with SST\"?\n\nAssistant: Send emails from your API in AWS with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\n\nmkdir my-email-app && cd my-email-app\n\nnpm init -y\n```\n\n#### Init SST\n\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add email\nLet’s add Email to our app, it uses [Amazon SES](https://aws.amazon.com/ses/) behind the scenes. Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const email = new sst.aws.Email(\"MyEmail\", {\n\n    sender: \"email@example.com\",\n\n  });\n\n}\n```\n\nSES can send emails from a verified email address or domain. To keep things simple we’ll be sending from an email. Make sure to use your email address here as we’ll be verifying it in the next step.\n\n## 3. Add an API\nNext let’s create a simple API that’ll send out an email when invoked. Add this to your `sst.config.ts`.\n\n```\nconst api = new sst.aws.Function(\"MyApi\", {\n\n  handler: \"sender.handler\",\n\n  link: [email],\n\n  url: true,\n\n});\n\nreturn {\n\n  api: api.url,\n\n};\n```\n\nWe are linking the our email component to our API.\n\n## Start dev mode\nStart your app in dev mode. This runs your functions [_Live_](https://sst.dev/docs/live/).\n\n```\nnpx sst dev\n```\n\nThis will give you your API URL.\n\n```\n+  Complete\n\n   api: https://wwwrwteda6kbpquppdz5i3lg4a0nvmbf.lambda-url.us-east-1.on.aws/\n```\n\nYou should also get an email asking you to verify the sender email address.\n\n![Verify your email with SST](https://sst.dev/_astro/verify-your-email-with-sst.D4eClUNb_Z20GGsu.webp)\n\nClick the link to verify your email address.\n\n## 4. Send an email\nWe’ll use the SES client to send an email when the API is invoked. Create a new `sender.ts` file and add the following to it.\n\n```\nexport const handler = async () => {\n\n  await client.send(\n\n    new SendEmailCommand({\n\n      FromEmailAddress: Resource.MyEmail.sender,\n\n      Destination: {\n\n        ToAddresses: [Resource.MyEmail.sender],\n\n      },\n\n      Content: {\n\n        Simple: {\n\n          Subject: {\n\n            Data: \"Hello World!\",\n\n          },\n\n          Body: {\n\n            Text: {\n\n              Data: \"Sent from my SST app.\",\n\n            },\n\n          },\n\n        },\n\n      },\n\n    })\n\n  );\n\n  return {\n\n    statusCode: 200,\n\n    body: \"Sent!\"\n\n  };\n};\n```\n\nWe are sending an email to the same verified email that we are sending from because your SES account might be in _sandbox_ mode and can only send to verified emails. We’ll look at how to go to production below.\n\nAdd the imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport { SESv2Client, SendEmailCommand } from \"@aws-sdk/client-sesv2\";\n\nconst client = new SESv2Client();\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-sesv2\n```\n\n## Test your app\nTo test our app, hit the API.\n\n```\ncurl https://wwwrwteda6kbpquppdz5i3lg4a0nvmbf.lambda-url.us-east-1.on.aws\n```\n\nThis should print out `Sent!` and you should get an email. You might have to check your spam folder since the sender and receiver email address is the same in this case.\n\n![Email sent from SST](https://sst.dev/_astro/email-sent-from-sst.CHwVtr_T_1BJW3O.webp)\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/email", "title": "Send emails in AWS with SST", "description": "Send emails from your API in AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:02:13", "type": "overview", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/U2VuZCUyMGVtYWlscyUyMGluJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogDescription": "Send emails from your API in AWS with SST.", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2VuZCUyMGVtYWlscyUyMGluJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "title": "Send emails in AWS with SST | SST", "ogLocale": "en", "description": "Send emails from your API in AWS with SST.", "ogTitle": "Send emails in AWS with SST", "ogUrl": "https://sst.dev/docs/start/aws/email/", "og:url": "https://sst.dev/docs/start/aws/email/", "ogImage": "https://social-cards.sst.dev/v3-docs/U2VuZCUyMGVtYWlscyUyMGluJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "language": "en", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Send emails from your API in AWS with SST.", "og:locale": "en", "ogSiteName": "SST", "og:title": "Send emails in AWS with SST", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:card": "summary_large_image", "og:site_name": "SST", "scrapeId": "633e58b4-265b-4a5b-aecb-d806de6fefbc", "sourceURL": "https://sst.dev/docs/start/aws/email", "url": "https://sst.dev/docs/start/aws/email", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Send emails in AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nmkdir my-email-app && cd my-email-app\nnpm init -y\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\nnpm install\n```\n\n### Add email to sst.config.ts\n```yaml\nasync run() {\n  const email = new sst.aws.Email(\"MyEmail\", {\n    sender: \"email@example.com\",\n  });\n}\n```\n\n### Add API to sst.config.ts\n```yaml\nconst api = new sst.aws.Function(\"MyApi\", {\n  handler: \"sender.handler\",\n  link: [email],\n  url: true,\n});\nreturn {\n  api: api.url,\n};\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Send email handler\n```yaml\nexport const handler = async () => {\n  await client.send(\n    new SendEmailCommand({\n      FromEmailAddress: Resource.MyEmail.sender,\n      Destination: {\n        ToAddresses: [Resource.MyEmail.sender],\n      },\n      Content: {\n        Simple: {\n          Subject: {\n            Data: \"Hello World!\",\n          },\n          Body: {\n            Text: {\n              Data: \"Sent from my SST app.\",\n            },\n          },\n        },\n      },\n    })\n  );\n  return {\n    statusCode: 200,\n    body: \"Sent!\"\n  };\n};\n```\n\n### Add imports\n```yaml\nimport { Resource } from \"sst\";\nimport { SESv2Client, SendEmailCommand } from \"@aws-sdk/client-sesv2\";\nconst client = new SESv2Client();\n```\n\n### Install npm packages\n```yaml\nnpm install @aws-sdk/client-sesv2\n```\n\n### Test your app\n```yaml\ncurl https://wwwrwteda6kbpquppdz5i3lg4a0nvmbf.lambda-url.us-east-1.on.aws\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/email", "title": "Send emails in AWS with SST", "description": "Send emails from your API in AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:02:13", "type": "code_examples", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/U2VuZCUyMGVtYWlscyUyMGluJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogDescription": "Send emails from your API in AWS with SST.", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2VuZCUyMGVtYWlscyUyMGluJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "title": "Send emails in AWS with SST | SST", "ogLocale": "en", "description": "Send emails from your API in AWS with SST.", "ogTitle": "Send emails in AWS with SST", "ogUrl": "https://sst.dev/docs/start/aws/email/", "og:url": "https://sst.dev/docs/start/aws/email/", "ogImage": "https://social-cards.sst.dev/v3-docs/U2VuZCUyMGVtYWlscyUyMGluJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "language": "en", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Send emails from your API in AWS with SST.", "og:locale": "en", "ogSiteName": "SST", "og:title": "Send emails in AWS with SST", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:card": "summary_large_image", "og:site_name": "SST", "scrapeId": "633e58b4-265b-4a5b-aecb-d806de6fefbc", "sourceURL": "https://sst.dev/docs/start/aws/email", "url": "https://sst.dev/docs/start/aws/email", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Send emails in AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• Use a verified email address for sending emails with SES.\n• When in sandbox mode, you can only send emails to verified addresses.\n• Consider requesting production access for SES to send emails to any address.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/email", "title": "Send emails in AWS with SST", "description": "Send emails from your API in AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:02:13", "type": "best_practices", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/U2VuZCUyMGVtYWlscyUyMGluJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogDescription": "Send emails from your API in AWS with SST.", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2VuZCUyMGVtYWlscyUyMGluJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "title": "Send emails in AWS with SST | SST", "ogLocale": "en", "description": "Send emails from your API in AWS with SST.", "ogTitle": "Send emails in AWS with SST", "ogUrl": "https://sst.dev/docs/start/aws/email/", "og:url": "https://sst.dev/docs/start/aws/email/", "ogImage": "https://social-cards.sst.dev/v3-docs/U2VuZCUyMGVtYWlscyUyMGluJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "language": "en", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Send emails from your API in AWS with SST.", "og:locale": "en", "ogSiteName": "SST", "og:title": "Send emails in AWS with SST", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "twitter:card": "summary_large_image", "og:site_name": "SST", "scrapeId": "633e58b4-265b-4a5b-aecb-d806de6fefbc", "sourceURL": "https://sst.dev/docs/start/aws/email", "url": "https://sst.dev/docs/start/aws/email", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Astro on AWS with SST\"?\n\nAssistant: Create and deploy an Astro site to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## Serverless\nWe are going to create an Astro site, add an S3 Bucket for file uploads, and deploy it using the `Astro` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\n\nnpm create astro@latest aws-astro\n\ncd aws-astro\n```\n\nWe are picking all the default options.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\nIt’ll also ask you to update your `astro.config.mjs` with something like this.\n\n```\n import aws from \"astro-sst\";\n\nexport default defineConfig({\n\n  output: \"server\",\n\n  adapter: aws()\n\n});\n```\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Astro site.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyWeb** in the sidebar and open your Astro site in your browser.\n\n## 2. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this above the `Astro` component.\n\n## Link the bucket\nNow, link the bucket to our Astro site.\n\n```\nnew sst.aws.Astro(\"MyWeb\", {\n\n  link: [bucket],\n\n});\n```\n\n## 3. Create an upload form\nAdd the upload form client in `src/pages/index.astro`. Replace the `<Layout />` component with:\n\n```\n<Layout title=\"Astro x SST\">\n\n  <main>\n\n    <form action={url}>\n\n      <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n\n      <button type=\"submit\">Upload</button>\n\n    </form>\n\n    <script>\n\n      const form = document.querySelector(\"form\");\n\n      form!.addEventListener(\"submit\", async (e) => {\n\n        e.preventDefault();\n\n        const file = form!.file.files?.[0]!;\n\n        const image = await fetch(form!.action, {\n\n          body: file,\n\n          method: \"PUT\",\n\n          headers: {\n\n            \"Content-Type\": file.type,\n\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n          },\n\n        });\n\n        window.location.href = image.url.split(\"?\")[0] || \"/\";\n\n      });\n\n    </script>\n\n  </main>\n</Layout>\n```\n\nAdd some styles, add this to your `src/pages/index.astro`.\n\n```\n<style>\n\n  main {\n\n    margin: auto;\n\n    padding: 1.5rem;\n\n    max-width: 60ch;\n\n  }\n\n  form {\n\n    color: white;\n\n    padding: 2rem;\n\n    display: flex;\n\n    align-items: center;\n\n    justify-content: space-between;\n\n    background-color: #23262d;\n\n    background-image: none;\n\n    background-size: 400%;\n\n    border-radius: 0.6rem;\n\n    background-position: 100%;\n\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\n\n  }\n\n  button {\n\n    appearance: none;\n\n    border: 0;\n\n    font-weight: 500;\n\n    border-radius: 5px;\n\n    font-size: 0.875rem;\n\n    padding: 0.5rem 0.75rem;\n\n    background-color: white;\n\n    color: #111827;\n\n  }\n\n  button:active:enabled {\n\n    background-color: #EEE;\n\n  }\n\n</style>\n```\n\n## 4. Generate a pre-signed URL\nWhen our app loads, we’ll generate a pre-signed URL for the file upload and use it in the form. Add this to the header on your `src/pages/index.astro`.\n\n```\n---\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n\nconst command = new PutObjectCommand({\n\n  Key: crypto.randomUUID(),\n\n  Bucket: Resource.MyBucket.name,\n\n});\n\nconst url = await getSignedUrl(new S3Client({}), command);\n---\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\nHead over to the local Astro site in your browser, `http://localhost:4321` and try **uploading an image**. You should see it upload and then download the image.\n\n## 5. Deploy your app\nNow let’s deploy your app to AWS.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Containers\nWe are going to create a Astro site, add an S3 Bucket for file uploads, and deploy it in a container with the `Cluster` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\nnpm create astro@latest aws-astro-container\n\ncd aws-astro-container\n```\n\nWe are picking all the default options.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\nIt’ll also ask you to update your `astro.config.mjs`. But **we’ll instead use** the [Node.js adapter](https://docs.astro.build/en/guides/integrations-guide/node/) since we’re deploying it through a container.\n\n```\nnpx astro add node\n```\n\n## 2. Add a Service\nTo deploy our Astro site in a container, we’ll use [AWS Fargate](https://aws.amazon.com/fargate/) with [Amazon ECS](https://aws.amazon.com/ecs/). Replace the `run` function in your `sst.config.ts`.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"4321/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\nThis creates a VPC, and an ECS Cluster with a Fargate service in it.\n\nThe `dev.command` tells SST to instead run our Astro site locally in dev mode.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Astro site.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyService** in the sidebar and open your Astro site in your browser.\n\n## 3. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this below the `Vpc` component.\n\n## Link the bucket\nNow, link the bucket to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [bucket],\n\n});\n```\n\nThis will allow us to reference the bucket in our Astro site.\n\n## 4. Create an upload form\nAdd the upload form client in `src/pages/index.astro`. Replace the `<Layout />` component with:\n\n```\n<Layout title=\"Astro x SST\">\n\n  <main>\n\n    <form action={url}>\n\n      <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n\n      <button type=\"submit\">Upload</button>\n\n    </form>\n\n    <script>\n\n      const form = document.querySelector(\"form\");\n\n      form!.addEventListener(\"submit\", async (e) => {\n\n        e.preventDefault();\n\n        const file = form!.file.files?.[0]!;\n\n        const image = await fetch(form!.action, {\n\n          body: file,\n\n          method: \"PUT\",\n\n          headers: {\n\n            \"Content-Type\": file.type,\n\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n          },\n\n        });\n\n        window.location.href = image.url.split(\"?\")[0] || \"/\";\n\n      });\n\n    </script>\n\n  </main>\n</Layout>\n```\n\nAdd some styles, add this to your `src/pages/index.astro`.\n\n```\n<style>\n\n  main {\n\n    margin: auto;\n\n    padding: 1.5rem;\n\n    max-width: 60ch;\n\n  }\n\n  form {\n\n    color: white;\n\n    padding: 2rem;\n\n    display: flex;\n\n    align-items: center;\n\n    justify-content: space-between;\n\n    background-color: #23262d;\n\n    background-image: none;\n\n    background-size: 400%;\n\n    border-radius: 0.6rem;\n\n    background-position: 100%;\n\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\n\n  }\n\n  button {\n\n    appearance: none;\n\n    border: 0;\n\n    font-weight: 500;\n\n    border-radius: 5px;\n\n    font-size: 0.875rem;\n\n    padding: 0.5rem 0.75rem;\n\n    background-color: white;\n\n    color: #111827;\n\n  }\n\n  button:active:enabled {\n\n    background-color: #EEE;\n\n  }\n\n</style>\n```\n\n## 5. Generate a pre-signed URL\nWhen our app loads, we’ll generate a pre-signed URL for the file upload and use it in the form. Add this to the header on your `src/pages/index.astro`.\n\n```\n---\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n\nconst command = new PutObjectCommand({\n\n  Key: crypto.randomUUID(),\n\n  Bucket: Resource.MyBucket.name,\n\n});\n\nconst url = await getSignedUrl(new S3Client({}), command);\n---\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\nHead over to the local Astro site in your browser, `http://localhost:4321` and try **uploading an image**. You should see it upload and then download the image.\n\n## 6. Deploy your app\nTo deploy our app we’ll add a `Dockerfile`.\n\n```\nFROM node:lts AS base\n\nWORKDIR /app\n\nCOPY package.json package-lock.json ./\n\nFROM base AS prod-deps\n\nRUN npm install --omit=dev\n\nFROM base AS build-deps\n\nRUN npm install\n\nFROM build-deps AS build\n\nCOPY . .\n\nRUN npm run build\n\nFROM base AS runtime\n\nCOPY --from=prod-deps /app/node_modules ./node_modules\n\nCOPY --from=build /app/dist ./dist\n\nENV HOST=0.0.0.0\n\nENV PORT=4321\n\nEXPOSE 4321\n\nCMD node ./dist/server/entry.mjs\n```\n\nLet’s also add a `.dockerignore` file in the root.\n\n```\n.DS_Store\n\nnode_modules\n\ndist\n```\n\nNow to build our Docker image and deploy we run:\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and view logs from it.\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/astro", "title": "Astro on AWS with SST", "description": "Create and deploy an Astro site to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-27 21:03:59", "type": "overview", "page_metadata": {"ogTitle": "Astro on AWS with SST", "ogDescription": "Create and deploy an Astro site to AWS with SST.", "description": "Create and deploy an Astro site to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/astro/", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Astro on AWS with SST", "og:url": "https://sst.dev/docs/start/aws/astro/", "ogLocale": "en", "og:type": "article", "ogSiteName": "SST", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8lMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/QXN0cm8lMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8lMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "og:description": "Create and deploy an Astro site to AWS with SST.", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "title": "Astro on AWS with SST | SST", "scrapeId": "0e11368c-327c-403b-88ca-89590c99eceb", "sourceURL": "https://sst.dev/docs/start/aws/astro", "url": "https://sst.dev/docs/start/aws/astro", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Astro on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnpm create astro@latest aws-astro\n\ncd aws-astro\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n### Link the bucket\n```yaml\nnew sst.aws.Astro(\"MyWeb\", {\n  link: [bucket],\n});\n```\n\n### Create an upload form\n```yaml\n<Layout title=\"Astro x SST\">\n  <main>\n    <form action={url}>\n      <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n      <button type=\"submit\">Upload</button>\n    </form>\n    <script>\n      const form = document.querySelector(\"form\");\n      form!.addEventListener(\"submit\", async (e) => {\n        e.preventDefault();\n        const file = form!.file.files?.[0]!;\n        const image = await fetch(form!.action, {\n          body: file,\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": file.type,\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n          },\n        });\n        window.location.href = image.url.split(\"?\")[0] || \"/\";\n      });\n    </script>\n  </main>\n</Layout>\n```\n\n### Generate a pre-signed URL\n```yaml\n---\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n\nconst command = new PutObjectCommand({\n  Key: crypto.randomUUID(),\n  Bucket: Resource.MyBucket.name,\n});\n\nconst url = await getSignedUrl(new S3Client({}), command);\n---\n```\n\n### Deploy your app\n```yaml\nnpx sst deploy --stage production\n```\n\n### Create a project (Containers)\n```yaml\nnpm create astro@latest aws-astro-container\n\ncd aws-astro-container\n```\n\n### Init SST (Containers)\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Add a Service\n```yaml\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n  new sst.aws.Service(\"MyService\", {\n    cluster,\n    loadBalancer: {\n      ports: [{ listen: \"80/http\", forward: \"4321/http\" }],\n    },\n    dev: {\n      command: \"npm run dev\",\n    },\n  });\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/astro", "title": "Astro on AWS with SST", "description": "Create and deploy an Astro site to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-27 21:03:59", "type": "code_examples", "page_metadata": {"ogTitle": "Astro on AWS with SST", "ogDescription": "Create and deploy an Astro site to AWS with SST.", "description": "Create and deploy an Astro site to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/astro/", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Astro on AWS with SST", "og:url": "https://sst.dev/docs/start/aws/astro/", "ogLocale": "en", "og:type": "article", "ogSiteName": "SST", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8lMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/QXN0cm8lMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8lMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "og:description": "Create and deploy an Astro site to AWS with SST.", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "title": "Astro on AWS with SST | SST", "scrapeId": "0e11368c-327c-403b-88ca-89590c99eceb", "sourceURL": "https://sst.dev/docs/start/aws/astro", "url": "https://sst.dev/docs/start/aws/astro", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Astro on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• It's good to create a new stage for production when deploying your app.\n• Use the Node.js adapter when deploying through a container.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/astro", "title": "Astro on AWS with SST", "description": "Create and deploy an Astro site to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-27 21:03:59", "type": "best_practices", "page_metadata": {"ogTitle": "Astro on AWS with SST", "ogDescription": "Create and deploy an Astro site to AWS with SST.", "description": "Create and deploy an Astro site to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/astro/", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Astro on AWS with SST", "og:url": "https://sst.dev/docs/start/aws/astro/", "ogLocale": "en", "og:type": "article", "ogSiteName": "SST", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8lMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/QXN0cm8lMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8lMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "og:description": "Create and deploy an Astro site to AWS with SST.", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "title": "Astro on AWS with SST | SST", "scrapeId": "0e11368c-327c-403b-88ca-89590c99eceb", "sourceURL": "https://sst.dev/docs/start/aws/astro", "url": "https://sst.dev/docs/start/aws/astro", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Function\"?\n\nAssistant: Reference doc for the `sst.aws.Function` component.\n\nHere's a detailed explanation:\n\n\n## Supported runtimes\nCurrently supports **Node.js** and **Golang** functions. Python is community supported and is currently a work in progress. Other runtimes are on the roadmap.\n\n## Minimal example\nPass in the path to your handler function.\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\"\n});\n```\n\nPass in the directory to your Go app.\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  runtime: \"go\",\n  handler: \"./src\"\n});\n```\n\n## Set additional config\nPass in additional Lambda config.\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  timeout: \"3 minutes\",\n  memory: \"1024 MB\"\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to the function. This will grant permissions to the resources and allow you to access it in your handler.\n\n```javascript\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [bucket]\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your handler.\n\n```javascript\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n```go\nimport (\n  \"github.com/sst/sst/v3/sdk/golang/resource\"\n)\n\nresource.Get(\"MyBucket\", \"name\")\n```\n\n## Set environment variables\nSet environment variables that you can read in your function. For example, using `process.env` in your Node.js functions.\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  environment: {\n    DEBUG: \"true\"\n  }\n});\n```\n\n## Enable function URLs\nEnable function URLs to invoke the function over HTTP.\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  url: true\n});\n```\n\n## Bundling\nCustomize how SST uses [esbuild](https://esbuild.github.io/) to bundle your Node.js functions with the `nodejs` property.\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  nodejs: {\n    install: [\"pg\"]\n  }\n});\n```\n\n## Constructor\n```javascript\nnew Function(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`FunctionArgs`](https://sst.dev/docs/component/aws/function#functionargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/function", "title": "Function", "description": "Reference doc for the `sst.aws.Function` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:04:16", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "title": "Function | SST", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.aws.Function` component.", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/function/", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/RnVuY3Rpb24%3D.png", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/RnVuY3Rpb24%3D.png", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Function", "ogDescription": "Reference doc for the `sst.aws.Function` component.", "og:title": "Function", "description": "Reference doc for the `sst.aws.Function` component.", "og:type": "article", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RnVuY3Rpb24%3D.png", "ogUrl": "https://sst.dev/docs/component/aws/function/", "scrapeId": "5be667ee-b844-4ee6-9b82-5a8b8160be3f", "sourceURL": "https://sst.dev/docs/component/aws/function", "url": "https://sst.dev/docs/component/aws/function", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Function\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example for Node.js\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\"\n});\n```\n\n### Minimal example for Go\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  runtime: \"go\",\n  handler: \"./src\"\n});\n```\n\n### Set additional config\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  timeout: \"3 minutes\",\n  memory: \"1024 MB\"\n});\n```\n\n### Link resources example\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [bucket]\n});\n```\n\n### Access linked resources in Node.js\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n### Access linked resources in Go\n```yaml\nimport (\n  \"github.com/sst/sst/v3/sdk/golang/resource\"\n)\n\nresource.Get(\"MyBucket\", \"name\")\n```\n\n### Set environment variables example\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  environment: {\n    DEBUG: \"true\"\n  }\n});\n```\n\n### Enable function URLs example\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  url: true\n});\n```\n\n### Bundling example\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  nodejs: {\n    install: [\"pg\"]\n  }\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/function", "title": "Function", "description": "Reference doc for the `sst.aws.Function` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:04:16", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "title": "Function | SST", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.aws.Function` component.", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/function/", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/RnVuY3Rpb24%3D.png", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/RnVuY3Rpb24%3D.png", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Function", "ogDescription": "Reference doc for the `sst.aws.Function` component.", "og:title": "Function", "description": "Reference doc for the `sst.aws.Function` component.", "og:type": "article", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RnVuY3Rpb24%3D.png", "ogUrl": "https://sst.dev/docs/component/aws/function/", "scrapeId": "5be667ee-b844-4ee6-9b82-5a8b8160be3f", "sourceURL": "https://sst.dev/docs/component/aws/function", "url": "https://sst.dev/docs/component/aws/function", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Function\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure the handler path is correct for your function type (Node.js or Go).\n• Use environment variables to manage configuration settings securely.\n• Consider setting memory and timeout values based on your function's requirements.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/function", "title": "Function", "description": "Reference doc for the `sst.aws.Function` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:04:16", "type": "best_practices", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "title": "Function | SST", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.aws.Function` component.", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/function/", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/RnVuY3Rpb24%3D.png", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/RnVuY3Rpb24%3D.png", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Function", "ogDescription": "Reference doc for the `sst.aws.Function` component.", "og:title": "Function", "description": "Reference doc for the `sst.aws.Function` component.", "og:type": "article", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RnVuY3Rpb24%3D.png", "ogUrl": "https://sst.dev/docs/component/aws/function/", "scrapeId": "5be667ee-b844-4ee6-9b82-5a8b8160be3f", "sourceURL": "https://sst.dev/docs/component/aws/function", "url": "https://sst.dev/docs/component/aws/function", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV2\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV2` component.\n\nHere's a detailed explanation:\n\n\n## Create the API\n```javascript\nconst api = new sst.aws.ApiGatewayV2(\"MyApi\");\n```\n\n## Add a custom domain\n```javascript\nnew sst.aws.ApiGatewayV2(\"MyApi\", {\n  domain: \"api.example.com\"\n});\n```\n\n## Add routes\n```javascript\napi.route(\"GET /\", \"src/get.handler\");\napi.route(\"POST /\", \"src/post.handler\");\n```\n\n## Configure the routes\nYou can configure the route.\n\n```javascript\napi.route(\"GET /\", \"src/get.handler\", {\n  auth: { iam: true }\n});\n```\n\n## Configure the route handler\nYou can configure the route handler function.\n\n```javascript\napi.route(\"POST /\", {\n  handler: \"src/post.handler\",\n  memory: \"2048 MB\"\n});\n```\n\n## Default props for all routes\nYou can use the `transform` to set some default props for all your routes. For example,\ninstead of setting the `memory` for each route.\n\n```javascript\napi.route(\"GET /\", { handler: \"src/get.handler\", memory: \"2048 MB\" });\napi.route(\"POST /\", { handler: \"src/post.handler\", memory: \"2048 MB\" });\n```\n\nYou can set it through the `transform`.\n\n```javascript\nconst api = new sst.aws.ApiGatewayV2(\"MyApi\", {\n  transform: {\n    route: {\n      handler: (args, opts) => {\n        // Set the default if it's not set by the route\n        args.memory ??= \"2048 MB\";\n      }\n    }\n  }\n});\n\napi.route(\"GET /\", \"src/get.handler\");\napi.route(\"POST /\", \"src/post.handler\");\n```\n\n## Constructor\n```javascript\nnew ApiGatewayV2(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`ApiGatewayV2Args`](https://sst.dev/docs/component/aws/apigatewayv2#apigatewayv2args)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2", "title": "ApiGatewayV2", "description": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:04:30", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYy.png", "ogTitle": "ApiGatewayV2", "og:locale": "en", "description": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2/", "og:site_name": "SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "og:title": "ApiGatewayV2", "og:url": "https://sst.dev/docs/component/aws/apigatewayv2/", "og:type": "article", "title": "ApiGatewayV2 | SST", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYy.png", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYy.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "ogSiteName": "SST", "scrapeId": "cdae737f-67ff-4603-8102-c471c80e5202", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2", "url": "https://sst.dev/docs/component/aws/apigatewayv2", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV2\"?\n\nAssistant: Here are some code examples:\n\n### Access Log Configuration\n```yaml\n{\n  accessLog: {\n    retention: \"forever\"\n  }\n}\n```\n\n### CORS Configuration\n```yaml\n{\n  cors: {\n    allowMethods: [\"GET\", \"POST\"],\n    allowOrigins: [\"https://example.com\"]\n  }\n}\n```\n\n### Custom Domain Configuration\n```yaml\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.aws.dns()\n  }\n}\n```\n\n### VPC Configuration\n```yaml\n{\n  vpc: myVpc\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2", "title": "ApiGatewayV2", "description": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:04:30", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYy.png", "ogTitle": "ApiGatewayV2", "og:locale": "en", "description": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2/", "og:site_name": "SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "og:title": "ApiGatewayV2", "og:url": "https://sst.dev/docs/component/aws/apigatewayv2/", "og:type": "article", "title": "ApiGatewayV2 | SST", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYy.png", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYy.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "ogSiteName": "SST", "scrapeId": "cdae737f-67ff-4603-8102-c471c80e5202", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2", "url": "https://sst.dev/docs/component/aws/apigatewayv2", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayV2\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `transform` feature to set default properties for routes to avoid redundancy.\n• Always configure CORS settings to ensure your API can be accessed from the desired origins.\n• Utilize access logs to monitor API usage and troubleshoot issues effectively.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2", "title": "ApiGatewayV2", "description": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:04:30", "type": "best_practices", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYy.png", "ogTitle": "ApiGatewayV2", "og:locale": "en", "description": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2/", "og:site_name": "SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "og:title": "ApiGatewayV2", "og:url": "https://sst.dev/docs/component/aws/apigatewayv2/", "og:type": "article", "title": "ApiGatewayV2 | SST", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "viewport": "width=device-width, initial-scale=1", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYy.png", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYy.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2` component.", "ogSiteName": "SST", "scrapeId": "cdae737f-67ff-4603-8102-c471c80e5202", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2", "url": "https://sst.dev/docs/component/aws/apigatewayv2", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Task\"?\n\nAssistant: Reference doc for the `sst.aws.Task` component.\n\nHere's a detailed explanation:\n\n\n## Create a Task\nAdd a task to your cluster.\n\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nconst task = new sst.aws.Task(\"MyTask\", { cluster });\n```\n\n## Configure the container image\nBy default, the task will look for a Dockerfile in the root directory. Optionally configure the image context and dockerfile.\n\n```\nnew sst.aws.Task(\"MyTask\", {\n  cluster,\n  image: {\n    context: \"./app\",\n    dockerfile: \"Dockerfile\"\n  }\n});\n```\n\nTo add multiple containers in the task, pass in an array of containers args.\n\n```\nnew sst.aws.Task(\"MyTask\", {\n  cluster,\n  containers: [\n    {\n      name: \"app\",\n      image: \"nginxdemos/hello:plain-text\"\n    },\n    {\n      name: \"admin\",\n      image: {\n        context: \"./admin\",\n        dockerfile: \"Dockerfile\"\n      }\n    }\n  ]\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your task. This will grant permissions to the resources and allow you to access it in your app.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nnew sst.aws.Task(\"MyTask\", {\n  cluster,\n  link: [bucket]\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your task.\n\n```\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyBucket.name);\n```\n\n## Task SDK\nWith the [Task JS SDK](https://sst.dev/docs/component/aws/task#sdk), you can run your tasks, stop your tasks, and get the status of your tasks.\n\nFor example, you can link the task to a function in your app.\n\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [task]\n});\n```\n\nThen from your function start the task.\n\n```\nimport { Resource } from \"sst\";\nimport { task } from \"sst/aws/task\";\nconst runRet = await task.run(Resource.MyTask);\nconst taskArn = runRet.arn;\n```\n\n## Cost\nBy default, this uses a _Linux/X86_ _Fargate_ container with 0.25 vCPUs at $0.04048 per vCPU per hour and 0.5 GB of memory at $0.004445 per GB per hour. It includes 20GB of _Ephemeral Storage_ for free with additional storage at $0.000111 per GB per hour. Each container also gets a public IPv4 address at $0.005 per hour.\n\nIt works out to $0.04048 x 0.25 + $0.004445 x 0.5 + $0.005. Or **$0.02 per hour** your task runs for.\n\nAdjust this for the `cpu`, `memory` and `storage` you are using. And check the prices for _Linux/ARM_ if you are using `arm64` as your `architecture`.\n\nThe above are rough estimates for _us-east-1_, check out the [Fargate pricing](https://aws.amazon.com/fargate/pricing/) and the [Public IPv4 Address pricing](https://aws.amazon.com/vpc/pricing/) for more details.\n\n## Constructor\n```\nnew Task(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`TaskArgs`](https://sst.dev/docs/component/aws/task#taskargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/task", "title": "Task", "description": "Reference doc for the `sst.aws.Task` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:04:55", "type": "overview", "page_metadata": {"ogSiteName": "SST", "language": "en", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/VGFzaw%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/task/", "title": "Task | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/component/aws/task/", "favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/VGFzaw%3D%3D.png", "og:title": "Task", "og:type": "article", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/VGFzaw%3D%3D.png", "ogLocale": "en", "description": "Reference doc for the `sst.aws.Task` component.", "og:description": "Reference doc for the `sst.aws.Task` component.", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.Task` component.", "ogTitle": "Task", "scrapeId": "5d49b977-fd4a-4a1f-98b1-cc54571cc2ec", "sourceURL": "https://sst.dev/docs/component/aws/task", "url": "https://sst.dev/docs/component/aws/task", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Task\"?\n\nAssistant: Here are some code examples:\n\n### Create a Task\n```yaml\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nconst task = new sst.aws.Task(\"MyTask\", { cluster });\n```\n\n### Configure the container image\n```yaml\nnew sst.aws.Task(\"MyTask\", {\n  cluster,\n  image: {\n    context: \"./app\",\n    dockerfile: \"Dockerfile\"\n  }\n});\n```\n\n### Add multiple containers\n```yaml\nnew sst.aws.Task(\"MyTask\", {\n  cluster,\n  containers: [\n    {\n      name: \"app\",\n      image: \"nginxdemos/hello:plain-text\"\n    },\n    {\n      name: \"admin\",\n      image: {\n        context: \"./admin\",\n        dockerfile: \"Dockerfile\"\n      }\n    }\n  ]\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nnew sst.aws.Task(\"MyTask\", {\n  cluster,\n  link: [bucket]\n});\n```\n\n### Access linked resources\n```yaml\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyBucket.name);\n```\n\n### Run a task\n```yaml\nconst runRet = await task.run(Resource.MyTask);\nconst taskArn = runRet.arn;\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/task", "title": "Task", "description": "Reference doc for the `sst.aws.Task` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:04:55", "type": "code_examples", "page_metadata": {"ogSiteName": "SST", "language": "en", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/VGFzaw%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/task/", "title": "Task | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/component/aws/task/", "favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/VGFzaw%3D%3D.png", "og:title": "Task", "og:type": "article", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/VGFzaw%3D%3D.png", "ogLocale": "en", "description": "Reference doc for the `sst.aws.Task` component.", "og:description": "Reference doc for the `sst.aws.Task` component.", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.Task` component.", "ogTitle": "Task", "scrapeId": "5d49b977-fd4a-4a1f-98b1-cc54571cc2ec", "sourceURL": "https://sst.dev/docs/component/aws/task", "url": "https://sst.dev/docs/component/aws/task", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Task\"?\n\nAssistant: Here are the recommended best practices:\n\n• Adjust the cost estimates based on the `cpu`, `memory`, and `storage` you are using.\n• Check the prices for _Linux/ARM_ if you are using `arm64` as your `architecture`.\n• Read more about the `sst dev` command to test your task locally.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/task", "title": "Task", "description": "Reference doc for the `sst.aws.Task` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:04:55", "type": "best_practices", "page_metadata": {"ogSiteName": "SST", "language": "en", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/VGFzaw%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/task/", "title": "Task | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/component/aws/task/", "favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/VGFzaw%3D%3D.png", "og:title": "Task", "og:type": "article", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/VGFzaw%3D%3D.png", "ogLocale": "en", "description": "Reference doc for the `sst.aws.Task` component.", "og:description": "Reference doc for the `sst.aws.Task` component.", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.Task` component.", "ogTitle": "Task", "scrapeId": "5d49b977-fd4a-4a1f-98b1-cc54571cc2ec", "sourceURL": "https://sst.dev/docs/component/aws/task", "url": "https://sst.dev/docs/component/aws/task", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Router\"?\n\nAssistant: Reference doc for the `sst.aws.Router` component.\n\nHere's a detailed explanation:\n\n\n## Router\nThe `Router` component lets you use a CloudFront distribution to direct requests to various parts of your application. The `routes` prop can route requests to function URLs, different domains, or any component that has an associated URL.\n\n## Minimal example\n```javascript\nnew sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/*\": \"https://some-internal-service.com\"\n  }\n});\n```\n\n## Route to a function URL\n```javascript\nconst myFunction = new sst.aws.Function(\"MyFunction\", {\n  handler: \"src/api.handler\",\n  url: true,\n});\n\nnew sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/*\": myFunction.url\n  }\n});\n```\n\n## Route to a bucket\n```javascript\nconst myBucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"cloudfront\"\n});\n\nnew sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/files/*\": {\n      bucket: myBucket\n    }\n  }\n});\n```\nMake sure to allow CloudFront access to the bucket by setting the `access` prop on the bucket.\n\n## Route all API requests separately\n```javascript\nnew sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/*\": \"https://myapp.com\",\n    \"/api/*\": myFunction.url\n  }\n});\n```\n\n## Add a custom domain\n```javascript\nnew sst.aws.Router(\"MyRouter\", {\n  domain: \"myapp.com\",\n  routes: {\n    \"/*\": myFunction.url\n  }\n});\n```\n\n## Constructor\n```javascript\nnew Router(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`RouterArgs`](https://sst.dev/docs/component/aws/router#routerargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/router", "title": "Router", "description": "Reference doc for the `sst.aws.Router` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:05:06", "type": "overview", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Router | SST", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/router/", "ogImage": "https://social-cards.sst.dev/v3-docs/Um91dGVy.png", "ogSiteName": "SST", "og:type": "article", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/router/", "ogLocale": "en", "og:title": "Router", "ogTitle": "Router", "description": "Reference doc for the `sst.aws.Router` component.", "og:image": "https://social-cards.sst.dev/v3-docs/Um91dGVy.png", "og:description": "Reference doc for the `sst.aws.Router` component.", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Um91dGVy.png", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.aws.Router` component.", "og:site_name": "SST", "scrapeId": "5e867f29-9f3d-4c1a-aa0c-865c55337030", "sourceURL": "https://sst.dev/docs/component/aws/router", "url": "https://sst.dev/docs/component/aws/router", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Router\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\n```javascript\nnew sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/*\": \"https://some-internal-service.com\"\n  }\n});\n```\n```\n\n### Route to a function URL\n```yaml\n```javascript\nconst myFunction = new sst.aws.Function(\"MyFunction\", {\n  handler: \"src/api.handler\",\n  url: true,\n});\n\nnew sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/*\": myFunction.url\n  }\n});\n```\n```\n\n### Route to a bucket\n```yaml\n```javascript\nconst myBucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"cloudfront\"\n});\n\nnew sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/files/*\": {\n      bucket: myBucket\n    }\n  }\n});\n```\n```\n\n### Route all API requests separately\n```yaml\n```javascript\nnew sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/*\": \"https://myapp.com\",\n    \"/api/*\": myFunction.url\n  }\n});\n```\n```\n\n### Add a custom domain\n```yaml\n```javascript\nnew sst.aws.Router(\"MyRouter\", {\n  domain: \"myapp.com\",\n  routes: {\n    \"/*\": myFunction.url\n  }\n});\n```\n```\n\n### Constructor\n```yaml\n```javascript\nnew Router(name, args, opts?)\n```\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/router", "title": "Router", "description": "Reference doc for the `sst.aws.Router` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:05:06", "type": "code_examples", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Router | SST", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/router/", "ogImage": "https://social-cards.sst.dev/v3-docs/Um91dGVy.png", "ogSiteName": "SST", "og:type": "article", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/router/", "ogLocale": "en", "og:title": "Router", "ogTitle": "Router", "description": "Reference doc for the `sst.aws.Router` component.", "og:image": "https://social-cards.sst.dev/v3-docs/Um91dGVy.png", "og:description": "Reference doc for the `sst.aws.Router` component.", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Um91dGVy.png", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.aws.Router` component.", "og:site_name": "SST", "scrapeId": "5e867f29-9f3d-4c1a-aa0c-865c55337030", "sourceURL": "https://sst.dev/docs/component/aws/router", "url": "https://sst.dev/docs/component/aws/router", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Router\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to allow CloudFront access to the bucket by setting the `access` prop on the bucket.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/router", "title": "Router", "description": "Reference doc for the `sst.aws.Router` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 8, "timestamp": "2025-02-27 21:05:06", "type": "best_practices", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Router | SST", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/router/", "ogImage": "https://social-cards.sst.dev/v3-docs/Um91dGVy.png", "ogSiteName": "SST", "og:type": "article", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/router/", "ogLocale": "en", "og:title": "Router", "ogTitle": "Router", "description": "Reference doc for the `sst.aws.Router` component.", "og:image": "https://social-cards.sst.dev/v3-docs/Um91dGVy.png", "og:description": "Reference doc for the `sst.aws.Router` component.", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/Um91dGVy.png", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.aws.Router` component.", "og:site_name": "SST", "scrapeId": "5e867f29-9f3d-4c1a-aa0c-865c55337030", "sourceURL": "https://sst.dev/docs/component/aws/router", "url": "https://sst.dev/docs/component/aws/router", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Bucket\"?\n\nAssistant: Reference doc for the `sst.aws.Bucket` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\n```javascript\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n## Public read access\nEnable `public` read access for all the files in the bucket. Useful for hosting public files.\n\n```javascript\nnew sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n## Add a subscriber\n```javascript\nbucket.subscribe(\"src/subscriber.handler\");\n```\n\n## Link the bucket to a resource\nYou can link the bucket to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\nOnce linked, you can generate a pre-signed URL to upload files in your app.\n\n```javascript\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n\nconst command = new PutObjectCommand({\n   Key: \"file.txt\",\n   Bucket: Resource.MyBucket.name\n });\n\nawait getSignedUrl(new S3Client({}), command);\n```\n\n## Constructor\n```javascript\nnew Bucket(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`BucketArgs`](https://sst.dev/docs/component/aws/bucket#bucketargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket", "title": "Bucket", "description": "Reference doc for the `sst.aws.Bucket` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:05:15", "type": "overview", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "og:url": "https://sst.dev/docs/component/aws/bucket/", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Bucket", "ogSiteName": "SST", "ogLocale": "en", "description": "Reference doc for the `sst.aws.Bucket` component.", "og:title": "Bucket", "ogDescription": "Reference doc for the `sst.aws.Bucket` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "viewport": "width=device-width, initial-scale=1", "title": "Bucket | SST", "og:type": "article", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/bucket/", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "og:description": "Reference doc for the `sst.aws.Bucket` component.", "scrapeId": "9125e379-2b37-4e75-b6f2-4453bc7111ef", "sourceURL": "https://sst.dev/docs/component/aws/bucket", "url": "https://sst.dev/docs/component/aws/bucket", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Bucket\"?\n\nAssistant: Here are some code examples:\n\n### CORS Configuration Default\n```yaml\n{\n  cors: {\n    allowHeaders: [\"*\"],\n    allowOrigins: [\"*\"],\n    allowMethods: [\"DELETE\", \"GET\", \"HEAD\", \"POST\", \"PUT\"],\n    exposeHeaders: [],\n    maxAge: \"0 seconds\"\n  }\n}\n```\n\n### Bucket Versioning\n```yaml\n{\n  versioning: true\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket", "title": "Bucket", "description": "Reference doc for the `sst.aws.Bucket` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:05:15", "type": "code_examples", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "og:url": "https://sst.dev/docs/component/aws/bucket/", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Bucket", "ogSiteName": "SST", "ogLocale": "en", "description": "Reference doc for the `sst.aws.Bucket` component.", "og:title": "Bucket", "ogDescription": "Reference doc for the `sst.aws.Bucket` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "viewport": "width=device-width, initial-scale=1", "title": "Bucket | SST", "og:type": "article", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/bucket/", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "og:description": "Reference doc for the `sst.aws.Bucket` component.", "scrapeId": "9125e379-2b37-4e75-b6f2-4453bc7111ef", "sourceURL": "https://sst.dev/docs/component/aws/bucket", "url": "https://sst.dev/docs/component/aws/bucket", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Bucket\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable public read access for hosting public files.\n• Use CORS configuration to control access from different origins.\n• Utilize versioning to protect against accidental deletion or overwriting of objects.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket", "title": "Bucket", "description": "Reference doc for the `sst.aws.Bucket` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:05:15", "type": "best_practices", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "og:url": "https://sst.dev/docs/component/aws/bucket/", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Bucket", "ogSiteName": "SST", "ogLocale": "en", "description": "Reference doc for the `sst.aws.Bucket` component.", "og:title": "Bucket", "ogDescription": "Reference doc for the `sst.aws.Bucket` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "viewport": "width=device-width, initial-scale=1", "title": "Bucket | SST", "og:type": "article", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/bucket/", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "og:description": "Reference doc for the `sst.aws.Bucket` component.", "scrapeId": "9125e379-2b37-4e75-b6f2-4453bc7111ef", "sourceURL": "https://sst.dev/docs/component/aws/bucket", "url": "https://sst.dev/docs/component/aws/bucket", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Hono on AWS with SST\"?\n\nAssistant: Create and deploy a Hono API in AWS with SST.\n\nHere's a detailed explanation:\n\n\n## Serverless\nWe are going to build a serverless Hono API, add an S3 Bucket for file uploads, and deploy it using a Lambda function.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\n\nnpm create hono@latest aws-hono\n\ncd aws-hono\n```\n\nWe are picking the **aws-lambda** template.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add an API\nLet’s add a Hono API using an AWS Lambda. Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  new sst.aws.Function(\"Hono\", {\n\n    url: true,\n\n    handler: \"src/index.handler\",\n\n  });\n\n}\n```\n\nWe are enabling the function URL for this.\n\n## Start dev mode\nStart your app in dev mode. This runs your functions [_Live_](https://sst.dev/docs/live/).\n\n```\nnpx sst dev\n```\n\nThis will give you the URL of your API.\n\n```\n✓  Complete\n\n   Hono: https://gyrork2ll35rsuml2yr4lifuqu0tsjft.lambda-url.us-east-1.on.aws\n```\n\n## 3. Add an S3 Bucket\nLet’s add an S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n\n## Link the bucket\nNow, link the bucket to the API.\n\n```\nnew sst.aws.Function(\"Hono\", {\n\n  url: true,\n\n  link: [bucket],\n\n  handler: \"src/index.handler\",\n\n});\n```\n\n\n## 4. Upload a file\nWe want the `/` route of our API to generate a pre-signed URL to upload a file to our S3 Bucket. Replace the _Hello Hono_ route in `src/index.ts`.\n\n```\napp.get('/', async (c) => {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return c.text(await getSignedUrl(s3, command));\n});\n```\n\nInstall the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\nThen add the relevant imports. We’ll use the extra ones below.\n\n```\nimport { Resource } from 'sst'\n\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\n\nimport {\n\n  S3Client,\n\n  GetObjectCommand,\n\n  PutObjectCommand,\n\n  ListObjectsV2Command,\n\n} from '@aws-sdk/client-s3'\n\nconst s3 = new S3Client();\n```\n\n\n## 5. Download a file\nWe want the `/latest` route of our API to generate a pre-signed URL to download the last uploaded file in our S3 Bucket. Add this to your routes in `src/index.ts`.\n\n```\napp.get('/latest', async (c) => {\n\n  const objects = await s3.send(\n\n    new ListObjectsV2Command({\n\n      Bucket: Resource.MyBucket.name,\n\n    }),\n\n  );\n\n  const latestFile = objects.Contents!.sort(\n\n    (a, b) =>\n\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0),\n\n  )[0];\n\n  const command = new GetObjectCommand({\n\n    Key: latestFile.Key,\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return c.redirect(await getSignedUrl(s3, command));\n});\n```\n\n\n## Test your app\nLet’s try uploading a file from your project root. Make sure to use your API URL.\n\n```\ncurl --upload-file package.json \"$(curl https://gyrork2ll35rsuml2yr4lifuqu0tsjft.lambda-url.us-east-1.on.aws)\"\n```\n\nNow head over to `https://gyrork2ll35rsuml2yr4lifuqu0tsjft.lambda-url.us-east-1.on.aws/latest` in your browser and it’ll download the file you just uploaded.\n\n## 6. Deploy your app\nNow let’s deploy your app.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Containers\nWe are going to create a Hono API, add an S3 Bucket for file uploads, and deploy it in a container with the `Cluster` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\n\nnpm create hono@latest aws-hono-container\n\ncd aws-hono-container\n```\n\nWe are picking the **nodejs** template.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add a Service\nTo deploy our Hono app in a container, we’ll use [AWS Fargate](https://aws.amazon.com/fargate/) with [Amazon ECS](https://aws.amazon.com/ecs/). Replace the `run` function in\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\nThis creates a VPC, and an ECS Cluster with a Fargate service in it.\n\nThe `dev.command` tells SST to instead run our Hono app locally in dev mode.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Hono app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyService** in the sidebar and open your Hono app in your browser.\n\n## 3. Add an S3 Bucket\nLet’s add an S3 Bucket for file uploads. Add this to your `sst.config.ts` below the `Vpc` component.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n\n## Link the bucket\nNow, link the bucket to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [bucket],\n\n});\n```\n\nThis will allow us to reference the bucket in our Hono app.\n\n## 4. Upload a file\nWe want a `POST` request made to the `/` route to upload a file to our S3 bucket. Let’s add this below our _Hello Hono_ route in our `src/index.ts`.\n\n```\napp.post('/', async (c) => {\n\n  const body = await c.req.parseBody();\n\n  const file = body['file'] as File;\n\n  const params = {\n\n    Bucket: Resource.MyBucket.name,\n\n    ContentType: file.type,\n\n    Key: file.name,\n\n    Body: file,\n\n  };\n\n  const upload = new Upload({\n\n    params,\n\n    client: s3,\n\n  });\n\n  await upload.done();\n\n  return c.text('File uploaded successfully.');\n});\n```\n\nAdd the imports. We’ll use the extra ones below.\n\n```\nimport { Resource } from 'sst'\n\nimport {\n\n  S3Client,\n\n  GetObjectCommand,\n\n  ListObjectsV2Command,\n\n} from '@aws-sdk/client-s3'\n\nimport { Upload } from '@aws-sdk/lib-storage'\n\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\n\nconst s3 = new S3Client();\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/lib-storage @aws-sdk/s3-request-presigner\n```\n\n\n## 5. Download the file\nWe’ll add a `/latest` route that’ll download the latest file in our S3 bucket. Let’s add this below our upload route in `src/index.ts`.\n\n```\napp.get('/latest', async (c) => {\n\n  const objects = await s3.send(\n\n    new ListObjectsV2Command({\n\n      Bucket: Resource.MyBucket.name,\n\n    }),\n\n  );\n\n  const latestFile = objects.Contents!.sort(\n\n    (a, b) =>\n\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0),\n\n  )[0];\n\n  const command = new GetObjectCommand({\n\n    Key: latestFile.Key,\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return c.redirect(await getSignedUrl(s3, command));\n});\n```\n\n\n## Test your app\nTo upload a file run the following from your project root.\n\n```\ncurl -F file=@package.json http://localhost:3000/\n```\n\nThis should upload the `package.json`. Now head over to `http://localhost:3000/latest` in your browser and it’ll show you what you just uploaded.\n\n## 6. Deploy your app\nTo deploy our app we’ll first add a `Dockerfile`. This is building our app by running our `build` script from above.\n\n```\nFROM node:lts-alpine AS base\n\nFROM base AS builder\n\nRUN apk add --no-cache gcompat\n\nWORKDIR /app\n\nCOPY package*json tsconfig.json src ./\n\n # Copy over generated types\n\n COPY sst-env.d.ts* ./\n\nRUN npm ci && \\\n  npm run build && \\\n  npm prune --production\n\nFROM base AS runner\n\nWORKDIR /app\n\nRUN addgroup --system --gid 1001 nodejs\n\nRUN adduser --system --uid 1001 hono\n\nCOPY --from=builder --chown=hono:nodejs /app/node_modules /app/node_modules\n\nCOPY --from=builder --chown=hono:nodejs /app/dist /app/dist\n\nCOPY --from=builder --chown=hono:nodejs /app/package.json /app/package.json\n\nUSER hono\n\nEXPOSE 3000\n\nCMD [\"node\", \"/app/dist/index.js\"]\n```\n\nThis builds our Hono app in a Docker image.\n\nLet’s also add a `.dockerignore` file in the root.\n\n```\nnode_modules\n\n.git\n```\n\nTo compile our TypeScript file, we’ll need add the following to the `tsconfig.json`.\n\n```\n{\n\n  \"compilerOptions\": {\n\n    // ...\n\n    \"outDir\": \"./dist\"\n\n  },\n\n  \"exclude\": [\"node_modules\"]\n}\n```\n\nInstall TypeScript.\n\n```\nnpm install typescript --save-dev\n```\n\nAnd add a `build` script to our `package.json`.\n\n```\n\"scripts\": {\n\n  // ...\n\n  \"build\": \"tsc\"\n}\n```\n\nNow to build our Docker image and deploy we run:\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production. This’ll give the URL of your Hono app deployed as a Fargate service.\n\n```\n✓  Complete\n\n   MyService: http://prod-MyServiceLoadBalanc-491430065.us-east-1.elb.amazonaws.com\n```\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and view logs from it.\n\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/hono", "title": "Hono on AWS with SST", "description": "Create and deploy a Hono API in AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 23, "timestamp": "2025-02-27 21:07:05", "type": "overview", "page_metadata": {"ogDescription": "Create and deploy a Hono API in AWS with SST.", "description": "Create and deploy a Hono API in AWS with SST.", "og:url": "https://sst.dev/docs/start/aws/hono/", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "title": "Hono on AWS with SST | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogUrl": "https://sst.dev/docs/start/aws/hono/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "og:description": "Create and deploy a Hono API in AWS with SST.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:locale": "en", "ogLocale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogTitle": "Hono on AWS with SST", "twitter:card": "summary_large_image", "og:title": "Hono on AWS with SST", "scrapeId": "68f37232-1f34-4810-8dcb-2d30835227cf", "sourceURL": "https://sst.dev/docs/start/aws/hono", "url": "https://sst.dev/docs/start/aws/hono", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Hono on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnpm create hono@latest aws-hono\n\ncd aws-hono\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Add an API\n```yaml\nasync run() {\n\n  new sst.aws.Function(\"Hono\", {\n\n    url: true,\n\n    handler: \"src/index.handler\",\n\n  });\n}\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n### Link the bucket\n```yaml\nnew sst.aws.Function(\"Hono\", {\n\n  url: true,\n\n  link: [bucket],\n\n  handler: \"src/index.handler\",\n\n});\n```\n\n### Upload a file\n```yaml\napp.get('/', async (c) => {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return c.text(await getSignedUrl(s3, command));\n});\n```\n\n### Download a file\n```yaml\napp.get('/latest', async (c) => {\n\n  const objects = await s3.send(\n\n    new ListObjectsV2Command({\n\n      Bucket: Resource.MyBucket.name,\n\n    }),\n\n  );\n\n  const latestFile = objects.Contents!.sort(\n\n    (a, b) =>\n\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0),\n\n  )[0];\n\n  const command = new GetObjectCommand({\n\n    Key: latestFile.Key,\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return c.redirect(await getSignedUrl(s3, command));\n});\n```\n\n### Deploy your app\n```yaml\nnpx sst deploy --stage production\n```\n\n### Create a project (Containers)\n```yaml\nnpm create hono@latest aws-hono-container\n\ncd aws-hono-container\n```\n\n### Init SST (Containers)\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Add a Service\n```yaml\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\n### Upload a file (Containers)\n```yaml\napp.post('/', async (c) => {\n\n  const body = await c.req.parseBody();\n\n  const file = body['file'] as File;\n\n  const params = {\n\n    Bucket: Resource.MyBucket.name,\n\n    ContentType: file.type,\n\n    Key: file.name,\n\n    Body: file,\n\n  };\n\n  const upload = new Upload({\n\n    params,\n\n    client: s3,\n\n  });\n\n  await upload.done();\n\n  return c.text('File uploaded successfully.');\n});\n```\n\n### Download the file (Containers)\n```yaml\napp.get('/latest', async (c) => {\n\n  const objects = await s3.send(\n\n    new ListObjectsV2Command({\n\n      Bucket: Resource.MyBucket.name,\n\n    }),\n\n  );\n\n  const latestFile = objects.Contents!.sort(\n\n    (a, b) =>\n\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0),\n\n  )[0];\n\n  const command = new GetObjectCommand({\n\n    Key: latestFile.Key,\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return c.redirect(await getSignedUrl(s3, command));\n});\n```\n\n### Deploy your app (Containers)\n```yaml\nnpx sst deploy --stage production\n```\n\n### Dockerfile\n```yaml\nFROM node:lts-alpine AS base\n\nFROM base AS builder\n\nRUN apk add --no-cache gcompat\n\nWORKDIR /app\n\nCOPY package*json tsconfig.json src ./\n\n # Copy over generated types\n\n COPY sst-env.d.ts* ./\n\nRUN npm ci && \\\n  npm run build && \\\n  npm prune --production\n\nFROM base AS runner\n\nWORKDIR /app\n\nRUN addgroup --system --gid 1001 nodejs\n\nRUN adduser --system --uid 1001 hono\n\nCOPY --from=builder --chown=hono:nodejs /app/node_modules /app/node_modules\n\nCOPY --from=builder --chown=hono:nodejs /app/dist /app/dist\n\nCOPY --from=builder --chown=hono:nodejs /app/package.json /app/package.json\n\nUSER hono\n\nEXPOSE 3000\n\nCMD [\"node\", \"/app/dist/index.js\"]\n```\n\n### .dockerignore\n```yaml\nnode_modules\n\n.git\n```\n\n### tsconfig.json\n```yaml\n{\n\n  \"compilerOptions\": {\n\n    // ...\n\n    \"outDir\": \"./dist\"\n\n  },\n\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/hono", "title": "Hono on AWS with SST", "description": "Create and deploy a Hono API in AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 23, "timestamp": "2025-02-27 21:07:05", "type": "code_examples", "page_metadata": {"ogDescription": "Create and deploy a Hono API in AWS with SST.", "description": "Create and deploy a Hono API in AWS with SST.", "og:url": "https://sst.dev/docs/start/aws/hono/", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "title": "Hono on AWS with SST | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogUrl": "https://sst.dev/docs/start/aws/hono/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "og:description": "Create and deploy a Hono API in AWS with SST.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:locale": "en", "ogLocale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogTitle": "Hono on AWS with SST", "twitter:card": "summary_large_image", "og:title": "Hono on AWS with SST", "scrapeId": "68f37232-1f34-4810-8dcb-2d30835227cf", "sourceURL": "https://sst.dev/docs/start/aws/hono", "url": "https://sst.dev/docs/start/aws/hono", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Hono on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• It's good to create a new stage for production when deploying your app.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/hono", "title": "Hono on AWS with SST", "description": "Create and deploy a Hono API in AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 23, "timestamp": "2025-02-27 21:07:05", "type": "best_practices", "page_metadata": {"ogDescription": "Create and deploy a Hono API in AWS with SST.", "description": "Create and deploy a Hono API in AWS with SST.", "og:url": "https://sst.dev/docs/start/aws/hono/", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "title": "Hono on AWS with SST | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogUrl": "https://sst.dev/docs/start/aws/hono/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "og:description": "Create and deploy a Hono API in AWS with SST.", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "language": "en", "og:locale": "en", "ogLocale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/SG9ubyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogTitle": "Hono on AWS with SST", "twitter:card": "summary_large_image", "og:title": "Hono on AWS with SST", "scrapeId": "68f37232-1f34-4810-8dcb-2d30835227cf", "sourceURL": "https://sst.dev/docs/start/aws/hono", "url": "https://sst.dev/docs/start/aws/hono", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"SvelteKit on AWS with SST\"?\n\nAssistant: Create and deploy a SvelteKit app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## Examples\nWe also have a few other SvelteKit examples that you can refer to.\n\n- Hit counter with Redis and SvelteKit in a container\n\n## Serverless\nWe are going to create a SvelteKit app, add an S3 Bucket for file uploads, and deploy it using the `SvelteKit` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\n\nnpx sv create aws-svelte-kit\n\ncd aws-svelte-kit\n```\n\nWe are picking the **_SvelteKit minimal_** and **_Yes, using TypeScript syntax_** options.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\nIt’ll also ask you to update your `svelte.config.mjs` with something like this.\n\n```\nimport adapter from '@sveltejs/adapter-auto';\n\nimport adapter from \"svelte-kit-sst\";\n```\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your SvelteKit app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyWeb** in the sidebar and open your SvelteKit app in your browser.\n\n## 2. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this above the `SvelteKit` component.\n\n## Link the bucket\nNow, link the bucket to our SvelteKit app.\n\n```\nnew sst.aws.SvelteKit(\"MyWeb\", {\n\n  link: [bucket]\n\n});\n```\n\n## 3. Create an upload form\nLet’s add a file upload form. Replace your `src/routes/+page.svelte`. This will upload a file to a given pre-signed upload URL.\n\n```\n<script>\n\n  /** @type {import('./$types').PageData} */\n\n  export let data;\n\n  const handleSubmit = async (e) => {\n\n    const formData = new FormData(e.target);\n\n    const file = formData.get(\"file\");\n\n    const image = await fetch(data.url, {\n\n      body: file,\n\n      method: \"PUT\",\n\n      headers: {\n\n        \"Content-Type\": file.type,\n\n        \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n      },\n\n    });\n\n    window.location.href = image.url.split(\"?\")[0];\n\n  };\n</script>\n\n<section>\n\n  <form on:submit|preventDefault={handleSubmit}>\n\n    <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n\n    <button type=\"submit\">Upload</button>\n\n  </form>\n\n</section>\n```\n\nAdd some styles.\n\n```\n<style>\n\n  section {\n\n    flex: 0.6;\n\n    display: flex;\n\n    padding-top: 4rem;\n\n    align-items: center;\n\n    flex-direction: column;\n\n    justify-content: center;\n\n  }\n\n</style>\n```\n\n## 4. Generate a pre-signed URL\nWhen our route loads, we’ll generate a pre-signed URL for S3 and our form will upload to it. Create a new `src/routes/+page.server.ts` and add the following.\n\n```\n/** @type {import('./$types').PageServerLoad} */\n\nexport async function load() {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\nAdd the relevant imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\nHead over to the local SvelteKit app in your browser, `http://localhost:5173` and try **uploading an image**. You should see it upload and then download the image.\n\n## 5. Deploy your app\nNow let’s deploy your app to AWS.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\nCongrats! Your app should now be live!\n\n## Containers\nWe are going to create a SvelteKit app, add an S3 Bucket for file uploads, and deploy it in a container with the `Cluster` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\nnpx sv create aws-svelte-container\n\ncd aws-svelte-container\n```\n\nWe are picking the **_SvelteKit minimal_** and **_Yes, using TypeScript syntax_** options.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\nIt’ll also ask you to update your `svelte.config.mjs`. But **we’ll instead use** the [Node.js adapter](https://kit.svelte.dev/docs/adapter-node) since we’re deploying it through a container.\n\n```\nnpm i -D @sveltejs/adapter-node\n```\n\nAnd updating your `svelte.config.js`.\n\n```\nimport adapter from '@sveltejs/adapter-auto';\n\nimport adapter from '@sveltejs/adapter-node';\n```\n\n## 2. Add a Service\nTo deploy our SvelteKit app in a container, we’ll use [AWS Fargate](https://aws.amazon.com/fargate/) with [Amazon ECS](https://aws.amazon.com/ecs/). Replace the `run` function in your `sst.config.ts`.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\nThis creates a VPC, and an ECS Cluster with a Fargate service in it.\n\nThe `dev.command` tells SST to instead run our SvelteKit app locally in dev mode.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your SvelteKit app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyService** in the sidebar and open your SvelteKit app in your browser.\n\n## 3. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this below the `Vpc` component.\n\n## Link the bucket\nNow, link the bucket to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [bucket],\n\n});\n```\n\nThis will allow us to reference the bucket in our SvelteKit app.\n\n## 4. Create an upload form\nLet’s add a file upload form. Replace your `src/routes/+page.svelte`. This will upload a file to a given pre-signed upload URL.\n\n```\n<script>\n\n  /** @type {import('./$types').PageData} */\n\n  export let data;\n\n  const handleSubmit = async (e) => {\n\n    const formData = new FormData(e.target);\n\n    const file = formData.get(\"file\");\n\n    const image = await fetch(data.url, {\n\n      body: file,\n\n      method: \"PUT\",\n\n      headers: {\n\n        \"Content-Type\": file.type,\n\n        \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n      },\n\n    });\n\n    window.location.href = image.url.split(\"?\")[0];\n\n  };\n</script>\n\n<section>\n\n  <form on:submit|preventDefault={handleSubmit}>\n\n    <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n\n    <button type=\"submit\">Upload</button>\n\n  </form>\n\n</section>\n```\n\nAdd some styles.\n\n```\n<style>\n\n  section {\n\n    flex: 0.6;\n\n    display: flex;\n\n    padding-top: 4rem;\n\n    align-items: center;\n\n    flex-direction: column;\n\n    justify-content: center;\n\n  }\n\n</style>\n```\n\n## 5. Generate a pre-signed URL\nWhen our route loads, we’ll generate a pre-signed URL for S3 and our form will upload to it. Create a new `src/routes/+page.server.ts` and add the following.\n\n```\n/** @type {import('./$types').PageServerLoad} */\n\nexport async function load() {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\nAdd the relevant imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\nHead over to the local SvelteKit app in your browser, `http://localhost:5173` and try **uploading an image**. You should see it upload and then download the image.\n\n## 6. Deploy your app\nTo deploy our app we’ll add a `Dockerfile`.\n\n```\nFROM node:18.18.0-alpine AS builder\n\nWORKDIR /app\n\nCOPY package*.json .\n\nRUN npm install\n\nCOPY . .\n\nRUN npm run build\n\nRUN npm prune --prod\n\nFROM builder AS deployer\n\nWORKDIR /app\n\nCOPY --from=builder /app/build build/\n\nCOPY --from=builder /app/package.json .\n\nEXPOSE 3000\n\nENV NODE_ENV=production\n\nCMD [ \"node\", \"build\" ]\n```\n\nThis builds our SvelteKit app in a Docker image.\n\nLet’s also add a `.dockerignore` file in the root.\n\n```\n.DS_Store\n\nnode_modules\n```\n\nNow to build our Docker image and deploy we run:\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\nCongrats! Your app should now be live!\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and view logs from it.\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/svelte", "title": "SvelteKit on AWS with SST", "description": "Create and deploy a SvelteKit app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-27 21:07:48", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://sst.dev/favicon.ico", "ogTitle": "SvelteKit on AWS with SST", "og:description": "Create and deploy a SvelteKit app to AWS with SST.", "description": "Create and deploy a SvelteKit app to AWS with SST.", "ogImage": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0JTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0JTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "ogUrl": "https://sst.dev/docs/start/aws/svelte/", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:locale": "en", "title": "SvelteKit on AWS with SST | SST", "og:url": "https://sst.dev/docs/start/aws/svelte/", "og:title": "SvelteKit on AWS with SST", "og:site_name": "SST", "ogDescription": "Create and deploy a SvelteKit app to AWS with SST.", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0JTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogSiteName": "SST", "scrapeId": "ad19e37c-aff1-44d8-aff3-9268ea054993", "sourceURL": "https://sst.dev/docs/start/aws/svelte", "url": "https://sst.dev/docs/start/aws/svelte", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"SvelteKit on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnpx sv create aws-svelte-kit\n\ncd aws-svelte-kit\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n});\n```\n\n### Link the bucket\n```yaml\nnew sst.aws.SvelteKit(\"MyWeb\", {\n\n  link: [bucket]\n});\n```\n\n### Create an upload form\n```yaml\n<script>\n\n  /** @type {import('./$types').PageData} */\n\n  export let data;\n\n  const handleSubmit = async (e) => {\n\n    const formData = new FormData(e.target);\n\n    const file = formData.get(\"file\");\n\n    const image = await fetch(data.url, {\n\n      body: file,\n\n      method: \"PUT\",\n\n      headers: {\n\n        \"Content-Type\": file.type,\n\n        \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n      },\n\n    });\n\n    window.location.href = image.url.split(\"?\")[0];\n\n  };\n</script>\n\n<section>\n\n  <form on:submit|preventDefault={handleSubmit}>\n\n    <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n\n    <button type=\"submit\">Upload</button>\n\n  </form>\n\n</section>\n```\n\n### Generate a pre-signed URL\n```yaml\nexport async function load() {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\n### Deploy your app\n```yaml\nnpx sst deploy --stage production\n```\n\n### Create a project (Containers)\n```yaml\nnpx sv create aws-svelte-container\n\ncd aws-svelte-container\n```\n\n### Init SST (Containers)\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Add a Service\n```yaml\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/svelte", "title": "SvelteKit on AWS with SST", "description": "Create and deploy a SvelteKit app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-27 21:07:48", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://sst.dev/favicon.ico", "ogTitle": "SvelteKit on AWS with SST", "og:description": "Create and deploy a SvelteKit app to AWS with SST.", "description": "Create and deploy a SvelteKit app to AWS with SST.", "ogImage": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0JTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0JTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "ogUrl": "https://sst.dev/docs/start/aws/svelte/", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:locale": "en", "title": "SvelteKit on AWS with SST | SST", "og:url": "https://sst.dev/docs/start/aws/svelte/", "og:title": "SvelteKit on AWS with SST", "og:site_name": "SST", "ogDescription": "Create and deploy a SvelteKit app to AWS with SST.", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0JTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogSiteName": "SST", "scrapeId": "ad19e37c-aff1-44d8-aff3-9268ea054993", "sourceURL": "https://sst.dev/docs/start/aws/svelte", "url": "https://sst.dev/docs/start/aws/svelte", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"SvelteKit on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• It's good to create a new stage for production when deploying your app.\n• Use the Node.js adapter when deploying through a container.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/svelte", "title": "SvelteKit on AWS with SST", "description": "Create and deploy a SvelteKit app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-27 21:07:48", "type": "best_practices", "page_metadata": {"language": "en", "favicon": "https://sst.dev/favicon.ico", "ogTitle": "SvelteKit on AWS with SST", "og:description": "Create and deploy a SvelteKit app to AWS with SST.", "description": "Create and deploy a SvelteKit app to AWS with SST.", "ogImage": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0JTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0JTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "ogUrl": "https://sst.dev/docs/start/aws/svelte/", "viewport": "width=device-width, initial-scale=1", "ogLocale": "en", "og:locale": "en", "title": "SvelteKit on AWS with SST | SST", "og:url": "https://sst.dev/docs/start/aws/svelte/", "og:title": "SvelteKit on AWS with SST", "og:site_name": "SST", "ogDescription": "Create and deploy a SvelteKit app to AWS with SST.", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0JTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogSiteName": "SST", "scrapeId": "ad19e37c-aff1-44d8-aff3-9268ea054993", "sourceURL": "https://sst.dev/docs/start/aws/svelte", "url": "https://sst.dev/docs/start/aws/svelte", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Cron\"?\n\nAssistant: Reference doc for the `sst.aws.Cron` component.\n\nHere's a detailed explanation:\n\n\n## Cron job function\nPass in a `schedule` and a `function` that’ll be executed.\n\n```\nnew sst.aws.Cron(\"MyCronJob\", {\n\n  function: \"src/cron.handler\",\n\n  schedule: \"rate(1 minute)\"\n\n});\n```\n\n## Cron job container task\nCreate a container task and pass in a `schedule` and a `task` that’ll be executed.\n\n```\nconst myCluster = new sst.aws.Cluster(\"MyCluster\");\n\nconst myTask = new sst.aws.Task(\"MyTask\", { cluster: myCluster });\n\nnew sst.aws.Cron(\"MyCronJob\", {\n\n  task: myTask,\n\n  schedule: \"rate(1 day)\"\n\n});\n```\n\n## Customize the function\n```\nnew sst.aws.Cron(\"MyCronJob\", {\n\n  schedule: \"rate(1 minute)\",\n\n  function: {\n\n    handler: \"src/cron.handler\",\n\n    timeout: \"60 seconds\"\n\n  }\n\n});\n```\n\n## Constructor\n```\nnew Cron(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`CronArgs`](https://sst.dev/docs/component/aws/cron#cronargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cron", "title": "Cron", "description": "Reference doc for the `sst.aws.Cron` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:07:58", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/Q3Jvbg%3D%3D.png", "language": "en", "ogLocale": "en", "title": "Cron | SST", "ogTitle": "Cron", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.Cron` component.", "og:site_name": "SST", "og:title": "Cron", "ogDescription": "Reference doc for the `sst.aws.Cron` component.", "description": "Reference doc for the `sst.aws.Cron` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q3Jvbg%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/cron/", "ogUrl": "https://sst.dev/docs/component/aws/cron/", "og:image": "https://social-cards.sst.dev/v3-docs/Q3Jvbg%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "scrapeId": "6751b929-c8a2-4dc6-a8e6-5eccb4501229", "sourceURL": "https://sst.dev/docs/component/aws/cron", "url": "https://sst.dev/docs/component/aws/cron", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Cron\"?\n\nAssistant: Here are some code examples:\n\n### Cron job function example\n```yaml\nnew sst.aws.Cron(\"MyCronJob\", {\n  function: \"src/cron.handler\",\n  schedule: \"rate(1 minute)\"\n});\n```\n\n### Cron job container task example\n```yaml\nconst myCluster = new sst.aws.Cluster(\"MyCluster\");\nconst myTask = new sst.aws.Task(\"MyTask\", { cluster: myCluster });\nnew sst.aws.Cron(\"MyCronJob\", {\n  task: myTask,\n  schedule: \"rate(1 day)\"\n});\n```\n\n### Customize the function example\n```yaml\nnew sst.aws.Cron(\"MyCronJob\", {\n  schedule: \"rate(1 minute)\",\n  function: {\n    handler: \"src/cron.handler\",\n    timeout: \"60 seconds\"\n  }\n});\n```\n\n### Constructor example\n```yaml\nnew Cron(name, args, opts?)\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cron", "title": "Cron", "description": "Reference doc for the `sst.aws.Cron` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:07:58", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/Q3Jvbg%3D%3D.png", "language": "en", "ogLocale": "en", "title": "Cron | SST", "ogTitle": "Cron", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.Cron` component.", "og:site_name": "SST", "og:title": "Cron", "ogDescription": "Reference doc for the `sst.aws.Cron` component.", "description": "Reference doc for the `sst.aws.Cron` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q3Jvbg%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/cron/", "ogUrl": "https://sst.dev/docs/component/aws/cron/", "og:image": "https://social-cards.sst.dev/v3-docs/Q3Jvbg%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "scrapeId": "6751b929-c8a2-4dc6-a8e6-5eccb4501229", "sourceURL": "https://sst.dev/docs/component/aws/cron", "url": "https://sst.dev/docs/component/aws/cron", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Cron\"?\n\nAssistant: Here are the recommended best practices:\n\n• When configuring the cron job, ensure that the schedule is set correctly to avoid unnecessary executions.\n• Use the `enabled` parameter to disable the cron job when not needed, which can save resources.\n• For complex tasks, consider using container tasks for better management and scaling.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cron", "title": "Cron", "description": "Reference doc for the `sst.aws.Cron` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:07:58", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/Q3Jvbg%3D%3D.png", "language": "en", "ogLocale": "en", "title": "Cron | SST", "ogTitle": "Cron", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.Cron` component.", "og:site_name": "SST", "og:title": "Cron", "ogDescription": "Reference doc for the `sst.aws.Cron` component.", "description": "Reference doc for the `sst.aws.Cron` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q3Jvbg%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/cron/", "ogUrl": "https://sst.dev/docs/component/aws/cron/", "og:image": "https://social-cards.sst.dev/v3-docs/Q3Jvbg%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "scrapeId": "6751b929-c8a2-4dc6-a8e6-5eccb4501229", "sourceURL": "https://sst.dev/docs/component/aws/cron", "url": "https://sst.dev/docs/component/aws/cron", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"tRPC on Cloudflare with SST\"?\n\nAssistant: Create and deploy a tRPC API in Cloudflare with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\n\nmkdir my-trpc-app && cd my-trpc-app\n\nnpm init -y\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/cloudflare/trpc", "title": "tRPC on Cloudflare with SST", "description": "Create and deploy a tRPC API in Cloudflare with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:08:05", "type": "overview", "page_metadata": {"og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "og:type": "article", "language": "en", "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "og:description": "Create and deploy a tRPC API in Cloudflare with SST.", "title": "tRPC on Cloudflare with SST | SST", "ogDescription": "Create and deploy a tRPC API in Cloudflare with SST.", "og:title": "tRPC on Cloudflare with SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "description": "Create and deploy a tRPC API in Cloudflare with SST.", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/start/cloudflare/trpc/", "ogImage": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/start/cloudflare/trpc/", "viewport": "width=device-width, initial-scale=1", "ogTitle": "tRPC on Cloudflare with SST", "og:locale": "en", "scrapeId": "50c3e8f1-0ee1-4693-a024-5f08ff1c224d", "sourceURL": "https://sst.dev/docs/start/cloudflare/trpc", "url": "https://sst.dev/docs/start/cloudflare/trpc", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"tRPC on Cloudflare with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nmkdir my-trpc-app && cd my-trpc-app\nnpm init -y\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\nnpm install\n```\n\n### Set the Cloudflare API token\n```yaml\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\nexport CLOUDFLARE_DEFAULT_ACCOUNT_ID=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\n### Add the API\n```yaml\nasync run() {\n\n  const trpc = new sst.cloudflare.Worker(\"Trpc\", {\n\n    url: true,\n\n    handler: \"index.ts\",\n\n  });\n\n  const client = new sst.cloudflare.Worker(\"Client\", {\n\n    url: true,\n\n    link: [trpc],\n\n    handler: \"client.ts\",\n\n  });\n\n  return {\n\n    api: trpc.url,\n\n    client: client.url,\n\n  };\n\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/cloudflare/trpc", "title": "tRPC on Cloudflare with SST", "description": "Create and deploy a tRPC API in Cloudflare with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:08:05", "type": "code_examples", "page_metadata": {"og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "og:type": "article", "language": "en", "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "og:description": "Create and deploy a tRPC API in Cloudflare with SST.", "title": "tRPC on Cloudflare with SST | SST", "ogDescription": "Create and deploy a tRPC API in Cloudflare with SST.", "og:title": "tRPC on Cloudflare with SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "description": "Create and deploy a tRPC API in Cloudflare with SST.", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/start/cloudflare/trpc/", "ogImage": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/start/cloudflare/trpc/", "viewport": "width=device-width, initial-scale=1", "ogTitle": "tRPC on Cloudflare with SST", "og:locale": "en", "scrapeId": "50c3e8f1-0ee1-4693-a024-5f08ff1c224d", "sourceURL": "https://sst.dev/docs/start/cloudflare/trpc", "url": "https://sst.dev/docs/start/cloudflare/trpc", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"tRPC on Cloudflare with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Select the defaults and pick Cloudflare when initializing SST.\n• You can save your Cloudflare API token in a .env file or just set it directly.\n• It's good to create a new stage for production when deploying your app.\n", "metadata": {"source_url": "https://sst.dev/docs/start/cloudflare/trpc", "title": "tRPC on Cloudflare with SST", "description": "Create and deploy a tRPC API in Cloudflare with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:08:05", "type": "best_practices", "page_metadata": {"og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "og:type": "article", "language": "en", "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "og:description": "Create and deploy a tRPC API in Cloudflare with SST.", "title": "tRPC on Cloudflare with SST | SST", "ogDescription": "Create and deploy a tRPC API in Cloudflare with SST.", "og:title": "tRPC on Cloudflare with SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "description": "Create and deploy a tRPC API in Cloudflare with SST.", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/start/cloudflare/trpc/", "ogImage": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQ2xvdWRmbGFyZSUyMHdpdGglMjBTU1Q%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/start/cloudflare/trpc/", "viewport": "width=device-width, initial-scale=1", "ogTitle": "tRPC on Cloudflare with SST", "og:locale": "en", "scrapeId": "50c3e8f1-0ee1-4693-a024-5f08ff1c224d", "sourceURL": "https://sst.dev/docs/start/cloudflare/trpc", "url": "https://sst.dev/docs/start/cloudflare/trpc", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Realtime apps in AWS with SST\"?\n\nAssistant: Use SST to build and deploy a realtime chat app to AWS.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating a Node.js app.\n\n```\n\nnpx create-next-app@latest my-realtime-app\n\ncd my-realtime-app\n```\n\n* * *\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n* * *\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Next.js app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyWeb** in the sidebar and open your Next.js app in your browser.\n\n* * *\n\n## 2. Add Realtime\nLet’s add the `Realtime` component and link it to the Next.js app. Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const realtime = new sst.aws.Realtime(\"MyRealtime\", {\n\n    authorizer: \"authorizer.handler\",\n\n  });\n\n  new sst.aws.Nextjs(\"MyWeb\", {\n\n    link: [realtime],\n\n  });\n\n},\n```\n\nThis component allows us to set up _topics_ that can be subscribed to. The `authorizer` function can be used control who has access to these.\n\n* * *\n\n## Add an authorizer\nAdd the following to a new `authorizer.ts` file in your project root.\n\n```\nimport { Resource } from \"sst\";\n\nimport { realtime } from \"sst/aws/realtime\";\n\nexport const handler = realtime.authorizer(async (token) => {\n\n  const prefix = `${Resource.App.name}/${Resource.App.stage}`;\n\n  const isValid = token === \"PLACEHOLDER_TOKEN\";\n\n  return isValid\n\n    ? {\n\n      publish: [`${prefix}/*`],\n\n      subscribe: [`${prefix}/*`],\n\n    }\n\n    : {\n\n      publish: [],\n\n      subscribe: [],\n\n    };\n\n});\n```\n\nHere we are saying that a user with a valid token has access to publish and subscribe to any topic namespaced user the app and stage name.\n\nIn production, we would validate the given token against our database or auth provider.\n\n* * *\n\n## 3. Create the chat UI\nNow let’s create a chat interface in our app. Create a new component in `components/chat.tsx` with the following.\n\n```\n\"use client\";\n\nimport mqtt from \"mqtt\";\n\nimport { useState, useEffect } from \"react\";\n\nimport styles from \"./chat.module.css\";\n\nexport default function Chat(\n\n  { topic, endpoint, authorizer }: { topic: string, endpoint: string, authorizer: string }\n\n) {\n\n  const [messages, setMessages] = useState<string[]>([]);\n\n  const [connection, setConnection] = useState<mqtt.MqttClient | null>(null);\n\n  return (\n\n    <div className={styles.chat}>\n\n      {connection && messages.length > 0 &&\n\n        <div className={styles.messages}>\n\n          {messages.map((msg, i) => (\n\n            <div key={i}>{msg}</div>\n\n          ))}\n\n        </div>\n\n      }\n\n      <form\n\n        className={styles.form}\n\n        onSubmit={async (e) => {\n\n          e.preventDefault();\n\n          const input = (e.target as HTMLFormElement).message;\n\n          connection!.publish(topic, input.value, { qos: 1 });\n\n          input.value = \"\";\n\n        }}\n\n      >\n\n        <input\n\n          required\n\n          autoFocus\n\n          type=\"text\"\n\n          name=\"message\"\n\n          placeholder={\n\n            connection ? \"Ready! Say hello...\" : \"Connecting...\"\n\n          }\n\n        />\n\n        <button type=\"submit\" disabled={connection === null}>Send</button>\n\n      </form>\n\n    </div>\n\n  );\n}\n```\n\nHere we are going to publish a message that’s submitted to the given topic. We’ll create the realtime connection below.\n\nAdd some styles.\n\n```\n.chat {\n\n  gap: 1rem;\n\n  width: 30rem;\n\n  display: flex;\n\n  padding: 1rem;\n\n  flex-direction: column;\n\n  border-radius: var(--border-radius);\n\n  background-color: rgba(var(--callout-rgb), 0.5);\n\n  border: 1px solid rgba(var(--callout-border-rgb), 0.3);\n\n}\n\n.messages {\n\n  padding-bottom: 0.125rem;\n\n  border-bottom: 1px solid rgba(var(--callout-border-rgb), 0.3);\n\n}\n\n.messages > div {\n\n  line-height: 1.1;\n\n  padding-bottom: 0.625rem;\n\n}\n\n.form {\n\n  display: flex;\n\n  gap: 0.625rem;\n\n}\n\n.form input {\n\n  flex: 1;\n\n  font-size: 0.875rem;\n\n  padding: 0.5rem 0.75rem;\n\n  border-radius: calc(1rem - var(--border-radius));\n\n  border: 1px solid rgba(var(--callout-border-rgb), 1);\n\n}\n\n.form button {\n\n  font-weight: 500;\n\n  font-size: 0.875rem;\n\n  padding: 0.5rem 0.75rem;\n\n  border-radius: calc(1rem - var(--border-radius));\n\n  background: linear-gradient(\n\n    to bottom right,\n\n    rgba(var(--tile-start-rgb), 1),\n\n    rgba(var(--tile-end-rgb), 1)\n\n  );\n\n  border: 1px solid rgba(var(--callout-border-rgb), 1);\n\n}\n\n.form button:active:enabled {\n\n  background: linear-gradient(\n\n    to top left,\n\n    rgba(var(--tile-start-rgb), 1),\n\n    rgba(var(--tile-end-rgb), 1)\n\n  );\n\n}\n```\n\nInstall the npm package.\n\n```\nnpm install mqtt\n```\n\n* * *\n\n## Add to the page\nLet’s use the component in our page. Replace the `Home` component in `app/page.tsx`.\n\n```\nimport { Resource } from \"sst\";\n\nimport Chat from \"@/components/chat\";\n\nconst topic = \"sst-chat\";\n\nexport default function Home() {\n\n  return (\n\n    <main className={styles.main}>\n\n      <div className={styles.center}>\n\n        <Image\n\n          className={styles.logo}\n\n          src=\"/next.svg\"\n\n          alt=\"Next.js Logo\"\n\n          width={180}\n\n          height={37}\n\n          priority\n\n        />\n\n      </div>\n\n      <div>\n\n        <Chat\n\n          endpoint={Resource.MyRealtime.endpoint}\n\n          authorizer={Resource.MyRealtime.authorizer}\n\n          topic={`${Resource.App.name}/${Resource.App.stage}/${topic}`}\n\n        />\n\n      </div>\n\n    </main>\n\n  );\n}\n```\n\nHere we are going to publish and subscribe to a _topic_ called `sst-chat`, namespaced under the name of the app and the stage our app is deployed to.\n\n* * *\n\n## 4. Create a connection\nWhen our chat component loads, it’ll create a new connection to our realtime service. Add the following below the imports in `components/chat.tsx`.\n\n```\nfunction createConnection(endpoint: string, authorizer: string) {\n\n  return mqtt.connect(`wss://${endpoint}/mqtt?x-amz-customauthorizer-name=${authorizer}`, {\n\n    protocolVersion: 5,\n\n    manualConnect: true,\n\n    username: \"\", // Must be empty for the authorizer\n\n    password: \"PLACEHOLDER_TOKEN\", // Passed as the token to the authorizer\n\n    clientId: `client_${window.crypto.randomUUID()}`,\n\n  });\n}\n```\n\nWe are using a _placeholder_ token here. In production this might be a user’s session token.\n\nNow let’s subscribe to it and save the messages we receive. Add this to the `Chat` component.\n\n```\nuseEffect(() => {\n\n  const connection = createConnection(endpoint, authorizer);\n\n  connection.on(\"connect\", async () => {\n\n    try {\n\n      await connection.subscribeAsync(topic, { qos: 1 });\n\n      setConnection(connection);\n\n    } catch (e) { }\n\n  });\n\n  connection.on(\"message\", (_fullTopic, payload) => {\n\n    const message = new TextDecoder(\"utf8\").decode(new Uint8Array(payload));\n\n    setMessages((prev) => [...prev, message]);\n\n  });\n\n  connection.on(\"error\", console.error);\n\n  connection.connect();\n\n  return () => {\n\n    connection.end();\n\n    setConnection(null);\n\n  };\n}, [topic, endpoint, authorizer]);\n```\n\nHead over to the local Next.js app in your browser, `http://localhost:3000` and try **sending a message**, you should see it appear right away. You can also open a new browser window and see them appear in both places.\n\n* * *\n\n## 5. Deploy your app\nNow let’s deploy your app to AWS.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\nCongrats! Your app should now be live!\n\n![SST Realtime Next.js app](https://sst.dev/_astro/sst-realtime-nextjs-app.DL9bW48F_1LaHCl.webp)\n\nNext you can:\n\n- Let users create chat rooms\n- Save them to a database\n- Only show messages from the right chat rooms\n\nThis’ll help you build realtime apps for production.\n\n* * *\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/realtime", "title": "Realtime apps in AWS with SST", "description": "Use SST to build and deploy a realtime chat app to AWS.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:08:48", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWUlMjBhcHBzJTIwaW4lMjBBV1MlMjB3aXRoJTIwU1NU.png", "language": "en", "title": "Realtime apps in AWS with SST | SST", "ogUrl": "https://sst.dev/docs/start/aws/realtime/", "og:site_name": "SST", "ogSiteName": "SST", "og:title": "Realtime apps in AWS with SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogDescription": "Use SST to build and deploy a realtime chat app to AWS.", "ogLocale": "en", "ogTitle": "Realtime apps in AWS with SST", "og:url": "https://sst.dev/docs/start/aws/realtime/", "og:description": "Use SST to build and deploy a realtime chat app to AWS.", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWUlMjBhcHBzJTIwaW4lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:type": "article", "description": "Use SST to build and deploy a realtime chat app to AWS.", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWUlMjBhcHBzJTIwaW4lMjBBV1MlMjB3aXRoJTIwU1NU.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "863bc2a9-d68e-4967-b9bc-8a9e38558196", "sourceURL": "https://sst.dev/docs/start/aws/realtime", "url": "https://sst.dev/docs/start/aws/realtime", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Realtime apps in AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnpx create-next-app@latest my-realtime-app\ncd my-realtime-app\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\nnpm install\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add Realtime component\n```yaml\nasync run() {\n  const realtime = new sst.aws.Realtime(\"MyRealtime\", {\n    authorizer: \"authorizer.handler\",\n  });\n  new sst.aws.Nextjs(\"MyWeb\", {\n    link: [realtime],\n  });\n},\n```\n\n### Add an authorizer\n```yaml\nimport { Resource } from \"sst\";\nimport { realtime } from \"sst/aws/realtime\";\nexport const handler = realtime.authorizer(async (token) => {\n  const prefix = `${Resource.App.name}/${Resource.App.stage}`;\n  const isValid = token === \"PLACEHOLDER_TOKEN\";\n  return isValid\n    ? {\n      publish: [`${prefix}/*`],\n      subscribe: [`${prefix}/*`],\n    }\n    : {\n      publish: [],\n      subscribe: [],\n    };\n});\n```\n\n### Create the chat UI\n```yaml\n\"use client\";\nimport mqtt from \"mqtt\";\nimport { useState, useEffect } from \"react\";\nimport styles from \"./chat.module.css\";\nexport default function Chat(\n  { topic, endpoint, authorizer }: { topic: string, endpoint: string, authorizer: string }\n) {\n  const [messages, setMessages] = useState<string[]>([]);\n  const [connection, setConnection] = useState<mqtt.MqttClient | null>(null);\n  return (\n    <div className={styles.chat}>\n      {connection && messages.length > 0 &&\n        <div className={styles.messages}>\n          {messages.map((msg, i) => (\n            <div key={i}>{msg}</div>\n          ))}\n        </div>\n      }\n      <form\n        className={styles.form}\n        onSubmit={async (e) => {\n          e.preventDefault();\n          const input = (e.target as HTMLFormElement).message;\n          connection!.publish(topic, input.value, { qos: 1 });\n          input.value = \"\";\n        }}\n      >\n        <input\n          required\n          autoFocus\n          type=\"text\"\n          name=\"message\"\n          placeholder={\n            connection ? \"Ready! Say hello...\" : \"Connecting...\"\n          }\n        />\n        <button type=\"submit\" disabled={connection === null}>Send</button>\n      </form>\n    </div>\n  );\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/realtime", "title": "Realtime apps in AWS with SST", "description": "Use SST to build and deploy a realtime chat app to AWS.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:08:48", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWUlMjBhcHBzJTIwaW4lMjBBV1MlMjB3aXRoJTIwU1NU.png", "language": "en", "title": "Realtime apps in AWS with SST | SST", "ogUrl": "https://sst.dev/docs/start/aws/realtime/", "og:site_name": "SST", "ogSiteName": "SST", "og:title": "Realtime apps in AWS with SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogDescription": "Use SST to build and deploy a realtime chat app to AWS.", "ogLocale": "en", "ogTitle": "Realtime apps in AWS with SST", "og:url": "https://sst.dev/docs/start/aws/realtime/", "og:description": "Use SST to build and deploy a realtime chat app to AWS.", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWUlMjBhcHBzJTIwaW4lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:type": "article", "description": "Use SST to build and deploy a realtime chat app to AWS.", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWUlMjBhcHBzJTIwaW4lMjBBV1MlMjB3aXRoJTIwU1NU.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "863bc2a9-d68e-4967-b9bc-8a9e38558196", "sourceURL": "https://sst.dev/docs/start/aws/realtime", "url": "https://sst.dev/docs/start/aws/realtime", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Realtime apps in AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• In production, validate the given token against your database or auth provider.\n• Consider creating a new stage for production when deploying your app.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/realtime", "title": "Realtime apps in AWS with SST", "description": "Use SST to build and deploy a realtime chat app to AWS.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:08:48", "type": "best_practices", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWUlMjBhcHBzJTIwaW4lMjBBV1MlMjB3aXRoJTIwU1NU.png", "language": "en", "title": "Realtime apps in AWS with SST | SST", "ogUrl": "https://sst.dev/docs/start/aws/realtime/", "og:site_name": "SST", "ogSiteName": "SST", "og:title": "Realtime apps in AWS with SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogDescription": "Use SST to build and deploy a realtime chat app to AWS.", "ogLocale": "en", "ogTitle": "Realtime apps in AWS with SST", "og:url": "https://sst.dev/docs/start/aws/realtime/", "og:description": "Use SST to build and deploy a realtime chat app to AWS.", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWUlMjBhcHBzJTIwaW4lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:type": "article", "description": "Use SST to build and deploy a realtime chat app to AWS.", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWUlMjBhcHBzJTIwaW4lMjBBV1MlMjB3aXRoJTIwU1NU.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "863bc2a9-d68e-4967-b9bc-8a9e38558196", "sourceURL": "https://sst.dev/docs/start/aws/realtime", "url": "https://sst.dev/docs/start/aws/realtime", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Analog\"?\n\nAssistant: Reference doc for the `sst.aws.Analog` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\nDeploy a Analog app that’s in the project root.\n\n```\n\nnew sst.aws.Analog(\"MyWeb\");\n```\n\n\n## Change the path\nDeploys the Analog app in the `my-analog-app/` directory.\n\n```\nnew sst.aws.Analog(\"MyWeb\", {\n\n  path: \"my-analog-app/\"\n\n});\n```\n\n\n## Add a custom domain\nSet a custom domain for your Analog app.\n\n```\nnew sst.aws.Analog(\"MyWeb\", {\n\n  domain: \"my-app.com\"\n\n});\n```\n\n\n## Redirect www to apex domain\nRedirect `www.my-app.com` to `my-app.com`.\n\n```\nnew sst.aws.Analog(\"MyWeb\", {\n\n  domain: {\n\n    name: \"my-app.com\",\n\n    redirects: [\"www.my-app.com\"]\n\n  }\n\n});\n```\n\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your Analog app. This will grant permissions to the resources and allow you to access it in your app.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Analog(\"MyWeb\", {\n\n  link: [bucket]\n\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your Analog app.\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n\n## Constructor\n```\nnew Analog(name, args?, opts?)\n```\n\n\n## Parameters\n- `name` `string`\n\n- `args?` [`AnalogArgs`](https://sst.dev/docs/component/aws/analog#analogargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/analog", "title": "Analog", "description": "Reference doc for the `sst.aws.Analog` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:09:00", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9n.png", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.aws.Analog` component.", "description": "Reference doc for the `sst.aws.Analog` component.", "og:url": "https://sst.dev/docs/component/aws/analog/", "ogTitle": "Analog", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.Analog` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QW5hbG9n.png", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9n.png", "language": "en", "og:title": "Analog", "title": "Analog | SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/analog/", "scrapeId": "6d3e3890-08bb-4a6a-9555-528925fe811c", "sourceURL": "https://sst.dev/docs/component/aws/analog", "url": "https://sst.dev/docs/component/aws/analog", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Analog\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nnew sst.aws.Analog(\"MyWeb\");\n```\n\n### Change the path\n```yaml\nnew sst.aws.Analog(\"MyWeb\", {\n  path: \"my-analog-app/\"\n});\n```\n\n### Add a custom domain\n```yaml\nnew sst.aws.Analog(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Redirect www to apex domain\n```yaml\nnew sst.aws.Analog(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nnew sst.aws.Analog(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### Access linked resources\n```yaml\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyBucket.name);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/analog", "title": "Analog", "description": "Reference doc for the `sst.aws.Analog` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:09:00", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9n.png", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.aws.Analog` component.", "description": "Reference doc for the `sst.aws.Analog` component.", "og:url": "https://sst.dev/docs/component/aws/analog/", "ogTitle": "Analog", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.Analog` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QW5hbG9n.png", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9n.png", "language": "en", "og:title": "Analog", "title": "Analog | SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/analog/", "scrapeId": "6d3e3890-08bb-4a6a-9555-528925fe811c", "sourceURL": "https://sst.dev/docs/component/aws/analog", "url": "https://sst.dev/docs/component/aws/analog", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Analog\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the SDK to access linked resources in your Analog app.\n• Configure the Analog app assets for optimal performance by setting appropriate cache headers.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/analog", "title": "Analog", "description": "Reference doc for the `sst.aws.Analog` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:09:00", "type": "best_practices", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9n.png", "twitter:card": "summary_large_image", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.aws.Analog` component.", "description": "Reference doc for the `sst.aws.Analog` component.", "og:url": "https://sst.dev/docs/component/aws/analog/", "ogTitle": "Analog", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.Analog` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QW5hbG9n.png", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9n.png", "language": "en", "og:title": "Analog", "title": "Analog | SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/analog/", "scrapeId": "6d3e3890-08bb-4a6a-9555-528925fe811c", "sourceURL": "https://sst.dev/docs/component/aws/analog", "url": "https://sst.dev/docs/component/aws/analog", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Nuxt on AWS with SST\"?\n\nAssistant: Create and deploy a Nuxt app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## Serverless\nWe are going to create a Nuxt app, add an S3 Bucket for file uploads, and deploy it using the `Nuxt` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\n\nnpx nuxi@latest init aws-nuxt\n\ncd aws-nuxt\n```\n\nWe are picking the **npm** as the package manager.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\nIt’ll also ask you to update your `nuxt.config.ts` with something like this.\n\n```\nexport default defineNuxtConfig({\n\n  compatibilityDate: '2024-04-03',\n\n  nitro: {\n\n    preset: 'aws-lambda'\n\n  },\n\n  devtools: { enabled: true }\n\n})\n```\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Nuxt app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyWeb** in the sidebar and open your Nuxt app in your browser.\n\n## 2. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this above the `Nuxt` component.\n\n## Link the bucket\nNow, link the bucket to our Nuxt app.\n\n```\nnew sst.aws.Nuxt(\"MyWeb\", {\n\n  link: [bucket],\n\n});\n```\n\n## 3. Generate a pre-signed URL\nWhen our app loads, we’ll call an API that’ll generate a pre-signed URL for the file upload. Create a new `server/api/presigned.ts` with the following.\n\n```\nexport default defineEventHandler(async () => {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return await getSignedUrl(new S3Client({}), command);\n})\n```\n\nAdd the relevant imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n## 4. Create an upload form\nAdd a form to upload files to the presigned URL. Replace our `app.vue` with:\n\n```\n<script setup>\n\n  const file = ref(null);\n\n  const { data } = await useFetch('/api/presigned');\n\n  async function onSubmit() {\n\n    const upload = file.value.files[0];\n\n    const image = await fetch(data.value, {\n\n      body: upload,\n\n      method: \"PUT\",\n\n      headers: {\n\n        \"Content-Type\": upload.type,\n\n        \"Content-Disposition\": `attachment; filename=\"${upload.name}\"`,\n\n      },\n\n    });\n\n    window.location.href = image.url.split(\"?\")[0];\n\n  }\n</script>\n\n<template>\n\n  <form novalidate @submit.prevent=\"onSubmit\">\n\n    <input type=\"file\" ref=\"file\" accept=\"image/png, image/jpeg\" />\n\n    <button type=\"submit\">Upload</button>\n\n  </form>\n</template>\n```\n\nHead over to the local app in your browser, `http://localhost:3000` and try **uploading an image**. You should see it upload and then download the image.\n\n## 5. Deploy your app\nNow let’s deploy your app to AWS.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\nCongrats! Your site should now be live!\n\n## Containers\nWe are going to build a hit counter Nuxt app with Redis. We’ll deploy it to AWS in a container using the `Cluster` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\nnpx nuxi@latest init aws-nuxt-container\n\ncd aws-nuxt-container\n```\n\nWe are picking the **npm** as the package manager.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\nIt’ll also ask you to update your `nuxt.config.ts`. But instead we’ll use the **default Node preset**.\n\n```\nexport default defineNuxtConfig({\n\n  compatibilityDate: '2024-11-01',\n\n  devtools: { enabled: true }\n\n})\n```\n\n## 2. Add a Cluster\nTo deploy our Nuxt app in a container, we’ll use [AWS Fargate](https://aws.amazon.com/fargate/) with [Amazon ECS](https://aws.amazon.com/ecs/). Replace the `run` function in your `sst.config.ts`.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\nThis creates a VPC with a bastion host, an ECS Cluster, and adds a Fargate service to it.\n\nThe `dev.command` tells SST to instead run our Nuxt app locally in dev mode.\n\n## 3. Add Redis\nLet’s add an [Amazon ElastiCache](https://aws.amazon.com/elasticache/) Redis cluster. Add this below the `Vpc` component in your `sst.config.ts`.\n\n```\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\n```\n\n## Link Redis\nNow, link the Redis cluster to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [redis],\n\n});\n```\n\nThis will allow us to reference the Redis cluster in our Nuxt app.\n\n## Install a tunnel\nSince our Redis cluster is in a VPC, we’ll need a tunnel to connect to it from our local machine.\n\n```\nsudo npx sst tunnel install\n```\n\nThis needs _sudo_ to create a network interface on your machine. You’ll only need to do this once on your machine.\n\n## Start dev mode\nStart your app in dev mode.\n\n```\nnpx sst dev\n```\n\nThis will deploy your app, start a tunnel in the **Tunnel** tab, and run your Nuxt app locally in the **MyServiceDev** tab.\n\n## 4. Connect to Redis\nWe want the `/` route to increment a counter in our Redis cluster. Let’s start by installing the npm package we’ll use.\n\n```\nnpm install ioredis\n```\n\nWe’ll call an API that’ll increment the counter when the app loads. Create a new `server/api/counter.ts` with the following.\n\n```\nimport { Resource } from \"sst\";\n\nimport { Cluster } from \"ioredis\";\n\nconst redis = new Cluster(\n\n  [{ host: Resource.MyRedis.host, port: Resource.MyRedis.port }],\n\n  {\n\n    dnsLookup: (address, callback) => callback(null, address),\n\n    redisOptions: {\n\n      tls: {},\n\n      username: Resource.MyRedis.username,\n\n      password: Resource.MyRedis.password,\n\n    },\n\n  }\n);\n\nexport default defineEventHandler(async () => {\n\n  return await redis.incr(\"counter\");\n})\n```\n\nLet’s update our component to show the counter. Replace our `app.vue` with:\n\n```\n<script setup lang=\"ts\">\n\nconst { data: counter } = await useFetch(\"/api/counter\")\n\n</script>\n\n<template>\n\n  <p>Hit counter: {{ counter }}</p>\n</template>\n```\n\n## Test your app\nLet’s head over to `http://localhost:3000` in your browser and it’ll show the current hit counter.\n\nYou should see it increment every time you **refresh the page**.\n\n## 5. Deploy your app\nTo deploy our app we’ll add a `Dockerfile`.\n\nView Dockerfile\n\n```\nFROM node:lts AS base\n\nWORKDIR /src\n\n# Build\n\nFROM base as build\n\nCOPY --link package.json package-lock.json ./\n\nRUN npm install\n\nCOPY --link . .\n\nRUN npm run build\n\n# Run\n\nFROM base\n\nENV PORT=3000\n\nENV NODE_ENV=production\n\nCOPY --from=build /src/.output /src/.output\n\nCMD [ \"node\", \".output/server/index.mjs\" ]\n```\n\nLet’s also add a `.dockerignore` file in the root.\n\n```\nnode_modules\n```\n\nNow to build our Docker image and deploy we run:\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\nCongrats! Your app should now be live!\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/nuxt", "title": "Nuxt on AWS with SST", "description": "Create and deploy a Nuxt app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-27 21:09:42", "type": "overview", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/TnV4dCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/TnV4dCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "title": "Nuxt on AWS with SST | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/TnV4dCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:site_name": "SST", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Create and deploy a Nuxt app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/nuxt/", "og:title": "Nuxt on AWS with SST", "description": "Create and deploy a Nuxt app to AWS with SST.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/start/aws/nuxt/", "og:description": "Create and deploy a Nuxt app to AWS with SST.", "ogLocale": "en", "language": "en", "ogTitle": "Nuxt on AWS with SST", "ogSiteName": "SST", "og:type": "article", "scrapeId": "7e6b4e57-742d-4542-b28a-d4d3305df08f", "sourceURL": "https://sst.dev/docs/start/aws/nuxt", "url": "https://sst.dev/docs/start/aws/nuxt", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Nuxt on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnpx nuxi@latest init aws-nuxt\n\ncd aws-nuxt\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Update nuxt.config.ts\n```yaml\nexport default defineNuxtConfig({\n\n  compatibilityDate: '2024-04-03',\n\n  nitro: {\n\n    preset: 'aws-lambda'\n\n  },\n\n  devtools: { enabled: true }\n\n})\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\n### Link the bucket\n```yaml\nnew sst.aws.Nuxt(\"MyWeb\", {\n\n  link: [bucket],\n\n});\n```\n\n### Generate a pre-signed URL\n```yaml\nexport default defineEventHandler(async () => {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return await getSignedUrl(new S3Client({}), command);\n})\n```\n\n### Add imports\n```yaml\nimport { Resource } from \"sst\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\n### Install npm packages\n```yaml\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n### Create an upload form\n```yaml\n<script setup>\n\n  const file = ref(null);\n\n  const { data } = await useFetch('/api/presigned');\n\n  async function onSubmit() {\n\n    const upload = file.value.files[0];\n\n    const image = await fetch(data.value, {\n\n      body: upload,\n\n      method: \"PUT\",\n\n      headers: {\n\n        \"Content-Type\": upload.type,\n\n        \"Content-Disposition\": `attachment; filename=\"${upload.name}\"`,\n\n      },\n\n    });\n\n    window.location.href = image.url.split(\"?\")[0];\n\n  }\n</script>\n\n<template>\n\n  <form novalidate @submit.prevent=\"onSubmit\">\n\n    <input type=\"file\" ref=\"file\" accept=\"image/png, image/jpeg\" />\n\n    <button type=\"submit\">Upload</button>\n\n  </form>\n</template>\n```\n\n### Deploy your app\n```yaml\nnpx sst deploy --stage production\n```\n\n### Create a project for containers\n```yaml\nnpx nuxi@latest init aws-nuxt-container\n\ncd aws-nuxt-container\n```\n\n### Add a Cluster\n```yaml\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\n### Add Redis\n```yaml\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\n```\n\n### Link Redis\n```yaml\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [redis],\n\n});\n```\n\n### Install a tunnel\n```yaml\nsudo npx sst tunnel install\n```\n\n### Start dev mode for containers\n```yaml\nnpx sst dev\n```\n\n### Connect to Redis\n```yaml\nimport { Resource } from \"sst\";\n\nimport { Cluster } from \"ioredis\";\n\nconst redis = new Cluster(\n\n  [{ host: Resource.MyRedis.host, port: Resource.MyRedis.port }],\n\n  {\n\n    dnsLookup: (address, callback) => callback(null, address),\n\n    redisOptions: {\n\n      tls: {},\n\n      username: Resource.MyRedis.username,\n\n      password: Resource.MyRedis.password,\n\n    },\n\n  }\n);\n\nexport default defineEventHandler(async () => {\n\n  return await redis.incr(\"counter\");\n})\n```\n\n### Update app.vue for counter\n```yaml\n<script setup lang=\"ts\">\n\nconst { data: counter } = await useFetch(\"/api/counter\")\n\n</script>\n\n<template>\n\n  <p>Hit counter: {{ counter }}</p>\n</template>\n```\n\n### Deploy your app with Docker\n```yaml\nFROM node:lts AS base\n\nWORKDIR /src\n\n# Build\n\nFROM base as build\n\nCOPY --link package.json package-lock.json ./\n\nRUN npm install\n\nCOPY --link . .\n\nRUN npm run build\n\n# Run\n\nFROM base\n\nENV PORT=3000\n\nENV NODE_ENV=production\n\nCOPY --from=build /src/.output /src/.output\n\nCMD [ \"node\", \".output/server/index.mjs\" ]\n```\n\n### Add .dockerignore\n```yaml\nnode_modules\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/nuxt", "title": "Nuxt on AWS with SST", "description": "Create and deploy a Nuxt app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-27 21:09:42", "type": "code_examples", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/TnV4dCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/TnV4dCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "title": "Nuxt on AWS with SST | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/TnV4dCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:site_name": "SST", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Create and deploy a Nuxt app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/nuxt/", "og:title": "Nuxt on AWS with SST", "description": "Create and deploy a Nuxt app to AWS with SST.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/start/aws/nuxt/", "og:description": "Create and deploy a Nuxt app to AWS with SST.", "ogLocale": "en", "language": "en", "ogTitle": "Nuxt on AWS with SST", "ogSiteName": "SST", "og:type": "article", "scrapeId": "7e6b4e57-742d-4542-b28a-d4d3305df08f", "sourceURL": "https://sst.dev/docs/start/aws/nuxt", "url": "https://sst.dev/docs/start/aws/nuxt", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Nuxt on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• It's good to create a new stage for production when deploying your app.\n• You only need to install the tunnel once on your machine.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/nuxt", "title": "Nuxt on AWS with SST", "description": "Create and deploy a Nuxt app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-27 21:09:42", "type": "best_practices", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/TnV4dCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/TnV4dCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "title": "Nuxt on AWS with SST | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/TnV4dCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:site_name": "SST", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Create and deploy a Nuxt app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/nuxt/", "og:title": "Nuxt on AWS with SST", "description": "Create and deploy a Nuxt app to AWS with SST.", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/start/aws/nuxt/", "og:description": "Create and deploy a Nuxt app to AWS with SST.", "ogLocale": "en", "language": "en", "ogTitle": "Nuxt on AWS with SST", "ogSiteName": "SST", "og:type": "article", "scrapeId": "7e6b4e57-742d-4542-b28a-d4d3305df08f", "sourceURL": "https://sst.dev/docs/start/aws/nuxt", "url": "https://sst.dev/docs/start/aws/nuxt", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Next.js on AWS with SST\"?\n\nAssistant: Create and deploy a Next.js app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## Introduction\nThere are two ways to deploy a Next.js app to AWS with SST.\n\n1. Serverless with OpenNext\n2. Containers with Docker\n\nWe’ll use both to build a couple of simple apps below.\n\n## Examples\nWe also have a few other Next.js examples that you can refer to.\n\n- Adding basic auth to your Next.js app\n- Enabling streaming in your Next.js app\n- Add additional routes to the Next.js CDN\n- Hit counter with Redis and Next.js in a container.\n\n## Serverless\nWe are going to create a Next.js app, add an S3 Bucket for file uploads, and deploy it using OpenNext and the Nextjs component.\n\nBefore you get started, make sure to configure your AWS credentials.\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\nnpx create-next-app@latest aws-nextjs\n\ncd aws-nextjs\n```\n\nWe are picking TypeScript and not selecting ESLint.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n```\n\nSelect the defaults and pick AWS. This’ll create a sst.config.ts file in your project root.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Next.js app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on MyWeb in the sidebar and open your Next.js app in your browser.\n\n## 2. Add an S3 Bucket\nLet’s allow public access to our S3 Bucket for file uploads. Update your sst.config.ts.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this above the Nextjs component.\n\n## Link the bucket\nNow, link the bucket to our Next.js app.\n\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n\n  link: [bucket]\n\n});\n```\n\n## 3. Create an upload form\nAdd a form client component in components/form.tsx.\n\n```\n\"use client\";\n\nimport styles from \"./form.module.css\";\n\nexport default function Form({ url }: { url: string }) {\n\n  return (\n\n    <form\n\n      className={styles.form}\n\n      onSubmit={async (e) => {\n\n        e.preventDefault();\n\n        const file = (e.target as HTMLFormElement).file.files?.[0] ?? null;\n\n        const image = await fetch(url, {\n\n          body: file,\n\n          method: \"PUT\",\n\n          headers: {\n\n            \"Content-Type\": file.type,\n\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n          },\n\n        });\n\n        window.location.href = image.url.split(\"?\")[0];\n\n      }}\n\n    >\n\n      <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n\n      <button type=\"submit\">Upload</button>\n\n    </form>\n\n  );\n}\n```\n\nAdd some styles.\n\n```\n.form {\n\n  padding: 2rem;\n\n  border-radius: 0.5rem;\n\n  background-color: var(--gray-alpha-100);\n\n}\n\n.form input {\n\n  margin-right: 1rem;\n\n}\n\n.form button {\n\n  appearance: none;\n\n  padding: 0.5rem 0.75rem;\n\n  font-weight: 500;\n\n  font-size: 0.875rem;\n\n  border-radius: 0.375rem;\n\n  background-color: transparent;\n\n  font-family: var(--font-geist-sans);\n\n  border: 1px solid var(--gray-alpha-200);\n\n}\n\n.form button:active:enabled {\n\n  background-color: var(--gray-alpha-200);\n\n}\n```\n\n## 4. Generate a pre-signed URL\nWhen our app loads, we’ll generate a pre-signed URL for the file upload and render the form with it. Replace your Home component in app/page.tsx.\n\n```\nexport const dynamic = \"force-dynamic\";\n\nexport default async function Home() {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return (\n\n    <div className={styles.page}>\n\n      <main className={styles.main}>\n\n        <Form url={url} />\n\n      </main>\n\n    </div>\n\n  );\n}\n```\n\nWe need the force-dynamic because we don’t want Next.js to cache the pre-signed URL.\n\nAdd the relevant imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport Form from \"@/components/form\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n## Test your app\nHead over to the local Next.js app in your browser, http://localhost:3000 and try uploading an image. You should see it upload and then download the image.\n\n## 5. Deploy your app\nNow let’s deploy your app to AWS.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Containers\nWe are going to create a Next.js app, add an S3 Bucket for file uploads, and deploy it in a container with the Cluster component.\n\nBefore you get started, make sure to configure your AWS credentials.\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\nnpx create-next-app@latest aws-nextjs-container\n\ncd aws-nextjs-container\n```\n\nWe are picking TypeScript and not selecting ESLint.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n```\n\nSelect the defaults and pick AWS. This’ll create a sst.config.ts file in your project root.\n\n## 2. Add a Service\nTo deploy our Next.js app in a container, we’ll use AWS Fargate with Amazon ECS. Replace the run function in your sst.config.ts.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\nThis creates a VPC, and an ECS Cluster with a Fargate service in it.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Next.js app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on MyService in the sidebar and open your Next.js app in your browser.\n\n## 3. Add an S3 Bucket\nLet’s allow public access to our S3 Bucket for file uploads. Update your sst.config.ts.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this below the Vpc component.\n\n## Link the bucket\nNow, link the bucket to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [bucket],\n});\n```\n\n## 4. Create an upload form\nAdd a form client component in components/form.tsx.\n\n```\n\"use client\";\n\nimport styles from \"./form.module.css\";\n\nexport default function Form({ url }: { url: string }) {\n\n  return (\n\n    <form\n\n      className={styles.form}\n\n      onSubmit={async (e) => {\n\n        e.preventDefault();\n\n        const file = (e.target as HTMLFormElement).file.files?.[0] ?? null;\n\n        const image = await fetch(url, {\n\n          body: file,\n\n          method: \"PUT\",\n\n          headers: {\n\n            \"Content-Type\": file.type,\n\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n          },\n\n        });\n\n        window.location.href = image.url.split(\"?\")[0];\n\n      }}\n\n    >\n\n      <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n\n      <button type=\"submit\">Upload</button>\n\n    </form>\n\n  );\n}\n```\n\nAdd some styles.\n\n```\n.form {\n\n  padding: 2rem;\n\n  border-radius: 0.5rem;\n\n  background-color: var(--gray-alpha-100);\n\n}\n\n.form input {\n\n  margin-right: 1rem;\n\n}\n\n.form button {\n\n  appearance: none;\n\n  padding: 0.5rem 0.75rem;\n\n  font-weight: 500;\n\n  font-size: 0.875rem;\n\n  border-radius: 0.375rem;\n\n  background-color: transparent;\n\n  font-family: var(--font-geist-sans);\n\n  border: 1px solid var(--gray-alpha-200);\n\n}\n\n.form button:active:enabled {\n\n  background-color: var(--gray-alpha-200);\n\n}\n```\n\n## 5. Generate a pre-signed URL\nWhen our app loads, we’ll generate a pre-signed URL for the file upload and render the form with it. Replace your Home component in app/page.tsx.\n\n```\nexport const dynamic = \"force-dynamic\";\n\nexport default async function Home() {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return (\n\n    <div className={styles.page}>\n\n      <main className={styles.main}>\n\n        <Form url={url} />\n\n      </main>\n\n    </div>\n\n  );\n}\n```\n\nWe need the force-dynamic because we don’t want Next.js to cache the pre-signed URL.\n\nAdd the relevant imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport Form from \"@/components/form\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n## Test your app\nHead over to the local Next.js app in your browser, http://localhost:3000 and try uploading an image. You should see it upload and then download the image.\n\n## 6. Deploy your app\nTo build our app for production, we’ll enable Next.js’s standalone output. Let’s update our next.config.mjs.\n\n```\nconst nextConfig: NextConfig = {\n\n  /* config options here */\n\n  output: \"standalone\"\n\n};\n```\n\nNow to deploy our app we’ll add a Dockerfile.\n\n```\nFROM node:lts-alpine AS base\n\n# Stage 1: Install dependencies\n\nFROM base AS deps\n\nWORKDIR /app\n\nCOPY package.json package-lock.json* ./\n\nCOPY sst-env.d.ts* ./\n\nRUN npm ci\n\n# Stage 2: Build the application\n\nFROM base AS builder\n\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules ./node_modules\n\nCOPY . .\n\n# If static pages need linked resources\n\n# ARG SST_RESOURCE_MyResource\n\nRUN npm run build\n\n# Stage 3: Production server\n\nFROM base AS runner\n\nWORKDIR /app\n\nENV NODE_ENV=production\n\nCOPY --from=builder /app/.next/standalone ./\n\nCOPY --from=builder /app/.next/static ./.next/static\n\nEXPOSE 3000\n\nCMD [\"node\", \"server.js\"]\n```\n\nThis builds our Next.js app in a Docker image.\n\nIf your Next.js app is building static pages that need linked resources, you can need to declare them in your Dockerfile. For example, if we need the linked MyBucket component from above.\n\n```\nARG SST_RESOURCE_MyBucket\n```\n\nYou’ll need to do this for each linked resource.\n\nLet’s also add a .dockerignore file in the root.\n\n```\n.git\n\n.next\n\nnode_modules\n```\n\nNow to build our Docker image and deploy we run:\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Connect the console\nAs a next step, you can setup the SST Console to git push to deploy your app and view logs from it.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/nextjs", "title": "Next.js on AWS with SST", "description": "Create and deploy a Next.js app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-02-27 21:10:29", "type": "overview", "page_metadata": {"description": "Create and deploy a Next.js app to AWS with SST.", "og:image": "https://social-cards.sst.dev/v3-docs/TmV4dC5qcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:site_name": "SST", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/TmV4dC5qcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogLocale": "en", "ogDescription": "Create and deploy a Next.js app to AWS with SST.", "og:title": "Next.js on AWS with SST", "og:type": "article", "og:description": "Create and deploy a Next.js app to AWS with SST.", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/start/aws/nextjs/", "twitter:image": "https://social-cards.sst.dev/v3-docs/TmV4dC5qcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:url": "https://sst.dev/docs/start/aws/nextjs/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Next.js on AWS with SST", "title": "Next.js on AWS with SST | SST", "scrapeId": "f3f90230-6ae7-489b-9bfc-f5fcccae6042", "sourceURL": "https://sst.dev/docs/start/aws/nextjs", "url": "https://sst.dev/docs/start/aws/nextjs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Next.js on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a Next.js app\n```yaml\nnpx create-next-app@latest aws-nextjs\n\ncd aws-nextjs\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\n### Link the bucket\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n\n  link: [bucket]\n\n});\n```\n\n### Create an upload form\n```yaml\n\"use client\";\n\nimport styles from \"./form.module.css\";\n\nexport default function Form({ url }: { url: string }) {\n\n  return (\n\n    <form\n\n      className={styles.form}\n\n      onSubmit={async (e) => {\n\n        e.preventDefault();\n\n        const file = (e.target as HTMLFormElement).file.files?.[0] ?? null;\n\n        const image = await fetch(url, {\n\n          body: file,\n\n          method: \"PUT\",\n\n          headers: {\n\n            \"Content-Type\": file.type,\n\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n          },\n\n        });\n\n        window.location.href = image.url.split(\"?\")[0];\n\n      }}\n\n    >\n\n      <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n\n      <button type=\"submit\">Upload</button>\n\n    </form>\n\n  );\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/nextjs", "title": "Next.js on AWS with SST", "description": "Create and deploy a Next.js app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-02-27 21:10:29", "type": "code_examples", "page_metadata": {"description": "Create and deploy a Next.js app to AWS with SST.", "og:image": "https://social-cards.sst.dev/v3-docs/TmV4dC5qcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:site_name": "SST", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/TmV4dC5qcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogLocale": "en", "ogDescription": "Create and deploy a Next.js app to AWS with SST.", "og:title": "Next.js on AWS with SST", "og:type": "article", "og:description": "Create and deploy a Next.js app to AWS with SST.", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/start/aws/nextjs/", "twitter:image": "https://social-cards.sst.dev/v3-docs/TmV4dC5qcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:url": "https://sst.dev/docs/start/aws/nextjs/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Next.js on AWS with SST", "title": "Next.js on AWS with SST | SST", "scrapeId": "f3f90230-6ae7-489b-9bfc-f5fcccae6042", "sourceURL": "https://sst.dev/docs/start/aws/nextjs", "url": "https://sst.dev/docs/start/aws/nextjs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Next.js on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• It's good to create a new stage for production when deploying your app.\n• If your Next.js app is building static pages that need linked resources, declare them in your Dockerfile.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/nextjs", "title": "Next.js on AWS with SST", "description": "Create and deploy a Next.js app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 24, "timestamp": "2025-02-27 21:10:29", "type": "best_practices", "page_metadata": {"description": "Create and deploy a Next.js app to AWS with SST.", "og:image": "https://social-cards.sst.dev/v3-docs/TmV4dC5qcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:site_name": "SST", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/TmV4dC5qcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogLocale": "en", "ogDescription": "Create and deploy a Next.js app to AWS with SST.", "og:title": "Next.js on AWS with SST", "og:type": "article", "og:description": "Create and deploy a Next.js app to AWS with SST.", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/start/aws/nextjs/", "twitter:image": "https://social-cards.sst.dev/v3-docs/TmV4dC5qcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:url": "https://sst.dev/docs/start/aws/nextjs/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Next.js on AWS with SST", "title": "Next.js on AWS with SST | SST", "scrapeId": "f3f90230-6ae7-489b-9bfc-f5fcccae6042", "sourceURL": "https://sst.dev/docs/start/aws/nextjs", "url": "https://sst.dev/docs/start/aws/nextjs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"SolidStart on AWS with SST\"?\n\nAssistant: Create and deploy a SolidStart app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## Serverless\nWe are going to create a SolidStart app, add an S3 Bucket for file uploads, and deploy it using the `SolidStart` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\n\nnpm init solid@latest aws-solid-start\n\ncd aws-solid-start\n```\n\nWe are picking the **SolidStart**, **_basic_**, and **_TypeScript_** options.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\nIt’ll also ask you to update your `app.config.ts` with something like this.\n\n```\nexport default defineConfig({\n\n  server: {\n\n    preset: \"aws-lambda\",\n\n    awsLambda: {\n\n      streaming: true,\n\n    },\n\n  },\n\n});\n```\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your SolidStart app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyWeb** in the sidebar and open your SolidStart app in your browser.\n\n## 2. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this above the `SolidStart` component.\n\n## Link the bucket\nNow, link the bucket to our SolidStart app.\n\n```\nnew sst.aws.SolidStart(\"MyWeb\", {\n\n  link: [bucket],\n\n});\n```\n\n## 3. Generate a pre-signed URL\nWhen our app loads, we’ll generate a pre-signed URL for the file upload and use it in our form. Add this below the imports in `src/routes/index.tsx`.\n\n```\nasync function presignedUrl() {\n\n  \"use server\";\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return await getSignedUrl(new S3Client({}), command);\n}\n\nexport const route = {\n\n  load: () => presignedUrl(),\n\n};\n```\n\nAdd the relevant imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport { createAsync } from \"@solidjs/router\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install @solidjs/router @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n## 4. Create an upload form\nAdd a form to upload files to the presigned URL. Replace the `Home` component in `src/routes/index.tsx` with:\n\n```\nexport default function Home() {\n\n  const url = createAsync(() => presignedUrl());\n\n  return (\n\n    <main>\n\n      <h1>Hello world!</h1>\n\n      <form\n\n        onSubmit={async (e) => {\n\n          e.preventDefault();\n\n          const file = (e.target as HTMLFormElement).file.files?.[0]!;\n\n          const image = await fetch(url() as string, {\n\n            body: file,\n\n            method: \"PUT\",\n\n            headers: {\n\n              \"Content-Type\": file.type,\n\n              \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n            },\n\n          });\n\n          window.location.href = image.url.split(\"?\")[0];\n\n        }}\n\n      >\n\n        <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n\n        <button type=\"submit\">Upload</button>\n\n      </form>\n\n    </main>\n\n  );\n}\n```\n\nHead over to the local app in your browser, `http://localhost:3000` and try **uploading an image**. You should see it upload and then download the image.\n\n## 5. Deploy your app\nNow let’s deploy your app to AWS.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\nCongrats! Your site should now be live!\n\n## Containers\nWe are going to build a hit counter SolidStart app with Redis. We’ll deploy it to AWS in a container using the `Cluster` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\nnpm init solid@latest aws-solid-container\n\ncd aws-solid-container\n```\n\nWe are picking the **SolidStart**, **_basic_**, and **_TypeScript_** options.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\nIt’ll also ask you to update your `app.config.ts`. Instead we’ll use the **default Node preset**.\n\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({});\n```\n\n## 2. Add a Cluster\nTo deploy our SolidStart app in a container, we’ll use [AWS Fargate](https://aws.amazon.com/fargate/) with [Amazon ECS](https://aws.amazon.com/ecs/). Replace the `run` function in your `sst.config.ts`.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\nThis creates a VPC with a bastion host, an ECS Cluster, and adds a Fargate service to it.\n\nThe `dev.command` tells SST to instead run our SolidStart app locally in dev mode.\n\n## 3. Add Redis\nLet’s add an [Amazon ElastiCache](https://aws.amazon.com/elasticache/) Redis cluster. Add this below the `Vpc` component in your `sst.config.ts`.\n\n```\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\n```\n\nThis shares the same VPC as our ECS cluster.\n\n## Link Redis\nNow, link the Redis cluster to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [redis],\n\n});\n```\n\nThis will allow us to reference the Redis cluster in our SolidStart app.\n\n## Install a tunnel\nSince our Redis cluster is in a VPC, we’ll need a tunnel to connect to it from our local machine.\n\n```\nsudo npx sst tunnel install\n```\n\nThis needs _sudo_ to create a network interface on your machine. You’ll only need to do this once on your machine.\n\n## Start dev mode\nStart your app in dev mode.\n\n```\nnpx sst dev\n```\n\nThis will deploy your app, start a tunnel in the **Tunnel** tab, and run your SolidStart app locally in the **MyServiceDev** tab.\n\n## 4. Connect to Redis\nWe want the `/` route to increment a counter in our Redis cluster. Let’s start by installing the packages we’ll use.\n\n```\nnpm install ioredis @solidjs/router\n```\n\nWe’ll increment the counter when the route loads. Replace your `src/routes/index.tsx` with:\n\n```\nimport { Resource } from \"sst\";\n\nimport { Cluster } from \"ioredis\";\n\nimport { createAsync, cache } from \"@solidjs/router\";\n\nconst getCounter = cache(async () => {\n\n  \"use server\";\n\n  const redis = new Cluster(\n\n    [{ host: Resource.MyRedis.host, port: Resource.MyRedis.port }],\n\n    {\n\n      dnsLookup: (address, callback) => callback(null, address),\n\n      redisOptions: {\n\n        tls: {},\n\n        username: Resource.MyRedis.username,\n\n        password: Resource.MyRedis.password,\n\n      },\n\n    }\n\n  );\n\n  return await redis.incr(\"counter\");\n}, \"counter\");\n\nexport const route = {\n\n  load: () => getCounter(),\n\n};\n```\n\nLet’s update our component to show the counter. Add this to your `src/routes/index.tsx`.\n\n```\nexport default function Page() {\n\n  const counter = createAsync(() => getCounter());\n\n  return <h1>Hit counter: {counter()}</h1>;\n}\n```\n\n## Test your app\nLet’s head over to `http://localhost:3000` in your browser and it’ll show the current hit counter.\n\nYou should see it increment every time you **refresh the page**.\n\n## 5. Deploy your app\nTo deploy our app we’ll add a `Dockerfile`.\n\nView Dockerfile\n\n```\nFROM node:lts AS base\n\nWORKDIR /src\n\n# Build\n\nFROM base as build\n\nCOPY --link package.json package-lock.json ./\n\nRUN npm install\n\nCOPY --link . .\n\nRUN npm run build\n\n# Run\n\nFROM base\n\nENV PORT=3000\n\nENV NODE_ENV=production\n\nCOPY --from=build /src/.output /src/.output\n\nCMD [ \"node\", \".output/server/index.mjs\" ]\n```\n\nLet’s also add a `.dockerignore` file in the root.\n\n```\nnode_modules\n```\n\nNow to build our Docker image and deploy we run:\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\nCongrats! Your app should now be live!\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/solid", "title": "SolidStart on AWS with SST", "description": "Create and deploy a SolidStart app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-27 21:11:01", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:locale": "en", "twitter:card": "summary_large_image", "og:description": "Create and deploy a SolidStart app to AWS with SST.", "og:url": "https://sst.dev/docs/start/aws/solid/", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/start/aws/solid/", "og:title": "SolidStart on AWS with SST", "title": "SolidStart on AWS with SST | SST", "language": "en", "ogTitle": "SolidStart on AWS with SST", "ogImage": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:type": "article", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Create and deploy a SolidStart app to AWS with SST.", "ogDescription": "Create and deploy a SolidStart app to AWS with SST.", "scrapeId": "8d1666f7-8480-440a-878a-256c5b4740b0", "sourceURL": "https://sst.dev/docs/start/aws/solid", "url": "https://sst.dev/docs/start/aws/solid", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"SolidStart on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnpm init solid@latest aws-solid-start\n\ncd aws-solid-start\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\n### Link the bucket\n```yaml\nnew sst.aws.SolidStart(\"MyWeb\", {\n\n  link: [bucket],\n\n});\n```\n\n### Generate a pre-signed URL\n```yaml\nasync function presignedUrl() {\n\n  \"use server\";\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return await getSignedUrl(new S3Client({}), command);\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/solid", "title": "SolidStart on AWS with SST", "description": "Create and deploy a SolidStart app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-27 21:11:01", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:locale": "en", "twitter:card": "summary_large_image", "og:description": "Create and deploy a SolidStart app to AWS with SST.", "og:url": "https://sst.dev/docs/start/aws/solid/", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/start/aws/solid/", "og:title": "SolidStart on AWS with SST", "title": "SolidStart on AWS with SST | SST", "language": "en", "ogTitle": "SolidStart on AWS with SST", "ogImage": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:type": "article", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Create and deploy a SolidStart app to AWS with SST.", "ogDescription": "Create and deploy a SolidStart app to AWS with SST.", "scrapeId": "8d1666f7-8480-440a-878a-256c5b4740b0", "sourceURL": "https://sst.dev/docs/start/aws/solid", "url": "https://sst.dev/docs/start/aws/solid", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"SolidStart on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• It's good to create a new stage for production when deploying your app.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/solid", "title": "SolidStart on AWS with SST", "description": "Create and deploy a SolidStart app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 21, "timestamp": "2025-02-27 21:11:01", "type": "best_practices", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:locale": "en", "twitter:card": "summary_large_image", "og:description": "Create and deploy a SolidStart app to AWS with SST.", "og:url": "https://sst.dev/docs/start/aws/solid/", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/start/aws/solid/", "og:title": "SolidStart on AWS with SST", "title": "SolidStart on AWS with SST | SST", "language": "en", "ogTitle": "SolidStart on AWS with SST", "ogImage": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:type": "article", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydCUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Create and deploy a SolidStart app to AWS with SST.", "ogDescription": "Create and deploy a SolidStart app to AWS with SST.", "scrapeId": "8d1666f7-8480-440a-878a-256c5b4740b0", "sourceURL": "https://sst.dev/docs/start/aws/solid", "url": "https://sst.dev/docs/start/aws/solid", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Express on AWS with SST\"?\n\nAssistant: Create and deploy an Express app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our Express app.\n\n```\n\nmkdir aws-express && cd aws-express\n\nnpm init -y\n\nnpm install express\n```\n\n\n## Init Express\nCreate your app by adding an `index.mjs` to the root.\n\n```\nimport express from \"express\";\n\nconst PORT = 80;\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n\n  res.send(\"Hello World!\")\n\n});\n\napp.listen(PORT, () => {\n\n  console.log(`Server is running on http://localhost:${PORT}`);\n\n});\n```\n\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\nThis’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add a Service\nTo deploy our Express app, let’s add an [AWS Fargate](https://aws.amazon.com/fargate/) container with [Amazon ECS](https://aws.amazon.com/ecs/). Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"node --watch index.mjs\",\n\n    },\n\n  });\n}\n```\nThis creates a VPC with an ECS Cluster, and adds a Fargate service to it.\nThe `dev.command` tells SST to instead run our Express app locally in dev mode.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Express app.\n\n```\nnpx sst dev\n```\nOnce complete, click on **MyService** in the sidebar and open your Express app in your browser.\n\n## 3. Add an S3 Bucket\nLet’s add an S3 Bucket for file uploads. Add this to your `sst.config.ts` below the `Vpc` component.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n\n## Link the bucket\nNow, link the bucket to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [bucket],\n});\n```\nThis will allow us to reference the bucket in our Express app.\n\n## 4. Upload a file\nWe want a `POST` request made to the `/` route to upload a file to our S3 bucket. Let’s add this below our _Hello World_ route in our `index.mjs`.\n\n```\napp.post(\"/\", upload.single(\"file\"), async (req, res) => {\n\n  const file = req.file;\n\n  const params = {\n\n    Bucket: Resource.MyBucket.name,\n\n    ContentType: file.mimetype,\n\n    Key: file.originalname,\n\n    Body: file.buffer,\n\n  };\n\n  const upload = new Upload({\n\n    params,\n\n    client: s3,\n\n  });\n\n  await upload.done();\n\n  res.status(200).send(\"File uploaded successfully.\");\n});\n```\nAdd the imports. We’ll use the extra ones below.\n\n```\nimport multer from \"multer\";\n\nimport { Resource } from \"sst\";\n\nimport { Upload } from \"@aws-sdk/lib-storage\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport {\n\n  S3Client,\n\n  GetObjectCommand,\n\n  ListObjectsV2Command,\n\n} from \"@aws-sdk/client-s3\";\n\nconst s3 = new S3Client({});\n\nconst upload = multer({ storage: multer.memoryStorage() });\n```\nAnd install the npm packages.\n\n```\nnpm install multer @aws-sdk/client-s3 @aws-sdk/lib-storage @aws-sdk/s3-request-presigner\n```\n\n\n## 5. Download the file\nWe’ll add a `/latest` route that’ll download the latest file in our S3 bucket. Let’s add this below our upload route in `index.mjs`.\n\n```\napp.get(\"/latest\", async (req, res) => {\n\n  const objects = await s3.send(\n\n    new ListObjectsV2Command({\n\n      Bucket: Resource.MyBucket.name,\n\n    }),\n\n  );\n\n  const latestFile = objects.Contents.sort(\n\n    (a, b) => b.LastModified - a.LastModified,\n\n  )[0];\n\n  const command = new GetObjectCommand({\n\n    Key: latestFile.Key,\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(s3, command);\n\n  res.redirect(url);\n});\n```\n\n\n## Test your app\nTo upload a file run the following from your project root.\n\n```\ncurl -F file=@package.json http://localhost:80/\n```\nThis should upload the `package.json`. Now head over to `http://localhost:80/latest` in your browser and it’ll show you what you just uploaded.\n\n## 5. Deploy your app\nTo deploy our app we’ll first add a `Dockerfile`.\n\n```\nFROM node:lts-alpine\n\nWORKDIR /app/\n\nCOPY package.json /app\n\nRUN npm install\n\nCOPY index.mjs /app\n\nENTRYPOINT [\"node\", \"index.mjs\"]\n```\nThis just builds our Express app in a Docker image.\nLet’s also add a `.dockerignore` file in the root.\n\n```\nnode_modules\n```\nNow to build our Docker image and deploy we run:\n\n```\nnpx sst deploy --stage production\n```\nYou can use any stage name here but it’s good to create a new stage for production. This’ll give the URL of your Express app deployed as a Fargate service.\n\n```\n✓  Complete\n\n   MyService: http://jayair-MyServiceLoadBala-592628062.us-east-1.elb.amazonaws.com\n```\n\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/express", "title": "Express on AWS with SST", "description": "Create and deploy an Express app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 21:11:32", "type": "overview", "page_metadata": {"og:url": "https://sst.dev/docs/start/aws/express/", "twitter:card": "summary_large_image", "og:description": "Create and deploy an Express app to AWS with SST.", "ogSiteName": "SST", "og:site_name": "SST", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RXhwcmVzcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogUrl": "https://sst.dev/docs/start/aws/express/", "description": "Create and deploy an Express app to AWS with SST.", "title": "Express on AWS with SST | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/RXhwcmVzcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/RXhwcmVzcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Express on AWS with SST", "og:locale": "en", "ogDescription": "Create and deploy an Express app to AWS with SST.", "og:title": "Express on AWS with SST", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "scrapeId": "97416f60-38a4-4c20-b415-a72b4254668c", "sourceURL": "https://sst.dev/docs/start/aws/express", "url": "https://sst.dev/docs/start/aws/express", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Express on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nmkdir aws-express && cd aws-express\n\nnpm init -y\n\nnpm install express\n```\n\n### Init Express\n```yaml\nimport express from \"express\";\n\nconst PORT = 80;\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n\n  res.send(\"Hello World!\")\n\n});\n\napp.listen(PORT, () => {\n\n  console.log(`Server is running on http://localhost:${PORT}`);\n\n});\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Add a Service\n```yaml\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"node --watch index.mjs\",\n\n    },\n\n  });\n}\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n### Link the bucket\n```yaml\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [bucket],\n});\n```\n\n### Upload a file\n```yaml\napp.post(\"/\", upload.single(\"file\"), async (req, res) => {\n\n  const file = req.file;\n\n  const params = {\n\n    Bucket: Resource.MyBucket.name,\n\n    ContentType: file.mimetype,\n\n    Key: file.originalname,\n\n    Body: file.buffer,\n\n  };\n\n  const upload = new Upload({\n\n    params,\n\n    client: s3,\n\n  });\n\n  await upload.done();\n\n  res.status(200).send(\"File uploaded successfully.\");\n});\n```\n\n### Download the file\n```yaml\napp.get(\"/latest\", async (req, res) => {\n\n  const objects = await s3.send(\n\n    new ListObjectsV2Command({\n\n      Bucket: Resource.MyBucket.name,\n\n    }),\n\n  );\n\n  const latestFile = objects.Contents.sort(\n\n    (a, b) => b.LastModified - a.LastModified,\n\n  )[0];\n\n  const command = new GetObjectCommand({\n\n    Key: latestFile.Key,\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(s3, command);\n\n  res.redirect(url);\n});\n```\n\n### Deploy your app\n```yaml\nFROM node:lts-alpine\n\nWORKDIR /app/\n\nCOPY package.json /app\n\nRUN npm install\n\nCOPY index.mjs /app\n\nENTRYPOINT [\"node\", \"index.mjs\"]\n```\n\n### Dockerignore\n```yaml\nnode_modules\n```\n\n### Deploy command\n```yaml\nnpx sst deploy --stage production\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/express", "title": "Express on AWS with SST", "description": "Create and deploy an Express app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 21:11:32", "type": "code_examples", "page_metadata": {"og:url": "https://sst.dev/docs/start/aws/express/", "twitter:card": "summary_large_image", "og:description": "Create and deploy an Express app to AWS with SST.", "ogSiteName": "SST", "og:site_name": "SST", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RXhwcmVzcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogUrl": "https://sst.dev/docs/start/aws/express/", "description": "Create and deploy an Express app to AWS with SST.", "title": "Express on AWS with SST | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/RXhwcmVzcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/RXhwcmVzcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Express on AWS with SST", "og:locale": "en", "ogDescription": "Create and deploy an Express app to AWS with SST.", "og:title": "Express on AWS with SST", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "scrapeId": "97416f60-38a4-4c20-b415-a72b4254668c", "sourceURL": "https://sst.dev/docs/start/aws/express", "url": "https://sst.dev/docs/start/aws/express", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Express on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• Use a new stage for production deployments to keep environments separate.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/express", "title": "Express on AWS with SST", "description": "Create and deploy an Express app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 21:11:32", "type": "best_practices", "page_metadata": {"og:url": "https://sst.dev/docs/start/aws/express/", "twitter:card": "summary_large_image", "og:description": "Create and deploy an Express app to AWS with SST.", "ogSiteName": "SST", "og:site_name": "SST", "language": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RXhwcmVzcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogUrl": "https://sst.dev/docs/start/aws/express/", "description": "Create and deploy an Express app to AWS with SST.", "title": "Express on AWS with SST | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/RXhwcmVzcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/RXhwcmVzcyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Express on AWS with SST", "og:locale": "en", "ogDescription": "Create and deploy an Express app to AWS with SST.", "og:title": "Express on AWS with SST", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "scrapeId": "97416f60-38a4-4c20-b415-a72b4254668c", "sourceURL": "https://sst.dev/docs/start/aws/express", "url": "https://sst.dev/docs/start/aws/express", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Vector\"?\n\nAssistant: Reference doc for the `sst.aws.Vector` component.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `Vector` component lets you store and retrieve vector data in your app.\n\n- It uses a vector database powered by [RDS Postgres Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html).\n- Provides a [SDK](https://sst.dev/docs/reference/sdk/) to query, put, and remove the vector data.\n\n## Create the database\n```javascript\nconst vector = new sst.aws.Vector(\"MyVectorDB\", {\n  dimension: 1536\n});\n```\n\n## Link to a resource\nYou can link it to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [vector]\n});\n```\n\nOnce linked, you can query it in your function code using the [SDK](https://sst.dev/docs/reference/sdk/).\n\n```javascript\nimport { VectorClient } from \"sst\";\n\nawait VectorClient(\"MyVectorDB\").query({\n  vector: [32.4, 6.55, 11.2, 10.3, 87.9]\n});\n```\n\n## Constructor\n```javascript\nnew Vector(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`VectorArgs`](https://sst.dev/docs/component/aws/vector#vectorargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/vector", "title": "Vector", "description": "Reference doc for the `sst.aws.Vector` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:11:47", "type": "overview", "page_metadata": {"ogTitle": "Vector", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Vector | SST", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/vector/", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.Vector` component.", "viewport": "width=device-width, initial-scale=1", "og:title": "Vector", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/vector/", "og:type": "article", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.Vector` component.", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Vector` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/VmVjdG9y.png", "og:image": "https://social-cards.sst.dev/v3-docs/VmVjdG9y.png", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/VmVjdG9y.png", "scrapeId": "5fec9629-c38d-4c5d-8fe4-bde5143c7a1d", "sourceURL": "https://sst.dev/docs/component/aws/vector", "url": "https://sst.dev/docs/component/aws/vector", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Vector\"?\n\nAssistant: Here are some code examples:\n\n### Vector Creation Example\n```yaml\nconst vector = new sst.aws.Vector(\"MyVectorDB\", {\n  dimension: 1536\n});\n```\n\n### Linking to Next.js App\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [vector]\n});\n```\n\n### Querying with VectorClient\n```yaml\nimport { VectorClient } from \"sst\";\n\nawait VectorClient(\"MyVectorDB\").query({\n  vector: [32.4, 6.55, 11.2, 10.3, 87.9]\n});\n```\n\n### Using VectorClient to Store a Vector\n```yaml\nawait client.put({\n  vector: [32.4, 6.55, 11.2, 10.3, 87.9],\n  metadata: { type: \"movie\", genre: \"comedy\" },\n});\n```\n\n### Querying Vectors\n```yaml\nconst result = await client.query({\n  vector: [32.4, 6.55, 11.2, 10.3, 87.9],\n  include: { type: \"movie\" },\n  exclude: { genre: \"thriller\" },\n});\n```\n\n### Removing Vectors\n```yaml\nawait client.remove({\n  include: { type: \"movie\" },\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/vector", "title": "Vector", "description": "Reference doc for the `sst.aws.Vector` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:11:47", "type": "code_examples", "page_metadata": {"ogTitle": "Vector", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Vector | SST", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/vector/", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.Vector` component.", "viewport": "width=device-width, initial-scale=1", "og:title": "Vector", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/vector/", "og:type": "article", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.Vector` component.", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Vector` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/VmVjdG9y.png", "og:image": "https://social-cards.sst.dev/v3-docs/VmVjdG9y.png", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/VmVjdG9y.png", "scrapeId": "5fec9629-c38d-4c5d-8fe4-bde5143c7a1d", "sourceURL": "https://sst.dev/docs/component/aws/vector", "url": "https://sst.dev/docs/component/aws/vector", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Vector\"?\n\nAssistant: Here are the recommended best practices:\n\n• The maximum supported dimension for vectors is 2000. Use dimensionality reduction if necessary.\n• When querying, ensure to use the `include` and `exclude` filters to refine your results.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/vector", "title": "Vector", "description": "Reference doc for the `sst.aws.Vector` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:11:47", "type": "best_practices", "page_metadata": {"ogTitle": "Vector", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Vector | SST", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/vector/", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.Vector` component.", "viewport": "width=device-width, initial-scale=1", "og:title": "Vector", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/vector/", "og:type": "article", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.Vector` component.", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Vector` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/VmVjdG9y.png", "og:image": "https://social-cards.sst.dev/v3-docs/VmVjdG9y.png", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/VmVjdG9y.png", "scrapeId": "5fec9629-c38d-4c5d-8fe4-bde5143c7a1d", "sourceURL": "https://sst.dev/docs/component/aws/vector", "url": "https://sst.dev/docs/component/aws/vector", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"API on AWS with SST\"?\n\nAssistant: Create and deploy a serverless API in AWS with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\n\nmkdir my-ts-app && cd my-ts-app\n\nnpm init -y\n```\n\n#### Init SST\n\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add an API\nLet’s add an API using [Amazon API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html). Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const api = new sst.aws.ApiGatewayV2(\"MyApi\");\n\n  api.route(\"GET /\", {\n\n    handler: \"index.upload\",\n\n  });\n\n  api.route(\"GET /latest\", {\n\n    handler: \"index.latest\",\n\n  });\n}\n```\n\nWe are adding two routes, one for uploading an image and another for getting the latest uploaded image.\n\n## Start dev mode\nStart your app in dev mode. This runs your functions [_Live_](https://sst.dev/docs/live/).\n\n```\nnpx sst dev\n```\n\nThis will give you the URL of your API.\n\n```\n+  Complete\n\n   MyApi: https://y9ink9nh96.execute-api.us-east-1.amazonaws.com\n```\n\n## 3. Add an S3 Bucket\nLet’s add an S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\nAdd this above the `Api` component.\n\n#### Link the bucket\n\nNow, link the bucket to the API routes.\n\n```\napi.route(\"GET /\", {\n\n  link: [bucket],\n\n  handler: \"index.upload\",\n\n});\n\napi.route(\"GET /latest\", {\n\n  link: [bucket],\n\n  handler: \"index.latest\",\n\n});\n```\n\n## 4. Upload a file\nWe want the `/` route of our API to generate a pre-signed URL to upload a file to our S3 Bucket. Create an `index.ts` file and add the following.\n\n```\nexport async function upload() {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return {\n\n    statusCode: 200,\n\n    body: await getSignedUrl(s3, command),\n\n  };\n}\n```\n\nAdd the relevant imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport {\n\n  S3Client,\n\n  GetObjectCommand,\n\n  PutObjectCommand,\n\n  ListObjectsV2Command,\n\n} from \"@aws-sdk/client-s3\";\n\nconst s3 = new S3Client({});\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n## 5. Download a file\nWe want the `/latest` route of our API to generate a pre-signed URL to download the last uploaded file in our S3 Bucket. Add this to your `index.ts` file.\n\n```\nexport async function latest() {\n\n  const objects = await s3.send(\n\n    new ListObjectsV2Command({\n\n      Bucket: Resource.MyBucket.name,\n\n    })\n\n  );\n\n  const latestFile = objects.Contents!.sort(\n\n    (a, b) =>\n\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0)\n\n  )[0];\n\n  const command = new GetObjectCommand({\n\n    Key: latestFile.Key,\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return {\n\n    statusCode: 302,\n\n    headers: {\n\n      Location: await getSignedUrl(s3, command),\n\n    },\n\n  };\n}\n```\n\n## Test your app\nLet’s try uploading a file from your project root. Make sure to use your API URL.\n\n```\ncurl --upload-file package.json \"$(curl https://y9ink9nh96.execute-api.us-east-1.amazonaws.com)\"\n```\n\nNow head over to `https://y9ink9nh96.execute-api.us-east-1.amazonaws.com/latest` in your browser and it’ll download the file you just uploaded.\n\n## 6. Deploy your app\nNow let’s deploy your app to production.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/api", "title": "API on AWS with SST", "description": "Create and deploy a serverless API in AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:12:23", "type": "overview", "page_metadata": {"ogLocale": "en", "title": "API on AWS with SST | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QVBJJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:url": "https://sst.dev/docs/start/aws/api/", "ogTitle": "API on AWS with SST", "language": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.7", "Starlight v0.28.3"], "og:title": "API on AWS with SST", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/QVBJJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QVBJJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "description": "Create and deploy a serverless API in AWS with SST.", "og:description": "Create and deploy a serverless API in AWS with SST.", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Create and deploy a serverless API in AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/api/", "ogSiteName": "SST", "og:type": "article", "scrapeId": "4e4989b6-9d95-4526-b94d-6821910d728d", "sourceURL": "https://sst.dev/docs/start/aws/api", "url": "https://sst.dev/docs/start/aws/api", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"API on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nmkdir my-ts-app && cd my-ts-app\nnpm init -y\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\nnpm install\n```\n\n### Add an API\n```yaml\nasync run() {\n  const api = new sst.aws.ApiGatewayV2(\"MyApi\");\n  api.route(\"GET /\", {\n    handler: \"index.upload\",\n  });\n  api.route(\"GET /latest\", {\n    handler: \"index.latest\",\n  });\n}\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n### Link the bucket\n```yaml\napi.route(\"GET /\", {\n  link: [bucket],\n  handler: \"index.upload\",\n});\napi.route(\"GET /latest\", {\n  link: [bucket],\n  handler: \"index.latest\",\n});\n```\n\n### Upload a file\n```yaml\nexport async function upload() {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n  return {\n    statusCode: 200,\n    body: await getSignedUrl(s3, command),\n  };\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/api", "title": "API on AWS with SST", "description": "Create and deploy a serverless API in AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:12:23", "type": "code_examples", "page_metadata": {"ogLocale": "en", "title": "API on AWS with SST | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QVBJJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:url": "https://sst.dev/docs/start/aws/api/", "ogTitle": "API on AWS with SST", "language": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.7", "Starlight v0.28.3"], "og:title": "API on AWS with SST", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/QVBJJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QVBJJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "description": "Create and deploy a serverless API in AWS with SST.", "og:description": "Create and deploy a serverless API in AWS with SST.", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Create and deploy a serverless API in AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/api/", "ogSiteName": "SST", "og:type": "article", "scrapeId": "4e4989b6-9d95-4526-b94d-6821910d728d", "sourceURL": "https://sst.dev/docs/start/aws/api", "url": "https://sst.dev/docs/start/aws/api", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"API on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• Select the defaults and pick AWS when initializing SST.\n• It's good to create a new stage for production when deploying your app.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/api", "title": "API on AWS with SST", "description": "Create and deploy a serverless API in AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:12:23", "type": "best_practices", "page_metadata": {"ogLocale": "en", "title": "API on AWS with SST | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QVBJJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:url": "https://sst.dev/docs/start/aws/api/", "ogTitle": "API on AWS with SST", "language": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.7", "Starlight v0.28.3"], "og:title": "API on AWS with SST", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/QVBJJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QVBJJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "description": "Create and deploy a serverless API in AWS with SST.", "og:description": "Create and deploy a serverless API in AWS with SST.", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Create and deploy a serverless API in AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/api/", "ogSiteName": "SST", "og:type": "article", "scrapeId": "4e4989b6-9d95-4526-b94d-6821910d728d", "sourceURL": "https://sst.dev/docs/start/aws/api", "url": "https://sst.dev/docs/start/aws/api", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Bucket\"?\n\nAssistant: Reference doc for the `sst.cloudflare.Bucket` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\n```javascript\nconst bucket = new sst.cloudflare.Bucket(\"MyBucket\");\n```\n\n## Link to a worker\nYou can link the bucket to a worker.\n\n```javascript\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"./index.ts\",\n  link: [bucket],\n  url: true\n});\n```\n\nOnce linked, you can use the SDK to interact with the bucket.\n\n```javascript\nimport { Resource } from \"sst\";\n\nawait Resource.MyBucket.list();\n```\n\n## Constructor\n```javascript\nnew Bucket(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`BucketArgs`](https://sst.dev/docs/component/cloudflare/bucket#bucketargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/bucket", "title": "Bucket", "description": "Reference doc for the `sst.cloudflare.Bucket` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:13:02", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.cloudflare.Bucket` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "ogUrl": "https://sst.dev/docs/component/cloudflare/bucket/", "ogDescription": "Reference doc for the `sst.cloudflare.Bucket` component.", "ogTitle": "Bucket", "og:site_name": "SST", "title": "Bucket | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/component/cloudflare/bucket/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Bucket", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "ogLocale": "en", "og:locale": "en", "og:description": "Reference doc for the `sst.cloudflare.Bucket` component.", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "scrapeId": "746d3765-e769-4dd6-bd46-5f1ed1ddd83c", "sourceURL": "https://sst.dev/docs/component/cloudflare/bucket", "url": "https://sst.dev/docs/component/cloudflare/bucket", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Bucket\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nconst bucket = new sst.cloudflare.Bucket(\"MyBucket\");\n```\n\n### Link to a worker\n```yaml\nnew sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"./index.ts\",\n  link: [bucket],\n  url: true\n});\n```\n\n### SDK interaction\n```yaml\nimport { Resource } from \"sst\";\n\nawait Resource.MyBucket.list();\n```\n\n### Constructor\n```yaml\nnew Bucket(name, args?, opts?)\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/bucket", "title": "Bucket", "description": "Reference doc for the `sst.cloudflare.Bucket` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:13:02", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.cloudflare.Bucket` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "ogUrl": "https://sst.dev/docs/component/cloudflare/bucket/", "ogDescription": "Reference doc for the `sst.cloudflare.Bucket` component.", "ogTitle": "Bucket", "og:site_name": "SST", "title": "Bucket | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/component/cloudflare/bucket/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Bucket", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "ogLocale": "en", "og:locale": "en", "og:description": "Reference doc for the `sst.cloudflare.Bucket` component.", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "scrapeId": "746d3765-e769-4dd6-bd46-5f1ed1ddd83c", "sourceURL": "https://sst.dev/docs/component/cloudflare/bucket", "url": "https://sst.dev/docs/component/cloudflare/bucket", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Bucket\"?\n\nAssistant: Here are the recommended best practices:\n\n• When linking a bucket to a worker, ensure to use the SDK for interaction with the bucket.\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/bucket", "title": "Bucket", "description": "Reference doc for the `sst.cloudflare.Bucket` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:13:02", "type": "best_practices", "page_metadata": {"language": "en", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.cloudflare.Bucket` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "ogUrl": "https://sst.dev/docs/component/cloudflare/bucket/", "ogDescription": "Reference doc for the `sst.cloudflare.Bucket` component.", "ogTitle": "Bucket", "og:site_name": "SST", "title": "Bucket | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/component/cloudflare/bucket/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Bucket", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0.png", "ogLocale": "en", "og:locale": "en", "og:description": "Reference doc for the `sst.cloudflare.Bucket` component.", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "scrapeId": "746d3765-e769-4dd6-bd46-5f1ed1ddd83c", "sourceURL": "https://sst.dev/docs/component/cloudflare/bucket", "url": "https://sst.dev/docs/component/cloudflare/bucket", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Queue\"?\n\nAssistant: Reference doc for the `sst.aws.Queue` component.\n\nHere's a detailed explanation:\n\n\n## Create a queue\n```javascript\nconst queue = new sst.aws.Queue(\"MyQueue\");\n```\n\n## Make it a FIFO queue\nYou can optionally make it a FIFO queue.\n\n```javascript\nnew sst.aws.Queue(\"MyQueue\", {\n  fifo: true\n});\n```\n\n## Add a subscriber\n```javascript\nqueue.subscribe(\"src/subscriber.handler\");\n```\n\n## Link the queue to a resource\nYou can link the queue to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [queue]\n});\n```\n\nOnce linked, you can send messages to the queue from your function code.\n\n```javascript\nimport { Resource } from \"sst\";\nimport { SQSClient, SendMessageCommand } from \"@aws-sdk/client-sqs\";\n\nconst sqs = new SQSClient({});\n\nawait sqs.send(new SendMessageCommand({\n  QueueUrl: Resource.MyQueue.url,\n  MessageBody: \"Hello from Next.js!\"\n}));\n```\n\n## Constructor\n```javascript\nnew Queue(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`QueueArgs`](https://sst.dev/docs/component/aws/queue#queueargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/queue", "title": "Queue", "description": "Reference doc for the `sst.aws.Queue` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:13:17", "type": "overview", "page_metadata": {"og:site_name": "SST", "ogDescription": "Reference doc for the `sst.aws.Queue` component.", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/queue/", "twitter:image": "https://social-cards.sst.dev/v3-docs/UXVldWU%3D.png", "title": "Queue | SST", "language": "en", "description": "Reference doc for the `sst.aws.Queue` component.", "og:image": "https://social-cards.sst.dev/v3-docs/UXVldWU%3D.png", "ogSiteName": "SST", "og:title": "Queue", "ogUrl": "https://sst.dev/docs/component/aws/queue/", "ogTitle": "Queue", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/UXVldWU%3D.png", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.Queue` component.", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "scrapeId": "535b0cc8-9efa-4f03-8305-1f654b6418d0", "sourceURL": "https://sst.dev/docs/component/aws/queue", "url": "https://sst.dev/docs/component/aws/queue", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Queue\"?\n\nAssistant: Here are some code examples:\n\n### Create a queue\n```yaml\nconst queue = new sst.aws.Queue(\"MyQueue\");\n```\n\n### Make it a FIFO queue\n```yaml\nnew sst.aws.Queue(\"MyQueue\", {\n  fifo: true\n});\n```\n\n### Add a subscriber\n```yaml\nqueue.subscribe(\"src/subscriber.handler\");\n```\n\n### Link the queue to a resource\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [queue]\n});\n```\n\n### Send message to the queue\n```yaml\nimport { Resource } from \"sst\";\nimport { SQSClient, SendMessageCommand } from \"@aws-sdk/client-sqs\";\n\nconst sqs = new SQSClient({});\n\nawait sqs.send(new SendMessageCommand({\n  QueueUrl: Resource.MyQueue.url,\n  MessageBody: \"Hello from Next.js!\"\n}));\n```\n\n### Constructor\n```yaml\nnew Queue(name, args?, opts?)\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/queue", "title": "Queue", "description": "Reference doc for the `sst.aws.Queue` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:13:17", "type": "code_examples", "page_metadata": {"og:site_name": "SST", "ogDescription": "Reference doc for the `sst.aws.Queue` component.", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/queue/", "twitter:image": "https://social-cards.sst.dev/v3-docs/UXVldWU%3D.png", "title": "Queue | SST", "language": "en", "description": "Reference doc for the `sst.aws.Queue` component.", "og:image": "https://social-cards.sst.dev/v3-docs/UXVldWU%3D.png", "ogSiteName": "SST", "og:title": "Queue", "ogUrl": "https://sst.dev/docs/component/aws/queue/", "ogTitle": "Queue", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/UXVldWU%3D.png", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.Queue` component.", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "scrapeId": "535b0cc8-9efa-4f03-8305-1f654b6418d0", "sourceURL": "https://sst.dev/docs/component/aws/queue", "url": "https://sst.dev/docs/component/aws/queue", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Queue\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can optionally make it a FIFO queue to guarantee that messages are processed exactly once and in the order that they are sent.\n• Consider adding a dead-letter queue (DLQ) to handle messages that can't be processed successfully after a certain number of retries.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/queue", "title": "Queue", "description": "Reference doc for the `sst.aws.Queue` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:13:17", "type": "best_practices", "page_metadata": {"og:site_name": "SST", "ogDescription": "Reference doc for the `sst.aws.Queue` component.", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/queue/", "twitter:image": "https://social-cards.sst.dev/v3-docs/UXVldWU%3D.png", "title": "Queue | SST", "language": "en", "description": "Reference doc for the `sst.aws.Queue` component.", "og:image": "https://social-cards.sst.dev/v3-docs/UXVldWU%3D.png", "ogSiteName": "SST", "og:title": "Queue", "ogUrl": "https://sst.dev/docs/component/aws/queue/", "ogTitle": "Queue", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/UXVldWU%3D.png", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.Queue` component.", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "scrapeId": "535b0cc8-9efa-4f03-8305-1f654b6418d0", "sourceURL": "https://sst.dev/docs/component/aws/queue", "url": "https://sst.dev/docs/component/aws/queue", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Vpc\"?\n\nAssistant: Reference doc for the `sst.aws.Vpc` component.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `Vpc` component lets you add a VPC to your app. It uses [Amazon VPC](https://docs.aws.amazon.com/vpc/). This is useful for services like RDS and Fargate that need to be hosted inside a VPC.\n\nThis creates a VPC with 2 Availability Zones by default. It also creates the following resources:\n\n1. A default security group blocking all incoming internet traffic.\n2. A public subnet in each AZ.\n3. A private subnet in each AZ.\n4. An Internet Gateway. All the traffic from the public subnets are routed through it.\n5. If `nat` is enabled, a NAT Gateway or NAT instance in each AZ. All the traffic from the private subnets are routed to the NAT in the same AZ.\n\n## Create a VPC\n```\nnew sst.aws.Vpc(\"MyVPC\");\n```\n\n## Create it with 3 Availability Zones\n```\nnew sst.aws.Vpc(\"MyVPC\", {\n  az: 3\n});\n```\n\n## Enable NAT\n```\nnew sst.aws.Vpc(\"MyVPC\", {\n  nat: \"managed\"\n});\n```\n\n## Cost\nBy default, this component is **free**. Following is the cost to enable the `nat` or `bastion` options.\n\n## Managed NAT\nIf you enable `nat` with the `managed` option, it uses a _NAT Gateway_ per `az` at $0.045 per hour, and $0.045 per GB processed per month.\n\nThat works out to a minimum of $0.045 x 2 x 24 x 30 or **$65 per month**. Adjust this for the number of `az` and add $0.045 per GB processed per month.\n\nThe above are rough estimates for _us-east-1_, check out the [NAT Gateway pricing](https://aws.amazon.com/vpc/pricing/) for more details. Standard [data transfer charges](https://aws.amazon.com/ec2/pricing/on-demand/#Data_Transfer) apply.\n\n## EC2 NAT\nIf you enable `nat` with the `ec2` option, it uses `t4g.nano` EC2 _On Demand_ instances per `az` at $0.0042 per hour, and $0.09 per GB processed per month for the first 10TB.\n\nThat works out to a minimum of $0.0042 x 2 x 24 x 30 or **$6 per month**. Adjust this for the `nat.ec2.instance` you are using and add $0.09 per GB processed per month.\n\nThe above are rough estimates for _us-east-1_, check out the [EC2 On-Demand pricing](https://aws.amazon.com/vpc/pricing/) and the [EC2 Data Transfer pricing](https://aws.amazon.com/ec2/pricing/on-demand/#Data_Transfer) for more details.\n\n## Bastion\nIf you enable `bastion`, it uses a single `t4g.nano` EC2 _On Demand_ instance at $0.0042 per hour, and $0.09 per GB processed per month for the first 10TB.\n\nThat works out to $0.0042 x 24 x 30 or **$3 per month**. Add $0.09 per GB processed per month.\n\nHowever if `nat: \"ec2\"` is enabled, one of the NAT EC2 instances will be reused; making this **free**.\n\nThe above are rough estimates for _us-east-1_, check out the [EC2 On-Demand pricing](https://aws.amazon.com/vpc/pricing/) and the [EC2 Data Transfer pricing](https://aws.amazon.com/ec2/pricing/on-demand/#Data_Transfer) for more details.\n\n## Constructor\n```\nnew Vpc(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`VpcArgs`](https://sst.dev/docs/component/aws/vpc#vpcargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/vpc", "title": "Vpc", "description": "Reference doc for the `sst.aws.Vpc` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:13:34", "type": "overview", "page_metadata": {"language": "en", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/VnBj.png", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://social-cards.sst.dev/v3-docs/VnBj.png", "title": "Vpc | SST", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:description": "Reference doc for the `sst.aws.Vpc` component.", "description": "Reference doc for the `sst.aws.Vpc` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/VnBj.png", "ogTitle": "Vpc", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:site_name": "SST", "og:title": "Vpc", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.Vpc` component.", "og:url": "https://sst.dev/docs/component/aws/vpc/", "ogUrl": "https://sst.dev/docs/component/aws/vpc/", "scrapeId": "86c35b4d-df18-4b43-80bc-eb1c56511943", "sourceURL": "https://sst.dev/docs/component/aws/vpc", "url": "https://sst.dev/docs/component/aws/vpc", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Vpc\"?\n\nAssistant: Here are some code examples:\n\n### Create a VPC\n```yaml\nnew sst.aws.Vpc(\"MyVPC\");\n```\n\n### Create it with 3 Availability Zones\n```yaml\nnew sst.aws.Vpc(\"MyVPC\", {\n  az: 3\n});\n```\n\n### Enable NAT\n```yaml\nnew sst.aws.Vpc(\"MyVPC\", {\n  nat: \"managed\"\n});\n```\n\n### Get an existing VPC\n```yaml\nconst vpc = $app.stage === \"frank\"\n  ? sst.aws.Vpc.get(\"MyVPC\", \"vpc-0be8fa4de860618bb\")\n  : new sst.aws.Vpc(\"MyVPC\");\n\nreturn {\n  vpc: vpc.id\n};\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/vpc", "title": "Vpc", "description": "Reference doc for the `sst.aws.Vpc` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:13:34", "type": "code_examples", "page_metadata": {"language": "en", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/VnBj.png", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://social-cards.sst.dev/v3-docs/VnBj.png", "title": "Vpc | SST", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:description": "Reference doc for the `sst.aws.Vpc` component.", "description": "Reference doc for the `sst.aws.Vpc` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/VnBj.png", "ogTitle": "Vpc", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:site_name": "SST", "og:title": "Vpc", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.Vpc` component.", "og:url": "https://sst.dev/docs/component/aws/vpc/", "ogUrl": "https://sst.dev/docs/component/aws/vpc/", "scrapeId": "86c35b4d-df18-4b43-80bc-eb1c56511943", "sourceURL": "https://sst.dev/docs/component/aws/vpc", "url": "https://sst.dev/docs/component/aws/vpc", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Vpc\"?\n\nAssistant: Here are the recommended best practices:\n\n• By default, this component is free. Adjust costs based on the number of availability zones and data processed when enabling NAT or bastion options.\n• Check AWS pricing pages for the most accurate and up-to-date cost estimates.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/vpc", "title": "Vpc", "description": "Reference doc for the `sst.aws.Vpc` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:13:34", "type": "best_practices", "page_metadata": {"language": "en", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/VnBj.png", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://social-cards.sst.dev/v3-docs/VnBj.png", "title": "Vpc | SST", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:description": "Reference doc for the `sst.aws.Vpc` component.", "description": "Reference doc for the `sst.aws.Vpc` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/VnBj.png", "ogTitle": "Vpc", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:site_name": "SST", "og:title": "Vpc", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.Vpc` component.", "og:url": "https://sst.dev/docs/component/aws/vpc/", "ogUrl": "https://sst.dev/docs/component/aws/vpc/", "scrapeId": "86c35b4d-df18-4b43-80bc-eb1c56511943", "sourceURL": "https://sst.dev/docs/component/aws/vpc", "url": "https://sst.dev/docs/component/aws/vpc", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Efs\"?\n\nAssistant: Reference doc for the `sst.aws.Efs` component.\n\nHere's a detailed explanation:\n\n\n## Create the file system\n```javascript\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst efs = new sst.aws.Efs(\"MyEfs\", { vpc });\n```\nThis needs a VPC.\n\n## Attach it to a Lambda function\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  vpc,\n  handler: \"lambda.handler\",\n  volume: { efs, path: \"/mnt/efs\" }\n});\n```\nThis is now mounted at `/mnt/efs` in the Lambda function.\n\n## Attach it to a container\n```javascript\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  public: {\n    ports: [{ listen: \"80/http\" }],\n  },\n  volumes: [\n    { efs, path: \"/mnt/efs\" }\n  ]\n});\n```\nMounted at `/mnt/efs` in the container.\n\n## Cost\nBy default this component uses _Regional (Multi-AZ) with Elastic Throughput_. The pricing is pay-per-use.\n\n- For storage: $0.30 per GB per month\n- For reads: $0.03 per GB per month\n- For writes: $0.06 per GB per month\n\nThe above are rough estimates for _us-east-1_, check out the [EFS pricing](https://aws.amazon.com/efs/pricing/) for more details.\n\n## Constructor\n```javascript\nnew Efs(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`EfsArgs`](https://sst.dev/docs/component/aws/efs#efsargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/efs", "title": "Efs", "description": "Reference doc for the `sst.aws.Efs` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:13:44", "type": "overview", "page_metadata": {"description": "Reference doc for the `sst.aws.Efs` component.", "og:title": "Efs", "og:image": "https://social-cards.sst.dev/v3-docs/RWZz.png", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/component/aws/efs/", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Efs | SST", "ogTitle": "Efs", "ogDescription": "Reference doc for the `sst.aws.Efs` component.", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.Efs` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/RWZz.png", "ogLocale": "en", "og:site_name": "SST", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/component/aws/efs/", "ogImage": "https://social-cards.sst.dev/v3-docs/RWZz.png", "scrapeId": "54923a42-0410-4495-b8c8-7b73a50de11d", "sourceURL": "https://sst.dev/docs/component/aws/efs", "url": "https://sst.dev/docs/component/aws/efs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Efs\"?\n\nAssistant: Here are some code examples:\n\n### Create the file system\n```yaml\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst efs = new sst.aws.Efs(\"MyEfs\", { vpc });\n```\n\n### Attach it to a Lambda function\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  vpc,\n  handler: \"lambda.handler\",\n  volume: { efs, path: \"/mnt/efs\" }\n});\n```\n\n### Attach it to a container\n```yaml\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  public: {\n    ports: [{ listen: \"80/http\" }],\n  },\n  volumes: [\n    { efs, path: \"/mnt/efs\" }\n  ]\n});\n```\n\n### Constructor\n```yaml\nnew Efs(name, args, opts?)\n```\n\n### Get existing EFS file system\n```yaml\nconst efs = $app.stage === \"frank\"\n  ? sst.aws.Efs.get(\"MyEfs\", \"app-dev-myefs\")\n  : new sst.aws.Efs(\"MyEfs\", { vpc });\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/efs", "title": "Efs", "description": "Reference doc for the `sst.aws.Efs` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:13:44", "type": "code_examples", "page_metadata": {"description": "Reference doc for the `sst.aws.Efs` component.", "og:title": "Efs", "og:image": "https://social-cards.sst.dev/v3-docs/RWZz.png", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/component/aws/efs/", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Efs | SST", "ogTitle": "Efs", "ogDescription": "Reference doc for the `sst.aws.Efs` component.", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.Efs` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/RWZz.png", "ogLocale": "en", "og:site_name": "SST", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/component/aws/efs/", "ogImage": "https://social-cards.sst.dev/v3-docs/RWZz.png", "scrapeId": "54923a42-0410-4495-b8c8-7b73a50de11d", "sourceURL": "https://sst.dev/docs/component/aws/efs", "url": "https://sst.dev/docs/component/aws/efs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Efs\"?\n\nAssistant: Here are the recommended best practices:\n\n• The `max-io` performance mode can support higher throughput, but with slightly higher latency. It’s recommended for larger workloads like data analysis or media processing.\n• Both performance modes are priced the same, but `general-purpose` is recommended for most use cases.\n• If you know your access patterns, you can use `provisioned` throughput for fixed throughput.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/efs", "title": "Efs", "description": "Reference doc for the `sst.aws.Efs` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 6, "timestamp": "2025-02-27 21:13:44", "type": "best_practices", "page_metadata": {"description": "Reference doc for the `sst.aws.Efs` component.", "og:title": "Efs", "og:image": "https://social-cards.sst.dev/v3-docs/RWZz.png", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/component/aws/efs/", "og:locale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Efs | SST", "ogTitle": "Efs", "ogDescription": "Reference doc for the `sst.aws.Efs` component.", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.Efs` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/RWZz.png", "ogLocale": "en", "og:site_name": "SST", "language": "en", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/component/aws/efs/", "ogImage": "https://social-cards.sst.dev/v3-docs/RWZz.png", "scrapeId": "54923a42-0410-4495-b8c8-7b73a50de11d", "sourceURL": "https://sst.dev/docs/component/aws/efs", "url": "https://sst.dev/docs/component/aws/efs", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Angular on AWS with SST\"?\n\nAssistant: Create and deploy an Angular app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\n\nnpm install -g @angular/cli\n\nng new aws-angular\n\ncd aws-angular\n```\n\nWe are picking **CSS** for styles, and **not using SSR**.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n```\n\nThis’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this above the `StaticSite` component.\n\nWe are going to upload a file to this bucket using a pre-signed URL. This’ll let us upload it directly to our bucket.\n\n## 3. Add an API\nLet’s create a simple API to generate that URL. Add this below the `Bucket` component.\n\n```\nconst pre = new sst.aws.Function(\"MyFunction\", {\n\n  url: true,\n\n  link: [bucket],\n\n  handler: \"functions/presigned.handler\",\n});\n```\n\nWe are linking our bucket to this function.\n\n## Pass the API URL\nNow, pass the API URL to our Angular app. Add this below the `build` prop in our `StaticSite` component.\n\n```\nenvironment: {\n\n  NG_APP_PRESIGNED_API: pre.url\n\n}\n```\n\nTo load this in our Angular app, we’ll use the [`@ngx-env/builder`](https://www.npmjs.com/package/@ngx-env/builder) package.\n\n```\nng add @ngx-env/builder\n```\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Angular app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyWeb** in the sidebar and go to your Angular app in your browser. Typically on `http://localhost:4200`.\n\n## 3. Create an upload form\nLet’s create a component to do the file upload. Add the following to `src/app/file-upload.component.ts`.\n\n```\nimport { Component, inject } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n\n  selector: 'app-file-upload',\n\n  standalone: true,\n\n  imports: [FormsModule],\n\n  template: `\n\n    <form (ngSubmit)=\"onSubmit($event)\">\n\n      <input type=\"file\" name=\"file\">\n\n      <button type=\"submit\">Upload</button>\n\n    </form>\n\n  `,\n\n})\n\nexport class FileUploadComponent {\n\n  private http = inject(HttpClient);\n\n  presignedApi = import.meta.env['NG_APP_PRESIGNED_API'];\n\n  async onSubmit(event: Event): Promise<void> {\n\n    const file = (event.target as HTMLFormElement)['file'].files?.[0]!;\n\n    this.http.get(this.presignedApi, { responseType: 'text' }).subscribe({\n\n      next: async (url: string) => {\n\n        const image = await fetch(url, {\n\n          body: file,\n\n          method: \"PUT\",\n\n          headers: {\n\n            \"Content-Type\": file.type,\n\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n          },\n\n        });\n\n        window.location.href = image.url.split(\"?\")[0];\n\n      },\n\n    });\n\n  }\n}\n```\n\nThis is getting the pre-signed API URL from the environment. Making a request to it to get the pre-signed URL and then uploading our file to it.\n\nLet’s add some `styles` below the `template` prop.\n\n```\nstyles: [`\\\n\\\n  form {\\\n\\\n    color: white;\\\n\\\n    padding: 2rem;\\\n\\\n    display: flex;\\\n\\\n    align-items: center;\\\n\\\n    justify-content: space-between;\\\n\\\n    background-color: #23262d;\\\n\\\n    background-image: none;\\\n\\\n    background-size: 400%;\\\n\\\n    border-radius: 0.6rem;\\\n\\\n    background-position: 100%;\\\n\\\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\\\n\\\n  }\\\n\\\n  button {\\\n\\\n    appearance: none;\\\n\\\n    border: 0;\\\n\\\n    font-weight: 500;\\\n\\\n    border-radius: 5px;\\\n\\\n    font-size: 0.875rem;\\\n\\\n    padding: 0.5rem 0.75rem;\\\n\\\n    background-color: white;\\\n\\\n    color: black;\\\n\\\n  }\\\n\\\n  button:active:enabled {\\\n\\\n    background-color: #EEE;\\\n\\\n  }\\\n\\\n`] \n```\n\nTo make HTTP fetch requests we need to add the provider to our Angular app config. Add the following to the `providers` list in `src/app/app.config.ts`.\n\n```\nprovideHttpClient(withFetch())\n```\n\nAnd import it at the top.\n\n```\nimport { provideHttpClient, withFetch } from '@angular/common/http';\n```\n\nLet’s add this to our app. Replace the `src/app/app.component.ts` file with.\n\n```\nimport { Component } from '@angular/core';\n\nimport { RouterOutlet } from '@angular/router';\n\nimport { FileUploadComponent } from './file-upload.component';\n\n@Component({\n\n  selector: 'app-root',\n\n  standalone: true,\n\n  imports: [RouterOutlet, FileUploadComponent],\n\n  template: `\n\n    <main>\n\n      <app-file-upload></app-file-upload>\n\n    </main>\n\n    <router-outlet></router-outlet>\n\n  `,\n\n  styles: [`\\\n\\\n    main {\\\n\\\n      margin: auto;\\\n\\\n      padding: 1.5rem;\\\n\\\n      max-width: 60ch;\\\n\\\n    }\\\n\\\n  `],\n\n})\n\nexport class AppComponent { }\n``\n\n## 4. Generate a pre-signed URL\nLet’s implement the API that generates the pre-signed URL. Create a `functions/presigned.ts` file with the following.\n\n```\nimport { Resource } from \"sst\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n\nexport async function handler() {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  return {\n\n    statusCode: 200,\n\n    body: await getSignedUrl(new S3Client({}), command),\n\n  };\n\n}\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\nHead over to the local Angular app in your browser, `http://localhost:4200` and try **uploading an image**. You should see it upload and then download the image.\n\n## 5. Deploy your app\nNow let’s deploy your app to AWS.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/angular", "title": "Angular on AWS with SST", "description": "Create and deploy an Angular app to AWS with SST.", "has_code_examples": true, "has_best_practices": false, "section_count": 10, "timestamp": "2025-02-27 21:14:16", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/QW5ndWxhciUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QW5ndWxhciUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogLocale": "en", "ogDescription": "Create and deploy an Angular app to AWS with SST.", "description": "Create and deploy an Angular app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/angular/", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogTitle": "Angular on AWS with SST", "title": "Angular on AWS with SST | SST", "og:locale": "en", "og:type": "article", "og:title": "Angular on AWS with SST", "og:site_name": "SST", "og:url": "https://sst.dev/docs/start/aws/angular/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/QW5ndWxhciUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "og:description": "Create and deploy an Angular app to AWS with SST.", "twitter:card": "summary_large_image", "scrapeId": "5a6ad346-ad2c-4e92-aa63-c25212d169e6", "sourceURL": "https://sst.dev/docs/start/aws/angular", "url": "https://sst.dev/docs/start/aws/angular", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Angular on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnpm install -g @angular/cli\nng new aws-angular\ncd aws-angular\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n### Add an API\n```yaml\nconst pre = new sst.aws.Function(\"MyFunction\", {\n  url: true,\n  link: [bucket],\n  handler: \"functions/presigned.handler\",\n});\n```\n\n### Pass the API URL\n```yaml\nenvironment: {\n  NG_APP_PRESIGNED_API: pre.url\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/angular", "title": "Angular on AWS with SST", "description": "Create and deploy an Angular app to AWS with SST.", "has_code_examples": true, "has_best_practices": false, "section_count": 10, "timestamp": "2025-02-27 21:14:16", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/QW5ndWxhciUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QW5ndWxhciUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogLocale": "en", "ogDescription": "Create and deploy an Angular app to AWS with SST.", "description": "Create and deploy an Angular app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/angular/", "viewport": "width=device-width, initial-scale=1", "language": "en", "ogTitle": "Angular on AWS with SST", "title": "Angular on AWS with SST | SST", "og:locale": "en", "og:type": "article", "og:title": "Angular on AWS with SST", "og:site_name": "SST", "og:url": "https://sst.dev/docs/start/aws/angular/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/QW5ndWxhciUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "og:description": "Create and deploy an Angular app to AWS with SST.", "twitter:card": "summary_large_image", "scrapeId": "5a6ad346-ad2c-4e92-aa63-c25212d169e6", "sourceURL": "https://sst.dev/docs/start/aws/angular", "url": "https://sst.dev/docs/start/aws/angular", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"tRPC on AWS with SST\"?\n\nAssistant: Create and deploy a tRPC API in AWS with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\n\nmkdir my-trpc-app && cd my-trpc-app\n\nnpm init -y\n```\n\n#### Init SST\n\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add the API\nLet’s add two Lambda functions; one for our tRPC server and one that’ll be our client. Update your `sst.config.ts`.\n\n```\nasync run() {\n\n  const trpc = new sst.aws.Function(\"Trpc\", {\n\n    url: true,\n\n    handler: \"index.handler\",\n\n  });\n\n  const client = new sst.aws.Function(\"Client\", {\n\n    url: true,\n\n    link: [trpc],\n\n    handler: \"client.handler\",\n\n  });\n\n  return {\n\n    api: trpc.url,\n\n    client: client.url,\n\n  };\n\n}\n```\n\nWe are linking the server to our client. This will allow us to access the URL of the server in our client.\n\n## Start dev mode\nStart your app in dev mode. This runs your functions [_Live_](https://sst.dev/docs/live/).\n\n```\nnpx sst dev\n```\n\nThis will give you two URLs.\n\n```\n+  Complete\n\n   api: https://gyrork2ll35rsuml2yr4lifuqu0tsjft.lambda-url.us-east-1.on.aws\n\n   client: https://3x4y4kg5zv77jeroxsrnjzde3q0tgxib.lambda-url.us-east-1.on.aws\n```\n\n## 3. Create the server\nLet’s create our tRPC server. Add the following to `index.ts`.\n\n```\nconst t = initTRPC\n\n  .context<CreateAWSLambdaContextOptions<APIGatewayProxyEvent | APIGatewayProxyEventV2>>()\n\n  .create();\n\nconst router = t.router({\n\n  greet: t.procedure\n\n    .input(z.object({ name: z.string() }))\n\n    .query(({ input }) => {\n\n      return `Hello ${input.name}!`;\n\n    }),\n\n});\n\nexport type Router = typeof router;\n\nexport const handler = awsLambdaRequestHandler({\n\n  router: router,\n\n  createContext: (opts) => opts,\n\n});\n```\n\nWe are creating a simple method called `greet` that takes a _string_ as an input.\n\nAdd the imports.\n\n```\nimport { z } from \"zod\";\n\nimport {\n\n  awsLambdaRequestHandler,\n\n  CreateAWSLambdaContextOptions\n\n} from \"@trpc/server/adapters/aws-lambda\";\n\nimport { initTRPC } from \"@trpc/server\";\n\nimport { APIGatewayProxyEvent, APIGatewayProxyEventV2 } from \"aws-lambda\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install zod @trpc/server@next\n```\n\n## 4. Add the client\nNow we’ll connect to our server in our client. Add the following to `client.ts`.\n\n```\nconst client = createTRPCClient<Router>({\n\n  links: [\\\n\\\n    httpBatchLink({\\\n\\\n      url: Resource.Trpc.url,\\\n\\\n    }),\\\n\\\n  ],\n\n});\n\nexport async function handler() {\n\n  return {\n\n    statusCode: 200,\n\n    body: await client.greet.query({ name: \"Patrick Star\" }),\n\n  };\n\n}\n```\n\nAdd the relevant imports. Notice we are importing the _types_ for our API.\n\n```\nimport { Resource } from \"sst\";\n\nimport type { Router } from \"./index\";\n\nimport { createTRPCClient, httpBatchLink } from \"@trpc/client\";\n```\n\nInstall the client npm package.\n\n```\nnpm install @trpc/client@next\n```\n\n## Test your app\nTo test our app, hit the client URL.\n\n```\ncurl https://3x4y4kg5zv77jeroxsrnjzde3q0tgxib.lambda-url.us-east-1.on.aws\n```\n\nThis will print out `Hello Patrick Star!`.\n\n## 5. Deploy your app\nNow let’s deploy your app.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/trpc", "title": "tRPC on AWS with SST", "description": "Create and deploy a tRPC API in AWS with SST.", "has_code_examples": true, "has_best_practices": false, "section_count": 8, "timestamp": "2025-02-27 21:14:35", "type": "overview", "page_metadata": {"description": "Create and deploy a tRPC API in AWS with SST.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Create and deploy a tRPC API in AWS with SST.", "og:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogDescription": "Create and deploy a tRPC API in AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/trpc/", "ogLocale": "en", "ogTitle": "tRPC on AWS with SST", "viewport": "width=device-width, initial-scale=1", "title": "tRPC on AWS with SST | SST", "og:title": "tRPC on AWS with SST", "language": "en", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:locale": "en", "og:url": "https://sst.dev/docs/start/aws/trpc/", "og:site_name": "SST", "og:type": "article", "ogSiteName": "SST", "scrapeId": "ab261233-b025-4fc3-837c-6d0d6bb578e4", "sourceURL": "https://sst.dev/docs/start/aws/trpc", "url": "https://sst.dev/docs/start/aws/trpc", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"tRPC on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nmkdir my-trpc-app && cd my-trpc-app\n\nnpm init -y\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Add the API\n```yaml\nasync run() {\n\n  const trpc = new sst.aws.Function(\"Trpc\", {\n\n    url: true,\n\n    handler: \"index.handler\",\n\n  });\n\n  const client = new sst.aws.Function(\"Client\", {\n\n    url: true,\n\n    link: [trpc],\n\n    handler: \"client.handler\",\n\n  });\n\n  return {\n\n    api: trpc.url,\n\n    client: client.url,\n\n  };\n\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/trpc", "title": "tRPC on AWS with SST", "description": "Create and deploy a tRPC API in AWS with SST.", "has_code_examples": true, "has_best_practices": false, "section_count": 8, "timestamp": "2025-02-27 21:14:35", "type": "code_examples", "page_metadata": {"description": "Create and deploy a tRPC API in AWS with SST.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Create and deploy a tRPC API in AWS with SST.", "og:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "ogDescription": "Create and deploy a tRPC API in AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/trpc/", "ogLocale": "en", "ogTitle": "tRPC on AWS with SST", "viewport": "width=device-width, initial-scale=1", "title": "tRPC on AWS with SST | SST", "og:title": "tRPC on AWS with SST", "language": "en", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/dFJQQyUyMG9uJTIwQVdTJTIwd2l0aCUyMFNTVA%3D%3D.png", "og:locale": "en", "og:url": "https://sst.dev/docs/start/aws/trpc/", "og:site_name": "SST", "og:type": "article", "ogSiteName": "SST", "scrapeId": "ab261233-b025-4fc3-837c-6d0d6bb578e4", "sourceURL": "https://sst.dev/docs/start/aws/trpc", "url": "https://sst.dev/docs/start/aws/trpc", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Prisma with Amazon RDS and SST\"?\n\nAssistant: Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating a Node.js app.\n\n```\n\nmkdir aws-prisma && cd aws-prisma\n\nnpm init -y\n```\n\nWe’ll install Prisma, TypeScript, and Express.\n\n```\nnpm install prisma typescript ts-node @types/node --save-dev\n\nnpm install express\n```\n\nLet’s initialize TypeScript and Prisma.\n\n```\nnpx tsc --init\n\nnpx prisma init\n```\n\nThis will create a `prisma` directory with a `schema.prisma`.\n\n## Init Express\nCreate your Express app by adding an `index.mjs` to the root.\n\n```\nimport express from \"express\";\n\nconst PORT = 80;\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n\n  res.send(\"Hello World!\")\n\n});\n\napp.listen(PORT, () => {\n\n  console.log(`Server is running on http://localhost:${PORT}`);\n\n});\n```\n\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add a Postgres db\nLet’s add a Postgres database using [Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html). This needs a VPC.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\n\n  const rds = new sst.aws.Postgres(\"MyPostgres\", { vpc });\n\n  const DATABASE_URL = $interpolate`postgresql://${rds.username}:${rds.password}@${rds.host}:${rds.port}/${rds.database}`;\n\n},\n```\n\nThe `bastion` option will let us connect to the VPC from our local machine.\n\nWe are also building the `DATABASE_URL` variable using the outputs from our RDS database. We’ll use this later.\n\n## Start Prisma Studio\nWhen you run SST in dev it can start other dev processes for you. In this case we want to start Prisma Studio. Add this below the `DATABASE_URL` variable.\n\n```\nnew sst.x.DevCommand(\"Prisma\", {\n\n  environment: { DATABASE_URL },\n\n  dev: {\n\n    autostart: false,\n\n    command: \"npx prisma studio\",\n\n  },\n\n});\n```\n\nThis will run the given command in dev.\n\n## 3. Add a Cluster\nTo deploy our Express app, let’s add an [AWS Fargate](https://aws.amazon.com/fargate/) container with [Amazon ECS](https://aws.amazon.com/ecs/). Add this at the end of your `sst.config.ts`.\n\n```\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n\n  cluster,\n\n  link: [rds],\n\n  environment: { DATABASE_URL },\n\n  loadBalancer: {\n\n    ports: [{ listen: \"80/http\" }],\n\n  },\n\n  dev: {\n\n    command: \"node --watch index.mjs\",\n\n  },\n\n});\n```\n\nThis uses the same VPC, and adds an ECS Cluster, with a Fargate service in it.\n\nThe `dev.command` tells SST to instead run our Express app locally in dev mode.\n\n## Install a tunnel\nSince our database cluster is in a VPC, we’ll need a tunnel to connect to it from our local machine.\n\n```\nsudo npx sst tunnel install\n```\n\nThis needs _sudo_ to create a network interface on your machine. You’ll only need to do this once on your machine.\n\n## Start dev mode\nStart your app in dev mode. This will take a few minutes.\n\n```\nnpx sst dev\n```\n\nIt’ll deploy your app, start a tunnel in the **Tunnel** tab, run your Express app locally in the **MyServiceDev** tab, and have your Prisma Studio in the **Studio** tab.\n\nWe are setting Prisma Studio to not auto-start since it pops up a browser window. You can start it by clicking on it and hitting _Enter_.\n\n## 4. Create a schema\nLet’s create a simple schema. Add this to your `schema.prisma`.\n\n```\nmodel User {\n\n  id    Int     @id @default(autoincrement())\n\n  name  String?\n\n  email String  @unique\n\n}\n```\n\n\n## Generate a migration\nWe’ll now generate a migration for this schema and apply it. In a separate terminal run:\n\n```\nnpx sst shell --target Prisma -- npx prisma migrate dev --name init\n```\n\nWe are wrapping the `prisma migrate dev --name init` command in `sst shell --target Prisma` because we want this command to have access to the `DATABASE_URL` defined in our `sst.config.ts`.\n\nThe `Prisma` target is coming from the `new sst.x.DevCommand(\"Prisma\")` component defined above.\n\nThis needs the tunnel to connect to the database. So you should have `sst dev` in a separate terminal.\n\n```\nnpx sst tunnel\n```\n\nAlternatively, you can just run the tunnel using the above command.\n\n## Prisma Studio\nTo see our schema in action we can open the Prisma Studio. Head over to the **Studio** tab in your `sst dev` session and hit enter to start it.\n![Initial Prisma Studio with SST](https://sst.dev/_astro/initial-prisma-studio-with-sst.Bx9t3J_7_1dnSf3.webp)\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/prisma", "title": "Prisma with Amazon RDS and SST", "description": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 21:14:56", "type": "overview", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/UHJpc21hJTIwd2l0aCUyMEFtYXpvbiUyMFJEUyUyMGFuZCUyMFNTVA%3D%3D.png", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Prisma with Amazon RDS and SST", "ogImage": "https://social-cards.sst.dev/v3-docs/UHJpc21hJTIwd2l0aCUyMEFtYXpvbiUyMFJEUyUyMGFuZCUyMFNTVA%3D%3D.png", "language": "en", "ogLocale": "en", "ogDescription": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "ogUrl": "https://sst.dev/docs/start/aws/prisma/", "og:site_name": "SST", "og:title": "Prisma with Amazon RDS and SST", "twitter:card": "summary_large_image", "title": "Prisma with Amazon RDS and SST | SST", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/start/aws/prisma/", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "description": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "og:image": "https://social-cards.sst.dev/v3-docs/UHJpc21hJTIwd2l0aCUyMEFtYXpvbiUyMFJEUyUyMGFuZCUyMFNTVA%3D%3D.png", "og:description": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "scrapeId": "5edc20b3-5be9-442d-a4cf-e2f008bf54aa", "sourceURL": "https://sst.dev/docs/start/aws/prisma", "url": "https://sst.dev/docs/start/aws/prisma", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Prisma with Amazon RDS and SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nmkdir aws-prisma && cd aws-prisma\nnpm init -y\n```\n\n### Install dependencies\n```yaml\nnpm install prisma typescript ts-node @types/node --save-dev\nnpm install express\n```\n\n### Initialize TypeScript and Prisma\n```yaml\nnpx tsc --init\nnpx prisma init\n```\n\n### Create Express app\n```yaml\nimport express from \"express\";\nconst PORT = 80;\nconst app = express();\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World!\")\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n```\n\n### Initialize SST\n```yaml\nnpx sst@latest init\nnpm install\n```\n\n### Add a Postgres db\n```yaml\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\n  const rds = new sst.aws.Postgres(\"MyPostgres\", { vpc });\n  const DATABASE_URL = $interpolate`postgresql://${rds.username}:${rds.password}@${rds.host}:${rds.port}/${rds.database}`;\n},\n```\n\n### Start Prisma Studio\n```yaml\nnew sst.x.DevCommand(\"Prisma\", {\n  environment: { DATABASE_URL },\n  dev: {\n    autostart: false,\n    command: \"npx prisma studio\",\n  },\n});\n```\n\n### Add a Cluster\n```yaml\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [rds],\n  environment: { DATABASE_URL },\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }],\n  },\n  dev: {\n    command: \"node --watch index.mjs\",\n  },\n});\n```\n\n### Install a tunnel\n```yaml\nsudo npx sst tunnel install\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Create a schema\n```yaml\nmodel User {\n  id    Int     @id @default(autoincrement())\n  name  String?\n  email String  @unique\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/prisma", "title": "Prisma with Amazon RDS and SST", "description": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 21:14:56", "type": "code_examples", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/UHJpc21hJTIwd2l0aCUyMEFtYXpvbiUyMFJEUyUyMGFuZCUyMFNTVA%3D%3D.png", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Prisma with Amazon RDS and SST", "ogImage": "https://social-cards.sst.dev/v3-docs/UHJpc21hJTIwd2l0aCUyMEFtYXpvbiUyMFJEUyUyMGFuZCUyMFNTVA%3D%3D.png", "language": "en", "ogLocale": "en", "ogDescription": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "ogUrl": "https://sst.dev/docs/start/aws/prisma/", "og:site_name": "SST", "og:title": "Prisma with Amazon RDS and SST", "twitter:card": "summary_large_image", "title": "Prisma with Amazon RDS and SST | SST", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/start/aws/prisma/", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "description": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "og:image": "https://social-cards.sst.dev/v3-docs/UHJpc21hJTIwd2l0aCUyMEFtYXpvbiUyMFJEUyUyMGFuZCUyMFNTVA%3D%3D.png", "og:description": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "scrapeId": "5edc20b3-5be9-442d-a4cf-e2f008bf54aa", "sourceURL": "https://sst.dev/docs/start/aws/prisma", "url": "https://sst.dev/docs/start/aws/prisma", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Prisma with Amazon RDS and SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• Use the bastion option to connect to the VPC from your local machine.\n• Set Prisma Studio to not auto-start to avoid browser pop-ups during development.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/prisma", "title": "Prisma with Amazon RDS and SST", "description": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 21:14:56", "type": "best_practices", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/UHJpc21hJTIwd2l0aCUyMEFtYXpvbiUyMFJEUyUyMGFuZCUyMFNTVA%3D%3D.png", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Prisma with Amazon RDS and SST", "ogImage": "https://social-cards.sst.dev/v3-docs/UHJpc21hJTIwd2l0aCUyMEFtYXpvbiUyMFJEUyUyMGFuZCUyMFNTVA%3D%3D.png", "language": "en", "ogLocale": "en", "ogDescription": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "ogUrl": "https://sst.dev/docs/start/aws/prisma/", "og:site_name": "SST", "og:title": "Prisma with Amazon RDS and SST", "twitter:card": "summary_large_image", "title": "Prisma with Amazon RDS and SST | SST", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/start/aws/prisma/", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "description": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "og:image": "https://social-cards.sst.dev/v3-docs/UHJpc21hJTIwd2l0aCUyMEFtYXpvbiUyMFJEUyUyMGFuZCUyMFNTVA%3D%3D.png", "og:description": "Use Prisma and SST to manage and deploy your Amazon Postgres RDS database.", "scrapeId": "5edc20b3-5be9-442d-a4cf-e2f008bf54aa", "sourceURL": "https://sst.dev/docs/start/aws/prisma", "url": "https://sst.dev/docs/start/aws/prisma", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Service\"?\n\nAssistant: Reference doc for the `sst.aws.Service` component.\n\nHere's a detailed explanation:\n\n\n## Create a Service\n```javascript\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nconst service = new sst.aws.Service(\"MyService\", { cluster });\n```\n\n## Configure the container image\nBy default, the service will look for a Dockerfile in the root directory. Optionally configure the image context and dockerfile.\n\n```javascript\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  image: {\n    context: \"./app\",\n    dockerfile: \"Dockerfile\"\n  }\n});\n``` \n\nTo add multiple containers in the service, pass in an array of containers args.\n\n```javascript\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  containers: [\n    {\n      name: \"app\",\n      image: \"nginxdemos/hello:plain-text\"\n    },\n    {\n      name: \"admin\",\n      image: {\n        context: \"./admin\",\n        dockerfile: \"Dockerfile\"\n      }\n    }\n  ]\n});\n``` \n\nThis is useful for running sidecar containers.\n\n## Enable auto-scaling\n```javascript\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  scaling: {\n    min: 4,\n    max: 16,\n    cpuUtilization: 50,\n    memoryUtilization: 50\n  }\n});\n```\n\n## Expose through API Gateway\nYou can give your service a public URL by exposing it through API Gateway HTTP API. You can also optionally give it a custom domain.\n\n```javascript\nconst service = new sst.aws.Service(\"MyService\", {\n  cluster,\n  serviceRegistry: {\n    port: 80\n  }\n});\n\nconst api = new sst.aws.ApiGatewayV2(\"MyApi\", {\n  vpc,\n  domain: \"example.com\"\n});\n\napi.routePrivate(\"$default\", service.nodes.cloudmapService.arn);\n```\n\n## Add a load balancer\nYou can also expose your service by adding a load balancer to it and optionally adding a custom domain.\n\n```javascript\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    domain: \"example.com\",\n    rules: [\n      { listen: \"80/http\" },\n      { listen: \"443/https\", forward: \"80/http\" }\n    ]\n  }\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your service. This will grant permissions to the resources and allow you to access it in your app.\n\n```javascript\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [bucket]\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your service.\n\n```javascript\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n## Service discovery\nThis component automatically creates a Cloud Map service host name for the service. So anything in the same VPC can access it using the service’s host name.\n\nFor example, if you link the service to a Lambda function that’s in the same VPC.\n\n```javascript\nnew sst.aws.Function(\"MyFunction\", {\n  vpc,\n  url: true,\n  link: [service],\n  handler: \"lambda.handler\"\n});\n```\n\nYou can access the service by its host name using the [SDK](https://sst.dev/docs/reference/sdk/).\n\n```javascript\nimport { Resource } from \"sst\";\n\nawait fetch(`http://${Resource.MyService.service}`);\n```\n\n[Check out an example](https://sst.dev/docs/examples/#aws-cluster-service-discovery).\n\n## Cost\nBy default, this uses a _Linux/X86_ _Fargate_ container with 0.25 vCPUs at $0.04048 per vCPU per hour and 0.5 GB of memory at $0.004445 per GB per hour. It includes 20GB of _Ephemeral Storage_ for free with additional storage at $0.000111 per GB per hour. Each container also gets a public IPv4 address at $0.005 per hour.\n\nIt works out to $0.04048 x 0.25 x 24 x 30 + $0.004445 x 0.5 x 24 x 30 + $0.005 x 24 x 30 or **$12 per month**.\n\nIf you are using all Fargate Spot instances with `capacity: \"spot\"`, it’s $0.01218784 x 0.25 x 24 x 30 + $0.00133831 x 0.5 x 24 x 30 + $0.005 x 24 x 30 or **$6 per month**.\n\nAdjust this for the `cpu`, `memory` and `storage` you are using. And check the prices for _Linux/ARM_ if you are using `arm64` as your `architecture`.\n\nThe above are rough estimates for _us-east-1_, check out the [Fargate pricing](https://aws.amazon.com/fargate/pricing/) and the [Public IPv4 Address pricing](https://aws.amazon.com/vpc/pricing/) for more details.\n\n## Scaling\nBy default, `scaling` is disabled. If enabled, adjust the above for the number of containers.\n\n## API Gateway\nIf you expose your service through API Gateway, you’ll need to add the cost of [API Gateway HTTP API](https://aws.amazon.com/api-gateway/pricing/#HTTP_APIs) as well. For services that don’t get a lot of traffic, this ends up being a lot cheaper since API Gateway is pay per request.\n\nLearn more about using [Cluster with API Gateway](https://sst.dev/docs/examples/#aws-cluster-with-api-gateway).\n\n## Application Load Balancer\nIf you add `loadBalancer` _HTTP_ or _HTTPS_ `rules`, an ALB is created at $0.0225 per hour, $0.008 per LCU-hour, and $0.005 per hour if HTTPS with a custom domain is used. Where LCU is a measure of how much traffic is processed.\n\nThat works out to $0.0225 x 24 x 30 or **$16 per month**. Add $0.005 x 24 x 30 or **$4 per** **month** for HTTPS. Also add the LCU-hour used.\n\nThe above are rough estimates for _us-east-1_, check out the [Application Load Balancer pricing](https://aws.amazon.com/elasticloadbalancing/pricing/) for more details.\n\n## Network Load Balancer\nIf you add `loadBalancer` _TCP_, _UDP_, or _TLS_ `rules`, an NLB is created at $0.0225 per hour and $0.006 per NLCU-hour. Where NCLU is a measure of how much traffic is processed.\n\nThat works out to $0.0225 x 24 x 30 or **$16 per month**. Also add the NLCU-hour used.\n\nThe above are rough estimates for _us-east-1_, check out the [Network Load Balancer pricing](https://aws.amazon.com/elasticloadbalancing/pricing/) for more details.\n\n## Constructor\n```javascript\nnew Service(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`ServiceArgs`](https://sst.dev/docs/component/aws/service#serviceargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/service", "title": "Service", "description": "Reference doc for the `sst.aws.Service` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-27 21:15:29", "type": "overview", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/service/", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2VydmljZQ%3D%3D.png", "twitter:card": "summary_large_image", "og:title": "Service", "favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.Service` component.", "ogSiteName": "SST", "title": "Service | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U2VydmljZQ%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "description": "Reference doc for the `sst.aws.Service` component.", "language": "en", "og:url": "https://sst.dev/docs/component/aws/service/", "og:site_name": "SST", "ogTitle": "Service", "ogDescription": "Reference doc for the `sst.aws.Service` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/U2VydmljZQ%3D%3D.png", "scrapeId": "ba14126d-1b73-4163-a5a8-bb4895049bb7", "sourceURL": "https://sst.dev/docs/component/aws/service", "url": "https://sst.dev/docs/component/aws/service", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Service\"?\n\nAssistant: Here are some code examples:\n\n### Create a Service\n```yaml\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nconst service = new sst.aws.Service(\"MyService\", { cluster });\n```\n\n### Configure the container image\n```yaml\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  image: {\n    context: \"./app\",\n    dockerfile: \"Dockerfile\"\n  }\n});\n```\n\n### Add multiple containers\n```yaml\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  containers: [\n    {\n      name: \"app\",\n      image: \"nginxdemos/hello:plain-text\"\n    },\n    {\n      name: \"admin\",\n      image: {\n        context: \"./admin\",\n        dockerfile: \"Dockerfile\"\n      }\n    }\n  ]\n});\n```\n\n### Enable auto-scaling\n```yaml\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  scaling: {\n    min: 4,\n    max: 16,\n    cpuUtilization: 50,\n    memoryUtilization: 50\n  }\n});\n```\n\n### Expose through API Gateway\n```yaml\nconst service = new sst.aws.Service(\"MyService\", {\n  cluster,\n  serviceRegistry: {\n    port: 80\n  }\n});\n\nconst api = new sst.aws.ApiGatewayV2(\"MyApi\", {\n  vpc,\n  domain: \"example.com\"\n});\n\napi.routePrivate(\"$default\", service.nodes.cloudmapService.arn);\n```\n\n### Add a load balancer\n```yaml\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    domain: \"example.com\",\n    rules: [\n      { listen: \"80/http\" },\n      { listen: \"443/https\", forward: \"80/http\" }\n    ]\n  }\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [bucket]\n});\n```\n\n### Service discovery\n```yaml\nnew sst.aws.Function(\"MyFunction\", {\n  vpc,\n  url: true,\n  link: [service],\n  handler: \"lambda.handler\"\n});\n```\n\n### Access service by host name\n```yaml\nimport { Resource } from \"sst\";\n\nawait fetch(`http://${Resource.MyService.service}`);\n```\n\n### Cost estimation\n```yaml\n$0.04048 x 0.25 x 24 x 30 + $0.004445 x 0.5 x 24 x 30 + $0.005 x 24 x 30 or **$12 per month**.\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/service", "title": "Service", "description": "Reference doc for the `sst.aws.Service` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-27 21:15:29", "type": "code_examples", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/service/", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2VydmljZQ%3D%3D.png", "twitter:card": "summary_large_image", "og:title": "Service", "favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.Service` component.", "ogSiteName": "SST", "title": "Service | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U2VydmljZQ%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "description": "Reference doc for the `sst.aws.Service` component.", "language": "en", "og:url": "https://sst.dev/docs/component/aws/service/", "og:site_name": "SST", "ogTitle": "Service", "ogDescription": "Reference doc for the `sst.aws.Service` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/U2VydmljZQ%3D%3D.png", "scrapeId": "ba14126d-1b73-4163-a5a8-bb4895049bb7", "sourceURL": "https://sst.dev/docs/component/aws/service", "url": "https://sst.dev/docs/component/aws/service", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Service\"?\n\nAssistant: Here are the recommended best practices:\n\n• If you expose your service through API Gateway, you’ll need to add the cost of API Gateway HTTP API as well. For services that don’t get a lot of traffic, this ends up being a lot cheaper since API Gateway is pay per request.\n• When you change the capacity, the ECS service is terminated and recreated. This will cause some temporary downtime.\n• If you notice a `Unhealthy: Health checks failed` error, verify the health check path and confirm the containers are operational.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/service", "title": "Service", "description": "Reference doc for the `sst.aws.Service` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 14, "timestamp": "2025-02-27 21:15:29", "type": "best_practices", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/service/", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2VydmljZQ%3D%3D.png", "twitter:card": "summary_large_image", "og:title": "Service", "favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.Service` component.", "ogSiteName": "SST", "title": "Service | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U2VydmljZQ%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "description": "Reference doc for the `sst.aws.Service` component.", "language": "en", "og:url": "https://sst.dev/docs/component/aws/service/", "og:site_name": "SST", "ogTitle": "Service", "ogDescription": "Reference doc for the `sst.aws.Service` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/U2VydmljZQ%3D%3D.png", "scrapeId": "ba14126d-1b73-4163-a5a8-bb4895049bb7", "sourceURL": "https://sst.dev/docs/component/aws/service", "url": "https://sst.dev/docs/component/aws/service", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Analog on AWS with SST\"?\n\nAssistant: Create and deploy an Analog app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\n\nnpm create analog@latest\n\ncd aws-analog\n```\n\nWe are picking the **Full-stack Application** option and **not adding Tailwind**.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\nIt’ll also ask you to update your `vite.config.ts` with something like this.\n\n```\nplugins: [analog({\\\n\\\n  nitro: {\\\n\\\n    preset: \"aws-lambda\",\\\n\\\n  }\\\n\\\n})],\n``\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Analog app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyWeb** in the sidebar and open your Analog app in your browser.\n\n## 2. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this above the `Analog` component.\n\n## Link the bucket\nNow, link the bucket to our Analog app.\n\n```\nnew sst.aws.Analog(\"MyWeb\", {\n\n  link: [bucket],\n\n});\n``\n\n## 3. Generate a pre-signed URL\nWhen our app loads, we’ll generate a pre-signed URL for the file upload on the server. Create a new `src/pages/index.server.ts` with the following.\n\n```\nimport { Resource } from 'sst';\n\nimport { PageServerLoad } from '@analogjs/router';\n\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\n\nexport const load = async ({ }: PageServerLoad) => {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    // @ts-ignore: Generated on deploy\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return {\n\n    url\n\n  };\n\n};\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n``\n\n## 4. Create an upload form\nAdd the upload form client in `src/pages/index.page.ts`. Replace it with the following.\n\n```\nimport { Component } from '@angular/core';\n\nimport { FormsModule } from '@angular/forms';\n\nimport { injectLoad } from '@analogjs/router';\n\nimport { toSignal } from '@angular/core/rxjs-interop';\n\nimport { load } from './index.server';\n\n@Component({\n\n  selector: 'app-home',\n\n  standalone: true,\n\n  imports: [FormsModule],\n\n  template: `\n\n    <form (ngSubmit)=\"onSubmit($event)\">\n\n      <input type=\"file\" name=\"file\">\n\n      <button type=\"submit\">Upload</button>\n\n    </form>\n\n  `,\n\n})\n\nexport default class HomeComponent {\n\n  data = toSignal(injectLoad<typeof load>(), { requireSync: true });\n\n  async onSubmit(event: Event): Promise<void> {\n\n    const file = (event.target as HTMLFormElement)['file'].files?.[0]!;\n\n    const image = await fetch(this.data().url, {\n\n      body: file,\n\n      method: 'PUT',\n\n      headers: {\n\n        'Content-Type': file.type,\n\n        'Content-Disposition': `attachment; filename=\"${file.name}\"`,\n\n      },\n\n    });\n\n    window.location.href = image.url.split('?')[0];\n\n  }\n\n}\n```\n\nHere we are injecting the pre-signed URL from the server into the component.\n\nHead over to the local Analog app site in your browser, `http://localhost:5173` and try **uploading an image**. You should see it upload and then download the image.\n\n## 5. Deploy your app\nNow let’s deploy your app to AWS.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and monitor it for any issues.\n\n![SST Console Autodeploy](https://sst.dev/_astro/sst-console-autodeploy.DTgdy-D4_Z1dQNdJ.webp)\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/analog", "title": "Analog on AWS with SST", "description": "Create and deploy an Analog app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:15:52", "type": "overview", "page_metadata": {"ogTitle": "Analog on AWS with SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QW5hbG9nJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "ogLocale": "en", "ogSiteName": "SST", "language": "en", "og:type": "article", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9nJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Analog on AWS with SST", "twitter:card": "summary_large_image", "ogDescription": "Create and deploy an Analog app to AWS with SST.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/start/aws/analog/", "ogUrl": "https://sst.dev/docs/start/aws/analog/", "favicon": "https://sst.dev/favicon.ico", "description": "Create and deploy an Analog app to AWS with SST.", "title": "Analog on AWS with SST | SST", "og:site_name": "SST", "og:description": "Create and deploy an Analog app to AWS with SST.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9nJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "scrapeId": "622818e1-5bb3-4d20-8441-64d89fee8260", "sourceURL": "https://sst.dev/docs/start/aws/analog", "url": "https://sst.dev/docs/start/aws/analog", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Analog on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnpm create analog@latest\n\ncd aws-analog\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\n### Link the bucket\n```yaml\nnew sst.aws.Analog(\"MyWeb\", {\n\n  link: [bucket],\n\n});\n```\n\n### Generate a pre-signed URL\n```yaml\nimport { Resource } from 'sst';\n\nimport { PageServerLoad } from '@analogjs/router';\n\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\n\nexport const load = async ({ }: PageServerLoad) => {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    // @ts-ignore: Generated on deploy\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return {\n\n    url\n\n  };\n\n};\n```\n\n### Install npm packages for pre-signed URL\n```yaml\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n### Create an upload form\n```yaml\nimport { Component } from '@angular/core';\n\nimport { FormsModule } from '@angular/forms';\n\nimport { injectLoad } from '@analogjs/router';\n\nimport { toSignal } from '@angular/core/rxjs-interop';\n\nimport { load } from './index.server';\n\n@Component({\n\n  selector: 'app-home',\n\n  standalone: true,\n\n  imports: [FormsModule],\n\n  template: `\n\n    <form (ngSubmit)=\"onSubmit($event)\">\n\n      <input type=\"file\" name=\"file\">\n\n      <button type=\"submit\">Upload</button>\n\n    </form>\n\n  `,\n\n})\n\nexport default class HomeComponent {\n\n  data = toSignal(injectLoad<typeof load>(), { requireSync: true });\n\n  async onSubmit(event: Event): Promise<void> {\n\n    const file = (event.target as HTMLFormElement)['file'].files?.[0]!;\n\n    const image = await fetch(this.data().url, {\n\n      body: file,\n\n      method: 'PUT',\n\n      headers: {\n\n        'Content-Type': file.type,\n\n        'Content-Disposition': `attachment; filename=\"${file.name}\"`,\n\n      },\n\n    });\n\n    window.location.href = image.url.split('?')[0];\n\n  }\n\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/analog", "title": "Analog on AWS with SST", "description": "Create and deploy an Analog app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:15:52", "type": "code_examples", "page_metadata": {"ogTitle": "Analog on AWS with SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QW5hbG9nJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "ogLocale": "en", "ogSiteName": "SST", "language": "en", "og:type": "article", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9nJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Analog on AWS with SST", "twitter:card": "summary_large_image", "ogDescription": "Create and deploy an Analog app to AWS with SST.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/start/aws/analog/", "ogUrl": "https://sst.dev/docs/start/aws/analog/", "favicon": "https://sst.dev/favicon.ico", "description": "Create and deploy an Analog app to AWS with SST.", "title": "Analog on AWS with SST | SST", "og:site_name": "SST", "og:description": "Create and deploy an Analog app to AWS with SST.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9nJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "scrapeId": "622818e1-5bb3-4d20-8441-64d89fee8260", "sourceURL": "https://sst.dev/docs/start/aws/analog", "url": "https://sst.dev/docs/start/aws/analog", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Analog on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• It's good to create a new stage for production when deploying your app.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/analog", "title": "Analog on AWS with SST", "description": "Create and deploy an Analog app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 9, "timestamp": "2025-02-27 21:15:52", "type": "best_practices", "page_metadata": {"ogTitle": "Analog on AWS with SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QW5hbG9nJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "ogLocale": "en", "ogSiteName": "SST", "language": "en", "og:type": "article", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9nJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "viewport": "width=device-width, initial-scale=1", "og:title": "Analog on AWS with SST", "twitter:card": "summary_large_image", "ogDescription": "Create and deploy an Analog app to AWS with SST.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:url": "https://sst.dev/docs/start/aws/analog/", "ogUrl": "https://sst.dev/docs/start/aws/analog/", "favicon": "https://sst.dev/favicon.ico", "description": "Create and deploy an Analog app to AWS with SST.", "title": "Analog on AWS with SST | SST", "og:site_name": "SST", "og:description": "Create and deploy an Analog app to AWS with SST.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QW5hbG9nJTIwb24lMjBBV1MlMjB3aXRoJTIwU1NU.png", "scrapeId": "622818e1-5bb3-4d20-8441-64d89fee8260", "sourceURL": "https://sst.dev/docs/start/aws/analog", "url": "https://sst.dev/docs/start/aws/analog", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Remix on AWS with SST\"?\n\nAssistant: Create and deploy a Remix app to AWS with SST.\n\nHere's a detailed explanation:\n\n\n## Serverless\nWe are going to create a Remix app, add an S3 Bucket for file uploads, and deploy it to using the `Remix` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our project.\n\n```\n\nnpx create-remix@latest aws-remix\n\ncd aws-remix\n```\n\nWe are picking all the default options.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n\nnpm install\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Remix app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyWeb** in the sidebar and open your Remix app in your browser.\n\n## 2. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this above the `Remix` component.\n\n## Link the bucket\nNow, link the bucket to our Remix app.\n\n```\nnew sst.aws.Remix(\"MyWeb\", {\n\n  link: [bucket],\n\n});\n```\n\n## 3. Create an upload form\nAdd the upload form client in `app/routes/_index.tsx`. Replace the `Index` component with:\n\n```\nexport default function Index() {\n\n  const data = useLoaderData<typeof loader>();\n\n  return (\n\n    <div className=\"flex h-screen items-center justify-center\">\n\n      <div className=\"flex flex-col items-center gap-8\">\n\n        <h1 className=\"leading text-2xl font-bold text-gray-800 dark:text-gray-100\">\n\n          Welcome to Remix\n\n        </h1>\n\n        <form\n\n          className=\"flex flex-row gap-4\"\n\n          onSubmit={async (e) => {\n\n            e.preventDefault();\n\n            const file = (e.target as HTMLFormElement).file.files?.[0]!;\n\n            const image = await fetch(data.url, {\n\n              body: file,\n\n              method: \"PUT\",\n\n              headers: {\n\n                \"Content-Type\": file.type,\n\n                \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n              },\n\n            });\n\n            window.location.href = image.url.split(\"?\")[0];\n\n          }}\n\n        >\n\n          <input\n\n            name=\"file\"\n\n            type=\"file\"\n\n            accept=\"image/png, image/jpeg\"\n\n            className=\"block w-full text-sm text-slate-500\n\n              file:mr-4 file:py-2 file:px-4\n\n              file:rounded-full file:border-0\n\n              file:text-sm file:font-semibold\n\n              file:bg-violet-50 file:text-violet-700\n\n              hover:file:bg-violet-100\" />\n\n          <button className=\"bg-violet-500 hover:bg-violet-700 text-white text-sm\n\n            font-semibold py-2 px-4 rounded-full\">\n\n            Upload\n\n          </button>\n\n        </form>\n\n      </div>\n\n    </div>\n  );\n}\n```\n\n## 4. Generate a pre-signed URL\nWhen our app loads, we’ll generate a pre-signed URL for the file upload and use it in the form.\n\nAdd this above the `Index` component in `app/routes/_index.tsx`.\n\n```\nexport async function loader() {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\nAdd the relevant imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\nHead over to the local Remix app in your browser, `http://localhost:5173` and try **uploading an image**. You should see it upload and then download the image.\n\n## 5. Deploy your app\nNow let’s deploy your app to AWS.\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\nCongrats! Your site should now be live!\n\n## Containers\nWe are going to create a Remix app, add an S3 Bucket for file uploads, and deploy it in a container with the `Cluster` component.\n\nBefore you get started, make sure to [configure your AWS credentials](https://sst.dev/docs/iam-credentials#credentials).\n\n## 1. Create a project\nLet’s start by creating our app.\n\n```\nnpx create-remix@latest aws-remix-container\n\ncd aws-remix-container\n```\n\nWe are picking all the default options.\n\n## Init SST\nNow let’s initialize SST in our app.\n\n```\nnpx sst@latest init\n```\n\nSelect the defaults and pick **AWS**. This’ll create a `sst.config.ts` file in your project root.\n\n## 2. Add a Service\nTo deploy our Remix app in a container, we’ll use [AWS Fargate](https://aws.amazon.com/fargate/) with [Amazon ECS](https://aws.amazon.com/ecs/). Replace the `run` function in your `sst.config.ts`.\n\n```\nasync run() {\n\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n\n    cluster,\n\n    loadBalancer: {\n\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n\n    },\n\n    dev: {\n\n      command: \"npm run dev\",\n\n    },\n\n  });\n}\n```\n\nThis creates a VPC, and an ECS Cluster with a Fargate service in it.\n\nThe `dev.command` tells SST to instead run our Remix app locally in dev mode.\n\n## Start dev mode\nRun the following to start dev mode. This’ll start SST and your Remix app.\n\n```\nnpx sst dev\n```\n\nOnce complete, click on **MyService** in the sidebar and open your Remix app in your browser.\n\n## 3. Add an S3 Bucket\nLet’s allow public `access` to our S3 Bucket for file uploads. Update your `sst.config.ts`.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n\n});\n```\n\nAdd this below the `Vpc` component.\n\n## Link the bucket\nNow, link the bucket to the container.\n\n```\nnew sst.aws.Service(\"MyService\", {\n\n  // ...\n\n  link: [bucket],\n\n});\n```\n\nThis will allow us to reference the bucket in our Remix app.\n\n## 4. Create an upload form\nAdd the upload form client in `app/routes/_index.tsx`. Replace the `Index` component with:\n\n```\nexport default function Index() {\n\n  const data = useLoaderData<typeof loader>();\n\n  return (\n\n    <div className=\"flex h-screen items-center justify-center\">\n\n      <div className=\"flex flex-col items-center gap-8\">\n\n        <h1 className=\"leading text-2xl font-bold text-gray-800 dark:text-gray-100\">\n\n          Welcome to Remix\n\n        </h1>\n\n        <form\n\n          className=\"flex flex-row gap-4\"\n\n          onSubmit={async (e) => {\n\n            e.preventDefault();\n\n            const file = (e.target as HTMLFormElement).file.files?.[0]!;\n\n            const image = await fetch(data.url, {\n\n              body: file,\n\n              method: \"PUT\",\n\n              headers: {\n\n                \"Content-Type\": file.type,\n\n                \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n              },\n\n            });\n\n            window.location.href = image.url.split(\"?\")[0];\n\n          }}\n\n        >\n\n          <input\n\n            name=\"file\"\n\n            type=\"file\"\n\n            accept=\"image/png, image/jpeg\"\n\n            className=\"block w-full text-sm text-slate-500\n\n              file:mr-4 file:py-2 file:px-4\n\n              file:rounded-full file:border-0\n\n              file:text-sm file:font-semibold\n\n              file:bg-violet-50 file:text-violet-700\n\n              hover:file:bg-violet-100\" />\n\n          <button className=\"bg-violet-500 hover:bg-violet-700 text-white text-sm\n\n            font-semibold py-2 px-4 rounded-full\">\n\n            Upload\n\n          </button>\n\n        </form>\n\n      </div>\n\n    </div>\n  );\n}\n```\n\n## 5. Generate a pre-signed URL\nWhen our app loads, we’ll generate a pre-signed URL for the file upload and use it in the form.\n\nAdd this above the `Index` component in `app/routes/_index.tsx`.\n\n```\nexport async function loader() {\n\n  const command = new PutObjectCommand({\n\n    Key: crypto.randomUUID(),\n\n    Bucket: Resource.MyBucket.name,\n\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\nAdd the relevant imports.\n\n```\nimport { Resource } from \"sst\";\n\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\nAnd install the npm packages.\n\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\nHead over to the local Remix app in your browser, `http://localhost:5173` and try **uploading an image**. You should see it upload and then download the image.\n\n## 6. Deploy your app\nTo deploy our app we’ll add a `Dockerfile`.\n\n```\nFROM node:lts-alpine as base\n\nENV NODE_ENV production\n\n# Stage 1: Install all node_modules, including dev dependencies\n\nFROM base as deps\n\nWORKDIR /myapp\n\nADD package.json ./\n\nRUN npm install --include=dev\n\n# Stage 2: Setup production node_modules\n\nFROM base as production-deps\n\nWORKDIR /myapp\n\nCOPY --from=deps /myapp/node_modules /myapp/node_modules\n\nADD package.json ./\n\nRUN npm prune --omit=dev\n\n# Stage 3: Build the app\n\nFROM base as build\n\nWORKDIR /myapp\n\nCOPY --from=deps /myapp/node_modules /myapp/node_modules\n\nADD . .\n\nRUN npm run build\n\n# Stage 4: Build the production image\n\nFROM base\n\nWORKDIR /myapp\n\nCOPY --from=production-deps /myapp/node_modules /myapp/node_modules\n\nCOPY --from=build /myapp/build /myapp/build\n\nCOPY --from=build /myapp/public /myapp/public\n\nADD . .\n\nCMD [\"npm\", \"start\"]\n```\n\nThis builds our Remix app in a Docker image.\n\nLet’s also add a `.dockerignore` file in the root.\n\n```\nnode_modules\n\n.cache\n\nbuild\n\npublic/build\n```\n\nNow to build our Docker image and deploy we run:\n\n```\nnpx sst deploy --stage production\n```\n\nYou can use any stage name here but it’s good to create a new stage for production.\n\nCongrats! Your app should now be live!\n\n## Connect the console\nAs a next step, you can setup the [SST Console](https://sst.dev/docs/console/) to _**git push to deploy**_ your app and view logs from it.\n\nYou can [create a free account](https://console.sst.dev/) and connect it to your AWS account.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/remix", "title": "Remix on AWS with SST", "description": "Create and deploy a Remix app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-27 21:16:42", "type": "overview", "page_metadata": {"og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVtaXglMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "og:image": "https://social-cards.sst.dev/v3-docs/UmVtaXglMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "title": "Remix on AWS with SST | SST", "ogTitle": "Remix on AWS with SST", "og:url": "https://sst.dev/docs/start/aws/remix/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogDescription": "Create and deploy a Remix app to AWS with SST.", "og:description": "Create and deploy a Remix app to AWS with SST.", "ogSiteName": "SST", "og:locale": "en", "twitter:card": "summary_large_image", "og:title": "Remix on AWS with SST", "favicon": "https://sst.dev/favicon.ico", "language": "en", "og:site_name": "SST", "description": "Create and deploy a Remix app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/remix/", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVtaXglMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "cd7d430c-8e64-4fb3-949b-067fa200a031", "sourceURL": "https://sst.dev/docs/start/aws/remix", "url": "https://sst.dev/docs/start/aws/remix", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Remix on AWS with SST\"?\n\nAssistant: Here are some code examples:\n\n### Create a project\n```yaml\nnpx create-remix@latest aws-remix\n\ncd aws-remix\n```\n\n### Init SST\n```yaml\nnpx sst@latest init\n\nnpm install\n```\n\n### Start dev mode\n```yaml\nnpx sst dev\n```\n\n### Add an S3 Bucket\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n\n  access: \"public\"\n});\n```\n\n### Link the bucket\n```yaml\nnew sst.aws.Remix(\"MyWeb\", {\n\n  link: [bucket],\n\n});\n```\n\n### Create an upload form\n```yaml\nexport default function Index() {\n\n  const data = useLoaderData<typeof loader>();\n\n  return (\n\n    <div className=\"flex h-screen items-center justify-center\">\n\n      <div className=\"flex flex-col items-center gap-8\">\n\n        <h1 className=\"leading text-2xl font-bold text-gray-800 dark:text-gray-100\">\n\n          Welcome to Remix\n\n        </h1>\n\n        <form\n\n          className=\"flex flex-row gap-4\"\n\n          onSubmit={async (e) => {\n\n            e.preventDefault();\n\n            const file = (e.target as HTMLFormElement).file.files?.[0]!;\n\n            const image = await fetch(data.url, {\n\n              body: file,\n\n              method: \"PUT\",\n\n              headers: {\n\n                \"Content-Type\": file.type,\n\n                \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n\n              },\n\n            });\n\n            window.location.href = image.url.split(\"?\")[0];\n\n          }}\n\n        >\n\n          <input\n\n            name=\"file\"\n\n            type=\"file\"\n\n            accept=\"image/png, image/jpeg\"\n\n            className=\"block w-full text-sm text-slate-500\n\n              file:mr-4 file:py-2 file:px-4\n\n              file:rounded-full file:border-0\n\n              file:text-sm file:font-semibold\n\n              file:bg-violet-50 file:text-violet-700\n\n              hover:file:bg-violet-100\" />\n\n          <button className=\"bg-violet-500 hover:bg-violet-700 text-white text-sm\n\n            font-semibold py-2 px-4 rounded-full\">\n\n            Upload\n\n          </button>\n\n        </form>\n\n      </div>\n\n    </div>\n  );\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/remix", "title": "Remix on AWS with SST", "description": "Create and deploy a Remix app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-27 21:16:42", "type": "code_examples", "page_metadata": {"og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVtaXglMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "og:image": "https://social-cards.sst.dev/v3-docs/UmVtaXglMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "title": "Remix on AWS with SST | SST", "ogTitle": "Remix on AWS with SST", "og:url": "https://sst.dev/docs/start/aws/remix/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogDescription": "Create and deploy a Remix app to AWS with SST.", "og:description": "Create and deploy a Remix app to AWS with SST.", "ogSiteName": "SST", "og:locale": "en", "twitter:card": "summary_large_image", "og:title": "Remix on AWS with SST", "favicon": "https://sst.dev/favicon.ico", "language": "en", "og:site_name": "SST", "description": "Create and deploy a Remix app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/remix/", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVtaXglMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "cd7d430c-8e64-4fb3-949b-067fa200a031", "sourceURL": "https://sst.dev/docs/start/aws/remix", "url": "https://sst.dev/docs/start/aws/remix", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Remix on AWS with SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to configure your AWS credentials before starting.\n• It's good to create a new stage for production when deploying your app.\n• When using Docker, add a `.dockerignore` file to exclude unnecessary files.\n", "metadata": {"source_url": "https://sst.dev/docs/start/aws/remix", "title": "Remix on AWS with SST", "description": "Create and deploy a Remix app to AWS with SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 20, "timestamp": "2025-02-27 21:16:42", "type": "best_practices", "page_metadata": {"og:type": "article", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVtaXglMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "og:image": "https://social-cards.sst.dev/v3-docs/UmVtaXglMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "title": "Remix on AWS with SST | SST", "ogTitle": "Remix on AWS with SST", "og:url": "https://sst.dev/docs/start/aws/remix/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogDescription": "Create and deploy a Remix app to AWS with SST.", "og:description": "Create and deploy a Remix app to AWS with SST.", "ogSiteName": "SST", "og:locale": "en", "twitter:card": "summary_large_image", "og:title": "Remix on AWS with SST", "favicon": "https://sst.dev/favicon.ico", "language": "en", "og:site_name": "SST", "description": "Create and deploy a Remix app to AWS with SST.", "ogUrl": "https://sst.dev/docs/start/aws/remix/", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVtaXglMjBvbiUyMEFXUyUyMHdpdGglMjBTU1Q%3D.png", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "scrapeId": "cd7d430c-8e64-4fb3-949b-067fa200a031", "sourceURL": "https://sst.dev/docs/start/aws/remix", "url": "https://sst.dev/docs/start/aws/remix", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Cluster\"?\n\nAssistant: Reference doc for the `sst.aws.Cluster` component.\n\nHere's a detailed explanation:\n\n\n## Create a Cluster\n```javascript\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n```\n\nOnce created, you can add the following to your cluster:\n\n- Services: These are containers that are always running, like web or application servers. They automatically restart if they fail.\n- Tasks: These are containers that are used for long running asynchronous work, like data processing.\n\n## Constructor\n```javascript\nnew Cluster(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`ClusterArgs`](https://sst.dev/docs/component/aws/cluster#clusterargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cluster", "title": "Cluster", "description": "Reference doc for the `sst.aws.Cluster` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:16:49", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlcg%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Cluster` component.", "og:type": "article", "twitter:card": "summary_large_image", "language": "en", "description": "Reference doc for the `sst.aws.Cluster` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlcg%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/cluster/", "title": "Cluster | SST", "ogTitle": "Cluster", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Cluster", "ogUrl": "https://sst.dev/docs/component/aws/cluster/", "ogSiteName": "SST", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "og:description": "Reference doc for the `sst.aws.Cluster` component.", "og:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlcg%3D%3D.png", "scrapeId": "e16ea05a-24f1-4ca6-bdf9-6ff77432d00d", "sourceURL": "https://sst.dev/docs/component/aws/cluster", "url": "https://sst.dev/docs/component/aws/cluster", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Cluster\"?\n\nAssistant: Here are some code examples:\n\n### Create a VPC\n```yaml\nconst myVpc = new sst.aws.Vpc(\"MyVpc\");\n```\n\n### Pass VPC to Cluster\n```yaml\n{\n  vpc: myVpc\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cluster", "title": "Cluster", "description": "Reference doc for the `sst.aws.Cluster` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:16:49", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlcg%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Cluster` component.", "og:type": "article", "twitter:card": "summary_large_image", "language": "en", "description": "Reference doc for the `sst.aws.Cluster` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlcg%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/cluster/", "title": "Cluster | SST", "ogTitle": "Cluster", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Cluster", "ogUrl": "https://sst.dev/docs/component/aws/cluster/", "ogSiteName": "SST", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "og:description": "Reference doc for the `sst.aws.Cluster` component.", "og:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlcg%3D%3D.png", "scrapeId": "e16ea05a-24f1-4ca6-bdf9-6ff77432d00d", "sourceURL": "https://sst.dev/docs/component/aws/cluster", "url": "https://sst.dev/docs/component/aws/cluster", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Cluster\"?\n\nAssistant: Here are the recommended best practices:\n\n• By default, both the load balancer and the services are deployed in public subnets.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cluster", "title": "Cluster", "description": "Reference doc for the `sst.aws.Cluster` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 3, "timestamp": "2025-02-27 21:16:49", "type": "best_practices", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlcg%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Cluster` component.", "og:type": "article", "twitter:card": "summary_large_image", "language": "en", "description": "Reference doc for the `sst.aws.Cluster` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlcg%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/cluster/", "title": "Cluster | SST", "ogTitle": "Cluster", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Cluster", "ogUrl": "https://sst.dev/docs/component/aws/cluster/", "ogSiteName": "SST", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "og:description": "Reference doc for the `sst.aws.Cluster` component.", "og:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlcg%3D%3D.png", "scrapeId": "e16ea05a-24f1-4ca6-bdf9-6ff77432d00d", "sourceURL": "https://sst.dev/docs/component/aws/cluster", "url": "https://sst.dev/docs/component/aws/cluster", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Astro\"?\n\nAssistant: Reference doc for the `sst.aws.Astro` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\nDeploy the Astro site that’s in the project root.\n\n```\nnew sst.aws.Astro(\"MyWeb\");\n```\n\n## Change the path\nDeploys the Astro site in the `my-astro-app/` directory.\n\n```\nnew sst.aws.Astro(\"MyWeb\", {\n  path: \"my-astro-app/\"\n});\n```\n\n## Add a custom domain\nSet a custom domain for your Astro site.\n\n```\nnew sst.aws.Astro(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n## Redirect www to apex domain\nRedirect `www.my-app.com` to `my-app.com`.\n\n```\nnew sst.aws.Astro(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your Astro site. This will grant permissions to the resources and allow you to access it in your site.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Astro(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your Astro site.\n\n```\n---\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyBucket.name);\n---\n```\n\n## Constructor\n```\nnew Astro(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`AstroArgs`](https://sst.dev/docs/component/aws/astro#astroargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/astro", "title": "Astro", "description": "Reference doc for the `sst.aws.Astro` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:17:00", "type": "overview", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.Astro` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8%3D.png", "og:description": "Reference doc for the `sst.aws.Astro` component.", "og:type": "article", "ogUrl": "https://sst.dev/docs/component/aws/astro/", "title": "Astro | SST", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.aws.Astro` component.", "og:site_name": "SST", "og:title": "Astro", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8%3D.png", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXN0cm8%3D.png", "ogTitle": "Astro", "twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/component/aws/astro/", "ogLocale": "en", "scrapeId": "21230021-0766-481d-8199-607d36900f7a", "sourceURL": "https://sst.dev/docs/component/aws/astro", "url": "https://sst.dev/docs/component/aws/astro", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Astro\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nnew sst.aws.Astro(\"MyWeb\");\n```\n\n### Change the path\n```yaml\nnew sst.aws.Astro(\"MyWeb\", {\n  path: \"my-astro-app/\"\n});\n```\n\n### Add a custom domain\n```yaml\nnew sst.aws.Astro(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Redirect www to apex domain\n```yaml\nnew sst.aws.Astro(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Astro(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### SDK access example\n```yaml\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyBucket.name);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/astro", "title": "Astro", "description": "Reference doc for the `sst.aws.Astro` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:17:00", "type": "code_examples", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.Astro` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8%3D.png", "og:description": "Reference doc for the `sst.aws.Astro` component.", "og:type": "article", "ogUrl": "https://sst.dev/docs/component/aws/astro/", "title": "Astro | SST", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.aws.Astro` component.", "og:site_name": "SST", "og:title": "Astro", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8%3D.png", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXN0cm8%3D.png", "ogTitle": "Astro", "twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/component/aws/astro/", "ogLocale": "en", "scrapeId": "21230021-0766-481d-8199-607d36900f7a", "sourceURL": "https://sst.dev/docs/component/aws/astro", "url": "https://sst.dev/docs/component/aws/astro", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Astro\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the SDK to access linked resources in your Astro site.\n• Configure environment variables in your Astro site with the prefix 'PUBLIC_' for client-side access.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/astro", "title": "Astro", "description": "Reference doc for the `sst.aws.Astro` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:17:00", "type": "best_practices", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.Astro` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8%3D.png", "og:description": "Reference doc for the `sst.aws.Astro` component.", "og:type": "article", "ogUrl": "https://sst.dev/docs/component/aws/astro/", "title": "Astro | SST", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.aws.Astro` component.", "og:site_name": "SST", "og:title": "Astro", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXN0cm8%3D.png", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXN0cm8%3D.png", "ogTitle": "Astro", "twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/component/aws/astro/", "ogLocale": "en", "scrapeId": "21230021-0766-481d-8199-607d36900f7a", "sourceURL": "https://sst.dev/docs/component/aws/astro", "url": "https://sst.dev/docs/component/aws/astro", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"AWS DNS Adapter\"?\n\nAssistant: Reference doc for the `sst.aws.dns` adapter.\n\nHere's a detailed explanation:\n\n\n## Functions\n### dns(args?)\n\n#### Parameters\n\n- `args?` [`DnsArgs`](https://sst.dev/docs/component/aws/dns#dnsargs)\n\n**Returns** `Object`\n\n## DnsArgs\n### override?\n\n**Type** `Input` `<` `boolean` `>`\n\n**Default** `false`\n\nSet to `true` if you want to let the new DNS records replace the existing ones.\n\nThis is useful if your domain is currently used by another app and you want to switch it to your current app. Without setting this, you’ll first have to remove the existing DNS records and then add the new one. This can cause downtime.\n\nYou can avoid this by setting this to `true` and the existing DNS records will be replaced without any downtime. Just make sure that when you remove your old app, you don’t remove the DNS records.\n\n```\n{\n  override: true\n}\n```\n\n### transform?\n\n**Type** `Object`\n\n- [`record?`](https://sst.dev/docs/component/aws/dns#transform-record)\n\n[Transform](https://sst.dev/docs/components#transform) how this component creates its underlying resources.\n\n#### transform.record?\n\n**Type** [`RecordArgs`](https://www.pulumi.com/registry/packages/aws/api-docs/route53/record/#inputs) ` | ` `(` `args` `: ` [`RecordArgs`](https://www.pulumi.com/registry/packages/aws/api-docs/route53/record/#inputs) `, ` `opts` `: ` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/) `, ` `name` `: ` `string` `)` ` => ` `void`\n\nTransform the AWS Route 53 record resource.\n\n### zone?\n\n**Type** `Input` `<` `string` `>`\n\nSet the hosted zone ID if you have multiple hosted zones that have the same domain in Route 53.\n\nThe 14 letter ID of the [Route 53 hosted zone](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-working-with.html) that contains the `domainName`. You can find the hosted zone ID in the Route 53 part of the AWS Console.\n\n```\n{\n  zone: \"Z2FDTNDATAQYW2\"\n}\n```\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dns", "title": "AWS DNS Adapter", "description": "Reference doc for the `sst.aws.dns` adapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:17:12", "type": "overview", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "AWS DNS Adapter | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QVdTJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "AWS DNS Adapter", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "og:type": "article", "og:title": "AWS DNS Adapter", "ogUrl": "https://sst.dev/docs/component/aws/dns/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:site_name": "SST", "og:url": "https://sst.dev/docs/component/aws/dns/", "language": "en", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.dns` adapter.", "og:description": "Reference doc for the `sst.aws.dns` adapter.", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.aws.dns` adapter.", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "scrapeId": "2d53fa01-f483-4902-ad85-4b0386df2ce5", "sourceURL": "https://sst.dev/docs/component/aws/dns", "url": "https://sst.dev/docs/component/aws/dns", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"AWS DNS Adapter\"?\n\nAssistant: Here are some code examples:\n\n### Basic DNS Configuration\n```yaml\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.aws.dns()\n  }\n}\n```\n\n### DNS Configuration with Hosted Zone ID\n```yaml\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.aws.dns({\n      zone: \"Z2FDTNDATAQYW2\"\n    })\n  }\n}\n```\n\n### Override Existing DNS Records\n```yaml\n{\n  override: true\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dns", "title": "AWS DNS Adapter", "description": "Reference doc for the `sst.aws.dns` adapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:17:12", "type": "code_examples", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "AWS DNS Adapter | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QVdTJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "AWS DNS Adapter", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "og:type": "article", "og:title": "AWS DNS Adapter", "ogUrl": "https://sst.dev/docs/component/aws/dns/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:site_name": "SST", "og:url": "https://sst.dev/docs/component/aws/dns/", "language": "en", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.dns` adapter.", "og:description": "Reference doc for the `sst.aws.dns` adapter.", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.aws.dns` adapter.", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "scrapeId": "2d53fa01-f483-4902-ad85-4b0386df2ce5", "sourceURL": "https://sst.dev/docs/component/aws/dns", "url": "https://sst.dev/docs/component/aws/dns", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"AWS DNS Adapter\"?\n\nAssistant: Here are the recommended best practices:\n\n• Set the override parameter to true to replace existing DNS records without downtime.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dns", "title": "AWS DNS Adapter", "description": "Reference doc for the `sst.aws.dns` adapter.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:17:12", "type": "best_practices", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "AWS DNS Adapter | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QVdTJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "AWS DNS Adapter", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "og:type": "article", "og:title": "AWS DNS Adapter", "ogUrl": "https://sst.dev/docs/component/aws/dns/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:site_name": "SST", "og:url": "https://sst.dev/docs/component/aws/dns/", "language": "en", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.dns` adapter.", "og:description": "Reference doc for the `sst.aws.dns` adapter.", "favicon": "https://sst.dev/favicon.ico", "description": "Reference doc for the `sst.aws.dns` adapter.", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/QVdTJTIwRE5TJTIwQWRhcHRlcg%3D%3D.png", "scrapeId": "2d53fa01-f483-4902-ad85-4b0386df2ce5", "sourceURL": "https://sst.dev/docs/component/aws/dns", "url": "https://sst.dev/docs/component/aws/dns", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Cloudflare Linkable helper\"?\n\nAssistant: Reference doc for the `sst.cloudflare.binding` helper.\n\nHere's a detailed explanation:\n\n\n## Functions\n### binding\n\n```javascript\nbinding(input)\n```\n\n#### Parameters\n\n- `input` [`KvBinding`](https://sst.dev/docs/component/cloudflare/binding#kvbinding) ` | ` [`SecretTextBinding`](https://sst.dev/docs/component/cloudflare/binding#secrettextbinding) ` | ` [`ServiceBinding`](https://sst.dev/docs/component/cloudflare/binding#servicebinding) ` | ` [`PlainTextBinding`](https://sst.dev/docs/component/cloudflare/binding#plaintextbinding) ` | ` [`QueueBinding`](https://sst.dev/docs/component/cloudflare/binding#queuebinding) ` | ` [`R2BucketBinding`](https://sst.dev/docs/component/cloudflare/binding#r2bucketbinding) ` | ` [`D1DatabaseBinding`](https://sst.dev/docs/component/cloudflare/binding#d1databasebinding)\n\n**Returns** `Object`\n\n## D1DatabaseBinding\n### properties\n\n**Type** `Object`\n\n- [`databaseId`](https://sst.dev/docs/component/cloudflare/binding#properties-databaseid)\n\n#### properties.databaseId\n\n**Type** `Input` `<` `string` `>`\n\n## KvBinding\n### properties\n\n**Type** `Object`\n\n- [`namespaceId`](https://sst.dev/docs/component/cloudflare/binding#properties-namespaceid)\n\n#### properties.namespaceId\n\n**Type** `Input` `<` `string` `>`\n\n## PlainTextBinding\n### properties\n\n**Type** `Object`\n\n- [`text`](https://sst.dev/docs/component/cloudflare/binding#properties-text)\n\n#### properties.text\n\n**Type** `Input` `<` `string` `>`\n\n## QueueBinding\n### properties\n\n**Type** `Object`\n\n- [`queue`](https://sst.dev/docs/component/cloudflare/binding#properties-queue)\n\n#### properties.queue\n\n**Type** `Input` `<` `string` `>`\n\n## R2BucketBinding\n### properties\n\n**Type** `Object`\n\n- [`bucketName`](https://sst.dev/docs/component/cloudflare/binding#properties-bucketname)\n\n#### properties.bucketName\n\n**Type** `Input` `<` `string` `>`\n\n## SecretTextBinding\n### properties\n\n**Type** `Object`\n\n- [`text`](https://sst.dev/docs/component/cloudflare/binding#properties-text-1)\n\n#### properties.text\n\n**Type** `Input` `<` `string` `>`\n\n## ServiceBinding\n### properties\n\n**Type** `Object`\n\n- [`service`](https://sst.dev/docs/component/cloudflare/binding#properties-service)\n\n#### properties.service\n\n**Type** `Input` `<` `string` `>\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/binding", "title": "Cloudflare Linkable helper", "description": "Reference doc for the `sst.cloudflare.binding` helper.", "has_code_examples": true, "has_best_practices": false, "section_count": 8, "timestamp": "2025-02-27 21:17:22", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.cloudflare.binding` helper.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMExpbmthYmxlJTIwaGVscGVy.png", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMExpbmthYmxlJTIwaGVscGVy.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://sst.dev/docs/component/cloudflare/binding/", "twitter:card": "summary_large_image", "og:locale": "en", "og:title": "Cloudflare Linkable helper", "og:url": "https://sst.dev/docs/component/cloudflare/binding/", "title": "Cloudflare Linkable helper | SST", "language": "en", "description": "Reference doc for the `sst.cloudflare.binding` helper.", "ogTitle": "Cloudflare Linkable helper", "ogDescription": "Reference doc for the `sst.cloudflare.binding` helper.", "ogSiteName": "SST", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMExpbmthYmxlJTIwaGVscGVy.png", "scrapeId": "ce534814-c4f0-476c-b191-8aa384f51e5a", "sourceURL": "https://sst.dev/docs/component/cloudflare/binding", "url": "https://sst.dev/docs/component/cloudflare/binding", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Cloudflare Linkable helper\"?\n\nAssistant: Here are some code examples:\n\n### Cloudflare Binding Example\n```yaml\nsst.cloudflare.binding({\n  type: \"r2BucketBindings\",\n  properties: {\n    bucketName: \"my-bucket\"\n  }\n})\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/binding", "title": "Cloudflare Linkable helper", "description": "Reference doc for the `sst.cloudflare.binding` helper.", "has_code_examples": true, "has_best_practices": false, "section_count": 8, "timestamp": "2025-02-27 21:17:22", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.cloudflare.binding` helper.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMExpbmthYmxlJTIwaGVscGVy.png", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMExpbmthYmxlJTIwaGVscGVy.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://sst.dev/docs/component/cloudflare/binding/", "twitter:card": "summary_large_image", "og:locale": "en", "og:title": "Cloudflare Linkable helper", "og:url": "https://sst.dev/docs/component/cloudflare/binding/", "title": "Cloudflare Linkable helper | SST", "language": "en", "description": "Reference doc for the `sst.cloudflare.binding` helper.", "ogTitle": "Cloudflare Linkable helper", "ogDescription": "Reference doc for the `sst.cloudflare.binding` helper.", "ogSiteName": "SST", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2xvdWRmbGFyZSUyMExpbmthYmxlJTIwaGVscGVy.png", "scrapeId": "ce534814-c4f0-476c-b191-8aa384f51e5a", "sourceURL": "https://sst.dev/docs/component/cloudflare/binding", "url": "https://sst.dev/docs/component/cloudflare/binding", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Email\"?\n\nAssistant: Reference doc for the `sst.aws.Email` component.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `Email` component lets you send emails in your app. It uses [Amazon Simple Email Service](https://aws.amazon.com/ses/). You can configure it to send emails from a specific email address or from any email addresses in a domain. By default, new AWS SES accounts are in the _sandbox mode_ and can only send email to verified email addresses and domains. It also limits your account has to a sending quota. To remove these restrictions, you need to [request production access](https://docs.aws.amazon.com/ses/latest/dg/request-production-access.html).\n\n## Sending from an email address\nFor using an email address as the sender, you need to verify the email address.\n\n## Sending from a domain\nWhen you use a domain as the sender, you’ll need to verify that you own the domain.\n\n## Configuring DMARC\nYou can configure DMARC settings for your domain.\n\n## Link to a resource\nYou can link it to a function or your Next.js app to send emails.\n\n## Constructor\n`new Email(name, args, opts?)`\n\n## Parameters\n- `name` `string`\n- `args` [`EmailArgs`](https://sst.dev/docs/component/aws/email#emailargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/email", "title": "Email", "description": "Reference doc for the `sst.aws.Email` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:17:33", "type": "overview", "page_metadata": {"og:locale": "en", "ogTitle": "Email", "og:image": "https://social-cards.sst.dev/v3-docs/RW1haWw%3D.png", "favicon": "https://sst.dev/favicon.ico", "twitter:image": "https://social-cards.sst.dev/v3-docs/RW1haWw%3D.png", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/component/aws/email/", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RW1haWw%3D.png", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Email | SST", "og:type": "article", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.Email` component.", "og:description": "Reference doc for the `sst.aws.Email` component.", "og:title": "Email", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.Email` component.", "og:url": "https://sst.dev/docs/component/aws/email/", "language": "en", "scrapeId": "249ccddf-1356-451d-9897-e1d2639a9353", "sourceURL": "https://sst.dev/docs/component/aws/email", "url": "https://sst.dev/docs/component/aws/email", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Email\"?\n\nAssistant: Here are some code examples:\n\n### Sending from an email address\n```yaml\nconst email = new sst.aws.Email(\"MyEmail\", {\n  sender: \"spongebob@example.com\",\n});\n```\n\n### Sending from a domain\n```yaml\nnew sst.aws.Email(\"MyEmail\", {\n  sender: \"example.com\"\n});\n```\n\n### Configuring DMARC\n```yaml\nnew sst.aws.Email(\"MyEmail\", {\n  sender: \"example.com\",\n  dmarc: \"v=DMARC1; p=quarantine; adkim=s; aspf=s;\"\n});\n```\n\n### Linking to a function\n```yaml\nnew sst.aws.Function(\"MyApi\", {\n  handler: \"sender.handler\",\n  link: [email]\n});\n```\n\n### Using AWS SES SDK to send emails\n```yaml\nimport { Resource } from \"sst\";\nimport { SESv2Client, SendEmailCommand } from \"@aws-sdk/client-sesv2\";\nconst client = new SESv2Client();\nawait client.send(\n  new SendEmailCommand({\n    FromEmailAddress: Resource.MyEmail.sender,\n    Destination: {\n      ToAddresses: [\"patrick@example.com\"]\n    },\n    Content: {\n      Simple: {\n        Subject: { Data: \"Hello World!\" },\n        Body: { Text: { Data: \"Sent from my SST app.\" } }\n      }\n    }\n  })\n);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/email", "title": "Email", "description": "Reference doc for the `sst.aws.Email` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:17:33", "type": "code_examples", "page_metadata": {"og:locale": "en", "ogTitle": "Email", "og:image": "https://social-cards.sst.dev/v3-docs/RW1haWw%3D.png", "favicon": "https://sst.dev/favicon.ico", "twitter:image": "https://social-cards.sst.dev/v3-docs/RW1haWw%3D.png", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/component/aws/email/", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RW1haWw%3D.png", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Email | SST", "og:type": "article", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.Email` component.", "og:description": "Reference doc for the `sst.aws.Email` component.", "og:title": "Email", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.Email` component.", "og:url": "https://sst.dev/docs/component/aws/email/", "language": "en", "scrapeId": "249ccddf-1356-451d-9897-e1d2639a9353", "sourceURL": "https://sst.dev/docs/component/aws/email", "url": "https://sst.dev/docs/component/aws/email", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Email\"?\n\nAssistant: Here are the recommended best practices:\n\n• Verify your email address or domain before sending emails.\n• Request production access to remove sandbox restrictions.\n• Use DMARC to improve email deliverability.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/email", "title": "Email", "description": "Reference doc for the `sst.aws.Email` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:17:33", "type": "best_practices", "page_metadata": {"og:locale": "en", "ogTitle": "Email", "og:image": "https://social-cards.sst.dev/v3-docs/RW1haWw%3D.png", "favicon": "https://sst.dev/favicon.ico", "twitter:image": "https://social-cards.sst.dev/v3-docs/RW1haWw%3D.png", "twitter:card": "summary_large_image", "ogUrl": "https://sst.dev/docs/component/aws/email/", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RW1haWw%3D.png", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "title": "Email | SST", "og:type": "article", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.Email` component.", "og:description": "Reference doc for the `sst.aws.Email` component.", "og:title": "Email", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.Email` component.", "og:url": "https://sst.dev/docs/component/aws/email/", "language": "en", "scrapeId": "249ccddf-1356-451d-9897-e1d2639a9353", "sourceURL": "https://sst.dev/docs/component/aws/email", "url": "https://sst.dev/docs/component/aws/email", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Vpc.v1\"?\n\nAssistant: Reference doc for the `sst.aws.Vpc.v1` component.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `Vpc` component lets you add a VPC to your app, but it has been deprecated because it does not support modifying the number of Availability Zones (AZs) after VPC creation.\n\nFor existing usage, rename `sst.aws.Vpc` to `sst.aws.Vpc.v1`. For new VPCs, use the latest [`Vpc`](https://sst.dev/docs/component/aws/vpc) component instead.\n\nThis creates a VPC with 2 Availability Zones by default. It also creates the following resources:\n\n1. A security group.\n2. A public subnet in each AZ.\n3. A private subnet in each AZ.\n4. An Internet Gateway, all the traffic from the public subnets are routed through it.\n5. A NAT Gateway in each AZ. All the traffic from the private subnets are routed to the NAT Gateway in the same AZ.\n\nNAT Gateways are billed per hour and per gigabyte of data processed. By default, this creates a NAT Gateway in each AZ. And this would be roughly $33 per NAT Gateway per month. Make sure to [review the pricing](https://aws.amazon.com/vpc/pricing/).\n\n## Create a VPC\n```javascript\nnew sst.aws.Vpc.v1(\"MyVPC\");\n```\n\n## Create it with 3 Availability Zones\n```javascript\nnew sst.aws.Vpc.v1(\"MyVPC\", {\n  az: 3\n});\n```\n\n## Constructor\n```javascript\nnew Vpc.v1(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`VpcArgs`](https://sst.dev/docs/component/aws/vpc-v1#vpcargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/vpc-v1", "title": "Vpc.v1", "description": "Reference doc for the `sst.aws.Vpc.v1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:17:51", "type": "overview", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/VnBjLnYx.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "og:site_name": "SST", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/vpc-v1/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Vpc.v1", "ogLocale": "en", "language": "en", "og:title": "Vpc.v1", "og:url": "https://sst.dev/docs/component/aws/vpc-v1/", "og:type": "article", "description": "Reference doc for the `sst.aws.Vpc.v1` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/VnBjLnYx.png", "ogDescription": "Reference doc for the `sst.aws.Vpc.v1` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/VnBjLnYx.png", "og:description": "Reference doc for the `sst.aws.Vpc.v1` component.", "title": "Vpc.v1 | SST", "scrapeId": "dfff9782-1f7c-45c9-ba7b-7b03fc27d0e5", "sourceURL": "https://sst.dev/docs/component/aws/vpc-v1", "url": "https://sst.dev/docs/component/aws/vpc-v1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Vpc.v1\"?\n\nAssistant: Here are some code examples:\n\n### Create a VPC\n```yaml\nnew sst.aws.Vpc.v1(\"MyVPC\");\n```\n\n### Create it with 3 Availability Zones\n```yaml\nnew sst.aws.Vpc.v1(\"MyVPC\", {\n  az: 3\n});\n```\n\n### Constructor\n```yaml\nnew Vpc.v1(name, args?, opts?)\n```\n\n### Get existing VPC\n```yaml\nconst vpc = $app.stage === \"frank\"\n  ? sst.aws.Vpc.v1.get(\"MyVPC\", \"vpc-0be8fa4de860618bb\")\n  : new sst.aws.Vpc.v1(\"MyVPC\");\n\nreturn {\n  vpc: vpc.id\n};\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/vpc-v1", "title": "Vpc.v1", "description": "Reference doc for the `sst.aws.Vpc.v1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:17:51", "type": "code_examples", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/VnBjLnYx.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "og:site_name": "SST", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/vpc-v1/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Vpc.v1", "ogLocale": "en", "language": "en", "og:title": "Vpc.v1", "og:url": "https://sst.dev/docs/component/aws/vpc-v1/", "og:type": "article", "description": "Reference doc for the `sst.aws.Vpc.v1` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/VnBjLnYx.png", "ogDescription": "Reference doc for the `sst.aws.Vpc.v1` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/VnBjLnYx.png", "og:description": "Reference doc for the `sst.aws.Vpc.v1` component.", "title": "Vpc.v1 | SST", "scrapeId": "dfff9782-1f7c-45c9-ba7b-7b03fc27d0e5", "sourceURL": "https://sst.dev/docs/component/aws/vpc-v1", "url": "https://sst.dev/docs/component/aws/vpc-v1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Vpc.v1\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to review the pricing for NAT Gateways as they are billed per hour and per gigabyte of data processed.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/vpc-v1", "title": "Vpc.v1", "description": "Reference doc for the `sst.aws.Vpc.v1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:17:51", "type": "best_practices", "page_metadata": {"og:image": "https://social-cards.sst.dev/v3-docs/VnBjLnYx.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "og:site_name": "SST", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/vpc-v1/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "ogTitle": "Vpc.v1", "ogLocale": "en", "language": "en", "og:title": "Vpc.v1", "og:url": "https://sst.dev/docs/component/aws/vpc-v1/", "og:type": "article", "description": "Reference doc for the `sst.aws.Vpc.v1` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/VnBjLnYx.png", "ogDescription": "Reference doc for the `sst.aws.Vpc.v1` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/VnBjLnYx.png", "og:description": "Reference doc for the `sst.aws.Vpc.v1` component.", "title": "Vpc.v1 | SST", "scrapeId": "dfff9782-1f7c-45c9-ba7b-7b03fc27d0e5", "sourceURL": "https://sst.dev/docs/component/aws/vpc-v1", "url": "https://sst.dev/docs/component/aws/vpc-v1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"DevCommand\"?\n\nAssistant: Reference doc for the `sst.experimental.DevCommand` component.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `DevCommand` lets you run a command in a separate pane when you run `sst dev`. The `sst dev` CLI starts a multiplexer with panes for separate processes. This component allows you to add a process to it. This component only works in `sst dev`. It does not do anything in `sst deploy`.\n\n## Example\nFor example, you can use this to run Drizzle Studio locally.\n\n```\nnew sst.x.DevCommand(\"Studio\", {\n  link: [rds],\n  dev: {\n    autostart: true,\n    command: \"npx drizzle-kit studio\",\n  },\n});\n```\nHere `npx drizzle-kit studio` will be run in `sst dev` and will show up under the **Studio** tab. It’ll also have access to the links from `rds`.\n\n## Constructor\n```\nnew DevCommand(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`DevCommandArgs`](https://sst.dev/docs/component/experimental/dev-command#devcommandargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/experimental/dev-command", "title": "DevCommand", "description": "Reference doc for the `sst.experimental.DevCommand` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:18:16", "type": "overview", "page_metadata": {"description": "Reference doc for the `sst.experimental.DevCommand` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/RGV2Q29tbWFuZA%3D%3D.png", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://social-cards.sst.dev/v3-docs/RGV2Q29tbWFuZA%3D%3D.png", "title": "DevCommand | SST", "og:title": "DevCommand", "favicon": "https://sst.dev/favicon.ico", "language": "en", "og:url": "https://sst.dev/docs/component/experimental/dev-command/", "og:site_name": "SST", "ogLocale": "en", "og:locale": "en", "ogTitle": "DevCommand", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.experimental.DevCommand` component.", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.experimental.DevCommand` component.", "ogUrl": "https://sst.dev/docs/component/experimental/dev-command/", "ogImage": "https://social-cards.sst.dev/v3-docs/RGV2Q29tbWFuZA%3D%3D.png", "scrapeId": "c16934a2-5382-49a5-a59d-abf515a261e3", "sourceURL": "https://sst.dev/docs/component/experimental/dev-command", "url": "https://sst.dev/docs/component/experimental/dev-command", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"DevCommand\"?\n\nAssistant: Here are some code examples:\n\n### DevCommand Example\n```yaml\nnew sst.x.DevCommand(\"Studio\", {\n  link: [rds],\n  dev: {\n    autostart: true,\n    command: \"npx drizzle-kit studio\",\n  },\n});\n```\n\n### Constructor Syntax\n```yaml\nnew DevCommand(name, args, opts?)\n```\n\n### Environment Variables Example\n```yaml\n{\n  environment: {\n    API_URL: api.url,\n    STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n  }\n}\n```\n\n### Link Resources Example\n```yaml\n{\n  link: [bucket, stripeKey]\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/experimental/dev-command", "title": "DevCommand", "description": "Reference doc for the `sst.experimental.DevCommand` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:18:16", "type": "code_examples", "page_metadata": {"description": "Reference doc for the `sst.experimental.DevCommand` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/RGV2Q29tbWFuZA%3D%3D.png", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://social-cards.sst.dev/v3-docs/RGV2Q29tbWFuZA%3D%3D.png", "title": "DevCommand | SST", "og:title": "DevCommand", "favicon": "https://sst.dev/favicon.ico", "language": "en", "og:url": "https://sst.dev/docs/component/experimental/dev-command/", "og:site_name": "SST", "ogLocale": "en", "og:locale": "en", "ogTitle": "DevCommand", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.experimental.DevCommand` component.", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.experimental.DevCommand` component.", "ogUrl": "https://sst.dev/docs/component/experimental/dev-command/", "ogImage": "https://social-cards.sst.dev/v3-docs/RGV2Q29tbWFuZA%3D%3D.png", "scrapeId": "c16934a2-5382-49a5-a59d-abf515a261e3", "sourceURL": "https://sst.dev/docs/component/experimental/dev-command", "url": "https://sst.dev/docs/component/experimental/dev-command", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"DevCommand\"?\n\nAssistant: Here are the recommended best practices:\n\n• Configure `autostart` to `true` if you want the command to start automatically when `sst dev` starts. You can still start it manually later.\n• Use the `directory` parameter to change the directory from where the command is run.\n", "metadata": {"source_url": "https://sst.dev/docs/component/experimental/dev-command", "title": "DevCommand", "description": "Reference doc for the `sst.experimental.DevCommand` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:18:16", "type": "best_practices", "page_metadata": {"description": "Reference doc for the `sst.experimental.DevCommand` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/RGV2Q29tbWFuZA%3D%3D.png", "og:type": "article", "viewport": "width=device-width, initial-scale=1", "twitter:image": "https://social-cards.sst.dev/v3-docs/RGV2Q29tbWFuZA%3D%3D.png", "title": "DevCommand | SST", "og:title": "DevCommand", "favicon": "https://sst.dev/favicon.ico", "language": "en", "og:url": "https://sst.dev/docs/component/experimental/dev-command/", "og:site_name": "SST", "ogLocale": "en", "og:locale": "en", "ogTitle": "DevCommand", "twitter:card": "summary_large_image", "ogDescription": "Reference doc for the `sst.experimental.DevCommand` component.", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.experimental.DevCommand` component.", "ogUrl": "https://sst.dev/docs/component/experimental/dev-command/", "ogImage": "https://social-cards.sst.dev/v3-docs/RGV2Q29tbWFuZA%3D%3D.png", "scrapeId": "c16934a2-5382-49a5-a59d-abf515a261e3", "sourceURL": "https://sst.dev/docs/component/experimental/dev-command", "url": "https://sst.dev/docs/component/experimental/dev-command", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"DNS Adapter\"?\n\nAssistant: Reference doc for the `sst.cloudflare.dns` functions.\n\nHere's a detailed explanation:\n\n\n## Functions\n### dns\n\n```\ndns(args?)\n```\n\n#### Parameters\n\n- `args?` [`DnsArgs`](https://sst.dev/docs/component/cloudflare/dns-adapter#dnsargs)\n\nThe DNS arguments.\n\n**Returns** `Object`\n\n## DnsArgs\n### transform?\n\n**Type** `Object`\n\n- [`record?`](https://sst.dev/docs/component/cloudflare/dns-adapter#transform-record)\n\n[Transform](https://sst.dev/docs/components#transform) how this component creates its underlying resources.\n\n#### transform.record?\n\n**Type** [`RecordArgs`](https://www.pulumi.com/registry/packages/cloudflare/api-docs/record/#inputs) ` | ` `(` `args` `: ` [`RecordArgs`](https://www.pulumi.com/registry/packages/cloudflare/api-docs/record/#inputs) ` => ` [`RecordArgs`](https://www.pulumi.com/registry/packages/cloudflare/api-docs/record/#inputs) ` | ` `void` `)\n\nTransform the Cloudflare record resource.\n\n### zone?\n\n**Type** `Input` `<` `string` `>`\n\nThe ID of the Cloudflare zone to create the record in.\n\n```\n{\n  zone: \"415e6f4653b6d95b775d350f32119abb\"\n}\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/dns-adapter", "title": "DNS Adapter", "description": "Reference doc for the `sst.cloudflare.dns` functions.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 21:18:24", "type": "overview", "page_metadata": {"og:description": "Reference doc for the `sst.cloudflare.dns` functions..", "og:title": "DNS Adapter", "og:site_name": "SST", "twitter:card": "summary_large_image", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "ogDescription": "Reference doc for the `sst.cloudflare.dns` functions..", "description": "Reference doc for the `sst.cloudflare.dns` functions..", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "DNS Adapter", "ogImage": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:url": "https://sst.dev/docs/component/cloudflare/dns-adapter/", "ogUrl": "https://sst.dev/docs/component/cloudflare/dns-adapter/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "language": "en", "title": "DNS Adapter | SST", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "scrapeId": "33c528a2-2e27-43ac-af38-261bd5247469", "sourceURL": "https://sst.dev/docs/component/cloudflare/dns-adapter", "url": "https://sst.dev/docs/component/cloudflare/dns-adapter", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"DNS Adapter\"?\n\nAssistant: Here are some code examples:\n\n### Basic DNS Adapter Usage\n```yaml\nsst.cloudflare.dns();\n```\n\n### Specify Zone ID\n```yaml\nsst.cloudflare.dns({\n  zone: \"415e6f4653b6d95b775d350f32119abb\"\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/cloudflare/dns-adapter", "title": "DNS Adapter", "description": "Reference doc for the `sst.cloudflare.dns` functions.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 21:18:24", "type": "code_examples", "page_metadata": {"og:description": "Reference doc for the `sst.cloudflare.dns` functions..", "og:title": "DNS Adapter", "og:site_name": "SST", "twitter:card": "summary_large_image", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "ogDescription": "Reference doc for the `sst.cloudflare.dns` functions..", "description": "Reference doc for the `sst.cloudflare.dns` functions..", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "DNS Adapter", "ogImage": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:url": "https://sst.dev/docs/component/cloudflare/dns-adapter/", "ogUrl": "https://sst.dev/docs/component/cloudflare/dns-adapter/", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "language": "en", "title": "DNS Adapter | SST", "og:locale": "en", "favicon": "https://sst.dev/favicon.ico", "scrapeId": "33c528a2-2e27-43ac-af38-261bd5247469", "sourceURL": "https://sst.dev/docs/component/cloudflare/dns-adapter", "url": "https://sst.dev/docs/component/cloudflare/dns-adapter", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"DNS Adapter\"?\n\nAssistant: Reference doc for the `sst.aws.dns` functions.\n\nHere's a detailed explanation:\n\n\n## Functions\n### dns\n\n```\ndns(args?)\n```\n\n#### Parameters\n\n- `args?` [`DnsArgs`](https://sst.dev/docs/component/aws/dns-adapter#dnsargs)\n\nThe DNS arguments.\n\n**Returns** `Object`\n\n## DnsArgs\n### transform?\n\n**Type** `Object`\n\n- [`record?`](https://sst.dev/docs/component/aws/dns-adapter#transform-record)\n\n\n[Transform](https://sst.dev/docs/components#transform) how this component creates its underlying resources.\n\n#### transform.record?\n\n**Type** [`RecordArgs`](https://www.pulumi.com/registry/packages/aws/api-docs/route53/record/#inputs) ` | ` `(` `args` `: ` [`RecordArgs`](https://www.pulumi.com/registry/packages/aws/api-docs/route53/record/#inputs) ` => ` [`RecordArgs`](https://www.pulumi.com/registry/packages/aws/api-docs/route53/record/#inputs) ` | ` `void` `)\n\nTransform the AWS Route 53 record resource.\n\n### zone?\n\n**Type** `Input` `<` `string` `>`\n\nThe 14 letter ID of the [Route 53 hosted zone](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-working-with.html) that contains the `domainName`. You can find the hosted zone ID in the Route 53 part of the AWS Console.\n\nThis option is useful for cases where you have multiple hosted zones that have the same domain.\n\n```\n{\n  zone: \"Z2FDTNDATAQYW2\"\n}\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dns-adapter", "title": "DNS Adapter", "description": "Reference doc for the `sst.aws.dns` functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:18:38", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:site_name": "SST", "og:type": "article", "og:title": "DNS Adapter", "ogSiteName": "SST", "language": "en", "og:url": "https://sst.dev/docs/component/aws/dns-adapter/", "title": "DNS Adapter | SST", "ogUrl": "https://sst.dev/docs/component/aws/dns-adapter/", "og:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.dns` functions..", "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.dns` functions..", "twitter:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "DNS Adapter", "ogDescription": "Reference doc for the `sst.aws.dns` functions..", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "favicon": "https://sst.dev/favicon.ico", "scrapeId": "219eb7d0-524c-428f-9410-6ab93e9f75e0", "sourceURL": "https://sst.dev/docs/component/aws/dns-adapter", "url": "https://sst.dev/docs/component/aws/dns-adapter", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"DNS Adapter\"?\n\nAssistant: Here are some code examples:\n\n### Basic DNS Function Call\n```yaml\nsst.aws.dns();\n```\n\n### DNS Function with Zone ID\n```yaml\nsst.aws.dns({\n  zone: \"Z2FDTNDATAQYW2\",\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dns-adapter", "title": "DNS Adapter", "description": "Reference doc for the `sst.aws.dns` functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:18:38", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:site_name": "SST", "og:type": "article", "og:title": "DNS Adapter", "ogSiteName": "SST", "language": "en", "og:url": "https://sst.dev/docs/component/aws/dns-adapter/", "title": "DNS Adapter | SST", "ogUrl": "https://sst.dev/docs/component/aws/dns-adapter/", "og:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.dns` functions..", "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.dns` functions..", "twitter:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "DNS Adapter", "ogDescription": "Reference doc for the `sst.aws.dns` functions..", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "favicon": "https://sst.dev/favicon.ico", "scrapeId": "219eb7d0-524c-428f-9410-6ab93e9f75e0", "sourceURL": "https://sst.dev/docs/component/aws/dns-adapter", "url": "https://sst.dev/docs/component/aws/dns-adapter", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"DNS Adapter\"?\n\nAssistant: Here are the recommended best practices:\n\n• Specify the specific hosted zone ID if you have multiple hosted zones with the same domain.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dns-adapter", "title": "DNS Adapter", "description": "Reference doc for the `sst.aws.dns` functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:18:38", "type": "best_practices", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:site_name": "SST", "og:type": "article", "og:title": "DNS Adapter", "ogSiteName": "SST", "language": "en", "og:url": "https://sst.dev/docs/component/aws/dns-adapter/", "title": "DNS Adapter | SST", "ogUrl": "https://sst.dev/docs/component/aws/dns-adapter/", "og:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.dns` functions..", "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.dns` functions..", "twitter:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "DNS Adapter", "ogDescription": "Reference doc for the `sst.aws.dns` functions..", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "favicon": "https://sst.dev/favicon.ico", "scrapeId": "219eb7d0-524c-428f-9410-6ab93e9f75e0", "sourceURL": "https://sst.dev/docs/component/aws/dns-adapter", "url": "https://sst.dev/docs/component/aws/dns-adapter", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Postgres.v1\"?\n\nAssistant: Reference doc for the `sst.aws.Postgres.v1` component.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `Postgres` component lets you add a Postgres database to your app using [Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html).\n\nFor existing usage, rename `sst.aws.Postgres` to `sst.aws.Postgres.v1`. For new Postgres, use the latest [`Postgres`](https://sst.dev/docs/component/aws/postgres) component instead.\n\nWhat changed:\n\n- In this version, the database used AWS RDS Aurora Serverless v2, which supported RDS Data API. This allowed your machine to connect to the database during “sst dev” without the need for a VPN.\n- In the new version, the database now uses AWS RDS Postgres. The “sst.aws.Vpc” component has been enhanced to set up a secure tunnel, enabling seamlessly connections to the database. Postgres provides greater flexibility and wider feature support while being cheaper to run.\n\n## Connecting to the Database\nTo connect to your database from your Lambda functions, you can use the [AWS Data API](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html). It does not need a persistent connection, and works over HTTP. You also don’t need a VPN to connect to it locally.\n\n## Create the database\n```javascript\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst database = new sst.aws.Postgres.v1(\"MyDatabase\", { vpc });\n```\n\n## Change the scaling config\n```javascript\nnew sst.aws.Postgres.v1(\"MyDatabase\", {\n  scaling: {\n    min: \"2 ACU\",\n    max: \"128 ACU\"\n  },\n  vpc\n});\n```\n\n## Link to a resource\nYou can link your database to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [database],\n  vpc\n});\n```\n\nOnce linked, you can connect to it from your function code.\n\n```javascript\nimport { Resource } from \"sst\";\nimport { drizzle } from \"drizzle-orm/aws-data-api/pg\";\nimport { RDSDataClient } from \"@aws-sdk/client-rds-data\";\n\ndrizzle(new RDSDataClient({}), {\n  database: Resource.MyDatabase.database,\n  secretArn: Resource.MyDatabase.secretArn,\n  resourceArn: Resource.MyDatabase.clusterArn\n});\n```\n\n## Constructor\n```javascript\nnew Postgres.v1(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`PostgresArgs`](https://sst.dev/docs/component/aws/postgres-v1#postgresargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/postgres-v1", "title": "Postgres.v1", "description": "Reference doc for the `sst.aws.Postgres.v1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:18:52", "type": "overview", "page_metadata": {"language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXMudjE%3D.png", "og:locale": "en", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.aws.Postgres.v1` component.", "ogLocale": "en", "og:title": "Postgres.v1", "og:url": "https://sst.dev/docs/component/aws/postgres-v1/", "description": "Reference doc for the `sst.aws.Postgres.v1` component.", "ogTitle": "Postgres.v1", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Postgres.v1` component.", "og:site_name": "SST", "title": "Postgres.v1 | SST", "og:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXMudjE%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXMudjE%3D.png", "ogUrl": "https://sst.dev/docs/component/aws/postgres-v1/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "cb711402-8889-4bb7-9d3f-a981fd9eadd9", "sourceURL": "https://sst.dev/docs/component/aws/postgres-v1", "url": "https://sst.dev/docs/component/aws/postgres-v1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Postgres.v1\"?\n\nAssistant: Here are some code examples:\n\n### Create the database\n```yaml\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst database = new sst.aws.Postgres.v1(\"MyDatabase\", { vpc });\n```\n\n### Change the scaling config\n```yaml\nnew sst.aws.Postgres.v1(\"MyDatabase\", {\n  scaling: {\n    min: \"2 ACU\",\n    max: \"128 ACU\"\n  },\n  vpc\n});\n```\n\n### Link to a resource\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [database],\n  vpc\n});\n```\n\n### Connect to the database\n```yaml\nimport { Resource } from \"sst\";\nimport { drizzle } from \"drizzle-orm/aws-data-api/pg\";\nimport { RDSDataClient } from \"@aws-sdk/client-rds-data\";\n\ndrizzle(new RDSDataClient({}), {\n  database: Resource.MyDatabase.database,\n  secretArn: Resource.MyDatabase.secretArn,\n  resourceArn: Resource.MyDatabase.clusterArn\n});\n```\n\n### Constructor\n```yaml\nnew Postgres.v1(name, args, opts?)\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/postgres-v1", "title": "Postgres.v1", "description": "Reference doc for the `sst.aws.Postgres.v1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:18:52", "type": "code_examples", "page_metadata": {"language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXMudjE%3D.png", "og:locale": "en", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.aws.Postgres.v1` component.", "ogLocale": "en", "og:title": "Postgres.v1", "og:url": "https://sst.dev/docs/component/aws/postgres-v1/", "description": "Reference doc for the `sst.aws.Postgres.v1` component.", "ogTitle": "Postgres.v1", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Postgres.v1` component.", "og:site_name": "SST", "title": "Postgres.v1 | SST", "og:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXMudjE%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXMudjE%3D.png", "ogUrl": "https://sst.dev/docs/component/aws/postgres-v1/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "cb711402-8889-4bb7-9d3f-a981fd9eadd9", "sourceURL": "https://sst.dev/docs/component/aws/postgres-v1", "url": "https://sst.dev/docs/component/aws/postgres-v1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Postgres.v1\"?\n\nAssistant: Here are the recommended best practices:\n\n• For production workloads, setting a minimum of 0.5 ACUs might not be a great idea due to the following reasons: it takes longer to scale from a low number of ACUs to a much higher number, query performance depends on the buffer cache, and the max connections for a 0.5 ACU Postgres instance is capped at 2000.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/postgres-v1", "title": "Postgres.v1", "description": "Reference doc for the `sst.aws.Postgres.v1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:18:52", "type": "best_practices", "page_metadata": {"language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXMudjE%3D.png", "og:locale": "en", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.aws.Postgres.v1` component.", "ogLocale": "en", "og:title": "Postgres.v1", "og:url": "https://sst.dev/docs/component/aws/postgres-v1/", "description": "Reference doc for the `sst.aws.Postgres.v1` component.", "ogTitle": "Postgres.v1", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.Postgres.v1` component.", "og:site_name": "SST", "title": "Postgres.v1 | SST", "og:image": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXMudjE%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/UG9zdGdyZXMudjE%3D.png", "ogUrl": "https://sst.dev/docs/component/aws/postgres-v1/", "viewport": "width=device-width, initial-scale=1", "scrapeId": "cb711402-8889-4bb7-9d3f-a981fd9eadd9", "sourceURL": "https://sst.dev/docs/component/aws/postgres-v1", "url": "https://sst.dev/docs/component/aws/postgres-v1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"SolidStart\"?\n\nAssistant: Reference doc for the `sst.aws.SolidStart` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\nDeploy a SolidStart app that’s in the project root.\n\n```\nnew sst.aws.SolidStart(\"MyWeb\");\n```\n\n## Change the path\nDeploys the SolidStart app in the `my-solid-app/` directory.\n\n```\nnew sst.aws.SolidStart(\"MyWeb\", {\n  path: \"my-solid-app/\"\n});\n```\n\n## Add a custom domain\nSet a custom domain for your SolidStart app.\n\n```\nnew sst.aws.SolidStart(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n## Redirect www to apex domain\nRedirect `www.my-app.com` to `my-app.com`.\n\n```\nnew sst.aws.SolidStart(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your SolidStart app. This will grant permissions to the resources and allow you to access it in your app.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.SolidStart(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your SolidStart app.\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n## Constructor\n```\nnew SolidStart(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`SolidStartArgs`](https://sst.dev/docs/component/aws/solid-start#solidstartargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/solid-start", "title": "SolidStart", "description": "Reference doc for the `sst.aws.SolidStart` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:19:03", "type": "overview", "page_metadata": {"title": "SolidStart | SST", "og:locale": "en", "og:site_name": "SST", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydA%3D%3D.png", "ogDescription": "Reference doc for the `sst.aws.SolidStart` component.", "og:type": "article", "ogTitle": "SolidStart", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:title": "SolidStart", "og:description": "Reference doc for the `sst.aws.SolidStart` component.", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydA%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydA%3D%3D.png", "language": "en", "description": "Reference doc for the `sst.aws.SolidStart` component.", "og:url": "https://sst.dev/docs/component/aws/solid-start/", "ogUrl": "https://sst.dev/docs/component/aws/solid-start/", "ogLocale": "en", "scrapeId": "9e99372e-238d-4017-b741-12b06599cda9", "sourceURL": "https://sst.dev/docs/component/aws/solid-start", "url": "https://sst.dev/docs/component/aws/solid-start", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"SolidStart\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nnew sst.aws.SolidStart(\"MyWeb\");\n```\n\n### Change the path\n```yaml\nnew sst.aws.SolidStart(\"MyWeb\", {\n  path: \"my-solid-app/\"\n});\n```\n\n### Add a custom domain\n```yaml\nnew sst.aws.SolidStart(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Redirect www to apex domain\n```yaml\nnew sst.aws.SolidStart(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.SolidStart(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### Access linked resources\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/solid-start", "title": "SolidStart", "description": "Reference doc for the `sst.aws.SolidStart` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:19:03", "type": "code_examples", "page_metadata": {"title": "SolidStart | SST", "og:locale": "en", "og:site_name": "SST", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydA%3D%3D.png", "ogDescription": "Reference doc for the `sst.aws.SolidStart` component.", "og:type": "article", "ogTitle": "SolidStart", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:title": "SolidStart", "og:description": "Reference doc for the `sst.aws.SolidStart` component.", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydA%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydA%3D%3D.png", "language": "en", "description": "Reference doc for the `sst.aws.SolidStart` component.", "og:url": "https://sst.dev/docs/component/aws/solid-start/", "ogUrl": "https://sst.dev/docs/component/aws/solid-start/", "ogLocale": "en", "scrapeId": "9e99372e-238d-4017-b741-12b06599cda9", "sourceURL": "https://sst.dev/docs/component/aws/solid-start", "url": "https://sst.dev/docs/component/aws/solid-start", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"SolidStart\"?\n\nAssistant: Here are the recommended best practices:\n\n• Configure how the SolidStart app assets are uploaded to S3.\n• Use the SDK to access linked resources in your SolidStart app.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/solid-start", "title": "SolidStart", "description": "Reference doc for the `sst.aws.SolidStart` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:19:03", "type": "best_practices", "page_metadata": {"title": "SolidStart | SST", "og:locale": "en", "og:site_name": "SST", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydA%3D%3D.png", "ogDescription": "Reference doc for the `sst.aws.SolidStart` component.", "og:type": "article", "ogTitle": "SolidStart", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:title": "SolidStart", "og:description": "Reference doc for the `sst.aws.SolidStart` component.", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydA%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U29saWRTdGFydA%3D%3D.png", "language": "en", "description": "Reference doc for the `sst.aws.SolidStart` component.", "og:url": "https://sst.dev/docs/component/aws/solid-start/", "ogUrl": "https://sst.dev/docs/component/aws/solid-start/", "ogLocale": "en", "scrapeId": "9e99372e-238d-4017-b741-12b06599cda9", "sourceURL": "https://sst.dev/docs/component/aws/solid-start", "url": "https://sst.dev/docs/component/aws/solid-start", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"KinesisStream\"?\n\nAssistant: Reference doc for the `sst.aws.KinesisStream` component. The `KinesisStream` component lets you add an Amazon Kinesis Data Streams to your app.\n\nHere's a detailed explanation:\n\n\n## Minimal example\n```javascript\nconst stream = new sst.aws.KinesisStream(\"MyStream\");\n```\n\n## Subscribe to a stream\n```javascript\nstream.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n## Link the stream to a resource\nYou can link the stream to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [stream]\n});\n```\n\nOnce linked, you can write to the stream from your function code.\n\n```javascript\nimport { Resource } from \"sst\";\nimport { KinesisClient, PutRecordCommand } from \"@aws-sdk/client-kinesis\";\n\nconst client = new KinesisClient();\n\nawait client.send(new PutRecordCommand({\n  StreamName: Resource.MyStream.name,\n  Data: JSON.stringify({ foo: \"bar\" }),\n  PartitionKey: \"myKey\",\n}));\n```\n\n## Constructor\n```javascript\nnew KinesisStream(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`KinesisStreamArgs`](https://sst.dev/docs/component/aws/kinesis-stream#kinesisstreamargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/) \n\n\n## KinesisStreamArgs\n### transform?\n**Type** `Object`\n- [`stream?`](https://sst.dev/docs/component/aws/kinesis-stream#transform-stream)\n\n[Transform](https://sst.dev/docs/components#transform) how this component creates its underlying resources.\n\n## Properties\n### arn\n**Type** `Output` `<` `string` `>`  \n### name\n**Type** `Output` `<` `string` `>`  \n### nodes\n**Type** `Object`\n- [`stream`](https://sst.dev/docs/component/aws/kinesis-stream#nodes-stream)\n\nThe underlying [resources](https://sst.dev/docs/components/#nodes) this component creates.\n\n## nodes.stream\n**Type** [`Stream`](https://www.pulumi.com/registry/packages/aws/api-docs/kinesis/stream/)\n\nThe Amazon Kinesis Data Stream.\n\n## SDK\nUse the [SDK](https://sst.dev/docs/reference/sdk/) in your runtime to interact with your infrastructure.\n\n## Links\nThis is accessible through the `Resource` object in the [SDK](https://sst.dev/docs/reference/sdk/#links).\n- `name` `string`\n\n## Methods\n### subscribe\n```javascript\nsubscribe(name, subscriber, args?)\n```\n#### Parameters\n- `name` `string`\nThe name of the subscriber.\n- `subscriber` `Input` `<` `string` ` | ` [`FunctionArgs`](https://sst.dev/docs/component/aws/function/#functionargs) ` | ` `\"arn:aws:lambda:${string}\"` `>\nThe function that’ll be notified.\n- `args?` [`KinesisStreamLambdaSubscriberArgs`](https://sst.dev/docs/component/aws/kinesis-stream#kinesisstreamlambdasubscriberargs)\nConfigure the subscription.\n\n**Returns** `Output` `<` [`KinesisStreamLambdaSubscriber`](https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber/) `>\n\nSubscribe to the Kinesis stream.\n```javascript\nstream.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\nAdd a filter to the subscription.\n```javascript\nstream.subscribe(\"MySubscriber\", \"src/subscriber.handler\", {\n  filters: [\n    {\n      data: {\n        order: {\n          type: [\"buy\"],\n        },\n      },\n    },\n  ],\n});\n```\nCustomize the subscriber function.\n```javascript\nstream.subscribe(\"MySubscriber\", {\n  handler: \"src/subscriber.handler\",\n  timeout: \"60 seconds\"\n});\n```\nOr pass in the ARN of an existing Lambda function.\n```javascript\nstream.subscribe(\"MySubscriber\", \"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n```\n\n## static subscribe\n```javascript\nKinesisStream.subscribe(name, streamArn, subscriber, args?)\n```\n#### Parameters\n- `name` `string`\nThe name of the subscriber.\n- `streamArn` `Input` `<` `string` `>`\nThe ARN of the Kinesis Stream to subscribe to.\n- `subscriber` `Input` `<` `string` ` | ` [`FunctionArgs`](https://sst.dev/docs/component/aws/function/#functionargs) ` | ` `\"arn:aws:lambda:${string}\"` `>\nThe function that’ll be notified.\n- `args?` [`KinesisStreamLambdaSubscriberArgs`](https://sst.dev/docs/component/aws/kinesis-stream#kinesisstreamlambdasubscriberargs)\nConfigure the subscription.\n\n**Returns** `Output` `<` [`KinesisStreamLambdaSubscriber`](https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber/) `>\n\nSubscribe to the Kinesis stream that was not created in your app.\nFor example, let’s say you have the ARN of an existing Kinesis stream.\n```javascript\nconst streamArn = \"arn:aws:kinesis:us-east-1:123456789012:stream/MyStream\";\n```\nYou can subscribe to it by passing in the ARN.\n```javascript\nsst.aws.KinesisStream.subscribe(\"MySubscriber\", streamArn, \"src/subscriber.handler\");\n```\nAdd a filter to the subscription.\n```javascript\nsst.aws.KinesisStream.subscribe(\"MySubscriber\", streamArn, \"src/subscriber.handler\", {\n  filters: [\n    {\n      data: {\n        order: {\n          type: [\"buy\"],\n        },\n      },\n    },\n  ],\n});\n```\nCustomize the subscriber function.\n```javascript\nsst.aws.KinesisStream.subscribe(\"MySubscriber\", streamArn, {\n  handler: \"src/subscriber.handler\",\n  timeout: \"60 seconds\"\n});\n```\n\n## KinesisStreamLambdaSubscriberArgs\n### filters?\n**Type** `Input` `<` `Input` `<` `Record` `<` `string`, `any` `>` `>` `[]` `>`\n\nFilter the events that’ll be processed by the `subscribers` functions.\nYou can pass in up to 5 different filter policies. These will logically ORed together. Meaning that if any single policy matches, the record will be processed. Learn more about the [filter rule syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).\n\nFor example, if your Kinesis stream contains events in this JSON format.\n```json\n{\n  record: 12345,\n  order: {\n    type: \"buy\",\n    stock: \"ANYCO\",\n    quantity: 1000\n  }\n}\n```\nTo process only those events where the `type` is `buy`.\n```json\n{\n  filters: [\n    {\n      data: {\n        order: {\n          type: [\"buy\"],\n        },\n      },\n    },\n  ],\n}\n```\n\n## transform?\n**Type** `Object`\n- [`eventSourceMapping?`](https://sst.dev/docs/component/aws/kinesis-stream#transform-eventsourcemapping)\n\n[Transform](https://sst.dev/docs/components#transform) how this component creates its underlying resources.\n\n## transform.eventSourceMapping?\n**Type** [`EventSourceMappingArgs`](https://www.pulumi.com/registry/packages/aws/api-docs/lambda/eventsourcemapping/#inputs) ` | ` `(` `args` `: ` [`EventSourceMappingArgs`](https://www.pulumi.com/registry/packages/aws/api-docs/lambda/eventsourcemapping/#inputs) `, ` `opts` `: ` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/) `, ` `name` `: ` `string` `)` ` => ` `void`\n\nTransform the Lambda Event Source Mapping resource.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/kinesis-stream", "title": "KinesisStream", "description": "Reference doc for the `sst.aws.KinesisStream` component. The `KinesisStream` component lets you add an Amazon Kinesis Data Streams to your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-27 21:19:59", "type": "overview", "page_metadata": {"ogLocale": "en", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbQ%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Reference doc for the `sst.aws.KinesisStream` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbQ%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/kinesis-stream/", "ogSiteName": "SST", "language": "en", "twitter:card": "summary_large_image", "og:title": "KinesisStream", "ogImage": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbQ%3D%3D.png", "og:type": "article", "og:locale": "en", "ogUrl": "https://sst.dev/docs/component/aws/kinesis-stream/", "title": "KinesisStream | SST", "og:description": "Reference doc for the `sst.aws.KinesisStream` component.", "viewport": "width=device-width, initial-scale=1", "ogTitle": "KinesisStream", "ogDescription": "Reference doc for the `sst.aws.KinesisStream` component.", "scrapeId": "b575cee3-b247-4912-8162-cb0808d2c113", "sourceURL": "https://sst.dev/docs/component/aws/kinesis-stream", "url": "https://sst.dev/docs/component/aws/kinesis-stream", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"KinesisStream\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nconst stream = new sst.aws.KinesisStream(\"MyStream\");\n```\n\n### Subscribe to a stream\n```yaml\nstream.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n### Link the stream to a resource\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [stream]\n});\n```\n\n### Write to the stream\n```yaml\nimport { Resource } from \"sst\";\nimport { KinesisClient, PutRecordCommand } from \"@aws-sdk/client-kinesis\";\n\nconst client = new KinesisClient();\n\nawait client.send(new PutRecordCommand({\n  StreamName: Resource.MyStream.name,\n  Data: JSON.stringify({ foo: \"bar\" }),\n  PartitionKey: \"myKey\",\n}));\n```\n\n### Subscribe method example\n```yaml\nstream.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n### Add a filter to the subscription\n```yaml\nstream.subscribe(\"MySubscriber\", \"src/subscriber.handler\", {\n  filters: [\n    {\n      data: {\n        order: {\n          type: [\"buy\"],\n        },\n      },\n    },\n  ],\n});\n```\n\n### Customize the subscriber function\n```yaml\nstream.subscribe(\"MySubscriber\", {\n  handler: \"src/subscriber.handler\",\n  timeout: \"60 seconds\"\n});\n```\n\n### Static subscribe example\n```yaml\nconst streamArn = \"arn:aws:kinesis:us-east-1:123456789012:stream/MyStream\";\n\nsst.aws.KinesisStream.subscribe(\"MySubscriber\", streamArn, \"src/subscriber.handler\");\n```\n\n### Add a filter to static subscription\n```yaml\nsst.aws.KinesisStream.subscribe(\"MySubscriber\", streamArn, \"src/subscriber.handler\", {\n  filters: [\n    {\n      data: {\n        order: {\n          type: [\"buy\"],\n        },\n      },\n    },\n  ],\n});\n```\n\n### Customize static subscriber function\n```yaml\nsst.aws.KinesisStream.subscribe(\"MySubscriber\", streamArn, {\n  handler: \"src/subscriber.handler\",\n  timeout: \"60 seconds\"\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/kinesis-stream", "title": "KinesisStream", "description": "Reference doc for the `sst.aws.KinesisStream` component. The `KinesisStream` component lets you add an Amazon Kinesis Data Streams to your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-27 21:19:59", "type": "code_examples", "page_metadata": {"ogLocale": "en", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbQ%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Reference doc for the `sst.aws.KinesisStream` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbQ%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/kinesis-stream/", "ogSiteName": "SST", "language": "en", "twitter:card": "summary_large_image", "og:title": "KinesisStream", "ogImage": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbQ%3D%3D.png", "og:type": "article", "og:locale": "en", "ogUrl": "https://sst.dev/docs/component/aws/kinesis-stream/", "title": "KinesisStream | SST", "og:description": "Reference doc for the `sst.aws.KinesisStream` component.", "viewport": "width=device-width, initial-scale=1", "ogTitle": "KinesisStream", "ogDescription": "Reference doc for the `sst.aws.KinesisStream` component.", "scrapeId": "b575cee3-b247-4912-8162-cb0808d2c113", "sourceURL": "https://sst.dev/docs/component/aws/kinesis-stream", "url": "https://sst.dev/docs/component/aws/kinesis-stream", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"KinesisStream\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can link the stream to other resources, like a function or your Next.js app.\n• You can pass in up to 5 different filter policies for subscribers. These will logically ORed together.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/kinesis-stream", "title": "KinesisStream", "description": "Reference doc for the `sst.aws.KinesisStream` component. The `KinesisStream` component lets you add an Amazon Kinesis Data Streams to your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 15, "timestamp": "2025-02-27 21:19:59", "type": "best_practices", "page_metadata": {"ogLocale": "en", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbQ%3D%3D.png", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Reference doc for the `sst.aws.KinesisStream` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbQ%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/kinesis-stream/", "ogSiteName": "SST", "language": "en", "twitter:card": "summary_large_image", "og:title": "KinesisStream", "ogImage": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbQ%3D%3D.png", "og:type": "article", "og:locale": "en", "ogUrl": "https://sst.dev/docs/component/aws/kinesis-stream/", "title": "KinesisStream | SST", "og:description": "Reference doc for the `sst.aws.KinesisStream` component.", "viewport": "width=device-width, initial-scale=1", "ogTitle": "KinesisStream", "ogDescription": "Reference doc for the `sst.aws.KinesisStream` component.", "scrapeId": "b575cee3-b247-4912-8162-cb0808d2c113", "sourceURL": "https://sst.dev/docs/component/aws/kinesis-stream", "url": "https://sst.dev/docs/component/aws/kinesis-stream", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"BucketNotification\"?\n\nAssistant: Reference doc for the `sst.aws.BucketNotification` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew BucketNotification(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/bucket-notification#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket-notification", "title": "BucketNotification", "description": "Reference doc for the `sst.aws.BucketNotification` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:20:07", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogUrl": "https://sst.dev/docs/component/aws/bucket-notification/", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0Tm90aWZpY2F0aW9u.png", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/bucket-notification/", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "description": "Reference doc for the `sst.aws.BucketNotification` component.", "og:title": "BucketNotification", "title": "BucketNotification | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0Tm90aWZpY2F0aW9u.png", "og:type": "article", "ogDescription": "Reference doc for the `sst.aws.BucketNotification` component.", "ogTitle": "BucketNotification", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0Tm90aWZpY2F0aW9u.png", "og:description": "Reference doc for the `sst.aws.BucketNotification` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogSiteName": "SST", "scrapeId": "e319fbb5-c950-4bfa-b21e-00d5fc25df86", "sourceURL": "https://sst.dev/docs/component/aws/bucket-notification", "url": "https://sst.dev/docs/component/aws/bucket-notification", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"BucketNotification\"?\n\nAssistant: Here are some code examples:\n\n### Constructor Example\n```yaml\nnew BucketNotification(name, args, opts?)\n```\n\n### Notification Events Example\n```yaml\n{\n  events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n}\n```\n\n### Filter Prefix Example\n```yaml\n{\n  filterPrefix: \"images/\"\n}\n```\n\n### Filter Suffix Example\n```yaml\n{\n  filterSuffix: \".jpg\"\n}\n```\n\n### Function Notification Example\n```yaml\n{\n  name: \"MySubscriber\",\n  function: \"src/subscriber.handler\"\n}\n```\n\n### Queue Notification Example\n```yaml\nconst myQueue = new sst.aws.Queue(\"MyQueue\");\n{\n  name: \"MySubscriber\",\n  queue: myQueue\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket-notification", "title": "BucketNotification", "description": "Reference doc for the `sst.aws.BucketNotification` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:20:07", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogUrl": "https://sst.dev/docs/component/aws/bucket-notification/", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0Tm90aWZpY2F0aW9u.png", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/bucket-notification/", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "description": "Reference doc for the `sst.aws.BucketNotification` component.", "og:title": "BucketNotification", "title": "BucketNotification | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0Tm90aWZpY2F0aW9u.png", "og:type": "article", "ogDescription": "Reference doc for the `sst.aws.BucketNotification` component.", "ogTitle": "BucketNotification", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0Tm90aWZpY2F0aW9u.png", "og:description": "Reference doc for the `sst.aws.BucketNotification` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogSiteName": "SST", "scrapeId": "e319fbb5-c950-4bfa-b21e-00d5fc25df86", "sourceURL": "https://sst.dev/docs/component/aws/bucket-notification", "url": "https://sst.dev/docs/component/aws/bucket-notification", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"BucketNotification\"?\n\nAssistant: Here are the recommended best practices:\n\n• Customize the subscriber function to ensure it can access the bucket through the SDK.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket-notification", "title": "BucketNotification", "description": "Reference doc for the `sst.aws.BucketNotification` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:20:07", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "ogUrl": "https://sst.dev/docs/component/aws/bucket-notification/", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0Tm90aWZpY2F0aW9u.png", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/bucket-notification/", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "description": "Reference doc for the `sst.aws.BucketNotification` component.", "og:title": "BucketNotification", "title": "BucketNotification | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0Tm90aWZpY2F0aW9u.png", "og:type": "article", "ogDescription": "Reference doc for the `sst.aws.BucketNotification` component.", "ogTitle": "BucketNotification", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0Tm90aWZpY2F0aW9u.png", "og:description": "Reference doc for the `sst.aws.BucketNotification` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "language": "en", "ogSiteName": "SST", "scrapeId": "e319fbb5-c950-4bfa-b21e-00d5fc25df86", "sourceURL": "https://sst.dev/docs/component/aws/bucket-notification", "url": "https://sst.dev/docs/component/aws/bucket-notification", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"AppSync\"?\n\nAssistant: Reference doc for the `sst.aws.AppSync` component.\n\nHere's a detailed explanation:\n\n\n## Create a GraphQL API\n```javascript\nconst api = new sst.aws.AppSync(\"MyApi\", {\n  schema: \"schema.graphql\",\n});\n```\n\n## Add a data source\n```javascript\nconst lambdaDS = api.addDataSource({\n  name: \"lambdaDS\",\n  lambda: \"src/lambda.handler\",\n});\n```\n\n## Add a resolver\n```javascript\napi.addResolver(\"Query user\", {\n  dataSource: lambdaDS.name,\n});\n```\n\n## Constructor\n```javascript\nnew AppSync(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`AppSyncArgs`](https://sst.dev/docs/component/aws/app-sync#appsyncargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync", "title": "AppSync", "description": "Reference doc for the `sst.aws.AppSync` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:20:19", "type": "overview", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.AppSync` component.", "favicon": "https://sst.dev/favicon.ico", "og:url": "https://sst.dev/docs/component/aws/app-sync/", "language": "en", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luYw%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luYw%3D%3D.png", "og:type": "article", "og:locale": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Reference doc for the `sst.aws.AppSync` component.", "og:description": "Reference doc for the `sst.aws.AppSync` component.", "og:title": "AppSync", "ogTitle": "AppSync", "title": "AppSync | SST", "ogUrl": "https://sst.dev/docs/component/aws/app-sync/", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luYw%3D%3D.png", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "f3f417cc-1ccd-4451-b2f3-17ee32a048b3", "sourceURL": "https://sst.dev/docs/component/aws/app-sync", "url": "https://sst.dev/docs/component/aws/app-sync", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"AppSync\"?\n\nAssistant: Here are some code examples:\n\n### Custom domain for AppSync GraphQL API\n```yaml\n{\n  domain: \"example.com\"\n}\n```\n\n### Custom domain for Cloudflare\n```yaml\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.cloudflare.dns()\n  }\n}\n```\n\n### Domain with certificate\n```yaml\n{\n  domain: {\n    name: \"example.com\",\n    dns: false,\n    cert: \"arn:aws:acm:us-east-1:112233445566:certificate/3a958790-8878-4cdc-a396-06d95064cf63\"\n  }\n}\n```\n\n### Add a data source with a Lambda function\n```yaml\napi.addDataSource({\n  name: \"lambdaDS\",\n  lambda: \"src/lambda.handler\"\n});\n```\n\n### Add a data source with an existing Lambda function\n```yaml\napi.addDataSource({\n  name: \"lambdaDS\",\n  lambda: \"arn:aws:lambda:us-east-1:123456789012:function:my-function\"\n})\n```\n\n### Add a DynamoDB table as a data source\n```yaml\napi.addDataSource({\n  name: \"dynamoDS\",\n  dynamodb: \"arn:aws:dynamodb:us-east-1:123456789012:table/my-table\"\n})\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync", "title": "AppSync", "description": "Reference doc for the `sst.aws.AppSync` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:20:19", "type": "code_examples", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.AppSync` component.", "favicon": "https://sst.dev/favicon.ico", "og:url": "https://sst.dev/docs/component/aws/app-sync/", "language": "en", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luYw%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luYw%3D%3D.png", "og:type": "article", "og:locale": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Reference doc for the `sst.aws.AppSync` component.", "og:description": "Reference doc for the `sst.aws.AppSync` component.", "og:title": "AppSync", "ogTitle": "AppSync", "title": "AppSync | SST", "ogUrl": "https://sst.dev/docs/component/aws/app-sync/", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luYw%3D%3D.png", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "f3f417cc-1ccd-4451-b2f3-17ee32a048b3", "sourceURL": "https://sst.dev/docs/component/aws/app-sync", "url": "https://sst.dev/docs/component/aws/app-sync", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"AppSync\"?\n\nAssistant: Here are the recommended best practices:\n\n• Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other providers, you’ll need to pass in a `cert` that validates domain ownership and add the DNS records.\n• By default, this assumes the domain is hosted on Route 53.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync", "title": "AppSync", "description": "Reference doc for the `sst.aws.AppSync` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:20:19", "type": "best_practices", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.AppSync` component.", "favicon": "https://sst.dev/favicon.ico", "og:url": "https://sst.dev/docs/component/aws/app-sync/", "language": "en", "twitter:card": "summary_large_image", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luYw%3D%3D.png", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luYw%3D%3D.png", "og:type": "article", "og:locale": "en", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "description": "Reference doc for the `sst.aws.AppSync` component.", "og:description": "Reference doc for the `sst.aws.AppSync` component.", "og:title": "AppSync", "ogTitle": "AppSync", "title": "AppSync | SST", "ogUrl": "https://sst.dev/docs/component/aws/app-sync/", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luYw%3D%3D.png", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "f3f417cc-1ccd-4451-b2f3-17ee32a048b3", "sourceURL": "https://sst.dev/docs/component/aws/app-sync", "url": "https://sst.dev/docs/component/aws/app-sync", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"SnsTopic\"?\n\nAssistant: Reference doc for the `sst.aws.SnsTopic` component.\n\nHere's a detailed explanation:\n\n\n## Create a topic\n```javascript\nconst topic = new sst.aws.SnsTopic(\"MyTopic\");\n```\n\n## Make it a FIFO topic\nYou can optionally make it a FIFO topic.\n\n```javascript\nnew sst.aws.SnsTopic(\"MyTopic\", {\n  fifo: true\n});\n```\n\n## Add a subscriber\n```javascript\ntopic.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n## Link the topic to a resource\nYou can link the topic to other resources, like a function or your Next.js app.\n\n```javascript\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [topic]\n});\n```\n\nOnce linked, you can publish messages to the topic from your function code.\n\n```javascript\nimport { Resource } from \"sst\";\nimport { SNSClient, PublishCommand } from \"@aws-sdk/client-sns\";\n\nconst sns = new SNSClient({});\n\nawait sns.send(new PublishCommand({\n  TopicArn: Resource.MyTopic.arn,\n  Message: \"Hello from Next.js!\"\n}));\n```\n\n## Constructor\n```javascript\nnew SnsTopic(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`SnsTopicArgs`](https://sst.dev/docs/component/aws/sns-topic#snstopicargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/) \n\n\n## SnsTopicArgs\n### fifo?\n**Type** `Input` `<` `boolean` `>`  \n**Default** `false`\n\nFIFO (First-In-First-Out) topics are designed to provide strict message ordering.\n\n```javascript\n{\n  fifo: true\n}\n```\n\n### transform?\n**Type** `Object`\n- [`topic?`](https://sst.dev/docs/component/aws/sns-topic#transform-topic)\n\n[Transform](https://sst.dev/docs/components#transform) how this component creates its underlying resources.\n\n## Properties\n### arn\n**Type** `Output` `<` `string` `>`  \nThe ARN of the SNS Topic.\n\n### name\n**Type** `Output` `<` `string` `>`  \nThe name of the SNS Topic.\n\n### nodes\n**Type** `Object`\n- [`topic`](https://sst.dev/docs/component/aws/sns-topic#nodes-topic)\n\nThe underlying [resources](https://sst.dev/docs/components/#nodes) this component creates.\n\n## SDK\nUse the [SDK](https://sst.dev/docs/reference/sdk/) in your runtime to interact with your infrastructure.\n\n## Links\nThis is accessible through the `Resource` object in the [SDK](https://sst.dev/docs/reference/sdk/#links).\n- `arn` `string`\nThe ARN of the SNS Topic.\n\n## Methods\n### subscribe\n```javascript\nsubscribe(name, subscriber, args?)\n```\n#### Parameters\n- `name` `string`\n- `subscriber` `Input` `<` `string` ` | ` [`FunctionArgs`](https://sst.dev/docs/component/aws/function/#functionargs) ` | ` `“arn:aws:lambda:${string}”` `>`\n- `args?` [`SnsTopicSubscriberArgs`](https://sst.dev/docs/component/aws/sns-topic#snstopicsubscriberargs)\n\n**Returns** `Output` `<` [`SnsTopicLambdaSubscriber`](https://sst.dev/docs/component/aws/sns-topic-lambda-subscriber/) `>`\n\nSubscribe to this SNS Topic.\n\n```javascript\ntopic.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\nAdd a filter to the subscription.\n\n```javascript\ntopic.subscribe(\"MySubscriber\", \"src/subscriber.handler\", {\n  filter: {\n    price_usd: [{numeric: [\">=\", 100]}]\n  }\n});\n```\n\nCustomize the subscriber function.\n\n```javascript\ntopic.subscribe(\"MySubscriber\", {\n  handler: \"src/subscriber.handler\",\n  timeout: \"60 seconds\"\n});\n```\n\nOr pass in the ARN of an existing Lambda function.\n\n```javascript\ntopic.subscribe(\"MySubscriber\", \"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n```\n\n### subscribeQueue\n```javascript\nsubscribeQueue(name, queue, args?)\n```\n#### Parameters\n- `name` `string`\n- `queue` `Input` `<` `string` ` | ` [`Queue`](https://sst.dev/docs/component/aws/queue/) `>`\n- `args?` [`SnsTopicSubscriberArgs`](https://sst.dev/docs/component/aws/sns-topic#snstopicsubscriberargs)\n\n**Returns** `Output` `<` [`SnsTopicQueueSubscriber`](https://sst.dev/docs/component/aws/sns-topic-queue-subscriber/) `>`\n\nSubscribe to this SNS Topic with an SQS Queue.\n\nFor example, let’s say you have a queue.\n\n```javascript\nconst queue = sst.aws.Queue(\"MyQueue\");\n```\n\nYou can subscribe to this topic with it.\n\n```javascript\ntopic.subscribeQueue(\"MySubscriber\", queue.arn);\n```\n\nAdd a filter to the subscription.\n\n```javascript\ntopic.subscribeQueue(\"MySubscriber\", queue.arn, {\n  filter: {\n    price_usd: [{numeric: [\">=\", 100]}]\n  }\n});\n```\n\n### static get\n```javascript\nSnsTopic.get(name, topicArn, opts?)\n```\n#### Parameters\n- `name` `string`\n- `topicArn` `Input` `<` `string` `>`\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n\n**Returns** [`SnsTopic`](https://sst.dev/docs/component/aws/sns-topic)\n\nReference an existing SNS topic with its topic ARN. This is useful when you create a topic in one stage and want to share it in another stage. It avoids having to create a new topic in the other stage.\n\nImagine you create a topic in the `dev` stage. And in your personal stage `frank`, instead of creating a new topic, you want to share the topic from `dev`.\n\n```javascript\nconst topic = $app.stage === \"frank\"\n  ? sst.aws.SnsTopic.get(\"MyTopic\", \"arn:aws:sns:us-east-1:123456789012:MyTopic\")\n  : new sst.aws.SnsTopic(\"MyTopic\");\n```\n\nHere `arn:aws:sns:us-east-1:123456789012:MyTopic` is the ARN of the topic created in the `dev` stage. You can find this by outputting the topic ARN in the `dev` stage.\n\n```javascript\nreturn topic.arn;\n```\n\n### static subscribe\n```javascript\nSnsTopic.subscribe(name, topicArn, subscriber, args?)\n```\n#### Parameters\n- `name` `string`\n- `topicArn` `Input` `<` `string` `>`\n- `subscriber` `Input` `<` `string` ` | ` [`FunctionArgs`](https://sst.dev/docs/component/aws/function/#functionargs) ` | ` `“arn:aws:lambda:${string}”` `>`\n- `args?` [`SnsTopicSubscriberArgs`](https://sst.dev/docs/component/aws/sns-topic#snstopicsubscriberargs)\n\n**Returns** `Output` `<` [`SnsTopicLambdaSubscriber`](https://sst.dev/docs/component/aws/sns-topic-lambda-subscriber/) `>`\n\nSubscribe to an SNS Topic that was not created in your app.\n\nFor example, let’s say you have an existing SNS Topic with the following ARN.\n\n```javascript\nconst topicArn = \"arn:aws:sns:us-east-1:123456789012:MyTopic\";\n```\n\nYou can subscribe to it by passing in the ARN.\n\n```javascript\nsst.aws.SnsTopic.subscribe(\"MySubscriber\", topicArn, \"src/subscriber.handler\");\n```\n\nAdd a filter to the subscription.\n\n```javascript\nsst.aws.SnsTopic.subscribe(\"MySubscriber\", topicArn, \"src/subscriber.handler\", {\n  filter: {\n    price_usd: [{numeric: [\">=\", 100]}]\n  }\n});\n```\n\nCustomize the subscriber function.\n\n```javascript\nsst.aws.SnsTopic.subscribe(\"MySubscriber\", topicArn, {\n  handler: \"src/subscriber.handler\",\n  timeout: \"60 seconds\"\n});\n```\n\n### static subscribeQueue\n```javascript\nSnsTopic.subscribeQueue(name, topicArn, queue, args?)\n```\n#### Parameters\n- `name` `string`\n- `topicArn` `Input` `<` `string` `>`\n- `queue` `Input` `<` `string` ` | ` [`Queue`](https://sst.dev/docs/component/aws/queue/) `>`\n- `args?` [`SnsTopicSubscriberArgs`](https://sst.dev/docs/component/aws/sns-topic#snstopicsubscriberargs)\n\n**Returns** `Output` `<` [`SnsTopicQueueSubscriber`](https://sst.dev/docs/component/aws/sns-topic-queue-subscriber/) `>`\n\nSubscribe to an existing SNS Topic with a previously created SQS Queue.\n\nFor example, let’s say you have an existing SNS Topic and SQS Queue with the following ARNs.\n\n```javascript\nconst topicArn = \"arn:aws:sns:us-east-1:123456789012:MyTopic\";\nconst queueArn = \"arn:aws:sqs:us-east-1:123456789012:MyQueue\";\n```\n\nYou can subscribe to the topic with the queue.\n\n```javascript\nsst.aws.SnsTopic.subscribeQueue(\"MySubscriber\", topicArn, queueArn);\n```\n\nAdd a filter to the subscription.\n\n```javascript\nsst.aws.SnsTopic.subscribeQueue(\"MySubscriber\", topicArn, queueArn, {\n  filter: {\n    price_usd: [{numeric: [\">=\", 100]}]\n  }\n});\n```\n\n## SnsTopicSubscriberArgs\n### filter?\n**Type** `Input` `<` `Record` `<` `string`, `any` `>` `>`\n\nFilter the messages that’ll be processed by the subscriber.\n\nIf any single property in the filter doesn’t match an attribute assigned to the message, then the policy rejects the message.\n\nFor example, if your SNS Topic message contains this in a JSON format.\n\n```javascript\n{\n  store: \"example_corp\",\n  event: \"order-placed\",\n  customer_interests: [\n     \"soccer\",\n     \"rugby\",\n     \"hockey\"\n  ],\n  price_usd: 210.75\n}\n```\n\nThen this filter policy accepts the message.\n\n```javascript\n{\n  filter: {\n    store: [\"example_corp\"],\n    event: [{\"anything-but\": \"order_cancelled\"}],\n    customer_interests: [\n       \"rugby\",\n       \"football\",\n       \"baseball\"\n    ],\n    price_usd: [{numeric: [\">=\", 100]}]\n  }\n}\n```\n\n### transform?\n**Type** `Object`\n- [`subscription?`](https://sst.dev/docs/component/aws/sns-topic#transform-subscription)\n\n[Transform](https://sst.dev/docs/components#transform) how this subscription creates its underlying resources.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/sns-topic", "title": "SnsTopic", "description": "Reference doc for the `sst.aws.SnsTopic` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 21:21:02", "type": "overview", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/sns-topic/", "description": "Reference doc for the `sst.aws.SnsTopic` component.", "og:description": "Reference doc for the `sst.aws.SnsTopic` component.", "title": "SnsTopic | SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "viewport": "width=device-width, initial-scale=1", "ogTitle": "SnsTopic", "ogDescription": "Reference doc for the `sst.aws.SnsTopic` component.", "ogLocale": "en", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/U25zVG9waWM%3D.png", "ogSiteName": "SST", "og:title": "SnsTopic", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/sns-topic/", "og:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWM%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWM%3D.png", "og:locale": "en", "og:site_name": "SST", "scrapeId": "ad32c77b-aa5c-4452-ab8f-29f15dbb5b9f", "sourceURL": "https://sst.dev/docs/component/aws/sns-topic", "url": "https://sst.dev/docs/component/aws/sns-topic", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"SnsTopic\"?\n\nAssistant: Here are some code examples:\n\n### Create a topic\n```yaml\nconst topic = new sst.aws.SnsTopic(\"MyTopic\");\n```\n\n### Make it a FIFO topic\n```yaml\nnew sst.aws.SnsTopic(\"MyTopic\", {\n  fifo: true\n});\n```\n\n### Add a subscriber\n```yaml\ntopic.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n### Link the topic to a resource\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [topic]\n});\n```\n\n### Publish message to the topic\n```yaml\nimport { Resource } from \"sst\";\nimport { SNSClient, PublishCommand } from \"@aws-sdk/client-sns\";\n\nconst sns = new SNSClient({});\n\nawait sns.send(new PublishCommand({\n  TopicArn: Resource.MyTopic.arn,\n  Message: \"Hello from Next.js!\"\n}));\n```\n\n### Subscribe to this SNS Topic\n```yaml\ntopic.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n### Add a filter to the subscription\n```yaml\ntopic.subscribe(\"MySubscriber\", \"src/subscriber.handler\", {\n  filter: {\n    price_usd: [{numeric: [\">=\", 100]}]\n  }\n});\n```\n\n### Customize the subscriber function\n```yaml\ntopic.subscribe(\"MySubscriber\", {\n  handler: \"src/subscriber.handler\",\n  timeout: \"60 seconds\"\n});\n```\n\n### Subscribe to this SNS Topic with an SQS Queue\n```yaml\nconst queue = sst.aws.Queue(\"MyQueue\");\ntopic.subscribeQueue(\"MySubscriber\", queue.arn);\n```\n\n### Reference an existing SNS topic\n```yaml\nconst topic = $app.stage === \"frank\"\n  ? sst.aws.SnsTopic.get(\"MyTopic\", \"arn:aws:sns:us-east-1:123456789012:MyTopic\")\n  : new sst.aws.SnsTopic(\"MyTopic\");\n```\n\n### Subscribe to an existing SNS Topic\n```yaml\nsst.aws.SnsTopic.subscribe(\"MySubscriber\", topicArn, \"src/subscriber.handler\");\n```\n\n### Subscribe to an existing SNS Topic with a previously created SQS Queue\n```yaml\nsst.aws.SnsTopic.subscribeQueue(\"MySubscriber\", topicArn, queueArn);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/sns-topic", "title": "SnsTopic", "description": "Reference doc for the `sst.aws.SnsTopic` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 21:21:02", "type": "code_examples", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/sns-topic/", "description": "Reference doc for the `sst.aws.SnsTopic` component.", "og:description": "Reference doc for the `sst.aws.SnsTopic` component.", "title": "SnsTopic | SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "viewport": "width=device-width, initial-scale=1", "ogTitle": "SnsTopic", "ogDescription": "Reference doc for the `sst.aws.SnsTopic` component.", "ogLocale": "en", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/U25zVG9waWM%3D.png", "ogSiteName": "SST", "og:title": "SnsTopic", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/sns-topic/", "og:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWM%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWM%3D.png", "og:locale": "en", "og:site_name": "SST", "scrapeId": "ad32c77b-aa5c-4452-ab8f-29f15dbb5b9f", "sourceURL": "https://sst.dev/docs/component/aws/sns-topic", "url": "https://sst.dev/docs/component/aws/sns-topic", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"SnsTopic\"?\n\nAssistant: Here are the recommended best practices:\n\n• FIFO (First-In-First-Out) topics are designed to provide strict message ordering.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/sns-topic", "title": "SnsTopic", "description": "Reference doc for the `sst.aws.SnsTopic` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 21:21:02", "type": "best_practices", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/sns-topic/", "description": "Reference doc for the `sst.aws.SnsTopic` component.", "og:description": "Reference doc for the `sst.aws.SnsTopic` component.", "title": "SnsTopic | SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "viewport": "width=device-width, initial-scale=1", "ogTitle": "SnsTopic", "ogDescription": "Reference doc for the `sst.aws.SnsTopic` component.", "ogLocale": "en", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/U25zVG9waWM%3D.png", "ogSiteName": "SST", "og:title": "SnsTopic", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/sns-topic/", "og:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWM%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWM%3D.png", "og:locale": "en", "og:site_name": "SST", "scrapeId": "ad32c77b-aa5c-4452-ab8f-29f15dbb5b9f", "sourceURL": "https://sst.dev/docs/component/aws/sns-topic", "url": "https://sst.dev/docs/component/aws/sns-topic", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"DNS Adapter\"?\n\nAssistant: Reference doc for the `sst.vercel.dns` functions.\n\nHere's a detailed explanation:\n\n\n## Configuring Vercel provider\n1. To use this component, add the `@pulumiverse/vercel` provider to your app. You can do this by running:\n\n``` \n\nsst add @pulumiverse/vercel\n```\n\nThe [`sst add`](https://sst.dev/docs/reference/cli/#add) commands adds and installs the provider to your `sst.config.ts` file.\n\n2. If you don’t already have a Vercel Access Token, follow [this guide](https://vercel.com/guides/how-do-i-use-a-vercel-api-access-token#creating-an-access-token) to create one.\n\n3. Add a `VERCEL_API_TOKEN` environment variable with the access token value. If the domain belongs to a team, also add a `VERCEL_TEAM_ID` environment variable with the Team ID. You can find your Team ID inside your team’s general project settings on the Vercel dashboard.\n\n## Functions\n### dns\n\n```\ndns(args)\n```\n\n#### Parameters\n\n- `args` [`DnsArgs`](https://sst.dev/docs/component/vercel/dns-adapter#dnsargs)\n\nThe DNS arguments.\n\n**Returns** `Object`\n\n## DnsArgs\n### domain\n\n**Type** `Input` `<` `string` `>`\n\nThe domain name in your Vercel account to create the record in.\n\n```\n{\n  domain: \"example.com\"\n}\n```\n\n### transform?\n\n**Type** `Object`\n\n- [`record?`](https://sst.dev/docs/component/vercel/dns-adapter#transform-record)\n\n[Transform](https://sst.dev/docs/components#transform) how this component creates its underlying resources.\n\n## transform.record?\n**Type** [`DnsRecordArgs`](https://www.pulumi.com/registry/packages/vercel/api-docs/dnsrecord/#inputs) ` | ` `(` `args` `: ` [`DnsRecordArgs`](https://www.pulumi.com/registry/packages/vercel/api-docs/dnsrecord/#inputs) ` => ` [`DnsRecordArgs`](https://www.pulumi.com/registry/packages/vercel/api-docs/dnsrecord/#inputs) ` | ` `void` `)\n\nTransform the Vercel record resource.\n", "metadata": {"source_url": "https://sst.dev/docs/component/vercel/dns-adapter", "title": "DNS Adapter", "description": "Reference doc for the `sst.vercel.dns` functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:21:15", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "DNS Adapter", "og:description": "Reference doc for the `sst.vercel.dns` functions..", "twitter:card": "summary_large_image", "og:title": "DNS Adapter", "twitter:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:locale": "en", "language": "en", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.vercel.dns` functions..", "ogUrl": "https://sst.dev/docs/component/vercel/dns-adapter/", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "og:url": "https://sst.dev/docs/component/vercel/dns-adapter/", "og:site_name": "SST", "title": "DNS Adapter | SST", "og:type": "article", "description": "Reference doc for the `sst.vercel.dns` functions..", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "scrapeId": "f478b688-a66c-4eeb-9546-8c8863149984", "sourceURL": "https://sst.dev/docs/component/vercel/dns-adapter", "url": "https://sst.dev/docs/component/vercel/dns-adapter", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"DNS Adapter\"?\n\nAssistant: Here are some code examples:\n\n### Basic DNS Adapter Usage\n```yaml\nsst.vercel.dns({\n  domain: \"example.com\"\n});\n```\n\n### Adding Vercel Provider\n```yaml\nsst add @pulumiverse/vercel\n```\n\n### DNS Args Example\n```yaml\n{\n  domain: \"example.com\"\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/vercel/dns-adapter", "title": "DNS Adapter", "description": "Reference doc for the `sst.vercel.dns` functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:21:15", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "DNS Adapter", "og:description": "Reference doc for the `sst.vercel.dns` functions..", "twitter:card": "summary_large_image", "og:title": "DNS Adapter", "twitter:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:locale": "en", "language": "en", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.vercel.dns` functions..", "ogUrl": "https://sst.dev/docs/component/vercel/dns-adapter/", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "og:url": "https://sst.dev/docs/component/vercel/dns-adapter/", "og:site_name": "SST", "title": "DNS Adapter | SST", "og:type": "article", "description": "Reference doc for the `sst.vercel.dns` functions..", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "scrapeId": "f478b688-a66c-4eeb-9546-8c8863149984", "sourceURL": "https://sst.dev/docs/component/vercel/dns-adapter", "url": "https://sst.dev/docs/component/vercel/dns-adapter", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"DNS Adapter\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure you have the correct Vercel Access Token and Team ID if applicable.\n• Use the `sst add` command to properly install the Vercel provider.\n", "metadata": {"source_url": "https://sst.dev/docs/component/vercel/dns-adapter", "title": "DNS Adapter", "description": "Reference doc for the `sst.vercel.dns` functions.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:21:15", "type": "best_practices", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "ogTitle": "DNS Adapter", "og:description": "Reference doc for the `sst.vercel.dns` functions..", "twitter:card": "summary_large_image", "og:title": "DNS Adapter", "twitter:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "og:locale": "en", "language": "en", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.vercel.dns` functions..", "ogUrl": "https://sst.dev/docs/component/vercel/dns-adapter/", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "og:url": "https://sst.dev/docs/component/vercel/dns-adapter/", "og:site_name": "SST", "title": "DNS Adapter | SST", "og:type": "article", "description": "Reference doc for the `sst.vercel.dns` functions..", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/RE5TJTIwQWRhcHRlcg%3D%3D.png", "scrapeId": "f478b688-a66c-4eeb-9546-8c8863149984", "sourceURL": "https://sst.dev/docs/component/vercel/dns-adapter", "url": "https://sst.dev/docs/component/vercel/dns-adapter", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV2Authorizer\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\n\nnew ApiGatewayV2Authorizer(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`AuthorizerArgs`](https://sst.dev/docs/component/aws/apigatewayv2-authorizer#authorizerargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer", "title": "ApiGatewayV2Authorizer", "description": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:21:21", "type": "overview", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyQXV0aG9yaXplcg%3D%3D.png", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "title": "ApiGatewayV2Authorizer | SST", "viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "ogSiteName": "SST", "language": "en", "ogTitle": "ApiGatewayV2Authorizer", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer/", "og:title": "ApiGatewayV2Authorizer", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyQXV0aG9yaXplcg%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyQXV0aG9yaXplcg%3D%3D.png", "twitter:card": "summary_large_image", "scrapeId": "d7b10177-0802-473b-ad91-906d2d0a0c8b", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer", "url": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV2Authorizer\"?\n\nAssistant: Here are some code examples:\n\n### JWT Configuration Example\n```yaml\n{\n  jwt: {\n    issuer: \"https://issuer.com/\",\n    audiences: [\"https://api.example.com\"],\n    identitySource: \"$request.header.AccessToken\"\n  }\n}\n```\n\n### Cognito as Identity Provider Example\n```yaml\n{\n  jwt: {\n    audiences: [userPoolClient.id],\n    issuer: $interpolate`https://cognito-idp.${aws.getArnOutput(userPool).region}.amazonaws.com/${userPool.id}`,\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer", "title": "ApiGatewayV2Authorizer", "description": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:21:21", "type": "code_examples", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyQXV0aG9yaXplcg%3D%3D.png", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "title": "ApiGatewayV2Authorizer | SST", "viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "ogSiteName": "SST", "language": "en", "ogTitle": "ApiGatewayV2Authorizer", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer/", "og:title": "ApiGatewayV2Authorizer", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyQXV0aG9yaXplcg%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyQXV0aG9yaXplcg%3D%3D.png", "twitter:card": "summary_large_image", "scrapeId": "d7b10177-0802-473b-ad91-906d2d0a0c8b", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer", "url": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayV2Authorizer\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can also use Cognito as the identity provider for JWT.\n• Ensure that the audiences list contains valid recipients for the JWT.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer", "title": "ApiGatewayV2Authorizer", "description": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:21:21", "type": "best_practices", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "description": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyQXV0aG9yaXplcg%3D%3D.png", "ogLocale": "en", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "title": "ApiGatewayV2Authorizer | SST", "viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2Authorizer` component.", "ogSiteName": "SST", "language": "en", "ogTitle": "ApiGatewayV2Authorizer", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer/", "og:title": "ApiGatewayV2Authorizer", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "og:locale": "en", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyQXV0aG9yaXplcg%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyQXV0aG9yaXplcg%3D%3D.png", "twitter:card": "summary_large_image", "scrapeId": "d7b10177-0802-473b-ad91-906d2d0a0c8b", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer", "url": "https://sst.dev/docs/component/aws/apigatewayv2-authorizer", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"SvelteKit\"?\n\nAssistant: Reference doc for the `sst.aws.SvelteKit` component.\n\nHere's a detailed explanation:\n\n\n## Minimal example\nDeploy a SvelteKit app that’s in the project root.\n\n```\n\nnew sst.aws.SvelteKit(\"MyWeb\");\n```\n\n\n## Change the path\nDeploys the SvelteKit app in the `my-svelte-app/` directory.\n\n```\n\nnew sst.aws.SvelteKit(\"MyWeb\", {\n\n  path: \"my-svelte-app/\"\n\n});\n```\n\n\n## Add a custom domain\nSet a custom domain for your SvelteKit app.\n\n```\n\nnew sst.aws.SvelteKit(\"MyWeb\", {\n\n  domain: \"my-app.com\"\n\n});\n```\n\n\n## Redirect www to apex domain\nRedirect `www.my-app.com` to `my-app.com`.\n\n```\n\nnew sst.aws.SvelteKit(\"MyWeb\", {\n\n  domain: {\n\n    name: \"my-app.com\",\n\n    redirects: [\"www.my-app.com\"]\n\n  }\n\n});\n```\n\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your SvelteKit app. This will grant permissions to the resources and allow you to access it in your app.\n\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.SvelteKit(\"MyWeb\", {\n\n  link: [bucket]\n\n});\n```\n\nYou can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources in your SvelteKit app.\n\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n\n## Constructor\n```\nnew SvelteKit(name, args?, opts?)\n```\n\n\n## Parameters\n- `name` `string`\n\n- `args?` [`SvelteKitArgs`](https://sst.dev/docs/component/aws/svelte-kit#sveltekitargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/svelte-kit", "title": "SvelteKit", "description": "Reference doc for the `sst.aws.SvelteKit` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:21:35", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.SvelteKit` component.", "ogSiteName": "SST", "twitter:card": "summary_large_image", "language": "en", "og:title": "SvelteKit", "ogTitle": "SvelteKit", "og:url": "https://sst.dev/docs/component/aws/svelte-kit/", "ogDescription": "Reference doc for the `sst.aws.SvelteKit` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0.png", "title": "SvelteKit | SST", "og:type": "article", "og:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0.png", "ogUrl": "https://sst.dev/docs/component/aws/svelte-kit/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.SvelteKit` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "8faed2ab-2bd2-42ca-942c-34161bff9e3c", "sourceURL": "https://sst.dev/docs/component/aws/svelte-kit", "url": "https://sst.dev/docs/component/aws/svelte-kit", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"SvelteKit\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nnew sst.aws.SvelteKit(\"MyWeb\");\n```\n\n### Change the path\n```yaml\nnew sst.aws.SvelteKit(\"MyWeb\", {\n  path: \"my-svelte-app/\"\n});\n```\n\n### Add a custom domain\n```yaml\nnew sst.aws.SvelteKit(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Redirect www to apex domain\n```yaml\nnew sst.aws.SvelteKit(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nnew sst.aws.SvelteKit(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n### Access linked resources\n```yaml\nimport { Resource } from \"sst\";\nconsole.log(Resource.MyBucket.name);\n```\n\n### Constructor\n```yaml\nnew SvelteKit(name, args?, opts?)\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/svelte-kit", "title": "SvelteKit", "description": "Reference doc for the `sst.aws.SvelteKit` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:21:35", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.SvelteKit` component.", "ogSiteName": "SST", "twitter:card": "summary_large_image", "language": "en", "og:title": "SvelteKit", "ogTitle": "SvelteKit", "og:url": "https://sst.dev/docs/component/aws/svelte-kit/", "ogDescription": "Reference doc for the `sst.aws.SvelteKit` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0.png", "title": "SvelteKit | SST", "og:type": "article", "og:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0.png", "ogUrl": "https://sst.dev/docs/component/aws/svelte-kit/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.SvelteKit` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "8faed2ab-2bd2-42ca-942c-34161bff9e3c", "sourceURL": "https://sst.dev/docs/component/aws/svelte-kit", "url": "https://sst.dev/docs/component/aws/svelte-kit", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"SvelteKit\"?\n\nAssistant: Here are the recommended best practices:\n\n• Configure how the SvelteKit app assets are uploaded to S3.\n• Use the SDK to access linked resources in your SvelteKit app.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/svelte-kit", "title": "SvelteKit", "description": "Reference doc for the `sst.aws.SvelteKit` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:21:35", "type": "best_practices", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.SvelteKit` component.", "ogSiteName": "SST", "twitter:card": "summary_large_image", "language": "en", "og:title": "SvelteKit", "ogTitle": "SvelteKit", "og:url": "https://sst.dev/docs/component/aws/svelte-kit/", "ogDescription": "Reference doc for the `sst.aws.SvelteKit` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0.png", "title": "SvelteKit | SST", "og:type": "article", "og:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3ZlbHRlS2l0.png", "ogUrl": "https://sst.dev/docs/component/aws/svelte-kit/", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.SvelteKit` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "8faed2ab-2bd2-42ca-942c-34161bff9e3c", "sourceURL": "https://sst.dev/docs/component/aws/svelte-kit", "url": "https://sst.dev/docs/component/aws/svelte-kit", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayWebSocket\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayWebSocket` component.\n\nHere's a detailed explanation:\n\n\n## Create the API\n```javascript\nconst api = new sst.aws.ApiGatewayWebSocket(\"MyApi\");\n```\n\n## Add a custom domain\n```javascript\nnew sst.aws.ApiGatewayWebSocket(\"MyApi\", {\n  domain: \"api.example.com\"\n});\n```\n\n## Add routes\n```javascript\napi.route(\"$connect\", \"src/connect.handler\");\napi.route(\"$disconnect\", \"src/disconnect.handler\");\napi.route(\"$default\", \"src/default.handler\");\napi.route(\"sendMessage\", \"src/sendMessage.handler\");\n```\n\n## Constructor\n```javascript\nnew ApiGatewayWebSocket(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`ApiGatewayWebSocketArgs`](https://sst.dev/docs/component/aws/apigateway-websocket#apigatewaywebsocketargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigateway-websocket", "title": "ApiGatewayWebSocket", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:21:44", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldA%3D%3D.png", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/apigateway-websocket/", "og:type": "article", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/apigateway-websocket/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "title": "ApiGatewayWebSocket | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldA%3D%3D.png", "og:title": "ApiGatewayWebSocket", "ogTitle": "ApiGatewayWebSocket", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldA%3D%3D.png", "og:description": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "scrapeId": "82681dfd-e652-4d26-9672-b23226beda48", "sourceURL": "https://sst.dev/docs/component/aws/apigateway-websocket", "url": "https://sst.dev/docs/component/aws/apigateway-websocket", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayWebSocket\"?\n\nAssistant: Here are some code examples:\n\n### Access Log Configuration\n```yaml\n{\n  accessLog: {\n    retention: \"forever\"\n  }\n}\n```\n\n### Custom Domain Configuration\n```yaml\n{\n  domain: \"example.com\"\n}\n```\n\n### Cloudflare Domain Configuration\n```yaml\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.cloudflare.dns()\n  }\n}\n```\n\n### Route Configuration\n```yaml\n{\n  transform: {\n    route: {\n      handler: {\n        link: [bucket, stripeKey]\n      },\n      args: {\n        auth: { iam: true }\n      }\n    }\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigateway-websocket", "title": "ApiGatewayWebSocket", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:21:44", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldA%3D%3D.png", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/apigateway-websocket/", "og:type": "article", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/apigateway-websocket/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "title": "ApiGatewayWebSocket | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldA%3D%3D.png", "og:title": "ApiGatewayWebSocket", "ogTitle": "ApiGatewayWebSocket", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldA%3D%3D.png", "og:description": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "scrapeId": "82681dfd-e652-4d26-9672-b23226beda48", "sourceURL": "https://sst.dev/docs/component/aws/apigateway-websocket", "url": "https://sst.dev/docs/component/aws/apigateway-websocket", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayWebSocket\"?\n\nAssistant: Here are the recommended best practices:\n\n• By default, access logs are enabled and kept for 1 month. You can configure the retention period as needed.\n• For custom domains, ensure that you validate domain ownership and set the appropriate DNS records.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigateway-websocket", "title": "ApiGatewayWebSocket", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:21:44", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldA%3D%3D.png", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/apigateway-websocket/", "og:type": "article", "ogLocale": "en", "og:url": "https://sst.dev/docs/component/aws/apigateway-websocket/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "title": "ApiGatewayWebSocket | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldA%3D%3D.png", "og:title": "ApiGatewayWebSocket", "ogTitle": "ApiGatewayWebSocket", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldA%3D%3D.png", "og:description": "Reference doc for the `sst.aws.ApiGatewayWebSocket` component.", "scrapeId": "82681dfd-e652-4d26-9672-b23226beda48", "sourceURL": "https://sst.dev/docs/component/aws/apigateway-websocket", "url": "https://sst.dev/docs/component/aws/apigateway-websocket", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Set up a Monorepo\"?\n\nAssistant: A TypeScript monorepo setup for your app.\n\nHere's a detailed explanation:\n\n\n## How to use\nTo use this template.\n\n1. Head over to [**github.com/sst/monorepo-template**](https://github.com/sst/monorepo-template)\n\n2. Click on **Use this template** and create a new repo.\n\n3. Clone the repo.\n\n4. From the project root, run the following to rename it to your app.\n\n```npx replace-in-file /monorepo-template/g MY_APP **/*.* --verbose```\n\n5. Install the dependencies.\n\n```npm install```\n\nNow just run `npx sst dev` from the project root.\n\n## Project structure\nThe app is split into the separate `packages/` and an `infra/` directory.\n\n```\nmy-sst-app\n\n├─ sst.config.ts\n\n├─ package.json\n\n├─ packages\n│  ├─ functions\n│  ├─ scripts\n│  └─ core\n└─ infra\n```\n\nThe `packages/` directory has your workspaces and this is in the root `package.json`.\n\n```\n\"workspaces\": [\\\n\\\n  \"packages/*\"\\\n\\\n]\n```\n\nLet’s look at it in detail.\n\n## Packages\nThe `packages/` directory includes the following:\n\n- `core/`\n\nThis directory includes shared code that can be used by other packages. These are defined as modules. For example, we have an `Example` module.\n\n```typescript\nexport module Example {\n    export function hello() {\n      return \"Hello, world!\";\n    }\n}\n```\n\nWe export this using the following in the `package.json`:\n\n```json\n\"exports\": {\n    \"./*\": [\\\n\\\n      \"./src/*/index.ts\",\\\n\\\n      \"./src/*.ts\"\\\n\\\n    ]\n}\n```\n\nThis will allow us to import the `Example` module by doing:\n\n```typescript\nimport { Example } from \"@monorepo-template/core/example\";\n\nExample.hello();\n```\n\nWe recommend creating new modules for the various _domains_ in your project. This roughly follows Domain Driven Design.\n\nWe also have [Vitest](https://vitest.dev/) configured for testing this package with the `sst shell` CLI.\n\n```bash\nnpm test\n```\n\n- `functions/`\n\nThis directory includes our Lambda functions. It imports from the `core/` package by using it as a local dependency.\n\n- `scripts/`\n\nThis directory includes scripts that you can run on your SST app using the `sst shell` CLI and [`tsx`](https://www.npmjs.com/package/tsx). For example, to the run the example `scripts/src/example.ts`, run the following from `packages/scripts/`.\n\n```bash\nnpm run shell src/example.ts\n```\n\nYou can add additional packages to the `packages/` directory. For example, you might add a `frontend/` and a `backend/` package.\n\n## Infrastructure\nThe `infra/` directory allows you to logically split the infrastructure of your app into separate files. This can be helpful as your app grows.\n\nIn the template, we have an `api.ts`, and `storage.ts`. These export resources that can be used in the other infrastructure files.\n\n```typescript\nexport const bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\nWe then dynamically import them in the `sst.config.ts`.\n\n```typescript\nasync run() {\n  const storage = await import(\"./infra/storage\");\n  await import(\"./infra/api\");\n  return {\n    MyBucket: storage.bucket.name\n  };\n}\n```\n\nFinally, some of the outputs of our components are set as outputs for our app.\n", "metadata": {"source_url": "https://sst.dev/docs/set-up-a-monorepo", "title": "Set up a Monorepo", "description": "A TypeScript monorepo setup for your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:21:56", "type": "overview", "page_metadata": {"ogUrl": "https://sst.dev/docs/set-up-a-monorepo/", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBhJTIwTW9ub3JlcG8%3D.png", "og:description": "A TypeScript monorepo setup for your app.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Set up a Monorepo", "og:locale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBhJTIwTW9ub3JlcG8%3D.png", "og:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBhJTIwTW9ub3JlcG8%3D.png", "og:title": "Set up a Monorepo", "ogSiteName": "SST", "description": "A TypeScript monorepo setup for your app.", "og:url": "https://sst.dev/docs/set-up-a-monorepo/", "og:type": "article", "ogDescription": "A TypeScript monorepo setup for your app.", "twitter:card": "summary_large_image", "title": "Set up a Monorepo | SST", "scrapeId": "ae6b3730-c241-4b26-80dc-7229518b85f8", "sourceURL": "https://sst.dev/docs/set-up-a-monorepo", "url": "https://sst.dev/docs/set-up-a-monorepo", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Set up a Monorepo\"?\n\nAssistant: Here are some code examples:\n\n### Rename the template\n```yaml\nnpx replace-in-file /monorepo-template/g MY_APP **/*.* --verbose\n```\n\n### Install dependencies\n```yaml\nnpm install\n```\n\n### Example module\n```yaml\nexport module Example {\n    export function hello() {\n      return \"Hello, world!\";\n    }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/set-up-a-monorepo", "title": "Set up a Monorepo", "description": "A TypeScript monorepo setup for your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:21:56", "type": "code_examples", "page_metadata": {"ogUrl": "https://sst.dev/docs/set-up-a-monorepo/", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBhJTIwTW9ub3JlcG8%3D.png", "og:description": "A TypeScript monorepo setup for your app.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Set up a Monorepo", "og:locale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBhJTIwTW9ub3JlcG8%3D.png", "og:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBhJTIwTW9ub3JlcG8%3D.png", "og:title": "Set up a Monorepo", "ogSiteName": "SST", "description": "A TypeScript monorepo setup for your app.", "og:url": "https://sst.dev/docs/set-up-a-monorepo/", "og:type": "article", "ogDescription": "A TypeScript monorepo setup for your app.", "twitter:card": "summary_large_image", "title": "Set up a Monorepo | SST", "scrapeId": "ae6b3730-c241-4b26-80dc-7229518b85f8", "sourceURL": "https://sst.dev/docs/set-up-a-monorepo", "url": "https://sst.dev/docs/set-up-a-monorepo", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Set up a Monorepo\"?\n\nAssistant: Here are the recommended best practices:\n\n• We recommend creating new modules for the various domains in your project. This roughly follows Domain Driven Design.\n", "metadata": {"source_url": "https://sst.dev/docs/set-up-a-monorepo", "title": "Set up a Monorepo", "description": "A TypeScript monorepo setup for your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:21:56", "type": "best_practices", "page_metadata": {"ogUrl": "https://sst.dev/docs/set-up-a-monorepo/", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBhJTIwTW9ub3JlcG8%3D.png", "og:description": "A TypeScript monorepo setup for your app.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "Set up a Monorepo", "og:locale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBhJTIwTW9ub3JlcG8%3D.png", "og:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBhJTIwTW9ub3JlcG8%3D.png", "og:title": "Set up a Monorepo", "ogSiteName": "SST", "description": "A TypeScript monorepo setup for your app.", "og:url": "https://sst.dev/docs/set-up-a-monorepo/", "og:type": "article", "ogDescription": "A TypeScript monorepo setup for your app.", "twitter:card": "summary_large_image", "title": "Set up a Monorepo | SST", "scrapeId": "ae6b3730-c241-4b26-80dc-7229518b85f8", "sourceURL": "https://sst.dev/docs/set-up-a-monorepo", "url": "https://sst.dev/docs/set-up-a-monorepo", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"API Gateway v1 Authorizer\"?\n\nAssistant: Documentation for configuring an API Gateway v1 Authorizer in AWS.\n\nHere's a detailed explanation:\n\n\n## Introduction\nThis section provides an overview of API Gateway v1 Authorizers, including their purpose and how they integrate with AWS services.\n\n## Creating an Authorizer\nTo create an authorizer, you need to define the authorizer type, identity sources, and the authorizer's name. This can be done through the AWS Management Console or using AWS CLI.\n\n## Configuring Authorizer Settings\nYou can configure various settings for your authorizer, such as token validation, caching, and timeouts. These settings help optimize the performance and security of your API.\n\n## Testing the Authorizer\nAfter creating and configuring your authorizer, it's important to test it to ensure it works as expected. You can use tools like Postman or curl to send requests to your API.\n\n## Common Issues and Troubleshooting\nThis section covers common issues that may arise when using API Gateway v1 Authorizers and how to troubleshoot them.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer", "title": "API Gateway v1 Authorizer", "description": "Documentation for configuring an API Gateway v1 Authorizer in AWS.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:22:28", "type": "overview", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXV0aG9yaXplcg%3D%3D.png", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer/", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer/", "og:locale": "en", "language": "en", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXV0aG9yaXplcg%3D%3D.png", "og:title": "ApiGatewayV1Authorizer", "ogSiteName": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXV0aG9yaXplcg%3D%3D.png", "title": "ApiGatewayV1Authorizer | SST", "description": "Reference doc for the `sst.aws.ApiGatewayV1Authorizer` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "ApiGatewayV1Authorizer", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1Authorizer` component.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1Authorizer` component.", "scrapeId": "646ffc98-54db-4a8c-bd27-6a86a6ef4c25", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer", "url": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"API Gateway v1 Authorizer\"?\n\nAssistant: Here are some code examples:\n\n### Creating an Authorizer with AWS CLI\n```yaml\naws apigateway create-authorizer --rest-api-id <api-id> --name <authorizer-name> --type TOKEN --identity-source 'method.request.header.Authorization' --authorizer-uri <authorizer-uri>\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer", "title": "API Gateway v1 Authorizer", "description": "Documentation for configuring an API Gateway v1 Authorizer in AWS.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:22:28", "type": "code_examples", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXV0aG9yaXplcg%3D%3D.png", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer/", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer/", "og:locale": "en", "language": "en", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXV0aG9yaXplcg%3D%3D.png", "og:title": "ApiGatewayV1Authorizer", "ogSiteName": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXV0aG9yaXplcg%3D%3D.png", "title": "ApiGatewayV1Authorizer | SST", "description": "Reference doc for the `sst.aws.ApiGatewayV1Authorizer` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "ApiGatewayV1Authorizer", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1Authorizer` component.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1Authorizer` component.", "scrapeId": "646ffc98-54db-4a8c-bd27-6a86a6ef4c25", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer", "url": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"API Gateway v1 Authorizer\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always validate tokens to ensure security.\n• Use caching to improve performance and reduce latency.\n• Test your authorizer thoroughly before deploying it to production.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer", "title": "API Gateway v1 Authorizer", "description": "Documentation for configuring an API Gateway v1 Authorizer in AWS.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 21:22:28", "type": "best_practices", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXV0aG9yaXplcg%3D%3D.png", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer/", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer/", "og:locale": "en", "language": "en", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXV0aG9yaXplcg%3D%3D.png", "og:title": "ApiGatewayV1Authorizer", "ogSiteName": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXV0aG9yaXplcg%3D%3D.png", "title": "ApiGatewayV1Authorizer | SST", "description": "Reference doc for the `sst.aws.ApiGatewayV1Authorizer` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "ApiGatewayV1Authorizer", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1Authorizer` component.", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1Authorizer` component.", "scrapeId": "646ffc98-54db-4a8c-bd27-6a86a6ef4c25", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer", "url": "https://sst.dev/docs/component/aws/apigatewayv1-authorizer", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Cluster.v1\"?\n\nAssistant: Reference doc for the `sst.aws.Cluster.v1` component.\n\nHere's a detailed explanation:\n\n\n## Create a Cluster\n```javascript\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst cluster = new sst.aws.Cluster.v1(\"MyCluster\", { vpc });\n```\n\n## Add a service\n```javascript\ncluster.addService(\"MyService\");\n```\n\n## Add a public custom domain\n```javascript\ncluster.addService(\"MyService\", {\n  public: {\n    domain: \"example.com\",\n    ports: [\n      { listen: \"80/http\" },\n      { listen: \"443/https\", forward: \"80/http\" },\n    ]\n  }\n});\n```\n\n## Enable auto-scaling\n```javascript\ncluster.addService(\"MyService\", {\n  scaling: {\n    min: 4,\n    max: 16,\n    cpuUtilization: 50,\n    memoryUtilization: 50,\n  }\n});\n```\n\n## Link resources\n[Link resources](https://sst.dev/docs/linking/) to your service. This will grant permissions to the resources and allow you to access it in your app.\n\n```javascript\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\ncluster.addService(\"MyService\", {\n  link: [bucket],\n});\n```\n\nIf your service is written in Node.js, you can use the [SDK](https://sst.dev/docs/reference/sdk/) to access the linked resources.\n\n```javascript\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n## Constructor\n```javascript\nnew Cluster.v1(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args` [`ClusterArgs`](https://sst.dev/docs/component/aws/cluster-v1#clusterargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cluster-v1", "title": "Cluster.v1", "description": "Reference doc for the `sst.aws.Cluster.v1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:23:43", "type": "overview", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Cluster.v1", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlci52MQ%3D%3D.png", "ogUrl": "https://sst.dev/docs/component/aws/cluster-v1/", "og:site_name": "SST", "ogLocale": "en", "title": "Cluster.v1 | SST", "og:description": "Reference doc for the `sst.aws.Cluster.v1` component.", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Cluster.v1", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/component/aws/cluster-v1/", "og:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlci52MQ%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlci52MQ%3D%3D.png", "description": "Reference doc for the `sst.aws.Cluster.v1` component.", "language": "en", "ogDescription": "Reference doc for the `sst.aws.Cluster.v1` component.", "scrapeId": "43c263ea-80ed-4fdb-980d-e85a1f50129e", "sourceURL": "https://sst.dev/docs/component/aws/cluster-v1", "url": "https://sst.dev/docs/component/aws/cluster-v1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Cluster.v1\"?\n\nAssistant: Here are some code examples:\n\n### Create a Cluster\n```yaml\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst cluster = new sst.aws.Cluster.v1(\"MyCluster\", { vpc });\n```\n\n### Add a service\n```yaml\ncluster.addService(\"MyService\");\n```\n\n### Add a public custom domain\n```yaml\ncluster.addService(\"MyService\", {\n  public: {\n    domain: \"example.com\",\n    ports: [\n      { listen: \"80/http\" },\n      { listen: \"443/https\", forward: \"80/http\" },\n    ]\n  }\n});\n```\n\n### Enable auto-scaling\n```yaml\ncluster.addService(\"MyService\", {\n  scaling: {\n    min: 4,\n    max: 16,\n    cpuUtilization: 50,\n    memoryUtilization: 50,\n  }\n});\n```\n\n### Link resources\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\ncluster.addService(\"MyService\", {\n  link: [bucket],\n});\n```\n\n### Access linked resources in Node.js\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cluster-v1", "title": "Cluster.v1", "description": "Reference doc for the `sst.aws.Cluster.v1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:23:43", "type": "code_examples", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Cluster.v1", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlci52MQ%3D%3D.png", "ogUrl": "https://sst.dev/docs/component/aws/cluster-v1/", "og:site_name": "SST", "ogLocale": "en", "title": "Cluster.v1 | SST", "og:description": "Reference doc for the `sst.aws.Cluster.v1` component.", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Cluster.v1", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/component/aws/cluster-v1/", "og:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlci52MQ%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlci52MQ%3D%3D.png", "description": "Reference doc for the `sst.aws.Cluster.v1` component.", "language": "en", "ogDescription": "Reference doc for the `sst.aws.Cluster.v1` component.", "scrapeId": "43c263ea-80ed-4fdb-980d-e85a1f50129e", "sourceURL": "https://sst.dev/docs/component/aws/cluster-v1", "url": "https://sst.dev/docs/component/aws/cluster-v1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Cluster.v1\"?\n\nAssistant: Here are the recommended best practices:\n\n• For existing usage, rename `sst.aws.Cluster` to `sst.aws.Cluster.v1`.\n• For new Clusters, use the latest [`Cluster`](https://sst.dev/docs/component/aws/cluster) component instead.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cluster-v1", "title": "Cluster.v1", "description": "Reference doc for the `sst.aws.Cluster.v1` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:23:43", "type": "best_practices", "page_metadata": {"generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:title": "Cluster.v1", "ogImage": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlci52MQ%3D%3D.png", "ogUrl": "https://sst.dev/docs/component/aws/cluster-v1/", "og:site_name": "SST", "ogLocale": "en", "title": "Cluster.v1 | SST", "og:description": "Reference doc for the `sst.aws.Cluster.v1` component.", "favicon": "https://sst.dev/favicon.ico", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:locale": "en", "twitter:card": "summary_large_image", "ogTitle": "Cluster.v1", "ogSiteName": "SST", "og:url": "https://sst.dev/docs/component/aws/cluster-v1/", "og:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlci52MQ%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q2x1c3Rlci52MQ%3D%3D.png", "description": "Reference doc for the `sst.aws.Cluster.v1` component.", "language": "en", "ogDescription": "Reference doc for the `sst.aws.Cluster.v1` component.", "scrapeId": "43c263ea-80ed-4fdb-980d-e85a1f50129e", "sourceURL": "https://sst.dev/docs/component/aws/cluster-v1", "url": "https://sst.dev/docs/component/aws/cluster-v1", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"StaticSite\"?\n\nAssistant: Reference doc for the `sst.aws.StaticSite` component.\n\nHere's a detailed explanation:\n\n\n## Overview\nThe `StaticSite` component lets you deploy a static website to AWS. It uses [Amazon S3](https://aws.amazon.com/s3/) to store your files and [Amazon CloudFront](https://aws.amazon.com/cloudfront/) to serve them.\n\nIt can also `build` your site by running your static site generator, like [Vite](https://vitejs.dev/) and uploading the build output to S3.\n\n## Minimal example\nSimply uploads the current directory as a static site.\n\n## Change the path\nChange the `path` that should be uploaded.\n\n## Running locally\nIn `sst dev`, we don’t deploy your site to AWS because we assume you are running it locally.\n\n## Deploy a Vite SPA\nUse [Vite](https://vitejs.dev/) to deploy a React/Vue/Svelte/etc. SPA by specifying the `build` config.\n\n## Deploy a Jekyll site\nUse [Jekyll](https://jekyllrb.com/) to deploy a static site.\n\n## Deploy a Gatsby site\nUse [Gatsby](https://www.gatsbyjs.com/) to deploy a static site.\n\n## Deploy an Angular SPA\nUse [Angular](https://angular.dev/) to deploy a SPA.\n\n## Add a custom domain\nSet a custom domain for your site.\n\n## Redirect www to apex domain\nRedirect `www.my-app.com` to `my-app.com`.\n\n## Set environment variables\nSet `environment` variables for the build process of your static site.\n\n## Constructor\n`new StaticSite(name, args?, opts?)`\n\n## Parameters\n- `name` `string`\n- `args?` [`StaticSiteArgs`](https://sst.dev/docs/component/aws/static-site#staticsiteargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/static-site", "title": "StaticSite", "description": "Reference doc for the `sst.aws.StaticSite` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-27 21:23:55", "type": "overview", "page_metadata": {"ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/U3RhdGljU2l0ZQ%3D%3D.png", "ogSiteName": "SST", "og:title": "StaticSite", "description": "Reference doc for the `sst.aws.StaticSite` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/static-site/", "title": "StaticSite | SST", "og:type": "article", "ogDescription": "Reference doc for the `sst.aws.StaticSite` component.", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U3RhdGljU2l0ZQ%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3RhdGljU2l0ZQ%3D%3D.png", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/static-site/", "ogTitle": "StaticSite", "og:site_name": "SST", "og:description": "Reference doc for the `sst.aws.StaticSite` component.", "twitter:card": "summary_large_image", "scrapeId": "e9d0b34e-0d7d-4c8f-b938-c307eb7f6ed0", "sourceURL": "https://sst.dev/docs/component/aws/static-site", "url": "https://sst.dev/docs/component/aws/static-site", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"StaticSite\"?\n\nAssistant: Here are some code examples:\n\n### Minimal example\n```yaml\nnew sst.aws.StaticSite(\"MyWeb\");\n```\n\n### Change the path\n```yaml\nnew sst.aws.StaticSite(\"MyWeb\", {\n  path: \"path/to/site\"\n});\n```\n\n### Running locally\n```yaml\nsst dev vite dev\n```\n\n### Deploy a Vite SPA\n```yaml\nnew sst.aws.StaticSite(\"MyWeb\", {\n  build: {\n    command: \"npm run build\",\n    output: \"dist\"\n  }\n});\n```\n\n### Deploy a Jekyll site\n```yaml\nnew sst.aws.StaticSite(\"MyWeb\", {\n  errorPage: \"404.html\",\n  build: {\n    command: \"bundle exec jekyll build\",\n    output: \"_site\"\n  }\n});\n```\n\n### Deploy a Gatsby site\n```yaml\nnew sst.aws.StaticSite(\"MyWeb\", {\n  errorPage: \"404.html\",\n  build: {\n    command: \"npm run build\",\n    output: \"public\"\n  }\n});\n```\n\n### Deploy an Angular SPA\n```yaml\nnew sst.aws.StaticSite(\"MyWeb\", {\n  build: {\n    command: \"ng build --output-path dist\",\n    output: \"dist\"\n  }\n});\n```\n\n### Add a custom domain\n```yaml\nnew sst.aws.StaticSite(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n### Redirect www to apex domain\n```yaml\nnew sst.aws.StaticSite(\"MyWeb\", {\n  domain: {\n    name: \"my-app.com\",\n    redirects: [\"www.my-app.com\"]\n  }\n});\n```\n\n### Set environment variables\n```yaml\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.StaticSite(\"MyWeb\", {\n  environment: {\n    BUCKET_NAME: bucket.name,\n    VITE_STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n  },\n  build: {\n    command: \"npm run build\",\n    output: \"dist\"\n  }\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/static-site", "title": "StaticSite", "description": "Reference doc for the `sst.aws.StaticSite` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-27 21:23:55", "type": "code_examples", "page_metadata": {"ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/U3RhdGljU2l0ZQ%3D%3D.png", "ogSiteName": "SST", "og:title": "StaticSite", "description": "Reference doc for the `sst.aws.StaticSite` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/static-site/", "title": "StaticSite | SST", "og:type": "article", "ogDescription": "Reference doc for the `sst.aws.StaticSite` component.", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U3RhdGljU2l0ZQ%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3RhdGljU2l0ZQ%3D%3D.png", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/static-site/", "ogTitle": "StaticSite", "og:site_name": "SST", "og:description": "Reference doc for the `sst.aws.StaticSite` component.", "twitter:card": "summary_large_image", "scrapeId": "e9d0b34e-0d7d-4c8f-b938-c307eb7f6ed0", "sourceURL": "https://sst.dev/docs/component/aws/static-site", "url": "https://sst.dev/docs/component/aws/static-site", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"StaticSite\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure that the bucket has a policy that allows CloudFront to access the bucket when using an existing bucket.\n• Use environment variables prefixed with `VITE_` for access in the browser when using Vite.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/static-site", "title": "StaticSite", "description": "Reference doc for the `sst.aws.StaticSite` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 13, "timestamp": "2025-02-27 21:23:55", "type": "best_practices", "page_metadata": {"ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/U3RhdGljU2l0ZQ%3D%3D.png", "ogSiteName": "SST", "og:title": "StaticSite", "description": "Reference doc for the `sst.aws.StaticSite` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/static-site/", "title": "StaticSite | SST", "og:type": "article", "ogDescription": "Reference doc for the `sst.aws.StaticSite` component.", "og:locale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U3RhdGljU2l0ZQ%3D%3D.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/U3RhdGljU2l0ZQ%3D%3D.png", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/static-site/", "ogTitle": "StaticSite", "og:site_name": "SST", "og:description": "Reference doc for the `sst.aws.StaticSite` component.", "twitter:card": "summary_large_image", "scrapeId": "e9d0b34e-0d7d-4c8f-b938-c307eb7f6ed0", "sourceURL": "https://sst.dev/docs/component/aws/static-site", "url": "https://sst.dev/docs/component/aws/static-site", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"BucketLambdaSubscriber\"?\n\nAssistant: Reference doc for the `sst.aws.BucketLambdaSubscriber` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew BucketLambdaSubscriber(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/bucket-lambda-subscriber#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber", "title": "BucketLambdaSubscriber", "description": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:01", "type": "overview", "page_metadata": {"language": "en", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0TGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "og:site_name": "SST", "og:url": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber/", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0TGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber/", "title": "BucketLambdaSubscriber | SST", "og:title": "BucketLambdaSubscriber", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0TGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "ogTitle": "BucketLambdaSubscriber", "ogSiteName": "SST", "og:type": "article", "ogLocale": "en", "scrapeId": "7df647f2-01d9-4d75-aeec-f9ac2a30b4a9", "sourceURL": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"BucketLambdaSubscriber\"?\n\nAssistant: Here are some code examples:\n\n### Constructor Example\n```yaml\nnew BucketLambdaSubscriber(name, args, opts?)\n```\n\n### Events Example\n```yaml\n{\n  events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n}\n```\n\n### Filter Prefix Example\n```yaml\n{\n  filterPrefix: \"images/\"\n}\n```\n\n### Filter Suffix Example\n```yaml\n{\n filterSuffix: \".jpg\"\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber", "title": "BucketLambdaSubscriber", "description": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:01", "type": "code_examples", "page_metadata": {"language": "en", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0TGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "og:site_name": "SST", "og:url": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber/", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0TGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber/", "title": "BucketLambdaSubscriber | SST", "og:title": "BucketLambdaSubscriber", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0TGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "ogTitle": "BucketLambdaSubscriber", "ogSiteName": "SST", "og:type": "article", "ogLocale": "en", "scrapeId": "7df647f2-01d9-4d75-aeec-f9ac2a30b4a9", "sourceURL": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"BucketLambdaSubscriber\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the `filterPrefix` and `filterSuffix` options to limit notifications to specific objects in the bucket.\n• Ensure that the `subscriber` function is properly defined to handle the notifications.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber", "title": "BucketLambdaSubscriber", "description": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:01", "type": "best_practices", "page_metadata": {"language": "en", "favicon": "https://sst.dev/favicon.ico", "ogDescription": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0TGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "og:site_name": "SST", "og:url": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber/", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0TGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "viewport": "width=device-width, initial-scale=1", "ogUrl": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber/", "title": "BucketLambdaSubscriber | SST", "og:title": "BucketLambdaSubscriber", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.BucketLambdaSubscriber` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0TGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "ogTitle": "BucketLambdaSubscriber", "ogSiteName": "SST", "og:type": "article", "ogLocale": "en", "scrapeId": "7df647f2-01d9-4d75-aeec-f9ac2a30b4a9", "sourceURL": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/bucket-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"CognitoIdentityPool\"?\n\nAssistant: Reference doc for the `sst.aws.CognitoIdentityPool` component.\n\nHere's a detailed explanation:\n\n\n## Create the identity pool\n```javascript\nnew sst.aws.CognitoIdentityPool(\"MyIdentityPool\", {\n  userPools: [\n    {\n      userPool: \"us-east-1_QY6Ly46JH\",\n      client: \"6va5jg3cgtrd170sgokikjm5m6\"\n    }\n  ]\n});\n```\n\n## Configure permissions for authenticated users\n```javascript\nnew sst.aws.CognitoIdentityPool(\"MyIdentityPool\", {\n  userPools: [\n    {\n      userPool: \"us-east-1_QY6Ly46JH\",\n      client: \"6va5jg3cgtrd170sgokikjm5m6\"\n    }\n  ],\n  permissions: {\n    authenticated: [\n      {\n        actions: [\"s3:GetObject\", \"s3:PutObject\"],\n        resources: [\"arn:aws:s3:::my-bucket/*\"]\n      }\n    ]\n  }\n});\n```\n\n## Constructor\n```javascript\nnew CognitoIdentityPool(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`CognitoIdentityPoolArgs`](https://sst.dev/docs/component/aws/cognito-identity-pool#cognitoidentitypoolargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-identity-pool", "title": "CognitoIdentityPool", "description": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:24:20", "type": "overview", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UG9vbA%3D%3D.png", "twitter:card": "summary_large_image", "language": "en", "ogUrl": "https://sst.dev/docs/component/aws/cognito-identity-pool/", "og:type": "article", "ogSiteName": "SST", "og:title": "CognitoIdentityPool", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "title": "CognitoIdentityPool | SST", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UG9vbA%3D%3D.png", "description": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UG9vbA%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/cognito-identity-pool/", "ogLocale": "en", "og:site_name": "SST", "ogTitle": "CognitoIdentityPool", "scrapeId": "47271ff4-5bd7-48f8-9c82-b8df4cedadf2", "sourceURL": "https://sst.dev/docs/component/aws/cognito-identity-pool", "url": "https://sst.dev/docs/component/aws/cognito-identity-pool", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"CognitoIdentityPool\"?\n\nAssistant: Here are some code examples:\n\n### Identity Pool Example\n```yaml\nconst identityPool = $app.stage === \"frank\"\n  ? sst.aws.CognitoIdentityPool.get(\"MyIdentityPool\", \"us-east-1:02facf30-e2f3-49ec-9e79-c55187415cf8\")\n  : new sst.aws.CognitoIdentityPool(\"MyIdentityPool\");\n\nreturn {\n  identityPool: identityPool.id\n};\n\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-identity-pool", "title": "CognitoIdentityPool", "description": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:24:20", "type": "code_examples", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UG9vbA%3D%3D.png", "twitter:card": "summary_large_image", "language": "en", "ogUrl": "https://sst.dev/docs/component/aws/cognito-identity-pool/", "og:type": "article", "ogSiteName": "SST", "og:title": "CognitoIdentityPool", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "title": "CognitoIdentityPool | SST", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UG9vbA%3D%3D.png", "description": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UG9vbA%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/cognito-identity-pool/", "ogLocale": "en", "og:site_name": "SST", "ogTitle": "CognitoIdentityPool", "scrapeId": "47271ff4-5bd7-48f8-9c82-b8df4cedadf2", "sourceURL": "https://sst.dev/docs/component/aws/cognito-identity-pool", "url": "https://sst.dev/docs/component/aws/cognito-identity-pool", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"CognitoIdentityPool\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the SDK in your runtime to interact with your infrastructure.\n• Reference an existing Identity Pool with the given ID to avoid creating a new one in different stages.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-identity-pool", "title": "CognitoIdentityPool", "description": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 4, "timestamp": "2025-02-27 21:24:20", "type": "best_practices", "page_metadata": {"viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UG9vbA%3D%3D.png", "twitter:card": "summary_large_image", "language": "en", "ogUrl": "https://sst.dev/docs/component/aws/cognito-identity-pool/", "og:type": "article", "ogSiteName": "SST", "og:title": "CognitoIdentityPool", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "title": "CognitoIdentityPool | SST", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UG9vbA%3D%3D.png", "description": "Reference doc for the `sst.aws.CognitoIdentityPool` component.", "favicon": "https://sst.dev/favicon.ico", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UG9vbA%3D%3D.png", "og:url": "https://sst.dev/docs/component/aws/cognito-identity-pool/", "ogLocale": "en", "og:site_name": "SST", "ogTitle": "CognitoIdentityPool", "scrapeId": "47271ff4-5bd7-48f8-9c82-b8df4cedadf2", "sourceURL": "https://sst.dev/docs/component/aws/cognito-identity-pool", "url": "https://sst.dev/docs/component/aws/cognito-identity-pool", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV1LambdaRoute\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\n\nnew ApiGatewayV1LambdaRoute(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/apigatewayv1-lambda-route#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route", "title": "ApiGatewayV1LambdaRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:28", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxTGFtYmRhUm91dGU%3D.png", "ogLocale": "en", "language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "ApiGatewayV1LambdaRoute", "title": "ApiGatewayV1LambdaRoute | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxTGFtYmRhUm91dGU%3D.png", "og:locale": "en", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route/", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxTGFtYmRhUm91dGU%3D.png", "og:type": "article", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "viewport": "width=device-width, initial-scale=1", "og:title": "ApiGatewayV1LambdaRoute", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route/", "scrapeId": "84abbffc-803e-4f70-94fe-a61c2b4866bc", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route", "url": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV1LambdaRoute\"?\n\nAssistant: Here are some code examples:\n\n### Auth Example\n```yaml\n{\n  auth: {\n    iam: true\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route", "title": "ApiGatewayV1LambdaRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:28", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxTGFtYmRhUm91dGU%3D.png", "ogLocale": "en", "language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "ApiGatewayV1LambdaRoute", "title": "ApiGatewayV1LambdaRoute | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxTGFtYmRhUm91dGU%3D.png", "og:locale": "en", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route/", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxTGFtYmRhUm91dGU%3D.png", "og:type": "article", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "viewport": "width=device-width, initial-scale=1", "og:title": "ApiGatewayV1LambdaRoute", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route/", "scrapeId": "84abbffc-803e-4f70-94fe-a61c2b4866bc", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route", "url": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayV1LambdaRoute\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable auth for your REST API by setting the `auth` property. By default, auth is disabled.\n• Use Cognito User Pool authorization for JWT auth by configuring the `auth.cognito` property.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route", "title": "ApiGatewayV1LambdaRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:28", "type": "best_practices", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxTGFtYmRhUm91dGU%3D.png", "ogLocale": "en", "language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "ApiGatewayV1LambdaRoute", "title": "ApiGatewayV1LambdaRoute | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxTGFtYmRhUm91dGU%3D.png", "og:locale": "en", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route/", "ogSiteName": "SST", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxTGFtYmRhUm91dGU%3D.png", "og:type": "article", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "viewport": "width=device-width, initial-scale=1", "og:title": "ApiGatewayV1LambdaRoute", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1LambdaRoute` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route/", "scrapeId": "84abbffc-803e-4f70-94fe-a61c2b4866bc", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route", "url": "https://sst.dev/docs/component/aws/apigatewayv1-lambda-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"QueueLambdaSubscriber\"?\n\nAssistant: Reference doc for the `sst.aws.QueueLambdaSubscriber` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew QueueLambdaSubscriber(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/queue-lambda-subscriber#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/queue-lambda-subscriber", "title": "QueueLambdaSubscriber", "description": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:36", "type": "overview", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/queue-lambda-subscriber/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "QueueLambdaSubscriber", "og:title": "QueueLambdaSubscriber", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/UXVldWVMYW1iZGFTdWJzY3JpYmVy.png", "og:url": "https://sst.dev/docs/component/aws/queue-lambda-subscriber/", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "ogDescription": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "description": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/UXVldWVMYW1iZGFTdWJzY3JpYmVy.png", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "language": "en", "title": "QueueLambdaSubscriber | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/UXVldWVMYW1iZGFTdWJzY3JpYmVy.png", "scrapeId": "a7abc313-3be1-4cbd-98f5-eed86a5c5d23", "sourceURL": "https://sst.dev/docs/component/aws/queue-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/queue-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"QueueLambdaSubscriber\"?\n\nAssistant: Here are some code examples:\n\n### Batch Processing Example\n```yaml\n{\n  batch: {\n    partialResponses: true\n  }\n}\n```\n\n### Batch Item Failures Example\n```yaml\n{\n  \"batchItemFailures\": [\n        {\n            \"itemIdentifier\": \"id2\"\n        },\n        {\n            \"itemIdentifier\": \"id4\"\n        }\n    ]\n}\n```\n\n### Batch Size Example\n```yaml\n{\n  batch: {\n    size: 1\n  }\n}\n```\n\n### Batch Window Example\n```yaml\n{\n  batch: {\n    window: \"20 seconds\"\n  }\n}\n```\n\n### Filters Example for RequestCode\n```yaml\n{\n  filters: [\n    {\n      body: {\n        RequestCode: [\"BBBB\"]\n      }\n    }\n  ]\n}\n```\n\n### Filters Example for RecordNumber\n```yaml\n{\n  filters: [\n    {\n      body: {\n        RecordNumber: [{ numeric: [ \">\", 9999 ] }]\n      }\n    }\n  ]\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/queue-lambda-subscriber", "title": "QueueLambdaSubscriber", "description": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:36", "type": "code_examples", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/queue-lambda-subscriber/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "QueueLambdaSubscriber", "og:title": "QueueLambdaSubscriber", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/UXVldWVMYW1iZGFTdWJzY3JpYmVy.png", "og:url": "https://sst.dev/docs/component/aws/queue-lambda-subscriber/", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "ogDescription": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "description": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/UXVldWVMYW1iZGFTdWJzY3JpYmVy.png", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "language": "en", "title": "QueueLambdaSubscriber | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/UXVldWVMYW1iZGFTdWJzY3JpYmVy.png", "scrapeId": "a7abc313-3be1-4cbd-98f5-eed86a5c5d23", "sourceURL": "https://sst.dev/docs/component/aws/queue-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/queue-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"QueueLambdaSubscriber\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable partial responses to prevent unnecessary reprocessing of successful messages.\n• Set batch size to 1 to process events individually.\n• Use filters to process only specific records based on criteria.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/queue-lambda-subscriber", "title": "QueueLambdaSubscriber", "description": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:36", "type": "best_practices", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/queue-lambda-subscriber/", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "ogTitle": "QueueLambdaSubscriber", "og:title": "QueueLambdaSubscriber", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/UXVldWVMYW1iZGFTdWJzY3JpYmVy.png", "og:url": "https://sst.dev/docs/component/aws/queue-lambda-subscriber/", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "ogDescription": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "description": "Reference doc for the `sst.aws.QueueLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/UXVldWVMYW1iZGFTdWJzY3JpYmVy.png", "ogSiteName": "SST", "favicon": "https://sst.dev/favicon.ico", "language": "en", "title": "QueueLambdaSubscriber | SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:type": "article", "og:site_name": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/UXVldWVMYW1iZGFTdWJzY3JpYmVy.png", "scrapeId": "a7abc313-3be1-4cbd-98f5-eed86a5c5d23", "sourceURL": "https://sst.dev/docs/component/aws/queue-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/queue-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV2UrlRoute\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\n\nnew ApiGatewayV2UrlRoute(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/apigatewayv2-url-route#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-url-route", "title": "ApiGatewayV2UrlRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:42", "type": "overview", "page_metadata": {"language": "en", "description": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "ogSiteName": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyVXJsUm91dGU%3D.png", "og:locale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/apigatewayv2-url-route/", "ogTitle": "ApiGatewayV2UrlRoute", "ogLocale": "en", "og:title": "ApiGatewayV2UrlRoute", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyVXJsUm91dGU%3D.png", "twitter:card": "summary_large_image", "title": "ApiGatewayV2UrlRoute | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyVXJsUm91dGU%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-url-route/", "scrapeId": "5bdd59ea-77b1-4adb-9aee-a566cba81e28", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-url-route", "url": "https://sst.dev/docs/component/aws/apigatewayv2-url-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV2UrlRoute\"?\n\nAssistant: Here are some code examples:\n\n### Auth Example with IAM\n```yaml\n{\n  auth: {\n    iam: true\n  }\n}\n```\n\n### Auth Example with JWT\n```yaml\n{\n  auth: {\n    jwt: {\n      authorizer: myAuthorizer.id,\n      scopes: [\"read:profile\", \"write:profile\"]\n    }\n  }\n}\n```\n\n### Auth Example with Lambda\n```yaml\n{\n  auth: {\n    lambda: myAuthorizer.id\n  }\n}\n```\n\n### Route Example\n```yaml\n{\n  url: \"https://example.com\"\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-url-route", "title": "ApiGatewayV2UrlRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:42", "type": "code_examples", "page_metadata": {"language": "en", "description": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "ogSiteName": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyVXJsUm91dGU%3D.png", "og:locale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/apigatewayv2-url-route/", "ogTitle": "ApiGatewayV2UrlRoute", "ogLocale": "en", "og:title": "ApiGatewayV2UrlRoute", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyVXJsUm91dGU%3D.png", "twitter:card": "summary_large_image", "title": "ApiGatewayV2UrlRoute | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyVXJsUm91dGU%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-url-route/", "scrapeId": "5bdd59ea-77b1-4adb-9aee-a566cba81e28", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-url-route", "url": "https://sst.dev/docs/component/aws/apigatewayv2-url-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayV2UrlRoute\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable IAM authorization for a given API route to ensure secure access.\n• Use JWT authorization for more granular access control with scopes.\n• Consider using custom Lambda authorization for complex authorization logic.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-url-route", "title": "ApiGatewayV2UrlRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:42", "type": "best_practices", "page_metadata": {"language": "en", "description": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "favicon": "https://sst.dev/favicon.ico", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2UrlRoute` component.", "ogSiteName": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyVXJsUm91dGU%3D.png", "og:locale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/apigatewayv2-url-route/", "ogTitle": "ApiGatewayV2UrlRoute", "ogLocale": "en", "og:title": "ApiGatewayV2UrlRoute", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyVXJsUm91dGU%3D.png", "twitter:card": "summary_large_image", "title": "ApiGatewayV2UrlRoute | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyVXJsUm91dGU%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-url-route/", "scrapeId": "5bdd59ea-77b1-4adb-9aee-a566cba81e28", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-url-route", "url": "https://sst.dev/docs/component/aws/apigatewayv2-url-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"CognitoIdentityProvider\"?\n\nAssistant: Reference doc for the `sst.aws.CognitoIdentityProvider` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew CognitoIdentityProvider(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/cognito-identity-provider#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-identity-provider", "title": "CognitoIdentityProvider", "description": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:54", "type": "overview", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/cognito-identity-provider/", "favicon": "https://sst.dev/favicon.ico", "og:title": "CognitoIdentityProvider", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "ogLocale": "en", "title": "CognitoIdentityProvider | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UHJvdmlkZXI%3D.png", "og:description": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UHJvdmlkZXI%3D.png", "og:type": "article", "language": "en", "ogUrl": "https://sst.dev/docs/component/aws/cognito-identity-provider/", "ogDescription": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogTitle": "CognitoIdentityProvider", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UHJvdmlkZXI%3D.png", "scrapeId": "359fac19-222a-4a52-beff-1de5ffe3d97a", "sourceURL": "https://sst.dev/docs/component/aws/cognito-identity-provider", "url": "https://sst.dev/docs/component/aws/cognito-identity-provider", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"CognitoIdentityProvider\"?\n\nAssistant: Here are some code examples:\n\n### Attributes Example\n```yaml\n{\n  email: \"email\",\n  username: \"sub\"\n}\n```\n\n### Details Example\n```yaml\n{\n  authorize_scopes: \"email profile\",\n  client_id: \"your-client-id\",\n  client_secret: \"your-client-secret\"\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-identity-provider", "title": "CognitoIdentityProvider", "description": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:54", "type": "code_examples", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/cognito-identity-provider/", "favicon": "https://sst.dev/favicon.ico", "og:title": "CognitoIdentityProvider", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "ogLocale": "en", "title": "CognitoIdentityProvider | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UHJvdmlkZXI%3D.png", "og:description": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UHJvdmlkZXI%3D.png", "og:type": "article", "language": "en", "ogUrl": "https://sst.dev/docs/component/aws/cognito-identity-provider/", "ogDescription": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogTitle": "CognitoIdentityProvider", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UHJvdmlkZXI%3D.png", "scrapeId": "359fac19-222a-4a52-beff-1de5ffe3d97a", "sourceURL": "https://sst.dev/docs/component/aws/cognito-identity-provider", "url": "https://sst.dev/docs/component/aws/cognito-identity-provider", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"CognitoIdentityProvider\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to define a mapping between identity provider attributes and user pool attributes using the `attributes` parameter.\n• Configure the identity provider details properly, including scopes, URLs, and identifiers.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-identity-provider", "title": "CognitoIdentityProvider", "description": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:24:54", "type": "best_practices", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/cognito-identity-provider/", "favicon": "https://sst.dev/favicon.ico", "og:title": "CognitoIdentityProvider", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "ogLocale": "en", "title": "CognitoIdentityProvider | SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UHJvdmlkZXI%3D.png", "og:description": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "twitter:card": "summary_large_image", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UHJvdmlkZXI%3D.png", "og:type": "article", "language": "en", "ogUrl": "https://sst.dev/docs/component/aws/cognito-identity-provider/", "ogDescription": "Reference doc for the `sst.aws.CognitoIdentityProvider` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "ogTitle": "CognitoIdentityProvider", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b0lkZW50aXR5UHJvdmlkZXI%3D.png", "scrapeId": "359fac19-222a-4a52-beff-1de5ffe3d97a", "sourceURL": "https://sst.dev/docs/component/aws/cognito-identity-provider", "url": "https://sst.dev/docs/component/aws/cognito-identity-provider", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"CognitoUserPool\"?\n\nAssistant: Reference doc for the `sst.aws.CognitoUserPool` component.\n\nHere's a detailed explanation:\n\n\n## Create the user pool\n```javascript\nconst userPool = new sst.aws.CognitoUserPool(\"MyUserPool\");\n```\n\n## Login using email\n```javascript\nnew sst.aws.CognitoUserPool(\"MyUserPool\", {\n  usernames: [\"email\"]\n});\n```\n\n## Configure triggers\n```javascript\nnew sst.aws.CognitoUserPool(\"MyUserPool\", {\n  triggers: {\n    preAuthentication: \"src/preAuthentication.handler\",\n    postAuthentication: \"src/postAuthentication.handler\",\n  },\n});\n```\n\n## Add Google identity provider\n```javascript\nconst GoogleClientId = new sst.Secret(\"GOOGLE_CLIENT_ID\");\nconst GoogleClientSecret = new sst.Secret(\"GOOGLE_CLIENT_SECRET\");\nuserPool.addIdentityProvider({\n  type: \"google\",\n  details: {\n    authorize_scopes: \"email profile\",\n    client_id: GoogleClientId.value,\n    client_secret: GoogleClientSecret.value,\n  },\n  attributes: {\n    email: \"email\",\n    name: \"name\",\n    username: \"sub\",\n  },\n});\n```\n\n## Add a client\n```javascript\nuserPool.addClient(\"Web\");\n```\n\n## Constructor\n```javascript\nnew CognitoUserPool(name, args?, opts?)\n```\n\n## Parameters\n- `name` `string`\n- `args?` [`CognitoUserPoolArgs`](https://sst.dev/docs/component/aws/cognito-user-pool#cognitouserpoolargs)\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-user-pool", "title": "CognitoUserPool", "description": "Reference doc for the `sst.aws.CognitoUserPool` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:25:06", "type": "overview", "page_metadata": {"ogTitle": "CognitoUserPool", "favicon": "https://sst.dev/favicon.ico", "title": "CognitoUserPool | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29s.png", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.CognitoUserPool` component.", "og:title": "CognitoUserPool", "og:url": "https://sst.dev/docs/component/aws/cognito-user-pool/", "og:locale": "en", "description": "Reference doc for the `sst.aws.CognitoUserPool` component.", "ogSiteName": "SST", "ogUrl": "https://sst.dev/docs/component/aws/cognito-user-pool/", "ogLocale": "en", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.CognitoUserPool` component.", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29s.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29s.png", "language": "en", "scrapeId": "bdb187c0-0202-495b-9bce-476dd1e6cf74", "sourceURL": "https://sst.dev/docs/component/aws/cognito-user-pool", "url": "https://sst.dev/docs/component/aws/cognito-user-pool", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"CognitoUserPool\"?\n\nAssistant: Here are some code examples:\n\n### Advanced Security\n```yaml\n{\n  advancedSecurity: \"enforced\"\n}\n```\n\n### Aliases\n```yaml\n{\n  aliases: [\"email\"]\n}\n```\n\n### MFA\n```yaml\n{\n  mfa: \"on\"\n}\n```\n\n### SMS Settings\n```yaml\n{\n  sms: {\n    externalId: \"1234567890\",\n    snsCallerArn: \"arn:aws:iam::1234567890:role/CognitoSnsCaller\",\n    snsRegion: \"us-east-1\",\n  }\n}\n```\n\n### SMS Authentication Message\n```yaml\n{\n  smsAuthenticationMessage: \"Your authentication code is {####}\"\n}\n```\n\n### Software Token\n```yaml\n{\n  softwareToken: true\n}\n```\n\n### Usernames\n```yaml\n{\n  usernames: [\"email\"]\n}\n```\n\n### Verify Email Message\n```yaml\n{\n  verify: {\n    emailMessage: \"The verification code to your new Awesome account is {####}\"\n  }\n}\n```\n\n### Verify Email Subject\n```yaml\n{\n  verify: {\n    emailSubject: \"Verify your new Awesome account\"\n  }\n}\n```\n\n### Verify SMS Message\n```yaml\n{\n  verify: {\n    smsMessage: \"The verification code to your new Awesome account is {####}\"\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-user-pool", "title": "CognitoUserPool", "description": "Reference doc for the `sst.aws.CognitoUserPool` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:25:06", "type": "code_examples", "page_metadata": {"ogTitle": "CognitoUserPool", "favicon": "https://sst.dev/favicon.ico", "title": "CognitoUserPool | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29s.png", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.CognitoUserPool` component.", "og:title": "CognitoUserPool", "og:url": "https://sst.dev/docs/component/aws/cognito-user-pool/", "og:locale": "en", "description": "Reference doc for the `sst.aws.CognitoUserPool` component.", "ogSiteName": "SST", "ogUrl": "https://sst.dev/docs/component/aws/cognito-user-pool/", "ogLocale": "en", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.CognitoUserPool` component.", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29s.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29s.png", "language": "en", "scrapeId": "bdb187c0-0202-495b-9bce-476dd1e6cf74", "sourceURL": "https://sst.dev/docs/component/aws/cognito-user-pool", "url": "https://sst.dev/docs/component/aws/cognito-user-pool", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"CognitoUserPool\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to pass in `provider.providerName` instead of hardcoding it to \"MyProvider\" when adding a client to ensure the client is created after the provider.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-user-pool", "title": "CognitoUserPool", "description": "Reference doc for the `sst.aws.CognitoUserPool` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 7, "timestamp": "2025-02-27 21:25:06", "type": "best_practices", "page_metadata": {"ogTitle": "CognitoUserPool", "favicon": "https://sst.dev/favicon.ico", "title": "CognitoUserPool | SST", "ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29s.png", "viewport": "width=device-width, initial-scale=1", "ogDescription": "Reference doc for the `sst.aws.CognitoUserPool` component.", "og:title": "CognitoUserPool", "og:url": "https://sst.dev/docs/component/aws/cognito-user-pool/", "og:locale": "en", "description": "Reference doc for the `sst.aws.CognitoUserPool` component.", "ogSiteName": "SST", "ogUrl": "https://sst.dev/docs/component/aws/cognito-user-pool/", "ogLocale": "en", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.CognitoUserPool` component.", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29s.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29s.png", "language": "en", "scrapeId": "bdb187c0-0202-495b-9bce-476dd1e6cf74", "sourceURL": "https://sst.dev/docs/component/aws/cognito-user-pool", "url": "https://sst.dev/docs/component/aws/cognito-user-pool", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"DynamoLambdaSubscriber\"?\n\nAssistant: Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew DynamoLambdaSubscriber(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/dynamo-lambda-subscriber#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber", "title": "DynamoLambdaSubscriber", "description": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:11", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber/", "ogImage": "https://social-cards.sst.dev/v3-docs/RHluYW1vTGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogDescription": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "og:site_name": "SST", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/RHluYW1vTGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "og:title": "DynamoLambdaSubscriber", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "title": "DynamoLambdaSubscriber | SST", "og:description": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "description": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/RHluYW1vTGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "og:type": "article", "language": "en", "ogTitle": "DynamoLambdaSubscriber", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber/", "scrapeId": "9f0a67f1-6037-454a-a846-dde6154574f2", "sourceURL": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"DynamoLambdaSubscriber\"?\n\nAssistant: Here are some code examples:\n\n### Example Record for Filters\n```yaml\n{\n  eventID: \"1\",\n  eventVersion: \"1.0\",\n  dynamodb: {\n    ApproximateCreationDateTime: \"1678831218.0\",\n    Keys: {\n      CustomerName: {\n          \"S\": \"AnyCompany Industries\"\n      },\n      NewImage: {\n        AccountManager: {\n          S: \"Pat Candella\"\n        },\n        PaymentTerms: {\n          S: \"60 days\"\n        },\n        CustomerName: {\n          S: \"AnyCompany Industries\"\n        }\n      },\n      SequenceNumber: \"111\",\n      SizeBytes: 26,\n      StreamViewType: \"NEW_IMAGE\"\n    }\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber", "title": "DynamoLambdaSubscriber", "description": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:11", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber/", "ogImage": "https://social-cards.sst.dev/v3-docs/RHluYW1vTGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogDescription": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "og:site_name": "SST", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/RHluYW1vTGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "og:title": "DynamoLambdaSubscriber", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "title": "DynamoLambdaSubscriber | SST", "og:description": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "description": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/RHluYW1vTGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "og:type": "article", "language": "en", "ogTitle": "DynamoLambdaSubscriber", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber/", "scrapeId": "9f0a67f1-6037-454a-a846-dde6154574f2", "sourceURL": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"DynamoLambdaSubscriber\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can pass in up to 5 different filter policies for the subscriber function, which will be logically ORed together.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber", "title": "DynamoLambdaSubscriber", "description": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:11", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber/", "ogImage": "https://social-cards.sst.dev/v3-docs/RHluYW1vTGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogDescription": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "og:site_name": "SST", "og:locale": "en", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/RHluYW1vTGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "og:title": "DynamoLambdaSubscriber", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "title": "DynamoLambdaSubscriber | SST", "og:description": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "description": "Reference doc for the `sst.aws.DynamoLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/RHluYW1vTGFtYmRhU3Vic2NyaWJlcg%3D%3D.png", "og:type": "article", "language": "en", "ogTitle": "DynamoLambdaSubscriber", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber/", "scrapeId": "9f0a67f1-6037-454a-a846-dde6154574f2", "sourceURL": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/dynamo-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"BusQueueSubscriber\"?\n\nAssistant: Reference doc for the `sst.aws.BusQueueSubscriber` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew BusQueueSubscriber(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/bus-queue-subscriber#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bus-queue-subscriber", "title": "BusQueueSubscriber", "description": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:19", "type": "overview", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/bus-queue-subscriber/", "description": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "og:url": "https://sst.dev/docs/component/aws/bus-queue-subscriber/", "ogTitle": "BusQueueSubscriber", "og:image": "https://social-cards.sst.dev/v3-docs/QnVzUXVldWVTdWJzY3JpYmVy.png", "ogDescription": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "SST", "ogLocale": "en", "title": "BusQueueSubscriber | SST", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "og:title": "BusQueueSubscriber", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVzUXVldWVTdWJzY3JpYmVy.png", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVzUXVldWVTdWJzY3JpYmVy.png", "og:site_name": "SST", "scrapeId": "99c1e192-085b-4648-b5cf-b8e6deeead88", "sourceURL": "https://sst.dev/docs/component/aws/bus-queue-subscriber", "url": "https://sst.dev/docs/component/aws/bus-queue-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"BusQueueSubscriber\"?\n\nAssistant: Here are some code examples:\n\n### Example of EventBus message\n```yaml\n{\n  source: \"my.source\",\n  detail: {\n     price_usd: 210.75\n  },\n  \"detail-type\": \"orderPlaced\"\n}\n```\n\n### Pattern that accepts the message\n```yaml\n{\n  pattern: {\n    source: [\"my.source\", \"my.source2\"]\n  }\n}\n```\n\n### Pattern for detail matching\n```yaml\n{\n  pattern: {\n    detail: {\n      price_usd: [{numeric: [\">=\", 100]}]\n    }\n  }\n}\n```\n\n### Pattern for detailType matching\n```yaml\n{\n  pattern: {\n    detailType: [\"orderPlaced\"]\n  }\n}\n```\n\n### Pattern for source matching\n```yaml\n{\n  pattern: {\n    source: [\"my.source\", \"my.source2\"]\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bus-queue-subscriber", "title": "BusQueueSubscriber", "description": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:19", "type": "code_examples", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/bus-queue-subscriber/", "description": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "og:url": "https://sst.dev/docs/component/aws/bus-queue-subscriber/", "ogTitle": "BusQueueSubscriber", "og:image": "https://social-cards.sst.dev/v3-docs/QnVzUXVldWVTdWJzY3JpYmVy.png", "ogDescription": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "SST", "ogLocale": "en", "title": "BusQueueSubscriber | SST", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "og:title": "BusQueueSubscriber", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVzUXVldWVTdWJzY3JpYmVy.png", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVzUXVldWVTdWJzY3JpYmVy.png", "og:site_name": "SST", "scrapeId": "99c1e192-085b-4648-b5cf-b8e6deeead88", "sourceURL": "https://sst.dev/docs/component/aws/bus-queue-subscriber", "url": "https://sst.dev/docs/component/aws/bus-queue-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"BusQueueSubscriber\"?\n\nAssistant: Here are the recommended best practices:\n\n• If any single property in the pattern doesn’t match an attribute assigned to the message, then the pattern rejects the message.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bus-queue-subscriber", "title": "BusQueueSubscriber", "description": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:19", "type": "best_practices", "page_metadata": {"ogUrl": "https://sst.dev/docs/component/aws/bus-queue-subscriber/", "description": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "og:url": "https://sst.dev/docs/component/aws/bus-queue-subscriber/", "ogTitle": "BusQueueSubscriber", "og:image": "https://social-cards.sst.dev/v3-docs/QnVzUXVldWVTdWJzY3JpYmVy.png", "ogDescription": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "language": "en", "ogSiteName": "SST", "ogLocale": "en", "title": "BusQueueSubscriber | SST", "viewport": "width=device-width, initial-scale=1", "favicon": "https://sst.dev/favicon.ico", "og:title": "BusQueueSubscriber", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVzUXVldWVTdWJzY3JpYmVy.png", "og:locale": "en", "og:description": "Reference doc for the `sst.aws.BusQueueSubscriber` component.", "og:type": "article", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVzUXVldWVTdWJzY3JpYmVy.png", "og:site_name": "SST", "scrapeId": "99c1e192-085b-4648-b5cf-b8e6deeead88", "sourceURL": "https://sst.dev/docs/component/aws/bus-queue-subscriber", "url": "https://sst.dev/docs/component/aws/bus-queue-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV1ApiKey\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew ApiGatewayV1ApiKey(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`ApiKeyArgs`](https://sst.dev/docs/component/aws/apigatewayv1-api-key#apikeyargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-api-key", "title": "ApiGatewayV1ApiKey", "description": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:25", "type": "overview", "page_metadata": {"language": "en", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "og:locale": "en", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-api-key/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "title": "ApiGatewayV1ApiKey | SST", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-api-key/", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXBpS2V5.png", "og:title": "ApiGatewayV1ApiKey", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "ApiGatewayV1ApiKey", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXBpS2V5.png", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXBpS2V5.png", "ogLocale": "en", "scrapeId": "0889893c-42ad-45df-88b3-3f3220ed101a", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-api-key", "url": "https://sst.dev/docs/component/aws/apigatewayv1-api-key", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV1ApiKey\"?\n\nAssistant: Here are some code examples:\n\n### Example API Key Value\n```yaml\n{\n  value: \"d41d8cd98f00b204e9800998ecf8427e\"\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-api-key", "title": "ApiGatewayV1ApiKey", "description": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:25", "type": "code_examples", "page_metadata": {"language": "en", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "og:locale": "en", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-api-key/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "title": "ApiGatewayV1ApiKey | SST", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-api-key/", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXBpS2V5.png", "og:title": "ApiGatewayV1ApiKey", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "ApiGatewayV1ApiKey", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXBpS2V5.png", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXBpS2V5.png", "ogLocale": "en", "scrapeId": "0889893c-42ad-45df-88b3-3f3220ed101a", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-api-key", "url": "https://sst.dev/docs/component/aws/apigatewayv1-api-key", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayV1ApiKey\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use the SDK in your runtime to interact with your infrastructure.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-api-key", "title": "ApiGatewayV1ApiKey", "description": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:25", "type": "best_practices", "page_metadata": {"language": "en", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "og:locale": "en", "og:site_name": "SST", "description": "Reference doc for the `sst.aws.ApiGatewayV1ApiKey` component.", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-api-key/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "title": "ApiGatewayV1ApiKey | SST", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-api-key/", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXBpS2V5.png", "og:title": "ApiGatewayV1ApiKey", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "ApiGatewayV1ApiKey", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXBpS2V5.png", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxQXBpS2V5.png", "ogLocale": "en", "scrapeId": "0889893c-42ad-45df-88b3-3f3220ed101a", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-api-key", "url": "https://sst.dev/docs/component/aws/apigatewayv1-api-key", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV2LambdaRoute\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\n\nnew ApiGatewayV2LambdaRoute(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/apigatewayv2-lambda-route#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route", "title": "ApiGatewayV2LambdaRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:38", "type": "overview", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route/", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "ogSiteName": "SST", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyTGFtYmRhUm91dGU%3D.png", "favicon": "https://sst.dev/favicon.ico", "title": "ApiGatewayV2LambdaRoute | SST", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route/", "og:site_name": "SST", "ogTitle": "ApiGatewayV2LambdaRoute", "og:title": "ApiGatewayV2LambdaRoute", "og:type": "article", "language": "en", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "description": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyTGFtYmRhUm91dGU%3D.png", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyTGFtYmRhUm91dGU%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "7cc0324d-91a6-49f4-a448-ee92cb381fed", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route", "url": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV2LambdaRoute\"?\n\nAssistant: Here are some code examples:\n\n### Constructor Example\n```yaml\nnew ApiGatewayV2LambdaRoute(name, args, opts?)\n```\n\n### Auth Example\n```yaml\n{\n  auth: {\n    iam: true\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route", "title": "ApiGatewayV2LambdaRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:38", "type": "code_examples", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route/", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "ogSiteName": "SST", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyTGFtYmRhUm91dGU%3D.png", "favicon": "https://sst.dev/favicon.ico", "title": "ApiGatewayV2LambdaRoute | SST", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route/", "og:site_name": "SST", "ogTitle": "ApiGatewayV2LambdaRoute", "og:title": "ApiGatewayV2LambdaRoute", "og:type": "article", "language": "en", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "description": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyTGFtYmRhUm91dGU%3D.png", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyTGFtYmRhUm91dGU%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "7cc0324d-91a6-49f4-a448-ee92cb381fed", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route", "url": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayV2LambdaRoute\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable IAM authorization for a given API route by setting `auth.iam` to true.\n• Use JWT authorization by configuring the `auth.jwt` object with an authorizer and scopes.\n• For custom Lambda authorization, pass the authorizer ID in `auth.lambda`.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route", "title": "ApiGatewayV2LambdaRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:38", "type": "best_practices", "page_metadata": {"og:url": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route/", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "ogSiteName": "SST", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyTGFtYmRhUm91dGU%3D.png", "favicon": "https://sst.dev/favicon.ico", "title": "ApiGatewayV2LambdaRoute | SST", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route/", "og:site_name": "SST", "ogTitle": "ApiGatewayV2LambdaRoute", "og:title": "ApiGatewayV2LambdaRoute", "og:type": "article", "language": "en", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "description": "Reference doc for the `sst.aws.ApiGatewayV2LambdaRoute` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyTGFtYmRhUm91dGU%3D.png", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyTGFtYmRhUm91dGU%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "scrapeId": "7cc0324d-91a6-49f4-a448-ee92cb381fed", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route", "url": "https://sst.dev/docs/component/aws/apigatewayv2-lambda-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"RealtimeLambdaSubscriber\"?\n\nAssistant: Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew RealtimeLambdaSubscriber(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/realtime-lambda-subscriber#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber", "title": "RealtimeLambdaSubscriber", "description": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:47", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWVMYW1iZGFTdWJzY3JpYmVy.png", "ogDescription": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "title": "RealtimeLambdaSubscriber | SST", "ogTitle": "RealtimeLambdaSubscriber", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber/", "og:title": "RealtimeLambdaSubscriber", "og:locale": "en", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWVMYW1iZGFTdWJzY3JpYmVy.png", "description": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "ogUrl": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber/", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWVMYW1iZGFTdWJzY3JpYmVy.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "394acfbd-3fe3-4176-ac5b-d7e173678023", "sourceURL": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"RealtimeLambdaSubscriber\"?\n\nAssistant: Here are some code examples:\n\n### Filter Example\n```yaml\n{\n  filter: `${$app.name}/${$app.stage}/chat/room1`\n}\n```\n\n### Subscribe to All Topics Example\n```yaml\n{\n  filter: `${$app.name}/${$app.stage}/chat/#`\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber", "title": "RealtimeLambdaSubscriber", "description": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:47", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWVMYW1iZGFTdWJzY3JpYmVy.png", "ogDescription": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "title": "RealtimeLambdaSubscriber | SST", "ogTitle": "RealtimeLambdaSubscriber", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber/", "og:title": "RealtimeLambdaSubscriber", "og:locale": "en", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWVMYW1iZGFTdWJzY3JpYmVy.png", "description": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "ogUrl": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber/", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWVMYW1iZGFTdWJzY3JpYmVy.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "394acfbd-3fe3-4176-ac5b-d7e173678023", "sourceURL": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"RealtimeLambdaSubscriber\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use specific filters to limit the topics processed by the subscriber.\n• Ensure the IoT WebSocket server name is correctly specified.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber", "title": "RealtimeLambdaSubscriber", "description": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:25:47", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "language": "en", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWVMYW1iZGFTdWJzY3JpYmVy.png", "ogDescription": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "title": "RealtimeLambdaSubscriber | SST", "ogTitle": "RealtimeLambdaSubscriber", "favicon": "https://sst.dev/favicon.ico", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber/", "og:title": "RealtimeLambdaSubscriber", "og:locale": "en", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWVMYW1iZGFTdWJzY3JpYmVy.png", "description": "Reference doc for the `sst.aws.RealtimeLambdaSubscriber` component.", "ogUrl": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber/", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/UmVhbHRpbWVMYW1iZGFTdWJzY3JpYmVy.png", "viewport": "width=device-width, initial-scale=1", "scrapeId": "394acfbd-3fe3-4176-ac5b-d7e173678023", "sourceURL": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/realtime-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV1UsagePlan\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV1UsagePlan` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\n\nnew ApiGatewayV1UsagePlan(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`UsagePlanArgs`](https://sst.dev/docs/component/aws/apigatewayv1-usage-plan#usageplanargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan", "title": "ApiGatewayV1UsagePlan", "description": "Reference doc for the `sst.aws.ApiGatewayV1UsagePlan` component.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 21:25:53", "type": "overview", "page_metadata": {"og:title": "ApiGatewayV1UsagePlan", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan/", "language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "title": "ApiGatewayV1UsagePlan | SST", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1UsagePlan` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan/", "ogTitle": "ApiGatewayV1UsagePlan", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxVXNhZ2VQbGFu.png", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1UsagePlan` component.", "description": "Reference doc for the `sst.aws.ApiGatewayV1UsagePlan` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxVXNhZ2VQbGFu.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxVXNhZ2VQbGFu.png", "og:locale": "en", "scrapeId": "7d8993de-6cbf-4ec2-afae-2ab89b621ca2", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan", "url": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV1UsagePlan\"?\n\nAssistant: Here are some code examples:\n\n### Add API Key Example\n```yaml\n```\nplan.addApiKey(\"MyKey\", {\n  value: \"d41d8cd98f00b204e9800998ecf8427e\",\n});\n```\n```\n\n### Quota Configuration Example\n```yaml\n```\n{\n  quota: {\n    limit: 1000,\n    period: \"month\",\n    offset: 0,\n  }\n}\n```\n```\n\n### Throttle Configuration Example\n```yaml\n```\n{\n  throttle: {\n    rate: 100,\n    burst: 200,\n  }\n}\n```\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan", "title": "ApiGatewayV1UsagePlan", "description": "Reference doc for the `sst.aws.ApiGatewayV1UsagePlan` component.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 21:25:53", "type": "code_examples", "page_metadata": {"og:title": "ApiGatewayV1UsagePlan", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan/", "language": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogLocale": "en", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "title": "ApiGatewayV1UsagePlan | SST", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1UsagePlan` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan/", "ogTitle": "ApiGatewayV1UsagePlan", "viewport": "width=device-width, initial-scale=1", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxVXNhZ2VQbGFu.png", "og:site_name": "SST", "twitter:card": "summary_large_image", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1UsagePlan` component.", "description": "Reference doc for the `sst.aws.ApiGatewayV1UsagePlan` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxVXNhZ2VQbGFu.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxVXNhZ2VQbGFu.png", "og:locale": "en", "scrapeId": "7d8993de-6cbf-4ec2-afae-2ab89b621ca2", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan", "url": "https://sst.dev/docs/component/aws/apigatewayv1-usage-plan", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"AppSyncFunction\"?\n\nAssistant: Reference doc for the `sst.aws.AppSyncFunction` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew AppSyncFunction(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`FunctionArgs`](https://sst.dev/docs/component/aws/app-sync-function#functionargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync-function", "title": "AppSyncFunction", "description": "Reference doc for the `sst.aws.AppSyncFunction` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:00", "type": "overview", "page_metadata": {"og:locale": "en", "og:url": "https://sst.dev/docs/component/aws/app-sync-function/", "twitter:card": "summary_large_image", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "og:site_name": "SST", "og:description": "Reference doc for the `sst.aws.AppSyncFunction` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0Z1bmN0aW9u.png", "description": "Reference doc for the `sst.aws.AppSyncFunction` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0Z1bmN0aW9u.png", "ogUrl": "https://sst.dev/docs/component/aws/app-sync-function/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:title": "AppSyncFunction", "ogDescription": "Reference doc for the `sst.aws.AppSyncFunction` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "AppSyncFunction", "language": "en", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0Z1bmN0aW9u.png", "title": "AppSyncFunction | SST", "scrapeId": "b19738b5-2657-4d27-9f79-f3774b533fe8", "sourceURL": "https://sst.dev/docs/component/aws/app-sync-function", "url": "https://sst.dev/docs/component/aws/app-sync-function", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"AppSyncFunction\"?\n\nAssistant: Here are some code examples:\n\n### Function Code Example\n```yaml\n{\n  code: fs.readFileSync(\"functions.js\")\n}\n```\n\n### Data Source Example\n```yaml\n{\n  dataSource: \"lambdaDS\"\n}\n```\n\n### Name Example\n```yaml\n{\n  name: \"myFunction\"\n}\n```\n\n### Request Mapping Template Example\n```yaml\n{\n  requestTemplate: `{\n    \"version\": \"2018-05-29\",\n    \"operation\": \"Scan\",\n  }`,\n}\n```\n\n### Response Mapping Template Example\n```yaml\n{\n  responseTemplate: `{\n    \"users\": $utils.toJson($context.result.items)\n  }`,\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync-function", "title": "AppSyncFunction", "description": "Reference doc for the `sst.aws.AppSyncFunction` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:00", "type": "code_examples", "page_metadata": {"og:locale": "en", "og:url": "https://sst.dev/docs/component/aws/app-sync-function/", "twitter:card": "summary_large_image", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "og:site_name": "SST", "og:description": "Reference doc for the `sst.aws.AppSyncFunction` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0Z1bmN0aW9u.png", "description": "Reference doc for the `sst.aws.AppSyncFunction` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0Z1bmN0aW9u.png", "ogUrl": "https://sst.dev/docs/component/aws/app-sync-function/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:title": "AppSyncFunction", "ogDescription": "Reference doc for the `sst.aws.AppSyncFunction` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "AppSyncFunction", "language": "en", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0Z1bmN0aW9u.png", "title": "AppSyncFunction | SST", "scrapeId": "b19738b5-2657-4d27-9f79-f3774b533fe8", "sourceURL": "https://sst.dev/docs/component/aws/app-sync-function", "url": "https://sst.dev/docs/component/aws/app-sync-function", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"AppSyncFunction\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to provide the correct API ID for the AppSync GraphQL API.\n• Use appropriate request and response mapping templates to handle data correctly.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync-function", "title": "AppSyncFunction", "description": "Reference doc for the `sst.aws.AppSyncFunction` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:00", "type": "best_practices", "page_metadata": {"og:locale": "en", "og:url": "https://sst.dev/docs/component/aws/app-sync-function/", "twitter:card": "summary_large_image", "og:type": "article", "favicon": "https://sst.dev/favicon.ico", "og:site_name": "SST", "og:description": "Reference doc for the `sst.aws.AppSyncFunction` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0Z1bmN0aW9u.png", "description": "Reference doc for the `sst.aws.AppSyncFunction` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0Z1bmN0aW9u.png", "ogUrl": "https://sst.dev/docs/component/aws/app-sync-function/", "viewport": "width=device-width, initial-scale=1", "ogSiteName": "SST", "og:title": "AppSyncFunction", "ogDescription": "Reference doc for the `sst.aws.AppSyncFunction` component.", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "AppSyncFunction", "language": "en", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0Z1bmN0aW9u.png", "title": "AppSyncFunction | SST", "scrapeId": "b19738b5-2657-4d27-9f79-f3774b533fe8", "sourceURL": "https://sst.dev/docs/component/aws/app-sync-function", "url": "https://sst.dev/docs/component/aws/app-sync-function", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"AppSyncResolver\"?\n\nAssistant: Reference doc for the `sst.aws.AppSyncResolver` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\n\nnew AppSyncResolver(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`ResolverArgs`](https://sst.dev/docs/component/aws/app-sync-resolver#resolverargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync-resolver", "title": "AppSyncResolver", "description": "Reference doc for the `sst.aws.AppSyncResolver` component.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 21:26:07", "type": "overview", "page_metadata": {"ogSiteName": "SST", "description": "Reference doc for the `sst.aws.AppSyncResolver` component.", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY1Jlc29sdmVy.png", "og:description": "Reference doc for the `sst.aws.AppSyncResolver` component.", "og:type": "article", "ogTitle": "AppSyncResolver", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/app-sync-resolver/", "favicon": "https://sst.dev/favicon.ico", "og:url": "https://sst.dev/docs/component/aws/app-sync-resolver/", "og:title": "AppSyncResolver", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luY1Jlc29sdmVy.png", "ogLocale": "en", "og:locale": "en", "title": "AppSyncResolver | SST", "ogDescription": "Reference doc for the `sst.aws.AppSyncResolver` component.", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY1Jlc29sdmVy.png", "scrapeId": "232a0e54-f06f-4d1b-b198-69135f6d9fff", "sourceURL": "https://sst.dev/docs/component/aws/app-sync-resolver", "url": "https://sst.dev/docs/component/aws/app-sync-resolver", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"AppSyncResolver\"?\n\nAssistant: Here are some code examples:\n\n### Example of code parameter\n```yaml\n{\n  code: fs.readFileSync(\"functions.js\")\n}\n```\n\n### Example of dataSource parameter\n```yaml\n{\n  dataSource: \"lambdaDS\"\n}\n```\n\n### Example of functions parameter\n```yaml\n{\n functions: [\"myFunction1\", \"myFunction2\"]\n}\n```\n\n### Example of kind parameter\n```yaml\n{\n  kind: \"pipeline\"\n}\n```\n\n### Example of requestTemplate parameter\n```yaml\n{\n  requestTemplate: `{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Scan\"\n  }`\n}\n```\n\n### Example of responseTemplate parameter\n```yaml\n{\n  responseTemplate: `{\n    \"users\": $utils.toJson($context.result.items)\n  }`\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync-resolver", "title": "AppSyncResolver", "description": "Reference doc for the `sst.aws.AppSyncResolver` component.", "has_code_examples": true, "has_best_practices": false, "section_count": 2, "timestamp": "2025-02-27 21:26:07", "type": "code_examples", "page_metadata": {"ogSiteName": "SST", "description": "Reference doc for the `sst.aws.AppSyncResolver` component.", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY1Jlc29sdmVy.png", "og:description": "Reference doc for the `sst.aws.AppSyncResolver` component.", "og:type": "article", "ogTitle": "AppSyncResolver", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/app-sync-resolver/", "favicon": "https://sst.dev/favicon.ico", "og:url": "https://sst.dev/docs/component/aws/app-sync-resolver/", "og:title": "AppSyncResolver", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luY1Jlc29sdmVy.png", "ogLocale": "en", "og:locale": "en", "title": "AppSyncResolver | SST", "ogDescription": "Reference doc for the `sst.aws.AppSyncResolver` component.", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY1Jlc29sdmVy.png", "scrapeId": "232a0e54-f06f-4d1b-b198-69135f6d9fff", "sourceURL": "https://sst.dev/docs/component/aws/app-sync-resolver", "url": "https://sst.dev/docs/component/aws/app-sync-resolver", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"BucketTopicSubscriber\"?\n\nAssistant: Reference doc for the `sst.aws.BucketTopicSubscriber` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\n\nnew BucketTopicSubscriber(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/bucket-topic-subscriber#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket-topic-subscriber", "title": "BucketTopicSubscriber", "description": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:13", "type": "overview", "page_metadata": {"description": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "og:title": "BucketTopicSubscriber", "ogUrl": "https://sst.dev/docs/component/aws/bucket-topic-subscriber/", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0VG9waWNTdWJzY3JpYmVy.png", "og:type": "article", "title": "BucketTopicSubscriber | SST", "ogTitle": "BucketTopicSubscriber", "ogDescription": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/bucket-topic-subscriber/", "og:locale": "en", "ogLocale": "en", "og:site_name": "SST", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0VG9waWNTdWJzY3JpYmVy.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0VG9waWNTdWJzY3JpYmVy.png", "scrapeId": "82b11dde-138d-4f27-a9a1-8547d5f46fb2", "sourceURL": "https://sst.dev/docs/component/aws/bucket-topic-subscriber", "url": "https://sst.dev/docs/component/aws/bucket-topic-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"BucketTopicSubscriber\"?\n\nAssistant: Here are some code examples:\n\n### Constructor Example\n```yaml\nnew BucketTopicSubscriber(name, args, opts?)\n```\n\n### Events Example\n```yaml\n{\n  events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n}\n```\n\n### Filter Prefix Example\n```yaml\n{\n  filterPrefix: \"images/\"\n}\n```\n\n### Filter Suffix Example\n```yaml\n{\n filterSuffix: \".jpg\"\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket-topic-subscriber", "title": "BucketTopicSubscriber", "description": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:13", "type": "code_examples", "page_metadata": {"description": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "og:title": "BucketTopicSubscriber", "ogUrl": "https://sst.dev/docs/component/aws/bucket-topic-subscriber/", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0VG9waWNTdWJzY3JpYmVy.png", "og:type": "article", "title": "BucketTopicSubscriber | SST", "ogTitle": "BucketTopicSubscriber", "ogDescription": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/bucket-topic-subscriber/", "og:locale": "en", "ogLocale": "en", "og:site_name": "SST", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0VG9waWNTdWJzY3JpYmVy.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0VG9waWNTdWJzY3JpYmVy.png", "scrapeId": "82b11dde-138d-4f27-a9a1-8547d5f46fb2", "sourceURL": "https://sst.dev/docs/component/aws/bucket-topic-subscriber", "url": "https://sst.dev/docs/component/aws/bucket-topic-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"BucketTopicSubscriber\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use specific event types to minimize unnecessary notifications.\n• Utilize filterPrefix and filterSuffix to narrow down the notifications to relevant objects.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/bucket-topic-subscriber", "title": "BucketTopicSubscriber", "description": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:13", "type": "best_practices", "page_metadata": {"description": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "og:title": "BucketTopicSubscriber", "ogUrl": "https://sst.dev/docs/component/aws/bucket-topic-subscriber/", "og:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0VG9waWNTdWJzY3JpYmVy.png", "og:type": "article", "title": "BucketTopicSubscriber | SST", "ogTitle": "BucketTopicSubscriber", "ogDescription": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "language": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/bucket-topic-subscriber/", "og:locale": "en", "ogLocale": "en", "og:site_name": "SST", "ogSiteName": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.BucketTopicSubscriber` component.", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/QnVja2V0VG9waWNTdWJzY3JpYmVy.png", "twitter:image": "https://social-cards.sst.dev/v3-docs/QnVja2V0VG9waWNTdWJzY3JpYmVy.png", "scrapeId": "82b11dde-138d-4f27-a9a1-8547d5f46fb2", "sourceURL": "https://sst.dev/docs/component/aws/bucket-topic-subscriber", "url": "https://sst.dev/docs/component/aws/bucket-topic-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV2PrivateRoute\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\n\nnew ApiGatewayV2PrivateRoute(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/apigatewayv2-private-route#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-private-route", "title": "ApiGatewayV2PrivateRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:18", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogTitle": "ApiGatewayV2PrivateRoute", "og:type": "article", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyUHJpdmF0ZVJvdXRl.png", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "ogLocale": "en", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyUHJpdmF0ZVJvdXRl.png", "title": "ApiGatewayV2PrivateRoute | SST", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-private-route/", "og:title": "ApiGatewayV2PrivateRoute", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyUHJpdmF0ZVJvdXRl.png", "og:url": "https://sst.dev/docs/component/aws/apigatewayv2-private-route/", "scrapeId": "42612118-ae6f-432c-8386-1a8fd1ca8080", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-private-route", "url": "https://sst.dev/docs/component/aws/apigatewayv2-private-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV2PrivateRoute\"?\n\nAssistant: Here are some code examples:\n\n### Example of ARN\n```yaml\n{\n  arn: \"arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188\"\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-private-route", "title": "ApiGatewayV2PrivateRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:18", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogTitle": "ApiGatewayV2PrivateRoute", "og:type": "article", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyUHJpdmF0ZVJvdXRl.png", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "ogLocale": "en", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyUHJpdmF0ZVJvdXRl.png", "title": "ApiGatewayV2PrivateRoute | SST", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-private-route/", "og:title": "ApiGatewayV2PrivateRoute", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyUHJpdmF0ZVJvdXRl.png", "og:url": "https://sst.dev/docs/component/aws/apigatewayv2-private-route/", "scrapeId": "42612118-ae6f-432c-8386-1a8fd1ca8080", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-private-route", "url": "https://sst.dev/docs/component/aws/apigatewayv2-private-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayV2PrivateRoute\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable IAM authorization for a given API route by setting `auth.iam` to true. Clients need to use Signature Version 4 to sign their requests with their AWS credentials.\n• Enable JWT authorization by configuring `auth.jwt` with the authorizer ID and required scopes. If the JWT does not have the required scope, the request is rejected.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv2-private-route", "title": "ApiGatewayV2PrivateRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:18", "type": "best_practices", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogTitle": "ApiGatewayV2PrivateRoute", "og:type": "article", "og:locale": "en", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "language": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyUHJpdmF0ZVJvdXRl.png", "ogSiteName": "SST", "viewport": "width=device-width, initial-scale=1", "og:site_name": "SST", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "ogLocale": "en", "og:description": "Reference doc for the `sst.aws.ApiGatewayV2PrivateRoute` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyUHJpdmF0ZVJvdXRl.png", "title": "ApiGatewayV2PrivateRoute | SST", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv2-private-route/", "og:title": "ApiGatewayV2PrivateRoute", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYyUHJpdmF0ZVJvdXRl.png", "og:url": "https://sst.dev/docs/component/aws/apigatewayv2-private-route/", "scrapeId": "42612118-ae6f-432c-8386-1a8fd1ca8080", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv2-private-route", "url": "https://sst.dev/docs/component/aws/apigatewayv2-private-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayV1IntegrationRoute\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew ApiGatewayV1IntegrationRoute(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/apigatewayv1-integration-route#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route", "title": "ApiGatewayV1IntegrationRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:24", "type": "overview", "page_metadata": {"og:type": "article", "og:title": "ApiGatewayV1IntegrationRoute", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route/", "ogTitle": "ApiGatewayV1IntegrationRoute", "title": "ApiGatewayV1IntegrationRoute | SST", "viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route/", "description": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxSW50ZWdyYXRpb25Sb3V0ZQ%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxSW50ZWdyYXRpb25Sb3V0ZQ%3D%3D.png", "og:site_name": "SST", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "og:locale": "en", "ogSiteName": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxSW50ZWdyYXRpb25Sb3V0ZQ%3D%3D.png", "scrapeId": "db2fa1fa-f754-473e-a3fa-83da7b936de3", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route", "url": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayV1IntegrationRoute\"?\n\nAssistant: Here are some code examples:\n\n### Constructor Example\n```yaml\nnew ApiGatewayV1IntegrationRoute(name, args, opts?)\n```\n\n### Auth Example\n```yaml\n{\n  auth: {\n    iam: true\n  }\n}\n```\n\n### Cognito Auth Example\n```yaml\n{\n  auth: {\n    cognito: {\n      authorizer: myAuthorizer.id,\n      scopes: [\"read:profile\", \"write:profile\"]\n    }\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route", "title": "ApiGatewayV1IntegrationRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:24", "type": "code_examples", "page_metadata": {"og:type": "article", "og:title": "ApiGatewayV1IntegrationRoute", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route/", "ogTitle": "ApiGatewayV1IntegrationRoute", "title": "ApiGatewayV1IntegrationRoute | SST", "viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route/", "description": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxSW50ZWdyYXRpb25Sb3V0ZQ%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxSW50ZWdyYXRpb25Sb3V0ZQ%3D%3D.png", "og:site_name": "SST", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "og:locale": "en", "ogSiteName": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxSW50ZWdyYXRpb25Sb3V0ZQ%3D%3D.png", "scrapeId": "db2fa1fa-f754-473e-a3fa-83da7b936de3", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route", "url": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayV1IntegrationRoute\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable auth for your REST API by setting the `auth` property. By default, auth is disabled.\n• Use Cognito User Pool authorization for JWT auth by configuring the `auth.cognito` property.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route", "title": "ApiGatewayV1IntegrationRoute", "description": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:24", "type": "best_practices", "page_metadata": {"og:type": "article", "og:title": "ApiGatewayV1IntegrationRoute", "language": "en", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "ogUrl": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route/", "ogTitle": "ApiGatewayV1IntegrationRoute", "title": "ApiGatewayV1IntegrationRoute | SST", "viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "og:url": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route/", "description": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxSW50ZWdyYXRpb25Sb3V0ZQ%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxSW50ZWdyYXRpb25Sb3V0ZQ%3D%3D.png", "og:site_name": "SST", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayV1IntegrationRoute` component.", "og:locale": "en", "ogSiteName": "SST", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVYxSW50ZWdyYXRpb25Sb3V0ZQ%3D%3D.png", "scrapeId": "db2fa1fa-f754-473e-a3fa-83da7b936de3", "sourceURL": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route", "url": "https://sst.dev/docs/component/aws/apigatewayv1-integration-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"KinesisStreamLambdaSubscriber\"?\n\nAssistant: Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew KinesisStreamLambdaSubscriber(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber", "title": "KinesisStreamLambdaSubscriber", "description": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:38", "type": "overview", "page_metadata": {"twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbUxhbWJkYVN1YnNjcmliZXI%3D.png", "og:title": "KinesisStreamLambdaSubscriber", "og:locale": "en", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber/", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber/", "ogDescription": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbUxhbWJkYVN1YnNjcmliZXI%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "title": "KinesisStreamLambdaSubscriber | SST", "og:type": "article", "language": "en", "ogTitle": "KinesisStreamLambdaSubscriber", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "og:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbUxhbWJkYVN1YnNjcmliZXI%3D.png", "scrapeId": "49310564-0dff-4365-acfd-52ad2158930e", "sourceURL": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"KinesisStreamLambdaSubscriber\"?\n\nAssistant: Here are some code examples:\n\n### Constructor Example\n```yaml\nnew KinesisStreamLambdaSubscriber(name, args, opts?)\n```\n\n### Filter Example\n```yaml\n{\n  filters: [\n    {\n      data: {\n        order: {\n          type: [\"buy\"],\n        },\n      },\n    },\n  ],\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber", "title": "KinesisStreamLambdaSubscriber", "description": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:38", "type": "code_examples", "page_metadata": {"twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbUxhbWJkYVN1YnNjcmliZXI%3D.png", "og:title": "KinesisStreamLambdaSubscriber", "og:locale": "en", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber/", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber/", "ogDescription": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbUxhbWJkYVN1YnNjcmliZXI%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "title": "KinesisStreamLambdaSubscriber | SST", "og:type": "article", "language": "en", "ogTitle": "KinesisStreamLambdaSubscriber", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "og:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbUxhbWJkYVN1YnNjcmliZXI%3D.png", "scrapeId": "49310564-0dff-4365-acfd-52ad2158930e", "sourceURL": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"KinesisStreamLambdaSubscriber\"?\n\nAssistant: Here are the recommended best practices:\n\n• You can pass in up to 5 different filter policies. These will logically ORed together. Meaning that if any single policy matches, the record will be processed.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber", "title": "KinesisStreamLambdaSubscriber", "description": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:38", "type": "best_practices", "page_metadata": {"twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbUxhbWJkYVN1YnNjcmliZXI%3D.png", "og:title": "KinesisStreamLambdaSubscriber", "og:locale": "en", "og:site_name": "SST", "ogUrl": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber/", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber/", "ogDescription": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbUxhbWJkYVN1YnNjcmliZXI%3D.png", "favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "title": "KinesisStreamLambdaSubscriber | SST", "og:type": "article", "language": "en", "ogTitle": "KinesisStreamLambdaSubscriber", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:description": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.KinesisStreamLambdaSubscriber` component.", "og:image": "https://social-cards.sst.dev/v3-docs/S2luZXNpc1N0cmVhbUxhbWJkYVN1YnNjcmliZXI%3D.png", "scrapeId": "49310564-0dff-4365-acfd-52ad2158930e", "sourceURL": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber", "url": "https://sst.dev/docs/component/aws/kinesis-stream-lambda-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"ApiGatewayWebSocketLambdaRoute\"?\n\nAssistant: Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew ApiGatewayWebSocketLambdaRoute(name, args, opts?)\n```\n\n#### Parameters\n\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route", "title": "ApiGatewayWebSocketLambdaRoute", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:26:42", "type": "overview", "page_metadata": {"ogTitle": "ApiGatewayWebSocketLambdaRoute", "og:url": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route/", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route/", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldExhbWJkYVJvdXRl.png", "og:description": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "favicon": "https://sst.dev/favicon.ico", "language": "en", "twitter:card": "summary_large_image", "og:title": "ApiGatewayWebSocketLambdaRoute", "og:site_name": "SST", "title": "ApiGatewayWebSocketLambdaRoute | SST", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldExhbWJkYVJvdXRl.png", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "ogLocale": "en", "ogSiteName": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldExhbWJkYVJvdXRl.png", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "og:type": "article", "og:locale": "en", "scrapeId": "4fa28229-ab6a-4bac-acaa-42c4173fc909", "sourceURL": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route", "url": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"ApiGatewayWebSocketLambdaRoute\"?\n\nAssistant: Here are some code examples:\n\n### Constructor Example\n```yaml\nnew ApiGatewayWebSocketLambdaRoute(name, args, opts?)\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route", "title": "ApiGatewayWebSocketLambdaRoute", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:26:42", "type": "code_examples", "page_metadata": {"ogTitle": "ApiGatewayWebSocketLambdaRoute", "og:url": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route/", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route/", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldExhbWJkYVJvdXRl.png", "og:description": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "favicon": "https://sst.dev/favicon.ico", "language": "en", "twitter:card": "summary_large_image", "og:title": "ApiGatewayWebSocketLambdaRoute", "og:site_name": "SST", "title": "ApiGatewayWebSocketLambdaRoute | SST", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldExhbWJkYVJvdXRl.png", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "ogLocale": "en", "ogSiteName": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldExhbWJkYVJvdXRl.png", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "og:type": "article", "og:locale": "en", "scrapeId": "4fa28229-ab6a-4bac-acaa-42c4173fc909", "sourceURL": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route", "url": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"ApiGatewayWebSocketLambdaRoute\"?\n\nAssistant: Here are the recommended best practices:\n\n• Enable IAM authorization for a given API route by setting `auth.iam` to true. Clients need to use Signature Version 4 to sign their requests with their AWS credentials.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route", "title": "ApiGatewayWebSocketLambdaRoute", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 1, "timestamp": "2025-02-27 21:26:42", "type": "best_practices", "page_metadata": {"ogTitle": "ApiGatewayWebSocketLambdaRoute", "og:url": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route/", "description": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "ogUrl": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route/", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldExhbWJkYVJvdXRl.png", "og:description": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "favicon": "https://sst.dev/favicon.ico", "language": "en", "twitter:card": "summary_large_image", "og:title": "ApiGatewayWebSocketLambdaRoute", "og:site_name": "SST", "title": "ApiGatewayWebSocketLambdaRoute | SST", "viewport": "width=device-width, initial-scale=1", "og:image": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldExhbWJkYVJvdXRl.png", "ogDescription": "Reference doc for the `sst.aws.ApiGatewayWebSocketLambdaRoute` component.", "ogLocale": "en", "ogSiteName": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBpR2F0ZXdheVdlYlNvY2tldExhbWJkYVJvdXRl.png", "generator": ["Astro v4.14.2", "Starlight v0.25.5"], "og:type": "article", "og:locale": "en", "scrapeId": "4fa28229-ab6a-4bac-acaa-42c4173fc909", "sourceURL": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route", "url": "https://sst.dev/docs/component/aws/apigateway-websocket-lambda-route", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"SnsTopicQueueSubscriber\"?\n\nAssistant: Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\n\nnew SnsTopicQueueSubscriber(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/sns-topic-queue-subscriber#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber", "title": "SnsTopicQueueSubscriber", "description": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:51", "type": "overview", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "twitter:card": "summary_large_image", "og:title": "SnsTopicQueueSubscriber", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber/", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWNRdWV1ZVN1YnNjcmliZXI%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:site_name": "SST", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "og:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWNRdWV1ZVN1YnNjcmliZXI%3D.png", "og:locale": "en", "ogUrl": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber/", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/U25zVG9waWNRdWV1ZVN1YnNjcmliZXI%3D.png", "ogTitle": "SnsTopicQueueSubscriber", "ogLocale": "en", "title": "SnsTopicQueueSubscriber | SST", "scrapeId": "517b2a0d-0371-4321-9c11-22387e37522d", "sourceURL": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber", "url": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"SnsTopicQueueSubscriber\"?\n\nAssistant: Here are some code examples:\n\n### Filter Example\n```yaml\n{\n  filter: {\n    store: [\"example_corp\"],\n    event: [{\"anything-but\": \"order_cancelled\"}],\n    customer_interests: [\n       \"rugby\",\n       \"football\",\n       \"baseball\"\n    ],\n    price_usd: [{numeric: [\">=\", 100]}]\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber", "title": "SnsTopicQueueSubscriber", "description": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:51", "type": "code_examples", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "twitter:card": "summary_large_image", "og:title": "SnsTopicQueueSubscriber", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber/", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWNRdWV1ZVN1YnNjcmliZXI%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:site_name": "SST", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "og:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWNRdWV1ZVN1YnNjcmliZXI%3D.png", "og:locale": "en", "ogUrl": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber/", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/U25zVG9waWNRdWV1ZVN1YnNjcmliZXI%3D.png", "ogTitle": "SnsTopicQueueSubscriber", "ogLocale": "en", "title": "SnsTopicQueueSubscriber | SST", "scrapeId": "517b2a0d-0371-4321-9c11-22387e37522d", "sourceURL": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber", "url": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"SnsTopicQueueSubscriber\"?\n\nAssistant: Here are the recommended best practices:\n\n• If any single property in the filter doesn’t match an attribute assigned to the message, then the policy rejects the message.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber", "title": "SnsTopicQueueSubscriber", "description": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:51", "type": "best_practices", "page_metadata": {"ogDescription": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "viewport": "width=device-width, initial-scale=1", "og:description": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "twitter:card": "summary_large_image", "og:title": "SnsTopicQueueSubscriber", "og:type": "article", "og:url": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber/", "language": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWNRdWV1ZVN1YnNjcmliZXI%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:site_name": "SST", "ogSiteName": "SST", "description": "Reference doc for the `sst.aws.SnsTopicQueueSubscriber` component.", "og:image": "https://social-cards.sst.dev/v3-docs/U25zVG9waWNRdWV1ZVN1YnNjcmliZXI%3D.png", "og:locale": "en", "ogUrl": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber/", "favicon": "https://sst.dev/favicon.ico", "ogImage": "https://social-cards.sst.dev/v3-docs/U25zVG9waWNRdWV1ZVN1YnNjcmliZXI%3D.png", "ogTitle": "SnsTopicQueueSubscriber", "ogLocale": "en", "title": "SnsTopicQueueSubscriber | SST", "scrapeId": "517b2a0d-0371-4321-9c11-22387e37522d", "sourceURL": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber", "url": "https://sst.dev/docs/component/aws/sns-topic-queue-subscriber", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"AppSyncDataSource\"?\n\nAssistant: Reference doc for the `sst.aws.AppSyncDataSource` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew AppSyncDataSource(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`DataSourceArgs`](https://sst.dev/docs/component/aws/app-sync-data-source#datasourceargs)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync-data-source", "title": "AppSyncDataSource", "description": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:55", "type": "overview", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "AppSyncDataSource", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0RhdGFTb3VyY2U%3D.png", "viewport": "width=device-width, initial-scale=1", "og:title": "AppSyncDataSource", "description": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0RhdGFTb3VyY2U%3D.png", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0RhdGFTb3VyY2U%3D.png", "title": "AppSyncDataSource | SST", "ogDescription": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "ogSiteName": "SST", "og:type": "article", "og:locale": "en", "language": "en", "ogUrl": "https://sst.dev/docs/component/aws/app-sync-data-source/", "og:url": "https://sst.dev/docs/component/aws/app-sync-data-source/", "og:description": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "scrapeId": "7eb849da-1c9f-4a47-bf72-75df89ebbc1d", "sourceURL": "https://sst.dev/docs/component/aws/app-sync-data-source", "url": "https://sst.dev/docs/component/aws/app-sync-data-source", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"AppSyncDataSource\"?\n\nAssistant: Here are some code examples:\n\n### DynamoDB Example\n```yaml\n{\n  dynamodb: \"arn:aws:dynamodb:us-east-1:123456789012:table/my-table\"\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync-data-source", "title": "AppSyncDataSource", "description": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:55", "type": "code_examples", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "AppSyncDataSource", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0RhdGFTb3VyY2U%3D.png", "viewport": "width=device-width, initial-scale=1", "og:title": "AppSyncDataSource", "description": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0RhdGFTb3VyY2U%3D.png", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0RhdGFTb3VyY2U%3D.png", "title": "AppSyncDataSource | SST", "ogDescription": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "ogSiteName": "SST", "og:type": "article", "og:locale": "en", "language": "en", "ogUrl": "https://sst.dev/docs/component/aws/app-sync-data-source/", "og:url": "https://sst.dev/docs/component/aws/app-sync-data-source/", "og:description": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "scrapeId": "7eb849da-1c9f-4a47-bf72-75df89ebbc1d", "sourceURL": "https://sst.dev/docs/component/aws/app-sync-data-source", "url": "https://sst.dev/docs/component/aws/app-sync-data-source", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"AppSyncDataSource\"?\n\nAssistant: Here are the recommended best practices:\n\n• Ensure to provide the correct ARN for the resources you are connecting to.\n• Use the appropriate data source type based on your application needs.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/app-sync-data-source", "title": "AppSyncDataSource", "description": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:26:55", "type": "best_practices", "page_metadata": {"favicon": "https://sst.dev/favicon.ico", "ogLocale": "en", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogTitle": "AppSyncDataSource", "og:site_name": "SST", "twitter:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0RhdGFTb3VyY2U%3D.png", "viewport": "width=device-width, initial-scale=1", "og:title": "AppSyncDataSource", "description": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "og:image": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0RhdGFTb3VyY2U%3D.png", "twitter:card": "summary_large_image", "ogImage": "https://social-cards.sst.dev/v3-docs/QXBwU3luY0RhdGFTb3VyY2U%3D.png", "title": "AppSyncDataSource | SST", "ogDescription": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "ogSiteName": "SST", "og:type": "article", "og:locale": "en", "language": "en", "ogUrl": "https://sst.dev/docs/component/aws/app-sync-data-source/", "og:url": "https://sst.dev/docs/component/aws/app-sync-data-source/", "og:description": "Reference doc for the `sst.aws.AppSyncDataSource` component.", "scrapeId": "7eb849da-1c9f-4a47-bf72-75df89ebbc1d", "sourceURL": "https://sst.dev/docs/component/aws/app-sync-data-source", "url": "https://sst.dev/docs/component/aws/app-sync-data-source", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"CognitoUserPoolClient\"?\n\nAssistant: Reference doc for the `sst.aws.CognitoUserPoolClient` component.\n\nHere's a detailed explanation:\n\n\n## Constructor\n```\nnew CognitoUserPoolClient(name, args, opts?)\n```\n\n## Parameters\n- `name` `string`\n\n- `args` [`Args`](https://sst.dev/docs/component/aws/cognito-user-pool-client#args)\n\n- `opts?` [`ComponentResourceOptions`](https://www.pulumi.com/docs/concepts/options/)\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-user-pool-client", "title": "CognitoUserPoolClient", "description": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:27:01", "type": "overview", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29sQ2xpZW50.png", "og:description": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "og:url": "https://sst.dev/docs/component/aws/cognito-user-pool-client/", "favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29sQ2xpZW50.png", "ogTitle": "CognitoUserPoolClient", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29sQ2xpZW50.png", "ogDescription": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "language": "en", "og:locale": "en", "ogLocale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/cognito-user-pool-client/", "og:title": "CognitoUserPoolClient", "title": "CognitoUserPoolClient | SST", "og:type": "article", "ogSiteName": "SST", "scrapeId": "bb58037d-45d0-48db-a7ee-e606cf6f5971", "sourceURL": "https://sst.dev/docs/component/aws/cognito-user-pool-client", "url": "https://sst.dev/docs/component/aws/cognito-user-pool-client", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"CognitoUserPoolClient\"?\n\nAssistant: Here are some code examples:\n\n### Identity Provider Example\n```yaml\nconst provider = userPool.addIdentityProvider(\"MyProvider\", {\n  type: \"oidc\",\n  details: {\n    authorize_scopes: \"email profile\",\n    client_id: \"your-client-id\",\n    client_secret: \"your-client-secret\"\n  },\n});\n\nuserPool.addClient(\"Web\", {\n  providers: [provider.providerName]\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-user-pool-client", "title": "CognitoUserPoolClient", "description": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:27:01", "type": "code_examples", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29sQ2xpZW50.png", "og:description": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "og:url": "https://sst.dev/docs/component/aws/cognito-user-pool-client/", "favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29sQ2xpZW50.png", "ogTitle": "CognitoUserPoolClient", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29sQ2xpZW50.png", "ogDescription": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "language": "en", "og:locale": "en", "ogLocale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/cognito-user-pool-client/", "og:title": "CognitoUserPoolClient", "title": "CognitoUserPoolClient | SST", "og:type": "article", "ogSiteName": "SST", "scrapeId": "bb58037d-45d0-48db-a7ee-e606cf6f5971", "sourceURL": "https://sst.dev/docs/component/aws/cognito-user-pool-client", "url": "https://sst.dev/docs/component/aws/cognito-user-pool-client", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"CognitoUserPoolClient\"?\n\nAssistant: Here are the recommended best practices:\n\n• Make sure to pass in `provider.providerName` instead of hardcoding it to \"MyProvider\". This ensures the client is created after the provider.\n", "metadata": {"source_url": "https://sst.dev/docs/component/aws/cognito-user-pool-client", "title": "CognitoUserPoolClient", "description": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 2, "timestamp": "2025-02-27 21:27:01", "type": "best_practices", "page_metadata": {"ogImage": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29sQ2xpZW50.png", "og:description": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "twitter:card": "summary_large_image", "description": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "og:url": "https://sst.dev/docs/component/aws/cognito-user-pool-client/", "favicon": "https://sst.dev/favicon.ico", "og:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29sQ2xpZW50.png", "ogTitle": "CognitoUserPoolClient", "twitter:image": "https://social-cards.sst.dev/v3-docs/Q29nbml0b1VzZXJQb29sQ2xpZW50.png", "ogDescription": "Reference doc for the `sst.aws.CognitoUserPoolClient` component.", "language": "en", "og:locale": "en", "ogLocale": "en", "og:site_name": "SST", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogUrl": "https://sst.dev/docs/component/aws/cognito-user-pool-client/", "og:title": "CognitoUserPoolClient", "title": "CognitoUserPoolClient | SST", "og:type": "article", "ogSiteName": "SST", "scrapeId": "bb58037d-45d0-48db-a7ee-e606cf6f5971", "sourceURL": "https://sst.dev/docs/component/aws/cognito-user-pool-client", "url": "https://sst.dev/docs/component/aws/cognito-user-pool-client", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Set up AWS Accounts\"?\n\nAssistant: A simple and secure guide to setting up AWS accounts.\n\nHere's a detailed explanation:\n\n\n## Management account\nThe first step is to create a management account.\n\n1. Start by using a work email alias. For example `aws@acme.com`. This’ll forward to your real email. It allows you to give other people access to it in the future.\n2. The account name should be your company name, for example `acme`.\n3. Enter your billing info and confirm your identity.\n4. Choose basic support. You can upgrade this later.\n\nOnce you’re done you should be able to login and access the AWS Console.\n\nThese credentials are overly powerful. You should rarely ever need them again. Feel free to throw away the password after completing this guide. You can always do a password reset if it’s needed.\n\nThis account won’t have anything deployed to it besides the IAM Identity Center which is how we’ll manage the users in our organization.\n\n## AWS Organization\nNext, we’ll create an organization. This allows you to manage multiple AWS accounts together. We’ll need this as we create separate accounts for dev and prod.\n\nSearch AWS Organization in the search bar to go to its dashboard and click Create an organization.\n\nYou’ll see that the management account is already in the organization.\n\n## IAM Identity Center\nNow let’s enable IAM Identity Center.\n\n1. Search IAM Identity Center and go to its dashboard. Click Enable.\n\nThis’ll be created in one region and you cannot change it. However, it doesn’t matter too much which one it is. You’ll just need to navigate to that region when you are trying to find this again.\n\n2. Click Enable. This will give your organization a unique URL to login.\n\nThis is autogenerated but you can click Customize to select a unique name. You’ll want to bookmark this for later.\n\n## Root user\nNow we’ll create a root user in IAM Identity Center.\n\n1. Click Users on the left and then Add user to create a user for yourself. Make your username your work email, for example `dax@acme.com`, and fill out the required fields.\n2. Skip adding the user to groups.\n3. Finish creating the user.\n\nWe’ve created the user. Now let’s give it access to our management account.\n\n## User access\nGo to the left panel and click AWS Accounts.\n\n1. Select your management account. It should be tagged as such. And click Assign users or groups.\n2. Select the Users tab, make sure your user is selected and hit Next.\n3. Now we’ll need to create a new permission set. We need to do this once. Click Create permission set.\n4. In the new tab select Predefined permission set and AdministratorAccess. Click Next.\n5. Increase the session duration to 12 hours. This is the most convenient option. Click Next and then Create.\n6. Close the tab, return to the previous one and hit the refresh icon. Select AdministratorAccess and click Next and then Submit.\n\nThis might seem complicated but all we did was grant the user an AdministratorAccess role into the management account.\n\nNow you’re ready to log in to your user account.\n\n## Login\nCheck your email and you should have an invite.\n\n1. Accept the invite and create a new password. Be sure to save it in your password manager. This is important because this account has access to the management account.\n\n2. Sign in and you should see your organization with a list of accounts below it.\n\nYou currently only have access to the management account we created above. So click it and you should see the AdministratorAccess role.\n\n3. Click Management Console to login to the AWS Console.\n\nYou’re now done setting up the root user account!\n\n## Dev and prod accounts\nAs mentioned earlier, your management account isn’t meant to deploy any resources. It’s meant to manage users.\n\nSo a good initial setup is to create separate dev and production accounts. This helps create some isolation. The dev account will be shared between your team while the production account is just for production.\n\nYou can also create a staging account or an account per developer but we’ll start simple.\n\nNavigate back to AWS Organizations by searching for it.\n\n1. Click Add an AWS account.\n2. For the account name append -dev to whatever you called your management account. For example, acme-dev.\n3. For the email address choose a new email alias. If you’re using Google for email, you can do aws+dev@acme.com and it’ll still go to your aws@acme.com email.\n4. Click Create AWS account.\n\nRepeat this step and create the -production as well. So you should now have an acme-dev and an acme-production.\n\nIt’ll take a few seconds to finish creating.\n\n## Assign users\nOnce it’s done head over to IAM Identity Center to grant your user access to these accounts.\n\n1. Select the AWS Accounts tab on the left.\n2. Select your newly created acme-dev and acme-production accounts and click Assign users or groups.\n3. In the Users tab select your user and click Next.\n4. Select the AdministratorAccess permission set and click Next and Submit.\n\nNow you can go back to your SSO URL. You should now see three different accounts and you’ll be able to login to whichever one you want.\n\nYou can create additional users and add them to these accounts using the steps above. You can reuse the role or create one with stricter permissions.\n\nNext, let’s configure the AWS CLI and SST to use this setup.\n\n## Configure AWS CLI\nThe great thing about this setup is that you no longer need to generate AWS IAM credentials for your local machine, you can just use SSO. This is both simpler and more secure.\n\nAll you need is a single configuration file for the AWS CLI, SST, or any random scripts you want to run. And there will never be any long lived credentials stored on your machine.\n\n1. Add the following block to a ~/.aws/config file.\n\n[sso-session acme]\n\nsso_start_url = https://acme.awsapps.com/start\n\nsso_region = us-east-1\n\nMake sure to replace the sso_start_url with your SSO URL that you bookmarked. And set the region where you created IAM Identity Center as the sso_region.\n\n2. Add an entry for each environment, in this case dev and production.\n\n[profile acme-dev]\n\nsso_session = acme\n\nsso_account_id = <account-id>\n\nsso_role_name = AdministratorAccess\n\nregion = us-east-1\n\n[profile acme-production]\n\nsso_session = acme\n\nsso_account_id = <account-id>\n\nsso_role_name = AdministratorAccess\n\nregion = us-east-1\n\nYou can find the account ID from your SSO login url. If you expand the account you will see it listed with a # sign.\n\nThe region specified in the config is the default region that the CLI will use when one isn’t specified.\n\nAnd the role name is the one we created above. If you created a different role, you’d need to change this.\n\n3. Now you can login by running.\n\naws sso login --sso-session=acme\n\nThis’ll open your browser and prompt you to allow access. The sessions will last 12 hours, as we had configured previously.\n\nIf you’re using Windows with WSL, you can add a script to open the login browser of the host machine.\n\n#!/bin/bash\n\nif grep -q WSL /proc/version; then\n\n      export BROWSER=wslview\nfi\n\naws sso login --sso-session=acme\n\n4. Optionally, for Node.js projects, it can be helpful to add this to a package.json script so your team can just run npm run sso to login.\n\n\"scripts\": {\n\n     \"sso\": \"aws sso login --sso-session=acme\"\n}\n\n5. Finally, test that everything is working with a simple CLI command that targets your dev account.\n\naws sts get-caller-identity --profile=acme-dev\n\nNext, let’s configure SST to use these profiles.\n\n## Configure SST\nIn your sst.config.ts file check which stage you are deploying to and return the right profile.\n\nexport default $config({\n\n  app(input) {\n\n    return {\n\n      name: \"my-sst-app\",\n\n      home: \"aws\",\n\n      providers: {\n\n        aws: {\n\n          profile: input.stage === \"production\" ? \"acme-production\" : \"acme-dev\"\n\n        }\n\n      }\n\n    };\n\n  },\n\n  async run() {\n\n    // Your resources\n\n  }\n\n});\n\nThis will use the acme-production profile just for production and use acme-dev for everything else.\n\nIf you’ve configured AWS credentials previously through the AWS_PROFILE environment variable or through a .env file, it will override the profile set in your sst.config.ts. So make sure to remove any references to AWS_PROFILE.\n\nNow to deploy to your production account you just pass in the stage.\n\nsst deploy --stage production\n\nAnd we are done!\n", "metadata": {"source_url": "https://sst.dev/docs/aws-accounts", "title": "Set up AWS Accounts", "description": "A simple and secure guide to setting up AWS accounts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:30:52", "type": "overview", "page_metadata": {"title": "Set up AWS Accounts | SST", "ogUrl": "https://sst.dev/docs/aws-accounts/", "og:site_name": "SST", "ogDescription": "A simple and secure guide to setting up AWS accounts.", "og:url": "https://sst.dev/docs/aws-accounts/", "description": "A simple and secure guide to setting up AWS accounts.", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBBV1MlMjBBY2NvdW50cw%3D%3D.png", "language": "en", "ogTitle": "Set up AWS Accounts", "ogImage": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBBV1MlMjBBY2NvdW50cw%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "ogSiteName": "SST", "og:type": "article", "og:title": "Set up AWS Accounts", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBBV1MlMjBBY2NvdW50cw%3D%3D.png", "og:description": "A simple and secure guide to setting up AWS accounts.", "scrapeId": "9b40e42b-3890-4fa9-ab1c-93729728dbb8", "sourceURL": "https://sst.dev/docs/aws-accounts", "url": "https://sst.dev/docs/aws-accounts", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Set up AWS Accounts\"?\n\nAssistant: Here are some code examples:\n\n### AWS CLI Configuration\n```yaml\n[sso-session acme]\nsso_start_url = https://acme.awsapps.com/start\nsso_region = us-east-1\n```\n\n### AWS CLI Profile Configuration for Dev and Production\n```yaml\n[profile acme-dev]\nsso_session = acme\nsso_account_id = <account-id>\nsso_role_name = AdministratorAccess\nregion = us-east-1\n\n[profile acme-production]\nsso_session = acme\nsso_account_id = <account-id>\nsso_role_name = AdministratorAccess\nregion = us-east-1\n```\n\n### AWS SSO Login Command\n```yaml\naws sso login --sso-session=acme\n```\n\n### WSL Login Script\n```yaml\n#!/bin/bash\n\nif grep -q WSL /proc/version; then\n      export BROWSER=wslview\nfi\n\naws sso login --sso-session=acme\n```\n\n### NPM Script for SSO Login\n```yaml\n\"scripts\": {\n     \"sso\": \"aws sso login --sso-session=acme\"\n}\n```\n\n### Test AWS CLI Command\n```yaml\naws sts get-caller-identity --profile=acme-dev\n```\n\n### SST Configuration\n```yaml\nexport default $config({\n  app(input) {\n    return {\n      name: \"my-sst-app\",\n      home: \"aws\",\n      providers: {\n        aws: {\n          profile: input.stage === \"production\" ? \"acme-production\" : \"acme-dev\"\n        }\n      }\n    };\n  },\n  async run() {\n    // Your resources\n  }\n});\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/aws-accounts", "title": "Set up AWS Accounts", "description": "A simple and secure guide to setting up AWS accounts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:30:52", "type": "code_examples", "page_metadata": {"title": "Set up AWS Accounts | SST", "ogUrl": "https://sst.dev/docs/aws-accounts/", "og:site_name": "SST", "ogDescription": "A simple and secure guide to setting up AWS accounts.", "og:url": "https://sst.dev/docs/aws-accounts/", "description": "A simple and secure guide to setting up AWS accounts.", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBBV1MlMjBBY2NvdW50cw%3D%3D.png", "language": "en", "ogTitle": "Set up AWS Accounts", "ogImage": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBBV1MlMjBBY2NvdW50cw%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "ogSiteName": "SST", "og:type": "article", "og:title": "Set up AWS Accounts", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBBV1MlMjBBY2NvdW50cw%3D%3D.png", "og:description": "A simple and secure guide to setting up AWS accounts.", "scrapeId": "9b40e42b-3890-4fa9-ab1c-93729728dbb8", "sourceURL": "https://sst.dev/docs/aws-accounts", "url": "https://sst.dev/docs/aws-accounts", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Set up AWS Accounts\"?\n\nAssistant: Here are the recommended best practices:\n\n• Use a work email alias for the management account to allow future access.\n• Create separate dev and production accounts for better isolation.\n• Bookmark the unique URL for IAM Identity Center after enabling it.\n• Remove any references to AWS_PROFILE in your configuration to avoid conflicts.\n", "metadata": {"source_url": "https://sst.dev/docs/aws-accounts", "title": "Set up AWS Accounts", "description": "A simple and secure guide to setting up AWS accounts.", "has_code_examples": true, "has_best_practices": true, "section_count": 10, "timestamp": "2025-02-27 21:30:52", "type": "best_practices", "page_metadata": {"title": "Set up AWS Accounts | SST", "ogUrl": "https://sst.dev/docs/aws-accounts/", "og:site_name": "SST", "ogDescription": "A simple and secure guide to setting up AWS accounts.", "og:url": "https://sst.dev/docs/aws-accounts/", "description": "A simple and secure guide to setting up AWS accounts.", "ogLocale": "en", "og:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBBV1MlMjBBY2NvdW50cw%3D%3D.png", "language": "en", "ogTitle": "Set up AWS Accounts", "ogImage": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBBV1MlMjBBY2NvdW50cw%3D%3D.png", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "favicon": "https://sst.dev/favicon.ico", "twitter:card": "summary_large_image", "ogSiteName": "SST", "og:type": "article", "og:title": "Set up AWS Accounts", "viewport": "width=device-width, initial-scale=1", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2V0JTIwdXAlMjBBV1MlMjBBY2NvdW50cw%3D%3D.png", "og:description": "A simple and secure guide to setting up AWS accounts.", "scrapeId": "9b40e42b-3890-4fa9-ab1c-93729728dbb8", "sourceURL": "https://sst.dev/docs/aws-accounts", "url": "https://sst.dev/docs/aws-accounts", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"IAM Credentials\"?\n\nAssistant: Configure the IAM credentials that's used to deploy your app.\n\nHere's a detailed explanation:\n\n\n## Credentials\nThere are a couple of different ways to set the credentials that your app will use. The simplest is using a credentials file.\n\nHowever, if you’re still figuring out how to configure your AWS account, we recommend following our guide on it.\n\n## From a file\nBy default, your AWS credentials are in a file:\n\n- `~/.aws/credentials` on Linux, Unix, macOS\n- `C:\\Users\\USER_NAME\\.aws\\credentials` on Windows\n\nIf the credentials file does not exist on your machine.\n\n1. Follow this to create an IAM user\n2. And then use this to configure the credentials\n\nBelow we’ll look at how to customize the permissions that are granted to this user.\n\n## Your credentials file might look like:\n```\n[default]\naws_access_key_id = <YOUR_ACCESS_KEY_ID>\naws_secret_access_key = <YOUR_SECRET_ACCESS_KEY>\n```\n\nWhere `default` is the name of the credentials profile.\n\nAnd if you have multiple credentials, it might look like:\n\n```\n[default]\naws_access_key_id = <DEFAULT_ACCESS_KEY_ID>\naws_secret_access_key = <DEFAULT_SECRET_ACCESS_KEY>\n\n[staging]\naws_access_key_id = <STAGING_ACCESS_KEY_ID>\naws_secret_access_key = <STAGING_SECRET_ACCESS_KEY>\n\n[production]\naws_access_key_id = <PRODUCTION_ACCESS_KEY_ID>\naws_secret_access_key = <PRODUCTION_SECRET_ACCESS_KEY>\n```\n\nBy default, SST uses the credentials for the `default` profile. To use one of the other profiles, set the `profile` in your `sst.config.ts`.\n\n## You can customize this for the stage your app is being deployed to.\n```\napp(input) {\n  return {\n    // ...\n    providers: {\n      aws: {\n        profile: input?.stage === \"staging\" ? \"staging\" : \"default\"\n      }\n    }\n  };\n},\n```\n\nIf you’ve configured AWS credentials previously through the `AWS_PROFILE` environment variable or through a `.env` file, it will override the profile set in your `sst.config.ts`. So make sure to remove any references to `AWS_PROFILE`.\n\n## From environment variables\nSST can also detect AWS credentials in your environment and use them to deploy.\n\n- `AWS_ACCESS_KEY_ID`\n- `AWS_SECRET_ACCESS_KEY`\n\nIf you are using temporary credentials, you can also set the `AWS_SESSION_TOKEN`.\n\nThis is useful when you are deploying through a CI environment and there are no credential files around.\n\n## Precedence\nIf you have AWS credentials set in multiple places, SST will first look at:\n\n1. Environment variables\n\nThis includes `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, or `AWS_SESSION_TOKEN`, and `AWS_PROFILE`. This also includes environment variables set in a `.env` file.\n\n2. SST config\n\nThen it’ll check for the credentials or `profile` in your `sst.config.ts`.\n\n3. AWS config\n\nIt’ll then check for the `[default]` profile in your `~/.aws/config` or `C:\\Users\\USER_NAME\\.aws\\config`.\n\n4. Credential files\n\nFinally, it’ll look for any static credentials in your `~/.aws/credentials` or `C:\\Users\\USER_NAME\\.aws\\credentials`.\n\n## IAM permissions\nThe credentials above are for an IAM user and it comes with an IAM policy. This defines what resources the given user has access to. By default, we are using `AdministratorAccess`. This gives your user complete access.\n\nHowever, if you are using SST at your company, you want to secure these permissions. Here we’ll look at exactly what SST needs and how you can go about customizing it.\n\n## Let’s start with an IAM policy you can copy and paste.\n**Copy IAM Policy**\n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n          \"Sid\": \"ManageBootstrapStateBucket\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"s3:CreateBucket\",\n              \"s3:PutBucketVersioning\",\n              \"s3:PutBucketNotification\",\n              \"s3:PutBucketPolicy\",\n              \"s3:DeleteObject\",\n              \"s3:GetObject\",\n              \"s3:ListBucket\",\n              \"s3:PutObject\"\n          ],\n          \"Resource\": [\n              \"arn:aws:s3:::sst-state-*\"\n          ]\n      },\n      {\n          \"Sid\": \"ManageBootstrapAssetBucket\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"s3:CreateBucket\",\n              \"s3:PutBucketVersioning\",\n              \"s3:PutBucketNotification\",\n              \"s3:PutBucketPolicy\",\n              \"s3:DeleteObject\",\n              \"s3:GetObject\",\n              \"s3:ListBucket\",\n              \"s3:PutObject\"\n          ],\n          \"Resource\": [\n              \"arn:aws:s3:::sst-asset-*\"\n          ]\n      },\n      {\n          \"Sid\": \"ManageBootstrapECRRepo\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"ecr:CreateRepository\",\n              \"ecr:DescribeRepositories\"\n          ],\n          \"Resource\": [\n              \"arn:aws:ecr:REGION:ACCOUNT:repository/sst-asset\"\n          ]\n      },\n      {\n          \"Sid\": \"ManageBootstrapSSMParameter\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"ssm:GetParameters\",\n              \"ssm:PutParameter\"\n          ],\n          \"Resource\": [\n              \"arn:aws:ssm:REGION:ACCOUNT:parameter/sst/passphrase/*\",\n              \"arn:aws:ssm:REGION:ACCOUNT:parameter/sst/bootstrap\"\n          ]\n      },\n      {\n          \"Sid\": \"Deployments\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"*\"\n          ],\n          \"Resource\": [\n              \"*\"\n          ]\n      },\n      {\n          \"Sid\": \"ManageSecrets\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"ssm:DeleteParameter\",\n              \"ssm:GetParameter\",\n              \"ssm:GetParameters\",\n              \"ssm:GetParametersByPath\",\n              \"ssm:PutParameter\"\n          ],\n          \"Resource\": [\n              \"arn:aws:ssm:REGION:ACCOUNT:parameter/sst/*\"\n          ]\n      },\n      {\n          \"Sid\": \"LiveLambdaSocketConnection\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"appsync:EventSubscribe\",\n              \"appsync:EventPublish\",\n              \"appsync:EventConnect\"\n          ],\n          \"Resource\": [\n              \"*\"\n          ]\n      }\n    ]\n}\n```\n\nThis list roughly breaks down into the following:\n\n1. Permissions needed to bootstrap SST in your AWS account\n2. Permissions needed to deploy your app\n3. Permissions needed by the CLI\n\nLet’s look at them in detail.\n\n## Bootstrap\nSST needs to bootstrap each AWS account, in each region, once. This happens automatically when you run `sst deploy` or `sst dev`.\n\nThere are a couple of different things being bootstrapped and these are the permissions they need:\n\n- Permissions to create the bootstrap bucket for storing state.\n\n```json\n{\n    \"Sid\": \"ManageBootstrapStateBucket\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"s3:CreateBucket\",\n      \"s3:PutBucketVersioning\",\n      \"s3:PutBucketNotification\",\n      \"s3:DeleteObject\",\n      \"s3:GetObject\",\n      \"s3:ListBucket\",\n      \"s3:PutObject\"\n    ],\n    \"Resource\": [\n      \"arn:aws:s3:::sst-state-*\"\n    ]\n}\n```\n\n- Permissions to create the bootstrap bucket for storing the assets in your app. These include the Lambda function bundles and static assets in your frontends.\n\n```json\n{\n    \"Sid\": \"ManageBootstrapAssetBucket\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"s3:CreateBucket\",\n      \"s3:PutBucketVersioning\",\n      \"s3:DeleteObject\",\n      \"s3:GetObject\",\n      \"s3:ListBucket\",\n      \"s3:PutObject\"\n    ],\n    \"Resource\": [\n      \"arn:aws:s3:::sst-asset-*\"\n    ]\n}\n```\n\n- Permissions to create the bootstrap ECR repository for hosting the Docker images in your app.\n\n```json\n{\n      \"Sid\": \"ManageBootstrapECRRepo\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ecr:CreateRepository\",\n        \"ecr:DescribeRepositories\"\n      ],\n      \"Resource\": [\n        \"arn:aws:ecr:REGION:ACCOUNT:repository/sst-asset\"\n      ]\n}\n```\n\n- Permissions to create the bootstrap SSM parameter. This parameter stores information about the deployed bootstrap resources.\n\n```json\n{\n    \"Sid\": \"ManageBootstrapSSMParameter\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"ssm:GetParameters\",\n      \"ssm:PutParameter\"\n    ],\n    \"Resource\": [\n      \"arn:aws:ssm:REGION:ACCOUNT:parameter/sst/passphrase/*\",\n      \"arn:aws:ssm:REGION:ACCOUNT:parameter/sst/bootstrap\"\n    ]\n}\n```\n\n## Deploy\nThe permissions that SST needs to deploy the resources in your app, depends on what you have in your app.\n\nThe following block is placed as a template in the IAM policy above for you to customize.\n\n```\n{\n  \"Sid\": \"Deployments\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\n    \"*\"\n  ],\n  \"Resource\": [\n    \"*\"\n  ]\n}\n```\n\nBelow we’ll look at how you can try customizing this.\n\n## CLI\nThe SST CLI also makes some AWS SDK calls to your account. Here are the IAM permissions it needs.\n\n- Permissions to manage your secrets.\n\n```json\n{\n    \"Sid\": \"ManageSecrets\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"ssm:DeleteParameter\",\n      \"ssm:GetParameter\",\n      \"ssm:GetParameters\",\n      \"ssm:GetParametersByPath\",\n      \"ssm:PutParameter\"\n    ],\n    \"Resource\": [\n      \"arn:aws:ssm:us-east-1:112233445566:parameter/sst/*\"\n    ]\n}\n```\n\n- And permissions to connect to the IoT endpoint in `sst dev` to run your functions Live.\n\n```json\n{\n    \"Sid\": \"LiveLambdaSocketConnection\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"iot:DescribeEndpoint\",\n      \"iot:Connect\",\n      \"iot:Subscribe\",\n      \"iot:Publish\",\n      \"iot:Receive\"\n    ],\n    \"Resource\": [\n      \"*\"\n    ]\n}\n```\n\n## Minimize permissions\nEditing the above policy based on the resources you are adding to your app can be tedious. Here’s an approach to consider.\n\n- Sandbox accounts\n\nStart by creating separate AWS accounts for your teammates for their dev usage. In these sandbox accounts, you can grant `AdministratorAccess`. This avoids having to modify their permissions every time they make some changes.\n\n- IAM Access Analyzer\n\nFor your staging accounts, you can start by granting a broad permissions policy. Then after deploying your app and allowing it to run for a period of time. You can use your CloudTrail events to identify the actions and services used by that IAM user. The IAM Access Analyzer can then generate an IAM policy based on this activity, which you can use to replace the original policy.\n\nYou can now use this for your production accounts. Learn more about how to use the IAM Access Analyzer.\n\nIn general, you want to make sure you audit the IAM permissions you are granting on a regular basis.\n", "metadata": {"source_url": "https://sst.dev/docs/iam-credentials", "title": "IAM Credentials", "description": "Configure the IAM credentials that's used to deploy your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 21:31:28", "type": "overview", "page_metadata": {"og:type": "article", "description": "Configure the IAM credentials that's used to deploy your app.", "og:description": "Configure the IAM credentials that's used to deploy your app.", "og:title": "IAM Credentials", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/iam-credentials/", "title": "IAM Credentials | SST", "ogTitle": "IAM Credentials", "ogUrl": "https://sst.dev/docs/iam-credentials/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogImage": "https://social-cards.sst.dev/v3-docs/SUFNJTIwQ3JlZGVudGlhbHM%3D.png", "ogDescription": "Configure the IAM credentials that's used to deploy your app.", "og:site_name": "SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/SUFNJTIwQ3JlZGVudGlhbHM%3D.png", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/SUFNJTIwQ3JlZGVudGlhbHM%3D.png", "language": "en", "scrapeId": "cdd7b37e-2787-48ee-abaa-c956b94bd3fd", "sourceURL": "https://sst.dev/docs/iam-credentials", "url": "https://sst.dev/docs/iam-credentials", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"IAM Credentials\"?\n\nAssistant: Here are some code examples:\n\n### Credentials file example\n```yaml\n[default]\naws_access_key_id = <YOUR_ACCESS_KEY_ID>\naws_secret_access_key = <YOUR_SECRET_ACCESS_KEY>\n\n```\n\n### Multiple credentials example\n```yaml\n[default]\naws_access_key_id = <DEFAULT_ACCESS_KEY_ID>\naws_secret_access_key = <DEFAULT_SECRET_ACCESS_KEY>\n\n[staging]\naws_access_key_id = <STAGING_ACCESS_KEY_ID>\naws_secret_access_key = <STAGING_SECRET_ACCESS_KEY>\n\n[production]\naws_access_key_id = <PRODUCTION_ACCESS_KEY_ID>\naws_secret_access_key = <PRODUCTION_SECRET_ACCESS_KEY>\n\n```\n\n### SST config example\n```yaml\n{\n  providers: {\n    aws: {\n      profile: \"staging\"\n    }\n  }\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/iam-credentials", "title": "IAM Credentials", "description": "Configure the IAM credentials that's used to deploy your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 21:31:28", "type": "code_examples", "page_metadata": {"og:type": "article", "description": "Configure the IAM credentials that's used to deploy your app.", "og:description": "Configure the IAM credentials that's used to deploy your app.", "og:title": "IAM Credentials", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/iam-credentials/", "title": "IAM Credentials | SST", "ogTitle": "IAM Credentials", "ogUrl": "https://sst.dev/docs/iam-credentials/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogImage": "https://social-cards.sst.dev/v3-docs/SUFNJTIwQ3JlZGVudGlhbHM%3D.png", "ogDescription": "Configure the IAM credentials that's used to deploy your app.", "og:site_name": "SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/SUFNJTIwQ3JlZGVudGlhbHM%3D.png", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/SUFNJTIwQ3JlZGVudGlhbHM%3D.png", "language": "en", "scrapeId": "cdd7b37e-2787-48ee-abaa-c956b94bd3fd", "sourceURL": "https://sst.dev/docs/iam-credentials", "url": "https://sst.dev/docs/iam-credentials", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"IAM Credentials\"?\n\nAssistant: Here are the recommended best practices:\n\n• Start by creating separate AWS accounts for your teammates for their dev usage. In these sandbox accounts, you can grant AdministratorAccess.\n• For your staging accounts, you can start by granting a broad permissions policy. Then after deploying your app and allowing it to run for a period of time, use CloudTrail events to identify the actions and services used by that IAM user.\n• Use IAM Access Analyzer to generate an IAM policy based on activity, which can be used to replace the original policy.\n• Regularly audit the IAM permissions you are granting.\n", "metadata": {"source_url": "https://sst.dev/docs/iam-credentials", "title": "IAM Credentials", "description": "Configure the IAM credentials that's used to deploy your app.", "has_code_examples": true, "has_best_practices": true, "section_count": 12, "timestamp": "2025-02-27 21:31:28", "type": "best_practices", "page_metadata": {"og:type": "article", "description": "Configure the IAM credentials that's used to deploy your app.", "og:description": "Configure the IAM credentials that's used to deploy your app.", "og:title": "IAM Credentials", "ogLocale": "en", "viewport": "width=device-width, initial-scale=1", "og:url": "https://sst.dev/docs/iam-credentials/", "title": "IAM Credentials | SST", "ogTitle": "IAM Credentials", "ogUrl": "https://sst.dev/docs/iam-credentials/", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "ogImage": "https://social-cards.sst.dev/v3-docs/SUFNJTIwQ3JlZGVudGlhbHM%3D.png", "ogDescription": "Configure the IAM credentials that's used to deploy your app.", "og:site_name": "SST", "twitter:card": "summary_large_image", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "og:image": "https://social-cards.sst.dev/v3-docs/SUFNJTIwQ3JlZGVudGlhbHM%3D.png", "og:locale": "en", "twitter:image": "https://social-cards.sst.dev/v3-docs/SUFNJTIwQ3JlZGVudGlhbHM%3D.png", "language": "en", "scrapeId": "cdd7b37e-2787-48ee-abaa-c956b94bd3fd", "sourceURL": "https://sst.dev/docs/iam-credentials", "url": "https://sst.dev/docs/iam-credentials", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Secret\"?\n\nAssistant: Reference doc for the `sst.Secret` component.\n\nHere's a detailed explanation:\n\n\n## Create a secret\nThe name of a secret follows the same rules as a component name. It must start with a capital letter and contain only letters and numbers.\n\n## Set a placeholder\nYou can optionally set a `placeholder`.\n\n## Set the value of the secret\nYou can then set the value of a secret using the [CLI](https://sst.dev/docs/reference/cli/).\n\n## Set a fallback for the secret\nYou can set a _fallback_ value for the secret with the `--fallback` flag. If the secret is not set for a stage, it’ll use the fallback value instead. This is useful for PR environments that are auto-deployed.\n\n## Use the secret in your app config\nYou can now use the secret in your app config. This is an [Output](https://sst.dev/docs/components#outputs) that can be used as an Input to other components.\n\n## Link the secret to a resource\nYou can link the secret to other resources, like a function or your Next.js app. Once linked, you can use the secret in your function code.\n\n## Constructor\n`new Secret(name, placeholder?)`\n\n## Parameters\n- `name` `string`\n- `placeholder?` `Input` `<` `string` `>`\n\nA placeholder value of the secret. This can be useful for cases where you might not be storing sensitive values.\n\n## Properties\n### [name](https://sst.dev/docs/component/secret#name)\n**Type** `Output` `<` `string` `>`\n\nThe name of the secret.\n\n### [placeholder](https://sst.dev/docs/component/secret#placeholder)\n**Type** `undefined` ` | ` `Output` `<` `string` `>`\n\nThe placeholder value of the secret.\n\n### [value](https://sst.dev/docs/component/secret#value)\n**Type** `Output` `<` `string` `>`\n\nThe value of the secret. It’ll be `undefined` if the secret has not been set through the CLI or if the `placeholder` hasn’t been set.\n\n## SDK\nUse the [SDK](https://sst.dev/docs/reference/sdk/) in your runtime to interact with your infrastructure.\n\n## Links\nThis is accessible through the `Resource` object in the [SDK](https://sst.dev/docs/reference/sdk/#links).\n\n- `value` `string`\n\nThe value of the secret. It’ll be `undefined` if the secret has not been set through the CLI or if the `placeholder` hasn’t been set.\n", "metadata": {"source_url": "https://sst.dev/docs/component/secret", "title": "Secret", "description": "Reference doc for the `sst.Secret` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 21:31:41", "type": "overview", "page_metadata": {"ogDescription": "Reference doc for the `sst.Secret` component.", "favicon": "https://sst.dev/favicon.ico", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/U2VjcmV0.png", "og:description": "Reference doc for the `sst.Secret` component.", "language": "en", "og:url": "https://sst.dev/docs/component/secret/", "og:title": "Secret", "og:type": "article", "ogSiteName": "SST", "description": "Reference doc for the `sst.Secret` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2VjcmV0.png", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/U2VjcmV0.png", "ogUrl": "https://sst.dev/docs/component/secret/", "ogLocale": "en", "ogTitle": "Secret", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "title": "Secret | SST", "scrapeId": "8952d241-0346-466d-be4b-d060e42d4715", "sourceURL": "https://sst.dev/docs/component/secret", "url": "https://sst.dev/docs/component/secret", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Secret\"?\n\nAssistant: Here are some code examples:\n\n### Create a secret example\n```yaml\nconst secret = new sst.Secret(\"MySecret\");\n```\n\n### Set a placeholder example\n```yaml\nconst secret = new sst.Secret(\"MySecret\", \"my-secret-placeholder-value\");\n```\n\n### Set the value of the secret example\n```yaml\nsst secret set MySecret my-secret-value\n```\n\n### Set a fallback for the secret example\n```yaml\nsst secret set MySecret my-fallback-value --fallback\n```\n\n### Use the secret in your app config example\n```yaml\nconsole.log(mySecret.value);\n```\n\n### Link the secret to a resource example\n```yaml\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [secret]\n});\n```\n\n### Use the secret in function code example\n```yaml\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MySecret.value);\n```\n\n### Constructor example\n```yaml\nnew Secret(name, placeholder?)\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/component/secret", "title": "Secret", "description": "Reference doc for the `sst.Secret` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 21:31:41", "type": "code_examples", "page_metadata": {"ogDescription": "Reference doc for the `sst.Secret` component.", "favicon": "https://sst.dev/favicon.ico", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/U2VjcmV0.png", "og:description": "Reference doc for the `sst.Secret` component.", "language": "en", "og:url": "https://sst.dev/docs/component/secret/", "og:title": "Secret", "og:type": "article", "ogSiteName": "SST", "description": "Reference doc for the `sst.Secret` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2VjcmV0.png", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/U2VjcmV0.png", "ogUrl": "https://sst.dev/docs/component/secret/", "ogLocale": "en", "ogTitle": "Secret", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "title": "Secret | SST", "scrapeId": "8952d241-0346-466d-be4b-d060e42d4715", "sourceURL": "https://sst.dev/docs/component/secret", "url": "https://sst.dev/docs/component/secret", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Secret\"?\n\nAssistant: Here are the recommended best practices:\n\n• The name of a secret must start with a capital letter and contain only letters and numbers.\n• Use a placeholder value for cases where you might not be storing sensitive values.\n• Set a fallback value for the secret for environments that are auto-deployed.\n", "metadata": {"source_url": "https://sst.dev/docs/component/secret", "title": "Secret", "description": "Reference doc for the `sst.Secret` component.", "has_code_examples": true, "has_best_practices": true, "section_count": 11, "timestamp": "2025-02-27 21:31:41", "type": "best_practices", "page_metadata": {"ogDescription": "Reference doc for the `sst.Secret` component.", "favicon": "https://sst.dev/favicon.ico", "og:site_name": "SST", "ogImage": "https://social-cards.sst.dev/v3-docs/U2VjcmV0.png", "og:description": "Reference doc for the `sst.Secret` component.", "language": "en", "og:url": "https://sst.dev/docs/component/secret/", "og:title": "Secret", "og:type": "article", "ogSiteName": "SST", "description": "Reference doc for the `sst.Secret` component.", "twitter:image": "https://social-cards.sst.dev/v3-docs/U2VjcmV0.png", "viewport": "width=device-width, initial-scale=1", "twitter:card": "summary_large_image", "og:image": "https://social-cards.sst.dev/v3-docs/U2VjcmV0.png", "ogUrl": "https://sst.dev/docs/component/secret/", "ogLocale": "en", "ogTitle": "Secret", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:locale": "en", "title": "Secret | SST", "scrapeId": "8952d241-0346-466d-be4b-d060e42d4715", "sourceURL": "https://sst.dev/docs/component/secret", "url": "https://sst.dev/docs/component/secret", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What is \"Examples - SST\"?\n\nAssistant: A collection of examples demonstrating how to use SST.\n\nHere's a detailed explanation:\n\n\n## Introduction\nThis section provides an overview of the examples available in SST.\n\n## Basic Examples\nHere you will find simple examples to get started with SST.\n\n## Advanced Examples\nThese examples cover more complex use cases and integrations.\n\n## Deployment\nInstructions on how to deploy your SST applications.\n\n## Troubleshooting\nCommon issues and their solutions.\n", "metadata": {"source_url": "https://sst.dev/docs/examples", "title": "Examples - SST", "description": "A collection of examples demonstrating how to use SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:07:58", "type": "overview", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/RXhhbXBsZXM%3D.png", "og:locale": "en", "ogTitle": "Examples", "og:title": "Examples", "og:site_name": "SST", "description": "A collection of example apps for reference.", "language": "en", "twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/examples/", "og:description": "A collection of example apps for reference.", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RXhhbXBsZXM%3D.png", "ogDescription": "A collection of example apps for reference.", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "ogUrl": "https://sst.dev/docs/examples/", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/RXhhbXBsZXM%3D.png", "title": "Examples | SST", "og:type": "article", "scrapeId": "4230e76b-20c3-44d8-a94c-c7e25ddaa23b", "sourceURL": "https://sst.dev/docs/examples", "url": "https://sst.dev/docs/examples", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: Can you show me some code examples for \"Examples - SST\"?\n\nAssistant: Here are some code examples:\n\n### Basic SST App\n```yaml\nimport { App } from \"sst\";\n\nexport default function MyApp() {\n  return <h1>Hello, SST!</h1>;\n}\n```\n\n", "metadata": {"source_url": "https://sst.dev/docs/examples", "title": "Examples - SST", "description": "A collection of examples demonstrating how to use SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:07:58", "type": "code_examples", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/RXhhbXBsZXM%3D.png", "og:locale": "en", "ogTitle": "Examples", "og:title": "Examples", "og:site_name": "SST", "description": "A collection of example apps for reference.", "language": "en", "twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/examples/", "og:description": "A collection of example apps for reference.", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RXhhbXBsZXM%3D.png", "ogDescription": "A collection of example apps for reference.", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "ogUrl": "https://sst.dev/docs/examples/", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/RXhhbXBsZXM%3D.png", "title": "Examples | SST", "og:type": "article", "scrapeId": "4230e76b-20c3-44d8-a94c-c7e25ddaa23b", "sourceURL": "https://sst.dev/docs/examples", "url": "https://sst.dev/docs/examples", "statusCode": 200}}}
{"text": "System: You are a helpful SST expert.\n\nUser: What are the best practices for \"Examples - SST\"?\n\nAssistant: Here are the recommended best practices:\n\n• Always keep your dependencies updated.\n• Use environment variables for sensitive information.\n", "metadata": {"source_url": "https://sst.dev/docs/examples", "title": "Examples - SST", "description": "A collection of examples demonstrating how to use SST.", "has_code_examples": true, "has_best_practices": true, "section_count": 5, "timestamp": "2025-02-27 22:07:58", "type": "best_practices", "page_metadata": {"twitter:image": "https://social-cards.sst.dev/v3-docs/RXhhbXBsZXM%3D.png", "og:locale": "en", "ogTitle": "Examples", "og:title": "Examples", "og:site_name": "SST", "description": "A collection of example apps for reference.", "language": "en", "twitter:card": "summary_large_image", "og:url": "https://sst.dev/docs/examples/", "og:description": "A collection of example apps for reference.", "ogLocale": "en", "ogImage": "https://social-cards.sst.dev/v3-docs/RXhhbXBsZXM%3D.png", "ogDescription": "A collection of example apps for reference.", "favicon": "https://sst.dev/favicon.ico", "ogSiteName": "SST", "ogUrl": "https://sst.dev/docs/examples/", "viewport": "width=device-width, initial-scale=1", "generator": ["Astro v4.16.17", "Starlight v0.28.6"], "og:image": "https://social-cards.sst.dev/v3-docs/RXhhbXBsZXM%3D.png", "title": "Examples | SST", "og:type": "article", "scrapeId": "4230e76b-20c3-44d8-a94c-c7e25ddaa23b", "sourceURL": "https://sst.dev/docs/examples", "url": "https://sst.dev/docs/examples", "statusCode": 200}}}
